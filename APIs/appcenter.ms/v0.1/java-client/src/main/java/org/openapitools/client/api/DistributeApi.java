/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppleMappingCreateRequest;
import org.openapitools.client.model.AppleMappingGet200Response;
import org.openapitools.client.model.AppleMappingTestFlightGroups200ResponseInner;
import java.math.BigDecimal;
import org.openapitools.client.model.DevicesGetReleaseUpdateDevicesStatus200Response;
import org.openapitools.client.model.DevicesList200ResponseInner;
import org.openapitools.client.model.DevicesRegisterUserForDeviceRequest;
import org.openapitools.client.model.DistibutionReleasesInstallAnalyticsRequest;
import org.openapitools.client.model.OrganizationsListAdministeredDefaultResponseError;
import org.openapitools.client.model.ProvisioningProfileResponse;
import org.openapitools.client.model.ReleasesAddDistributionGroup201Response;
import org.openapitools.client.model.ReleasesAddDistributionGroupRequest;
import org.openapitools.client.model.ReleasesAddStore201Response;
import org.openapitools.client.model.ReleasesAddStoreRequest;
import org.openapitools.client.model.ReleasesAddTestersRequest;
import org.openapitools.client.model.ReleasesCreateReleaseUpload201Response;
import org.openapitools.client.model.ReleasesCreateReleaseUploadRequest;
import org.openapitools.client.model.ReleasesGetLatestByDistributionGroup200Response;
import org.openapitools.client.model.ReleasesGetPublicGroupsForReleaseByHash200ResponseInner;
import org.openapitools.client.model.ReleasesGetReleaseUploadStatus200Response;
import org.openapitools.client.model.ReleasesListByDistributionGroup200ResponseInner;
import org.openapitools.client.model.ReleasesListLatest200ResponseInner;
import org.openapitools.client.model.ReleasesPutDistributionGroupRequest;
import org.openapitools.client.model.ReleasesUpdate200Response;
import org.openapitools.client.model.ReleasesUpdateDetails200Response;
import org.openapitools.client.model.ReleasesUpdateDetails400Response;
import org.openapitools.client.model.ReleasesUpdateDetailsRequest;
import org.openapitools.client.model.ReleasesUpdateReleaseUploadStatus200Response;
import org.openapitools.client.model.ReleasesUpdateReleaseUploadStatusRequest;
import org.openapitools.client.model.ReleasesUpdateRequest;
import org.openapitools.client.model.StoreNotificationsGetNotificationByAppId200Response;
import org.openapitools.client.model.StoreReleasesGetLatest200ResponseInner;
import org.openapitools.client.model.StoreReleasesGetPublishError200Response;
import org.openapitools.client.model.StoreReleasesGetRealTimeStatusByReleaseId200Response;
import org.openapitools.client.model.StoreReleasesList200ResponseInner;
import org.openapitools.client.model.StoresCreateRequest;
import org.openapitools.client.model.StoresList200ResponseInner;
import org.openapitools.client.model.StoresPatchRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DistributeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DistributeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DistributeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appleMappingCreate
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param appleMappingCreateRequest The apple app mapping object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appleMappingCreateCall(String ownerName, String appName, AppleMappingCreateRequest appleMappingCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appleMappingCreateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/apple_mapping"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appleMappingCreateValidateBeforeCall(String ownerName, String appName, AppleMappingCreateRequest appleMappingCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling appleMappingCreate(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling appleMappingCreate(Async)");
        }

        // verify the required parameter 'appleMappingCreateRequest' is set
        if (appleMappingCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'appleMappingCreateRequest' when calling appleMappingCreate(Async)");
        }

        return appleMappingCreateCall(ownerName, appName, appleMappingCreateRequest, _callback);

    }

    /**
     * 
     * Create a mapping for an existing app in apple store for the specified application.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param appleMappingCreateRequest The apple app mapping object (required)
     * @return AppleMappingGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AppleMappingGet200Response appleMappingCreate(String ownerName, String appName, AppleMappingCreateRequest appleMappingCreateRequest) throws ApiException {
        ApiResponse<AppleMappingGet200Response> localVarResp = appleMappingCreateWithHttpInfo(ownerName, appName, appleMappingCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a mapping for an existing app in apple store for the specified application.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param appleMappingCreateRequest The apple app mapping object (required)
     * @return ApiResponse&lt;AppleMappingGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppleMappingGet200Response> appleMappingCreateWithHttpInfo(String ownerName, String appName, AppleMappingCreateRequest appleMappingCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = appleMappingCreateValidateBeforeCall(ownerName, appName, appleMappingCreateRequest, null);
        Type localVarReturnType = new TypeToken<AppleMappingGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a mapping for an existing app in apple store for the specified application.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param appleMappingCreateRequest The apple app mapping object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appleMappingCreateAsync(String ownerName, String appName, AppleMappingCreateRequest appleMappingCreateRequest, final ApiCallback<AppleMappingGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appleMappingCreateValidateBeforeCall(ownerName, appName, appleMappingCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<AppleMappingGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appleMappingDelete
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appleMappingDeleteCall(String ownerName, String appName, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/apple_mapping"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appleMappingDeleteValidateBeforeCall(String ownerName, String appName, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling appleMappingDelete(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling appleMappingDelete(Async)");
        }

        return appleMappingDeleteCall(ownerName, appName, body, _callback);

    }

    /**
     * 
     * Delete mapping of apple app to an existing app in apple store.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void appleMappingDelete(String ownerName, String appName, String body) throws ApiException {
        appleMappingDeleteWithHttpInfo(ownerName, appName, body);
    }

    /**
     * 
     * Delete mapping of apple app to an existing app in apple store.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appleMappingDeleteWithHttpInfo(String ownerName, String appName, String body) throws ApiException {
        okhttp3.Call localVarCall = appleMappingDeleteValidateBeforeCall(ownerName, appName, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete mapping of apple app to an existing app in apple store.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appleMappingDeleteAsync(String ownerName, String appName, String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appleMappingDeleteValidateBeforeCall(ownerName, appName, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appleMappingGet
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appleMappingGetCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/apple_mapping"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appleMappingGetValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling appleMappingGet(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling appleMappingGet(Async)");
        }

        return appleMappingGetCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Get mapping of apple app to an existing app in apple store.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return AppleMappingGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AppleMappingGet200Response appleMappingGet(String ownerName, String appName) throws ApiException {
        ApiResponse<AppleMappingGet200Response> localVarResp = appleMappingGetWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get mapping of apple app to an existing app in apple store.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;AppleMappingGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppleMappingGet200Response> appleMappingGetWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = appleMappingGetValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<AppleMappingGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get mapping of apple app to an existing app in apple store.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appleMappingGetAsync(String ownerName, String appName, final ApiCallback<AppleMappingGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appleMappingGetValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<AppleMappingGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appleMappingTestFlightGroups
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call appleMappingTestFlightGroupsCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/apple_test_flight_groups"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call appleMappingTestFlightGroupsValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling appleMappingTestFlightGroups(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling appleMappingTestFlightGroups(Async)");
        }

        return appleMappingTestFlightGroupsCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Fetch all apple test flight groups
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;AppleMappingTestFlightGroups200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public List<AppleMappingTestFlightGroups200ResponseInner> appleMappingTestFlightGroups(String ownerName, String appName) throws ApiException {
        ApiResponse<List<AppleMappingTestFlightGroups200ResponseInner>> localVarResp = appleMappingTestFlightGroupsWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch all apple test flight groups
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;AppleMappingTestFlightGroups200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<List<AppleMappingTestFlightGroups200ResponseInner>> appleMappingTestFlightGroupsWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = appleMappingTestFlightGroupsValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<AppleMappingTestFlightGroups200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch all apple test flight groups
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call appleMappingTestFlightGroupsAsync(String ownerName, String appName, final ApiCallback<List<AppleMappingTestFlightGroups200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = appleMappingTestFlightGroupsValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<AppleMappingTestFlightGroups200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesDeviceDetails
     * @param deviceUdid The UDID of the device (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;bad_request&lt;/b&gt;: Devices information can only be requested for iOS apps.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;forbidden&lt;/b&gt;: The user is not allowed to view someone else&#39;s device.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;b&gt;not_found&lt;/b&gt;: The user or device can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesDeviceDetailsCall(String deviceUdid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/user/devices/{device_udid}"
            .replace("{" + "device_udid" + "}", localVarApiClient.escapeString(deviceUdid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesDeviceDetailsValidateBeforeCall(String deviceUdid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceUdid' is set
        if (deviceUdid == null) {
            throw new ApiException("Missing the required parameter 'deviceUdid' when calling devicesDeviceDetails(Async)");
        }

        return devicesDeviceDetailsCall(deviceUdid, _callback);

    }

    /**
     * 
     * Returns the device details.
     * @param deviceUdid The UDID of the device (required)
     * @return DevicesList200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;bad_request&lt;/b&gt;: Devices information can only be requested for iOS apps.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;forbidden&lt;/b&gt;: The user is not allowed to view someone else&#39;s device.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;b&gt;not_found&lt;/b&gt;: The user or device can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public DevicesList200ResponseInner devicesDeviceDetails(String deviceUdid) throws ApiException {
        ApiResponse<DevicesList200ResponseInner> localVarResp = devicesDeviceDetailsWithHttpInfo(deviceUdid);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the device details.
     * @param deviceUdid The UDID of the device (required)
     * @return ApiResponse&lt;DevicesList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;bad_request&lt;/b&gt;: Devices information can only be requested for iOS apps.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;forbidden&lt;/b&gt;: The user is not allowed to view someone else&#39;s device.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;b&gt;not_found&lt;/b&gt;: The user or device can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DevicesList200ResponseInner> devicesDeviceDetailsWithHttpInfo(String deviceUdid) throws ApiException {
        okhttp3.Call localVarCall = devicesDeviceDetailsValidateBeforeCall(deviceUdid, null);
        Type localVarReturnType = new TypeToken<DevicesList200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the device details.
     * @param deviceUdid The UDID of the device (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;bad_request&lt;/b&gt;: Devices information can only be requested for iOS apps.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;forbidden&lt;/b&gt;: The user is not allowed to view someone else&#39;s device.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;b&gt;not_found&lt;/b&gt;: The user or device can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesDeviceDetailsAsync(String deviceUdid, final ApiCallback<DevicesList200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesDeviceDetailsValidateBeforeCall(deviceUdid, _callback);
        Type localVarReturnType = new TypeToken<DevicesList200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesGetReleaseUpdateDevicesStatus
     * @param releaseId The ID of the release. (required)
     * @param resignId The ID of the resign operation. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param includeProvisioningProfile A boolean value that indicates if the provisioning profile should be return in addition to the status. When set to true, the provisioning profile will be returned only when status is &#39;complete&#39; or &#39;preparing_for_testers&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;b&gt;not_found&lt;/b&gt;: A distribution group can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetReleaseUpdateDevicesStatusCall(String releaseId, String resignId, String ownerName, String appName, Boolean includeProvisioningProfile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/update_devices/{resign_id}"
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()))
            .replace("{" + "resign_id" + "}", localVarApiClient.escapeString(resignId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeProvisioningProfile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_provisioning_profile", includeProvisioningProfile));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesGetReleaseUpdateDevicesStatusValidateBeforeCall(String releaseId, String resignId, String ownerName, String appName, Boolean includeProvisioningProfile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling devicesGetReleaseUpdateDevicesStatus(Async)");
        }

        // verify the required parameter 'resignId' is set
        if (resignId == null) {
            throw new ApiException("Missing the required parameter 'resignId' when calling devicesGetReleaseUpdateDevicesStatus(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling devicesGetReleaseUpdateDevicesStatus(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling devicesGetReleaseUpdateDevicesStatus(Async)");
        }

        return devicesGetReleaseUpdateDevicesStatusCall(releaseId, resignId, ownerName, appName, includeProvisioningProfile, _callback);

    }

    /**
     * 
     * Returns the resign status to the caller
     * @param releaseId The ID of the release. (required)
     * @param resignId The ID of the resign operation. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param includeProvisioningProfile A boolean value that indicates if the provisioning profile should be return in addition to the status. When set to true, the provisioning profile will be returned only when status is &#39;complete&#39; or &#39;preparing_for_testers&#39;. (optional)
     * @return DevicesGetReleaseUpdateDevicesStatus200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;b&gt;not_found&lt;/b&gt;: A distribution group can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public DevicesGetReleaseUpdateDevicesStatus200Response devicesGetReleaseUpdateDevicesStatus(String releaseId, String resignId, String ownerName, String appName, Boolean includeProvisioningProfile) throws ApiException {
        ApiResponse<DevicesGetReleaseUpdateDevicesStatus200Response> localVarResp = devicesGetReleaseUpdateDevicesStatusWithHttpInfo(releaseId, resignId, ownerName, appName, includeProvisioningProfile);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the resign status to the caller
     * @param releaseId The ID of the release. (required)
     * @param resignId The ID of the resign operation. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param includeProvisioningProfile A boolean value that indicates if the provisioning profile should be return in addition to the status. When set to true, the provisioning profile will be returned only when status is &#39;complete&#39; or &#39;preparing_for_testers&#39;. (optional)
     * @return ApiResponse&lt;DevicesGetReleaseUpdateDevicesStatus200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;b&gt;not_found&lt;/b&gt;: A distribution group can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DevicesGetReleaseUpdateDevicesStatus200Response> devicesGetReleaseUpdateDevicesStatusWithHttpInfo(String releaseId, String resignId, String ownerName, String appName, Boolean includeProvisioningProfile) throws ApiException {
        okhttp3.Call localVarCall = devicesGetReleaseUpdateDevicesStatusValidateBeforeCall(releaseId, resignId, ownerName, appName, includeProvisioningProfile, null);
        Type localVarReturnType = new TypeToken<DevicesGetReleaseUpdateDevicesStatus200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the resign status to the caller
     * @param releaseId The ID of the release. (required)
     * @param resignId The ID of the resign operation. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param includeProvisioningProfile A boolean value that indicates if the provisioning profile should be return in addition to the status. When set to true, the provisioning profile will be returned only when status is &#39;complete&#39; or &#39;preparing_for_testers&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;b&gt;not_found&lt;/b&gt;: A distribution group can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetReleaseUpdateDevicesStatusAsync(String releaseId, String resignId, String ownerName, String appName, Boolean includeProvisioningProfile, final ApiCallback<DevicesGetReleaseUpdateDevicesStatus200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesGetReleaseUpdateDevicesStatusValidateBeforeCall(releaseId, resignId, ownerName, appName, includeProvisioningProfile, _callback);
        Type localVarReturnType = new TypeToken<DevicesGetReleaseUpdateDevicesStatus200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesList
     * @param distributionGroupName The name of the distribution group. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releaseId when provided, gets the provisioning state of the devices owned by users of this distribution group when compared to the provided release. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;bad_request&lt;/b&gt;: Devices information can only be requested for iOS apps.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;b&gt;not_found&lt;/b&gt;: A distribution group can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesListCall(String distributionGroupName, String ownerName, String appName, BigDecimal releaseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices"
            .replace("{" + "distribution_group_name" + "}", localVarApiClient.escapeString(distributionGroupName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (releaseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("release_id", releaseId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesListValidateBeforeCall(String distributionGroupName, String ownerName, String appName, BigDecimal releaseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'distributionGroupName' is set
        if (distributionGroupName == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupName' when calling devicesList(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling devicesList(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling devicesList(Async)");
        }

        return devicesListCall(distributionGroupName, ownerName, appName, releaseId, _callback);

    }

    /**
     * 
     * Returns all devices associated with the given distribution group
     * @param distributionGroupName The name of the distribution group. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releaseId when provided, gets the provisioning state of the devices owned by users of this distribution group when compared to the provided release. (optional)
     * @return List&lt;DevicesList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;bad_request&lt;/b&gt;: Devices information can only be requested for iOS apps.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;b&gt;not_found&lt;/b&gt;: A distribution group can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public List<DevicesList200ResponseInner> devicesList(String distributionGroupName, String ownerName, String appName, BigDecimal releaseId) throws ApiException {
        ApiResponse<List<DevicesList200ResponseInner>> localVarResp = devicesListWithHttpInfo(distributionGroupName, ownerName, appName, releaseId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all devices associated with the given distribution group
     * @param distributionGroupName The name of the distribution group. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releaseId when provided, gets the provisioning state of the devices owned by users of this distribution group when compared to the provided release. (optional)
     * @return ApiResponse&lt;List&lt;DevicesList200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;bad_request&lt;/b&gt;: Devices information can only be requested for iOS apps.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;b&gt;not_found&lt;/b&gt;: A distribution group can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DevicesList200ResponseInner>> devicesListWithHttpInfo(String distributionGroupName, String ownerName, String appName, BigDecimal releaseId) throws ApiException {
        okhttp3.Call localVarCall = devicesListValidateBeforeCall(distributionGroupName, ownerName, appName, releaseId, null);
        Type localVarReturnType = new TypeToken<List<DevicesList200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all devices associated with the given distribution group
     * @param distributionGroupName The name of the distribution group. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releaseId when provided, gets the provisioning state of the devices owned by users of this distribution group when compared to the provided release. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;bad_request&lt;/b&gt;: Devices information can only be requested for iOS apps.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;b&gt;not_found&lt;/b&gt;: A distribution group can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesListAsync(String distributionGroupName, String ownerName, String appName, BigDecimal releaseId, final ApiCallback<List<DevicesList200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesListValidateBeforeCall(distributionGroupName, ownerName, appName, releaseId, _callback);
        Type localVarReturnType = new TypeToken<List<DevicesList200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesListCsvFormat
     * @param distributionGroupName The name of the distribution group. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param unprovisionedOnly when true, filters out provisioned devices (optional, default to false)
     * @param udids multiple UDIDs which should be part of the resulting CSV. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;bad_request&lt;/b&gt;: Devices information can only be requested for iOS apps.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;b&gt;not_found&lt;/b&gt;: A distribution group can&#39;t be found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesListCsvFormatCall(String distributionGroupName, String ownerName, String appName, Boolean unprovisionedOnly, List<String> udids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices/download_devices_list"
            .replace("{" + "distribution_group_name" + "}", localVarApiClient.escapeString(distributionGroupName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (unprovisionedOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unprovisioned_only", unprovisionedOnly));
        }

        if (udids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "udids", udids));
        }

        final String[] localVarAccepts = {
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesListCsvFormatValidateBeforeCall(String distributionGroupName, String ownerName, String appName, Boolean unprovisionedOnly, List<String> udids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'distributionGroupName' is set
        if (distributionGroupName == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupName' when calling devicesListCsvFormat(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling devicesListCsvFormat(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling devicesListCsvFormat(Async)");
        }

        return devicesListCsvFormatCall(distributionGroupName, ownerName, appName, unprovisionedOnly, udids, _callback);

    }

    /**
     * 
     * Returns all devices associated with the given distribution group.
     * @param distributionGroupName The name of the distribution group. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param unprovisionedOnly when true, filters out provisioned devices (optional, default to false)
     * @param udids multiple UDIDs which should be part of the resulting CSV. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;bad_request&lt;/b&gt;: Devices information can only be requested for iOS apps.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;b&gt;not_found&lt;/b&gt;: A distribution group can&#39;t be found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error. </td><td>  -  </td></tr>
     </table>
     */
    public void devicesListCsvFormat(String distributionGroupName, String ownerName, String appName, Boolean unprovisionedOnly, List<String> udids) throws ApiException {
        devicesListCsvFormatWithHttpInfo(distributionGroupName, ownerName, appName, unprovisionedOnly, udids);
    }

    /**
     * 
     * Returns all devices associated with the given distribution group.
     * @param distributionGroupName The name of the distribution group. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param unprovisionedOnly when true, filters out provisioned devices (optional, default to false)
     * @param udids multiple UDIDs which should be part of the resulting CSV. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;bad_request&lt;/b&gt;: Devices information can only be requested for iOS apps.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;b&gt;not_found&lt;/b&gt;: A distribution group can&#39;t be found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> devicesListCsvFormatWithHttpInfo(String distributionGroupName, String ownerName, String appName, Boolean unprovisionedOnly, List<String> udids) throws ApiException {
        okhttp3.Call localVarCall = devicesListCsvFormatValidateBeforeCall(distributionGroupName, ownerName, appName, unprovisionedOnly, udids, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns all devices associated with the given distribution group.
     * @param distributionGroupName The name of the distribution group. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param unprovisionedOnly when true, filters out provisioned devices (optional, default to false)
     * @param udids multiple UDIDs which should be part of the resulting CSV. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;bad_request&lt;/b&gt;: Devices information can only be requested for iOS apps.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;b&gt;not_found&lt;/b&gt;: A distribution group can&#39;t be found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesListCsvFormatAsync(String distributionGroupName, String ownerName, String appName, Boolean unprovisionedOnly, List<String> udids, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesListCsvFormatValidateBeforeCall(distributionGroupName, ownerName, appName, unprovisionedOnly, udids, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesRegisterUserForDevice
     * @param userId The ID of the user (required)
     * @param devicesRegisterUserForDeviceRequest The device info. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;b&gt;not_found&lt;/b&gt;: The user or the device can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesRegisterUserForDeviceCall(String userId, DevicesRegisterUserForDeviceRequest devicesRegisterUserForDeviceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = devicesRegisterUserForDeviceRequest;

        // create path and map variables
        String localVarPath = "/v0.1/users/{user_id}/devices/register"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesRegisterUserForDeviceValidateBeforeCall(String userId, DevicesRegisterUserForDeviceRequest devicesRegisterUserForDeviceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling devicesRegisterUserForDevice(Async)");
        }

        // verify the required parameter 'devicesRegisterUserForDeviceRequest' is set
        if (devicesRegisterUserForDeviceRequest == null) {
            throw new ApiException("Missing the required parameter 'devicesRegisterUserForDeviceRequest' when calling devicesRegisterUserForDevice(Async)");
        }

        return devicesRegisterUserForDeviceCall(userId, devicesRegisterUserForDeviceRequest, _callback);

    }

    /**
     * 
     * Registers a user for an existing device
     * @param userId The ID of the user (required)
     * @param devicesRegisterUserForDeviceRequest The device info. (required)
     * @return DevicesList200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;b&gt;not_found&lt;/b&gt;: The user or the device can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public DevicesList200ResponseInner devicesRegisterUserForDevice(String userId, DevicesRegisterUserForDeviceRequest devicesRegisterUserForDeviceRequest) throws ApiException {
        ApiResponse<DevicesList200ResponseInner> localVarResp = devicesRegisterUserForDeviceWithHttpInfo(userId, devicesRegisterUserForDeviceRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Registers a user for an existing device
     * @param userId The ID of the user (required)
     * @param devicesRegisterUserForDeviceRequest The device info. (required)
     * @return ApiResponse&lt;DevicesList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;b&gt;not_found&lt;/b&gt;: The user or the device can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DevicesList200ResponseInner> devicesRegisterUserForDeviceWithHttpInfo(String userId, DevicesRegisterUserForDeviceRequest devicesRegisterUserForDeviceRequest) throws ApiException {
        okhttp3.Call localVarCall = devicesRegisterUserForDeviceValidateBeforeCall(userId, devicesRegisterUserForDeviceRequest, null);
        Type localVarReturnType = new TypeToken<DevicesList200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Registers a user for an existing device
     * @param userId The ID of the user (required)
     * @param devicesRegisterUserForDeviceRequest The device info. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;b&gt;not_found&lt;/b&gt;: The user or the device can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesRegisterUserForDeviceAsync(String userId, DevicesRegisterUserForDeviceRequest devicesRegisterUserForDeviceRequest, final ApiCallback<DevicesList200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesRegisterUserForDeviceValidateBeforeCall(userId, devicesRegisterUserForDeviceRequest, _callback);
        Type localVarReturnType = new TypeToken<DevicesList200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesRemoveUserDevice
     * @param deviceUdid The UDID of the device (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;forbidden&lt;/b&gt;: The user is not allowed to delete someone else&#39;s device.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;b&gt;not_found&lt;/b&gt;: The user or the device can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesRemoveUserDeviceCall(String deviceUdid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/user/devices/{device_udid}"
            .replace("{" + "device_udid" + "}", localVarApiClient.escapeString(deviceUdid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesRemoveUserDeviceValidateBeforeCall(String deviceUdid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceUdid' is set
        if (deviceUdid == null) {
            throw new ApiException("Missing the required parameter 'deviceUdid' when calling devicesRemoveUserDevice(Async)");
        }

        return devicesRemoveUserDeviceCall(deviceUdid, _callback);

    }

    /**
     * 
     * Removes an existing device from a user
     * @param deviceUdid The UDID of the device (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;forbidden&lt;/b&gt;: The user is not allowed to delete someone else&#39;s device.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;b&gt;not_found&lt;/b&gt;: The user or the device can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public void devicesRemoveUserDevice(String deviceUdid) throws ApiException {
        devicesRemoveUserDeviceWithHttpInfo(deviceUdid);
    }

    /**
     * 
     * Removes an existing device from a user
     * @param deviceUdid The UDID of the device (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;forbidden&lt;/b&gt;: The user is not allowed to delete someone else&#39;s device.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;b&gt;not_found&lt;/b&gt;: The user or the device can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> devicesRemoveUserDeviceWithHttpInfo(String deviceUdid) throws ApiException {
        okhttp3.Call localVarCall = devicesRemoveUserDeviceValidateBeforeCall(deviceUdid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Removes an existing device from a user
     * @param deviceUdid The UDID of the device (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;forbidden&lt;/b&gt;: The user is not allowed to delete someone else&#39;s device.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &lt;b&gt;not_found&lt;/b&gt;: The user or the device can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesRemoveUserDeviceAsync(String deviceUdid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesRemoveUserDeviceValidateBeforeCall(deviceUdid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesUserDevicesList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;bad_request&lt;/b&gt;: Devices information can only be requested for iOS apps.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;forbidden&lt;/b&gt;: The user is not allowed to view someone else&#39;s devices.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesUserDevicesListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/user/devices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesUserDevicesListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return devicesUserDevicesListCall(_callback);

    }

    /**
     * 
     * Returns all devices associated with the given user.
     * @return List&lt;DevicesList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;bad_request&lt;/b&gt;: Devices information can only be requested for iOS apps.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;forbidden&lt;/b&gt;: The user is not allowed to view someone else&#39;s devices.  </td><td>  -  </td></tr>
     </table>
     */
    public List<DevicesList200ResponseInner> devicesUserDevicesList() throws ApiException {
        ApiResponse<List<DevicesList200ResponseInner>> localVarResp = devicesUserDevicesListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all devices associated with the given user.
     * @return ApiResponse&lt;List&lt;DevicesList200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;bad_request&lt;/b&gt;: Devices information can only be requested for iOS apps.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;forbidden&lt;/b&gt;: The user is not allowed to view someone else&#39;s devices.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DevicesList200ResponseInner>> devicesUserDevicesListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = devicesUserDevicesListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<DevicesList200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all devices associated with the given user.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;bad_request&lt;/b&gt;: Devices information can only be requested for iOS apps.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;forbidden&lt;/b&gt;: The user is not allowed to view someone else&#39;s devices.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesUserDevicesListAsync(final ApiCallback<List<DevicesList200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesUserDevicesListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<DevicesList200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for distibutionReleasesInstallAnalytics
     * @param ownerName The name of the app owner (required)
     * @param appName The name of the app (required)
     * @param distibutionReleasesInstallAnalyticsRequest The install analytics request payload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Install Analytics Notification Sent Successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distibutionReleasesInstallAnalyticsCall(String ownerName, String appName, DistibutionReleasesInstallAnalyticsRequest distibutionReleasesInstallAnalyticsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = distibutionReleasesInstallAnalyticsRequest;

        // create path and map variables
        String localVarPath = "/v0.1/public/apps/{owner_name}/{app_name}/install_analytics"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distibutionReleasesInstallAnalyticsValidateBeforeCall(String ownerName, String appName, DistibutionReleasesInstallAnalyticsRequest distibutionReleasesInstallAnalyticsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling distibutionReleasesInstallAnalytics(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling distibutionReleasesInstallAnalytics(Async)");
        }

        // verify the required parameter 'distibutionReleasesInstallAnalyticsRequest' is set
        if (distibutionReleasesInstallAnalyticsRequest == null) {
            throw new ApiException("Missing the required parameter 'distibutionReleasesInstallAnalyticsRequest' when calling distibutionReleasesInstallAnalytics(Async)");
        }

        return distibutionReleasesInstallAnalyticsCall(ownerName, appName, distibutionReleasesInstallAnalyticsRequest, _callback);

    }

    /**
     * 
     * Notify download(s) for the provided distribution release(s).
     * @param ownerName The name of the app owner (required)
     * @param appName The name of the app (required)
     * @param distibutionReleasesInstallAnalyticsRequest The install analytics request payload (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Install Analytics Notification Sent Successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void distibutionReleasesInstallAnalytics(String ownerName, String appName, DistibutionReleasesInstallAnalyticsRequest distibutionReleasesInstallAnalyticsRequest) throws ApiException {
        distibutionReleasesInstallAnalyticsWithHttpInfo(ownerName, appName, distibutionReleasesInstallAnalyticsRequest);
    }

    /**
     * 
     * Notify download(s) for the provided distribution release(s).
     * @param ownerName The name of the app owner (required)
     * @param appName The name of the app (required)
     * @param distibutionReleasesInstallAnalyticsRequest The install analytics request payload (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Install Analytics Notification Sent Successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> distibutionReleasesInstallAnalyticsWithHttpInfo(String ownerName, String appName, DistibutionReleasesInstallAnalyticsRequest distibutionReleasesInstallAnalyticsRequest) throws ApiException {
        okhttp3.Call localVarCall = distibutionReleasesInstallAnalyticsValidateBeforeCall(ownerName, appName, distibutionReleasesInstallAnalyticsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Notify download(s) for the provided distribution release(s).
     * @param ownerName The name of the app owner (required)
     * @param appName The name of the app (required)
     * @param distibutionReleasesInstallAnalyticsRequest The install analytics request payload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Install Analytics Notification Sent Successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distibutionReleasesInstallAnalyticsAsync(String ownerName, String appName, DistibutionReleasesInstallAnalyticsRequest distibutionReleasesInstallAnalyticsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = distibutionReleasesInstallAnalyticsValidateBeforeCall(ownerName, appName, distibutionReleasesInstallAnalyticsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for provisioningProfile
     * @param releaseId The release_id (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The app&#39;s OS is not iOS. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisioningProfileCall(Integer releaseId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/provisioning_profile"
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call provisioningProfileValidateBeforeCall(Integer releaseId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling provisioningProfile(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling provisioningProfile(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling provisioningProfile(Async)");
        }

        return provisioningProfileCall(releaseId, ownerName, appName, _callback);

    }

    /**
     * 
     * Return information about the provisioning profile. Only available for iOS.
     * @param releaseId The release_id (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ProvisioningProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The app&#39;s OS is not iOS. </td><td>  -  </td></tr>
     </table>
     */
    public ProvisioningProfileResponse provisioningProfile(Integer releaseId, String ownerName, String appName) throws ApiException {
        ApiResponse<ProvisioningProfileResponse> localVarResp = provisioningProfileWithHttpInfo(releaseId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Return information about the provisioning profile. Only available for iOS.
     * @param releaseId The release_id (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;ProvisioningProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The app&#39;s OS is not iOS. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProvisioningProfileResponse> provisioningProfileWithHttpInfo(Integer releaseId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = provisioningProfileValidateBeforeCall(releaseId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<ProvisioningProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return information about the provisioning profile. Only available for iOS.
     * @param releaseId The release_id (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The app&#39;s OS is not iOS. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisioningProfileAsync(Integer releaseId, String ownerName, String appName, final ApiCallback<ProvisioningProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = provisioningProfileValidateBeforeCall(releaseId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<ProvisioningProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesAddDistributionGroup
     * @param releaseId The ID of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesAddDistributionGroupRequest The release information. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Release not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesAddDistributionGroupCall(Integer releaseId, String ownerName, String appName, ReleasesAddDistributionGroupRequest releasesAddDistributionGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = releasesAddDistributionGroupRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups"
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesAddDistributionGroupValidateBeforeCall(Integer releaseId, String ownerName, String appName, ReleasesAddDistributionGroupRequest releasesAddDistributionGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling releasesAddDistributionGroup(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling releasesAddDistributionGroup(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling releasesAddDistributionGroup(Async)");
        }

        // verify the required parameter 'releasesAddDistributionGroupRequest' is set
        if (releasesAddDistributionGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'releasesAddDistributionGroupRequest' when calling releasesAddDistributionGroup(Async)");
        }

        return releasesAddDistributionGroupCall(releaseId, ownerName, appName, releasesAddDistributionGroupRequest, _callback);

    }

    /**
     * 
     * Distributes a release to a group
     * @param releaseId The ID of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesAddDistributionGroupRequest The release information. (required)
     * @return ReleasesAddDistributionGroup201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Release not found </td><td>  -  </td></tr>
     </table>
     */
    public ReleasesAddDistributionGroup201Response releasesAddDistributionGroup(Integer releaseId, String ownerName, String appName, ReleasesAddDistributionGroupRequest releasesAddDistributionGroupRequest) throws ApiException {
        ApiResponse<ReleasesAddDistributionGroup201Response> localVarResp = releasesAddDistributionGroupWithHttpInfo(releaseId, ownerName, appName, releasesAddDistributionGroupRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Distributes a release to a group
     * @param releaseId The ID of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesAddDistributionGroupRequest The release information. (required)
     * @return ApiResponse&lt;ReleasesAddDistributionGroup201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Release not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReleasesAddDistributionGroup201Response> releasesAddDistributionGroupWithHttpInfo(Integer releaseId, String ownerName, String appName, ReleasesAddDistributionGroupRequest releasesAddDistributionGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = releasesAddDistributionGroupValidateBeforeCall(releaseId, ownerName, appName, releasesAddDistributionGroupRequest, null);
        Type localVarReturnType = new TypeToken<ReleasesAddDistributionGroup201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Distributes a release to a group
     * @param releaseId The ID of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesAddDistributionGroupRequest The release information. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Release not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesAddDistributionGroupAsync(Integer releaseId, String ownerName, String appName, ReleasesAddDistributionGroupRequest releasesAddDistributionGroupRequest, final ApiCallback<ReleasesAddDistributionGroup201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesAddDistributionGroupValidateBeforeCall(releaseId, ownerName, appName, releasesAddDistributionGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<ReleasesAddDistributionGroup201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesAddStore
     * @param releaseId The ID of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesAddStoreRequest The release information. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Release not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesAddStoreCall(Integer releaseId, String ownerName, String appName, ReleasesAddStoreRequest releasesAddStoreRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = releasesAddStoreRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores"
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesAddStoreValidateBeforeCall(Integer releaseId, String ownerName, String appName, ReleasesAddStoreRequest releasesAddStoreRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling releasesAddStore(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling releasesAddStore(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling releasesAddStore(Async)");
        }

        // verify the required parameter 'releasesAddStoreRequest' is set
        if (releasesAddStoreRequest == null) {
            throw new ApiException("Missing the required parameter 'releasesAddStoreRequest' when calling releasesAddStore(Async)");
        }

        return releasesAddStoreCall(releaseId, ownerName, appName, releasesAddStoreRequest, _callback);

    }

    /**
     * 
     * Distributes a release to a store
     * @param releaseId The ID of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesAddStoreRequest The release information. (required)
     * @return ReleasesAddStore201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Release not found </td><td>  -  </td></tr>
     </table>
     */
    public ReleasesAddStore201Response releasesAddStore(Integer releaseId, String ownerName, String appName, ReleasesAddStoreRequest releasesAddStoreRequest) throws ApiException {
        ApiResponse<ReleasesAddStore201Response> localVarResp = releasesAddStoreWithHttpInfo(releaseId, ownerName, appName, releasesAddStoreRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Distributes a release to a store
     * @param releaseId The ID of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesAddStoreRequest The release information. (required)
     * @return ApiResponse&lt;ReleasesAddStore201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Release not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReleasesAddStore201Response> releasesAddStoreWithHttpInfo(Integer releaseId, String ownerName, String appName, ReleasesAddStoreRequest releasesAddStoreRequest) throws ApiException {
        okhttp3.Call localVarCall = releasesAddStoreValidateBeforeCall(releaseId, ownerName, appName, releasesAddStoreRequest, null);
        Type localVarReturnType = new TypeToken<ReleasesAddStore201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Distributes a release to a store
     * @param releaseId The ID of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesAddStoreRequest The release information. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Release not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesAddStoreAsync(Integer releaseId, String ownerName, String appName, ReleasesAddStoreRequest releasesAddStoreRequest, final ApiCallback<ReleasesAddStore201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesAddStoreValidateBeforeCall(releaseId, ownerName, appName, releasesAddStoreRequest, _callback);
        Type localVarReturnType = new TypeToken<ReleasesAddStore201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesAddTesters
     * @param releaseId The ID of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesAddTestersRequest The release information. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Release not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesAddTestersCall(Integer releaseId, String ownerName, String appName, ReleasesAddTestersRequest releasesAddTestersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = releasesAddTestersRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers"
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesAddTestersValidateBeforeCall(Integer releaseId, String ownerName, String appName, ReleasesAddTestersRequest releasesAddTestersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling releasesAddTesters(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling releasesAddTesters(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling releasesAddTesters(Async)");
        }

        // verify the required parameter 'releasesAddTestersRequest' is set
        if (releasesAddTestersRequest == null) {
            throw new ApiException("Missing the required parameter 'releasesAddTestersRequest' when calling releasesAddTesters(Async)");
        }

        return releasesAddTestersCall(releaseId, ownerName, appName, releasesAddTestersRequest, _callback);

    }

    /**
     * 
     * Distributes a release to a user
     * @param releaseId The ID of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesAddTestersRequest The release information. (required)
     * @return ReleasesAddDistributionGroup201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Release not found </td><td>  -  </td></tr>
     </table>
     */
    public ReleasesAddDistributionGroup201Response releasesAddTesters(Integer releaseId, String ownerName, String appName, ReleasesAddTestersRequest releasesAddTestersRequest) throws ApiException {
        ApiResponse<ReleasesAddDistributionGroup201Response> localVarResp = releasesAddTestersWithHttpInfo(releaseId, ownerName, appName, releasesAddTestersRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Distributes a release to a user
     * @param releaseId The ID of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesAddTestersRequest The release information. (required)
     * @return ApiResponse&lt;ReleasesAddDistributionGroup201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Release not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReleasesAddDistributionGroup201Response> releasesAddTestersWithHttpInfo(Integer releaseId, String ownerName, String appName, ReleasesAddTestersRequest releasesAddTestersRequest) throws ApiException {
        okhttp3.Call localVarCall = releasesAddTestersValidateBeforeCall(releaseId, ownerName, appName, releasesAddTestersRequest, null);
        Type localVarReturnType = new TypeToken<ReleasesAddDistributionGroup201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Distributes a release to a user
     * @param releaseId The ID of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesAddTestersRequest The release information. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Release not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesAddTestersAsync(Integer releaseId, String ownerName, String appName, ReleasesAddTestersRequest releasesAddTestersRequest, final ApiCallback<ReleasesAddDistributionGroup201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesAddTestersValidateBeforeCall(releaseId, ownerName, appName, releasesAddTestersRequest, _callback);
        Type localVarReturnType = new TypeToken<ReleasesAddDistributionGroup201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesAvailableToTester
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param publishedOnly when *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call releasesAvailableToTesterCall(String ownerName, String appName, Boolean publishedOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/releases/filter_by_tester"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (publishedOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("published_only", publishedOnly));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesAvailableToTesterValidateBeforeCall(String ownerName, String appName, Boolean publishedOnly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling releasesAvailableToTester(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling releasesAvailableToTester(Async)");
        }

        return releasesAvailableToTesterCall(ownerName, appName, publishedOnly, _callback);

    }

    /**
     * 
     * Return detailed information about releases avaiable to a tester.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param publishedOnly when *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out. (optional)
     * @return List&lt;ReleasesListLatest200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public List<ReleasesListLatest200ResponseInner> releasesAvailableToTester(String ownerName, String appName, Boolean publishedOnly) throws ApiException {
        ApiResponse<List<ReleasesListLatest200ResponseInner>> localVarResp = releasesAvailableToTesterWithHttpInfo(ownerName, appName, publishedOnly);
        return localVarResp.getData();
    }

    /**
     * 
     * Return detailed information about releases avaiable to a tester.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param publishedOnly when *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out. (optional)
     * @return ApiResponse&lt;List&lt;ReleasesListLatest200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<List<ReleasesListLatest200ResponseInner>> releasesAvailableToTesterWithHttpInfo(String ownerName, String appName, Boolean publishedOnly) throws ApiException {
        okhttp3.Call localVarCall = releasesAvailableToTesterValidateBeforeCall(ownerName, appName, publishedOnly, null);
        Type localVarReturnType = new TypeToken<List<ReleasesListLatest200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return detailed information about releases avaiable to a tester.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param publishedOnly when *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call releasesAvailableToTesterAsync(String ownerName, String appName, Boolean publishedOnly, final ApiCallback<List<ReleasesListLatest200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesAvailableToTesterValidateBeforeCall(ownerName, appName, publishedOnly, _callback);
        Type localVarReturnType = new TypeToken<List<ReleasesListLatest200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesCreateReleaseUpload
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesCreateReleaseUploadRequest Optional parameters to create releases with user defined metadata (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid properties. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;not_found&#x60; - The app doesn&#39;t exist.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesCreateReleaseUploadCall(String ownerName, String appName, ReleasesCreateReleaseUploadRequest releasesCreateReleaseUploadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = releasesCreateReleaseUploadRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/uploads/releases"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesCreateReleaseUploadValidateBeforeCall(String ownerName, String appName, ReleasesCreateReleaseUploadRequest releasesCreateReleaseUploadRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling releasesCreateReleaseUpload(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling releasesCreateReleaseUpload(Async)");
        }

        return releasesCreateReleaseUploadCall(ownerName, appName, releasesCreateReleaseUploadRequest, _callback);

    }

    /**
     * 
     * Initiate a new release upload. This API is part of multi-step upload process.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesCreateReleaseUploadRequest Optional parameters to create releases with user defined metadata (optional)
     * @return ReleasesCreateReleaseUpload201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid properties. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;not_found&#x60; - The app doesn&#39;t exist.  </td><td>  -  </td></tr>
     </table>
     */
    public ReleasesCreateReleaseUpload201Response releasesCreateReleaseUpload(String ownerName, String appName, ReleasesCreateReleaseUploadRequest releasesCreateReleaseUploadRequest) throws ApiException {
        ApiResponse<ReleasesCreateReleaseUpload201Response> localVarResp = releasesCreateReleaseUploadWithHttpInfo(ownerName, appName, releasesCreateReleaseUploadRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Initiate a new release upload. This API is part of multi-step upload process.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesCreateReleaseUploadRequest Optional parameters to create releases with user defined metadata (optional)
     * @return ApiResponse&lt;ReleasesCreateReleaseUpload201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid properties. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;not_found&#x60; - The app doesn&#39;t exist.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReleasesCreateReleaseUpload201Response> releasesCreateReleaseUploadWithHttpInfo(String ownerName, String appName, ReleasesCreateReleaseUploadRequest releasesCreateReleaseUploadRequest) throws ApiException {
        okhttp3.Call localVarCall = releasesCreateReleaseUploadValidateBeforeCall(ownerName, appName, releasesCreateReleaseUploadRequest, null);
        Type localVarReturnType = new TypeToken<ReleasesCreateReleaseUpload201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Initiate a new release upload. This API is part of multi-step upload process.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesCreateReleaseUploadRequest Optional parameters to create releases with user defined metadata (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid properties. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;not_found&#x60; - The app doesn&#39;t exist.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesCreateReleaseUploadAsync(String ownerName, String appName, ReleasesCreateReleaseUploadRequest releasesCreateReleaseUploadRequest, final ApiCallback<ReleasesCreateReleaseUpload201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesCreateReleaseUploadValidateBeforeCall(ownerName, appName, releasesCreateReleaseUploadRequest, _callback);
        Type localVarReturnType = new TypeToken<ReleasesCreateReleaseUpload201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesDelete
     * @param releaseId The ID of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> An app or a release couldn&#39;t be found  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error. if delete has partially failed **partially_deleted** error_code will be returned. - &#x60;partially_deleted&#x60;: Release was removed from all distribution groups, but couldn&#39;t be deleted from App Center.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesDeleteCall(Integer releaseId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}"
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesDeleteValidateBeforeCall(Integer releaseId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling releasesDelete(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling releasesDelete(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling releasesDelete(Async)");
        }

        return releasesDeleteCall(releaseId, ownerName, appName, _callback);

    }

    /**
     * 
     * Deletes a release.
     * @param releaseId The ID of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> An app or a release couldn&#39;t be found  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error. if delete has partially failed **partially_deleted** error_code will be returned. - &#x60;partially_deleted&#x60;: Release was removed from all distribution groups, but couldn&#39;t be deleted from App Center.  </td><td>  -  </td></tr>
     </table>
     */
    public void releasesDelete(Integer releaseId, String ownerName, String appName) throws ApiException {
        releasesDeleteWithHttpInfo(releaseId, ownerName, appName);
    }

    /**
     * 
     * Deletes a release.
     * @param releaseId The ID of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> An app or a release couldn&#39;t be found  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error. if delete has partially failed **partially_deleted** error_code will be returned. - &#x60;partially_deleted&#x60;: Release was removed from all distribution groups, but couldn&#39;t be deleted from App Center.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> releasesDeleteWithHttpInfo(Integer releaseId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = releasesDeleteValidateBeforeCall(releaseId, ownerName, appName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a release.
     * @param releaseId The ID of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> An app or a release couldn&#39;t be found  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error. if delete has partially failed **partially_deleted** error_code will be returned. - &#x60;partially_deleted&#x60;: Release was removed from all distribution groups, but couldn&#39;t be deleted from App Center.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesDeleteAsync(Integer releaseId, String ownerName, String appName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesDeleteValidateBeforeCall(releaseId, ownerName, appName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesDeleteDistributionGroup
     * @param releaseId The ID of the release (required)
     * @param groupId The id of the distribution group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Distribution group destination can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesDeleteDistributionGroupCall(Integer releaseId, String groupId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups/{group_id}"
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()))
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesDeleteDistributionGroupValidateBeforeCall(Integer releaseId, String groupId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling releasesDeleteDistributionGroup(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling releasesDeleteDistributionGroup(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling releasesDeleteDistributionGroup(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling releasesDeleteDistributionGroup(Async)");
        }

        return releasesDeleteDistributionGroupCall(releaseId, groupId, ownerName, appName, _callback);

    }

    /**
     * 
     * Delete the given distribution group from the release
     * @param releaseId The ID of the release (required)
     * @param groupId The id of the distribution group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Distribution group destination can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public void releasesDeleteDistributionGroup(Integer releaseId, String groupId, String ownerName, String appName) throws ApiException {
        releasesDeleteDistributionGroupWithHttpInfo(releaseId, groupId, ownerName, appName);
    }

    /**
     * 
     * Delete the given distribution group from the release
     * @param releaseId The ID of the release (required)
     * @param groupId The id of the distribution group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Distribution group destination can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> releasesDeleteDistributionGroupWithHttpInfo(Integer releaseId, String groupId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = releasesDeleteDistributionGroupValidateBeforeCall(releaseId, groupId, ownerName, appName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the given distribution group from the release
     * @param releaseId The ID of the release (required)
     * @param groupId The id of the distribution group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Distribution group destination can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesDeleteDistributionGroupAsync(Integer releaseId, String groupId, String ownerName, String appName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesDeleteDistributionGroupValidateBeforeCall(releaseId, groupId, ownerName, appName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesDeleteDistributionStore
     * @param releaseId The ID of the release (required)
     * @param storeId The id of the distribution store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Distribution store destination can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesDeleteDistributionStoreCall(Integer releaseId, String storeId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores/{store_id}"
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()))
            .replace("{" + "store_id" + "}", localVarApiClient.escapeString(storeId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesDeleteDistributionStoreValidateBeforeCall(Integer releaseId, String storeId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling releasesDeleteDistributionStore(Async)");
        }

        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling releasesDeleteDistributionStore(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling releasesDeleteDistributionStore(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling releasesDeleteDistributionStore(Async)");
        }

        return releasesDeleteDistributionStoreCall(releaseId, storeId, ownerName, appName, _callback);

    }

    /**
     * 
     * Delete the given distribution store from the release
     * @param releaseId The ID of the release (required)
     * @param storeId The id of the distribution store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Distribution store destination can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public void releasesDeleteDistributionStore(Integer releaseId, String storeId, String ownerName, String appName) throws ApiException {
        releasesDeleteDistributionStoreWithHttpInfo(releaseId, storeId, ownerName, appName);
    }

    /**
     * 
     * Delete the given distribution store from the release
     * @param releaseId The ID of the release (required)
     * @param storeId The id of the distribution store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Distribution store destination can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> releasesDeleteDistributionStoreWithHttpInfo(Integer releaseId, String storeId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = releasesDeleteDistributionStoreValidateBeforeCall(releaseId, storeId, ownerName, appName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the given distribution store from the release
     * @param releaseId The ID of the release (required)
     * @param storeId The id of the distribution store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Distribution store destination can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesDeleteDistributionStoreAsync(Integer releaseId, String storeId, String ownerName, String appName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesDeleteDistributionStoreValidateBeforeCall(releaseId, storeId, ownerName, appName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesDeleteDistributionTester
     * @param releaseId The ID of the release (required)
     * @param testerId The id of the tester (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tester can&#39;t be found  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesDeleteDistributionTesterCall(Integer releaseId, String testerId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers/{tester_id}"
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()))
            .replace("{" + "tester_id" + "}", localVarApiClient.escapeString(testerId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesDeleteDistributionTesterValidateBeforeCall(Integer releaseId, String testerId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling releasesDeleteDistributionTester(Async)");
        }

        // verify the required parameter 'testerId' is set
        if (testerId == null) {
            throw new ApiException("Missing the required parameter 'testerId' when calling releasesDeleteDistributionTester(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling releasesDeleteDistributionTester(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling releasesDeleteDistributionTester(Async)");
        }

        return releasesDeleteDistributionTesterCall(releaseId, testerId, ownerName, appName, _callback);

    }

    /**
     * 
     * Delete the given tester from the release
     * @param releaseId The ID of the release (required)
     * @param testerId The id of the tester (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tester can&#39;t be found  </td><td>  -  </td></tr>
     </table>
     */
    public void releasesDeleteDistributionTester(Integer releaseId, String testerId, String ownerName, String appName) throws ApiException {
        releasesDeleteDistributionTesterWithHttpInfo(releaseId, testerId, ownerName, appName);
    }

    /**
     * 
     * Delete the given tester from the release
     * @param releaseId The ID of the release (required)
     * @param testerId The id of the tester (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tester can&#39;t be found  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> releasesDeleteDistributionTesterWithHttpInfo(Integer releaseId, String testerId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = releasesDeleteDistributionTesterValidateBeforeCall(releaseId, testerId, ownerName, appName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the given tester from the release
     * @param releaseId The ID of the release (required)
     * @param testerId The id of the tester (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tester can&#39;t be found  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesDeleteDistributionTesterAsync(Integer releaseId, String testerId, String ownerName, String appName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesDeleteDistributionTesterValidateBeforeCall(releaseId, testerId, ownerName, appName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesDeleteTesterFromDestinations
     * @param testerId The id of the tester (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tester can&#39;t be found  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesDeleteTesterFromDestinationsCall(String testerId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/testers/{tester_id}"
            .replace("{" + "tester_id" + "}", localVarApiClient.escapeString(testerId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesDeleteTesterFromDestinationsValidateBeforeCall(String testerId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'testerId' is set
        if (testerId == null) {
            throw new ApiException("Missing the required parameter 'testerId' when calling releasesDeleteTesterFromDestinations(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling releasesDeleteTesterFromDestinations(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling releasesDeleteTesterFromDestinations(Async)");
        }

        return releasesDeleteTesterFromDestinationsCall(testerId, ownerName, appName, _callback);

    }

    /**
     * 
     * Delete the given tester from the all releases
     * @param testerId The id of the tester (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tester can&#39;t be found  </td><td>  -  </td></tr>
     </table>
     */
    public void releasesDeleteTesterFromDestinations(String testerId, String ownerName, String appName) throws ApiException {
        releasesDeleteTesterFromDestinationsWithHttpInfo(testerId, ownerName, appName);
    }

    /**
     * 
     * Delete the given tester from the all releases
     * @param testerId The id of the tester (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tester can&#39;t be found  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> releasesDeleteTesterFromDestinationsWithHttpInfo(String testerId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = releasesDeleteTesterFromDestinationsValidateBeforeCall(testerId, ownerName, appName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the given tester from the all releases
     * @param testerId The id of the tester (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tester can&#39;t be found  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesDeleteTesterFromDestinationsAsync(String testerId, String ownerName, String appName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesDeleteTesterFromDestinationsValidateBeforeCall(testerId, ownerName, appName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesDeleteWithDistributionGroupId
     * @param ownerName The name of the app owner (required)
     * @param appName The name of the app (required)
     * @param distributionGroupName The name of the distribution group. (required)
     * @param releaseId The ID identifying the unique release. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;distribution_group_not_found&#x60; - Distribution group or the app doesn&#39;t exist. - &#x60;not_found&#x60; - release isn&#39;t found.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesDeleteWithDistributionGroupIdCall(String ownerName, String appName, String distributionGroupName, Integer releaseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()))
            .replace("{" + "distribution_group_name" + "}", localVarApiClient.escapeString(distributionGroupName.toString()))
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesDeleteWithDistributionGroupIdValidateBeforeCall(String ownerName, String appName, String distributionGroupName, Integer releaseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling releasesDeleteWithDistributionGroupId(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling releasesDeleteWithDistributionGroupId(Async)");
        }

        // verify the required parameter 'distributionGroupName' is set
        if (distributionGroupName == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupName' when calling releasesDeleteWithDistributionGroupId(Async)");
        }

        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling releasesDeleteWithDistributionGroupId(Async)");
        }

        return releasesDeleteWithDistributionGroupIdCall(ownerName, appName, distributionGroupName, releaseId, _callback);

    }

    /**
     * 
     * Deletes a release with id &#39;release_id&#39; in a given distribution group.
     * @param ownerName The name of the app owner (required)
     * @param appName The name of the app (required)
     * @param distributionGroupName The name of the distribution group. (required)
     * @param releaseId The ID identifying the unique release. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;distribution_group_not_found&#x60; - Distribution group or the app doesn&#39;t exist. - &#x60;not_found&#x60; - release isn&#39;t found.  </td><td>  -  </td></tr>
     </table>
     */
    public void releasesDeleteWithDistributionGroupId(String ownerName, String appName, String distributionGroupName, Integer releaseId) throws ApiException {
        releasesDeleteWithDistributionGroupIdWithHttpInfo(ownerName, appName, distributionGroupName, releaseId);
    }

    /**
     * 
     * Deletes a release with id &#39;release_id&#39; in a given distribution group.
     * @param ownerName The name of the app owner (required)
     * @param appName The name of the app (required)
     * @param distributionGroupName The name of the distribution group. (required)
     * @param releaseId The ID identifying the unique release. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;distribution_group_not_found&#x60; - Distribution group or the app doesn&#39;t exist. - &#x60;not_found&#x60; - release isn&#39;t found.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> releasesDeleteWithDistributionGroupIdWithHttpInfo(String ownerName, String appName, String distributionGroupName, Integer releaseId) throws ApiException {
        okhttp3.Call localVarCall = releasesDeleteWithDistributionGroupIdValidateBeforeCall(ownerName, appName, distributionGroupName, releaseId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a release with id &#39;release_id&#39; in a given distribution group.
     * @param ownerName The name of the app owner (required)
     * @param appName The name of the app (required)
     * @param distributionGroupName The name of the distribution group. (required)
     * @param releaseId The ID identifying the unique release. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;distribution_group_not_found&#x60; - Distribution group or the app doesn&#39;t exist. - &#x60;not_found&#x60; - release isn&#39;t found.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesDeleteWithDistributionGroupIdAsync(String ownerName, String appName, String distributionGroupName, Integer releaseId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesDeleteWithDistributionGroupIdValidateBeforeCall(ownerName, appName, distributionGroupName, releaseId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesGetIosManifest
     * @param appId The ID of the application (required)
     * @param releaseId The release_id (required)
     * @param token A hash that authorizes the download if it matches the release info. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The app&#39;s OS is not iOS. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The token provided doesn&#39;t match the release&#39;s token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The app or release can&#39;t be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesGetIosManifestCall(String appId, Integer releaseId, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/public/apps/{app_id}/releases/{release_id}/ios_manifest"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesGetIosManifestValidateBeforeCall(String appId, Integer releaseId, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling releasesGetIosManifest(Async)");
        }

        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling releasesGetIosManifest(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling releasesGetIosManifest(Async)");
        }

        return releasesGetIosManifestCall(appId, releaseId, token, _callback);

    }

    /**
     * 
     * Returns the manifest.plist in XML format for installing the release on a device. Only available for iOS.
     * @param appId The ID of the application (required)
     * @param releaseId The release_id (required)
     * @param token A hash that authorizes the download if it matches the release info. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The app&#39;s OS is not iOS. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The token provided doesn&#39;t match the release&#39;s token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The app or release can&#39;t be found. </td><td>  -  </td></tr>
     </table>
     */
    public void releasesGetIosManifest(String appId, Integer releaseId, String token) throws ApiException {
        releasesGetIosManifestWithHttpInfo(appId, releaseId, token);
    }

    /**
     * 
     * Returns the manifest.plist in XML format for installing the release on a device. Only available for iOS.
     * @param appId The ID of the application (required)
     * @param releaseId The release_id (required)
     * @param token A hash that authorizes the download if it matches the release info. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The app&#39;s OS is not iOS. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The token provided doesn&#39;t match the release&#39;s token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The app or release can&#39;t be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> releasesGetIosManifestWithHttpInfo(String appId, Integer releaseId, String token) throws ApiException {
        okhttp3.Call localVarCall = releasesGetIosManifestValidateBeforeCall(appId, releaseId, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the manifest.plist in XML format for installing the release on a device. Only available for iOS.
     * @param appId The ID of the application (required)
     * @param releaseId The release_id (required)
     * @param token A hash that authorizes the download if it matches the release info. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The app&#39;s OS is not iOS. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - The token provided doesn&#39;t match the release&#39;s token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The app or release can&#39;t be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesGetIosManifestAsync(String appId, Integer releaseId, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesGetIosManifestValidateBeforeCall(appId, releaseId, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesGetLatestByDistributionGroup
     * @param ownerName The name of the app owner (required)
     * @param appName The name of the app (required)
     * @param distributionGroupName The name of the distribution group. (required)
     * @param releaseId Also supports the constant &#x60;latest&#x60;, which will return the latest release in the distribution group. (required)
     * @param isInstallPage The check if the request is from Install page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error Codes: - &#x60;not_found&#x60; - Distribution group or the app doesn&#39;t exist - &#x60;no_releases_for_app&#x60; - App has no releases.  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Requesting a specific release_id is not supported.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesGetLatestByDistributionGroupCall(String ownerName, String appName, String distributionGroupName, String releaseId, Boolean isInstallPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()))
            .replace("{" + "distribution_group_name" + "}", localVarApiClient.escapeString(distributionGroupName.toString()))
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isInstallPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_install_page", isInstallPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesGetLatestByDistributionGroupValidateBeforeCall(String ownerName, String appName, String distributionGroupName, String releaseId, Boolean isInstallPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling releasesGetLatestByDistributionGroup(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling releasesGetLatestByDistributionGroup(Async)");
        }

        // verify the required parameter 'distributionGroupName' is set
        if (distributionGroupName == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupName' when calling releasesGetLatestByDistributionGroup(Async)");
        }

        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling releasesGetLatestByDistributionGroup(Async)");
        }

        return releasesGetLatestByDistributionGroupCall(ownerName, appName, distributionGroupName, releaseId, isInstallPage, _callback);

    }

    /**
     * 
     * Return detailed information about a distributed release in a given distribution group.
     * @param ownerName The name of the app owner (required)
     * @param appName The name of the app (required)
     * @param distributionGroupName The name of the distribution group. (required)
     * @param releaseId Also supports the constant &#x60;latest&#x60;, which will return the latest release in the distribution group. (required)
     * @param isInstallPage The check if the request is from Install page (optional)
     * @return ReleasesGetLatestByDistributionGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error Codes: - &#x60;not_found&#x60; - Distribution group or the app doesn&#39;t exist - &#x60;no_releases_for_app&#x60; - App has no releases.  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Requesting a specific release_id is not supported.  </td><td>  -  </td></tr>
     </table>
     */
    public ReleasesGetLatestByDistributionGroup200Response releasesGetLatestByDistributionGroup(String ownerName, String appName, String distributionGroupName, String releaseId, Boolean isInstallPage) throws ApiException {
        ApiResponse<ReleasesGetLatestByDistributionGroup200Response> localVarResp = releasesGetLatestByDistributionGroupWithHttpInfo(ownerName, appName, distributionGroupName, releaseId, isInstallPage);
        return localVarResp.getData();
    }

    /**
     * 
     * Return detailed information about a distributed release in a given distribution group.
     * @param ownerName The name of the app owner (required)
     * @param appName The name of the app (required)
     * @param distributionGroupName The name of the distribution group. (required)
     * @param releaseId Also supports the constant &#x60;latest&#x60;, which will return the latest release in the distribution group. (required)
     * @param isInstallPage The check if the request is from Install page (optional)
     * @return ApiResponse&lt;ReleasesGetLatestByDistributionGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error Codes: - &#x60;not_found&#x60; - Distribution group or the app doesn&#39;t exist - &#x60;no_releases_for_app&#x60; - App has no releases.  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Requesting a specific release_id is not supported.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReleasesGetLatestByDistributionGroup200Response> releasesGetLatestByDistributionGroupWithHttpInfo(String ownerName, String appName, String distributionGroupName, String releaseId, Boolean isInstallPage) throws ApiException {
        okhttp3.Call localVarCall = releasesGetLatestByDistributionGroupValidateBeforeCall(ownerName, appName, distributionGroupName, releaseId, isInstallPage, null);
        Type localVarReturnType = new TypeToken<ReleasesGetLatestByDistributionGroup200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return detailed information about a distributed release in a given distribution group.
     * @param ownerName The name of the app owner (required)
     * @param appName The name of the app (required)
     * @param distributionGroupName The name of the distribution group. (required)
     * @param releaseId Also supports the constant &#x60;latest&#x60;, which will return the latest release in the distribution group. (required)
     * @param isInstallPage The check if the request is from Install page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error Codes: - &#x60;not_found&#x60; - Distribution group or the app doesn&#39;t exist - &#x60;no_releases_for_app&#x60; - App has no releases.  </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Requesting a specific release_id is not supported.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesGetLatestByDistributionGroupAsync(String ownerName, String appName, String distributionGroupName, String releaseId, Boolean isInstallPage, final ApiCallback<ReleasesGetLatestByDistributionGroup200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesGetLatestByDistributionGroupValidateBeforeCall(ownerName, appName, distributionGroupName, releaseId, isInstallPage, _callback);
        Type localVarReturnType = new TypeToken<ReleasesGetLatestByDistributionGroup200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesGetLatestByHash
     * @param appSecret The secret of the target application (required)
     * @param releaseHash The hash of the release or &#39;latest&#39; to get the latest release from all the distribution groups assigned to the current user. (required)
     * @param udid When passing &#x60;udid&#x60; in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If called with a specific &#x60;release_hash&#x60; return the app&#39;s &#39;display_name&#39;&#39; and &#39;buildIdentifier&#39;. If &#39;release_hash&#39; is &#39;latest&#39; return the full release details of the latest release that was distributed to the current user (from all the distribution groups). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;not_found&#x60; - A release or an app can&#39;t be found. - &#x60;no_releases_for_user&#x60; - No releases available for that user (will only be returned when &#x60;release_hash&#x60; is &#x60;latest&#x60;)  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesGetLatestByHashCall(String appSecret, String releaseHash, String udid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/sdk/apps/{app_secret}/releases/{release_hash}"
            .replace("{" + "app_secret" + "}", localVarApiClient.escapeString(appSecret.toString()))
            .replace("{" + "release_hash" + "}", localVarApiClient.escapeString(releaseHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (udid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("udid", udid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesGetLatestByHashValidateBeforeCall(String appSecret, String releaseHash, String udid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appSecret' is set
        if (appSecret == null) {
            throw new ApiException("Missing the required parameter 'appSecret' when calling releasesGetLatestByHash(Async)");
        }

        // verify the required parameter 'releaseHash' is set
        if (releaseHash == null) {
            throw new ApiException("Missing the required parameter 'releaseHash' when calling releasesGetLatestByHash(Async)");
        }

        return releasesGetLatestByHashCall(appSecret, releaseHash, udid, _callback);

    }

    /**
     * 
     * If &#39;latest&#39; is not specified then it will return the specified release if it&#39;s enabled. If &#39;latest&#39; is specified, regardless of whether a release hash is provided, the latest enabled release is returned.
     * @param appSecret The secret of the target application (required)
     * @param releaseHash The hash of the release or &#39;latest&#39; to get the latest release from all the distribution groups assigned to the current user. (required)
     * @param udid When passing &#x60;udid&#x60; in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms. (optional)
     * @return ReleasesGetLatestByDistributionGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If called with a specific &#x60;release_hash&#x60; return the app&#39;s &#39;display_name&#39;&#39; and &#39;buildIdentifier&#39;. If &#39;release_hash&#39; is &#39;latest&#39; return the full release details of the latest release that was distributed to the current user (from all the distribution groups). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;not_found&#x60; - A release or an app can&#39;t be found. - &#x60;no_releases_for_user&#x60; - No releases available for that user (will only be returned when &#x60;release_hash&#x60; is &#x60;latest&#x60;)  </td><td>  -  </td></tr>
     </table>
     */
    public ReleasesGetLatestByDistributionGroup200Response releasesGetLatestByHash(String appSecret, String releaseHash, String udid) throws ApiException {
        ApiResponse<ReleasesGetLatestByDistributionGroup200Response> localVarResp = releasesGetLatestByHashWithHttpInfo(appSecret, releaseHash, udid);
        return localVarResp.getData();
    }

    /**
     * 
     * If &#39;latest&#39; is not specified then it will return the specified release if it&#39;s enabled. If &#39;latest&#39; is specified, regardless of whether a release hash is provided, the latest enabled release is returned.
     * @param appSecret The secret of the target application (required)
     * @param releaseHash The hash of the release or &#39;latest&#39; to get the latest release from all the distribution groups assigned to the current user. (required)
     * @param udid When passing &#x60;udid&#x60; in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms. (optional)
     * @return ApiResponse&lt;ReleasesGetLatestByDistributionGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If called with a specific &#x60;release_hash&#x60; return the app&#39;s &#39;display_name&#39;&#39; and &#39;buildIdentifier&#39;. If &#39;release_hash&#39; is &#39;latest&#39; return the full release details of the latest release that was distributed to the current user (from all the distribution groups). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;not_found&#x60; - A release or an app can&#39;t be found. - &#x60;no_releases_for_user&#x60; - No releases available for that user (will only be returned when &#x60;release_hash&#x60; is &#x60;latest&#x60;)  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReleasesGetLatestByDistributionGroup200Response> releasesGetLatestByHashWithHttpInfo(String appSecret, String releaseHash, String udid) throws ApiException {
        okhttp3.Call localVarCall = releasesGetLatestByHashValidateBeforeCall(appSecret, releaseHash, udid, null);
        Type localVarReturnType = new TypeToken<ReleasesGetLatestByDistributionGroup200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * If &#39;latest&#39; is not specified then it will return the specified release if it&#39;s enabled. If &#39;latest&#39; is specified, regardless of whether a release hash is provided, the latest enabled release is returned.
     * @param appSecret The secret of the target application (required)
     * @param releaseHash The hash of the release or &#39;latest&#39; to get the latest release from all the distribution groups assigned to the current user. (required)
     * @param udid When passing &#x60;udid&#x60; in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If called with a specific &#x60;release_hash&#x60; return the app&#39;s &#39;display_name&#39;&#39; and &#39;buildIdentifier&#39;. If &#39;release_hash&#39; is &#39;latest&#39; return the full release details of the latest release that was distributed to the current user (from all the distribution groups). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;not_found&#x60; - A release or an app can&#39;t be found. - &#x60;no_releases_for_user&#x60; - No releases available for that user (will only be returned when &#x60;release_hash&#x60; is &#x60;latest&#x60;)  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesGetLatestByHashAsync(String appSecret, String releaseHash, String udid, final ApiCallback<ReleasesGetLatestByDistributionGroup200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesGetLatestByHashValidateBeforeCall(appSecret, releaseHash, udid, _callback);
        Type localVarReturnType = new TypeToken<ReleasesGetLatestByDistributionGroup200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesGetLatestByPublicDistributionGroup
     * @param appSecret The secret of the target application (required)
     * @param distributionGroupId the id for destination (required)
     * @param isInstallPage The check if the request is from Install page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The full release details of the latest release that was distributed from the given public group. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error Codes: - &#x60;forbidden&#x60; - Unauthorized to access private distribution group  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error Codes: - &#x60;not_found&#x60; - Distribution group or the app doesn&#39;t exist - &#x60;no_releases_for_app&#x60; - App has no releases.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesGetLatestByPublicDistributionGroupCall(String appSecret, String distributionGroupId, Boolean isInstallPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/public/sdk/apps/{app_secret}/distribution_groups/{distribution_group_id}/releases/latest"
            .replace("{" + "app_secret" + "}", localVarApiClient.escapeString(appSecret.toString()))
            .replace("{" + "distribution_group_id" + "}", localVarApiClient.escapeString(distributionGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isInstallPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_install_page", isInstallPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesGetLatestByPublicDistributionGroupValidateBeforeCall(String appSecret, String distributionGroupId, Boolean isInstallPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appSecret' is set
        if (appSecret == null) {
            throw new ApiException("Missing the required parameter 'appSecret' when calling releasesGetLatestByPublicDistributionGroup(Async)");
        }

        // verify the required parameter 'distributionGroupId' is set
        if (distributionGroupId == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupId' when calling releasesGetLatestByPublicDistributionGroup(Async)");
        }

        return releasesGetLatestByPublicDistributionGroupCall(appSecret, distributionGroupId, isInstallPage, _callback);

    }

    /**
     * 
     * Get a release with &#39;latest&#39; for the given public group.
     * @param appSecret The secret of the target application (required)
     * @param distributionGroupId the id for destination (required)
     * @param isInstallPage The check if the request is from Install page (optional)
     * @return ReleasesGetLatestByDistributionGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The full release details of the latest release that was distributed from the given public group. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error Codes: - &#x60;forbidden&#x60; - Unauthorized to access private distribution group  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error Codes: - &#x60;not_found&#x60; - Distribution group or the app doesn&#39;t exist - &#x60;no_releases_for_app&#x60; - App has no releases.  </td><td>  -  </td></tr>
     </table>
     */
    public ReleasesGetLatestByDistributionGroup200Response releasesGetLatestByPublicDistributionGroup(String appSecret, String distributionGroupId, Boolean isInstallPage) throws ApiException {
        ApiResponse<ReleasesGetLatestByDistributionGroup200Response> localVarResp = releasesGetLatestByPublicDistributionGroupWithHttpInfo(appSecret, distributionGroupId, isInstallPage);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a release with &#39;latest&#39; for the given public group.
     * @param appSecret The secret of the target application (required)
     * @param distributionGroupId the id for destination (required)
     * @param isInstallPage The check if the request is from Install page (optional)
     * @return ApiResponse&lt;ReleasesGetLatestByDistributionGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The full release details of the latest release that was distributed from the given public group. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error Codes: - &#x60;forbidden&#x60; - Unauthorized to access private distribution group  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error Codes: - &#x60;not_found&#x60; - Distribution group or the app doesn&#39;t exist - &#x60;no_releases_for_app&#x60; - App has no releases.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReleasesGetLatestByDistributionGroup200Response> releasesGetLatestByPublicDistributionGroupWithHttpInfo(String appSecret, String distributionGroupId, Boolean isInstallPage) throws ApiException {
        okhttp3.Call localVarCall = releasesGetLatestByPublicDistributionGroupValidateBeforeCall(appSecret, distributionGroupId, isInstallPage, null);
        Type localVarReturnType = new TypeToken<ReleasesGetLatestByDistributionGroup200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a release with &#39;latest&#39; for the given public group.
     * @param appSecret The secret of the target application (required)
     * @param distributionGroupId the id for destination (required)
     * @param isInstallPage The check if the request is from Install page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The full release details of the latest release that was distributed from the given public group. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error Codes: - &#x60;forbidden&#x60; - Unauthorized to access private distribution group  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error Codes: - &#x60;not_found&#x60; - Distribution group or the app doesn&#39;t exist - &#x60;no_releases_for_app&#x60; - App has no releases.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesGetLatestByPublicDistributionGroupAsync(String appSecret, String distributionGroupId, Boolean isInstallPage, final ApiCallback<ReleasesGetLatestByDistributionGroup200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesGetLatestByPublicDistributionGroupValidateBeforeCall(appSecret, distributionGroupId, isInstallPage, _callback);
        Type localVarReturnType = new TypeToken<ReleasesGetLatestByDistributionGroup200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesGetLatestByUser
     * @param releaseId The ID of the release, or &#x60;latest&#x60; to get the latest release from all the distribution groups assigned to the current user. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param udid when supplied, this call will also check if the given UDID is provisioned. Will be ignored for non-iOS platforms. The value will be returned in the property is_udid_provisioned. (optional)
     * @param isInstallPage The check if the request is from Install page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &#x60;release_id&#x60; is not an integer or the string &#x60;latest&#x60;.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;not_found&#x60; - A release or an app can&#39;t be found. - &#x60;no_releases_for_user&#x60; - No releases available for that user (will only be returned when &#x60;release_id&#x60; is &#x60;latest&#x60;)  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesGetLatestByUserCall(String releaseId, String ownerName, String appName, String udid, Boolean isInstallPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}"
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (udid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("udid", udid));
        }

        if (isInstallPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_install_page", isInstallPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesGetLatestByUserValidateBeforeCall(String releaseId, String ownerName, String appName, String udid, Boolean isInstallPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling releasesGetLatestByUser(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling releasesGetLatestByUser(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling releasesGetLatestByUser(Async)");
        }

        return releasesGetLatestByUserCall(releaseId, ownerName, appName, udid, isInstallPage, _callback);

    }

    /**
     * 
     * Get a release with id &#x60;release_id&#x60;. If &#x60;release_id&#x60; is &#x60;latest&#x60;, return the latest release that was distributed to the current user (from all the distribution groups).
     * @param releaseId The ID of the release, or &#x60;latest&#x60; to get the latest release from all the distribution groups assigned to the current user. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param udid when supplied, this call will also check if the given UDID is provisioned. Will be ignored for non-iOS platforms. The value will be returned in the property is_udid_provisioned. (optional)
     * @param isInstallPage The check if the request is from Install page (optional)
     * @return ReleasesGetLatestByDistributionGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &#x60;release_id&#x60; is not an integer or the string &#x60;latest&#x60;.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;not_found&#x60; - A release or an app can&#39;t be found. - &#x60;no_releases_for_user&#x60; - No releases available for that user (will only be returned when &#x60;release_id&#x60; is &#x60;latest&#x60;)  </td><td>  -  </td></tr>
     </table>
     */
    public ReleasesGetLatestByDistributionGroup200Response releasesGetLatestByUser(String releaseId, String ownerName, String appName, String udid, Boolean isInstallPage) throws ApiException {
        ApiResponse<ReleasesGetLatestByDistributionGroup200Response> localVarResp = releasesGetLatestByUserWithHttpInfo(releaseId, ownerName, appName, udid, isInstallPage);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a release with id &#x60;release_id&#x60;. If &#x60;release_id&#x60; is &#x60;latest&#x60;, return the latest release that was distributed to the current user (from all the distribution groups).
     * @param releaseId The ID of the release, or &#x60;latest&#x60; to get the latest release from all the distribution groups assigned to the current user. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param udid when supplied, this call will also check if the given UDID is provisioned. Will be ignored for non-iOS platforms. The value will be returned in the property is_udid_provisioned. (optional)
     * @param isInstallPage The check if the request is from Install page (optional)
     * @return ApiResponse&lt;ReleasesGetLatestByDistributionGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &#x60;release_id&#x60; is not an integer or the string &#x60;latest&#x60;.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;not_found&#x60; - A release or an app can&#39;t be found. - &#x60;no_releases_for_user&#x60; - No releases available for that user (will only be returned when &#x60;release_id&#x60; is &#x60;latest&#x60;)  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReleasesGetLatestByDistributionGroup200Response> releasesGetLatestByUserWithHttpInfo(String releaseId, String ownerName, String appName, String udid, Boolean isInstallPage) throws ApiException {
        okhttp3.Call localVarCall = releasesGetLatestByUserValidateBeforeCall(releaseId, ownerName, appName, udid, isInstallPage, null);
        Type localVarReturnType = new TypeToken<ReleasesGetLatestByDistributionGroup200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a release with id &#x60;release_id&#x60;. If &#x60;release_id&#x60; is &#x60;latest&#x60;, return the latest release that was distributed to the current user (from all the distribution groups).
     * @param releaseId The ID of the release, or &#x60;latest&#x60; to get the latest release from all the distribution groups assigned to the current user. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param udid when supplied, this call will also check if the given UDID is provisioned. Will be ignored for non-iOS platforms. The value will be returned in the property is_udid_provisioned. (optional)
     * @param isInstallPage The check if the request is from Install page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &#x60;release_id&#x60; is not an integer or the string &#x60;latest&#x60;.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;not_found&#x60; - A release or an app can&#39;t be found. - &#x60;no_releases_for_user&#x60; - No releases available for that user (will only be returned when &#x60;release_id&#x60; is &#x60;latest&#x60;)  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesGetLatestByUserAsync(String releaseId, String ownerName, String appName, String udid, Boolean isInstallPage, final ApiCallback<ReleasesGetLatestByDistributionGroup200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesGetLatestByUserValidateBeforeCall(releaseId, ownerName, appName, udid, isInstallPage, _callback);
        Type localVarReturnType = new TypeToken<ReleasesGetLatestByDistributionGroup200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesGetLatestPrivateRelease
     * @param appSecret The secret of the target application (required)
     * @param udid When passing &#x60;udid&#x60; in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the full release details of the latest release that was distributed to the current user (from all the private distribution groups). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;not_found&#x60; - A release or an app can&#39;t be found. - &#x60;no_releases_for_user&#x60; - No releases available for that user.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesGetLatestPrivateReleaseCall(String appSecret, String udid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/sdk/apps/{app_secret}/releases/private/latest"
            .replace("{" + "app_secret" + "}", localVarApiClient.escapeString(appSecret.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (udid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("udid", udid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesGetLatestPrivateReleaseValidateBeforeCall(String appSecret, String udid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appSecret' is set
        if (appSecret == null) {
            throw new ApiException("Missing the required parameter 'appSecret' when calling releasesGetLatestPrivateRelease(Async)");
        }

        return releasesGetLatestPrivateReleaseCall(appSecret, udid, _callback);

    }

    /**
     * 
     * Get the latest release distributed to a private group the given user is a member of for the given app.
     * @param appSecret The secret of the target application (required)
     * @param udid When passing &#x60;udid&#x60; in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms. (optional)
     * @return ReleasesGetLatestByDistributionGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the full release details of the latest release that was distributed to the current user (from all the private distribution groups). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;not_found&#x60; - A release or an app can&#39;t be found. - &#x60;no_releases_for_user&#x60; - No releases available for that user.  </td><td>  -  </td></tr>
     </table>
     */
    public ReleasesGetLatestByDistributionGroup200Response releasesGetLatestPrivateRelease(String appSecret, String udid) throws ApiException {
        ApiResponse<ReleasesGetLatestByDistributionGroup200Response> localVarResp = releasesGetLatestPrivateReleaseWithHttpInfo(appSecret, udid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the latest release distributed to a private group the given user is a member of for the given app.
     * @param appSecret The secret of the target application (required)
     * @param udid When passing &#x60;udid&#x60; in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms. (optional)
     * @return ApiResponse&lt;ReleasesGetLatestByDistributionGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the full release details of the latest release that was distributed to the current user (from all the private distribution groups). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;not_found&#x60; - A release or an app can&#39;t be found. - &#x60;no_releases_for_user&#x60; - No releases available for that user.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReleasesGetLatestByDistributionGroup200Response> releasesGetLatestPrivateReleaseWithHttpInfo(String appSecret, String udid) throws ApiException {
        okhttp3.Call localVarCall = releasesGetLatestPrivateReleaseValidateBeforeCall(appSecret, udid, null);
        Type localVarReturnType = new TypeToken<ReleasesGetLatestByDistributionGroup200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the latest release distributed to a private group the given user is a member of for the given app.
     * @param appSecret The secret of the target application (required)
     * @param udid When passing &#x60;udid&#x60; in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the full release details of the latest release that was distributed to the current user (from all the private distribution groups). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;not_found&#x60; - A release or an app can&#39;t be found. - &#x60;no_releases_for_user&#x60; - No releases available for that user.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesGetLatestPrivateReleaseAsync(String appSecret, String udid, final ApiCallback<ReleasesGetLatestByDistributionGroup200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesGetLatestPrivateReleaseValidateBeforeCall(appSecret, udid, _callback);
        Type localVarReturnType = new TypeToken<ReleasesGetLatestByDistributionGroup200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesGetLatestPublicRelease
     * @param appSecret The secret of the target application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The full release details of the latest release that was distributed to a public group. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error Codes: - &#x60;not_found&#x60; - The app doesn&#39;t exist - &#x60;no_releases_for_app&#x60; - The app has no public releases.  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call releasesGetLatestPublicReleaseCall(String appSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/public/sdk/apps/{app_secret}/releases/latest"
            .replace("{" + "app_secret" + "}", localVarApiClient.escapeString(appSecret.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesGetLatestPublicReleaseValidateBeforeCall(String appSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appSecret' is set
        if (appSecret == null) {
            throw new ApiException("Missing the required parameter 'appSecret' when calling releasesGetLatestPublicRelease(Async)");
        }

        return releasesGetLatestPublicReleaseCall(appSecret, _callback);

    }

    /**
     * 
     * Get the latest public release for the given app.
     * @param appSecret The secret of the target application (required)
     * @return ReleasesGetLatestByDistributionGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The full release details of the latest release that was distributed to a public group. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error Codes: - &#x60;not_found&#x60; - The app doesn&#39;t exist - &#x60;no_releases_for_app&#x60; - The app has no public releases.  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ReleasesGetLatestByDistributionGroup200Response releasesGetLatestPublicRelease(String appSecret) throws ApiException {
        ApiResponse<ReleasesGetLatestByDistributionGroup200Response> localVarResp = releasesGetLatestPublicReleaseWithHttpInfo(appSecret);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the latest public release for the given app.
     * @param appSecret The secret of the target application (required)
     * @return ApiResponse&lt;ReleasesGetLatestByDistributionGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The full release details of the latest release that was distributed to a public group. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error Codes: - &#x60;not_found&#x60; - The app doesn&#39;t exist - &#x60;no_releases_for_app&#x60; - The app has no public releases.  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ReleasesGetLatestByDistributionGroup200Response> releasesGetLatestPublicReleaseWithHttpInfo(String appSecret) throws ApiException {
        okhttp3.Call localVarCall = releasesGetLatestPublicReleaseValidateBeforeCall(appSecret, null);
        Type localVarReturnType = new TypeToken<ReleasesGetLatestByDistributionGroup200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the latest public release for the given app.
     * @param appSecret The secret of the target application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The full release details of the latest release that was distributed to a public group. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error Codes: - &#x60;not_found&#x60; - The app doesn&#39;t exist - &#x60;no_releases_for_app&#x60; - The app has no public releases.  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call releasesGetLatestPublicReleaseAsync(String appSecret, final ApiCallback<ReleasesGetLatestByDistributionGroup200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesGetLatestPublicReleaseValidateBeforeCall(appSecret, _callback);
        Type localVarReturnType = new TypeToken<ReleasesGetLatestByDistributionGroup200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesGetPublicGroupsForReleaseByHash
     * @param appSecret The secret of the target application (required)
     * @param releaseHash The hash of the release (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The public distribution groups that the release has been distributed to </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error Codes: - &#x60;not_found&#x60; - The app doesn&#39;t exist  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesGetPublicGroupsForReleaseByHashCall(String appSecret, String releaseHash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/public/sdk/apps/{app_secret}/releases/{release_hash}/public_distribution_groups"
            .replace("{" + "app_secret" + "}", localVarApiClient.escapeString(appSecret.toString()))
            .replace("{" + "release_hash" + "}", localVarApiClient.escapeString(releaseHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesGetPublicGroupsForReleaseByHashValidateBeforeCall(String appSecret, String releaseHash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appSecret' is set
        if (appSecret == null) {
            throw new ApiException("Missing the required parameter 'appSecret' when calling releasesGetPublicGroupsForReleaseByHash(Async)");
        }

        // verify the required parameter 'releaseHash' is set
        if (releaseHash == null) {
            throw new ApiException("Missing the required parameter 'releaseHash' when calling releasesGetPublicGroupsForReleaseByHash(Async)");
        }

        return releasesGetPublicGroupsForReleaseByHashCall(appSecret, releaseHash, _callback);

    }

    /**
     * 
     * Get all public distribution groups that a given release has been distributed to
     * @param appSecret The secret of the target application (required)
     * @param releaseHash The hash of the release (required)
     * @return List&lt;ReleasesGetPublicGroupsForReleaseByHash200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The public distribution groups that the release has been distributed to </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error Codes: - &#x60;not_found&#x60; - The app doesn&#39;t exist  </td><td>  -  </td></tr>
     </table>
     */
    public List<ReleasesGetPublicGroupsForReleaseByHash200ResponseInner> releasesGetPublicGroupsForReleaseByHash(String appSecret, String releaseHash) throws ApiException {
        ApiResponse<List<ReleasesGetPublicGroupsForReleaseByHash200ResponseInner>> localVarResp = releasesGetPublicGroupsForReleaseByHashWithHttpInfo(appSecret, releaseHash);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all public distribution groups that a given release has been distributed to
     * @param appSecret The secret of the target application (required)
     * @param releaseHash The hash of the release (required)
     * @return ApiResponse&lt;List&lt;ReleasesGetPublicGroupsForReleaseByHash200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The public distribution groups that the release has been distributed to </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error Codes: - &#x60;not_found&#x60; - The app doesn&#39;t exist  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReleasesGetPublicGroupsForReleaseByHash200ResponseInner>> releasesGetPublicGroupsForReleaseByHashWithHttpInfo(String appSecret, String releaseHash) throws ApiException {
        okhttp3.Call localVarCall = releasesGetPublicGroupsForReleaseByHashValidateBeforeCall(appSecret, releaseHash, null);
        Type localVarReturnType = new TypeToken<List<ReleasesGetPublicGroupsForReleaseByHash200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all public distribution groups that a given release has been distributed to
     * @param appSecret The secret of the target application (required)
     * @param releaseHash The hash of the release (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The public distribution groups that the release has been distributed to </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error Codes: - &#x60;not_found&#x60; - The app doesn&#39;t exist  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesGetPublicGroupsForReleaseByHashAsync(String appSecret, String releaseHash, final ApiCallback<List<ReleasesGetPublicGroupsForReleaseByHash200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesGetPublicGroupsForReleaseByHashValidateBeforeCall(appSecret, releaseHash, _callback);
        Type localVarReturnType = new TypeToken<List<ReleasesGetPublicGroupsForReleaseByHash200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesGetReleaseUploadStatus
     * @param uploadId The ID of the release upload (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid properties. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;not_found&#x60; - The app or upload doesn&#39;t exist.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesGetReleaseUploadStatusCall(UUID uploadId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/uploads/releases/{upload_id}"
            .replace("{" + "upload_id" + "}", localVarApiClient.escapeString(uploadId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesGetReleaseUploadStatusValidateBeforeCall(UUID uploadId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uploadId' is set
        if (uploadId == null) {
            throw new ApiException("Missing the required parameter 'uploadId' when calling releasesGetReleaseUploadStatus(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling releasesGetReleaseUploadStatus(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling releasesGetReleaseUploadStatus(Async)");
        }

        return releasesGetReleaseUploadStatusCall(uploadId, ownerName, appName, _callback);

    }

    /**
     * 
     * Get the current status of the release upload.
     * @param uploadId The ID of the release upload (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ReleasesGetReleaseUploadStatus200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid properties. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;not_found&#x60; - The app or upload doesn&#39;t exist.  </td><td>  -  </td></tr>
     </table>
     */
    public ReleasesGetReleaseUploadStatus200Response releasesGetReleaseUploadStatus(UUID uploadId, String ownerName, String appName) throws ApiException {
        ApiResponse<ReleasesGetReleaseUploadStatus200Response> localVarResp = releasesGetReleaseUploadStatusWithHttpInfo(uploadId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the current status of the release upload.
     * @param uploadId The ID of the release upload (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;ReleasesGetReleaseUploadStatus200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid properties. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;not_found&#x60; - The app or upload doesn&#39;t exist.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReleasesGetReleaseUploadStatus200Response> releasesGetReleaseUploadStatusWithHttpInfo(UUID uploadId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = releasesGetReleaseUploadStatusValidateBeforeCall(uploadId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<ReleasesGetReleaseUploadStatus200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the current status of the release upload.
     * @param uploadId The ID of the release upload (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid properties. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;not_found&#x60; - The app or upload doesn&#39;t exist.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesGetReleaseUploadStatusAsync(UUID uploadId, String ownerName, String appName, final ApiCallback<ReleasesGetReleaseUploadStatus200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesGetReleaseUploadStatusValidateBeforeCall(uploadId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<ReleasesGetReleaseUploadStatus200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesGetSparkleFeed
     * @param appSecret The secret of the application. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RSS feed of releases. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesGetSparkleFeedCall(String appSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/public/sparkle/apps/{app_secret}"
            .replace("{" + "app_secret" + "}", localVarApiClient.escapeString(appSecret.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesGetSparkleFeedValidateBeforeCall(String appSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appSecret' is set
        if (appSecret == null) {
            throw new ApiException("Missing the required parameter 'appSecret' when calling releasesGetSparkleFeed(Async)");
        }

        return releasesGetSparkleFeedCall(appSecret, _callback);

    }

    /**
     * 
     * Gets the sparkle feed of the releases that are distributed to all the public distribution groups.
     * @param appSecret The secret of the application. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RSS feed of releases. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void releasesGetSparkleFeed(String appSecret) throws ApiException {
        releasesGetSparkleFeedWithHttpInfo(appSecret);
    }

    /**
     * 
     * Gets the sparkle feed of the releases that are distributed to all the public distribution groups.
     * @param appSecret The secret of the application. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RSS feed of releases. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> releasesGetSparkleFeedWithHttpInfo(String appSecret) throws ApiException {
        okhttp3.Call localVarCall = releasesGetSparkleFeedValidateBeforeCall(appSecret, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Gets the sparkle feed of the releases that are distributed to all the public distribution groups.
     * @param appSecret The secret of the application. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RSS feed of releases. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesGetSparkleFeedAsync(String appSecret, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesGetSparkleFeedValidateBeforeCall(appSecret, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesList
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param publishedOnly When *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out. (optional)
     * @param scope When the scope is &#39;tester&#39;, only includes releases that have been distributed to groups that the user belongs to. (optional)
     * @param top The number of releases to return (optional)
     * @param releaseId The id of a release (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesListCall(String ownerName, String appName, Boolean publishedOnly, String scope, BigDecimal top, BigDecimal releaseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/releases"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (publishedOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("published_only", publishedOnly));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("top", top));
        }

        if (releaseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("releaseId", releaseId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesListValidateBeforeCall(String ownerName, String appName, Boolean publishedOnly, String scope, BigDecimal top, BigDecimal releaseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling releasesList(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling releasesList(Async)");
        }

        return releasesListCall(ownerName, appName, publishedOnly, scope, top, releaseId, _callback);

    }

    /**
     * 
     * Return basic information about releases.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param publishedOnly When *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out. (optional)
     * @param scope When the scope is &#39;tester&#39;, only includes releases that have been distributed to groups that the user belongs to. (optional)
     * @param top The number of releases to return (optional)
     * @param releaseId The id of a release (optional)
     * @return List&lt;ReleasesListLatest200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<ReleasesListLatest200ResponseInner> releasesList(String ownerName, String appName, Boolean publishedOnly, String scope, BigDecimal top, BigDecimal releaseId) throws ApiException {
        ApiResponse<List<ReleasesListLatest200ResponseInner>> localVarResp = releasesListWithHttpInfo(ownerName, appName, publishedOnly, scope, top, releaseId);
        return localVarResp.getData();
    }

    /**
     * 
     * Return basic information about releases.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param publishedOnly When *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out. (optional)
     * @param scope When the scope is &#39;tester&#39;, only includes releases that have been distributed to groups that the user belongs to. (optional)
     * @param top The number of releases to return (optional)
     * @param releaseId The id of a release (optional)
     * @return ApiResponse&lt;List&lt;ReleasesListLatest200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReleasesListLatest200ResponseInner>> releasesListWithHttpInfo(String ownerName, String appName, Boolean publishedOnly, String scope, BigDecimal top, BigDecimal releaseId) throws ApiException {
        okhttp3.Call localVarCall = releasesListValidateBeforeCall(ownerName, appName, publishedOnly, scope, top, releaseId, null);
        Type localVarReturnType = new TypeToken<List<ReleasesListLatest200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return basic information about releases.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param publishedOnly When *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out. (optional)
     * @param scope When the scope is &#39;tester&#39;, only includes releases that have been distributed to groups that the user belongs to. (optional)
     * @param top The number of releases to return (optional)
     * @param releaseId The id of a release (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesListAsync(String ownerName, String appName, Boolean publishedOnly, String scope, BigDecimal top, BigDecimal releaseId, final ApiCallback<List<ReleasesListLatest200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesListValidateBeforeCall(ownerName, appName, publishedOnly, scope, top, releaseId, _callback);
        Type localVarReturnType = new TypeToken<List<ReleasesListLatest200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesListByDistributionGroup
     * @param distributionGroupName The name of the distribution group. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A distribution group can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesListByDistributionGroupCall(String distributionGroupName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases"
            .replace("{" + "distribution_group_name" + "}", localVarApiClient.escapeString(distributionGroupName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesListByDistributionGroupValidateBeforeCall(String distributionGroupName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'distributionGroupName' is set
        if (distributionGroupName == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupName' when calling releasesListByDistributionGroup(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling releasesListByDistributionGroup(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling releasesListByDistributionGroup(Async)");
        }

        return releasesListByDistributionGroupCall(distributionGroupName, ownerName, appName, _callback);

    }

    /**
     * 
     * Return basic information about distributed releases in a given distribution group.
     * @param distributionGroupName The name of the distribution group. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;ReleasesListByDistributionGroup200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A distribution group can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public List<ReleasesListByDistributionGroup200ResponseInner> releasesListByDistributionGroup(String distributionGroupName, String ownerName, String appName) throws ApiException {
        ApiResponse<List<ReleasesListByDistributionGroup200ResponseInner>> localVarResp = releasesListByDistributionGroupWithHttpInfo(distributionGroupName, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Return basic information about distributed releases in a given distribution group.
     * @param distributionGroupName The name of the distribution group. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;ReleasesListByDistributionGroup200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A distribution group can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReleasesListByDistributionGroup200ResponseInner>> releasesListByDistributionGroupWithHttpInfo(String distributionGroupName, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = releasesListByDistributionGroupValidateBeforeCall(distributionGroupName, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<ReleasesListByDistributionGroup200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return basic information about distributed releases in a given distribution group.
     * @param distributionGroupName The name of the distribution group. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A distribution group can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesListByDistributionGroupAsync(String distributionGroupName, String ownerName, String appName, final ApiCallback<List<ReleasesListByDistributionGroup200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesListByDistributionGroupValidateBeforeCall(distributionGroupName, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<ReleasesListByDistributionGroup200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesListLatest
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesListLatestCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/recent_releases"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesListLatestValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling releasesListLatest(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling releasesListLatest(Async)");
        }

        return releasesListLatestCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Get the latest release from every distribution group associated with an application.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;ReleasesListLatest200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<ReleasesListLatest200ResponseInner> releasesListLatest(String ownerName, String appName) throws ApiException {
        ApiResponse<List<ReleasesListLatest200ResponseInner>> localVarResp = releasesListLatestWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the latest release from every distribution group associated with an application.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;ReleasesListLatest200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReleasesListLatest200ResponseInner>> releasesListLatestWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = releasesListLatestValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<ReleasesListLatest200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the latest release from every distribution group associated with an application.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesListLatestAsync(String ownerName, String appName, final ApiCallback<List<ReleasesListLatest200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesListLatestValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<ReleasesListLatest200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesPutDistributionGroup
     * @param releaseId The ID of the release (required)
     * @param groupId The id of the releases destination (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesPutDistributionGroupRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A destination can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesPutDistributionGroupCall(Integer releaseId, UUID groupId, String ownerName, String appName, ReleasesPutDistributionGroupRequest releasesPutDistributionGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = releasesPutDistributionGroupRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups/{group_id}"
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()))
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesPutDistributionGroupValidateBeforeCall(Integer releaseId, UUID groupId, String ownerName, String appName, ReleasesPutDistributionGroupRequest releasesPutDistributionGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling releasesPutDistributionGroup(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling releasesPutDistributionGroup(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling releasesPutDistributionGroup(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling releasesPutDistributionGroup(Async)");
        }

        return releasesPutDistributionGroupCall(releaseId, groupId, ownerName, appName, releasesPutDistributionGroupRequest, _callback);

    }

    /**
     * 
     * Update details about the specified distribution group associated with the release
     * @param releaseId The ID of the release (required)
     * @param groupId The id of the releases destination (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesPutDistributionGroupRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A destination can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public void releasesPutDistributionGroup(Integer releaseId, UUID groupId, String ownerName, String appName, ReleasesPutDistributionGroupRequest releasesPutDistributionGroupRequest) throws ApiException {
        releasesPutDistributionGroupWithHttpInfo(releaseId, groupId, ownerName, appName, releasesPutDistributionGroupRequest);
    }

    /**
     * 
     * Update details about the specified distribution group associated with the release
     * @param releaseId The ID of the release (required)
     * @param groupId The id of the releases destination (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesPutDistributionGroupRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A destination can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> releasesPutDistributionGroupWithHttpInfo(Integer releaseId, UUID groupId, String ownerName, String appName, ReleasesPutDistributionGroupRequest releasesPutDistributionGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = releasesPutDistributionGroupValidateBeforeCall(releaseId, groupId, ownerName, appName, releasesPutDistributionGroupRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update details about the specified distribution group associated with the release
     * @param releaseId The ID of the release (required)
     * @param groupId The id of the releases destination (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesPutDistributionGroupRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A destination can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesPutDistributionGroupAsync(Integer releaseId, UUID groupId, String ownerName, String appName, ReleasesPutDistributionGroupRequest releasesPutDistributionGroupRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesPutDistributionGroupValidateBeforeCall(releaseId, groupId, ownerName, appName, releasesPutDistributionGroupRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesPutDistributionTester
     * @param releaseId The ID of the release (required)
     * @param testerId The id of the tester (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesPutDistributionGroupRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A destination can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesPutDistributionTesterCall(Integer releaseId, UUID testerId, String ownerName, String appName, ReleasesPutDistributionGroupRequest releasesPutDistributionGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = releasesPutDistributionGroupRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers/{tester_id}"
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()))
            .replace("{" + "tester_id" + "}", localVarApiClient.escapeString(testerId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesPutDistributionTesterValidateBeforeCall(Integer releaseId, UUID testerId, String ownerName, String appName, ReleasesPutDistributionGroupRequest releasesPutDistributionGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling releasesPutDistributionTester(Async)");
        }

        // verify the required parameter 'testerId' is set
        if (testerId == null) {
            throw new ApiException("Missing the required parameter 'testerId' when calling releasesPutDistributionTester(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling releasesPutDistributionTester(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling releasesPutDistributionTester(Async)");
        }

        return releasesPutDistributionTesterCall(releaseId, testerId, ownerName, appName, releasesPutDistributionGroupRequest, _callback);

    }

    /**
     * 
     * Update details about the specified tester associated with the release
     * @param releaseId The ID of the release (required)
     * @param testerId The id of the tester (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesPutDistributionGroupRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A destination can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public void releasesPutDistributionTester(Integer releaseId, UUID testerId, String ownerName, String appName, ReleasesPutDistributionGroupRequest releasesPutDistributionGroupRequest) throws ApiException {
        releasesPutDistributionTesterWithHttpInfo(releaseId, testerId, ownerName, appName, releasesPutDistributionGroupRequest);
    }

    /**
     * 
     * Update details about the specified tester associated with the release
     * @param releaseId The ID of the release (required)
     * @param testerId The id of the tester (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesPutDistributionGroupRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A destination can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> releasesPutDistributionTesterWithHttpInfo(Integer releaseId, UUID testerId, String ownerName, String appName, ReleasesPutDistributionGroupRequest releasesPutDistributionGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = releasesPutDistributionTesterValidateBeforeCall(releaseId, testerId, ownerName, appName, releasesPutDistributionGroupRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update details about the specified tester associated with the release
     * @param releaseId The ID of the release (required)
     * @param testerId The id of the tester (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesPutDistributionGroupRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A destination can&#39;t be found.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesPutDistributionTesterAsync(Integer releaseId, UUID testerId, String ownerName, String appName, ReleasesPutDistributionGroupRequest releasesPutDistributionGroupRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesPutDistributionTesterValidateBeforeCall(releaseId, testerId, ownerName, appName, releasesPutDistributionGroupRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesUpdate
     * @param releaseId The ID of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesUpdateRequest The release information. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Release not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesUpdateCall(Integer releaseId, String ownerName, String appName, ReleasesUpdateRequest releasesUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = releasesUpdateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}"
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesUpdateValidateBeforeCall(Integer releaseId, String ownerName, String appName, ReleasesUpdateRequest releasesUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling releasesUpdate(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling releasesUpdate(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling releasesUpdate(Async)");
        }

        // verify the required parameter 'releasesUpdateRequest' is set
        if (releasesUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'releasesUpdateRequest' when calling releasesUpdate(Async)");
        }

        return releasesUpdateCall(releaseId, ownerName, appName, releasesUpdateRequest, _callback);

    }

    /**
     * 
     * Updates a release.
     * @param releaseId The ID of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesUpdateRequest The release information. (required)
     * @return ReleasesUpdate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Release not found </td><td>  -  </td></tr>
     </table>
     */
    public ReleasesUpdate200Response releasesUpdate(Integer releaseId, String ownerName, String appName, ReleasesUpdateRequest releasesUpdateRequest) throws ApiException {
        ApiResponse<ReleasesUpdate200Response> localVarResp = releasesUpdateWithHttpInfo(releaseId, ownerName, appName, releasesUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a release.
     * @param releaseId The ID of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesUpdateRequest The release information. (required)
     * @return ApiResponse&lt;ReleasesUpdate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Release not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReleasesUpdate200Response> releasesUpdateWithHttpInfo(Integer releaseId, String ownerName, String appName, ReleasesUpdateRequest releasesUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = releasesUpdateValidateBeforeCall(releaseId, ownerName, appName, releasesUpdateRequest, null);
        Type localVarReturnType = new TypeToken<ReleasesUpdate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a release.
     * @param releaseId The ID of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesUpdateRequest The release information. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Release not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesUpdateAsync(Integer releaseId, String ownerName, String appName, ReleasesUpdateRequest releasesUpdateRequest, final ApiCallback<ReleasesUpdate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesUpdateValidateBeforeCall(releaseId, ownerName, appName, releasesUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<ReleasesUpdate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesUpdateDetails
     * @param releaseId The ID of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesUpdateDetailsRequest The release information. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Release not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesUpdateDetailsCall(Integer releaseId, String ownerName, String appName, ReleasesUpdateDetailsRequest releasesUpdateDetailsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = releasesUpdateDetailsRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}"
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesUpdateDetailsValidateBeforeCall(Integer releaseId, String ownerName, String appName, ReleasesUpdateDetailsRequest releasesUpdateDetailsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling releasesUpdateDetails(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling releasesUpdateDetails(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling releasesUpdateDetails(Async)");
        }

        // verify the required parameter 'releasesUpdateDetailsRequest' is set
        if (releasesUpdateDetailsRequest == null) {
            throw new ApiException("Missing the required parameter 'releasesUpdateDetailsRequest' when calling releasesUpdateDetails(Async)");
        }

        return releasesUpdateDetailsCall(releaseId, ownerName, appName, releasesUpdateDetailsRequest, _callback);

    }

    /**
     * 
     * Update details of a release.
     * @param releaseId The ID of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesUpdateDetailsRequest The release information. (required)
     * @return ReleasesUpdateDetails200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Release not found </td><td>  -  </td></tr>
     </table>
     */
    public ReleasesUpdateDetails200Response releasesUpdateDetails(Integer releaseId, String ownerName, String appName, ReleasesUpdateDetailsRequest releasesUpdateDetailsRequest) throws ApiException {
        ApiResponse<ReleasesUpdateDetails200Response> localVarResp = releasesUpdateDetailsWithHttpInfo(releaseId, ownerName, appName, releasesUpdateDetailsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Update details of a release.
     * @param releaseId The ID of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesUpdateDetailsRequest The release information. (required)
     * @return ApiResponse&lt;ReleasesUpdateDetails200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Release not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReleasesUpdateDetails200Response> releasesUpdateDetailsWithHttpInfo(Integer releaseId, String ownerName, String appName, ReleasesUpdateDetailsRequest releasesUpdateDetailsRequest) throws ApiException {
        okhttp3.Call localVarCall = releasesUpdateDetailsValidateBeforeCall(releaseId, ownerName, appName, releasesUpdateDetailsRequest, null);
        Type localVarReturnType = new TypeToken<ReleasesUpdateDetails200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update details of a release.
     * @param releaseId The ID of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesUpdateDetailsRequest The release information. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Release not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesUpdateDetailsAsync(Integer releaseId, String ownerName, String appName, ReleasesUpdateDetailsRequest releasesUpdateDetailsRequest, final ApiCallback<ReleasesUpdateDetails200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesUpdateDetailsValidateBeforeCall(releaseId, ownerName, appName, releasesUpdateDetailsRequest, _callback);
        Type localVarReturnType = new TypeToken<ReleasesUpdateDetails200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasesUpdateReleaseUploadStatus
     * @param uploadId The ID of the release upload (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesUpdateReleaseUploadStatusRequest The release upload status information. (required)
     * @param extract A flag that indicates to extract release or not, true by default (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid properties. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;not_found&#x60; - The app or upload doesn&#39;t exist.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesUpdateReleaseUploadStatusCall(UUID uploadId, String ownerName, String appName, ReleasesUpdateReleaseUploadStatusRequest releasesUpdateReleaseUploadStatusRequest, Boolean extract, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = releasesUpdateReleaseUploadStatusRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/uploads/releases/{upload_id}"
            .replace("{" + "upload_id" + "}", localVarApiClient.escapeString(uploadId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (extract != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extract", extract));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasesUpdateReleaseUploadStatusValidateBeforeCall(UUID uploadId, String ownerName, String appName, ReleasesUpdateReleaseUploadStatusRequest releasesUpdateReleaseUploadStatusRequest, Boolean extract, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uploadId' is set
        if (uploadId == null) {
            throw new ApiException("Missing the required parameter 'uploadId' when calling releasesUpdateReleaseUploadStatus(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling releasesUpdateReleaseUploadStatus(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling releasesUpdateReleaseUploadStatus(Async)");
        }

        // verify the required parameter 'releasesUpdateReleaseUploadStatusRequest' is set
        if (releasesUpdateReleaseUploadStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'releasesUpdateReleaseUploadStatusRequest' when calling releasesUpdateReleaseUploadStatus(Async)");
        }

        return releasesUpdateReleaseUploadStatusCall(uploadId, ownerName, appName, releasesUpdateReleaseUploadStatusRequest, extract, _callback);

    }

    /**
     * 
     * Update the current status of the release upload.
     * @param uploadId The ID of the release upload (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesUpdateReleaseUploadStatusRequest The release upload status information. (required)
     * @param extract A flag that indicates to extract release or not, true by default (optional)
     * @return ReleasesUpdateReleaseUploadStatus200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid properties. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;not_found&#x60; - The app or upload doesn&#39;t exist.  </td><td>  -  </td></tr>
     </table>
     */
    public ReleasesUpdateReleaseUploadStatus200Response releasesUpdateReleaseUploadStatus(UUID uploadId, String ownerName, String appName, ReleasesUpdateReleaseUploadStatusRequest releasesUpdateReleaseUploadStatusRequest, Boolean extract) throws ApiException {
        ApiResponse<ReleasesUpdateReleaseUploadStatus200Response> localVarResp = releasesUpdateReleaseUploadStatusWithHttpInfo(uploadId, ownerName, appName, releasesUpdateReleaseUploadStatusRequest, extract);
        return localVarResp.getData();
    }

    /**
     * 
     * Update the current status of the release upload.
     * @param uploadId The ID of the release upload (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesUpdateReleaseUploadStatusRequest The release upload status information. (required)
     * @param extract A flag that indicates to extract release or not, true by default (optional)
     * @return ApiResponse&lt;ReleasesUpdateReleaseUploadStatus200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid properties. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;not_found&#x60; - The app or upload doesn&#39;t exist.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReleasesUpdateReleaseUploadStatus200Response> releasesUpdateReleaseUploadStatusWithHttpInfo(UUID uploadId, String ownerName, String appName, ReleasesUpdateReleaseUploadStatusRequest releasesUpdateReleaseUploadStatusRequest, Boolean extract) throws ApiException {
        okhttp3.Call localVarCall = releasesUpdateReleaseUploadStatusValidateBeforeCall(uploadId, ownerName, appName, releasesUpdateReleaseUploadStatusRequest, extract, null);
        Type localVarReturnType = new TypeToken<ReleasesUpdateReleaseUploadStatus200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the current status of the release upload.
     * @param uploadId The ID of the release upload (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param releasesUpdateReleaseUploadStatusRequest The release upload status information. (required)
     * @param extract A flag that indicates to extract release or not, true by default (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request contained invalid properties. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error codes: - &#x60;not_found&#x60; - The app or upload doesn&#39;t exist.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasesUpdateReleaseUploadStatusAsync(UUID uploadId, String ownerName, String appName, ReleasesUpdateReleaseUploadStatusRequest releasesUpdateReleaseUploadStatusRequest, Boolean extract, final ApiCallback<ReleasesUpdateReleaseUploadStatus200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasesUpdateReleaseUploadStatusValidateBeforeCall(uploadId, ownerName, appName, releasesUpdateReleaseUploadStatusRequest, extract, _callback);
        Type localVarReturnType = new TypeToken<ReleasesUpdateReleaseUploadStatus200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storeNotificationsGetNotificationByAppId
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Availability for store service status is stored in response schema. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storeNotificationsGetNotificationByAppIdCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/store_service_status"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storeNotificationsGetNotificationByAppIdValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling storeNotificationsGetNotificationByAppId(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling storeNotificationsGetNotificationByAppId(Async)");
        }

        return storeNotificationsGetNotificationByAppIdCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Application specific store service status
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return StoreNotificationsGetNotificationByAppId200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Availability for store service status is stored in response schema. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public StoreNotificationsGetNotificationByAppId200Response storeNotificationsGetNotificationByAppId(String ownerName, String appName) throws ApiException {
        ApiResponse<StoreNotificationsGetNotificationByAppId200Response> localVarResp = storeNotificationsGetNotificationByAppIdWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Application specific store service status
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;StoreNotificationsGetNotificationByAppId200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Availability for store service status is stored in response schema. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoreNotificationsGetNotificationByAppId200Response> storeNotificationsGetNotificationByAppIdWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = storeNotificationsGetNotificationByAppIdValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<StoreNotificationsGetNotificationByAppId200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Application specific store service status
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Availability for store service status is stored in response schema. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storeNotificationsGetNotificationByAppIdAsync(String ownerName, String appName, final ApiCallback<StoreNotificationsGetNotificationByAppId200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = storeNotificationsGetNotificationByAppIdValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<StoreNotificationsGetNotificationByAppId200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storeReleasePublishLogsGet
     * @param storeName The name of the store (required)
     * @param releaseId The ID of the realease (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storeReleasePublishLogsGetCall(String storeName, String releaseId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_logs"
            .replace("{" + "store_name" + "}", localVarApiClient.escapeString(storeName.toString()))
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storeReleasePublishLogsGetValidateBeforeCall(String storeName, String releaseId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeName' is set
        if (storeName == null) {
            throw new ApiException("Missing the required parameter 'storeName' when calling storeReleasePublishLogsGet(Async)");
        }

        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling storeReleasePublishLogsGet(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling storeReleasePublishLogsGet(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling storeReleasePublishLogsGet(Async)");
        }

        return storeReleasePublishLogsGetCall(storeName, releaseId, ownerName, appName, _callback);

    }

    /**
     * 
     * Returns publish logs for a particular release published to a particular store
     * @param storeName The name of the store (required)
     * @param releaseId The ID of the realease (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void storeReleasePublishLogsGet(String storeName, String releaseId, String ownerName, String appName) throws ApiException {
        storeReleasePublishLogsGetWithHttpInfo(storeName, releaseId, ownerName, appName);
    }

    /**
     * 
     * Returns publish logs for a particular release published to a particular store
     * @param storeName The name of the store (required)
     * @param releaseId The ID of the realease (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> storeReleasePublishLogsGetWithHttpInfo(String storeName, String releaseId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = storeReleasePublishLogsGetValidateBeforeCall(storeName, releaseId, ownerName, appName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns publish logs for a particular release published to a particular store
     * @param storeName The name of the store (required)
     * @param releaseId The ID of the realease (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storeReleasePublishLogsGetAsync(String storeName, String releaseId, String ownerName, String appName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = storeReleasePublishLogsGetValidateBeforeCall(storeName, releaseId, ownerName, appName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for storeReleasesDelete
     * @param storeName The name of the store (required)
     * @param releaseId The id of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storeReleasesDeleteCall(String storeName, String releaseId, String ownerName, String appName, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}"
            .replace("{" + "store_name" + "}", localVarApiClient.escapeString(storeName.toString()))
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storeReleasesDeleteValidateBeforeCall(String storeName, String releaseId, String ownerName, String appName, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeName' is set
        if (storeName == null) {
            throw new ApiException("Missing the required parameter 'storeName' when calling storeReleasesDelete(Async)");
        }

        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling storeReleasesDelete(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling storeReleasesDelete(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling storeReleasesDelete(Async)");
        }

        return storeReleasesDeleteCall(storeName, releaseId, ownerName, appName, body, _callback);

    }

    /**
     * 
     * delete the release with release Id
     * @param storeName The name of the store (required)
     * @param releaseId The id of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void storeReleasesDelete(String storeName, String releaseId, String ownerName, String appName, String body) throws ApiException {
        storeReleasesDeleteWithHttpInfo(storeName, releaseId, ownerName, appName, body);
    }

    /**
     * 
     * delete the release with release Id
     * @param storeName The name of the store (required)
     * @param releaseId The id of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> storeReleasesDeleteWithHttpInfo(String storeName, String releaseId, String ownerName, String appName, String body) throws ApiException {
        okhttp3.Call localVarCall = storeReleasesDeleteValidateBeforeCall(storeName, releaseId, ownerName, appName, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * delete the release with release Id
     * @param storeName The name of the store (required)
     * @param releaseId The id of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storeReleasesDeleteAsync(String storeName, String releaseId, String ownerName, String appName, String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = storeReleasesDeleteValidateBeforeCall(storeName, releaseId, ownerName, appName, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for storeReleasesGet
     * @param storeName The name of the store (required)
     * @param releaseId The name of the store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storeReleasesGetCall(String storeName, String releaseId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}"
            .replace("{" + "store_name" + "}", localVarApiClient.escapeString(storeName.toString()))
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storeReleasesGetValidateBeforeCall(String storeName, String releaseId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeName' is set
        if (storeName == null) {
            throw new ApiException("Missing the required parameter 'storeName' when calling storeReleasesGet(Async)");
        }

        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling storeReleasesGet(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling storeReleasesGet(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling storeReleasesGet(Async)");
        }

        return storeReleasesGetCall(storeName, releaseId, ownerName, appName, _callback);

    }

    /**
     * 
     * Return releases published in a store for releaseId and storeId
     * @param storeName The name of the store (required)
     * @param releaseId The name of the store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;StoreReleasesGetLatest200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<StoreReleasesGetLatest200ResponseInner> storeReleasesGet(String storeName, String releaseId, String ownerName, String appName) throws ApiException {
        ApiResponse<List<StoreReleasesGetLatest200ResponseInner>> localVarResp = storeReleasesGetWithHttpInfo(storeName, releaseId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Return releases published in a store for releaseId and storeId
     * @param storeName The name of the store (required)
     * @param releaseId The name of the store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;StoreReleasesGetLatest200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<StoreReleasesGetLatest200ResponseInner>> storeReleasesGetWithHttpInfo(String storeName, String releaseId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = storeReleasesGetValidateBeforeCall(storeName, releaseId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<StoreReleasesGetLatest200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return releases published in a store for releaseId and storeId
     * @param storeName The name of the store (required)
     * @param releaseId The name of the store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storeReleasesGetAsync(String storeName, String releaseId, String ownerName, String appName, final ApiCallback<List<StoreReleasesGetLatest200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = storeReleasesGetValidateBeforeCall(storeName, releaseId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<StoreReleasesGetLatest200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storeReleasesGetLatest
     * @param storeName The name of the store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storeReleasesGetLatestCall(String storeName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/latest_release"
            .replace("{" + "store_name" + "}", localVarApiClient.escapeString(storeName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storeReleasesGetLatestValidateBeforeCall(String storeName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeName' is set
        if (storeName == null) {
            throw new ApiException("Missing the required parameter 'storeName' when calling storeReleasesGetLatest(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling storeReleasesGetLatest(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling storeReleasesGetLatest(Async)");
        }

        return storeReleasesGetLatestCall(storeName, ownerName, appName, _callback);

    }

    /**
     * 
     * Returns the latest release published in a store.
     * @param storeName The name of the store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;StoreReleasesGetLatest200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<StoreReleasesGetLatest200ResponseInner> storeReleasesGetLatest(String storeName, String ownerName, String appName) throws ApiException {
        ApiResponse<List<StoreReleasesGetLatest200ResponseInner>> localVarResp = storeReleasesGetLatestWithHttpInfo(storeName, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the latest release published in a store.
     * @param storeName The name of the store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;StoreReleasesGetLatest200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<StoreReleasesGetLatest200ResponseInner>> storeReleasesGetLatestWithHttpInfo(String storeName, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = storeReleasesGetLatestValidateBeforeCall(storeName, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<StoreReleasesGetLatest200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the latest release published in a store.
     * @param storeName The name of the store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storeReleasesGetLatestAsync(String storeName, String ownerName, String appName, final ApiCallback<List<StoreReleasesGetLatest200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = storeReleasesGetLatestValidateBeforeCall(storeName, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<StoreReleasesGetLatest200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storeReleasesGetPublishError
     * @param storeName The name of the store (required)
     * @param releaseId The id of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storeReleasesGetPublishErrorCall(String storeName, BigDecimal releaseId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_error_details"
            .replace("{" + "store_name" + "}", localVarApiClient.escapeString(storeName.toString()))
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storeReleasesGetPublishErrorValidateBeforeCall(String storeName, BigDecimal releaseId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeName' is set
        if (storeName == null) {
            throw new ApiException("Missing the required parameter 'storeName' when calling storeReleasesGetPublishError(Async)");
        }

        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling storeReleasesGetPublishError(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling storeReleasesGetPublishError(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling storeReleasesGetPublishError(Async)");
        }

        return storeReleasesGetPublishErrorCall(storeName, releaseId, ownerName, appName, _callback);

    }

    /**
     * 
     * Return the Error Details of release which failed in publishing.
     * @param storeName The name of the store (required)
     * @param releaseId The id of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return StoreReleasesGetPublishError200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public StoreReleasesGetPublishError200Response storeReleasesGetPublishError(String storeName, BigDecimal releaseId, String ownerName, String appName) throws ApiException {
        ApiResponse<StoreReleasesGetPublishError200Response> localVarResp = storeReleasesGetPublishErrorWithHttpInfo(storeName, releaseId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Return the Error Details of release which failed in publishing.
     * @param storeName The name of the store (required)
     * @param releaseId The id of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;StoreReleasesGetPublishError200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoreReleasesGetPublishError200Response> storeReleasesGetPublishErrorWithHttpInfo(String storeName, BigDecimal releaseId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = storeReleasesGetPublishErrorValidateBeforeCall(storeName, releaseId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<StoreReleasesGetPublishError200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return the Error Details of release which failed in publishing.
     * @param storeName The name of the store (required)
     * @param releaseId The id of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storeReleasesGetPublishErrorAsync(String storeName, BigDecimal releaseId, String ownerName, String appName, final ApiCallback<StoreReleasesGetPublishError200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = storeReleasesGetPublishErrorValidateBeforeCall(storeName, releaseId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<StoreReleasesGetPublishError200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storeReleasesGetRealTimeStatusByReleaseId
     * @param storeName The name of the store (required)
     * @param releaseId The id of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storeReleasesGetRealTimeStatusByReleaseIdCall(String storeName, BigDecimal releaseId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/realtimestatus"
            .replace("{" + "store_name" + "}", localVarApiClient.escapeString(storeName.toString()))
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storeReleasesGetRealTimeStatusByReleaseIdValidateBeforeCall(String storeName, BigDecimal releaseId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeName' is set
        if (storeName == null) {
            throw new ApiException("Missing the required parameter 'storeName' when calling storeReleasesGetRealTimeStatusByReleaseId(Async)");
        }

        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling storeReleasesGetRealTimeStatusByReleaseId(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling storeReleasesGetRealTimeStatusByReleaseId(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling storeReleasesGetRealTimeStatusByReleaseId(Async)");
        }

        return storeReleasesGetRealTimeStatusByReleaseIdCall(storeName, releaseId, ownerName, appName, _callback);

    }

    /**
     * 
     * Return the Real time Status publishing of release from store.
     * @param storeName The name of the store (required)
     * @param releaseId The id of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return StoreReleasesGetRealTimeStatusByReleaseId200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public StoreReleasesGetRealTimeStatusByReleaseId200Response storeReleasesGetRealTimeStatusByReleaseId(String storeName, BigDecimal releaseId, String ownerName, String appName) throws ApiException {
        ApiResponse<StoreReleasesGetRealTimeStatusByReleaseId200Response> localVarResp = storeReleasesGetRealTimeStatusByReleaseIdWithHttpInfo(storeName, releaseId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Return the Real time Status publishing of release from store.
     * @param storeName The name of the store (required)
     * @param releaseId The id of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;StoreReleasesGetRealTimeStatusByReleaseId200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoreReleasesGetRealTimeStatusByReleaseId200Response> storeReleasesGetRealTimeStatusByReleaseIdWithHttpInfo(String storeName, BigDecimal releaseId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = storeReleasesGetRealTimeStatusByReleaseIdValidateBeforeCall(storeName, releaseId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<StoreReleasesGetRealTimeStatusByReleaseId200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return the Real time Status publishing of release from store.
     * @param storeName The name of the store (required)
     * @param releaseId The id of the release (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storeReleasesGetRealTimeStatusByReleaseIdAsync(String storeName, BigDecimal releaseId, String ownerName, String appName, final ApiCallback<StoreReleasesGetRealTimeStatusByReleaseId200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = storeReleasesGetRealTimeStatusByReleaseIdValidateBeforeCall(storeName, releaseId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<StoreReleasesGetRealTimeStatusByReleaseId200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storeReleasesList
     * @param storeName The name of the store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storeReleasesListCall(String storeName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases"
            .replace("{" + "store_name" + "}", localVarApiClient.escapeString(storeName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storeReleasesListValidateBeforeCall(String storeName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeName' is set
        if (storeName == null) {
            throw new ApiException("Missing the required parameter 'storeName' when calling storeReleasesList(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling storeReleasesList(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling storeReleasesList(Async)");
        }

        return storeReleasesListCall(storeName, ownerName, appName, _callback);

    }

    /**
     * 
     * Return all releases published  in a store
     * @param storeName The name of the store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;StoreReleasesList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<StoreReleasesList200ResponseInner> storeReleasesList(String storeName, String ownerName, String appName) throws ApiException {
        ApiResponse<List<StoreReleasesList200ResponseInner>> localVarResp = storeReleasesListWithHttpInfo(storeName, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Return all releases published  in a store
     * @param storeName The name of the store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;StoreReleasesList200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<StoreReleasesList200ResponseInner>> storeReleasesListWithHttpInfo(String storeName, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = storeReleasesListValidateBeforeCall(storeName, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<StoreReleasesList200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return all releases published  in a store
     * @param storeName The name of the store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storeReleasesListAsync(String storeName, String ownerName, String appName, final ApiCallback<List<StoreReleasesList200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = storeReleasesListValidateBeforeCall(storeName, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<StoreReleasesList200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storesCreate
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param storesCreateRequest The store request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storesCreateCall(String ownerName, String appName, StoresCreateRequest storesCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = storesCreateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_stores"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storesCreateValidateBeforeCall(String ownerName, String appName, StoresCreateRequest storesCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling storesCreate(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling storesCreate(Async)");
        }

        // verify the required parameter 'storesCreateRequest' is set
        if (storesCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'storesCreateRequest' when calling storesCreate(Async)");
        }

        return storesCreateCall(ownerName, appName, storesCreateRequest, _callback);

    }

    /**
     * 
     * Create a new external store for the specified application.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param storesCreateRequest The store request (required)
     * @return StoresList200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public StoresList200ResponseInner storesCreate(String ownerName, String appName, StoresCreateRequest storesCreateRequest) throws ApiException {
        ApiResponse<StoresList200ResponseInner> localVarResp = storesCreateWithHttpInfo(ownerName, appName, storesCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new external store for the specified application.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param storesCreateRequest The store request (required)
     * @return ApiResponse&lt;StoresList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoresList200ResponseInner> storesCreateWithHttpInfo(String ownerName, String appName, StoresCreateRequest storesCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = storesCreateValidateBeforeCall(ownerName, appName, storesCreateRequest, null);
        Type localVarReturnType = new TypeToken<StoresList200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new external store for the specified application.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param storesCreateRequest The store request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storesCreateAsync(String ownerName, String appName, StoresCreateRequest storesCreateRequest, final ApiCallback<StoresList200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = storesCreateValidateBeforeCall(ownerName, appName, storesCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<StoresList200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storesDelete
     * @param storeName The name of the store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storesDeleteCall(String storeName, String ownerName, String appName, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}"
            .replace("{" + "store_name" + "}", localVarApiClient.escapeString(storeName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storesDeleteValidateBeforeCall(String storeName, String ownerName, String appName, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeName' is set
        if (storeName == null) {
            throw new ApiException("Missing the required parameter 'storeName' when calling storesDelete(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling storesDelete(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling storesDelete(Async)");
        }

        return storesDeleteCall(storeName, ownerName, appName, body, _callback);

    }

    /**
     * 
     * delete the store based on specific store name.
     * @param storeName The name of the store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void storesDelete(String storeName, String ownerName, String appName, String body) throws ApiException {
        storesDeleteWithHttpInfo(storeName, ownerName, appName, body);
    }

    /**
     * 
     * delete the store based on specific store name.
     * @param storeName The name of the store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> storesDeleteWithHttpInfo(String storeName, String ownerName, String appName, String body) throws ApiException {
        okhttp3.Call localVarCall = storesDeleteValidateBeforeCall(storeName, ownerName, appName, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * delete the store based on specific store name.
     * @param storeName The name of the store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storesDeleteAsync(String storeName, String ownerName, String appName, String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = storesDeleteValidateBeforeCall(storeName, ownerName, appName, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for storesGet
     * @param storeName The name of the store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storesGetCall(String storeName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}"
            .replace("{" + "store_name" + "}", localVarApiClient.escapeString(storeName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storesGetValidateBeforeCall(String storeName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeName' is set
        if (storeName == null) {
            throw new ApiException("Missing the required parameter 'storeName' when calling storesGet(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling storesGet(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling storesGet(Async)");
        }

        return storesGetCall(storeName, ownerName, appName, _callback);

    }

    /**
     * 
     * Return the store details for specified store name.
     * @param storeName The name of the store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return StoresList200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public StoresList200ResponseInner storesGet(String storeName, String ownerName, String appName) throws ApiException {
        ApiResponse<StoresList200ResponseInner> localVarResp = storesGetWithHttpInfo(storeName, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Return the store details for specified store name.
     * @param storeName The name of the store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;StoresList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoresList200ResponseInner> storesGetWithHttpInfo(String storeName, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = storesGetValidateBeforeCall(storeName, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<StoresList200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return the store details for specified store name.
     * @param storeName The name of the store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storesGetAsync(String storeName, String ownerName, String appName, final ApiCallback<StoresList200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = storesGetValidateBeforeCall(storeName, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<StoresList200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storesList
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storesListCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_stores"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storesListValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling storesList(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling storesList(Async)");
        }

        return storesListCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Get all the store details from Storage store table for a particular application.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;StoresList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<StoresList200ResponseInner> storesList(String ownerName, String appName) throws ApiException {
        ApiResponse<List<StoresList200ResponseInner>> localVarResp = storesListWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all the store details from Storage store table for a particular application.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;StoresList200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<StoresList200ResponseInner>> storesListWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = storesListValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<StoresList200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all the store details from Storage store table for a particular application.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storesListAsync(String ownerName, String appName, final ApiCallback<List<StoresList200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = storesListValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<StoresList200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storesPatch
     * @param storeName The name of the store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param storesPatchRequest Store update request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storesPatchCall(String storeName, String ownerName, String appName, StoresPatchRequest storesPatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = storesPatchRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}"
            .replace("{" + "store_name" + "}", localVarApiClient.escapeString(storeName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storesPatchValidateBeforeCall(String storeName, String ownerName, String appName, StoresPatchRequest storesPatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storeName' is set
        if (storeName == null) {
            throw new ApiException("Missing the required parameter 'storeName' when calling storesPatch(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling storesPatch(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling storesPatch(Async)");
        }

        // verify the required parameter 'storesPatchRequest' is set
        if (storesPatchRequest == null) {
            throw new ApiException("Missing the required parameter 'storesPatchRequest' when calling storesPatch(Async)");
        }

        return storesPatchCall(storeName, ownerName, appName, storesPatchRequest, _callback);

    }

    /**
     * 
     * Update the store.
     * @param storeName The name of the store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param storesPatchRequest Store update request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void storesPatch(String storeName, String ownerName, String appName, StoresPatchRequest storesPatchRequest) throws ApiException {
        storesPatchWithHttpInfo(storeName, ownerName, appName, storesPatchRequest);
    }

    /**
     * 
     * Update the store.
     * @param storeName The name of the store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param storesPatchRequest Store update request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> storesPatchWithHttpInfo(String storeName, String ownerName, String appName, StoresPatchRequest storesPatchRequest) throws ApiException {
        okhttp3.Call localVarCall = storesPatchValidateBeforeCall(storeName, ownerName, appName, storesPatchRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update the store.
     * @param storeName The name of the store (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param storesPatchRequest Store update request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storesPatchAsync(String storeName, String ownerName, String appName, StoresPatchRequest storesPatchRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = storesPatchValidateBeforeCall(storeName, ownerName, appName, storesPatchRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
