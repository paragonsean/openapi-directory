/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BugTrackerGetRepoIssueFromCrash200Response;
import org.openapitools.client.model.BugtrackerGetSettings200Response;
import org.openapitools.client.model.BugtrackerGetSettingsDefaultResponse;
import org.openapitools.client.model.NotificationsGetAppEmailSettings200Response;
import org.openapitools.client.model.NotificationsGetUserEmailSettings200Response;
import org.openapitools.client.model.WebhooksList200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AlertingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AlertingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AlertingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for bugTrackerGetRepoIssueFromCrash
     * @param crashGroupId CrashGroup Id (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bugTrackerGetRepoIssueFromCrashCall(String crashGroupId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/bugtracker/crashGroup/{crash_group_id}"
            .replace("{" + "crash_group_id" + "}", localVarApiClient.escapeString(crashGroupId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bugTrackerGetRepoIssueFromCrashValidateBeforeCall(String crashGroupId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'crashGroupId' is set
        if (crashGroupId == null) {
            throw new ApiException("Missing the required parameter 'crashGroupId' when calling bugTrackerGetRepoIssueFromCrash(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling bugTrackerGetRepoIssueFromCrash(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling bugTrackerGetRepoIssueFromCrash(Async)");
        }

        return bugTrackerGetRepoIssueFromCrashCall(crashGroupId, ownerName, appName, _callback);

    }

    /**
     * 
     * Get project issue related to a crash group
     * @param crashGroupId CrashGroup Id (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return BugTrackerGetRepoIssueFromCrash200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public BugTrackerGetRepoIssueFromCrash200Response bugTrackerGetRepoIssueFromCrash(String crashGroupId, String ownerName, String appName) throws ApiException {
        ApiResponse<BugTrackerGetRepoIssueFromCrash200Response> localVarResp = bugTrackerGetRepoIssueFromCrashWithHttpInfo(crashGroupId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get project issue related to a crash group
     * @param crashGroupId CrashGroup Id (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;BugTrackerGetRepoIssueFromCrash200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BugTrackerGetRepoIssueFromCrash200Response> bugTrackerGetRepoIssueFromCrashWithHttpInfo(String crashGroupId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = bugTrackerGetRepoIssueFromCrashValidateBeforeCall(crashGroupId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<BugTrackerGetRepoIssueFromCrash200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get project issue related to a crash group
     * @param crashGroupId CrashGroup Id (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bugTrackerGetRepoIssueFromCrashAsync(String crashGroupId, String ownerName, String appName, final ApiCallback<BugTrackerGetRepoIssueFromCrash200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = bugTrackerGetRepoIssueFromCrashValidateBeforeCall(crashGroupId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<BugTrackerGetRepoIssueFromCrash200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bugtrackerGetSettings
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bugtrackerGetSettingsCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/bugtracker"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bugtrackerGetSettingsValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling bugtrackerGetSettings(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling bugtrackerGetSettings(Async)");
        }

        return bugtrackerGetSettingsCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Get bug tracker settings for a particular app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return BugtrackerGetSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public BugtrackerGetSettings200Response bugtrackerGetSettings(String ownerName, String appName) throws ApiException {
        ApiResponse<BugtrackerGetSettings200Response> localVarResp = bugtrackerGetSettingsWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get bug tracker settings for a particular app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;BugtrackerGetSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BugtrackerGetSettings200Response> bugtrackerGetSettingsWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = bugtrackerGetSettingsValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<BugtrackerGetSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get bug tracker settings for a particular app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bugtrackerGetSettingsAsync(String ownerName, String appName, final ApiCallback<BugtrackerGetSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = bugtrackerGetSettingsValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<BugtrackerGetSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsGetAppEmailSettings
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsGetAppEmailSettingsCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/notifications/emailSettings"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsGetAppEmailSettingsValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling notificationsGetAppEmailSettings(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling notificationsGetAppEmailSettings(Async)");
        }

        return notificationsGetAppEmailSettingsCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Get Email notification settings of user for a particular app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return NotificationsGetAppEmailSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public NotificationsGetAppEmailSettings200Response notificationsGetAppEmailSettings(String ownerName, String appName) throws ApiException {
        ApiResponse<NotificationsGetAppEmailSettings200Response> localVarResp = notificationsGetAppEmailSettingsWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get Email notification settings of user for a particular app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;NotificationsGetAppEmailSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationsGetAppEmailSettings200Response> notificationsGetAppEmailSettingsWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = notificationsGetAppEmailSettingsValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<NotificationsGetAppEmailSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Email notification settings of user for a particular app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsGetAppEmailSettingsAsync(String ownerName, String appName, final ApiCallback<NotificationsGetAppEmailSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsGetAppEmailSettingsValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<NotificationsGetAppEmailSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsGetUserEmailSettings
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsGetUserEmailSettingsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/user/notifications/emailSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsGetUserEmailSettingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return notificationsGetUserEmailSettingsCall(_callback);

    }

    /**
     * 
     * Get Default email notification settings for the user
     * @return NotificationsGetUserEmailSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public NotificationsGetUserEmailSettings200Response notificationsGetUserEmailSettings() throws ApiException {
        ApiResponse<NotificationsGetUserEmailSettings200Response> localVarResp = notificationsGetUserEmailSettingsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get Default email notification settings for the user
     * @return ApiResponse&lt;NotificationsGetUserEmailSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationsGetUserEmailSettings200Response> notificationsGetUserEmailSettingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = notificationsGetUserEmailSettingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<NotificationsGetUserEmailSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Default email notification settings for the user
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsGetUserEmailSettingsAsync(final ApiCallback<NotificationsGetUserEmailSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsGetUserEmailSettingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<NotificationsGetUserEmailSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhooksList
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksListCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/webhooks"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhooksListValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling webhooksList(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling webhooksList(Async)");
        }

        return webhooksListCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Get web hooks configured for a particular app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return WebhooksList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public WebhooksList200Response webhooksList(String ownerName, String appName) throws ApiException {
        ApiResponse<WebhooksList200Response> localVarResp = webhooksListWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get web hooks configured for a particular app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;WebhooksList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebhooksList200Response> webhooksListWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = webhooksListValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<WebhooksList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get web hooks configured for a particular app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksListAsync(String ownerName, String appName, final ApiCallback<WebhooksList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhooksListValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<WebhooksList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
