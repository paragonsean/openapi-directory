/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The information for a single distribution group member and their ios device
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MemberDevicesInfoResponse {
  public static final String SERIALIZED_NAME_AVATAR_URL = "avatar_url";
  @SerializedName(SERIALIZED_NAME_AVATAR_URL)
  private String avatarUrl;

  public static final String SERIALIZED_NAME_CAN_CHANGE_PASSWORD = "can_change_password";
  @SerializedName(SERIALIZED_NAME_CAN_CHANGE_PASSWORD)
  private Boolean canChangePassword;

  public static final String SERIALIZED_NAME_DEVICE_NAME = "device_name";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME)
  private String deviceName;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FULL_DEVICE_NAME = "full_device_name";
  @SerializedName(SERIALIZED_NAME_FULL_DEVICE_NAME)
  private String fullDeviceName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_IMEI = "imei";
  @SerializedName(SERIALIZED_NAME_IMEI)
  private String imei;

  public static final String SERIALIZED_NAME_INVITE_PENDING = "invite_pending";
  @SerializedName(SERIALIZED_NAME_INVITE_PENDING)
  private Boolean invitePending;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OS_BUILD = "os_build";
  @SerializedName(SERIALIZED_NAME_OS_BUILD)
  private String osBuild;

  public static final String SERIALIZED_NAME_OS_VERSION = "os_version";
  @SerializedName(SERIALIZED_NAME_OS_VERSION)
  private String osVersion;

  public static final String SERIALIZED_NAME_OWNER_ID = "owner_id";
  @SerializedName(SERIALIZED_NAME_OWNER_ID)
  private String ownerId;

  public static final String SERIALIZED_NAME_REGISTERED_AT = "registered_at";
  @SerializedName(SERIALIZED_NAME_REGISTERED_AT)
  private String registeredAt;

  public static final String SERIALIZED_NAME_SERIAL = "serial";
  @SerializedName(SERIALIZED_NAME_SERIAL)
  private String serial;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_UDID = "udid";
  @SerializedName(SERIALIZED_NAME_UDID)
  private String udid;

  public MemberDevicesInfoResponse() {
  }

  public MemberDevicesInfoResponse avatarUrl(String avatarUrl) {
    this.avatarUrl = avatarUrl;
    return this;
  }

  /**
   * The avatar URL of the user
   * @return avatarUrl
   */
  @javax.annotation.Nullable
  public String getAvatarUrl() {
    return avatarUrl;
  }

  public void setAvatarUrl(String avatarUrl) {
    this.avatarUrl = avatarUrl;
  }


  public MemberDevicesInfoResponse canChangePassword(Boolean canChangePassword) {
    this.canChangePassword = canChangePassword;
    return this;
  }

  /**
   * User is required to send an old password in order to change the password.
   * @return canChangePassword
   */
  @javax.annotation.Nullable
  public Boolean getCanChangePassword() {
    return canChangePassword;
  }

  public void setCanChangePassword(Boolean canChangePassword) {
    this.canChangePassword = canChangePassword;
  }


  public MemberDevicesInfoResponse deviceName(String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  /**
   * The device description, in the format \&quot;iPhone 7 Plus (A1784)\&quot;
   * @return deviceName
   */
  @javax.annotation.Nonnull
  public String getDeviceName() {
    return deviceName;
  }

  public void setDeviceName(String deviceName) {
    this.deviceName = deviceName;
  }


  public MemberDevicesInfoResponse displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The full name of the user. Might for example be first and last name
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public MemberDevicesInfoResponse email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email address of the user
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public MemberDevicesInfoResponse fullDeviceName(String fullDeviceName) {
    this.fullDeviceName = fullDeviceName;
    return this;
  }

  /**
   * A combination of the device model name and the owner name.
   * @return fullDeviceName
   */
  @javax.annotation.Nullable
  public String getFullDeviceName() {
    return fullDeviceName;
  }

  public void setFullDeviceName(String fullDeviceName) {
    this.fullDeviceName = fullDeviceName;
  }


  public MemberDevicesInfoResponse id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * The unique id (UUID) of the user
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public MemberDevicesInfoResponse imei(String imei) {
    this.imei = imei;
    return this;
  }

  /**
   * The device&#39;s International Mobile Equipment Identity number. Always empty or undefined at present.
   * @return imei
   */
  @javax.annotation.Nullable
  public String getImei() {
    return imei;
  }

  public void setImei(String imei) {
    this.imei = imei;
  }


  public MemberDevicesInfoResponse invitePending(Boolean invitePending) {
    this.invitePending = invitePending;
    return this;
  }

  /**
   * Whether the has accepted the invite. Available when an invite is pending, and the value will be \&quot;true\&quot;.
   * @return invitePending
   */
  @javax.annotation.Nullable
  public Boolean getInvitePending() {
    return invitePending;
  }

  public void setInvitePending(Boolean invitePending) {
    this.invitePending = invitePending;
  }


  public MemberDevicesInfoResponse model(String model) {
    this.model = model;
    return this;
  }

  /**
   * The model identifier of the device, in the format iDeviceM,N
   * @return model
   */
  @javax.annotation.Nonnull
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public MemberDevicesInfoResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The unique name that is used to identify the user.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MemberDevicesInfoResponse osBuild(String osBuild) {
    this.osBuild = osBuild;
    return this;
  }

  /**
   * The last known OS version running on the device
   * @return osBuild
   */
  @javax.annotation.Nonnull
  public String getOsBuild() {
    return osBuild;
  }

  public void setOsBuild(String osBuild) {
    this.osBuild = osBuild;
  }


  public MemberDevicesInfoResponse osVersion(String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  /**
   * The last known OS version running on the device
   * @return osVersion
   */
  @javax.annotation.Nonnull
  public String getOsVersion() {
    return osVersion;
  }

  public void setOsVersion(String osVersion) {
    this.osVersion = osVersion;
  }


  public MemberDevicesInfoResponse ownerId(String ownerId) {
    this.ownerId = ownerId;
    return this;
  }

  /**
   * The user ID of the device owner.
   * @return ownerId
   */
  @javax.annotation.Nullable
  public String getOwnerId() {
    return ownerId;
  }

  public void setOwnerId(String ownerId) {
    this.ownerId = ownerId;
  }


  public MemberDevicesInfoResponse registeredAt(String registeredAt) {
    this.registeredAt = registeredAt;
    return this;
  }

  /**
   * Timestamp of when the device was registered in ISO format.
   * @return registeredAt
   */
  @javax.annotation.Nullable
  public String getRegisteredAt() {
    return registeredAt;
  }

  public void setRegisteredAt(String registeredAt) {
    this.registeredAt = registeredAt;
  }


  public MemberDevicesInfoResponse serial(String serial) {
    this.serial = serial;
    return this;
  }

  /**
   * The device&#39;s serial number. Always empty or undefined at present.
   * @return serial
   */
  @javax.annotation.Nullable
  public String getSerial() {
    return serial;
  }

  public void setSerial(String serial) {
    this.serial = serial;
  }


  public MemberDevicesInfoResponse status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The provisioning status of the device.
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public MemberDevicesInfoResponse udid(String udid) {
    this.udid = udid;
    return this;
  }

  /**
   * The Unique Device IDentifier of the device
   * @return udid
   */
  @javax.annotation.Nonnull
  public String getUdid() {
    return udid;
  }

  public void setUdid(String udid) {
    this.udid = udid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MemberDevicesInfoResponse memberDevicesInfoResponse = (MemberDevicesInfoResponse) o;
    return Objects.equals(this.avatarUrl, memberDevicesInfoResponse.avatarUrl) &&
        Objects.equals(this.canChangePassword, memberDevicesInfoResponse.canChangePassword) &&
        Objects.equals(this.deviceName, memberDevicesInfoResponse.deviceName) &&
        Objects.equals(this.displayName, memberDevicesInfoResponse.displayName) &&
        Objects.equals(this.email, memberDevicesInfoResponse.email) &&
        Objects.equals(this.fullDeviceName, memberDevicesInfoResponse.fullDeviceName) &&
        Objects.equals(this.id, memberDevicesInfoResponse.id) &&
        Objects.equals(this.imei, memberDevicesInfoResponse.imei) &&
        Objects.equals(this.invitePending, memberDevicesInfoResponse.invitePending) &&
        Objects.equals(this.model, memberDevicesInfoResponse.model) &&
        Objects.equals(this.name, memberDevicesInfoResponse.name) &&
        Objects.equals(this.osBuild, memberDevicesInfoResponse.osBuild) &&
        Objects.equals(this.osVersion, memberDevicesInfoResponse.osVersion) &&
        Objects.equals(this.ownerId, memberDevicesInfoResponse.ownerId) &&
        Objects.equals(this.registeredAt, memberDevicesInfoResponse.registeredAt) &&
        Objects.equals(this.serial, memberDevicesInfoResponse.serial) &&
        Objects.equals(this.status, memberDevicesInfoResponse.status) &&
        Objects.equals(this.udid, memberDevicesInfoResponse.udid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avatarUrl, canChangePassword, deviceName, displayName, email, fullDeviceName, id, imei, invitePending, model, name, osBuild, osVersion, ownerId, registeredAt, serial, status, udid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MemberDevicesInfoResponse {\n");
    sb.append("    avatarUrl: ").append(toIndentedString(avatarUrl)).append("\n");
    sb.append("    canChangePassword: ").append(toIndentedString(canChangePassword)).append("\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    fullDeviceName: ").append(toIndentedString(fullDeviceName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imei: ").append(toIndentedString(imei)).append("\n");
    sb.append("    invitePending: ").append(toIndentedString(invitePending)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    osBuild: ").append(toIndentedString(osBuild)).append("\n");
    sb.append("    osVersion: ").append(toIndentedString(osVersion)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    registeredAt: ").append(toIndentedString(registeredAt)).append("\n");
    sb.append("    serial: ").append(toIndentedString(serial)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    udid: ").append(toIndentedString(udid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avatar_url");
    openapiFields.add("can_change_password");
    openapiFields.add("device_name");
    openapiFields.add("display_name");
    openapiFields.add("email");
    openapiFields.add("full_device_name");
    openapiFields.add("id");
    openapiFields.add("imei");
    openapiFields.add("invite_pending");
    openapiFields.add("model");
    openapiFields.add("name");
    openapiFields.add("os_build");
    openapiFields.add("os_version");
    openapiFields.add("owner_id");
    openapiFields.add("registered_at");
    openapiFields.add("serial");
    openapiFields.add("status");
    openapiFields.add("udid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("device_name");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("model");
    openapiRequiredFields.add("os_build");
    openapiRequiredFields.add("os_version");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("udid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MemberDevicesInfoResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MemberDevicesInfoResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MemberDevicesInfoResponse is not found in the empty JSON string", MemberDevicesInfoResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MemberDevicesInfoResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MemberDevicesInfoResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MemberDevicesInfoResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("avatar_url") != null && !jsonObj.get("avatar_url").isJsonNull()) && !jsonObj.get("avatar_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar_url").toString()));
      }
      if (!jsonObj.get("device_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_name").toString()));
      }
      if ((jsonObj.get("display_name") != null && !jsonObj.get("display_name").isJsonNull()) && !jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("full_device_name") != null && !jsonObj.get("full_device_name").isJsonNull()) && !jsonObj.get("full_device_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_device_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_device_name").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("imei") != null && !jsonObj.get("imei").isJsonNull()) && !jsonObj.get("imei").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imei` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imei").toString()));
      }
      if (!jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("os_build").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `os_build` to be a primitive type in the JSON string but got `%s`", jsonObj.get("os_build").toString()));
      }
      if (!jsonObj.get("os_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `os_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("os_version").toString()));
      }
      if ((jsonObj.get("owner_id") != null && !jsonObj.get("owner_id").isJsonNull()) && !jsonObj.get("owner_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner_id").toString()));
      }
      if ((jsonObj.get("registered_at") != null && !jsonObj.get("registered_at").isJsonNull()) && !jsonObj.get("registered_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registered_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registered_at").toString()));
      }
      if ((jsonObj.get("serial") != null && !jsonObj.get("serial").isJsonNull()) && !jsonObj.get("serial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serial").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("udid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `udid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("udid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MemberDevicesInfoResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MemberDevicesInfoResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MemberDevicesInfoResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MemberDevicesInfoResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<MemberDevicesInfoResponse>() {
           @Override
           public void write(JsonWriter out, MemberDevicesInfoResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MemberDevicesInfoResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MemberDevicesInfoResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MemberDevicesInfoResponse
   * @throws IOException if the JSON string is invalid with respect to MemberDevicesInfoResponse
   */
  public static MemberDevicesInfoResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MemberDevicesInfoResponse.class);
  }

  /**
   * Convert an instance of MemberDevicesInfoResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

