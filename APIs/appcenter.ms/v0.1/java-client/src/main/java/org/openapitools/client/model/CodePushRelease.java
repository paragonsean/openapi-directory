/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CodePushDeploymentsList200ResponseInnerLatestReleaseAllOfDiffPackageMapValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CodePushRelease
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CodePushRelease {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IS_DISABLED = "is_disabled";
  @SerializedName(SERIALIZED_NAME_IS_DISABLED)
  private Boolean isDisabled;

  public static final String SERIALIZED_NAME_IS_MANDATORY = "is_mandatory";
  @SerializedName(SERIALIZED_NAME_IS_MANDATORY)
  private Boolean isMandatory;

  public static final String SERIALIZED_NAME_ROLLOUT = "rollout";
  @SerializedName(SERIALIZED_NAME_ROLLOUT)
  private Integer rollout;

  public static final String SERIALIZED_NAME_TARGET_BINARY_RANGE = "target_binary_range";
  @SerializedName(SERIALIZED_NAME_TARGET_BINARY_RANGE)
  private String targetBinaryRange;

  public static final String SERIALIZED_NAME_BLOB_URL = "blob_url";
  @SerializedName(SERIALIZED_NAME_BLOB_URL)
  private String blobUrl;

  public static final String SERIALIZED_NAME_DIFF_PACKAGE_MAP = "diff_package_map";
  @SerializedName(SERIALIZED_NAME_DIFF_PACKAGE_MAP)
  private Map<String, CodePushDeploymentsList200ResponseInnerLatestReleaseAllOfDiffPackageMapValue> diffPackageMap = new HashMap<>();

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_ORIGINAL_DEPLOYMENT = "original_deployment";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_DEPLOYMENT)
  private String originalDeployment;

  public static final String SERIALIZED_NAME_ORIGINAL_LABEL = "original_label";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_LABEL)
  private String originalLabel;

  public static final String SERIALIZED_NAME_PACKAGE_HASH = "package_hash";
  @SerializedName(SERIALIZED_NAME_PACKAGE_HASH)
  private String packageHash;

  /**
   * The release method is unknown if unspecified
   */
  @JsonAdapter(ReleaseMethodEnum.Adapter.class)
  public enum ReleaseMethodEnum {
    UPLOAD("Upload"),
    
    PROMOTE("Promote"),
    
    ROLLBACK("Rollback");

    private String value;

    ReleaseMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReleaseMethodEnum fromValue(String value) {
      for (ReleaseMethodEnum b : ReleaseMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReleaseMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReleaseMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReleaseMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReleaseMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReleaseMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RELEASE_METHOD = "release_method";
  @SerializedName(SERIALIZED_NAME_RELEASE_METHOD)
  private ReleaseMethodEnum releaseMethod;

  public static final String SERIALIZED_NAME_RELEASED_BY = "released_by";
  @SerializedName(SERIALIZED_NAME_RELEASED_BY)
  private String releasedBy;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private BigDecimal size;

  public static final String SERIALIZED_NAME_UPLOAD_TIME = "upload_time";
  @SerializedName(SERIALIZED_NAME_UPLOAD_TIME)
  private Integer uploadTime;

  public CodePushRelease() {
  }

  public CodePushRelease description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CodePushRelease isDisabled(Boolean isDisabled) {
    this.isDisabled = isDisabled;
    return this;
  }

  /**
   * Get isDisabled
   * @return isDisabled
   */
  @javax.annotation.Nullable
  public Boolean getIsDisabled() {
    return isDisabled;
  }

  public void setIsDisabled(Boolean isDisabled) {
    this.isDisabled = isDisabled;
  }


  public CodePushRelease isMandatory(Boolean isMandatory) {
    this.isMandatory = isMandatory;
    return this;
  }

  /**
   * Get isMandatory
   * @return isMandatory
   */
  @javax.annotation.Nullable
  public Boolean getIsMandatory() {
    return isMandatory;
  }

  public void setIsMandatory(Boolean isMandatory) {
    this.isMandatory = isMandatory;
  }


  public CodePushRelease rollout(Integer rollout) {
    this.rollout = rollout;
    return this;
  }

  /**
   * Get rollout
   * minimum: 1
   * maximum: 100
   * @return rollout
   */
  @javax.annotation.Nullable
  public Integer getRollout() {
    return rollout;
  }

  public void setRollout(Integer rollout) {
    this.rollout = rollout;
  }


  public CodePushRelease targetBinaryRange(String targetBinaryRange) {
    this.targetBinaryRange = targetBinaryRange;
    return this;
  }

  /**
   * Get targetBinaryRange
   * @return targetBinaryRange
   */
  @javax.annotation.Nullable
  public String getTargetBinaryRange() {
    return targetBinaryRange;
  }

  public void setTargetBinaryRange(String targetBinaryRange) {
    this.targetBinaryRange = targetBinaryRange;
  }


  public CodePushRelease blobUrl(String blobUrl) {
    this.blobUrl = blobUrl;
    return this;
  }

  /**
   * Get blobUrl
   * @return blobUrl
   */
  @javax.annotation.Nullable
  public String getBlobUrl() {
    return blobUrl;
  }

  public void setBlobUrl(String blobUrl) {
    this.blobUrl = blobUrl;
  }


  public CodePushRelease diffPackageMap(Map<String, CodePushDeploymentsList200ResponseInnerLatestReleaseAllOfDiffPackageMapValue> diffPackageMap) {
    this.diffPackageMap = diffPackageMap;
    return this;
  }

  public CodePushRelease putDiffPackageMapItem(String key, CodePushDeploymentsList200ResponseInnerLatestReleaseAllOfDiffPackageMapValue diffPackageMapItem) {
    if (this.diffPackageMap == null) {
      this.diffPackageMap = new HashMap<>();
    }
    this.diffPackageMap.put(key, diffPackageMapItem);
    return this;
  }

  /**
   * Get diffPackageMap
   * @return diffPackageMap
   */
  @javax.annotation.Nullable
  public Map<String, CodePushDeploymentsList200ResponseInnerLatestReleaseAllOfDiffPackageMapValue> getDiffPackageMap() {
    return diffPackageMap;
  }

  public void setDiffPackageMap(Map<String, CodePushDeploymentsList200ResponseInnerLatestReleaseAllOfDiffPackageMapValue> diffPackageMap) {
    this.diffPackageMap = diffPackageMap;
  }


  public CodePushRelease label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public CodePushRelease originalDeployment(String originalDeployment) {
    this.originalDeployment = originalDeployment;
    return this;
  }

  /**
   * Set on &#39;Promote&#39;
   * @return originalDeployment
   */
  @javax.annotation.Nullable
  public String getOriginalDeployment() {
    return originalDeployment;
  }

  public void setOriginalDeployment(String originalDeployment) {
    this.originalDeployment = originalDeployment;
  }


  public CodePushRelease originalLabel(String originalLabel) {
    this.originalLabel = originalLabel;
    return this;
  }

  /**
   * Set on &#39;Promote&#39; and &#39;Rollback&#39;
   * @return originalLabel
   */
  @javax.annotation.Nullable
  public String getOriginalLabel() {
    return originalLabel;
  }

  public void setOriginalLabel(String originalLabel) {
    this.originalLabel = originalLabel;
  }


  public CodePushRelease packageHash(String packageHash) {
    this.packageHash = packageHash;
    return this;
  }

  /**
   * Get packageHash
   * @return packageHash
   */
  @javax.annotation.Nullable
  public String getPackageHash() {
    return packageHash;
  }

  public void setPackageHash(String packageHash) {
    this.packageHash = packageHash;
  }


  public CodePushRelease releaseMethod(ReleaseMethodEnum releaseMethod) {
    this.releaseMethod = releaseMethod;
    return this;
  }

  /**
   * The release method is unknown if unspecified
   * @return releaseMethod
   */
  @javax.annotation.Nullable
  public ReleaseMethodEnum getReleaseMethod() {
    return releaseMethod;
  }

  public void setReleaseMethod(ReleaseMethodEnum releaseMethod) {
    this.releaseMethod = releaseMethod;
  }


  public CodePushRelease releasedBy(String releasedBy) {
    this.releasedBy = releasedBy;
    return this;
  }

  /**
   * Get releasedBy
   * @return releasedBy
   */
  @javax.annotation.Nullable
  public String getReleasedBy() {
    return releasedBy;
  }

  public void setReleasedBy(String releasedBy) {
    this.releasedBy = releasedBy;
  }


  public CodePushRelease size(BigDecimal size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable
  public BigDecimal getSize() {
    return size;
  }

  public void setSize(BigDecimal size) {
    this.size = size;
  }


  public CodePushRelease uploadTime(Integer uploadTime) {
    this.uploadTime = uploadTime;
    return this;
  }

  /**
   * Get uploadTime
   * @return uploadTime
   */
  @javax.annotation.Nullable
  public Integer getUploadTime() {
    return uploadTime;
  }

  public void setUploadTime(Integer uploadTime) {
    this.uploadTime = uploadTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodePushRelease codePushRelease = (CodePushRelease) o;
    return Objects.equals(this.description, codePushRelease.description) &&
        Objects.equals(this.isDisabled, codePushRelease.isDisabled) &&
        Objects.equals(this.isMandatory, codePushRelease.isMandatory) &&
        Objects.equals(this.rollout, codePushRelease.rollout) &&
        Objects.equals(this.targetBinaryRange, codePushRelease.targetBinaryRange) &&
        Objects.equals(this.blobUrl, codePushRelease.blobUrl) &&
        Objects.equals(this.diffPackageMap, codePushRelease.diffPackageMap) &&
        Objects.equals(this.label, codePushRelease.label) &&
        Objects.equals(this.originalDeployment, codePushRelease.originalDeployment) &&
        Objects.equals(this.originalLabel, codePushRelease.originalLabel) &&
        Objects.equals(this.packageHash, codePushRelease.packageHash) &&
        Objects.equals(this.releaseMethod, codePushRelease.releaseMethod) &&
        Objects.equals(this.releasedBy, codePushRelease.releasedBy) &&
        Objects.equals(this.size, codePushRelease.size) &&
        Objects.equals(this.uploadTime, codePushRelease.uploadTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, isDisabled, isMandatory, rollout, targetBinaryRange, blobUrl, diffPackageMap, label, originalDeployment, originalLabel, packageHash, releaseMethod, releasedBy, size, uploadTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodePushRelease {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isDisabled: ").append(toIndentedString(isDisabled)).append("\n");
    sb.append("    isMandatory: ").append(toIndentedString(isMandatory)).append("\n");
    sb.append("    rollout: ").append(toIndentedString(rollout)).append("\n");
    sb.append("    targetBinaryRange: ").append(toIndentedString(targetBinaryRange)).append("\n");
    sb.append("    blobUrl: ").append(toIndentedString(blobUrl)).append("\n");
    sb.append("    diffPackageMap: ").append(toIndentedString(diffPackageMap)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    originalDeployment: ").append(toIndentedString(originalDeployment)).append("\n");
    sb.append("    originalLabel: ").append(toIndentedString(originalLabel)).append("\n");
    sb.append("    packageHash: ").append(toIndentedString(packageHash)).append("\n");
    sb.append("    releaseMethod: ").append(toIndentedString(releaseMethod)).append("\n");
    sb.append("    releasedBy: ").append(toIndentedString(releasedBy)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    uploadTime: ").append(toIndentedString(uploadTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("is_disabled");
    openapiFields.add("is_mandatory");
    openapiFields.add("rollout");
    openapiFields.add("target_binary_range");
    openapiFields.add("blob_url");
    openapiFields.add("diff_package_map");
    openapiFields.add("label");
    openapiFields.add("original_deployment");
    openapiFields.add("original_label");
    openapiFields.add("package_hash");
    openapiFields.add("release_method");
    openapiFields.add("released_by");
    openapiFields.add("size");
    openapiFields.add("upload_time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CodePushRelease
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CodePushRelease.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodePushRelease is not found in the empty JSON string", CodePushRelease.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CodePushRelease.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodePushRelease` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("target_binary_range") != null && !jsonObj.get("target_binary_range").isJsonNull()) && !jsonObj.get("target_binary_range").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_binary_range` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_binary_range").toString()));
      }
      if ((jsonObj.get("blob_url") != null && !jsonObj.get("blob_url").isJsonNull()) && !jsonObj.get("blob_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blob_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blob_url").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("original_deployment") != null && !jsonObj.get("original_deployment").isJsonNull()) && !jsonObj.get("original_deployment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_deployment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_deployment").toString()));
      }
      if ((jsonObj.get("original_label") != null && !jsonObj.get("original_label").isJsonNull()) && !jsonObj.get("original_label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_label").toString()));
      }
      if ((jsonObj.get("package_hash") != null && !jsonObj.get("package_hash").isJsonNull()) && !jsonObj.get("package_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `package_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package_hash").toString()));
      }
      if ((jsonObj.get("release_method") != null && !jsonObj.get("release_method").isJsonNull()) && !jsonObj.get("release_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release_method").toString()));
      }
      // validate the optional field `release_method`
      if (jsonObj.get("release_method") != null && !jsonObj.get("release_method").isJsonNull()) {
        ReleaseMethodEnum.validateJsonElement(jsonObj.get("release_method"));
      }
      if ((jsonObj.get("released_by") != null && !jsonObj.get("released_by").isJsonNull()) && !jsonObj.get("released_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `released_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("released_by").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodePushRelease.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodePushRelease' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodePushRelease> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodePushRelease.class));

       return (TypeAdapter<T>) new TypeAdapter<CodePushRelease>() {
           @Override
           public void write(JsonWriter out, CodePushRelease value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodePushRelease read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CodePushRelease given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CodePushRelease
   * @throws IOException if the JSON string is invalid with respect to CodePushRelease
   */
  public static CodePushRelease fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodePushRelease.class);
  }

  /**
   * Convert an instance of CodePushRelease to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

