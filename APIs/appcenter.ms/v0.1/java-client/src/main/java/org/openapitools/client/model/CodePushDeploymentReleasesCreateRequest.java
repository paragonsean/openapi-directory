/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CodePushDeploymentReleasesCreateRequestReleaseUpload;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CodePushDeploymentReleasesCreateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CodePushDeploymentReleasesCreateRequest {
  public static final String SERIALIZED_NAME_DEPLOYMENT_NAME = "deployment_name";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_NAME)
  private String deploymentName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_MANDATORY = "mandatory";
  @SerializedName(SERIALIZED_NAME_MANDATORY)
  private Boolean mandatory;

  public static final String SERIALIZED_NAME_NO_DUPLICATE_RELEASE_ERROR = "no_duplicate_release_error";
  @SerializedName(SERIALIZED_NAME_NO_DUPLICATE_RELEASE_ERROR)
  private Boolean noDuplicateReleaseError;

  public static final String SERIALIZED_NAME_RELEASE_UPLOAD = "release_upload";
  @SerializedName(SERIALIZED_NAME_RELEASE_UPLOAD)
  private CodePushDeploymentReleasesCreateRequestReleaseUpload releaseUpload;

  public static final String SERIALIZED_NAME_ROLLOUT = "rollout";
  @SerializedName(SERIALIZED_NAME_ROLLOUT)
  private Integer rollout;

  public static final String SERIALIZED_NAME_TARGET_BINARY_VERSION = "target_binary_version";
  @SerializedName(SERIALIZED_NAME_TARGET_BINARY_VERSION)
  private String targetBinaryVersion;

  public CodePushDeploymentReleasesCreateRequest() {
  }

  public CodePushDeploymentReleasesCreateRequest deploymentName(String deploymentName) {
    this.deploymentName = deploymentName;
    return this;
  }

  /**
   * This specifies which deployment you want to release the update to. Default is Staging.
   * @return deploymentName
   */
  @javax.annotation.Nullable
  public String getDeploymentName() {
    return deploymentName;
  }

  public void setDeploymentName(String deploymentName) {
    this.deploymentName = deploymentName;
  }


  public CodePushDeploymentReleasesCreateRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * This provides an optional \&quot;change log\&quot; for the deployment.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CodePushDeploymentReleasesCreateRequest disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * This specifies whether an update should be downloadable by end users or not.
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public CodePushDeploymentReleasesCreateRequest mandatory(Boolean mandatory) {
    this.mandatory = mandatory;
    return this;
  }

  /**
   * This specifies whether the update should be considered mandatory or not (e.g. it includes a critical security fix).
   * @return mandatory
   */
  @javax.annotation.Nullable
  public Boolean getMandatory() {
    return mandatory;
  }

  public void setMandatory(Boolean mandatory) {
    this.mandatory = mandatory;
  }


  public CodePushDeploymentReleasesCreateRequest noDuplicateReleaseError(Boolean noDuplicateReleaseError) {
    this.noDuplicateReleaseError = noDuplicateReleaseError;
    return this;
  }

  /**
   * This specifies that if the update is identical to the latest release on the deployment, the CLI should generate a warning instead of an error.
   * @return noDuplicateReleaseError
   */
  @javax.annotation.Nullable
  public Boolean getNoDuplicateReleaseError() {
    return noDuplicateReleaseError;
  }

  public void setNoDuplicateReleaseError(Boolean noDuplicateReleaseError) {
    this.noDuplicateReleaseError = noDuplicateReleaseError;
  }


  public CodePushDeploymentReleasesCreateRequest releaseUpload(CodePushDeploymentReleasesCreateRequestReleaseUpload releaseUpload) {
    this.releaseUpload = releaseUpload;
    return this;
  }

  /**
   * Get releaseUpload
   * @return releaseUpload
   */
  @javax.annotation.Nonnull
  public CodePushDeploymentReleasesCreateRequestReleaseUpload getReleaseUpload() {
    return releaseUpload;
  }

  public void setReleaseUpload(CodePushDeploymentReleasesCreateRequestReleaseUpload releaseUpload) {
    this.releaseUpload = releaseUpload;
  }


  public CodePushDeploymentReleasesCreateRequest rollout(Integer rollout) {
    this.rollout = rollout;
    return this;
  }

  /**
   * This specifies the percentage of users (as an integer between 1 and 100) that should be eligible to receive this update.
   * @return rollout
   */
  @javax.annotation.Nullable
  public Integer getRollout() {
    return rollout;
  }

  public void setRollout(Integer rollout) {
    this.rollout = rollout;
  }


  public CodePushDeploymentReleasesCreateRequest targetBinaryVersion(String targetBinaryVersion) {
    this.targetBinaryVersion = targetBinaryVersion;
    return this;
  }

  /**
   * the binary version of the application
   * @return targetBinaryVersion
   */
  @javax.annotation.Nonnull
  public String getTargetBinaryVersion() {
    return targetBinaryVersion;
  }

  public void setTargetBinaryVersion(String targetBinaryVersion) {
    this.targetBinaryVersion = targetBinaryVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodePushDeploymentReleasesCreateRequest codePushDeploymentReleasesCreateRequest = (CodePushDeploymentReleasesCreateRequest) o;
    return Objects.equals(this.deploymentName, codePushDeploymentReleasesCreateRequest.deploymentName) &&
        Objects.equals(this.description, codePushDeploymentReleasesCreateRequest.description) &&
        Objects.equals(this.disabled, codePushDeploymentReleasesCreateRequest.disabled) &&
        Objects.equals(this.mandatory, codePushDeploymentReleasesCreateRequest.mandatory) &&
        Objects.equals(this.noDuplicateReleaseError, codePushDeploymentReleasesCreateRequest.noDuplicateReleaseError) &&
        Objects.equals(this.releaseUpload, codePushDeploymentReleasesCreateRequest.releaseUpload) &&
        Objects.equals(this.rollout, codePushDeploymentReleasesCreateRequest.rollout) &&
        Objects.equals(this.targetBinaryVersion, codePushDeploymentReleasesCreateRequest.targetBinaryVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deploymentName, description, disabled, mandatory, noDuplicateReleaseError, releaseUpload, rollout, targetBinaryVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodePushDeploymentReleasesCreateRequest {\n");
    sb.append("    deploymentName: ").append(toIndentedString(deploymentName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    mandatory: ").append(toIndentedString(mandatory)).append("\n");
    sb.append("    noDuplicateReleaseError: ").append(toIndentedString(noDuplicateReleaseError)).append("\n");
    sb.append("    releaseUpload: ").append(toIndentedString(releaseUpload)).append("\n");
    sb.append("    rollout: ").append(toIndentedString(rollout)).append("\n");
    sb.append("    targetBinaryVersion: ").append(toIndentedString(targetBinaryVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deployment_name");
    openapiFields.add("description");
    openapiFields.add("disabled");
    openapiFields.add("mandatory");
    openapiFields.add("no_duplicate_release_error");
    openapiFields.add("release_upload");
    openapiFields.add("rollout");
    openapiFields.add("target_binary_version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("release_upload");
    openapiRequiredFields.add("target_binary_version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CodePushDeploymentReleasesCreateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CodePushDeploymentReleasesCreateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodePushDeploymentReleasesCreateRequest is not found in the empty JSON string", CodePushDeploymentReleasesCreateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CodePushDeploymentReleasesCreateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodePushDeploymentReleasesCreateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CodePushDeploymentReleasesCreateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("deployment_name") != null && !jsonObj.get("deployment_name").isJsonNull()) && !jsonObj.get("deployment_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deployment_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deployment_name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `release_upload`
      CodePushDeploymentReleasesCreateRequestReleaseUpload.validateJsonElement(jsonObj.get("release_upload"));
      if (!jsonObj.get("target_binary_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_binary_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_binary_version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodePushDeploymentReleasesCreateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodePushDeploymentReleasesCreateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodePushDeploymentReleasesCreateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodePushDeploymentReleasesCreateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CodePushDeploymentReleasesCreateRequest>() {
           @Override
           public void write(JsonWriter out, CodePushDeploymentReleasesCreateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodePushDeploymentReleasesCreateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CodePushDeploymentReleasesCreateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CodePushDeploymentReleasesCreateRequest
   * @throws IOException if the JSON string is invalid with respect to CodePushDeploymentReleasesCreateRequest
   */
  public static CodePushDeploymentReleasesCreateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodePushDeploymentReleasesCreateRequest.class);
  }

  /**
   * Convert an instance of CodePushDeploymentReleasesCreateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

