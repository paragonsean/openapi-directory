/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AvailabilityOfDevicesResponseIpads;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The current device availability (registered, available and maxmimum) for iPhones, iPads, iPods and Watches from Apple Developer Portal
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AvailabilityOfDevicesResponse {
  public static final String SERIALIZED_NAME_IPADS = "ipads";
  @SerializedName(SERIALIZED_NAME_IPADS)
  private AvailabilityOfDevicesResponseIpads ipads;

  public static final String SERIALIZED_NAME_IPHONES = "iphones";
  @SerializedName(SERIALIZED_NAME_IPHONES)
  private AvailabilityOfDevicesResponseIpads iphones;

  public static final String SERIALIZED_NAME_IPODS = "ipods";
  @SerializedName(SERIALIZED_NAME_IPODS)
  private AvailabilityOfDevicesResponseIpads ipods;

  public static final String SERIALIZED_NAME_WATCHES = "watches";
  @SerializedName(SERIALIZED_NAME_WATCHES)
  private AvailabilityOfDevicesResponseIpads watches;

  public AvailabilityOfDevicesResponse() {
  }

  public AvailabilityOfDevicesResponse ipads(AvailabilityOfDevicesResponseIpads ipads) {
    this.ipads = ipads;
    return this;
  }

  /**
   * Get ipads
   * @return ipads
   */
  @javax.annotation.Nonnull
  public AvailabilityOfDevicesResponseIpads getIpads() {
    return ipads;
  }

  public void setIpads(AvailabilityOfDevicesResponseIpads ipads) {
    this.ipads = ipads;
  }


  public AvailabilityOfDevicesResponse iphones(AvailabilityOfDevicesResponseIpads iphones) {
    this.iphones = iphones;
    return this;
  }

  /**
   * Get iphones
   * @return iphones
   */
  @javax.annotation.Nonnull
  public AvailabilityOfDevicesResponseIpads getIphones() {
    return iphones;
  }

  public void setIphones(AvailabilityOfDevicesResponseIpads iphones) {
    this.iphones = iphones;
  }


  public AvailabilityOfDevicesResponse ipods(AvailabilityOfDevicesResponseIpads ipods) {
    this.ipods = ipods;
    return this;
  }

  /**
   * Get ipods
   * @return ipods
   */
  @javax.annotation.Nonnull
  public AvailabilityOfDevicesResponseIpads getIpods() {
    return ipods;
  }

  public void setIpods(AvailabilityOfDevicesResponseIpads ipods) {
    this.ipods = ipods;
  }


  public AvailabilityOfDevicesResponse watches(AvailabilityOfDevicesResponseIpads watches) {
    this.watches = watches;
    return this;
  }

  /**
   * Get watches
   * @return watches
   */
  @javax.annotation.Nonnull
  public AvailabilityOfDevicesResponseIpads getWatches() {
    return watches;
  }

  public void setWatches(AvailabilityOfDevicesResponseIpads watches) {
    this.watches = watches;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailabilityOfDevicesResponse availabilityOfDevicesResponse = (AvailabilityOfDevicesResponse) o;
    return Objects.equals(this.ipads, availabilityOfDevicesResponse.ipads) &&
        Objects.equals(this.iphones, availabilityOfDevicesResponse.iphones) &&
        Objects.equals(this.ipods, availabilityOfDevicesResponse.ipods) &&
        Objects.equals(this.watches, availabilityOfDevicesResponse.watches);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ipads, iphones, ipods, watches);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailabilityOfDevicesResponse {\n");
    sb.append("    ipads: ").append(toIndentedString(ipads)).append("\n");
    sb.append("    iphones: ").append(toIndentedString(iphones)).append("\n");
    sb.append("    ipods: ").append(toIndentedString(ipods)).append("\n");
    sb.append("    watches: ").append(toIndentedString(watches)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ipads");
    openapiFields.add("iphones");
    openapiFields.add("ipods");
    openapiFields.add("watches");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ipads");
    openapiRequiredFields.add("iphones");
    openapiRequiredFields.add("ipods");
    openapiRequiredFields.add("watches");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AvailabilityOfDevicesResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AvailabilityOfDevicesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AvailabilityOfDevicesResponse is not found in the empty JSON string", AvailabilityOfDevicesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AvailabilityOfDevicesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AvailabilityOfDevicesResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AvailabilityOfDevicesResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ipads`
      AvailabilityOfDevicesResponseIpads.validateJsonElement(jsonObj.get("ipads"));
      // validate the required field `iphones`
      AvailabilityOfDevicesResponseIpads.validateJsonElement(jsonObj.get("iphones"));
      // validate the required field `ipods`
      AvailabilityOfDevicesResponseIpads.validateJsonElement(jsonObj.get("ipods"));
      // validate the required field `watches`
      AvailabilityOfDevicesResponseIpads.validateJsonElement(jsonObj.get("watches"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AvailabilityOfDevicesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AvailabilityOfDevicesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AvailabilityOfDevicesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AvailabilityOfDevicesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AvailabilityOfDevicesResponse>() {
           @Override
           public void write(JsonWriter out, AvailabilityOfDevicesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AvailabilityOfDevicesResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AvailabilityOfDevicesResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AvailabilityOfDevicesResponse
   * @throws IOException if the JSON string is invalid with respect to AvailabilityOfDevicesResponse
   */
  public static AvailabilityOfDevicesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AvailabilityOfDevicesResponse.class);
  }

  /**
   * Convert an instance of AvailabilityOfDevicesResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

