/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BranchConfigurationsGet200ResponseAllOfToolsetsXcodeAppExtensionProvisioningProfileFilesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Build configuration when Xcode is part of the build steps
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class XcodeBranchConfigurationProperties {
  public static final String SERIALIZED_NAME_APP_EXTENSION_PROVISIONING_PROFILE_FILES = "appExtensionProvisioningProfileFiles";
  @SerializedName(SERIALIZED_NAME_APP_EXTENSION_PROVISIONING_PROFILE_FILES)
  private List<BranchConfigurationsGet200ResponseAllOfToolsetsXcodeAppExtensionProvisioningProfileFilesInner> appExtensionProvisioningProfileFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_ARCHIVE_CONFIGURATION = "archiveConfiguration";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_CONFIGURATION)
  private String archiveConfiguration;

  public static final String SERIALIZED_NAME_AUTOMATIC_SIGNING = "automaticSigning";
  @SerializedName(SERIALIZED_NAME_AUTOMATIC_SIGNING)
  private Boolean automaticSigning;

  public static final String SERIALIZED_NAME_CARTFILE_PATH = "cartfilePath";
  @SerializedName(SERIALIZED_NAME_CARTFILE_PATH)
  private String cartfilePath;

  public static final String SERIALIZED_NAME_CERTIFICATE_ENCODED = "certificateEncoded";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_ENCODED)
  private String certificateEncoded;

  public static final String SERIALIZED_NAME_CERTIFICATE_FILE_ID = "certificateFileId";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_FILE_ID)
  private String certificateFileId;

  public static final String SERIALIZED_NAME_CERTIFICATE_FILENAME = "certificateFilename";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_FILENAME)
  private String certificateFilename;

  public static final String SERIALIZED_NAME_CERTIFICATE_PASSWORD = "certificatePassword";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_PASSWORD)
  private String certificatePassword;

  public static final String SERIALIZED_NAME_CERTIFICATE_UPLOAD_ID = "certificateUploadId";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_UPLOAD_ID)
  private String certificateUploadId;

  public static final String SERIALIZED_NAME_FORCE_LEGACY_BUILD_SYSTEM = "forceLegacyBuildSystem";
  @SerializedName(SERIALIZED_NAME_FORCE_LEGACY_BUILD_SYSTEM)
  private Boolean forceLegacyBuildSystem;

  public static final String SERIALIZED_NAME_PODFILE_PATH = "podfilePath";
  @SerializedName(SERIALIZED_NAME_PODFILE_PATH)
  private String podfilePath;

  public static final String SERIALIZED_NAME_PROJECT_OR_WORKSPACE_PATH = "projectOrWorkspacePath";
  @SerializedName(SERIALIZED_NAME_PROJECT_OR_WORKSPACE_PATH)
  private String projectOrWorkspacePath;

  public static final String SERIALIZED_NAME_PROVISIONING_PROFILE_ENCODED = "provisioningProfileEncoded";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_PROFILE_ENCODED)
  private String provisioningProfileEncoded;

  public static final String SERIALIZED_NAME_PROVISIONING_PROFILE_FILE_ID = "provisioningProfileFileId";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_PROFILE_FILE_ID)
  private String provisioningProfileFileId;

  public static final String SERIALIZED_NAME_PROVISIONING_PROFILE_FILENAME = "provisioningProfileFilename";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_PROFILE_FILENAME)
  private String provisioningProfileFilename;

  public static final String SERIALIZED_NAME_PROVISIONING_PROFILE_UPLOAD_ID = "provisioningProfileUploadId";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_PROFILE_UPLOAD_ID)
  private String provisioningProfileUploadId;

  public static final String SERIALIZED_NAME_SCHEME = "scheme";
  @SerializedName(SERIALIZED_NAME_SCHEME)
  private String scheme;

  public static final String SERIALIZED_NAME_TARGET_TO_ARCHIVE = "targetToArchive";
  @SerializedName(SERIALIZED_NAME_TARGET_TO_ARCHIVE)
  private String targetToArchive;

  public static final String SERIALIZED_NAME_TEAM_ID = "teamId";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  private String teamId;

  public static final String SERIALIZED_NAME_XCODE_PROJECT_SHA = "xcodeProjectSha";
  @SerializedName(SERIALIZED_NAME_XCODE_PROJECT_SHA)
  private String xcodeProjectSha;

  public static final String SERIALIZED_NAME_XCODE_VERSION = "xcodeVersion";
  @SerializedName(SERIALIZED_NAME_XCODE_VERSION)
  private String xcodeVersion;

  public XcodeBranchConfigurationProperties() {
  }

  public XcodeBranchConfigurationProperties appExtensionProvisioningProfileFiles(List<BranchConfigurationsGet200ResponseAllOfToolsetsXcodeAppExtensionProvisioningProfileFilesInner> appExtensionProvisioningProfileFiles) {
    this.appExtensionProvisioningProfileFiles = appExtensionProvisioningProfileFiles;
    return this;
  }

  public XcodeBranchConfigurationProperties addAppExtensionProvisioningProfileFilesItem(BranchConfigurationsGet200ResponseAllOfToolsetsXcodeAppExtensionProvisioningProfileFilesInner appExtensionProvisioningProfileFilesItem) {
    if (this.appExtensionProvisioningProfileFiles == null) {
      this.appExtensionProvisioningProfileFiles = new ArrayList<>();
    }
    this.appExtensionProvisioningProfileFiles.add(appExtensionProvisioningProfileFilesItem);
    return this;
  }

  /**
   * Get appExtensionProvisioningProfileFiles
   * @return appExtensionProvisioningProfileFiles
   */
  @javax.annotation.Nullable
  public List<BranchConfigurationsGet200ResponseAllOfToolsetsXcodeAppExtensionProvisioningProfileFilesInner> getAppExtensionProvisioningProfileFiles() {
    return appExtensionProvisioningProfileFiles;
  }

  public void setAppExtensionProvisioningProfileFiles(List<BranchConfigurationsGet200ResponseAllOfToolsetsXcodeAppExtensionProvisioningProfileFilesInner> appExtensionProvisioningProfileFiles) {
    this.appExtensionProvisioningProfileFiles = appExtensionProvisioningProfileFiles;
  }


  public XcodeBranchConfigurationProperties archiveConfiguration(String archiveConfiguration) {
    this.archiveConfiguration = archiveConfiguration;
    return this;
  }

  /**
   * The build configuration of the target to archive
   * @return archiveConfiguration
   */
  @javax.annotation.Nullable
  public String getArchiveConfiguration() {
    return archiveConfiguration;
  }

  public void setArchiveConfiguration(String archiveConfiguration) {
    this.archiveConfiguration = archiveConfiguration;
  }


  public XcodeBranchConfigurationProperties automaticSigning(Boolean automaticSigning) {
    this.automaticSigning = automaticSigning;
    return this;
  }

  /**
   * Get automaticSigning
   * @return automaticSigning
   */
  @javax.annotation.Nullable
  public Boolean getAutomaticSigning() {
    return automaticSigning;
  }

  public void setAutomaticSigning(Boolean automaticSigning) {
    this.automaticSigning = automaticSigning;
  }


  public XcodeBranchConfigurationProperties cartfilePath(String cartfilePath) {
    this.cartfilePath = cartfilePath;
    return this;
  }

  /**
   * Path to Carthage file, if present
   * @return cartfilePath
   */
  @javax.annotation.Nullable
  public String getCartfilePath() {
    return cartfilePath;
  }

  public void setCartfilePath(String cartfilePath) {
    this.cartfilePath = cartfilePath;
  }


  public XcodeBranchConfigurationProperties certificateEncoded(String certificateEncoded) {
    this.certificateEncoded = certificateEncoded;
    return this;
  }

  /**
   * Get certificateEncoded
   * @return certificateEncoded
   */
  @javax.annotation.Nullable
  public String getCertificateEncoded() {
    return certificateEncoded;
  }

  public void setCertificateEncoded(String certificateEncoded) {
    this.certificateEncoded = certificateEncoded;
  }


  public XcodeBranchConfigurationProperties certificateFileId(String certificateFileId) {
    this.certificateFileId = certificateFileId;
    return this;
  }

  /**
   * Get certificateFileId
   * @return certificateFileId
   */
  @javax.annotation.Nullable
  public String getCertificateFileId() {
    return certificateFileId;
  }

  public void setCertificateFileId(String certificateFileId) {
    this.certificateFileId = certificateFileId;
  }


  public XcodeBranchConfigurationProperties certificateFilename(String certificateFilename) {
    this.certificateFilename = certificateFilename;
    return this;
  }

  /**
   * Get certificateFilename
   * @return certificateFilename
   */
  @javax.annotation.Nullable
  public String getCertificateFilename() {
    return certificateFilename;
  }

  public void setCertificateFilename(String certificateFilename) {
    this.certificateFilename = certificateFilename;
  }


  public XcodeBranchConfigurationProperties certificatePassword(String certificatePassword) {
    this.certificatePassword = certificatePassword;
    return this;
  }

  /**
   * Get certificatePassword
   * @return certificatePassword
   */
  @javax.annotation.Nullable
  public String getCertificatePassword() {
    return certificatePassword;
  }

  public void setCertificatePassword(String certificatePassword) {
    this.certificatePassword = certificatePassword;
  }


  public XcodeBranchConfigurationProperties certificateUploadId(String certificateUploadId) {
    this.certificateUploadId = certificateUploadId;
    return this;
  }

  /**
   * Get certificateUploadId
   * @return certificateUploadId
   */
  @javax.annotation.Nullable
  public String getCertificateUploadId() {
    return certificateUploadId;
  }

  public void setCertificateUploadId(String certificateUploadId) {
    this.certificateUploadId = certificateUploadId;
  }


  public XcodeBranchConfigurationProperties forceLegacyBuildSystem(Boolean forceLegacyBuildSystem) {
    this.forceLegacyBuildSystem = forceLegacyBuildSystem;
    return this;
  }

  /**
   * Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used. By default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10. 
   * @return forceLegacyBuildSystem
   */
  @javax.annotation.Nullable
  public Boolean getForceLegacyBuildSystem() {
    return forceLegacyBuildSystem;
  }

  public void setForceLegacyBuildSystem(Boolean forceLegacyBuildSystem) {
    this.forceLegacyBuildSystem = forceLegacyBuildSystem;
  }


  public XcodeBranchConfigurationProperties podfilePath(String podfilePath) {
    this.podfilePath = podfilePath;
    return this;
  }

  /**
   * Path to CococaPods file, if present
   * @return podfilePath
   */
  @javax.annotation.Nullable
  public String getPodfilePath() {
    return podfilePath;
  }

  public void setPodfilePath(String podfilePath) {
    this.podfilePath = podfilePath;
  }


  public XcodeBranchConfigurationProperties projectOrWorkspacePath(String projectOrWorkspacePath) {
    this.projectOrWorkspacePath = projectOrWorkspacePath;
    return this;
  }

  /**
   * Xcode project/workspace path
   * @return projectOrWorkspacePath
   */
  @javax.annotation.Nullable
  public String getProjectOrWorkspacePath() {
    return projectOrWorkspacePath;
  }

  public void setProjectOrWorkspacePath(String projectOrWorkspacePath) {
    this.projectOrWorkspacePath = projectOrWorkspacePath;
  }


  public XcodeBranchConfigurationProperties provisioningProfileEncoded(String provisioningProfileEncoded) {
    this.provisioningProfileEncoded = provisioningProfileEncoded;
    return this;
  }

  /**
   * Get provisioningProfileEncoded
   * @return provisioningProfileEncoded
   */
  @javax.annotation.Nullable
  public String getProvisioningProfileEncoded() {
    return provisioningProfileEncoded;
  }

  public void setProvisioningProfileEncoded(String provisioningProfileEncoded) {
    this.provisioningProfileEncoded = provisioningProfileEncoded;
  }


  public XcodeBranchConfigurationProperties provisioningProfileFileId(String provisioningProfileFileId) {
    this.provisioningProfileFileId = provisioningProfileFileId;
    return this;
  }

  /**
   * Get provisioningProfileFileId
   * @return provisioningProfileFileId
   */
  @javax.annotation.Nullable
  public String getProvisioningProfileFileId() {
    return provisioningProfileFileId;
  }

  public void setProvisioningProfileFileId(String provisioningProfileFileId) {
    this.provisioningProfileFileId = provisioningProfileFileId;
  }


  public XcodeBranchConfigurationProperties provisioningProfileFilename(String provisioningProfileFilename) {
    this.provisioningProfileFilename = provisioningProfileFilename;
    return this;
  }

  /**
   * Get provisioningProfileFilename
   * @return provisioningProfileFilename
   */
  @javax.annotation.Nullable
  public String getProvisioningProfileFilename() {
    return provisioningProfileFilename;
  }

  public void setProvisioningProfileFilename(String provisioningProfileFilename) {
    this.provisioningProfileFilename = provisioningProfileFilename;
  }


  public XcodeBranchConfigurationProperties provisioningProfileUploadId(String provisioningProfileUploadId) {
    this.provisioningProfileUploadId = provisioningProfileUploadId;
    return this;
  }

  /**
   * Get provisioningProfileUploadId
   * @return provisioningProfileUploadId
   */
  @javax.annotation.Nullable
  public String getProvisioningProfileUploadId() {
    return provisioningProfileUploadId;
  }

  public void setProvisioningProfileUploadId(String provisioningProfileUploadId) {
    this.provisioningProfileUploadId = provisioningProfileUploadId;
  }


  public XcodeBranchConfigurationProperties scheme(String scheme) {
    this.scheme = scheme;
    return this;
  }

  /**
   * Get scheme
   * @return scheme
   */
  @javax.annotation.Nullable
  public String getScheme() {
    return scheme;
  }

  public void setScheme(String scheme) {
    this.scheme = scheme;
  }


  public XcodeBranchConfigurationProperties targetToArchive(String targetToArchive) {
    this.targetToArchive = targetToArchive;
    return this;
  }

  /**
   * The target id of the selected scheme to archive
   * @return targetToArchive
   */
  @javax.annotation.Nullable
  public String getTargetToArchive() {
    return targetToArchive;
  }

  public void setTargetToArchive(String targetToArchive) {
    this.targetToArchive = targetToArchive;
  }


  public XcodeBranchConfigurationProperties teamId(String teamId) {
    this.teamId = teamId;
    return this;
  }

  /**
   * Get teamId
   * @return teamId
   */
  @javax.annotation.Nullable
  public String getTeamId() {
    return teamId;
  }

  public void setTeamId(String teamId) {
    this.teamId = teamId;
  }


  public XcodeBranchConfigurationProperties xcodeProjectSha(String xcodeProjectSha) {
    this.xcodeProjectSha = xcodeProjectSha;
    return this;
  }

  /**
   * The selected pbxproject hash to the repositroy
   * @return xcodeProjectSha
   */
  @javax.annotation.Nullable
  public String getXcodeProjectSha() {
    return xcodeProjectSha;
  }

  public void setXcodeProjectSha(String xcodeProjectSha) {
    this.xcodeProjectSha = xcodeProjectSha;
  }


  public XcodeBranchConfigurationProperties xcodeVersion(String xcodeVersion) {
    this.xcodeVersion = xcodeVersion;
    return this;
  }

  /**
   * Xcode version used to build. Available versions can be found in \&quot;/xcode_versions\&quot; API. Default is latest stable version, at the time when the configuration is set.
   * @return xcodeVersion
   */
  @javax.annotation.Nullable
  public String getXcodeVersion() {
    return xcodeVersion;
  }

  public void setXcodeVersion(String xcodeVersion) {
    this.xcodeVersion = xcodeVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    XcodeBranchConfigurationProperties xcodeBranchConfigurationProperties = (XcodeBranchConfigurationProperties) o;
    return Objects.equals(this.appExtensionProvisioningProfileFiles, xcodeBranchConfigurationProperties.appExtensionProvisioningProfileFiles) &&
        Objects.equals(this.archiveConfiguration, xcodeBranchConfigurationProperties.archiveConfiguration) &&
        Objects.equals(this.automaticSigning, xcodeBranchConfigurationProperties.automaticSigning) &&
        Objects.equals(this.cartfilePath, xcodeBranchConfigurationProperties.cartfilePath) &&
        Objects.equals(this.certificateEncoded, xcodeBranchConfigurationProperties.certificateEncoded) &&
        Objects.equals(this.certificateFileId, xcodeBranchConfigurationProperties.certificateFileId) &&
        Objects.equals(this.certificateFilename, xcodeBranchConfigurationProperties.certificateFilename) &&
        Objects.equals(this.certificatePassword, xcodeBranchConfigurationProperties.certificatePassword) &&
        Objects.equals(this.certificateUploadId, xcodeBranchConfigurationProperties.certificateUploadId) &&
        Objects.equals(this.forceLegacyBuildSystem, xcodeBranchConfigurationProperties.forceLegacyBuildSystem) &&
        Objects.equals(this.podfilePath, xcodeBranchConfigurationProperties.podfilePath) &&
        Objects.equals(this.projectOrWorkspacePath, xcodeBranchConfigurationProperties.projectOrWorkspacePath) &&
        Objects.equals(this.provisioningProfileEncoded, xcodeBranchConfigurationProperties.provisioningProfileEncoded) &&
        Objects.equals(this.provisioningProfileFileId, xcodeBranchConfigurationProperties.provisioningProfileFileId) &&
        Objects.equals(this.provisioningProfileFilename, xcodeBranchConfigurationProperties.provisioningProfileFilename) &&
        Objects.equals(this.provisioningProfileUploadId, xcodeBranchConfigurationProperties.provisioningProfileUploadId) &&
        Objects.equals(this.scheme, xcodeBranchConfigurationProperties.scheme) &&
        Objects.equals(this.targetToArchive, xcodeBranchConfigurationProperties.targetToArchive) &&
        Objects.equals(this.teamId, xcodeBranchConfigurationProperties.teamId) &&
        Objects.equals(this.xcodeProjectSha, xcodeBranchConfigurationProperties.xcodeProjectSha) &&
        Objects.equals(this.xcodeVersion, xcodeBranchConfigurationProperties.xcodeVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appExtensionProvisioningProfileFiles, archiveConfiguration, automaticSigning, cartfilePath, certificateEncoded, certificateFileId, certificateFilename, certificatePassword, certificateUploadId, forceLegacyBuildSystem, podfilePath, projectOrWorkspacePath, provisioningProfileEncoded, provisioningProfileFileId, provisioningProfileFilename, provisioningProfileUploadId, scheme, targetToArchive, teamId, xcodeProjectSha, xcodeVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class XcodeBranchConfigurationProperties {\n");
    sb.append("    appExtensionProvisioningProfileFiles: ").append(toIndentedString(appExtensionProvisioningProfileFiles)).append("\n");
    sb.append("    archiveConfiguration: ").append(toIndentedString(archiveConfiguration)).append("\n");
    sb.append("    automaticSigning: ").append(toIndentedString(automaticSigning)).append("\n");
    sb.append("    cartfilePath: ").append(toIndentedString(cartfilePath)).append("\n");
    sb.append("    certificateEncoded: ").append(toIndentedString(certificateEncoded)).append("\n");
    sb.append("    certificateFileId: ").append(toIndentedString(certificateFileId)).append("\n");
    sb.append("    certificateFilename: ").append(toIndentedString(certificateFilename)).append("\n");
    sb.append("    certificatePassword: ").append(toIndentedString(certificatePassword)).append("\n");
    sb.append("    certificateUploadId: ").append(toIndentedString(certificateUploadId)).append("\n");
    sb.append("    forceLegacyBuildSystem: ").append(toIndentedString(forceLegacyBuildSystem)).append("\n");
    sb.append("    podfilePath: ").append(toIndentedString(podfilePath)).append("\n");
    sb.append("    projectOrWorkspacePath: ").append(toIndentedString(projectOrWorkspacePath)).append("\n");
    sb.append("    provisioningProfileEncoded: ").append(toIndentedString(provisioningProfileEncoded)).append("\n");
    sb.append("    provisioningProfileFileId: ").append(toIndentedString(provisioningProfileFileId)).append("\n");
    sb.append("    provisioningProfileFilename: ").append(toIndentedString(provisioningProfileFilename)).append("\n");
    sb.append("    provisioningProfileUploadId: ").append(toIndentedString(provisioningProfileUploadId)).append("\n");
    sb.append("    scheme: ").append(toIndentedString(scheme)).append("\n");
    sb.append("    targetToArchive: ").append(toIndentedString(targetToArchive)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    xcodeProjectSha: ").append(toIndentedString(xcodeProjectSha)).append("\n");
    sb.append("    xcodeVersion: ").append(toIndentedString(xcodeVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appExtensionProvisioningProfileFiles");
    openapiFields.add("archiveConfiguration");
    openapiFields.add("automaticSigning");
    openapiFields.add("cartfilePath");
    openapiFields.add("certificateEncoded");
    openapiFields.add("certificateFileId");
    openapiFields.add("certificateFilename");
    openapiFields.add("certificatePassword");
    openapiFields.add("certificateUploadId");
    openapiFields.add("forceLegacyBuildSystem");
    openapiFields.add("podfilePath");
    openapiFields.add("projectOrWorkspacePath");
    openapiFields.add("provisioningProfileEncoded");
    openapiFields.add("provisioningProfileFileId");
    openapiFields.add("provisioningProfileFilename");
    openapiFields.add("provisioningProfileUploadId");
    openapiFields.add("scheme");
    openapiFields.add("targetToArchive");
    openapiFields.add("teamId");
    openapiFields.add("xcodeProjectSha");
    openapiFields.add("xcodeVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to XcodeBranchConfigurationProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!XcodeBranchConfigurationProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in XcodeBranchConfigurationProperties is not found in the empty JSON string", XcodeBranchConfigurationProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!XcodeBranchConfigurationProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `XcodeBranchConfigurationProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("appExtensionProvisioningProfileFiles") != null && !jsonObj.get("appExtensionProvisioningProfileFiles").isJsonNull()) {
        JsonArray jsonArrayappExtensionProvisioningProfileFiles = jsonObj.getAsJsonArray("appExtensionProvisioningProfileFiles");
        if (jsonArrayappExtensionProvisioningProfileFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("appExtensionProvisioningProfileFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `appExtensionProvisioningProfileFiles` to be an array in the JSON string but got `%s`", jsonObj.get("appExtensionProvisioningProfileFiles").toString()));
          }

          // validate the optional field `appExtensionProvisioningProfileFiles` (array)
          for (int i = 0; i < jsonArrayappExtensionProvisioningProfileFiles.size(); i++) {
            BranchConfigurationsGet200ResponseAllOfToolsetsXcodeAppExtensionProvisioningProfileFilesInner.validateJsonElement(jsonArrayappExtensionProvisioningProfileFiles.get(i));
          };
        }
      }
      if ((jsonObj.get("archiveConfiguration") != null && !jsonObj.get("archiveConfiguration").isJsonNull()) && !jsonObj.get("archiveConfiguration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `archiveConfiguration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("archiveConfiguration").toString()));
      }
      if ((jsonObj.get("cartfilePath") != null && !jsonObj.get("cartfilePath").isJsonNull()) && !jsonObj.get("cartfilePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cartfilePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cartfilePath").toString()));
      }
      if ((jsonObj.get("certificateEncoded") != null && !jsonObj.get("certificateEncoded").isJsonNull()) && !jsonObj.get("certificateEncoded").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificateEncoded` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificateEncoded").toString()));
      }
      if ((jsonObj.get("certificateFileId") != null && !jsonObj.get("certificateFileId").isJsonNull()) && !jsonObj.get("certificateFileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificateFileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificateFileId").toString()));
      }
      if ((jsonObj.get("certificateFilename") != null && !jsonObj.get("certificateFilename").isJsonNull()) && !jsonObj.get("certificateFilename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificateFilename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificateFilename").toString()));
      }
      if ((jsonObj.get("certificatePassword") != null && !jsonObj.get("certificatePassword").isJsonNull()) && !jsonObj.get("certificatePassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificatePassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificatePassword").toString()));
      }
      if ((jsonObj.get("certificateUploadId") != null && !jsonObj.get("certificateUploadId").isJsonNull()) && !jsonObj.get("certificateUploadId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificateUploadId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificateUploadId").toString()));
      }
      if ((jsonObj.get("podfilePath") != null && !jsonObj.get("podfilePath").isJsonNull()) && !jsonObj.get("podfilePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `podfilePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("podfilePath").toString()));
      }
      if ((jsonObj.get("projectOrWorkspacePath") != null && !jsonObj.get("projectOrWorkspacePath").isJsonNull()) && !jsonObj.get("projectOrWorkspacePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectOrWorkspacePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectOrWorkspacePath").toString()));
      }
      if ((jsonObj.get("provisioningProfileEncoded") != null && !jsonObj.get("provisioningProfileEncoded").isJsonNull()) && !jsonObj.get("provisioningProfileEncoded").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningProfileEncoded` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningProfileEncoded").toString()));
      }
      if ((jsonObj.get("provisioningProfileFileId") != null && !jsonObj.get("provisioningProfileFileId").isJsonNull()) && !jsonObj.get("provisioningProfileFileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningProfileFileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningProfileFileId").toString()));
      }
      if ((jsonObj.get("provisioningProfileFilename") != null && !jsonObj.get("provisioningProfileFilename").isJsonNull()) && !jsonObj.get("provisioningProfileFilename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningProfileFilename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningProfileFilename").toString()));
      }
      if ((jsonObj.get("provisioningProfileUploadId") != null && !jsonObj.get("provisioningProfileUploadId").isJsonNull()) && !jsonObj.get("provisioningProfileUploadId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningProfileUploadId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningProfileUploadId").toString()));
      }
      if ((jsonObj.get("scheme") != null && !jsonObj.get("scheme").isJsonNull()) && !jsonObj.get("scheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheme").toString()));
      }
      if ((jsonObj.get("targetToArchive") != null && !jsonObj.get("targetToArchive").isJsonNull()) && !jsonObj.get("targetToArchive").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetToArchive` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetToArchive").toString()));
      }
      if ((jsonObj.get("teamId") != null && !jsonObj.get("teamId").isJsonNull()) && !jsonObj.get("teamId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teamId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teamId").toString()));
      }
      if ((jsonObj.get("xcodeProjectSha") != null && !jsonObj.get("xcodeProjectSha").isJsonNull()) && !jsonObj.get("xcodeProjectSha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xcodeProjectSha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xcodeProjectSha").toString()));
      }
      if ((jsonObj.get("xcodeVersion") != null && !jsonObj.get("xcodeVersion").isJsonNull()) && !jsonObj.get("xcodeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xcodeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xcodeVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!XcodeBranchConfigurationProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'XcodeBranchConfigurationProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<XcodeBranchConfigurationProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(XcodeBranchConfigurationProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<XcodeBranchConfigurationProperties>() {
           @Override
           public void write(JsonWriter out, XcodeBranchConfigurationProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public XcodeBranchConfigurationProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of XcodeBranchConfigurationProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of XcodeBranchConfigurationProperties
   * @throws IOException if the JSON string is invalid with respect to XcodeBranchConfigurationProperties
   */
  public static XcodeBranchConfigurationProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, XcodeBranchConfigurationProperties.class);
  }

  /**
   * Convert an instance of XcodeBranchConfigurationProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

