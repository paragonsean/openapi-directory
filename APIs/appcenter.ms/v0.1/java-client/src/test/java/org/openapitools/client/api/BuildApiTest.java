/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BranchConfigurationsDelete200Response;
import org.openapitools.client.model.BranchConfigurationsGet200Response;
import org.openapitools.client.model.BranchConfigurationsUpdateRequest;
import org.openapitools.client.model.BuildConfigurationsGet200Response;
import org.openapitools.client.model.BuildsCreateRequest;
import org.openapitools.client.model.BuildsDistribute200Response;
import org.openapitools.client.model.BuildsDistributeRequest;
import org.openapitools.client.model.BuildsGetDownloadUri200Response;
import org.openapitools.client.model.BuildsGetLog200Response;
import org.openapitools.client.model.BuildsGetStatusByAppId200Response;
import org.openapitools.client.model.BuildsListBranches200ResponseInner;
import org.openapitools.client.model.BuildsListBranches200ResponseInnerLastBuild;
import org.openapitools.client.model.BuildsListBranchesDefaultResponse;
import org.openapitools.client.model.BuildsListToolsetProjects200Response;
import org.openapitools.client.model.BuildsListToolsets200Response;
import org.openapitools.client.model.BuildsListToolsets200ResponseXamarinInner;
import org.openapitools.client.model.BuildsListToolsets200ResponseXcodeInner;
import org.openapitools.client.model.BuildsUpdateRequest;
import org.openapitools.client.model.CommitsListByShaList200ResponseInner;
import org.openapitools.client.model.FileAssetsCreate200Response;
import org.openapitools.client.model.RepositoriesList200ResponseInner;
import org.openapitools.client.model.RepositoryConfigurationsCreateOrUpdateRequest;
import org.openapitools.client.model.RepositoryConfigurationsList200ResponseInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BuildApi
 */
@Disabled
public class BuildApiTest {

    private final BuildApi api = new BuildApi();

    /**
     * Configures the branch for build
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void branchConfigurationsCreateTest() throws ApiException {
        String branch = null;
        String ownerName = null;
        String appName = null;
        BranchConfigurationsUpdateRequest branchConfigurationsUpdateRequest = null;
        BranchConfigurationsGet200Response response = api.branchConfigurationsCreate(branch, ownerName, appName, branchConfigurationsUpdateRequest);
        // TODO: test validations
    }

    /**
     * Deletes the branch build configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void branchConfigurationsDeleteTest() throws ApiException {
        String branch = null;
        String ownerName = null;
        String appName = null;
        Object body = null;
        BranchConfigurationsDelete200Response response = api.branchConfigurationsDelete(branch, ownerName, appName, body);
        // TODO: test validations
    }

    /**
     * Gets the branch configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void branchConfigurationsGetTest() throws ApiException {
        String branch = null;
        String ownerName = null;
        String appName = null;
        BranchConfigurationsGet200Response response = api.branchConfigurationsGet(branch, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Reconfigures the branch for build
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void branchConfigurationsUpdateTest() throws ApiException {
        String branch = null;
        String ownerName = null;
        String appName = null;
        BranchConfigurationsUpdateRequest branchConfigurationsUpdateRequest = null;
        BranchConfigurationsGet200Response response = api.branchConfigurationsUpdate(branch, ownerName, appName, branchConfigurationsUpdateRequest);
        // TODO: test validations
    }

    /**
     * Gets the build configuration in Azure pipeline YAML format
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildConfigurationsGetTest() throws ApiException {
        String branch = null;
        String ownerName = null;
        String appName = null;
        String format = null;
        BuildConfigurationsGet200Response response = api.buildConfigurationsGet(branch, ownerName, appName, format);
        // TODO: test validations
    }

    /**
     * Create a build
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsCreateTest() throws ApiException {
        String branch = null;
        String ownerName = null;
        String appName = null;
        BuildsCreateRequest buildsCreateRequest = null;
        BuildsListBranches200ResponseInnerLastBuild response = api.buildsCreate(branch, ownerName, appName, buildsCreateRequest);
        // TODO: test validations
    }

    /**
     * Distribute a build
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsDistributeTest() throws ApiException {
        Integer buildId = null;
        String ownerName = null;
        String appName = null;
        BuildsDistributeRequest buildsDistributeRequest = null;
        BuildsDistribute200Response response = api.buildsDistribute(buildId, ownerName, appName, buildsDistributeRequest);
        // TODO: test validations
    }

    /**
     * Returns the build detail for the given build ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsGetTest() throws ApiException {
        Integer buildId = null;
        String ownerName = null;
        String appName = null;
        BuildsListBranches200ResponseInnerLastBuild response = api.buildsGet(buildId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Gets the download URI
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsGetDownloadUriTest() throws ApiException {
        Integer buildId = null;
        String downloadType = null;
        String ownerName = null;
        String appName = null;
        BuildsGetDownloadUri200Response response = api.buildsGetDownloadUri(buildId, downloadType, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Get the build log
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsGetLogTest() throws ApiException {
        Integer buildId = null;
        String ownerName = null;
        String appName = null;
        BuildsGetLog200Response response = api.buildsGetLog(buildId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Application specific build service status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsGetStatusByAppIdTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        BuildsGetStatusByAppId200Response response = api.buildsGetStatusByAppId(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Returns the list of Git branches for this application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsListBranchesTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        List<BuildsListBranches200ResponseInner> response = api.buildsListBranches(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Returns the list of builds for the branch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsListByBranchTest() throws ApiException {
        String branch = null;
        String ownerName = null;
        String appName = null;
        List<BuildsListBranches200ResponseInnerLastBuild> response = api.buildsListByBranch(branch, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Returns the projects in the repository for the branch, for all toolsets
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsListToolsetProjectsTest() throws ApiException {
        String branch = null;
        String os = null;
        String platform = null;
        String ownerName = null;
        String appName = null;
        Integer maxSearchDepth = null;
        BuildsListToolsetProjects200Response response = api.buildsListToolsetProjects(branch, os, platform, ownerName, appName, maxSearchDepth);
        // TODO: test validations
    }

    /**
     * Returns available toolsets for application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsListToolsetsTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        String tools = null;
        BuildsListToolsets200Response response = api.buildsListToolsets(ownerName, appName, tools);
        // TODO: test validations
    }

    /**
     * Gets the Xamarin SDK bundles available to this app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsListXamarinSDKBundlesTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        List<BuildsListToolsets200ResponseXamarinInner> response = api.buildsListXamarinSDKBundles(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Gets the Xcode versions available to this app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsListXcodeVersionsTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        List<BuildsListToolsets200ResponseXcodeInner> response = api.buildsListXcodeVersions(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Cancels a build
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsUpdateTest() throws ApiException {
        Integer buildId = null;
        String ownerName = null;
        String appName = null;
        BuildsUpdateRequest buildsUpdateRequest = null;
        BuildsListBranches200ResponseInnerLastBuild response = api.buildsUpdate(buildId, ownerName, appName, buildsUpdateRequest);
        // TODO: test validations
    }

    /**
     * Public webhook sink
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void buildsWebhookTest() throws ApiException {
        Object body = null;
        api.buildsWebhook(body);
        // TODO: test validations
    }

    /**
     * Returns commit information for a batch of shas
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void commitsListByShaListTest() throws ApiException {
        List<String> hashes = null;
        String ownerName = null;
        String appName = null;
        List<CommitsListByShaList200ResponseInner> response = api.commitsListByShaList(hashes, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Create a new asset to upload a file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fileAssetsCreateTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        Object body = null;
        FileAssetsCreate200Response response = api.fileAssetsCreate(ownerName, appName, body);
        // TODO: test validations
    }

    /**
     * Gets the repositories available from the source code host
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesListTest() throws ApiException {
        String sourceHost = null;
        String ownerName = null;
        String appName = null;
        String vstsAccountName = null;
        String vstsProjectId = null;
        String serviceConnectionId = null;
        String form = null;
        List<RepositoriesList200ResponseInner> response = api.repositoriesList(sourceHost, ownerName, appName, vstsAccountName, vstsProjectId, serviceConnectionId, form);
        // TODO: test validations
    }

    /**
     * Configures the repository for build
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoryConfigurationsCreateOrUpdateTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        RepositoryConfigurationsCreateOrUpdateRequest repositoryConfigurationsCreateOrUpdateRequest = null;
        BranchConfigurationsDelete200Response response = api.repositoryConfigurationsCreateOrUpdate(ownerName, appName, repositoryConfigurationsCreateOrUpdateRequest);
        // TODO: test validations
    }

    /**
     * Removes the configuration for the repository
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoryConfigurationsDeleteTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        BranchConfigurationsDelete200Response response = api.repositoryConfigurationsDelete(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Returns the repository build configuration status of the app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoryConfigurationsListTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        Boolean includeInactive = null;
        List<RepositoryConfigurationsList200ResponseInner> response = api.repositoryConfigurationsList(ownerName, appName, includeInactive);
        // TODO: test validations
    }

}
