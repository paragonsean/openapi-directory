/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DiagnosticsStackTrace;
import org.openapitools.client.model.ErrorsAppBuildsList200Response;
import org.openapitools.client.model.ErrorsAvailableVersions200Response;
import org.openapitools.client.model.ErrorsCountsPerDay200Response;
import org.openapitools.client.model.ErrorsDeleteError200Response;
import org.openapitools.client.model.ErrorsErrorAttachmentText200Response;
import org.openapitools.client.model.ErrorsErrorAttachments200ResponseInner;
import org.openapitools.client.model.ErrorsErrorGroupsSearch200Response;
import org.openapitools.client.model.ErrorsErrorLocation200Response;
import org.openapitools.client.model.ErrorsErrorSearch200Response;
import org.openapitools.client.model.ErrorsGetRetentionSettings200Response;
import org.openapitools.client.model.ErrorsGroupDetails200Response;
import org.openapitools.client.model.ErrorsGroupErrorFreeDevicePercentages200Response;
import org.openapitools.client.model.ErrorsGroupList200Response;
import org.openapitools.client.model.ErrorsGroupModelCounts200Response;
import org.openapitools.client.model.ErrorsGroupOperatingSystemCounts200Response;
import org.openapitools.client.model.ErrorsLatestErrorDetails200Response;
import org.openapitools.client.model.ErrorsListForGroup200Response;
import org.openapitools.client.model.ErrorsListSessionLogs200Response;
import org.openapitools.client.model.ErrorsUpdateStateRequest;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OrganizationsListAdministeredDefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ErrorsApi
 */
@Disabled
public class ErrorsApiTest {

    private final ErrorsApi api = new ErrorsApi();

    /**
     * List of app builds
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorsAppBuildsListTest() throws ApiException {
        String version = null;
        OffsetDateTime start = null;
        String ownerName = null;
        String appName = null;
        OffsetDateTime end = null;
        Long $top = null;
        String errorType = null;
        ErrorsAppBuildsList200Response response = api.errorsAppBuildsList(version, start, ownerName, appName, end, $top, errorType);
        // TODO: test validations
    }

    /**
     * Get all available versions in the time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorsAvailableVersionsTest() throws ApiException {
        OffsetDateTime start = null;
        String ownerName = null;
        String appName = null;
        OffsetDateTime end = null;
        Long $top = null;
        Long $skip = null;
        String $filter = null;
        String $inlinecount = null;
        String errorType = null;
        ErrorsAvailableVersions200Response response = api.errorsAvailableVersions(start, ownerName, appName, end, $top, $skip, $filter, $inlinecount, errorType);
        // TODO: test validations
    }

    /**
     * Count of crashes or errors by day in the time range based the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorsCountsPerDayTest() throws ApiException {
        OffsetDateTime start = null;
        String ownerName = null;
        String appName = null;
        String version = null;
        OffsetDateTime end = null;
        String appBuild = null;
        String errorType = null;
        ErrorsCountsPerDay200Response response = api.errorsCountsPerDay(start, ownerName, appName, version, end, appBuild, errorType);
        // TODO: test validations
    }

    /**
     * Delete a specific error and related attachments and blobs for an app. Searchable data will not be deleted immediately and may take up to 30 days.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorsDeleteErrorTest() throws ApiException {
        String errorGroupId = null;
        String errorId = null;
        String ownerName = null;
        String appName = null;
        ErrorsDeleteError200Response response = api.errorsDeleteError(errorGroupId, errorId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Error attachment location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorsErrorAttachmentLocationTest() throws ApiException {
        String errorId = null;
        String attachmentId = null;
        String ownerName = null;
        String appName = null;
        ErrorsErrorLocation200Response response = api.errorsErrorAttachmentLocation(errorId, attachmentId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Error attachment text.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorsErrorAttachmentTextTest() throws ApiException {
        String errorId = null;
        String attachmentId = null;
        String ownerName = null;
        String appName = null;
        ErrorsErrorAttachmentText200Response response = api.errorsErrorAttachmentText(errorId, attachmentId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * List error attachments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorsErrorAttachmentsTest() throws ApiException {
        String errorId = null;
        String ownerName = null;
        String appName = null;
        List<ErrorsErrorAttachments200ResponseInner> response = api.errorsErrorAttachments(errorId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Download details for a specific error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorsErrorDownloadTest() throws ApiException {
        String errorGroupId = null;
        String errorId = null;
        String ownerName = null;
        String appName = null;
        String format = null;
        Object response = api.errorsErrorDownload(errorGroupId, errorId, ownerName, appName, format);
        // TODO: test validations
    }

    /**
     * Percentage of error-free devices by day in the time range based on the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror. API will return -1 if crash devices is greater than active devices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorsErrorFreeDevicePercentagesTest() throws ApiException {
        OffsetDateTime start = null;
        String ownerName = null;
        String appName = null;
        OffsetDateTime end = null;
        List<String> versions = null;
        String appBuild = null;
        String errorType = null;
        ErrorsGroupErrorFreeDevicePercentages200Response response = api.errorsErrorFreeDevicePercentages(start, ownerName, appName, end, versions, appBuild, errorType);
        // TODO: test validations
    }

    /**
     * Error groups list based on search parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorsErrorGroupsSearchTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        String filter = null;
        String q = null;
        String order = null;
        String sort = null;
        Long $top = null;
        Long $skip = null;
        ErrorsErrorGroupsSearch200Response response = api.errorsErrorGroupsSearch(ownerName, appName, filter, q, order, sort, $top, $skip);
        // TODO: test validations
    }

    /**
     * Error location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorsErrorLocationTest() throws ApiException {
        String errorGroupId = null;
        String errorId = null;
        String ownerName = null;
        String appName = null;
        ErrorsErrorLocation200Response response = api.errorsErrorLocation(errorGroupId, errorId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Errors list based on search parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorsErrorSearchTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        String filter = null;
        String q = null;
        String order = null;
        String sort = null;
        Long $top = null;
        Long $skip = null;
        ErrorsErrorSearch200Response response = api.errorsErrorSearch(ownerName, appName, filter, q, order, sort, $top, $skip);
        // TODO: test validations
    }

    /**
     * Error Stacktrace details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorsErrorStackTraceTest() throws ApiException {
        String errorGroupId = null;
        String errorId = null;
        String ownerName = null;
        String appName = null;
        DiagnosticsStackTrace response = api.errorsErrorStackTrace(errorGroupId, errorId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Error details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorsGetErrorDetailsTest() throws ApiException {
        String errorGroupId = null;
        String errorId = null;
        String ownerName = null;
        String appName = null;
        ErrorsLatestErrorDetails200Response response = api.errorsGetErrorDetails(errorGroupId, errorId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * gets the retention settings in days
     *
     * gets the retention settings in days
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorsGetRetentionSettingsTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        ErrorsGetRetentionSettings200Response response = api.errorsGetRetentionSettings(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Count of errors by day in the time range of the selected error group with selected version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorsGroupCountsPerDayTest() throws ApiException {
        String errorGroupId = null;
        OffsetDateTime start = null;
        String ownerName = null;
        String appName = null;
        String version = null;
        OffsetDateTime end = null;
        ErrorsCountsPerDay200Response response = api.errorsGroupCountsPerDay(errorGroupId, start, ownerName, appName, version, end);
        // TODO: test validations
    }

    /**
     * Error group details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorsGroupDetailsTest() throws ApiException {
        String errorGroupId = null;
        String ownerName = null;
        String appName = null;
        ErrorsGroupDetails200Response response = api.errorsGroupDetails(errorGroupId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Percentage of error-free devices by day in the time range. Api will return -1 if crash devices is greater than active devices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorsGroupErrorFreeDevicePercentagesTest() throws ApiException {
        String errorGroupId = null;
        OffsetDateTime start = null;
        String ownerName = null;
        String appName = null;
        OffsetDateTime end = null;
        ErrorsGroupErrorFreeDevicePercentages200Response response = api.errorsGroupErrorFreeDevicePercentages(errorGroupId, start, ownerName, appName, end);
        // TODO: test validations
    }

    /**
     * Gets the stack trace for the error group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorsGroupErrorStackTraceTest() throws ApiException {
        String errorGroupId = null;
        String ownerName = null;
        String appName = null;
        DiagnosticsStackTrace response = api.errorsGroupErrorStackTrace(errorGroupId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * List of error groups
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorsGroupListTest() throws ApiException {
        OffsetDateTime start = null;
        String ownerName = null;
        String appName = null;
        String version = null;
        String appBuild = null;
        String groupState = null;
        OffsetDateTime end = null;
        String $orderby = null;
        Long $top = null;
        String errorType = null;
        ErrorsGroupList200Response response = api.errorsGroupList(start, ownerName, appName, version, appBuild, groupState, end, $orderby, $top, errorType);
        // TODO: test validations
    }

    /**
     * Top models of the selected error group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorsGroupModelCountsTest() throws ApiException {
        String errorGroupId = null;
        String ownerName = null;
        String appName = null;
        Long $top = null;
        ErrorsGroupModelCounts200Response response = api.errorsGroupModelCounts(errorGroupId, ownerName, appName, $top);
        // TODO: test validations
    }

    /**
     * Top OSes of the selected error group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorsGroupOperatingSystemCountsTest() throws ApiException {
        String errorGroupId = null;
        String ownerName = null;
        String appName = null;
        Long $top = null;
        ErrorsGroupOperatingSystemCounts200Response response = api.errorsGroupOperatingSystemCounts(errorGroupId, ownerName, appName, $top);
        // TODO: test validations
    }

    /**
     * Latest error details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorsLatestErrorDetailsTest() throws ApiException {
        String errorGroupId = null;
        String ownerName = null;
        String appName = null;
        ErrorsLatestErrorDetails200Response response = api.errorsLatestErrorDetails(errorGroupId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Get all errors for group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorsListForGroupTest() throws ApiException {
        String errorGroupId = null;
        OffsetDateTime start = null;
        String ownerName = null;
        String appName = null;
        OffsetDateTime end = null;
        Long $top = null;
        String model = null;
        String os = null;
        ErrorsListForGroup200Response response = api.errorsListForGroup(errorGroupId, start, ownerName, appName, end, $top, model, os);
        // TODO: test validations
    }

    /**
     * Get session logs by error ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorsListSessionLogsTest() throws ApiException {
        String errorId = null;
        String ownerName = null;
        String appName = null;
        OffsetDateTime date = null;
        ErrorsListSessionLogs200Response response = api.errorsListSessionLogs(errorId, ownerName, appName, date);
        // TODO: test validations
    }

    /**
     * Update error group state
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorsUpdateStateTest() throws ApiException {
        String errorGroupId = null;
        String ownerName = null;
        String appName = null;
        ErrorsUpdateStateRequest errorsUpdateStateRequest = null;
        ErrorsGroupDetails200Response response = api.errorsUpdateState(errorGroupId, ownerName, appName, errorsUpdateStateRequest);
        // TODO: test validations
    }

}
