/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BranchConfigurationsDelete200Response;
import org.openapitools.client.model.CodePushAcquisitionGetAcquisitionStatus200Response;
import org.openapitools.client.model.CodePushAcquisitionUpdateCheck200Response;
import org.openapitools.client.model.CodePushAcquisitionUpdateDeployStatusRequest;
import org.openapitools.client.model.CodePushDeploymentMetricsGet200ResponseInner;
import org.openapitools.client.model.CodePushDeploymentReleaseRollbackRequest;
import org.openapitools.client.model.CodePushDeploymentReleasesCreateRequest;
import org.openapitools.client.model.CodePushDeploymentUploadCreate200Response;
import org.openapitools.client.model.CodePushDeploymentsList200ResponseInner;
import org.openapitools.client.model.CodePushDeploymentsList200ResponseInnerLatestRelease;
import org.openapitools.client.model.CodePushDeploymentsPromoteRequest;
import org.openapitools.client.model.CodePushDeploymentsUpdateRequest;
import org.openapitools.client.model.DeploymentReleasesUpdateRequest;
import org.openapitools.client.model.LegacyCodePushAcquisitionUpdateCheck200Response;
import org.openapitools.client.model.LegacyCodePushAcquisitionUpdateInstallsStatusRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CodepushApi
 */
@Disabled
public class CodepushApiTest {

    private final CodepushApi api = new CodepushApi();

    /**
     * Returns the acquisition service status to the caller
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void codePushAcquisitionGetAcquisitionStatusTest() throws ApiException {
        CodePushAcquisitionGetAcquisitionStatus200Response response = api.codePushAcquisitionGetAcquisitionStatus();
        // TODO: test validations
    }

    /**
     * Check for updates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void codePushAcquisitionUpdateCheckTest() throws ApiException {
        String deploymentKey = null;
        String appVersion = null;
        String packageHash = null;
        String label = null;
        String clientUniqueId = null;
        Boolean isCompanion = null;
        String previousLabelOrAppVersion = null;
        String previousDeploymentKey = null;
        CodePushAcquisitionUpdateCheck200Response response = api.codePushAcquisitionUpdateCheck(deploymentKey, appVersion, packageHash, label, clientUniqueId, isCompanion, previousLabelOrAppVersion, previousDeploymentKey);
        // TODO: test validations
    }

    /**
     * Report Deployment status metric
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void codePushAcquisitionUpdateDeployStatusTest() throws ApiException {
        CodePushAcquisitionUpdateDeployStatusRequest codePushAcquisitionUpdateDeployStatusRequest = null;
        api.codePushAcquisitionUpdateDeployStatus(codePushAcquisitionUpdateDeployStatusRequest);
        // TODO: test validations
    }

    /**
     * Report download of specified release
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void codePushAcquisitionUpdateDownloadStatusTest() throws ApiException {
        CodePushAcquisitionUpdateDeployStatusRequest codePushAcquisitionUpdateDeployStatusRequest = null;
        api.codePushAcquisitionUpdateDownloadStatus(codePushAcquisitionUpdateDeployStatusRequest);
        // TODO: test validations
    }

    /**
     * Gets all releases metrics for specified Deployment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void codePushDeploymentMetricsGetTest() throws ApiException {
        String deploymentName = null;
        String ownerName = null;
        String appName = null;
        List<CodePushDeploymentMetricsGet200ResponseInner> response = api.codePushDeploymentMetricsGet(deploymentName, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Rollback the latest or a specific release for an app deployment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void codePushDeploymentReleaseRollbackTest() throws ApiException {
        String deploymentName = null;
        String ownerName = null;
        String appName = null;
        CodePushDeploymentReleaseRollbackRequest codePushDeploymentReleaseRollbackRequest = null;
        CodePushDeploymentsList200ResponseInnerLatestRelease response = api.codePushDeploymentReleaseRollback(deploymentName, ownerName, appName, codePushDeploymentReleaseRollbackRequest);
        // TODO: test validations
    }

    /**
     * Create a new CodePush release for the specified deployment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void codePushDeploymentReleasesCreateTest() throws ApiException {
        String deploymentName = null;
        String ownerName = null;
        String appName = null;
        CodePushDeploymentReleasesCreateRequest codePushDeploymentReleasesCreateRequest = null;
        CodePushDeploymentsList200ResponseInnerLatestRelease response = api.codePushDeploymentReleasesCreate(deploymentName, ownerName, appName, codePushDeploymentReleasesCreateRequest);
        // TODO: test validations
    }

    /**
     * Clears a Deployment of releases
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void codePushDeploymentReleasesDeleteTest() throws ApiException {
        String deploymentName = null;
        String ownerName = null;
        String appName = null;
        api.codePushDeploymentReleasesDelete(deploymentName, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Gets the history of releases on a Deployment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void codePushDeploymentReleasesGetTest() throws ApiException {
        String deploymentName = null;
        String ownerName = null;
        String appName = null;
        List<CodePushDeploymentsList200ResponseInnerLatestRelease> response = api.codePushDeploymentReleasesGet(deploymentName, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Create a new CodePush release upload for the specified deployment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void codePushDeploymentUploadCreateTest() throws ApiException {
        String deploymentName = null;
        String ownerName = null;
        String appName = null;
        CodePushDeploymentUploadCreate200Response response = api.codePushDeploymentUploadCreate(deploymentName, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Creates a CodePush Deployment for the given app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void codePushDeploymentsCreateTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        CodePushDeploymentsList200ResponseInner codePushDeploymentsList200ResponseInner = null;
        CodePushDeploymentsList200ResponseInner response = api.codePushDeploymentsCreate(ownerName, appName, codePushDeploymentsList200ResponseInner);
        // TODO: test validations
    }

    /**
     * Deletes a CodePush Deployment for the given app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void codePushDeploymentsDeleteTest() throws ApiException {
        String deploymentName = null;
        String ownerName = null;
        String appName = null;
        Object body = null;
        api.codePushDeploymentsDelete(deploymentName, ownerName, appName, body);
        // TODO: test validations
    }

    /**
     * Gets a CodePush Deployment for the given app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void codePushDeploymentsGetTest() throws ApiException {
        String deploymentName = null;
        String ownerName = null;
        String appName = null;
        CodePushDeploymentsList200ResponseInner response = api.codePushDeploymentsGet(deploymentName, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Gets a list of CodePush deployments for the given app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void codePushDeploymentsListTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        List<CodePushDeploymentsList200ResponseInner> response = api.codePushDeploymentsList(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Promote one release (default latest one) from one deployment to another
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void codePushDeploymentsPromoteTest() throws ApiException {
        String deploymentName = null;
        String promoteDeploymentName = null;
        String ownerName = null;
        String appName = null;
        CodePushDeploymentsPromoteRequest codePushDeploymentsPromoteRequest = null;
        CodePushDeploymentsList200ResponseInnerLatestRelease response = api.codePushDeploymentsPromote(deploymentName, promoteDeploymentName, ownerName, appName, codePushDeploymentsPromoteRequest);
        // TODO: test validations
    }

    /**
     * Modifies a CodePush Deployment for the given app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void codePushDeploymentsUpdateTest() throws ApiException {
        String deploymentName = null;
        String ownerName = null;
        String appName = null;
        CodePushDeploymentsUpdateRequest codePushDeploymentsUpdateRequest = null;
        api.codePushDeploymentsUpdate(deploymentName, ownerName, appName, codePushDeploymentsUpdateRequest);
        // TODO: test validations
    }

    /**
     * Modifies a CodePush release metadata under the given Deployment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentReleasesUpdateTest() throws ApiException {
        String deploymentName = null;
        String releaseLabel = null;
        String ownerName = null;
        String appName = null;
        DeploymentReleasesUpdateRequest deploymentReleasesUpdateRequest = null;
        CodePushDeploymentsList200ResponseInnerLatestRelease response = api.deploymentReleasesUpdate(deploymentName, releaseLabel, ownerName, appName, deploymentReleasesUpdateRequest);
        // TODO: test validations
    }

    /**
     * Check for updates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void legacyCodePushAcquisitionUpdateCheckTest() throws ApiException {
        String deploymentKey = null;
        String appVersion = null;
        String packageHash = null;
        String label = null;
        String clientUniqueId = null;
        String isCompanion = null;
        LegacyCodePushAcquisitionUpdateCheck200Response response = api.legacyCodePushAcquisitionUpdateCheck(deploymentKey, appVersion, packageHash, label, clientUniqueId, isCompanion);
        // TODO: test validations
    }

    /**
     * Report download of specified release
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void legacyCodePushAcquisitionUpdateDownloadStatusTest() throws ApiException {
        LegacyCodePushAcquisitionUpdateInstallsStatusRequest legacyCodePushAcquisitionUpdateInstallsStatusRequest = null;
        api.legacyCodePushAcquisitionUpdateDownloadStatus(legacyCodePushAcquisitionUpdateInstallsStatusRequest);
        // TODO: test validations
    }

    /**
     * Report deploy of specified release
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void legacyCodePushAcquisitionUpdateInstallsStatusTest() throws ApiException {
        LegacyCodePushAcquisitionUpdateInstallsStatusRequest legacyCodePushAcquisitionUpdateInstallsStatusRequest = null;
        api.legacyCodePushAcquisitionUpdateInstallsStatus(legacyCodePushAcquisitionUpdateInstallsStatusRequest);
        // TODO: test validations
    }

}
