/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AppInvitationsCreateByEmailRequest;
import org.openapitools.client.model.AppInvitationsCreateRequest;
import org.openapitools.client.model.AppInvitationsList200Response;
import org.openapitools.client.model.AppInvitationsList200ResponseInvitedBy;
import org.openapitools.client.model.AppInvitationsUpdatePermissionsRequest;
import org.openapitools.client.model.AppsCreateRequest;
import org.openapitools.client.model.AppsGetTeams200ResponseInner;
import org.openapitools.client.model.AppsList200ResponseInner;
import org.openapitools.client.model.AppsList200ResponseInnerAllOfAzureSubscription;
import org.openapitools.client.model.AppsUpdateRequest;
import org.openapitools.client.model.AppsUpdateUserPermissionsRequest;
import org.openapitools.client.model.AzureSubscriptionLinkForAppRequest;
import java.math.BigDecimal;
import org.openapitools.client.model.DistributionGroupsAddAppsRequest;
import org.openapitools.client.model.DistributionGroupsAddAppsRequestAppsInner;
import org.openapitools.client.model.DistributionGroupsAddUser200ResponseInner;
import org.openapitools.client.model.DistributionGroupsAddUserRequest;
import org.openapitools.client.model.DistributionGroupsBulkDeleteAppsRequest;
import org.openapitools.client.model.DistributionGroupsCreateRequest;
import org.openapitools.client.model.DistributionGroupsDetailsForOrg200ResponseInner;
import org.openapitools.client.model.DistributionGroupsGetApps200ResponseInner;
import org.openapitools.client.model.DistributionGroupsList200ResponseInner;
import org.openapitools.client.model.DistributionGroupsListAllTestersForOrg200ResponseInner;
import org.openapitools.client.model.DistributionGroupsListUsers200ResponseInner;
import org.openapitools.client.model.DistributionGroupsRemoveUser200ResponseInner;
import org.openapitools.client.model.DistributionGroupsUpdateRequest;
import java.io.File;
import org.openapitools.client.model.InvitationsSent200ResponseInner;
import org.openapitools.client.model.OrgInvitationsDeleteRequest;
import org.openapitools.client.model.OrgInvitationsListPending200ResponseInner;
import org.openapitools.client.model.OrgInvitationsUpdateRequest;
import org.openapitools.client.model.OrganizationsCreateOrUpdateRequest;
import org.openapitools.client.model.OrganizationsList200ResponseInner;
import org.openapitools.client.model.OrganizationsListAdministered200Response;
import org.openapitools.client.model.OrganizationsListAdministered200ResponseOrganizations;
import org.openapitools.client.model.OrganizationsListAdministeredDefaultResponse;
import org.openapitools.client.model.OrganizationsListAdministeredDefaultResponseError;
import org.openapitools.client.model.OrganizationsUpdateRequest;
import org.openapitools.client.model.SharedconnectionConnections200ResponseInner;
import org.openapitools.client.model.TeamsCreateTeamRequest;
import org.openapitools.client.model.TeamsGetUsers200Response;
import org.openapitools.client.model.TeamsListAll200ResponseInner;
import org.openapitools.client.model.TeamsListApps200ResponseInner;
import org.openapitools.client.model.TeamsUpdatePermissionsRequest;
import org.openapitools.client.model.TeamsUpdateRequest;
import java.util.UUID;
import org.openapitools.client.model.UserApiTokensList200ResponseInner;
import org.openapitools.client.model.UserApiTokensNew201Response;
import org.openapitools.client.model.UserApiTokensNewRequest;
import org.openapitools.client.model.UsersGetUserMetadata200Response;
import org.openapitools.client.model.UsersGetUserMetadataDefaultResponse;
import org.openapitools.client.model.UsersListForOrg200ResponseInner;
import org.openapitools.client.model.UsersUpdateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountApi
 */
@Disabled
public class AccountApiTest {

    private final AccountApi api = new AccountApi();

    /**
     * Delete the App Api Token object with the specific ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appApiTokensDeleteTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        String apiTokenId = null;
        api.appApiTokensDelete(ownerName, appName, apiTokenId);
        // TODO: test validations
    }

    /**
     * Returns App API tokens for the app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appApiTokensListTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        List<UserApiTokensList200ResponseInner> response = api.appApiTokensList(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Creates a new App API token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appApiTokensNewTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        UserApiTokensNewRequest userApiTokensNewRequest = null;
        UserApiTokensNew201Response response = api.appApiTokensNew(ownerName, appName, userApiTokensNewRequest);
        // TODO: test validations
    }

    /**
     * Accepts a pending invitation for the specified user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appInvitationsAcceptTest() throws ApiException {
        String invitationToken = null;
        Object body = null;
        api.appInvitationsAccept(invitationToken, body);
        // TODO: test validations
    }

    /**
     * Invites a new or existing user to an app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appInvitationsCreateTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        AppInvitationsCreateRequest appInvitationsCreateRequest = null;
        api.appInvitationsCreate(ownerName, appName, appInvitationsCreateRequest);
        // TODO: test validations
    }

    /**
     * Invites a new or existing user to an app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appInvitationsCreateByEmailTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        String userEmail = null;
        AppInvitationsCreateByEmailRequest appInvitationsCreateByEmailRequest = null;
        api.appInvitationsCreateByEmail(ownerName, appName, userEmail, appInvitationsCreateByEmailRequest);
        // TODO: test validations
    }

    /**
     * Removes a user&#39;s invitation to an app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appInvitationsDeleteTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        String userEmail = null;
        api.appInvitationsDelete(ownerName, appName, userEmail);
        // TODO: test validations
    }

    /**
     * Gets the pending invitations for the app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appInvitationsListTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        AppInvitationsList200Response response = api.appInvitationsList(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Rejects a pending invitation for the specified user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appInvitationsRejectTest() throws ApiException {
        String invitationToken = null;
        Object body = null;
        api.appInvitationsReject(invitationToken, body);
        // TODO: test validations
    }

    /**
     * Update pending invitation permission
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appInvitationsUpdatePermissionsTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        String userEmail = null;
        AppInvitationsUpdatePermissionsRequest appInvitationsUpdatePermissionsRequest = null;
        api.appInvitationsUpdatePermissions(ownerName, appName, userEmail, appInvitationsUpdatePermissionsRequest);
        // TODO: test validations
    }

    /**
     * Creates a new app and returns it to the caller
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsCreateTest() throws ApiException {
        AppsCreateRequest appsCreateRequest = null;
        AppsList200ResponseInner response = api.appsCreate(appsCreateRequest);
        // TODO: test validations
    }

    /**
     * Creates a new app for the organization and returns it to the caller
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsCreateForOrgTest() throws ApiException {
        String orgName = null;
        AppsCreateRequest appsCreateRequest = null;
        AppsList200ResponseInner response = api.appsCreateForOrg(orgName, appsCreateRequest);
        // TODO: test validations
    }

    /**
     * Delete an app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsDeleteTest() throws ApiException {
        String appName = null;
        String ownerName = null;
        api.appsDelete(appName, ownerName);
        // TODO: test validations
    }

    /**
     * Deletes the uploaded app avatar
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsDeleteAvatarTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        AppsList200ResponseInner response = api.appsDeleteAvatar(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Return a specific app with the given app name which belongs to the given owner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsGetTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        AppsList200ResponseInner response = api.appsGet(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Get a user apps information from an organization by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsGetForOrgUserTest() throws ApiException {
        String orgName = null;
        String userName = null;
        List<AppsList200ResponseInner> response = api.appsGetForOrgUser(orgName, userName);
        // TODO: test validations
    }

    /**
     * Returns the details of all teams that have access to the app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsGetTeamsTest() throws ApiException {
        String appName = null;
        String ownerName = null;
        List<AppsGetTeams200ResponseInner> response = api.appsGetTeams(appName, ownerName);
        // TODO: test validations
    }

    /**
     * Returns a list of apps
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsListTest() throws ApiException {
        String $orderBy = null;
        List<AppsList200ResponseInner> response = api.appsList($orderBy);
        // TODO: test validations
    }

    /**
     * Returns a list of apps for the organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsListForOrgTest() throws ApiException {
        String orgName = null;
        List<AppsList200ResponseInner> response = api.appsListForOrg(orgName);
        // TODO: test validations
    }

    /**
     * Returns the testers associated with the app specified with the given app name which belongs to the given owner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsListTestersTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        List<AppInvitationsList200ResponseInvitedBy> response = api.appsListTesters(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Removes the user from the app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsRemoveUserTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        String userEmail = null;
        api.appsRemoveUser(ownerName, appName, userEmail);
        // TODO: test validations
    }

    /**
     * Transfers ownership of an app to a different user or organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsTransferOwnershipTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        String destinationOwnerName = null;
        Object body = null;
        AppsList200ResponseInner response = api.appsTransferOwnership(ownerName, appName, destinationOwnerName, body);
        // TODO: test validations
    }

    /**
     * Transfers ownership of an app to a new organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsTransferToOrgTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        Object body = null;
        OrganizationsListAdministered200ResponseOrganizations response = api.appsTransferToOrg(ownerName, appName, body);
        // TODO: test validations
    }

    /**
     * Partially updates a single app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsUpdateTest() throws ApiException {
        String appName = null;
        String ownerName = null;
        AppsUpdateRequest appsUpdateRequest = null;
        AppsList200ResponseInner response = api.appsUpdate(appName, ownerName, appsUpdateRequest);
        // TODO: test validations
    }

    /**
     * Sets the app avatar
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsUpdateAvatarTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        File avatar = null;
        AppsList200ResponseInner response = api.appsUpdateAvatar(ownerName, appName, avatar);
        // TODO: test validations
    }

    /**
     * Update user permission for the app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsUpdateUserPermissionsTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        String userEmail = null;
        AppsUpdateUserPermissionsRequest appsUpdateUserPermissionsRequest = null;
        api.appsUpdateUserPermissions(ownerName, appName, userEmail, appsUpdateUserPermissionsRequest);
        // TODO: test validations
    }

    /**
     * Delete the azure subscriptions for the app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void azureSubscriptionDeleteForAppTest() throws ApiException {
        UUID azureSubscriptionId = null;
        String ownerName = null;
        String appName = null;
        api.azureSubscriptionDeleteForApp(azureSubscriptionId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Link azure subscription to an app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void azureSubscriptionLinkForAppTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        AzureSubscriptionLinkForAppRequest azureSubscriptionLinkForAppRequest = null;
        api.azureSubscriptionLinkForApp(ownerName, appName, azureSubscriptionLinkForAppRequest);
        // TODO: test validations
    }

    /**
     * Returns a list of azure subscriptions for the app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void azureSubscriptionListForAppTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        List<AppsList200ResponseInnerAllOfAzureSubscription> response = api.azureSubscriptionListForApp(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Returns a list of azure subscriptions for the organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void azureSubscriptionListForOrgTest() throws ApiException {
        String orgName = null;
        List<AppsList200ResponseInnerAllOfAzureSubscription> response = api.azureSubscriptionListForOrg(orgName);
        // TODO: test validations
    }

    /**
     * Returns a list of azure subscriptions for the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void azureSubscriptionListForUserTest() throws ApiException {
        List<AppsList200ResponseInnerAllOfAzureSubscription> response = api.azureSubscriptionListForUser();
        // TODO: test validations
    }

    /**
     * Accepts all pending invitations to distribution groups for the specified user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distributionGroupInvitationsAcceptAllTest() throws ApiException {
        Object body = null;
        api.distributionGroupInvitationsAcceptAll(body);
        // TODO: test validations
    }

    /**
     * Add apps to distribution group in an org
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distributionGroupsAddAppsTest() throws ApiException {
        String orgName = null;
        String distributionGroupName = null;
        DistributionGroupsAddAppsRequest distributionGroupsAddAppsRequest = null;
        api.distributionGroupsAddApps(orgName, distributionGroupName, distributionGroupsAddAppsRequest);
        // TODO: test validations
    }

    /**
     * Adds the members to the specified distribution group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distributionGroupsAddUserTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        String distributionGroupName = null;
        DistributionGroupsAddUserRequest distributionGroupsAddUserRequest = null;
        List<DistributionGroupsAddUser200ResponseInner> response = api.distributionGroupsAddUser(ownerName, appName, distributionGroupName, distributionGroupsAddUserRequest);
        // TODO: test validations
    }

    /**
     * Accepts an array of user email addresses to get added to the specified group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distributionGroupsAddUsersForOrgTest() throws ApiException {
        String orgName = null;
        String distributionGroupName = null;
        DistributionGroupsAddUserRequest distributionGroupsAddUserRequest = null;
        List<DistributionGroupsAddUser200ResponseInner> response = api.distributionGroupsAddUsersForOrg(orgName, distributionGroupName, distributionGroupsAddUserRequest);
        // TODO: test validations
    }

    /**
     * Delete apps from distribution group in an org
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distributionGroupsBulkDeleteAppsTest() throws ApiException {
        String orgName = null;
        String distributionGroupName = null;
        DistributionGroupsBulkDeleteAppsRequest distributionGroupsBulkDeleteAppsRequest = null;
        api.distributionGroupsBulkDeleteApps(orgName, distributionGroupName, distributionGroupsBulkDeleteAppsRequest);
        // TODO: test validations
    }

    /**
     * Delete testers from distribution group in an org
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distributionGroupsBulkDeleteUsersTest() throws ApiException {
        String orgName = null;
        String distributionGroupName = null;
        DistributionGroupsAddUserRequest distributionGroupsAddUserRequest = null;
        api.distributionGroupsBulkDeleteUsers(orgName, distributionGroupName, distributionGroupsAddUserRequest);
        // TODO: test validations
    }

    /**
     * Creates a new distribution group and returns it to the caller
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distributionGroupsCreateTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        DistributionGroupsCreateRequest distributionGroupsCreateRequest = null;
        DistributionGroupsList200ResponseInner response = api.distributionGroupsCreate(ownerName, appName, distributionGroupsCreateRequest);
        // TODO: test validations
    }

    /**
     * Creates a disribution goup which can be shared across apps under an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distributionGroupsCreateForOrgTest() throws ApiException {
        String orgName = null;
        DistributionGroupsCreateRequest distributionGroupsCreateRequest = null;
        DistributionGroupsList200ResponseInner response = api.distributionGroupsCreateForOrg(orgName, distributionGroupsCreateRequest);
        // TODO: test validations
    }

    /**
     * Deletes a distribution group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distributionGroupsDeleteTest() throws ApiException {
        String appName = null;
        String ownerName = null;
        String distributionGroupName = null;
        api.distributionGroupsDelete(appName, ownerName, distributionGroupName);
        // TODO: test validations
    }

    /**
     * Deletes a single distribution group from an org with a given distribution group name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distributionGroupsDeleteForOrgTest() throws ApiException {
        String orgName = null;
        String distributionGroupName = null;
        api.distributionGroupsDeleteForOrg(orgName, distributionGroupName);
        // TODO: test validations
    }

    /**
     * Returns a list of distribution groups with details for an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distributionGroupsDetailsForOrgTest() throws ApiException {
        String orgName = null;
        BigDecimal appsLimit = null;
        List<DistributionGroupsDetailsForOrg200ResponseInner> response = api.distributionGroupsDetailsForOrg(orgName, appsLimit);
        // TODO: test validations
    }

    /**
     * Returns a single distribution group for a given distribution group name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distributionGroupsGetTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        String distributionGroupName = null;
        DistributionGroupsList200ResponseInner response = api.distributionGroupsGet(ownerName, appName, distributionGroupName);
        // TODO: test validations
    }

    /**
     * Get apps from a distribution group in an org
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distributionGroupsGetAppsTest() throws ApiException {
        String orgName = null;
        String distributionGroupName = null;
        List<DistributionGroupsGetApps200ResponseInner> response = api.distributionGroupsGetApps(orgName, distributionGroupName);
        // TODO: test validations
    }

    /**
     * Returns a single distribution group in org for a given distribution group name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distributionGroupsGetForOrgTest() throws ApiException {
        String orgName = null;
        String distributionGroupName = null;
        DistributionGroupsList200ResponseInner response = api.distributionGroupsGetForOrg(orgName, distributionGroupName);
        // TODO: test validations
    }

    /**
     * Returns a list of distribution groups in the app specified
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distributionGroupsListTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        List<DistributionGroupsList200ResponseInner> response = api.distributionGroupsList(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Returns a unique list of users including the whole organization members plus testers in any shared group of that org
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distributionGroupsListAllTestersForOrgTest() throws ApiException {
        String orgName = null;
        List<DistributionGroupsListAllTestersForOrg200ResponseInner> response = api.distributionGroupsListAllTestersForOrg(orgName);
        // TODO: test validations
    }

    /**
     * Returns a list of distribution groups in the org specified
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distributionGroupsListForOrgTest() throws ApiException {
        String orgName = null;
        List<DistributionGroupsList200ResponseInner> response = api.distributionGroupsListForOrg(orgName);
        // TODO: test validations
    }

    /**
     * Returns a list of member details in the distribution group specified
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distributionGroupsListUsersTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        String distributionGroupName = null;
        Boolean excludePendingInvitations = null;
        List<DistributionGroupsListUsers200ResponseInner> response = api.distributionGroupsListUsers(ownerName, appName, distributionGroupName, excludePendingInvitations);
        // TODO: test validations
    }

    /**
     * Returns a list of member in the distribution group specified
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distributionGroupsListUsersForOrgTest() throws ApiException {
        String orgName = null;
        String distributionGroupName = null;
        List<DistributionGroupsListUsers200ResponseInner> response = api.distributionGroupsListUsersForOrg(orgName, distributionGroupName);
        // TODO: test validations
    }

    /**
     * Update one given distribution group name in an org
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distributionGroupsPatchForOrgTest() throws ApiException {
        String orgName = null;
        String distributionGroupName = null;
        DistributionGroupsUpdateRequest distributionGroupsUpdateRequest = null;
        DistributionGroupsList200ResponseInner response = api.distributionGroupsPatchForOrg(orgName, distributionGroupName, distributionGroupsUpdateRequest);
        // TODO: test validations
    }

    /**
     * Remove the users from the distribution group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distributionGroupsRemoveUserTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        String distributionGroupName = null;
        DistributionGroupsAddUserRequest distributionGroupsAddUserRequest = null;
        List<DistributionGroupsRemoveUser200ResponseInner> response = api.distributionGroupsRemoveUser(ownerName, appName, distributionGroupName, distributionGroupsAddUserRequest);
        // TODO: test validations
    }

    /**
     * Resend distribution group app invite notification to previously invited testers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distributionGroupsResendInviteTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        String distributionGroupName = null;
        DistributionGroupsAddUserRequest distributionGroupsAddUserRequest = null;
        api.distributionGroupsResendInvite(ownerName, appName, distributionGroupName, distributionGroupsAddUserRequest);
        // TODO: test validations
    }

    /**
     * Resend shared distribution group invite notification to previously invited testers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distributionGroupsResendSharedInviteTest() throws ApiException {
        String orgName = null;
        String distributionGroupName = null;
        DistributionGroupsAddUserRequest distributionGroupsAddUserRequest = null;
        api.distributionGroupsResendSharedInvite(orgName, distributionGroupName, distributionGroupsAddUserRequest);
        // TODO: test validations
    }

    /**
     * Updates the attributes of distribution group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distributionGroupsUpdateTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        String distributionGroupName = null;
        DistributionGroupsUpdateRequest distributionGroupsUpdateRequest = null;
        DistributionGroupsList200ResponseInner response = api.distributionGroupsUpdate(ownerName, appName, distributionGroupName, distributionGroupsUpdateRequest);
        // TODO: test validations
    }

    /**
     * Returns all invitations sent by the caller
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invitationsSentTest() throws ApiException {
        List<InvitationsSent200ResponseInner> response = api.invitationsSent();
        // TODO: test validations
    }

    /**
     * Removes a user&#39;s invitation to an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgInvitationsTest() throws ApiException {
        String orgName = null;
        String email = null;
        Object body = null;
        api.orgInvitations(orgName, email, body);
        // TODO: test validations
    }

    /**
     * Accepts a pending organization invitation for the specified user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgInvitationsAcceptTest() throws ApiException {
        String invitationToken = null;
        Object body = null;
        api.orgInvitationsAccept(invitationToken, body);
        // TODO: test validations
    }

    /**
     * Invites a new or existing user to an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgInvitationsCreateTest() throws ApiException {
        String orgName = null;
        AppInvitationsCreateRequest appInvitationsCreateRequest = null;
        api.orgInvitationsCreate(orgName, appInvitationsCreateRequest);
        // TODO: test validations
    }

    /**
     * Removes a user&#39;s invitation to an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgInvitationsDeleteTest() throws ApiException {
        String orgName = null;
        OrgInvitationsDeleteRequest orgInvitationsDeleteRequest = null;
        api.orgInvitationsDelete(orgName, orgInvitationsDeleteRequest);
        // TODO: test validations
    }

    /**
     * Gets the pending invitations for the organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgInvitationsListPendingTest() throws ApiException {
        String orgName = null;
        List<OrgInvitationsListPending200ResponseInner> response = api.orgInvitationsListPending(orgName);
        // TODO: test validations
    }

    /**
     * Rejects a pending organization invitation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgInvitationsRejectTest() throws ApiException {
        String invitationToken = null;
        Object body = null;
        api.orgInvitationsReject(invitationToken, body);
        // TODO: test validations
    }

    /**
     * Cancels an existing organization invitation for the user and sends a new one
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgInvitationsSendNewInvitationTest() throws ApiException {
        String orgName = null;
        String email = null;
        AppInvitationsCreateByEmailRequest appInvitationsCreateByEmailRequest = null;
        api.orgInvitationsSendNewInvitation(orgName, email, appInvitationsCreateByEmailRequest);
        // TODO: test validations
    }

    /**
     * Allows the role of an invited user to be changed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgInvitationsUpdateTest() throws ApiException {
        String orgName = null;
        String email = null;
        OrgInvitationsUpdateRequest orgInvitationsUpdateRequest = null;
        api.orgInvitationsUpdate(orgName, email, orgInvitationsUpdateRequest);
        // TODO: test validations
    }

    /**
     * Deletes the uploaded organization avatar
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organizationDeleteAvatarTest() throws ApiException {
        String orgName = null;
        OrganizationsListAdministered200ResponseOrganizations response = api.organizationDeleteAvatar(orgName);
        // TODO: test validations
    }

    /**
     * Sets the organization avatar
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organizationUpdateAvatarTest() throws ApiException {
        String orgName = null;
        File avatar = null;
        OrganizationsListAdministered200ResponseOrganizations response = api.organizationUpdateAvatar(orgName, avatar);
        // TODO: test validations
    }

    /**
     * Creates a new organization and returns it to the caller
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organizationsCreateOrUpdateTest() throws ApiException {
        OrganizationsCreateOrUpdateRequest organizationsCreateOrUpdateRequest = null;
        OrganizationsListAdministered200ResponseOrganizations response = api.organizationsCreateOrUpdate(organizationsCreateOrUpdateRequest);
        // TODO: test validations
    }

    /**
     * Deletes a single organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organizationsDeleteTest() throws ApiException {
        String orgName = null;
        api.organizationsDelete(orgName);
        // TODO: test validations
    }

    /**
     * Returns the details of a single organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organizationsGetTest() throws ApiException {
        String orgName = null;
        OrganizationsListAdministered200ResponseOrganizations response = api.organizationsGet(orgName);
        // TODO: test validations
    }

    /**
     * Returns a list of organizations the requesting user has access to
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organizationsListTest() throws ApiException {
        List<OrganizationsList200ResponseInner> response = api.organizationsList();
        // TODO: test validations
    }

    /**
     * Returns a list organizations in which the requesting user is an admin
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organizationsListAdministeredTest() throws ApiException {
        OrganizationsListAdministered200Response response = api.organizationsListAdministered();
        // TODO: test validations
    }

    /**
     * Returns a list of organizations the requesting user has access to
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organizationsUpdateTest() throws ApiException {
        String orgName = null;
        OrganizationsUpdateRequest organizationsUpdateRequest = null;
        OrganizationsListAdministered200ResponseOrganizations response = api.organizationsUpdate(orgName, organizationsUpdateRequest);
        // TODO: test validations
    }

    /**
     * Gets all service connections of the service type for GDPR export.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sharedconnectionConnectionsTest() throws ApiException {
        List<SharedconnectionConnections200ResponseInner> response = api.sharedconnectionConnections();
        // TODO: test validations
    }

    /**
     * Adds an app to a team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsAddAppTest() throws ApiException {
        String orgName = null;
        String teamName = null;
        DistributionGroupsAddAppsRequestAppsInner distributionGroupsAddAppsRequestAppsInner = null;
        TeamsListApps200ResponseInner response = api.teamsAddApp(orgName, teamName, distributionGroupsAddAppsRequestAppsInner);
        // TODO: test validations
    }

    /**
     * Adds a new user to a team that is owned by an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsAddUserTest() throws ApiException {
        String orgName = null;
        String teamName = null;
        OrgInvitationsDeleteRequest orgInvitationsDeleteRequest = null;
        TeamsGetUsers200Response response = api.teamsAddUser(orgName, teamName, orgInvitationsDeleteRequest);
        // TODO: test validations
    }

    /**
     * Creates a team and returns it
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsCreateTeamTest() throws ApiException {
        String orgName = null;
        TeamsCreateTeamRequest teamsCreateTeamRequest = null;
        List<TeamsListAll200ResponseInner> response = api.teamsCreateTeam(orgName, teamsCreateTeamRequest);
        // TODO: test validations
    }

    /**
     * Deletes a single team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsDeleteTest() throws ApiException {
        String orgName = null;
        String teamName = null;
        api.teamsDelete(orgName, teamName);
        // TODO: test validations
    }

    /**
     * Returns the details of a single team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsGetTeamTest() throws ApiException {
        String orgName = null;
        String teamName = null;
        TeamsListAll200ResponseInner response = api.teamsGetTeam(orgName, teamName);
        // TODO: test validations
    }

    /**
     * Returns the users of a team which is owned by an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsGetUsersTest() throws ApiException {
        String orgName = null;
        String teamName = null;
        TeamsGetUsers200Response response = api.teamsGetUsers(orgName, teamName);
        // TODO: test validations
    }

    /**
     * Returns the list of all teams in this org
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsListAllTest() throws ApiException {
        String orgName = null;
        List<TeamsListAll200ResponseInner> response = api.teamsListAll(orgName);
        // TODO: test validations
    }

    /**
     * Returns the apps a team has access to
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsListAppsTest() throws ApiException {
        String orgName = null;
        String teamName = null;
        List<TeamsListApps200ResponseInner> response = api.teamsListApps(orgName, teamName);
        // TODO: test validations
    }

    /**
     * Removes an app from a team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsRemoveAppTest() throws ApiException {
        String orgName = null;
        String teamName = null;
        String appName = null;
        api.teamsRemoveApp(orgName, teamName, appName);
        // TODO: test validations
    }

    /**
     * Removes a user from a team that is owned by an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsRemoveUserTest() throws ApiException {
        String orgName = null;
        String teamName = null;
        String userName = null;
        api.teamsRemoveUser(orgName, teamName, userName);
        // TODO: test validations
    }

    /**
     * Updates a single team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsUpdateTest() throws ApiException {
        String orgName = null;
        String teamName = null;
        TeamsUpdateRequest teamsUpdateRequest = null;
        TeamsListAll200ResponseInner response = api.teamsUpdate(orgName, teamName, teamsUpdateRequest);
        // TODO: test validations
    }

    /**
     * Updates the permissions the team has to the app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsUpdatePermissionsTest() throws ApiException {
        String orgName = null;
        String teamName = null;
        String appName = null;
        TeamsUpdatePermissionsRequest teamsUpdatePermissionsRequest = null;
        TeamsListApps200ResponseInner response = api.teamsUpdatePermissions(orgName, teamName, appName, teamsUpdatePermissionsRequest);
        // TODO: test validations
    }

    /**
     * Delete the user api_token object with the specific id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userApiTokensDeleteTest() throws ApiException {
        String apiTokenId = null;
        api.userApiTokensDelete(apiTokenId);
        // TODO: test validations
    }

    /**
     * Returns api tokens for the authenticated user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userApiTokensListTest() throws ApiException {
        List<UserApiTokensList200ResponseInner> response = api.userApiTokensList();
        // TODO: test validations
    }

    /**
     * Creates a new User API token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userApiTokensNewTest() throws ApiException {
        UserApiTokensNewRequest userApiTokensNewRequest = null;
        UserApiTokensNew201Response response = api.userApiTokensNew(userApiTokensNewRequest);
        // TODO: test validations
    }

    /**
     * Returns the user profile data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGetTest() throws ApiException {
        AppInvitationsList200ResponseInvitedBy response = api.usersGet();
        // TODO: test validations
    }

    /**
     * Get a user information from an organization by name - if there is explicit permission return it, if not if not return highest implicit permission
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGetForOrgTest() throws ApiException {
        String orgName = null;
        String userName = null;
        UsersListForOrg200ResponseInner response = api.usersGetForOrg(orgName, userName);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGetUserMetadataTest() throws ApiException {
        UsersGetUserMetadata200Response response = api.usersGetUserMetadata();
        // TODO: test validations
    }

    /**
     * Returns the users associated with the app specified with the given app name which belongs to the given owner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersListTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        List<AppInvitationsList200ResponseInvitedBy> response = api.usersList(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Returns a list of users that belong to an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersListForOrgTest() throws ApiException {
        String orgName = null;
        List<UsersListForOrg200ResponseInner> response = api.usersListForOrg(orgName);
        // TODO: test validations
    }

    /**
     * Removes a user from an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersRemoveFromOrgTest() throws ApiException {
        String orgName = null;
        String userName = null;
        api.usersRemoveFromOrg(orgName, userName);
        // TODO: test validations
    }

    /**
     * Updates the user profile and returns the updated user data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUpdateTest() throws ApiException {
        UsersUpdateRequest usersUpdateRequest = null;
        AppInvitationsList200ResponseInvitedBy response = api.usersUpdate(usersUpdateRequest);
        // TODO: test validations
    }

    /**
     * Updates the given organization user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUpdateOrgRoleTest() throws ApiException {
        String orgName = null;
        String userName = null;
        OrgInvitationsUpdateRequest orgInvitationsUpdateRequest = null;
        UsersListForOrg200ResponseInner response = api.usersUpdateOrgRole(orgName, userName, orgInvitationsUpdateRequest);
        // TODO: test validations
    }

}
