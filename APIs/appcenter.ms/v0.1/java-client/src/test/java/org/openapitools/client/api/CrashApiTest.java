/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BranchConfigurationsDelete200Response;
import org.openapitools.client.model.Crash;
import org.openapitools.client.model.CrashGroupsList200Response;
import org.openapitools.client.model.CrashGroupsList200ResponseCrashGroupsInner;
import org.openapitools.client.model.CrashGroupsUpdateRequest;
import org.openapitools.client.model.CrashesDelete200Response;
import org.openapitools.client.model.CrashesGetAppCrashesInfo200Response;
import org.openapitools.client.model.CrashesGetAppVersions200ResponseInner;
import org.openapitools.client.model.CrashesGetCrashAttachmentLocation200Response;
import org.openapitools.client.model.CrashesGetRawCrashLocation200Response;
import org.openapitools.client.model.CrashesListAttachments200ResponseInner;
import org.openapitools.client.model.MissingSymbolGroupsInfo200Response;
import org.openapitools.client.model.MissingSymbolGroupsList200Response;
import org.openapitools.client.model.MissingSymbolGroupsListDefaultResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Stacktrace;
import org.openapitools.client.model.SymbolUploadsCompleteRequest;
import org.openapitools.client.model.SymbolUploadsCreate200Response;
import org.openapitools.client.model.SymbolUploadsCreateRequest;
import org.openapitools.client.model.SymbolUploadsGetLocation200Response;
import org.openapitools.client.model.SymbolUploadsList200ResponseInner;
import org.openapitools.client.model.SymbolsGetLocation200Response;
import org.openapitools.client.model.SymbolsGetStatus200Response;
import org.openapitools.client.model.SymbolsList200ResponseInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CrashApi
 */
@Disabled
public class CrashApiTest {

    private final CrashApi api = new CrashApi();

    /**
     * Gets a specific group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void crashGroupsGetTest() throws ApiException {
        String crashGroupId = null;
        String ownerName = null;
        String appName = null;
        CrashGroupsList200ResponseCrashGroupsInner response = api.crashGroupsGet(crashGroupId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Gets a stacktrace for a specific crash.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void crashGroupsGetStacktraceTest() throws ApiException {
        String crashGroupId = null;
        String ownerName = null;
        String appName = null;
        Boolean groupingOnly = null;
        Stacktrace response = api.crashGroupsGetStacktrace(crashGroupId, ownerName, appName, groupingOnly);
        // TODO: test validations
    }

    /**
     * Gets a list of crash groups and whether the list contains all available groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void crashGroupsListTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        OffsetDateTime lastOccurrenceFrom = null;
        OffsetDateTime lastOccurrenceTo = null;
        String appVersion = null;
        String groupType = null;
        String groupStatus = null;
        String groupTextSearch = null;
        String $orderby = null;
        String continuationToken = null;
        CrashGroupsList200Response response = api.crashGroupsList(ownerName, appName, lastOccurrenceFrom, lastOccurrenceTo, appVersion, groupType, groupStatus, groupTextSearch, $orderby, continuationToken);
        // TODO: test validations
    }

    /**
     * Updates a group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void crashGroupsUpdateTest() throws ApiException {
        String crashGroupId = null;
        String ownerName = null;
        String appName = null;
        CrashGroupsUpdateRequest crashGroupsUpdateRequest = null;
        CrashGroupsList200ResponseCrashGroupsInner response = api.crashGroupsUpdate(crashGroupId, ownerName, appName, crashGroupsUpdateRequest);
        // TODO: test validations
    }

    /**
     * Delete a specific crash and related attachments and blobs for an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void crashesDeleteTest() throws ApiException {
        String crashGroupId = null;
        String crashId = null;
        String ownerName = null;
        String appName = null;
        Boolean retentionDelete = null;
        CrashesDelete200Response response = api.crashesDelete(crashGroupId, crashId, ownerName, appName, retentionDelete);
        // TODO: test validations
    }

    /**
     * Gets a specific crash for an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void crashesGetTest() throws ApiException {
        String crashGroupId = null;
        String crashId = null;
        String ownerName = null;
        String appName = null;
        Boolean includeReport = null;
        Boolean includeLog = null;
        Boolean includeDetails = null;
        Boolean includeStacktrace = null;
        Boolean groupingOnly = null;
        Crash response = api.crashesGet(crashGroupId, crashId, ownerName, appName, includeReport, includeLog, includeDetails, includeStacktrace, groupingOnly);
        // TODO: test validations
    }

    /**
     * Gets whether the application has any crashes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void crashesGetAppCrashesInfoTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        CrashesGetAppCrashesInfo200Response response = api.crashesGetAppCrashesInfo(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Gets a list of application versions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void crashesGetAppVersionsTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        List<CrashesGetAppVersions200ResponseInner> response = api.crashesGetAppVersions(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Gets the URI location to download crash attachment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void crashesGetCrashAttachmentLocationTest() throws ApiException {
        String crashId = null;
        String attachmentId = null;
        String ownerName = null;
        String appName = null;
        CrashesGetCrashAttachmentLocation200Response response = api.crashesGetCrashAttachmentLocation(crashId, attachmentId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Gets content of the text attachment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void crashesGetCrashTextAttachmentContentTest() throws ApiException {
        String crashId = null;
        String attachmentId = null;
        String ownerName = null;
        String appName = null;
        String response = api.crashesGetCrashTextAttachmentContent(crashId, attachmentId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Gets the native log of a specific crash.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void crashesGetNativeCrashTest() throws ApiException {
        String crashGroupId = null;
        String crashId = null;
        String ownerName = null;
        String appName = null;
        String response = api.crashesGetNativeCrash(crashGroupId, crashId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Gets the native log of a specific crash as a text attachment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void crashesGetNativeCrashDownloadTest() throws ApiException {
        String crashGroupId = null;
        String crashId = null;
        String ownerName = null;
        String appName = null;
        String response = api.crashesGetNativeCrashDownload(crashGroupId, crashId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Gets the URI location to download json of a specific crash.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void crashesGetRawCrashLocationTest() throws ApiException {
        String crashGroupId = null;
        String crashId = null;
        String ownerName = null;
        String appName = null;
        CrashesGetRawCrashLocation200Response response = api.crashesGetRawCrashLocation(crashGroupId, crashId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Gets a stacktrace for a specific crash.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void crashesGetStacktraceTest() throws ApiException {
        String crashGroupId = null;
        String crashId = null;
        String ownerName = null;
        String appName = null;
        Boolean groupingOnly = null;
        Stacktrace response = api.crashesGetStacktrace(crashGroupId, crashId, ownerName, appName, groupingOnly);
        // TODO: test validations
    }

    /**
     * Gets all crashes of a group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void crashesListTest() throws ApiException {
        String crashGroupId = null;
        String ownerName = null;
        String appName = null;
        Boolean includeReport = null;
        Boolean includeLog = null;
        OffsetDateTime dateFrom = null;
        OffsetDateTime dateTo = null;
        String appVersion = null;
        String errorType = null;
        List<Crash> response = api.crashesList(crashGroupId, ownerName, appName, includeReport, includeLog, dateFrom, dateTo, appVersion, errorType);
        // TODO: test validations
    }

    /**
     * Gets all attachments for a specific crash.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void crashesListAttachmentsTest() throws ApiException {
        String crashId = null;
        String ownerName = null;
        String appName = null;
        List<CrashesListAttachments200ResponseInner> response = api.crashesListAttachments(crashId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Gets missing symbol crash group by its id
     *
     * Gets missing symbol crash group by its id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void missingSymbolGroupsGetTest() throws ApiException {
        String symbolGroupId = null;
        String ownerName = null;
        String appName = null;
        MissingSymbolGroupsList200Response response = api.missingSymbolGroupsGet(symbolGroupId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Gets application level statistics for all missing symbol groups
     *
     * Gets application level statistics for all missing symbol groups
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void missingSymbolGroupsInfoTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        MissingSymbolGroupsInfo200Response response = api.missingSymbolGroupsInfo(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Gets top N (ordered by crash count) of crash groups by missing symbol
     *
     * Gets top N (ordered by crash count) of crash groups by missing symbol
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void missingSymbolGroupsListTest() throws ApiException {
        Integer top = null;
        String ownerName = null;
        String appName = null;
        MissingSymbolGroupsList200Response response = api.missingSymbolGroupsList(top, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Commits or aborts the symbol upload process for a new set of symbols for the specified application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void symbolUploadsCompleteTest() throws ApiException {
        String symbolUploadId = null;
        String ownerName = null;
        String appName = null;
        SymbolUploadsCompleteRequest symbolUploadsCompleteRequest = null;
        SymbolUploadsList200ResponseInner response = api.symbolUploadsComplete(symbolUploadId, ownerName, appName, symbolUploadsCompleteRequest);
        // TODO: test validations
    }

    /**
     * Begins the symbol upload process for a new set of symbols for the specified application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void symbolUploadsCreateTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        SymbolUploadsCreateRequest symbolUploadsCreateRequest = null;
        SymbolUploadsCreate200Response response = api.symbolUploadsCreate(ownerName, appName, symbolUploadsCreateRequest);
        // TODO: test validations
    }

    /**
     * Deletes a symbol upload by id for the specified application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void symbolUploadsDeleteTest() throws ApiException {
        String symbolUploadId = null;
        String ownerName = null;
        String appName = null;
        SymbolUploadsList200ResponseInner response = api.symbolUploadsDelete(symbolUploadId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Gets a symbol upload by id for the specified application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void symbolUploadsGetTest() throws ApiException {
        String symbolUploadId = null;
        String ownerName = null;
        String appName = null;
        SymbolUploadsList200ResponseInner response = api.symbolUploadsGet(symbolUploadId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Gets the URL to download the symbol upload
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void symbolUploadsGetLocationTest() throws ApiException {
        String symbolUploadId = null;
        String ownerName = null;
        String appName = null;
        SymbolUploadsGetLocation200Response response = api.symbolUploadsGetLocation(symbolUploadId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Gets a list of all uploads for the specified application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void symbolUploadsListTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        Long top = null;
        String status = null;
        String symbolType = null;
        List<SymbolUploadsList200ResponseInner> response = api.symbolUploadsList(ownerName, appName, top, status, symbolType);
        // TODO: test validations
    }

    /**
     * Returns a particular symbol by id (uuid) for the provided application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void symbolsGetTest() throws ApiException {
        String symbolId = null;
        String ownerName = null;
        String appName = null;
        SymbolsList200ResponseInner response = api.symbolsGet(symbolId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Gets the URL to download the symbol
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void symbolsGetLocationTest() throws ApiException {
        String symbolId = null;
        String ownerName = null;
        String appName = null;
        SymbolsGetLocation200Response response = api.symbolsGetLocation(symbolId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Returns a particular symbol by id (uuid) for the provided application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void symbolsGetStatusTest() throws ApiException {
        String symbolId = null;
        String ownerName = null;
        String appName = null;
        SymbolsGetStatus200Response response = api.symbolsGetStatus(symbolId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Marks a symbol by id (uuid) as ignored
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void symbolsIgnoreTest() throws ApiException {
        String symbolId = null;
        String ownerName = null;
        String appName = null;
        SymbolsList200ResponseInner response = api.symbolsIgnore(symbolId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Returns the list of all symbols for the provided application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void symbolsListTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        List<SymbolsList200ResponseInner> response = api.symbolsList(ownerName, appName);
        // TODO: test validations
    }

}
