/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AppleMappingCreateRequest;
import org.openapitools.client.model.AppleMappingGet200Response;
import org.openapitools.client.model.AppleMappingTestFlightGroups200ResponseInner;
import java.math.BigDecimal;
import org.openapitools.client.model.DevicesGetReleaseUpdateDevicesStatus200Response;
import org.openapitools.client.model.DevicesList200ResponseInner;
import org.openapitools.client.model.DevicesRegisterUserForDeviceRequest;
import org.openapitools.client.model.DistibutionReleasesInstallAnalyticsRequest;
import org.openapitools.client.model.OrganizationsListAdministeredDefaultResponseError;
import org.openapitools.client.model.ProvisioningProfileResponse;
import org.openapitools.client.model.ReleasesAddDistributionGroup201Response;
import org.openapitools.client.model.ReleasesAddDistributionGroupRequest;
import org.openapitools.client.model.ReleasesAddStore201Response;
import org.openapitools.client.model.ReleasesAddStoreRequest;
import org.openapitools.client.model.ReleasesAddTestersRequest;
import org.openapitools.client.model.ReleasesCreateReleaseUpload201Response;
import org.openapitools.client.model.ReleasesCreateReleaseUploadRequest;
import org.openapitools.client.model.ReleasesGetLatestByDistributionGroup200Response;
import org.openapitools.client.model.ReleasesGetPublicGroupsForReleaseByHash200ResponseInner;
import org.openapitools.client.model.ReleasesGetReleaseUploadStatus200Response;
import org.openapitools.client.model.ReleasesListByDistributionGroup200ResponseInner;
import org.openapitools.client.model.ReleasesListLatest200ResponseInner;
import org.openapitools.client.model.ReleasesPutDistributionGroupRequest;
import org.openapitools.client.model.ReleasesUpdate200Response;
import org.openapitools.client.model.ReleasesUpdateDetails200Response;
import org.openapitools.client.model.ReleasesUpdateDetails400Response;
import org.openapitools.client.model.ReleasesUpdateDetailsRequest;
import org.openapitools.client.model.ReleasesUpdateReleaseUploadStatus200Response;
import org.openapitools.client.model.ReleasesUpdateReleaseUploadStatusRequest;
import org.openapitools.client.model.ReleasesUpdateRequest;
import org.openapitools.client.model.StoreNotificationsGetNotificationByAppId200Response;
import org.openapitools.client.model.StoreReleasesGetLatest200ResponseInner;
import org.openapitools.client.model.StoreReleasesGetPublishError200Response;
import org.openapitools.client.model.StoreReleasesGetRealTimeStatusByReleaseId200Response;
import org.openapitools.client.model.StoreReleasesList200ResponseInner;
import org.openapitools.client.model.StoresCreateRequest;
import org.openapitools.client.model.StoresList200ResponseInner;
import org.openapitools.client.model.StoresPatchRequest;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DistributeApi
 */
@Disabled
public class DistributeApiTest {

    private final DistributeApi api = new DistributeApi();

    /**
     * Create a mapping for an existing app in apple store for the specified application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appleMappingCreateTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        AppleMappingCreateRequest appleMappingCreateRequest = null;
        AppleMappingGet200Response response = api.appleMappingCreate(ownerName, appName, appleMappingCreateRequest);
        // TODO: test validations
    }

    /**
     * Delete mapping of apple app to an existing app in apple store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appleMappingDeleteTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        String body = null;
        api.appleMappingDelete(ownerName, appName, body);
        // TODO: test validations
    }

    /**
     * Get mapping of apple app to an existing app in apple store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appleMappingGetTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        AppleMappingGet200Response response = api.appleMappingGet(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Fetch all apple test flight groups
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appleMappingTestFlightGroupsTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        List<AppleMappingTestFlightGroups200ResponseInner> response = api.appleMappingTestFlightGroups(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Returns the device details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesDeviceDetailsTest() throws ApiException {
        String deviceUdid = null;
        DevicesList200ResponseInner response = api.devicesDeviceDetails(deviceUdid);
        // TODO: test validations
    }

    /**
     * Returns the resign status to the caller
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetReleaseUpdateDevicesStatusTest() throws ApiException {
        String releaseId = null;
        String resignId = null;
        String ownerName = null;
        String appName = null;
        Boolean includeProvisioningProfile = null;
        DevicesGetReleaseUpdateDevicesStatus200Response response = api.devicesGetReleaseUpdateDevicesStatus(releaseId, resignId, ownerName, appName, includeProvisioningProfile);
        // TODO: test validations
    }

    /**
     * Returns all devices associated with the given distribution group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesListTest() throws ApiException {
        String distributionGroupName = null;
        String ownerName = null;
        String appName = null;
        BigDecimal releaseId = null;
        List<DevicesList200ResponseInner> response = api.devicesList(distributionGroupName, ownerName, appName, releaseId);
        // TODO: test validations
    }

    /**
     * Returns all devices associated with the given distribution group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesListCsvFormatTest() throws ApiException {
        String distributionGroupName = null;
        String ownerName = null;
        String appName = null;
        Boolean unprovisionedOnly = null;
        List<String> udids = null;
        api.devicesListCsvFormat(distributionGroupName, ownerName, appName, unprovisionedOnly, udids);
        // TODO: test validations
    }

    /**
     * Registers a user for an existing device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesRegisterUserForDeviceTest() throws ApiException {
        String userId = null;
        DevicesRegisterUserForDeviceRequest devicesRegisterUserForDeviceRequest = null;
        DevicesList200ResponseInner response = api.devicesRegisterUserForDevice(userId, devicesRegisterUserForDeviceRequest);
        // TODO: test validations
    }

    /**
     * Removes an existing device from a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesRemoveUserDeviceTest() throws ApiException {
        String deviceUdid = null;
        api.devicesRemoveUserDevice(deviceUdid);
        // TODO: test validations
    }

    /**
     * Returns all devices associated with the given user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesUserDevicesListTest() throws ApiException {
        List<DevicesList200ResponseInner> response = api.devicesUserDevicesList();
        // TODO: test validations
    }

    /**
     * Notify download(s) for the provided distribution release(s).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distibutionReleasesInstallAnalyticsTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        DistibutionReleasesInstallAnalyticsRequest distibutionReleasesInstallAnalyticsRequest = null;
        api.distibutionReleasesInstallAnalytics(ownerName, appName, distibutionReleasesInstallAnalyticsRequest);
        // TODO: test validations
    }

    /**
     * Return information about the provisioning profile. Only available for iOS.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void provisioningProfileTest() throws ApiException {
        Integer releaseId = null;
        String ownerName = null;
        String appName = null;
        ProvisioningProfileResponse response = api.provisioningProfile(releaseId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Distributes a release to a group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesAddDistributionGroupTest() throws ApiException {
        Integer releaseId = null;
        String ownerName = null;
        String appName = null;
        ReleasesAddDistributionGroupRequest releasesAddDistributionGroupRequest = null;
        ReleasesAddDistributionGroup201Response response = api.releasesAddDistributionGroup(releaseId, ownerName, appName, releasesAddDistributionGroupRequest);
        // TODO: test validations
    }

    /**
     * Distributes a release to a store
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesAddStoreTest() throws ApiException {
        Integer releaseId = null;
        String ownerName = null;
        String appName = null;
        ReleasesAddStoreRequest releasesAddStoreRequest = null;
        ReleasesAddStore201Response response = api.releasesAddStore(releaseId, ownerName, appName, releasesAddStoreRequest);
        // TODO: test validations
    }

    /**
     * Distributes a release to a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesAddTestersTest() throws ApiException {
        Integer releaseId = null;
        String ownerName = null;
        String appName = null;
        ReleasesAddTestersRequest releasesAddTestersRequest = null;
        ReleasesAddDistributionGroup201Response response = api.releasesAddTesters(releaseId, ownerName, appName, releasesAddTestersRequest);
        // TODO: test validations
    }

    /**
     * Return detailed information about releases avaiable to a tester.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesAvailableToTesterTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        Boolean publishedOnly = null;
        List<ReleasesListLatest200ResponseInner> response = api.releasesAvailableToTester(ownerName, appName, publishedOnly);
        // TODO: test validations
    }

    /**
     * Initiate a new release upload. This API is part of multi-step upload process.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesCreateReleaseUploadTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        ReleasesCreateReleaseUploadRequest releasesCreateReleaseUploadRequest = null;
        ReleasesCreateReleaseUpload201Response response = api.releasesCreateReleaseUpload(ownerName, appName, releasesCreateReleaseUploadRequest);
        // TODO: test validations
    }

    /**
     * Deletes a release.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesDeleteTest() throws ApiException {
        Integer releaseId = null;
        String ownerName = null;
        String appName = null;
        api.releasesDelete(releaseId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Delete the given distribution group from the release
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesDeleteDistributionGroupTest() throws ApiException {
        Integer releaseId = null;
        String groupId = null;
        String ownerName = null;
        String appName = null;
        api.releasesDeleteDistributionGroup(releaseId, groupId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Delete the given distribution store from the release
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesDeleteDistributionStoreTest() throws ApiException {
        Integer releaseId = null;
        String storeId = null;
        String ownerName = null;
        String appName = null;
        api.releasesDeleteDistributionStore(releaseId, storeId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Delete the given tester from the release
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesDeleteDistributionTesterTest() throws ApiException {
        Integer releaseId = null;
        String testerId = null;
        String ownerName = null;
        String appName = null;
        api.releasesDeleteDistributionTester(releaseId, testerId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Delete the given tester from the all releases
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesDeleteTesterFromDestinationsTest() throws ApiException {
        String testerId = null;
        String ownerName = null;
        String appName = null;
        api.releasesDeleteTesterFromDestinations(testerId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Deletes a release with id &#39;release_id&#39; in a given distribution group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesDeleteWithDistributionGroupIdTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        String distributionGroupName = null;
        Integer releaseId = null;
        api.releasesDeleteWithDistributionGroupId(ownerName, appName, distributionGroupName, releaseId);
        // TODO: test validations
    }

    /**
     * Returns the manifest.plist in XML format for installing the release on a device. Only available for iOS.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesGetIosManifestTest() throws ApiException {
        String appId = null;
        Integer releaseId = null;
        String token = null;
        api.releasesGetIosManifest(appId, releaseId, token);
        // TODO: test validations
    }

    /**
     * Return detailed information about a distributed release in a given distribution group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesGetLatestByDistributionGroupTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        String distributionGroupName = null;
        String releaseId = null;
        Boolean isInstallPage = null;
        ReleasesGetLatestByDistributionGroup200Response response = api.releasesGetLatestByDistributionGroup(ownerName, appName, distributionGroupName, releaseId, isInstallPage);
        // TODO: test validations
    }

    /**
     * If &#39;latest&#39; is not specified then it will return the specified release if it&#39;s enabled. If &#39;latest&#39; is specified, regardless of whether a release hash is provided, the latest enabled release is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesGetLatestByHashTest() throws ApiException {
        String appSecret = null;
        String releaseHash = null;
        String udid = null;
        ReleasesGetLatestByDistributionGroup200Response response = api.releasesGetLatestByHash(appSecret, releaseHash, udid);
        // TODO: test validations
    }

    /**
     * Get a release with &#39;latest&#39; for the given public group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesGetLatestByPublicDistributionGroupTest() throws ApiException {
        String appSecret = null;
        String distributionGroupId = null;
        Boolean isInstallPage = null;
        ReleasesGetLatestByDistributionGroup200Response response = api.releasesGetLatestByPublicDistributionGroup(appSecret, distributionGroupId, isInstallPage);
        // TODO: test validations
    }

    /**
     * Get a release with id &#x60;release_id&#x60;. If &#x60;release_id&#x60; is &#x60;latest&#x60;, return the latest release that was distributed to the current user (from all the distribution groups).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesGetLatestByUserTest() throws ApiException {
        String releaseId = null;
        String ownerName = null;
        String appName = null;
        String udid = null;
        Boolean isInstallPage = null;
        ReleasesGetLatestByDistributionGroup200Response response = api.releasesGetLatestByUser(releaseId, ownerName, appName, udid, isInstallPage);
        // TODO: test validations
    }

    /**
     * Get the latest release distributed to a private group the given user is a member of for the given app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesGetLatestPrivateReleaseTest() throws ApiException {
        String appSecret = null;
        String udid = null;
        ReleasesGetLatestByDistributionGroup200Response response = api.releasesGetLatestPrivateRelease(appSecret, udid);
        // TODO: test validations
    }

    /**
     * Get the latest public release for the given app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesGetLatestPublicReleaseTest() throws ApiException {
        String appSecret = null;
        ReleasesGetLatestByDistributionGroup200Response response = api.releasesGetLatestPublicRelease(appSecret);
        // TODO: test validations
    }

    /**
     * Get all public distribution groups that a given release has been distributed to
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesGetPublicGroupsForReleaseByHashTest() throws ApiException {
        String appSecret = null;
        String releaseHash = null;
        List<ReleasesGetPublicGroupsForReleaseByHash200ResponseInner> response = api.releasesGetPublicGroupsForReleaseByHash(appSecret, releaseHash);
        // TODO: test validations
    }

    /**
     * Get the current status of the release upload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesGetReleaseUploadStatusTest() throws ApiException {
        UUID uploadId = null;
        String ownerName = null;
        String appName = null;
        ReleasesGetReleaseUploadStatus200Response response = api.releasesGetReleaseUploadStatus(uploadId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Gets the sparkle feed of the releases that are distributed to all the public distribution groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesGetSparkleFeedTest() throws ApiException {
        String appSecret = null;
        api.releasesGetSparkleFeed(appSecret);
        // TODO: test validations
    }

    /**
     * Return basic information about releases.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesListTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        Boolean publishedOnly = null;
        String scope = null;
        BigDecimal top = null;
        BigDecimal releaseId = null;
        List<ReleasesListLatest200ResponseInner> response = api.releasesList(ownerName, appName, publishedOnly, scope, top, releaseId);
        // TODO: test validations
    }

    /**
     * Return basic information about distributed releases in a given distribution group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesListByDistributionGroupTest() throws ApiException {
        String distributionGroupName = null;
        String ownerName = null;
        String appName = null;
        List<ReleasesListByDistributionGroup200ResponseInner> response = api.releasesListByDistributionGroup(distributionGroupName, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Get the latest release from every distribution group associated with an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesListLatestTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        List<ReleasesListLatest200ResponseInner> response = api.releasesListLatest(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Update details about the specified distribution group associated with the release
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesPutDistributionGroupTest() throws ApiException {
        Integer releaseId = null;
        UUID groupId = null;
        String ownerName = null;
        String appName = null;
        ReleasesPutDistributionGroupRequest releasesPutDistributionGroupRequest = null;
        api.releasesPutDistributionGroup(releaseId, groupId, ownerName, appName, releasesPutDistributionGroupRequest);
        // TODO: test validations
    }

    /**
     * Update details about the specified tester associated with the release
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesPutDistributionTesterTest() throws ApiException {
        Integer releaseId = null;
        UUID testerId = null;
        String ownerName = null;
        String appName = null;
        ReleasesPutDistributionGroupRequest releasesPutDistributionGroupRequest = null;
        api.releasesPutDistributionTester(releaseId, testerId, ownerName, appName, releasesPutDistributionGroupRequest);
        // TODO: test validations
    }

    /**
     * Updates a release.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesUpdateTest() throws ApiException {
        Integer releaseId = null;
        String ownerName = null;
        String appName = null;
        ReleasesUpdateRequest releasesUpdateRequest = null;
        ReleasesUpdate200Response response = api.releasesUpdate(releaseId, ownerName, appName, releasesUpdateRequest);
        // TODO: test validations
    }

    /**
     * Update details of a release.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesUpdateDetailsTest() throws ApiException {
        Integer releaseId = null;
        String ownerName = null;
        String appName = null;
        ReleasesUpdateDetailsRequest releasesUpdateDetailsRequest = null;
        ReleasesUpdateDetails200Response response = api.releasesUpdateDetails(releaseId, ownerName, appName, releasesUpdateDetailsRequest);
        // TODO: test validations
    }

    /**
     * Update the current status of the release upload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasesUpdateReleaseUploadStatusTest() throws ApiException {
        UUID uploadId = null;
        String ownerName = null;
        String appName = null;
        ReleasesUpdateReleaseUploadStatusRequest releasesUpdateReleaseUploadStatusRequest = null;
        Boolean extract = null;
        ReleasesUpdateReleaseUploadStatus200Response response = api.releasesUpdateReleaseUploadStatus(uploadId, ownerName, appName, releasesUpdateReleaseUploadStatusRequest, extract);
        // TODO: test validations
    }

    /**
     * Application specific store service status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storeNotificationsGetNotificationByAppIdTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        StoreNotificationsGetNotificationByAppId200Response response = api.storeNotificationsGetNotificationByAppId(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Returns publish logs for a particular release published to a particular store
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storeReleasePublishLogsGetTest() throws ApiException {
        String storeName = null;
        String releaseId = null;
        String ownerName = null;
        String appName = null;
        api.storeReleasePublishLogsGet(storeName, releaseId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * delete the release with release Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storeReleasesDeleteTest() throws ApiException {
        String storeName = null;
        String releaseId = null;
        String ownerName = null;
        String appName = null;
        String body = null;
        api.storeReleasesDelete(storeName, releaseId, ownerName, appName, body);
        // TODO: test validations
    }

    /**
     * Return releases published in a store for releaseId and storeId
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storeReleasesGetTest() throws ApiException {
        String storeName = null;
        String releaseId = null;
        String ownerName = null;
        String appName = null;
        List<StoreReleasesGetLatest200ResponseInner> response = api.storeReleasesGet(storeName, releaseId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Returns the latest release published in a store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storeReleasesGetLatestTest() throws ApiException {
        String storeName = null;
        String ownerName = null;
        String appName = null;
        List<StoreReleasesGetLatest200ResponseInner> response = api.storeReleasesGetLatest(storeName, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Return the Error Details of release which failed in publishing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storeReleasesGetPublishErrorTest() throws ApiException {
        String storeName = null;
        BigDecimal releaseId = null;
        String ownerName = null;
        String appName = null;
        StoreReleasesGetPublishError200Response response = api.storeReleasesGetPublishError(storeName, releaseId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Return the Real time Status publishing of release from store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storeReleasesGetRealTimeStatusByReleaseIdTest() throws ApiException {
        String storeName = null;
        BigDecimal releaseId = null;
        String ownerName = null;
        String appName = null;
        StoreReleasesGetRealTimeStatusByReleaseId200Response response = api.storeReleasesGetRealTimeStatusByReleaseId(storeName, releaseId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Return all releases published  in a store
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storeReleasesListTest() throws ApiException {
        String storeName = null;
        String ownerName = null;
        String appName = null;
        List<StoreReleasesList200ResponseInner> response = api.storeReleasesList(storeName, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Create a new external store for the specified application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storesCreateTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        StoresCreateRequest storesCreateRequest = null;
        StoresList200ResponseInner response = api.storesCreate(ownerName, appName, storesCreateRequest);
        // TODO: test validations
    }

    /**
     * delete the store based on specific store name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storesDeleteTest() throws ApiException {
        String storeName = null;
        String ownerName = null;
        String appName = null;
        String body = null;
        api.storesDelete(storeName, ownerName, appName, body);
        // TODO: test validations
    }

    /**
     * Return the store details for specified store name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storesGetTest() throws ApiException {
        String storeName = null;
        String ownerName = null;
        String appName = null;
        StoresList200ResponseInner response = api.storesGet(storeName, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Get all the store details from Storage store table for a particular application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storesListTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        List<StoresList200ResponseInner> response = api.storesList(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Update the store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storesPatchTest() throws ApiException {
        String storeName = null;
        String ownerName = null;
        String appName = null;
        StoresPatchRequest storesPatchRequest = null;
        api.storesPatch(storeName, ownerName, appName, storesPatchRequest);
        // TODO: test validations
    }

}
