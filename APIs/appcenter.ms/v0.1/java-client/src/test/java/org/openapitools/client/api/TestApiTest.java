/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DeviceList;
import org.openapitools.client.model.DeviceSelection;
import org.openapitools.client.model.DeviceSet;
import org.openapitools.client.model.DeviceSetUpdateInformation;
import org.openapitools.client.model.NameOfTheTestSeries;
import org.openapitools.client.model.Subscription1;
import org.openapitools.client.model.TestCloudErrorDetails;
import org.openapitools.client.model.TestCloudFileHash;
import org.openapitools.client.model.TestCloudFileHash1;
import org.openapitools.client.model.TestCloudFileHashResponse;
import org.openapitools.client.model.TestCloudStartTestRunOptions;
import org.openapitools.client.model.TestCloudTestRunStartResult;
import org.openapitools.client.model.TestGdprExportAccount200Response;
import org.openapitools.client.model.TestGdprExportAccounts200Response;
import org.openapitools.client.model.TestGdprExportApp200Response;
import org.openapitools.client.model.TestGdprExportFeatureFlag200Response;
import org.openapitools.client.model.TestGdprExportFileSetFile200Response;
import org.openapitools.client.model.TestGdprExportHashFile200Response;
import org.openapitools.client.model.TestGdprExportPipelineTest200Response;
import org.openapitools.client.model.TestGdprExportTestRun200Response;
import org.openapitools.client.model.TestGetDeviceConfigurations200ResponseInner;
import org.openapitools.client.model.TestGetTestReport200Response;
import org.openapitools.client.model.TestRun;
import org.openapitools.client.model.TestRunState;
import org.openapitools.client.model.TestSeries;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TestApi
 */
@Disabled
public class TestApiTest {

    private final TestApi api = new TestApi();

    /**
     * Logically deletes a test run
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testArchiveTestRunTest() throws ApiException {
        UUID testRunId = null;
        String ownerName = null;
        String appName = null;
        TestRun response = api.testArchiveTestRun(testRunId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Creates a short ID for a list of devices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testCreateDeviceSelectionTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        DeviceList deviceList = null;
        DeviceSelection response = api.testCreateDeviceSelection(ownerName, appName, deviceList);
        // TODO: test validations
    }

    /**
     * Creates a device set belonging to the owner
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testCreateDeviceSetOfOwnerTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        DeviceSetUpdateInformation deviceSetUpdateInformation = null;
        DeviceSet response = api.testCreateDeviceSetOfOwner(ownerName, appName, deviceSetUpdateInformation);
        // TODO: test validations
    }

    /**
     * Creates a device set belonging to the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testCreateDeviceSetOfUserTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        DeviceSetUpdateInformation deviceSetUpdateInformation = null;
        DeviceSet response = api.testCreateDeviceSetOfUser(ownerName, appName, deviceSetUpdateInformation);
        // TODO: test validations
    }

    /**
     * Accept a free trial subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testCreateSubscriptionTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        Subscription1 response = api.testCreateSubscription(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Creates a new test run
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testCreateTestRunTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        api.testCreateTestRun(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Creates new test series for an application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testCreateTestSeriesTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        NameOfTheTestSeries nameOfTheTestSeries = null;
        TestSeries response = api.testCreateTestSeries(ownerName, appName, nameOfTheTestSeries);
        // TODO: test validations
    }

    /**
     * Deletes a device set belonging to the owner
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testDeleteDeviceSetOfOwnerTest() throws ApiException {
        UUID id = null;
        String ownerName = null;
        String appName = null;
        api.testDeleteDeviceSetOfOwner(id, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Deletes a device set belonging to the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testDeleteDeviceSetOfUserTest() throws ApiException {
        UUID id = null;
        String ownerName = null;
        String appName = null;
        api.testDeleteDeviceSetOfUser(id, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Deletes a single test series
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testDeleteTestSeriesTest() throws ApiException {
        String testSeriesSlug = null;
        String ownerName = null;
        String appName = null;
        api.testDeleteTestSeries(testSeriesSlug, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Lists account data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testGdprExportAccountTest() throws ApiException {
        TestGdprExportAccount200Response response = api.testGdprExportAccount();
        // TODO: test validations
    }

    /**
     * Lists all the endpoints available for Test accounts data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testGdprExportAccountsTest() throws ApiException {
        TestGdprExportAccounts200Response response = api.testGdprExportAccounts();
        // TODO: test validations
    }

    /**
     * Lists app data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testGdprExportAppTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        TestGdprExportApp200Response response = api.testGdprExportApp(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Lists all the endpoints available for Test apps data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testGdprExportAppsTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        TestGdprExportAccounts200Response response = api.testGdprExportApps(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Lists feature flag data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testGdprExportFeatureFlagTest() throws ApiException {
        TestGdprExportFeatureFlag200Response response = api.testGdprExportFeatureFlag();
        // TODO: test validations
    }

    /**
     * Lists file set file data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testGdprExportFileSetFileTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        TestGdprExportFileSetFile200Response response = api.testGdprExportFileSetFile(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Lists hash file data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testGdprExportHashFileTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        TestGdprExportHashFile200Response response = api.testGdprExportHashFile(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Lists pipeline test data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testGdprExportPipelineTestTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        TestGdprExportPipelineTest200Response response = api.testGdprExportPipelineTest(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Lists test run data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testGdprExportTestRunTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        TestGdprExportTestRun200Response response = api.testGdprExportTestRun(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Returns list of all test runs for a given test series
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testGetAllTestRunsForSeriesTest() throws ApiException {
        String testSeriesSlug = null;
        String ownerName = null;
        String appName = null;
        List<TestRun> response = api.testGetAllTestRunsForSeries(testSeriesSlug, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Returns list of all test series for an application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testGetAllTestSeriesTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        String query = null;
        List<TestSeries> response = api.testGetAllTestSeries(ownerName, appName, query);
        // TODO: test validations
    }

    /**
     * Returns a list of available devices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testGetDeviceConfigurationsTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        UUID appUploadId = null;
        List<TestGetDeviceConfigurations200ResponseInner> response = api.testGetDeviceConfigurations(ownerName, appName, appUploadId);
        // TODO: test validations
    }

    /**
     * Gets a device set belonging to the owner
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testGetDeviceSetOfOwnerTest() throws ApiException {
        UUID id = null;
        String ownerName = null;
        String appName = null;
        DeviceSet response = api.testGetDeviceSetOfOwner(id, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Gets a device set belonging to the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testGetDeviceSetOfUserTest() throws ApiException {
        UUID id = null;
        String ownerName = null;
        String appName = null;
        DeviceSet response = api.testGetDeviceSetOfUser(id, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Get information about the currently active subscriptions, if any
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testGetSubscriptionsTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        Subscription1 response = api.testGetSubscriptions(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Returns a single test report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testGetTestReportTest() throws ApiException {
        UUID testRunId = null;
        String ownerName = null;
        String appName = null;
        TestGetTestReport200Response response = api.testGetTestReport(testRunId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Returns a single test runs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testGetTestRunTest() throws ApiException {
        UUID testRunId = null;
        String ownerName = null;
        String appName = null;
        TestRun response = api.testGetTestRun(testRunId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Gets state of the test run
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testGetTestRunStateTest() throws ApiException {
        String testRunId = null;
        String ownerName = null;
        String appName = null;
        TestRunState response = api.testGetTestRunState(testRunId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Returns a list of test runs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testGetTestRunsTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        List<TestRun> response = api.testGetTestRuns(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Lists device sets belonging to the owner
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testListDeviceSetsOfOwnerTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        List<DeviceSet> response = api.testListDeviceSetsOfOwner(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Lists device sets belonging to the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testListDeviceSetsOfUserTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        List<DeviceSet> response = api.testListDeviceSetsOfUser(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Updates name and slug of a test series
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testPatchTestSeriesTest() throws ApiException {
        String testSeriesSlug = null;
        String ownerName = null;
        String appName = null;
        NameOfTheTestSeries nameOfTheTestSeries = null;
        TestSeries response = api.testPatchTestSeries(testSeriesSlug, ownerName, appName, nameOfTheTestSeries);
        // TODO: test validations
    }

    /**
     * Starts test run
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testStartTestRunTest() throws ApiException {
        String testRunId = null;
        String ownerName = null;
        String appName = null;
        TestCloudStartTestRunOptions testCloudStartTestRunOptions = null;
        TestCloudTestRunStartResult response = api.testStartTestRun(testRunId, ownerName, appName, testCloudStartTestRunOptions);
        // TODO: test validations
    }

    /**
     * Uploads file for a test run
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testStartUploadingFileTest() throws ApiException {
        String testRunId = null;
        String ownerName = null;
        String appName = null;
        api.testStartUploadingFile(testRunId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Stop a test run execution
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testStopTestRunTest() throws ApiException {
        String testRunId = null;
        String ownerName = null;
        String appName = null;
        TestRun response = api.testStopTestRun(testRunId, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Updates a device set belonging to the owner
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testUpdateDeviceSetOfOwnerTest() throws ApiException {
        UUID id = null;
        String ownerName = null;
        String appName = null;
        DeviceSetUpdateInformation deviceSetUpdateInformation = null;
        DeviceSet response = api.testUpdateDeviceSetOfOwner(id, ownerName, appName, deviceSetUpdateInformation);
        // TODO: test validations
    }

    /**
     * Updates a device set belonging to the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testUpdateDeviceSetOfUserTest() throws ApiException {
        UUID id = null;
        String ownerName = null;
        String appName = null;
        DeviceSetUpdateInformation deviceSetUpdateInformation = null;
        DeviceSet response = api.testUpdateDeviceSetOfUser(id, ownerName, appName, deviceSetUpdateInformation);
        // TODO: test validations
    }

    /**
     * Adds file with the given hash to a test run
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testUploadHashTest() throws ApiException {
        String testRunId = null;
        String ownerName = null;
        String appName = null;
        TestCloudFileHash testCloudFileHash = null;
        api.testUploadHash(testRunId, ownerName, appName, testCloudFileHash);
        // TODO: test validations
    }

    /**
     * Adds file with the given hash to a test run
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testUploadHashesBatchTest() throws ApiException {
        String testRunId = null;
        String ownerName = null;
        String appName = null;
        List<TestCloudFileHash1> testCloudFileHash1 = null;
        List<TestCloudFileHashResponse> response = api.testUploadHashesBatch(testRunId, ownerName, appName, testCloudFileHash1);
        // TODO: test validations
    }

}
