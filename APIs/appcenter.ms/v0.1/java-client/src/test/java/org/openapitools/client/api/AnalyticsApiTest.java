/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnalyticsCrashCounts200Response;
import org.openapitools.client.model.AnalyticsCrashFreeDevicePercentages200Response;
import org.openapitools.client.model.AnalyticsCrashGroupModelCounts200Response;
import org.openapitools.client.model.AnalyticsCrashGroupOperatingSystemCounts200Response;
import org.openapitools.client.model.AnalyticsCrashGroupsTotals200ResponseInner;
import org.openapitools.client.model.AnalyticsCrashGroupsTotals200ResponseInnerOverall;
import org.openapitools.client.model.AnalyticsCrashGroupsTotalsRequest;
import org.openapitools.client.model.AnalyticsDeviceCounts200Response;
import org.openapitools.client.model.AnalyticsDeviceCounts200ResponseDailyInner;
import org.openapitools.client.model.AnalyticsDeviceCountsDefaultResponse;
import org.openapitools.client.model.AnalyticsDistributionReleaseCounts200Response;
import org.openapitools.client.model.AnalyticsDistributionReleaseCountsRequest;
import org.openapitools.client.model.AnalyticsEventCount200Response;
import org.openapitools.client.model.AnalyticsEventDeviceCount200Response;
import org.openapitools.client.model.AnalyticsEventPerDeviceCount200Response;
import org.openapitools.client.model.AnalyticsEventPerSessionCount200Response;
import org.openapitools.client.model.AnalyticsEventProperties200Response;
import org.openapitools.client.model.AnalyticsEventPropertyCounts200Response;
import org.openapitools.client.model.AnalyticsEvents200Response;
import org.openapitools.client.model.AnalyticsGenericLogFlow200Response;
import org.openapitools.client.model.AnalyticsGetAudience200Response;
import org.openapitools.client.model.AnalyticsLanguageCounts200Response;
import org.openapitools.client.model.AnalyticsListAudiences200Response;
import org.openapitools.client.model.AnalyticsListCustomProperties200Response;
import org.openapitools.client.model.AnalyticsListDevicePropertyValues200Response;
import org.openapitools.client.model.AnalyticsLogFlow200Response;
import org.openapitools.client.model.AnalyticsModelCounts200Response;
import org.openapitools.client.model.AnalyticsOperatingSystemCounts200Response;
import org.openapitools.client.model.AnalyticsPerDeviceCounts200Response;
import org.openapitools.client.model.AnalyticsPlaceCounts200Response;
import org.openapitools.client.model.AnalyticsSessionDurationsDistribution200Response;
import org.openapitools.client.model.AnalyticsTestAudience200Response;
import org.openapitools.client.model.AnalyticsTestAudienceRequest;
import org.openapitools.client.model.AnalyticsVersions200Response;
import org.openapitools.client.model.CrashesListSessionLogs200Response;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OrganizationsListAdministeredDefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AnalyticsApi
 */
@Disabled
public class AnalyticsApiTest {

    private final AnalyticsApi api = new AnalyticsApi();

    /**
     * Returns whether audience definition exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsAudienceNameExistsTest() throws ApiException {
        String audienceName = null;
        String ownerName = null;
        String appName = null;
        api.analyticsAudienceNameExists(audienceName, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Available for UWP apps only.
     *
     * Count of crashes by day in the time range based the selected versions. Available for UWP apps only.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsCrashCountsTest() throws ApiException {
        OffsetDateTime start = null;
        String ownerName = null;
        String appName = null;
        OffsetDateTime end = null;
        List<String> versions = null;
        AnalyticsCrashCounts200Response response = api.analyticsCrashCounts(start, ownerName, appName, end, versions);
        // TODO: test validations
    }

    /**
     * Percentage of crash-free device by day in the time range based on the selected versions. Api will return -1 if crash devices is greater than active devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsCrashFreeDevicePercentagesTest() throws ApiException {
        OffsetDateTime start = null;
        String version = null;
        String ownerName = null;
        String appName = null;
        OffsetDateTime end = null;
        AnalyticsCrashFreeDevicePercentages200Response response = api.analyticsCrashFreeDevicePercentages(start, version, ownerName, appName, end);
        // TODO: test validations
    }

    /**
     * Available for UWP apps only.
     *
     * Count of crashes by day in the time range of the selected crash group with selected version. Available for UWP apps only.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsCrashGroupCountsTest() throws ApiException {
        String crashGroupId = null;
        String version = null;
        OffsetDateTime start = null;
        String ownerName = null;
        String appName = null;
        OffsetDateTime end = null;
        AnalyticsCrashCounts200Response response = api.analyticsCrashGroupCounts(crashGroupId, version, start, ownerName, appName, end);
        // TODO: test validations
    }

    /**
     * Available for UWP apps only.
     *
     * Top models of the selected crash group with selected version. Available for UWP apps only.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsCrashGroupModelCountsTest() throws ApiException {
        String crashGroupId = null;
        String version = null;
        String ownerName = null;
        String appName = null;
        Long $top = null;
        AnalyticsCrashGroupModelCounts200Response response = api.analyticsCrashGroupModelCounts(crashGroupId, version, ownerName, appName, $top);
        // TODO: test validations
    }

    /**
     * Available for UWP apps only.
     *
     * Top OSes of the selected crash group with selected version. Available for UWP apps only.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsCrashGroupOperatingSystemCountsTest() throws ApiException {
        String crashGroupId = null;
        String version = null;
        String ownerName = null;
        String appName = null;
        Long $top = null;
        AnalyticsCrashGroupOperatingSystemCounts200Response response = api.analyticsCrashGroupOperatingSystemCounts(crashGroupId, version, ownerName, appName, $top);
        // TODO: test validations
    }

    /**
     * Available for UWP apps only.
     *
     * Overall crashes and affected users count of the selected crash group with selected version. Available for UWP apps only.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsCrashGroupTotalsTest() throws ApiException {
        String crashGroupId = null;
        String version = null;
        String ownerName = null;
        String appName = null;
        AnalyticsCrashGroupsTotals200ResponseInnerOverall response = api.analyticsCrashGroupTotals(crashGroupId, version, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Overall crashes and affected users count of the selected crash groups with selected versions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsCrashGroupsTotalsTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        AnalyticsCrashGroupsTotalsRequest analyticsCrashGroupsTotalsRequest = null;
        List<AnalyticsCrashGroupsTotals200ResponseInner> response = api.analyticsCrashGroupsTotals(ownerName, appName, analyticsCrashGroupsTotalsRequest);
        // TODO: test validations
    }

    /**
     * Creates or updates audience definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsCreateOrUpdateAudienceTest() throws ApiException {
        String audienceName = null;
        String ownerName = null;
        String appName = null;
        AnalyticsTestAudienceRequest analyticsTestAudienceRequest = null;
        AnalyticsGetAudience200Response response = api.analyticsCreateOrUpdateAudience(audienceName, ownerName, appName, analyticsTestAudienceRequest);
        // TODO: test validations
    }

    /**
     * Deletes audience definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsDeleteAudienceTest() throws ApiException {
        String audienceName = null;
        String ownerName = null;
        String appName = null;
        api.analyticsDeleteAudience(audienceName, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Count of active devices by interval in the time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsDeviceCountsTest() throws ApiException {
        OffsetDateTime start = null;
        String ownerName = null;
        String appName = null;
        OffsetDateTime end = null;
        List<String> versions = null;
        String appBuild = null;
        AnalyticsDeviceCounts200Response response = api.analyticsDeviceCounts(start, ownerName, appName, end, versions, appBuild);
        // TODO: test validations
    }

    /**
     * Count of total downloads for the provided distribution releases.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsDistributionReleaseCountsTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        AnalyticsDistributionReleaseCountsRequest analyticsDistributionReleaseCountsRequest = null;
        AnalyticsDistributionReleaseCounts200Response response = api.analyticsDistributionReleaseCounts(ownerName, appName, analyticsDistributionReleaseCountsRequest);
        // TODO: test validations
    }

    /**
     * Count of events by interval in the time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsEventCountTest() throws ApiException {
        String eventName = null;
        OffsetDateTime start = null;
        String ownerName = null;
        String appName = null;
        OffsetDateTime end = null;
        List<String> versions = null;
        AnalyticsEventCount200Response response = api.analyticsEventCount(eventName, start, ownerName, appName, end, versions);
        // TODO: test validations
    }

    /**
     * Count of devices for an event by interval in the time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsEventDeviceCountTest() throws ApiException {
        String eventName = null;
        OffsetDateTime start = null;
        String ownerName = null;
        String appName = null;
        OffsetDateTime end = null;
        List<String> versions = null;
        AnalyticsEventDeviceCount200Response response = api.analyticsEventDeviceCount(eventName, start, ownerName, appName, end, versions);
        // TODO: test validations
    }

    /**
     * Count of events per device by interval in the time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsEventPerDeviceCountTest() throws ApiException {
        String eventName = null;
        OffsetDateTime start = null;
        String ownerName = null;
        String appName = null;
        OffsetDateTime end = null;
        List<String> versions = null;
        AnalyticsEventPerDeviceCount200Response response = api.analyticsEventPerDeviceCount(eventName, start, ownerName, appName, end, versions);
        // TODO: test validations
    }

    /**
     * Count of events per session by interval in the time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsEventPerSessionCountTest() throws ApiException {
        String eventName = null;
        OffsetDateTime start = null;
        String ownerName = null;
        String appName = null;
        OffsetDateTime end = null;
        List<String> versions = null;
        AnalyticsEventPerSessionCount200Response response = api.analyticsEventPerSessionCount(eventName, start, ownerName, appName, end, versions);
        // TODO: test validations
    }

    /**
     * Event properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsEventPropertiesTest() throws ApiException {
        String eventName = null;
        String ownerName = null;
        String appName = null;
        AnalyticsEventProperties200Response response = api.analyticsEventProperties(eventName, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Event properties value counts during the time range in descending order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsEventPropertyCountsTest() throws ApiException {
        String eventName = null;
        String eventPropertyName = null;
        OffsetDateTime start = null;
        String ownerName = null;
        String appName = null;
        OffsetDateTime end = null;
        List<String> versions = null;
        Long $top = null;
        AnalyticsEventPropertyCounts200Response response = api.analyticsEventPropertyCounts(eventName, eventPropertyName, start, ownerName, appName, end, versions, $top);
        // TODO: test validations
    }

    /**
     * Count of active events in the time range ordered by event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsEventsTest() throws ApiException {
        OffsetDateTime start = null;
        String ownerName = null;
        String appName = null;
        OffsetDateTime end = null;
        List<String> versions = null;
        List<String> eventName = null;
        Long $top = null;
        Long $skip = null;
        String $inlinecount = null;
        String $orderby = null;
        AnalyticsEvents200Response response = api.analyticsEvents(start, ownerName, appName, end, versions, eventName, $top, $skip, $inlinecount, $orderby);
        // TODO: test validations
    }

    /**
     * Delete the set of Events with the specified event names.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsEventsDeleteTest() throws ApiException {
        String eventName = null;
        String ownerName = null;
        String appName = null;
        api.analyticsEventsDelete(eventName, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Delete the set of Events with the specified event names.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsEventsDeleteLogsTest() throws ApiException {
        String eventName = null;
        String ownerName = null;
        String appName = null;
        api.analyticsEventsDeleteLogs(eventName, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsGenericLogFlowTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        OffsetDateTime start = null;
        AnalyticsGenericLogFlow200Response response = api.analyticsGenericLogFlow(ownerName, appName, start);
        // TODO: test validations
    }

    /**
     * Gets audience definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsGetAudienceTest() throws ApiException {
        String audienceName = null;
        String ownerName = null;
        String appName = null;
        AnalyticsGetAudience200Response response = api.analyticsGetAudience(audienceName, ownerName, appName);
        // TODO: test validations
    }

    /**
     * Languages in the time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsLanguageCountsTest() throws ApiException {
        OffsetDateTime start = null;
        String ownerName = null;
        String appName = null;
        OffsetDateTime end = null;
        Long $top = null;
        List<String> versions = null;
        AnalyticsLanguageCounts200Response response = api.analyticsLanguageCounts(start, ownerName, appName, end, $top, versions);
        // TODO: test validations
    }

    /**
     * Get list of audiences.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsListAudiencesTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        Boolean includeDisabled = null;
        AnalyticsListAudiences200Response response = api.analyticsListAudiences(ownerName, appName, includeDisabled);
        // TODO: test validations
    }

    /**
     * Get list of custom properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsListCustomPropertiesTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        AnalyticsListCustomProperties200Response response = api.analyticsListCustomProperties(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Get list of device properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsListDevicePropertiesTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        AnalyticsListCustomProperties200Response response = api.analyticsListDeviceProperties(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Get list of device property values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsListDevicePropertyValuesTest() throws ApiException {
        String propertyName = null;
        String ownerName = null;
        String appName = null;
        String contains = null;
        AnalyticsListDevicePropertyValues200Response response = api.analyticsListDevicePropertyValues(propertyName, ownerName, appName, contains);
        // TODO: test validations
    }

    /**
     * Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsLogFlowTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        OffsetDateTime start = null;
        AnalyticsLogFlow200Response response = api.analyticsLogFlow(ownerName, appName, start);
        // TODO: test validations
    }

    /**
     * Models in the time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsModelCountsTest() throws ApiException {
        OffsetDateTime start = null;
        String ownerName = null;
        String appName = null;
        OffsetDateTime end = null;
        Long $top = null;
        List<String> versions = null;
        AnalyticsModelCounts200Response response = api.analyticsModelCounts(start, ownerName, appName, end, $top, versions);
        // TODO: test validations
    }

    /**
     * OSes in the time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsOperatingSystemCountsTest() throws ApiException {
        OffsetDateTime start = null;
        String ownerName = null;
        String appName = null;
        OffsetDateTime end = null;
        Long $top = null;
        List<String> versions = null;
        AnalyticsOperatingSystemCounts200Response response = api.analyticsOperatingSystemCounts(start, ownerName, appName, end, $top, versions);
        // TODO: test validations
    }

    /**
     * Count of sessions per device in the time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsPerDeviceCountsTest() throws ApiException {
        OffsetDateTime start = null;
        String ownerName = null;
        String appName = null;
        OffsetDateTime end = null;
        List<String> versions = null;
        AnalyticsPerDeviceCounts200Response response = api.analyticsPerDeviceCounts(start, ownerName, appName, end, versions);
        // TODO: test validations
    }

    /**
     * Places in the time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsPlaceCountsTest() throws ApiException {
        OffsetDateTime start = null;
        String ownerName = null;
        String appName = null;
        OffsetDateTime end = null;
        Long $top = null;
        List<String> versions = null;
        AnalyticsPlaceCounts200Response response = api.analyticsPlaceCounts(start, ownerName, appName, end, $top, versions);
        // TODO: test validations
    }

    /**
     * Count of sessions in the time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsSessionCountsTest() throws ApiException {
        OffsetDateTime start = null;
        String ownerName = null;
        String appName = null;
        OffsetDateTime end = null;
        List<String> versions = null;
        List<AnalyticsDeviceCounts200ResponseDailyInner> response = api.analyticsSessionCounts(start, ownerName, appName, end, versions);
        // TODO: test validations
    }

    /**
     * Gets session duration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsSessionDurationsDistributionTest() throws ApiException {
        OffsetDateTime start = null;
        String ownerName = null;
        String appName = null;
        OffsetDateTime end = null;
        List<String> versions = null;
        AnalyticsSessionDurationsDistribution200Response response = api.analyticsSessionDurationsDistribution(start, ownerName, appName, end, versions);
        // TODO: test validations
    }

    /**
     * Tests audience definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsTestAudienceTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        AnalyticsTestAudienceRequest analyticsTestAudienceRequest = null;
        AnalyticsTestAudience200Response response = api.analyticsTestAudience(ownerName, appName, analyticsTestAudienceRequest);
        // TODO: test validations
    }

    /**
     * Count of active versions in the time range ordered by version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsVersionsTest() throws ApiException {
        OffsetDateTime start = null;
        String ownerName = null;
        String appName = null;
        OffsetDateTime end = null;
        Long $top = null;
        List<String> versions = null;
        AnalyticsVersions200Response response = api.analyticsVersions(start, ownerName, appName, end, $top, versions);
        // TODO: test validations
    }

    /**
     * **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK by app_id, and cannot be restored. We advise caution when using this API, it is designed to permanently disable an app_id. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appBlockLogsTest() throws ApiException {
        String ownerName = null;
        String appName = null;
        String response = api.appBlockLogs(ownerName, appName);
        // TODO: test validations
    }

    /**
     * Get session logs by crash ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void crashesListSessionLogsTest() throws ApiException {
        String crashId = null;
        String ownerName = null;
        String appName = null;
        OffsetDateTime date = null;
        CrashesListSessionLogs200Response response = api.crashesListSessionLogs(crashId, ownerName, appName, date);
        // TODO: test validations
    }

    /**
     * **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK for the given installation ID, and cannot be restored. We advise caution when using this API, it is designed to permanently disable collection from a specific installation of the app on a device, usually following the request from a user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesBlockLogsTest() throws ApiException {
        String installId = null;
        String ownerName = null;
        String appName = null;
        String response = api.devicesBlockLogs(installId, ownerName, appName);
        // TODO: test validations
    }

}
