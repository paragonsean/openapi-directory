# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AnalyticsTestAudience200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_properties: Dict[str, str]=None, definition: str=None, estimated_count: int=None, estimated_total_count: int=None):
        """AnalyticsTestAudience200Response - a model defined in OpenAPI

        :param custom_properties: The custom_properties of this AnalyticsTestAudience200Response.
        :param definition: The definition of this AnalyticsTestAudience200Response.
        :param estimated_count: The estimated_count of this AnalyticsTestAudience200Response.
        :param estimated_total_count: The estimated_total_count of this AnalyticsTestAudience200Response.
        """
        self.openapi_types = {
            'custom_properties': Dict[str, str],
            'definition': str,
            'estimated_count': int,
            'estimated_total_count': int
        }

        self.attribute_map = {
            'custom_properties': 'custom_properties',
            'definition': 'definition',
            'estimated_count': 'estimated_count',
            'estimated_total_count': 'estimated_total_count'
        }

        self._custom_properties = custom_properties
        self._definition = definition
        self._estimated_count = estimated_count
        self._estimated_total_count = estimated_total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyticsTestAudience200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Analytics_TestAudience_200_response of this AnalyticsTestAudience200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_properties(self):
        """Gets the custom_properties of this AnalyticsTestAudience200Response.

        Custom properties used in the definition.

        :return: The custom_properties of this AnalyticsTestAudience200Response.
        :rtype: Dict[str, str]
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this AnalyticsTestAudience200Response.

        Custom properties used in the definition.

        :param custom_properties: The custom_properties of this AnalyticsTestAudience200Response.
        :type custom_properties: Dict[str, str]
        """
        allowed_values = ["string", "number", "boolean", "date_time"]  # noqa: E501
        if not set(custom_properties.keys()).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid keys in `custom_properties` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(custom_properties.keys()) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._custom_properties = custom_properties

    @property
    def definition(self):
        """Gets the definition of this AnalyticsTestAudience200Response.

        Audience definition in OData format.

        :return: The definition of this AnalyticsTestAudience200Response.
        :rtype: str
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this AnalyticsTestAudience200Response.

        Audience definition in OData format.

        :param definition: The definition of this AnalyticsTestAudience200Response.
        :type definition: str
        """

        self._definition = definition

    @property
    def estimated_count(self):
        """Gets the estimated_count of this AnalyticsTestAudience200Response.

        Estimated audience size.

        :return: The estimated_count of this AnalyticsTestAudience200Response.
        :rtype: int
        """
        return self._estimated_count

    @estimated_count.setter
    def estimated_count(self, estimated_count):
        """Sets the estimated_count of this AnalyticsTestAudience200Response.

        Estimated audience size.

        :param estimated_count: The estimated_count of this AnalyticsTestAudience200Response.
        :type estimated_count: int
        """

        self._estimated_count = estimated_count

    @property
    def estimated_total_count(self):
        """Gets the estimated_total_count of this AnalyticsTestAudience200Response.

        Estimated total audience size.

        :return: The estimated_total_count of this AnalyticsTestAudience200Response.
        :rtype: int
        """
        return self._estimated_total_count

    @estimated_total_count.setter
    def estimated_total_count(self, estimated_total_count):
        """Sets the estimated_total_count of this AnalyticsTestAudience200Response.

        Estimated total audience size.

        :param estimated_total_count: The estimated_total_count of this AnalyticsTestAudience200Response.
        :type estimated_total_count: int
        """

        self._estimated_total_count = estimated_total_count
