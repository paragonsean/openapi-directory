# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DistibutionReleasesInstallAnalyticsRequestReleasesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, distribution_group_id: str=None, release_id: int=None, user_id: str=None):
        """DistibutionReleasesInstallAnalyticsRequestReleasesInner - a model defined in OpenAPI

        :param distribution_group_id: The distribution_group_id of this DistibutionReleasesInstallAnalyticsRequestReleasesInner.
        :param release_id: The release_id of this DistibutionReleasesInstallAnalyticsRequestReleasesInner.
        :param user_id: The user_id of this DistibutionReleasesInstallAnalyticsRequestReleasesInner.
        """
        self.openapi_types = {
            'distribution_group_id': str,
            'release_id': int,
            'user_id': str
        }

        self.attribute_map = {
            'distribution_group_id': 'distribution_group_id',
            'release_id': 'release_id',
            'user_id': 'user_id'
        }

        self._distribution_group_id = distribution_group_id
        self._release_id = release_id
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DistibutionReleasesInstallAnalyticsRequestReleasesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The distibutionReleases_installAnalytics_request_releases_inner of this DistibutionReleasesInstallAnalyticsRequestReleasesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distribution_group_id(self):
        """Gets the distribution_group_id of this DistibutionReleasesInstallAnalyticsRequestReleasesInner.

        distribution group id

        :return: The distribution_group_id of this DistibutionReleasesInstallAnalyticsRequestReleasesInner.
        :rtype: str
        """
        return self._distribution_group_id

    @distribution_group_id.setter
    def distribution_group_id(self, distribution_group_id):
        """Sets the distribution_group_id of this DistibutionReleasesInstallAnalyticsRequestReleasesInner.

        distribution group id

        :param distribution_group_id: The distribution_group_id of this DistibutionReleasesInstallAnalyticsRequestReleasesInner.
        :type distribution_group_id: str
        """
        if distribution_group_id is None:
            raise ValueError("Invalid value for `distribution_group_id`, must not be `None`")

        self._distribution_group_id = distribution_group_id

    @property
    def release_id(self):
        """Gets the release_id of this DistibutionReleasesInstallAnalyticsRequestReleasesInner.

        release id

        :return: The release_id of this DistibutionReleasesInstallAnalyticsRequestReleasesInner.
        :rtype: int
        """
        return self._release_id

    @release_id.setter
    def release_id(self, release_id):
        """Sets the release_id of this DistibutionReleasesInstallAnalyticsRequestReleasesInner.

        release id

        :param release_id: The release_id of this DistibutionReleasesInstallAnalyticsRequestReleasesInner.
        :type release_id: int
        """
        if release_id is None:
            raise ValueError("Invalid value for `release_id`, must not be `None`")

        self._release_id = release_id

    @property
    def user_id(self):
        """Gets the user_id of this DistibutionReleasesInstallAnalyticsRequestReleasesInner.

        user id

        :return: The user_id of this DistibutionReleasesInstallAnalyticsRequestReleasesInner.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DistibutionReleasesInstallAnalyticsRequestReleasesInner.

        user id

        :param user_id: The user_id of this DistibutionReleasesInstallAnalyticsRequestReleasesInner.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
