# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserNameAvailabilityResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available: bool=None, name: str=None):
        """UserNameAvailabilityResponse - a model defined in OpenAPI

        :param available: The available of this UserNameAvailabilityResponse.
        :param name: The name of this UserNameAvailabilityResponse.
        """
        self.openapi_types = {
            'available': bool,
            'name': str
        }

        self.attribute_map = {
            'available': 'available',
            'name': 'name'
        }

        self._available = available
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserNameAvailabilityResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserNameAvailabilityResponse of this UserNameAvailabilityResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available(self):
        """Gets the available of this UserNameAvailabilityResponse.

        The availability status of the requested user name

        :return: The available of this UserNameAvailabilityResponse.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this UserNameAvailabilityResponse.

        The availability status of the requested user name

        :param available: The available of this UserNameAvailabilityResponse.
        :type available: bool
        """
        if available is None:
            raise ValueError("Invalid value for `available`, must not be `None`")

        self._available = available

    @property
    def name(self):
        """Gets the name of this UserNameAvailabilityResponse.

        The requested user name

        :return: The name of this UserNameAvailabilityResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserNameAvailabilityResponse.

        The requested user name

        :param name: The name of this UserNameAvailabilityResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
