# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.step_report_device_screenshots_inner import StepReportDeviceScreenshotsInner
from openapi_server import util


class StepReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_screenshots: List[StepReportDeviceScreenshotsInner]=None, finished_snapshots: List[str]=None):
        """StepReport - a model defined in OpenAPI

        :param device_screenshots: The device_screenshots of this StepReport.
        :param finished_snapshots: The finished_snapshots of this StepReport.
        """
        self.openapi_types = {
            'device_screenshots': List[StepReportDeviceScreenshotsInner],
            'finished_snapshots': List[str]
        }

        self.attribute_map = {
            'device_screenshots': 'deviceScreenshots',
            'finished_snapshots': 'finishedSnapshots'
        }

        self._device_screenshots = device_screenshots
        self._finished_snapshots = finished_snapshots

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StepReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StepReport of this StepReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_screenshots(self):
        """Gets the device_screenshots of this StepReport.


        :return: The device_screenshots of this StepReport.
        :rtype: List[StepReportDeviceScreenshotsInner]
        """
        return self._device_screenshots

    @device_screenshots.setter
    def device_screenshots(self, device_screenshots):
        """Sets the device_screenshots of this StepReport.


        :param device_screenshots: The device_screenshots of this StepReport.
        :type device_screenshots: List[StepReportDeviceScreenshotsInner]
        """
        if device_screenshots is None:
            raise ValueError("Invalid value for `device_screenshots`, must not be `None`")

        self._device_screenshots = device_screenshots

    @property
    def finished_snapshots(self):
        """Gets the finished_snapshots of this StepReport.


        :return: The finished_snapshots of this StepReport.
        :rtype: List[str]
        """
        return self._finished_snapshots

    @finished_snapshots.setter
    def finished_snapshots(self, finished_snapshots):
        """Sets the finished_snapshots of this StepReport.


        :param finished_snapshots: The finished_snapshots of this StepReport.
        :type finished_snapshots: List[str]
        """
        if finished_snapshots is None:
            raise ValueError("Invalid value for `finished_snapshots`, must not be `None`")

        self._finished_snapshots = finished_snapshots
