# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddOrganizationAdminRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assigning_reason: str=None, issue_id: str=None, new_org_admin_id: str=None, responsible_admin_id: str=None):
        """AddOrganizationAdminRequest - a model defined in OpenAPI

        :param assigning_reason: The assigning_reason of this AddOrganizationAdminRequest.
        :param issue_id: The issue_id of this AddOrganizationAdminRequest.
        :param new_org_admin_id: The new_org_admin_id of this AddOrganizationAdminRequest.
        :param responsible_admin_id: The responsible_admin_id of this AddOrganizationAdminRequest.
        """
        self.openapi_types = {
            'assigning_reason': str,
            'issue_id': str,
            'new_org_admin_id': str,
            'responsible_admin_id': str
        }

        self.attribute_map = {
            'assigning_reason': 'assigning_reason',
            'issue_id': 'issue_id',
            'new_org_admin_id': 'new_org_admin_id',
            'responsible_admin_id': 'responsible_admin_id'
        }

        self._assigning_reason = assigning_reason
        self._issue_id = issue_id
        self._new_org_admin_id = new_org_admin_id
        self._responsible_admin_id = responsible_admin_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddOrganizationAdminRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddOrganizationAdminRequest of this AddOrganizationAdminRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assigning_reason(self):
        """Gets the assigning_reason of this AddOrganizationAdminRequest.

        The explanation for adding new org admin.

        :return: The assigning_reason of this AddOrganizationAdminRequest.
        :rtype: str
        """
        return self._assigning_reason

    @assigning_reason.setter
    def assigning_reason(self, assigning_reason):
        """Sets the assigning_reason of this AddOrganizationAdminRequest.

        The explanation for adding new org admin.

        :param assigning_reason: The assigning_reason of this AddOrganizationAdminRequest.
        :type assigning_reason: str
        """
        if assigning_reason is None:
            raise ValueError("Invalid value for `assigning_reason`, must not be `None`")

        self._assigning_reason = assigning_reason

    @property
    def issue_id(self):
        """Gets the issue_id of this AddOrganizationAdminRequest.

        The id of the related Intercom issue.

        :return: The issue_id of this AddOrganizationAdminRequest.
        :rtype: str
        """
        return self._issue_id

    @issue_id.setter
    def issue_id(self, issue_id):
        """Sets the issue_id of this AddOrganizationAdminRequest.

        The id of the related Intercom issue.

        :param issue_id: The issue_id of this AddOrganizationAdminRequest.
        :type issue_id: str
        """
        if issue_id is None:
            raise ValueError("Invalid value for `issue_id`, must not be `None`")

        self._issue_id = issue_id

    @property
    def new_org_admin_id(self):
        """Gets the new_org_admin_id of this AddOrganizationAdminRequest.

        The internal unique id (UUID) of the account.

        :return: The new_org_admin_id of this AddOrganizationAdminRequest.
        :rtype: str
        """
        return self._new_org_admin_id

    @new_org_admin_id.setter
    def new_org_admin_id(self, new_org_admin_id):
        """Sets the new_org_admin_id of this AddOrganizationAdminRequest.

        The internal unique id (UUID) of the account.

        :param new_org_admin_id: The new_org_admin_id of this AddOrganizationAdminRequest.
        :type new_org_admin_id: str
        """
        if new_org_admin_id is None:
            raise ValueError("Invalid value for `new_org_admin_id`, must not be `None`")

        self._new_org_admin_id = new_org_admin_id

    @property
    def responsible_admin_id(self):
        """Gets the responsible_admin_id of this AddOrganizationAdminRequest.

        The id of the user who started adding new org admin.

        :return: The responsible_admin_id of this AddOrganizationAdminRequest.
        :rtype: str
        """
        return self._responsible_admin_id

    @responsible_admin_id.setter
    def responsible_admin_id(self, responsible_admin_id):
        """Sets the responsible_admin_id of this AddOrganizationAdminRequest.

        The id of the user who started adding new org admin.

        :param responsible_admin_id: The responsible_admin_id of this AddOrganizationAdminRequest.
        :type responsible_admin_id: str
        """
        if responsible_admin_id is None:
            raise ValueError("Invalid value for `responsible_admin_id`, must not be `None`")

        self._responsible_admin_id = responsible_admin_id
