# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppMembershipsResponseMembershipsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, origin: str=None, permissions: List[str]=None, source_id: str=None, source_type: str=None, user_id: str=None):
        """AppMembershipsResponseMembershipsInner - a model defined in OpenAPI

        :param app_id: The app_id of this AppMembershipsResponseMembershipsInner.
        :param origin: The origin of this AppMembershipsResponseMembershipsInner.
        :param permissions: The permissions of this AppMembershipsResponseMembershipsInner.
        :param source_id: The source_id of this AppMembershipsResponseMembershipsInner.
        :param source_type: The source_type of this AppMembershipsResponseMembershipsInner.
        :param user_id: The user_id of this AppMembershipsResponseMembershipsInner.
        """
        self.openapi_types = {
            'app_id': str,
            'origin': str,
            'permissions': List[str],
            'source_id': str,
            'source_type': str,
            'user_id': str
        }

        self.attribute_map = {
            'app_id': 'app_id',
            'origin': 'origin',
            'permissions': 'permissions',
            'source_id': 'source_id',
            'source_type': 'source_type',
            'user_id': 'user_id'
        }

        self._app_id = app_id
        self._origin = origin
        self._permissions = permissions
        self._source_id = source_id
        self._source_type = source_type
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppMembershipsResponseMembershipsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppMembershipsResponse_memberships_inner of this AppMembershipsResponseMembershipsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this AppMembershipsResponseMembershipsInner.


        :return: The app_id of this AppMembershipsResponseMembershipsInner.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this AppMembershipsResponseMembershipsInner.


        :param app_id: The app_id of this AppMembershipsResponseMembershipsInner.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def origin(self):
        """Gets the origin of this AppMembershipsResponseMembershipsInner.


        :return: The origin of this AppMembershipsResponseMembershipsInner.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this AppMembershipsResponseMembershipsInner.


        :param origin: The origin of this AppMembershipsResponseMembershipsInner.
        :type origin: str
        """
        allowed_values = ["appcenter", "hockeyapp", "codepush", "testcloud", "hockeyapp-dogfood"]  # noqa: E501
        if origin not in allowed_values:
            raise ValueError(
                "Invalid value for `origin` ({0}), must be one of {1}"
                .format(origin, allowed_values)
            )

        self._origin = origin

    @property
    def permissions(self):
        """Gets the permissions of this AppMembershipsResponseMembershipsInner.


        :return: The permissions of this AppMembershipsResponseMembershipsInner.
        :rtype: List[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this AppMembershipsResponseMembershipsInner.


        :param permissions: The permissions of this AppMembershipsResponseMembershipsInner.
        :type permissions: List[str]
        """

        self._permissions = permissions

    @property
    def source_id(self):
        """Gets the source_id of this AppMembershipsResponseMembershipsInner.


        :return: The source_id of this AppMembershipsResponseMembershipsInner.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this AppMembershipsResponseMembershipsInner.


        :param source_id: The source_id of this AppMembershipsResponseMembershipsInner.
        :type source_id: str
        """

        self._source_id = source_id

    @property
    def source_type(self):
        """Gets the source_type of this AppMembershipsResponseMembershipsInner.


        :return: The source_type of this AppMembershipsResponseMembershipsInner.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this AppMembershipsResponseMembershipsInner.


        :param source_type: The source_type of this AppMembershipsResponseMembershipsInner.
        :type source_type: str
        """
        allowed_values = ["user", "org", "distribution_group", "team", "release"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"
                .format(source_type, allowed_values)
            )

        self._source_type = source_type

    @property
    def user_id(self):
        """Gets the user_id of this AppMembershipsResponseMembershipsInner.


        :return: The user_id of this AppMembershipsResponseMembershipsInner.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AppMembershipsResponseMembershipsInner.


        :param user_id: The user_id of this AppMembershipsResponseMembershipsInner.
        :type user_id: str
        """

        self._user_id = user_id
