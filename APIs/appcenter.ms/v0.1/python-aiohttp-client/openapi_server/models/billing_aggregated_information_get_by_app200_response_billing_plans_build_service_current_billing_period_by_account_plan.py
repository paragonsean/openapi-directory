# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: Dict[str, object]=None, id: str=None, limits: Dict[str, float]=None, parent_id: str=None, payment_source: str=None, price: float=None, service: str=None, version: str=None):
        """BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan - a model defined in OpenAPI

        :param attributes: The attributes of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.
        :param id: The id of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.
        :param limits: The limits of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.
        :param parent_id: The parent_id of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.
        :param payment_source: The payment_source of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.
        :param price: The price of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.
        :param service: The service of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.
        :param version: The version of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.
        """
        self.openapi_types = {
            'attributes': Dict[str, object],
            'id': str,
            'limits': Dict[str, float],
            'parent_id': str,
            'payment_source': str,
            'price': float,
            'service': str,
            'version': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'id': 'id',
            'limits': 'limits',
            'parent_id': 'parentId',
            'payment_source': 'paymentSource',
            'price': 'price',
            'service': 'service',
            'version': 'version'
        }

        self._attributes = attributes
        self._id = id
        self._limits = limits
        self._parent_id = parent_id
        self._payment_source = payment_source
        self._price = price
        self._service = service
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The billingAggregatedInformation_getByApp_200_response_billingPlans_buildService_currentBillingPeriod_byAccount_plan of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.

        Collection of attribute values.

        :return: The attributes of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.
        :rtype: Dict[str, object]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.

        Collection of attribute values.

        :param attributes: The attributes of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.
        :type attributes: Dict[str, object]
        """

        self._attributes = attributes

    @property
    def id(self):
        """Gets the id of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.

        The Billing Plan ID

        :return: The id of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.

        The Billing Plan ID

        :param id: The id of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.
        :type id: str
        """

        self._id = id

    @property
    def limits(self):
        """Gets the limits of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.

        A collection of named numeric values

        :return: The limits of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.
        :rtype: Dict[str, float]
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.

        A collection of named numeric values

        :param limits: The limits of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.
        :type limits: Dict[str, float]
        """

        self._limits = limits

    @property
    def parent_id(self):
        """Gets the parent_id of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.


        :return: The parent_id of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.


        :param parent_id: The parent_id of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.
        :type parent_id: str
        """

        self._parent_id = parent_id

    @property
    def payment_source(self):
        """Gets the payment_source of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.

        Service that receives payments for this billing plan.

        :return: The payment_source of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.
        :rtype: str
        """
        return self._payment_source

    @payment_source.setter
    def payment_source(self, payment_source):
        """Sets the payment_source of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.

        Service that receives payments for this billing plan.

        :param payment_source: The payment_source of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.
        :type payment_source: str
        """
        allowed_values = ["None", "AppCenter", "GitHub", "Xtc"]  # noqa: E501
        if payment_source not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_source` ({0}), must be one of {1}"
                .format(payment_source, allowed_values)
            )

        self._payment_source = payment_source

    @property
    def price(self):
        """Gets the price of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.

        Price of the Billing Plan

        :return: The price of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.

        Price of the Billing Plan

        :param price: The price of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.
        :type price: float
        """

        self._price = price

    @property
    def service(self):
        """Gets the service of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.

        Name of the service that the plan applies to.

        :return: The service of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.

        Name of the service that the plan applies to.

        :param service: The service of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.
        :type service: str
        """
        allowed_values = ["Build", "Test"]  # noqa: E501
        if service not in allowed_values:
            raise ValueError(
                "Invalid value for `service` ({0}), must be one of {1}"
                .format(service, allowed_values)
            )

        self._service = service

    @property
    def version(self):
        """Gets the version of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.

        Version of the Billing Plan schema

        :return: The version of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.

        Version of the Billing Plan schema

        :param version: The version of this BillingAggregatedInformationGetByApp200ResponseBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan.
        :type version: str
        """

        self._version = version
