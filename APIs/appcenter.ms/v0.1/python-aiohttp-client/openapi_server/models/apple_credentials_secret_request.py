# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppleCredentialsSecretRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: object=None, credential_type: str='credentials', display_name: str=None, service_type: str=None):
        """AppleCredentialsSecretRequest - a model defined in OpenAPI

        :param data: The data of this AppleCredentialsSecretRequest.
        :param credential_type: The credential_type of this AppleCredentialsSecretRequest.
        :param display_name: The display_name of this AppleCredentialsSecretRequest.
        :param service_type: The service_type of this AppleCredentialsSecretRequest.
        """
        self.openapi_types = {
            'data': object,
            'credential_type': str,
            'display_name': str,
            'service_type': str
        }

        self.attribute_map = {
            'data': 'data',
            'credential_type': 'credentialType',
            'display_name': 'displayName',
            'service_type': 'serviceType'
        }

        self._data = data
        self._credential_type = credential_type
        self._display_name = display_name
        self._service_type = service_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppleCredentialsSecretRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppleCredentialsSecretRequest of this AppleCredentialsSecretRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this AppleCredentialsSecretRequest.

        apple secret details

        :return: The data of this AppleCredentialsSecretRequest.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AppleCredentialsSecretRequest.

        apple secret details

        :param data: The data of this AppleCredentialsSecretRequest.
        :type data: object
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def credential_type(self):
        """Gets the credential_type of this AppleCredentialsSecretRequest.

        credential type of the shared connection. Values can be credentials|certificate

        :return: The credential_type of this AppleCredentialsSecretRequest.
        :rtype: str
        """
        return self._credential_type

    @credential_type.setter
    def credential_type(self, credential_type):
        """Sets the credential_type of this AppleCredentialsSecretRequest.

        credential type of the shared connection. Values can be credentials|certificate

        :param credential_type: The credential_type of this AppleCredentialsSecretRequest.
        :type credential_type: str
        """
        allowed_values = ["credentials", "certificate", "key"]  # noqa: E501
        if credential_type not in allowed_values:
            raise ValueError(
                "Invalid value for `credential_type` ({0}), must be one of {1}"
                .format(credential_type, allowed_values)
            )

        self._credential_type = credential_type

    @property
    def display_name(self):
        """Gets the display_name of this AppleCredentialsSecretRequest.

        display name of shared connection

        :return: The display_name of this AppleCredentialsSecretRequest.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AppleCredentialsSecretRequest.

        display name of shared connection

        :param display_name: The display_name of this AppleCredentialsSecretRequest.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def service_type(self):
        """Gets the service_type of this AppleCredentialsSecretRequest.

        service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate

        :return: The service_type of this AppleCredentialsSecretRequest.
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this AppleCredentialsSecretRequest.

        service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate

        :param service_type: The service_type of this AppleCredentialsSecretRequest.
        :type service_type: str
        """
        allowed_values = ["apple", "jira", "googleplay", "gitlab"]  # noqa: E501
        if service_type not in allowed_values:
            raise ValueError(
                "Invalid value for `service_type` ({0}), must be one of {1}"
                .format(service_type, allowed_values)
            )

        self._service_type = service_type
