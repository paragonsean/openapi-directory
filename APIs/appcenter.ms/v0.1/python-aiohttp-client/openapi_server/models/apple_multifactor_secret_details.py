# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppleMultifactorSecretDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_specific_password: str=None, auth_code: str=None, password: str=None, username: str=None):
        """AppleMultifactorSecretDetails - a model defined in OpenAPI

        :param app_specific_password: The app_specific_password of this AppleMultifactorSecretDetails.
        :param auth_code: The auth_code of this AppleMultifactorSecretDetails.
        :param password: The password of this AppleMultifactorSecretDetails.
        :param username: The username of this AppleMultifactorSecretDetails.
        """
        self.openapi_types = {
            'app_specific_password': str,
            'auth_code': str,
            'password': str,
            'username': str
        }

        self.attribute_map = {
            'app_specific_password': 'appSpecificPassword',
            'auth_code': 'authCode',
            'password': 'password',
            'username': 'username'
        }

        self._app_specific_password = app_specific_password
        self._auth_code = auth_code
        self._password = password
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppleMultifactorSecretDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppleMultifactorSecretDetails of this AppleMultifactorSecretDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_specific_password(self):
        """Gets the app_specific_password of this AppleMultifactorSecretDetails.

        The app specific password required for app publishing for 2FA accounts

        :return: The app_specific_password of this AppleMultifactorSecretDetails.
        :rtype: str
        """
        return self._app_specific_password

    @app_specific_password.setter
    def app_specific_password(self, app_specific_password):
        """Sets the app_specific_password of this AppleMultifactorSecretDetails.

        The app specific password required for app publishing for 2FA accounts

        :param app_specific_password: The app_specific_password of this AppleMultifactorSecretDetails.
        :type app_specific_password: str
        """

        self._app_specific_password = app_specific_password

    @property
    def auth_code(self):
        """Gets the auth_code of this AppleMultifactorSecretDetails.

        The 6 digit Apple OTP for Multifactor accounts

        :return: The auth_code of this AppleMultifactorSecretDetails.
        :rtype: str
        """
        return self._auth_code

    @auth_code.setter
    def auth_code(self, auth_code):
        """Sets the auth_code of this AppleMultifactorSecretDetails.

        The 6 digit Apple OTP for Multifactor accounts

        :param auth_code: The auth_code of this AppleMultifactorSecretDetails.
        :type auth_code: str
        """
        if auth_code is None:
            raise ValueError("Invalid value for `auth_code`, must not be `None`")

        self._auth_code = auth_code

    @property
    def password(self):
        """Gets the password of this AppleMultifactorSecretDetails.

        password to connect to apple store.

        :return: The password of this AppleMultifactorSecretDetails.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AppleMultifactorSecretDetails.

        password to connect to apple store.

        :param password: The password of this AppleMultifactorSecretDetails.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def username(self):
        """Gets the username of this AppleMultifactorSecretDetails.

        username to connect to apple store.

        :return: The username of this AppleMultifactorSecretDetails.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AppleMultifactorSecretDetails.

        username to connect to apple store.

        :param username: The username of this AppleMultifactorSecretDetails.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
