# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AnalyticsEvents200ResponseEventsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, count_per_device: float=None, count_per_session: float=None, device_count: int=None, id: str=None, name: str=None, previous_count: int=None, previous_device_count: int=None):
        """AnalyticsEvents200ResponseEventsInner - a model defined in OpenAPI

        :param count: The count of this AnalyticsEvents200ResponseEventsInner.
        :param count_per_device: The count_per_device of this AnalyticsEvents200ResponseEventsInner.
        :param count_per_session: The count_per_session of this AnalyticsEvents200ResponseEventsInner.
        :param device_count: The device_count of this AnalyticsEvents200ResponseEventsInner.
        :param id: The id of this AnalyticsEvents200ResponseEventsInner.
        :param name: The name of this AnalyticsEvents200ResponseEventsInner.
        :param previous_count: The previous_count of this AnalyticsEvents200ResponseEventsInner.
        :param previous_device_count: The previous_device_count of this AnalyticsEvents200ResponseEventsInner.
        """
        self.openapi_types = {
            'count': int,
            'count_per_device': float,
            'count_per_session': float,
            'device_count': int,
            'id': str,
            'name': str,
            'previous_count': int,
            'previous_device_count': int
        }

        self.attribute_map = {
            'count': 'count',
            'count_per_device': 'count_per_device',
            'count_per_session': 'count_per_session',
            'device_count': 'device_count',
            'id': 'id',
            'name': 'name',
            'previous_count': 'previous_count',
            'previous_device_count': 'previous_device_count'
        }

        self._count = count
        self._count_per_device = count_per_device
        self._count_per_session = count_per_session
        self._device_count = device_count
        self._id = id
        self._name = name
        self._previous_count = previous_count
        self._previous_device_count = previous_device_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyticsEvents200ResponseEventsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Analytics_Events_200_response_events_inner of this AnalyticsEvents200ResponseEventsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this AnalyticsEvents200ResponseEventsInner.


        :return: The count of this AnalyticsEvents200ResponseEventsInner.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this AnalyticsEvents200ResponseEventsInner.


        :param count: The count of this AnalyticsEvents200ResponseEventsInner.
        :type count: int
        """

        self._count = count

    @property
    def count_per_device(self):
        """Gets the count_per_device of this AnalyticsEvents200ResponseEventsInner.


        :return: The count_per_device of this AnalyticsEvents200ResponseEventsInner.
        :rtype: float
        """
        return self._count_per_device

    @count_per_device.setter
    def count_per_device(self, count_per_device):
        """Sets the count_per_device of this AnalyticsEvents200ResponseEventsInner.


        :param count_per_device: The count_per_device of this AnalyticsEvents200ResponseEventsInner.
        :type count_per_device: float
        """

        self._count_per_device = count_per_device

    @property
    def count_per_session(self):
        """Gets the count_per_session of this AnalyticsEvents200ResponseEventsInner.


        :return: The count_per_session of this AnalyticsEvents200ResponseEventsInner.
        :rtype: float
        """
        return self._count_per_session

    @count_per_session.setter
    def count_per_session(self, count_per_session):
        """Sets the count_per_session of this AnalyticsEvents200ResponseEventsInner.


        :param count_per_session: The count_per_session of this AnalyticsEvents200ResponseEventsInner.
        :type count_per_session: float
        """

        self._count_per_session = count_per_session

    @property
    def device_count(self):
        """Gets the device_count of this AnalyticsEvents200ResponseEventsInner.


        :return: The device_count of this AnalyticsEvents200ResponseEventsInner.
        :rtype: int
        """
        return self._device_count

    @device_count.setter
    def device_count(self, device_count):
        """Sets the device_count of this AnalyticsEvents200ResponseEventsInner.


        :param device_count: The device_count of this AnalyticsEvents200ResponseEventsInner.
        :type device_count: int
        """

        self._device_count = device_count

    @property
    def id(self):
        """Gets the id of this AnalyticsEvents200ResponseEventsInner.


        :return: The id of this AnalyticsEvents200ResponseEventsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AnalyticsEvents200ResponseEventsInner.


        :param id: The id of this AnalyticsEvents200ResponseEventsInner.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AnalyticsEvents200ResponseEventsInner.


        :return: The name of this AnalyticsEvents200ResponseEventsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnalyticsEvents200ResponseEventsInner.


        :param name: The name of this AnalyticsEvents200ResponseEventsInner.
        :type name: str
        """

        self._name = name

    @property
    def previous_count(self):
        """Gets the previous_count of this AnalyticsEvents200ResponseEventsInner.

        The event count of previous time range of the event.

        :return: The previous_count of this AnalyticsEvents200ResponseEventsInner.
        :rtype: int
        """
        return self._previous_count

    @previous_count.setter
    def previous_count(self, previous_count):
        """Sets the previous_count of this AnalyticsEvents200ResponseEventsInner.

        The event count of previous time range of the event.

        :param previous_count: The previous_count of this AnalyticsEvents200ResponseEventsInner.
        :type previous_count: int
        """

        self._previous_count = previous_count

    @property
    def previous_device_count(self):
        """Gets the previous_device_count of this AnalyticsEvents200ResponseEventsInner.

        The device count of previous time range of the event.

        :return: The previous_device_count of this AnalyticsEvents200ResponseEventsInner.
        :rtype: int
        """
        return self._previous_device_count

    @previous_device_count.setter
    def previous_device_count(self, previous_device_count):
        """Sets the previous_device_count of this AnalyticsEvents200ResponseEventsInner.

        The device count of previous time range of the event.

        :param previous_device_count: The previous_device_count of this AnalyticsEvents200ResponseEventsInner.
        :type previous_device_count: int
        """

        self._previous_device_count = previous_device_count
