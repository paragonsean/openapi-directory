# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationStatusRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build_version: str=None, bundle_identifier: str=None, password: str=None, team_identifier: str=None, track_identifier: str=None, train_version: str=None, username: str=None):
        """ApplicationStatusRequest - a model defined in OpenAPI

        :param build_version: The build_version of this ApplicationStatusRequest.
        :param bundle_identifier: The bundle_identifier of this ApplicationStatusRequest.
        :param password: The password of this ApplicationStatusRequest.
        :param team_identifier: The team_identifier of this ApplicationStatusRequest.
        :param track_identifier: The track_identifier of this ApplicationStatusRequest.
        :param train_version: The train_version of this ApplicationStatusRequest.
        :param username: The username of this ApplicationStatusRequest.
        """
        self.openapi_types = {
            'build_version': str,
            'bundle_identifier': str,
            'password': str,
            'team_identifier': str,
            'track_identifier': str,
            'train_version': str,
            'username': str
        }

        self.attribute_map = {
            'build_version': 'build_version',
            'bundle_identifier': 'bundle_identifier',
            'password': 'password',
            'team_identifier': 'team_identifier',
            'track_identifier': 'track_identifier',
            'train_version': 'train_version',
            'username': 'username'
        }

        self._build_version = build_version
        self._bundle_identifier = bundle_identifier
        self._password = password
        self._team_identifier = team_identifier
        self._track_identifier = track_identifier
        self._train_version = train_version
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationStatusRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationStatusRequest of this ApplicationStatusRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build_version(self):
        """Gets the build_version of this ApplicationStatusRequest.

        The version of build for which real time status is to be fetched.

        :return: The build_version of this ApplicationStatusRequest.
        :rtype: str
        """
        return self._build_version

    @build_version.setter
    def build_version(self, build_version):
        """Sets the build_version of this ApplicationStatusRequest.

        The version of build for which real time status is to be fetched.

        :param build_version: The build_version of this ApplicationStatusRequest.
        :type build_version: str
        """

        self._build_version = build_version

    @property
    def bundle_identifier(self):
        """Gets the bundle_identifier of this ApplicationStatusRequest.

        Bundle Identifier of application in Apple Itunes portal.

        :return: The bundle_identifier of this ApplicationStatusRequest.
        :rtype: str
        """
        return self._bundle_identifier

    @bundle_identifier.setter
    def bundle_identifier(self, bundle_identifier):
        """Sets the bundle_identifier of this ApplicationStatusRequest.

        Bundle Identifier of application in Apple Itunes portal.

        :param bundle_identifier: The bundle_identifier of this ApplicationStatusRequest.
        :type bundle_identifier: str
        """
        if bundle_identifier is None:
            raise ValueError("Invalid value for `bundle_identifier`, must not be `None`")

        self._bundle_identifier = bundle_identifier

    @property
    def password(self):
        """Gets the password of this ApplicationStatusRequest.

        The password for the Apple Developer account.

        :return: The password of this ApplicationStatusRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ApplicationStatusRequest.

        The password for the Apple Developer account.

        :param password: The password of this ApplicationStatusRequest.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def team_identifier(self):
        """Gets the team_identifier of this ApplicationStatusRequest.

        Identifier of the team to use when logged in.

        :return: The team_identifier of this ApplicationStatusRequest.
        :rtype: str
        """
        return self._team_identifier

    @team_identifier.setter
    def team_identifier(self, team_identifier):
        """Sets the team_identifier of this ApplicationStatusRequest.

        Identifier of the team to use when logged in.

        :param team_identifier: The team_identifier of this ApplicationStatusRequest.
        :type team_identifier: str
        """

        self._team_identifier = team_identifier

    @property
    def track_identifier(self):
        """Gets the track_identifier of this ApplicationStatusRequest.

        Track Identifier for which the status is to be fetched.

        :return: The track_identifier of this ApplicationStatusRequest.
        :rtype: str
        """
        return self._track_identifier

    @track_identifier.setter
    def track_identifier(self, track_identifier):
        """Sets the track_identifier of this ApplicationStatusRequest.

        Track Identifier for which the status is to be fetched.

        :param track_identifier: The track_identifier of this ApplicationStatusRequest.
        :type track_identifier: str
        """
        if track_identifier is None:
            raise ValueError("Invalid value for `track_identifier`, must not be `None`")

        self._track_identifier = track_identifier

    @property
    def train_version(self):
        """Gets the train_version of this ApplicationStatusRequest.

        The Train version for which the status is to be fetched.

        :return: The train_version of this ApplicationStatusRequest.
        :rtype: str
        """
        return self._train_version

    @train_version.setter
    def train_version(self, train_version):
        """Sets the train_version of this ApplicationStatusRequest.

        The Train version for which the status is to be fetched.

        :param train_version: The train_version of this ApplicationStatusRequest.
        :type train_version: str
        """

        self._train_version = train_version

    @property
    def username(self):
        """Gets the username of this ApplicationStatusRequest.

        The username for the Apple Developer account.

        :return: The username of this ApplicationStatusRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ApplicationStatusRequest.

        The username for the Apple Developer account.

        :param username: The username of this ApplicationStatusRequest.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
