# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SymbolUploadsList200ResponseInnerSymbolsUploadedInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, platform: str=None, symbol_id: str=None):
        """SymbolUploadsList200ResponseInnerSymbolsUploadedInner - a model defined in OpenAPI

        :param platform: The platform of this SymbolUploadsList200ResponseInnerSymbolsUploadedInner.
        :param symbol_id: The symbol_id of this SymbolUploadsList200ResponseInnerSymbolsUploadedInner.
        """
        self.openapi_types = {
            'platform': str,
            'symbol_id': str
        }

        self.attribute_map = {
            'platform': 'platform',
            'symbol_id': 'symbol_id'
        }

        self._platform = platform
        self._symbol_id = symbol_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SymbolUploadsList200ResponseInnerSymbolsUploadedInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The symbolUploads_list_200_response_inner_symbols_uploaded_inner of this SymbolUploadsList200ResponseInnerSymbolsUploadedInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def platform(self):
        """Gets the platform of this SymbolUploadsList200ResponseInnerSymbolsUploadedInner.

        The platform the symbol is associated with

        :return: The platform of this SymbolUploadsList200ResponseInnerSymbolsUploadedInner.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this SymbolUploadsList200ResponseInnerSymbolsUploadedInner.

        The platform the symbol is associated with

        :param platform: The platform of this SymbolUploadsList200ResponseInnerSymbolsUploadedInner.
        :type platform: str
        """
        if platform is None:
            raise ValueError("Invalid value for `platform`, must not be `None`")

        self._platform = platform

    @property
    def symbol_id(self):
        """Gets the symbol_id of this SymbolUploadsList200ResponseInnerSymbolsUploadedInner.

        The symbol id of the symbol binary

        :return: The symbol_id of this SymbolUploadsList200ResponseInnerSymbolsUploadedInner.
        :rtype: str
        """
        return self._symbol_id

    @symbol_id.setter
    def symbol_id(self, symbol_id):
        """Sets the symbol_id of this SymbolUploadsList200ResponseInnerSymbolsUploadedInner.

        The symbol id of the symbol binary

        :param symbol_id: The symbol_id of this SymbolUploadsList200ResponseInnerSymbolsUploadedInner.
        :type symbol_id: str
        """
        if symbol_id is None:
            raise ValueError("Invalid value for `symbol_id`, must not be `None`")

        self._symbol_id = symbol_id
