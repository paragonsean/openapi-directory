# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.diagnostics_exception_frames_inner import DiagnosticsExceptionFramesInner
from openapi_server import util


class DiagnosticsException(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, frames: List[DiagnosticsExceptionFramesInner]=None, inner_exceptions: List[DiagnosticsException]=None, platform: str=None, reason: str=None, relevant: bool=None, type: str=None):
        """DiagnosticsException - a model defined in OpenAPI

        :param frames: The frames of this DiagnosticsException.
        :param inner_exceptions: The inner_exceptions of this DiagnosticsException.
        :param platform: The platform of this DiagnosticsException.
        :param reason: The reason of this DiagnosticsException.
        :param relevant: The relevant of this DiagnosticsException.
        :param type: The type of this DiagnosticsException.
        """
        self.openapi_types = {
            'frames': List[DiagnosticsExceptionFramesInner],
            'inner_exceptions': List[DiagnosticsException],
            'platform': str,
            'reason': str,
            'relevant': bool,
            'type': str
        }

        self.attribute_map = {
            'frames': 'frames',
            'inner_exceptions': 'inner_exceptions',
            'platform': 'platform',
            'reason': 'reason',
            'relevant': 'relevant',
            'type': 'type'
        }

        self._frames = frames
        self._inner_exceptions = inner_exceptions
        self._platform = platform
        self._reason = reason
        self._relevant = relevant
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiagnosticsException':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiagnosticsException of this DiagnosticsException.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def frames(self):
        """Gets the frames of this DiagnosticsException.

        frames of the excetpion

        :return: The frames of this DiagnosticsException.
        :rtype: List[DiagnosticsExceptionFramesInner]
        """
        return self._frames

    @frames.setter
    def frames(self, frames):
        """Sets the frames of this DiagnosticsException.

        frames of the excetpion

        :param frames: The frames of this DiagnosticsException.
        :type frames: List[DiagnosticsExceptionFramesInner]
        """
        if frames is None:
            raise ValueError("Invalid value for `frames`, must not be `None`")

        self._frames = frames

    @property
    def inner_exceptions(self):
        """Gets the inner_exceptions of this DiagnosticsException.


        :return: The inner_exceptions of this DiagnosticsException.
        :rtype: List[DiagnosticsException]
        """
        return self._inner_exceptions

    @inner_exceptions.setter
    def inner_exceptions(self, inner_exceptions):
        """Sets the inner_exceptions of this DiagnosticsException.


        :param inner_exceptions: The inner_exceptions of this DiagnosticsException.
        :type inner_exceptions: List[DiagnosticsException]
        """

        self._inner_exceptions = inner_exceptions

    @property
    def platform(self):
        """Gets the platform of this DiagnosticsException.

        SDK/Platform this thread is beeing generated from

        :return: The platform of this DiagnosticsException.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this DiagnosticsException.

        SDK/Platform this thread is beeing generated from

        :param platform: The platform of this DiagnosticsException.
        :type platform: str
        """
        allowed_values = ["ios", "android", "xamarin", "react-native", "ndk", "unity", "other"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def reason(self):
        """Gets the reason of this DiagnosticsException.

        Reason of the exception

        :return: The reason of this DiagnosticsException.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this DiagnosticsException.

        Reason of the exception

        :param reason: The reason of this DiagnosticsException.
        :type reason: str
        """

        self._reason = reason

    @property
    def relevant(self):
        """Gets the relevant of this DiagnosticsException.

        relevant exception (crashed)

        :return: The relevant of this DiagnosticsException.
        :rtype: bool
        """
        return self._relevant

    @relevant.setter
    def relevant(self, relevant):
        """Sets the relevant of this DiagnosticsException.

        relevant exception (crashed)

        :param relevant: The relevant of this DiagnosticsException.
        :type relevant: bool
        """

        self._relevant = relevant

    @property
    def type(self):
        """Gets the type of this DiagnosticsException.

        Type of the exception (NSSomethingException, NullPointerException)

        :return: The type of this DiagnosticsException.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DiagnosticsException.

        Type of the exception (NSSomethingException, NullPointerException)

        :param type: The type of this DiagnosticsException.
        :type type: str
        """

        self._type = type
