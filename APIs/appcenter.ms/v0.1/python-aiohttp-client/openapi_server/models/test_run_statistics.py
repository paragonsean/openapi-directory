# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestRunStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, devices: float=None, devices_failed: float=None, devices_finished: float=None, failed: float=None, passed: float=None, peak_memory: float=None, skipped: float=None, total: float=None, total_device_minutes: float=None):
        """TestRunStatistics - a model defined in OpenAPI

        :param devices: The devices of this TestRunStatistics.
        :param devices_failed: The devices_failed of this TestRunStatistics.
        :param devices_finished: The devices_finished of this TestRunStatistics.
        :param failed: The failed of this TestRunStatistics.
        :param passed: The passed of this TestRunStatistics.
        :param peak_memory: The peak_memory of this TestRunStatistics.
        :param skipped: The skipped of this TestRunStatistics.
        :param total: The total of this TestRunStatistics.
        :param total_device_minutes: The total_device_minutes of this TestRunStatistics.
        """
        self.openapi_types = {
            'devices': float,
            'devices_failed': float,
            'devices_finished': float,
            'failed': float,
            'passed': float,
            'peak_memory': float,
            'skipped': float,
            'total': float,
            'total_device_minutes': float
        }

        self.attribute_map = {
            'devices': 'devices',
            'devices_failed': 'devicesFailed',
            'devices_finished': 'devicesFinished',
            'failed': 'failed',
            'passed': 'passed',
            'peak_memory': 'peakMemory',
            'skipped': 'skipped',
            'total': 'total',
            'total_device_minutes': 'totalDeviceMinutes'
        }

        self._devices = devices
        self._devices_failed = devices_failed
        self._devices_finished = devices_finished
        self._failed = failed
        self._passed = passed
        self._peak_memory = peak_memory
        self._skipped = skipped
        self._total = total
        self._total_device_minutes = total_device_minutes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestRunStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Test_Run_Statistics of this TestRunStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def devices(self):
        """Gets the devices of this TestRunStatistics.

        Number of devices running the test

        :return: The devices of this TestRunStatistics.
        :rtype: float
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this TestRunStatistics.

        Number of devices running the test

        :param devices: The devices of this TestRunStatistics.
        :type devices: float
        """

        self._devices = devices

    @property
    def devices_failed(self):
        """Gets the devices_failed of this TestRunStatistics.

        Number of failed devices

        :return: The devices_failed of this TestRunStatistics.
        :rtype: float
        """
        return self._devices_failed

    @devices_failed.setter
    def devices_failed(self, devices_failed):
        """Sets the devices_failed of this TestRunStatistics.

        Number of failed devices

        :param devices_failed: The devices_failed of this TestRunStatistics.
        :type devices_failed: float
        """

        self._devices_failed = devices_failed

    @property
    def devices_finished(self):
        """Gets the devices_finished of this TestRunStatistics.

        Number of finished devices

        :return: The devices_finished of this TestRunStatistics.
        :rtype: float
        """
        return self._devices_finished

    @devices_finished.setter
    def devices_finished(self, devices_finished):
        """Sets the devices_finished of this TestRunStatistics.

        Number of finished devices

        :param devices_finished: The devices_finished of this TestRunStatistics.
        :type devices_finished: float
        """

        self._devices_finished = devices_finished

    @property
    def failed(self):
        """Gets the failed of this TestRunStatistics.

        Number of failed tests

        :return: The failed of this TestRunStatistics.
        :rtype: float
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this TestRunStatistics.

        Number of failed tests

        :param failed: The failed of this TestRunStatistics.
        :type failed: float
        """

        self._failed = failed

    @property
    def passed(self):
        """Gets the passed of this TestRunStatistics.

        Number of passed tests

        :return: The passed of this TestRunStatistics.
        :rtype: float
        """
        return self._passed

    @passed.setter
    def passed(self, passed):
        """Sets the passed of this TestRunStatistics.

        Number of passed tests

        :param passed: The passed of this TestRunStatistics.
        :type passed: float
        """

        self._passed = passed

    @property
    def peak_memory(self):
        """Gets the peak_memory of this TestRunStatistics.

        The max amount of MB used during the test run

        :return: The peak_memory of this TestRunStatistics.
        :rtype: float
        """
        return self._peak_memory

    @peak_memory.setter
    def peak_memory(self, peak_memory):
        """Sets the peak_memory of this TestRunStatistics.

        The max amount of MB used during the test run

        :param peak_memory: The peak_memory of this TestRunStatistics.
        :type peak_memory: float
        """

        self._peak_memory = peak_memory

    @property
    def skipped(self):
        """Gets the skipped of this TestRunStatistics.

        Number of skipped tests

        :return: The skipped of this TestRunStatistics.
        :rtype: float
        """
        return self._skipped

    @skipped.setter
    def skipped(self, skipped):
        """Sets the skipped of this TestRunStatistics.

        Number of skipped tests

        :param skipped: The skipped of this TestRunStatistics.
        :type skipped: float
        """

        self._skipped = skipped

    @property
    def total(self):
        """Gets the total of this TestRunStatistics.

        Number of tests in total

        :return: The total of this TestRunStatistics.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this TestRunStatistics.

        Number of tests in total

        :param total: The total of this TestRunStatistics.
        :type total: float
        """

        self._total = total

    @property
    def total_device_minutes(self):
        """Gets the total_device_minutes of this TestRunStatistics.

        The number of minutes of device time the test has been runnign

        :return: The total_device_minutes of this TestRunStatistics.
        :rtype: float
        """
        return self._total_device_minutes

    @total_device_minutes.setter
    def total_device_minutes(self, total_device_minutes):
        """Sets the total_device_minutes of this TestRunStatistics.

        The number of minutes of device time the test has been runnign

        :param total_device_minutes: The total_device_minutes of this TestRunStatistics.
        :type total_device_minutes: float
        """

        self._total_device_minutes = total_device_minutes
