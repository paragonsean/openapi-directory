# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LegacyCollaborator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_current_account: bool=None, permission: str=None):
        """LegacyCollaborator - a model defined in OpenAPI

        :param is_current_account: The is_current_account of this LegacyCollaborator.
        :param permission: The permission of this LegacyCollaborator.
        """
        self.openapi_types = {
            'is_current_account': bool,
            'permission': str
        }

        self.attribute_map = {
            'is_current_account': 'isCurrentAccount',
            'permission': 'permission'
        }

        self._is_current_account = is_current_account
        self._permission = permission

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LegacyCollaborator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LegacyCollaborator of this LegacyCollaborator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_current_account(self):
        """Gets the is_current_account of this LegacyCollaborator.

        Is current collaborator the same as current account.

        :return: The is_current_account of this LegacyCollaborator.
        :rtype: bool
        """
        return self._is_current_account

    @is_current_account.setter
    def is_current_account(self, is_current_account):
        """Sets the is_current_account of this LegacyCollaborator.

        Is current collaborator the same as current account.

        :param is_current_account: The is_current_account of this LegacyCollaborator.
        :type is_current_account: bool
        """

        self._is_current_account = is_current_account

    @property
    def permission(self):
        """Gets the permission of this LegacyCollaborator.

        Which permission does current account has.

        :return: The permission of this LegacyCollaborator.
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this LegacyCollaborator.

        Which permission does current account has.

        :param permission: The permission of this LegacyCollaborator.
        :type permission: str
        """

        self._permission = permission
