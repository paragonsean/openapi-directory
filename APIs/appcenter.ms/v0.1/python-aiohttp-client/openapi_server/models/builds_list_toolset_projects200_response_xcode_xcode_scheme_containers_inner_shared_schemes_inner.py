# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.builds_list_toolset_projects200_response_xcode_xcode_scheme_containers_inner_shared_schemes_inner_archive_project import BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInnerArchiveProject
from openapi_server import util


class BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archive_configuration: str=None, archive_project: BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInnerArchiveProject=None, has_test_action: bool=None, name: str=None):
        """BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner - a model defined in OpenAPI

        :param archive_configuration: The archive_configuration of this BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner.
        :param archive_project: The archive_project of this BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner.
        :param has_test_action: The has_test_action of this BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner.
        :param name: The name of this BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner.
        """
        self.openapi_types = {
            'archive_configuration': str,
            'archive_project': BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInnerArchiveProject,
            'has_test_action': bool,
            'name': str
        }

        self.attribute_map = {
            'archive_configuration': 'archiveConfiguration',
            'archive_project': 'archiveProject',
            'has_test_action': 'hasTestAction',
            'name': 'name'
        }

        self._archive_configuration = archive_configuration
        self._archive_project = archive_project
        self._has_test_action = has_test_action
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The builds_listToolsetProjects_200_response_xcode_xcodeSchemeContainers_inner_sharedSchemes_inner of this BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archive_configuration(self):
        """Gets the archive_configuration of this BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner.

        Build configuration set in Archive action

        :return: The archive_configuration of this BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner.
        :rtype: str
        """
        return self._archive_configuration

    @archive_configuration.setter
    def archive_configuration(self, archive_configuration):
        """Sets the archive_configuration of this BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner.

        Build configuration set in Archive action

        :param archive_configuration: The archive_configuration of this BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner.
        :type archive_configuration: str
        """

        self._archive_configuration = archive_configuration

    @property
    def archive_project(self):
        """Gets the archive_project of this BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner.


        :return: The archive_project of this BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner.
        :rtype: BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInnerArchiveProject
        """
        return self._archive_project

    @archive_project.setter
    def archive_project(self, archive_project):
        """Sets the archive_project of this BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner.


        :param archive_project: The archive_project of this BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner.
        :type archive_project: BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInnerArchiveProject
        """

        self._archive_project = archive_project

    @property
    def has_test_action(self):
        """Gets the has_test_action of this BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner.

        Does scheme have a test action?

        :return: The has_test_action of this BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner.
        :rtype: bool
        """
        return self._has_test_action

    @has_test_action.setter
    def has_test_action(self, has_test_action):
        """Sets the has_test_action of this BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner.

        Does scheme have a test action?

        :param has_test_action: The has_test_action of this BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner.
        :type has_test_action: bool
        """
        if has_test_action is None:
            raise ValueError("Invalid value for `has_test_action`, must not be `None`")

        self._has_test_action = has_test_action

    @property
    def name(self):
        """Gets the name of this BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner.

        Scheme name

        :return: The name of this BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner.

        Scheme name

        :param name: The name of this BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
