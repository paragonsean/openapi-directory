# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LogFlowDevice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_build: str=None, app_namespace: str=None, app_version: str=None, carrier_code: str=None, carrier_country: str=None, carrier_name: str=None, live_update_deployment_key: str=None, live_update_package_hash: str=None, live_update_release_label: str=None, locale: str=None, model: str=None, oem_name: str=None, os_api_level: int=None, os_build: str=None, os_name: str=None, os_version: str=None, screen_size: str=None, sdk_name: str=None, sdk_version: str=None, time_zone_offset: int=None, wrapper_runtime_version: str=None, wrapper_sdk_name: str=None, wrapper_sdk_version: str=None):
        """LogFlowDevice - a model defined in OpenAPI

        :param app_build: The app_build of this LogFlowDevice.
        :param app_namespace: The app_namespace of this LogFlowDevice.
        :param app_version: The app_version of this LogFlowDevice.
        :param carrier_code: The carrier_code of this LogFlowDevice.
        :param carrier_country: The carrier_country of this LogFlowDevice.
        :param carrier_name: The carrier_name of this LogFlowDevice.
        :param live_update_deployment_key: The live_update_deployment_key of this LogFlowDevice.
        :param live_update_package_hash: The live_update_package_hash of this LogFlowDevice.
        :param live_update_release_label: The live_update_release_label of this LogFlowDevice.
        :param locale: The locale of this LogFlowDevice.
        :param model: The model of this LogFlowDevice.
        :param oem_name: The oem_name of this LogFlowDevice.
        :param os_api_level: The os_api_level of this LogFlowDevice.
        :param os_build: The os_build of this LogFlowDevice.
        :param os_name: The os_name of this LogFlowDevice.
        :param os_version: The os_version of this LogFlowDevice.
        :param screen_size: The screen_size of this LogFlowDevice.
        :param sdk_name: The sdk_name of this LogFlowDevice.
        :param sdk_version: The sdk_version of this LogFlowDevice.
        :param time_zone_offset: The time_zone_offset of this LogFlowDevice.
        :param wrapper_runtime_version: The wrapper_runtime_version of this LogFlowDevice.
        :param wrapper_sdk_name: The wrapper_sdk_name of this LogFlowDevice.
        :param wrapper_sdk_version: The wrapper_sdk_version of this LogFlowDevice.
        """
        self.openapi_types = {
            'app_build': str,
            'app_namespace': str,
            'app_version': str,
            'carrier_code': str,
            'carrier_country': str,
            'carrier_name': str,
            'live_update_deployment_key': str,
            'live_update_package_hash': str,
            'live_update_release_label': str,
            'locale': str,
            'model': str,
            'oem_name': str,
            'os_api_level': int,
            'os_build': str,
            'os_name': str,
            'os_version': str,
            'screen_size': str,
            'sdk_name': str,
            'sdk_version': str,
            'time_zone_offset': int,
            'wrapper_runtime_version': str,
            'wrapper_sdk_name': str,
            'wrapper_sdk_version': str
        }

        self.attribute_map = {
            'app_build': 'app_build',
            'app_namespace': 'app_namespace',
            'app_version': 'app_version',
            'carrier_code': 'carrier_code',
            'carrier_country': 'carrier_country',
            'carrier_name': 'carrier_name',
            'live_update_deployment_key': 'live_update_deployment_key',
            'live_update_package_hash': 'live_update_package_hash',
            'live_update_release_label': 'live_update_release_label',
            'locale': 'locale',
            'model': 'model',
            'oem_name': 'oem_name',
            'os_api_level': 'os_api_level',
            'os_build': 'os_build',
            'os_name': 'os_name',
            'os_version': 'os_version',
            'screen_size': 'screen_size',
            'sdk_name': 'sdk_name',
            'sdk_version': 'sdk_version',
            'time_zone_offset': 'time_zone_offset',
            'wrapper_runtime_version': 'wrapper_runtime_version',
            'wrapper_sdk_name': 'wrapper_sdk_name',
            'wrapper_sdk_version': 'wrapper_sdk_version'
        }

        self._app_build = app_build
        self._app_namespace = app_namespace
        self._app_version = app_version
        self._carrier_code = carrier_code
        self._carrier_country = carrier_country
        self._carrier_name = carrier_name
        self._live_update_deployment_key = live_update_deployment_key
        self._live_update_package_hash = live_update_package_hash
        self._live_update_release_label = live_update_release_label
        self._locale = locale
        self._model = model
        self._oem_name = oem_name
        self._os_api_level = os_api_level
        self._os_build = os_build
        self._os_name = os_name
        self._os_version = os_version
        self._screen_size = screen_size
        self._sdk_name = sdk_name
        self._sdk_version = sdk_version
        self._time_zone_offset = time_zone_offset
        self._wrapper_runtime_version = wrapper_runtime_version
        self._wrapper_sdk_name = wrapper_sdk_name
        self._wrapper_sdk_version = wrapper_sdk_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogFlowDevice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogFlowDevice of this LogFlowDevice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_build(self):
        """Gets the app_build of this LogFlowDevice.

        The app's build number, e.g. 42. 

        :return: The app_build of this LogFlowDevice.
        :rtype: str
        """
        return self._app_build

    @app_build.setter
    def app_build(self, app_build):
        """Sets the app_build of this LogFlowDevice.

        The app's build number, e.g. 42. 

        :param app_build: The app_build of this LogFlowDevice.
        :type app_build: str
        """
        if app_build is None:
            raise ValueError("Invalid value for `app_build`, must not be `None`")

        self._app_build = app_build

    @property
    def app_namespace(self):
        """Gets the app_namespace of this LogFlowDevice.

        The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example. 

        :return: The app_namespace of this LogFlowDevice.
        :rtype: str
        """
        return self._app_namespace

    @app_namespace.setter
    def app_namespace(self, app_namespace):
        """Sets the app_namespace of this LogFlowDevice.

        The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example. 

        :param app_namespace: The app_namespace of this LogFlowDevice.
        :type app_namespace: str
        """

        self._app_namespace = app_namespace

    @property
    def app_version(self):
        """Gets the app_version of this LogFlowDevice.

        Application version name, e.g. 1.1.0 

        :return: The app_version of this LogFlowDevice.
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this LogFlowDevice.

        Application version name, e.g. 1.1.0 

        :param app_version: The app_version of this LogFlowDevice.
        :type app_version: str
        """
        if app_version is None:
            raise ValueError("Invalid value for `app_version`, must not be `None`")

        self._app_version = app_version

    @property
    def carrier_code(self):
        """Gets the carrier_code of this LogFlowDevice.

        Carrier country code (for mobile devices). 

        :return: The carrier_code of this LogFlowDevice.
        :rtype: str
        """
        return self._carrier_code

    @carrier_code.setter
    def carrier_code(self, carrier_code):
        """Sets the carrier_code of this LogFlowDevice.

        Carrier country code (for mobile devices). 

        :param carrier_code: The carrier_code of this LogFlowDevice.
        :type carrier_code: str
        """

        self._carrier_code = carrier_code

    @property
    def carrier_country(self):
        """Gets the carrier_country of this LogFlowDevice.

        Carrier country. 

        :return: The carrier_country of this LogFlowDevice.
        :rtype: str
        """
        return self._carrier_country

    @carrier_country.setter
    def carrier_country(self, carrier_country):
        """Sets the carrier_country of this LogFlowDevice.

        Carrier country. 

        :param carrier_country: The carrier_country of this LogFlowDevice.
        :type carrier_country: str
        """

        self._carrier_country = carrier_country

    @property
    def carrier_name(self):
        """Gets the carrier_name of this LogFlowDevice.

        Carrier name (for mobile devices). 

        :return: The carrier_name of this LogFlowDevice.
        :rtype: str
        """
        return self._carrier_name

    @carrier_name.setter
    def carrier_name(self, carrier_name):
        """Sets the carrier_name of this LogFlowDevice.

        Carrier name (for mobile devices). 

        :param carrier_name: The carrier_name of this LogFlowDevice.
        :type carrier_name: str
        """

        self._carrier_name = carrier_name

    @property
    def live_update_deployment_key(self):
        """Gets the live_update_deployment_key of this LogFlowDevice.

        Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging. 

        :return: The live_update_deployment_key of this LogFlowDevice.
        :rtype: str
        """
        return self._live_update_deployment_key

    @live_update_deployment_key.setter
    def live_update_deployment_key(self, live_update_deployment_key):
        """Sets the live_update_deployment_key of this LogFlowDevice.

        Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging. 

        :param live_update_deployment_key: The live_update_deployment_key of this LogFlowDevice.
        :type live_update_deployment_key: str
        """

        self._live_update_deployment_key = live_update_deployment_key

    @property
    def live_update_package_hash(self):
        """Gets the live_update_package_hash of this LogFlowDevice.

        Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future. 

        :return: The live_update_package_hash of this LogFlowDevice.
        :rtype: str
        """
        return self._live_update_package_hash

    @live_update_package_hash.setter
    def live_update_package_hash(self, live_update_package_hash):
        """Sets the live_update_package_hash of this LogFlowDevice.

        Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future. 

        :param live_update_package_hash: The live_update_package_hash of this LogFlowDevice.
        :type live_update_package_hash: str
        """

        self._live_update_package_hash = live_update_package_hash

    @property
    def live_update_release_label(self):
        """Gets the live_update_release_label of this LogFlowDevice.

        Label that is used to identify application code 'version' released via Live Update beacon running on device 

        :return: The live_update_release_label of this LogFlowDevice.
        :rtype: str
        """
        return self._live_update_release_label

    @live_update_release_label.setter
    def live_update_release_label(self, live_update_release_label):
        """Sets the live_update_release_label of this LogFlowDevice.

        Label that is used to identify application code 'version' released via Live Update beacon running on device 

        :param live_update_release_label: The live_update_release_label of this LogFlowDevice.
        :type live_update_release_label: str
        """

        self._live_update_release_label = live_update_release_label

    @property
    def locale(self):
        """Gets the locale of this LogFlowDevice.

        Language code (example: en_US). 

        :return: The locale of this LogFlowDevice.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this LogFlowDevice.

        Language code (example: en_US). 

        :param locale: The locale of this LogFlowDevice.
        :type locale: str
        """
        if locale is None:
            raise ValueError("Invalid value for `locale`, must not be `None`")

        self._locale = locale

    @property
    def model(self):
        """Gets the model of this LogFlowDevice.

        Device model (example: iPad2,3). 

        :return: The model of this LogFlowDevice.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this LogFlowDevice.

        Device model (example: iPad2,3). 

        :param model: The model of this LogFlowDevice.
        :type model: str
        """

        self._model = model

    @property
    def oem_name(self):
        """Gets the oem_name of this LogFlowDevice.

        Device manufacturer (example: HTC). 

        :return: The oem_name of this LogFlowDevice.
        :rtype: str
        """
        return self._oem_name

    @oem_name.setter
    def oem_name(self, oem_name):
        """Sets the oem_name of this LogFlowDevice.

        Device manufacturer (example: HTC). 

        :param oem_name: The oem_name of this LogFlowDevice.
        :type oem_name: str
        """

        self._oem_name = oem_name

    @property
    def os_api_level(self):
        """Gets the os_api_level of this LogFlowDevice.

        API level when applicable like in Android (example: 15). 

        :return: The os_api_level of this LogFlowDevice.
        :rtype: int
        """
        return self._os_api_level

    @os_api_level.setter
    def os_api_level(self, os_api_level):
        """Sets the os_api_level of this LogFlowDevice.

        API level when applicable like in Android (example: 15). 

        :param os_api_level: The os_api_level of this LogFlowDevice.
        :type os_api_level: int
        """

        self._os_api_level = os_api_level

    @property
    def os_build(self):
        """Gets the os_build of this LogFlowDevice.

        OS build code (example: LMY47X). 

        :return: The os_build of this LogFlowDevice.
        :rtype: str
        """
        return self._os_build

    @os_build.setter
    def os_build(self, os_build):
        """Sets the os_build of this LogFlowDevice.

        OS build code (example: LMY47X). 

        :param os_build: The os_build of this LogFlowDevice.
        :type os_build: str
        """

        self._os_build = os_build

    @property
    def os_name(self):
        """Gets the os_name of this LogFlowDevice.

        OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows. 

        :return: The os_name of this LogFlowDevice.
        :rtype: str
        """
        return self._os_name

    @os_name.setter
    def os_name(self, os_name):
        """Sets the os_name of this LogFlowDevice.

        OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows. 

        :param os_name: The os_name of this LogFlowDevice.
        :type os_name: str
        """
        if os_name is None:
            raise ValueError("Invalid value for `os_name`, must not be `None`")

        self._os_name = os_name

    @property
    def os_version(self):
        """Gets the os_version of this LogFlowDevice.

        OS version (example: 9.3.0). 

        :return: The os_version of this LogFlowDevice.
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this LogFlowDevice.

        OS version (example: 9.3.0). 

        :param os_version: The os_version of this LogFlowDevice.
        :type os_version: str
        """
        if os_version is None:
            raise ValueError("Invalid value for `os_version`, must not be `None`")

        self._os_version = os_version

    @property
    def screen_size(self):
        """Gets the screen_size of this LogFlowDevice.

        Screen size of the device in pixels (example: 640x480). 

        :return: The screen_size of this LogFlowDevice.
        :rtype: str
        """
        return self._screen_size

    @screen_size.setter
    def screen_size(self, screen_size):
        """Sets the screen_size of this LogFlowDevice.

        Screen size of the device in pixels (example: 640x480). 

        :param screen_size: The screen_size of this LogFlowDevice.
        :type screen_size: str
        """

        self._screen_size = screen_size

    @property
    def sdk_name(self):
        """Gets the sdk_name of this LogFlowDevice.

        Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\". 

        :return: The sdk_name of this LogFlowDevice.
        :rtype: str
        """
        return self._sdk_name

    @sdk_name.setter
    def sdk_name(self, sdk_name):
        """Sets the sdk_name of this LogFlowDevice.

        Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\". 

        :param sdk_name: The sdk_name of this LogFlowDevice.
        :type sdk_name: str
        """
        if sdk_name is None:
            raise ValueError("Invalid value for `sdk_name`, must not be `None`")

        self._sdk_name = sdk_name

    @property
    def sdk_version(self):
        """Gets the sdk_version of this LogFlowDevice.

        Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\". 

        :return: The sdk_version of this LogFlowDevice.
        :rtype: str
        """
        return self._sdk_version

    @sdk_version.setter
    def sdk_version(self, sdk_version):
        """Sets the sdk_version of this LogFlowDevice.

        Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\". 

        :param sdk_version: The sdk_version of this LogFlowDevice.
        :type sdk_version: str
        """
        if sdk_version is None:
            raise ValueError("Invalid value for `sdk_version`, must not be `None`")

        self._sdk_version = sdk_version

    @property
    def time_zone_offset(self):
        """Gets the time_zone_offset of this LogFlowDevice.

        The offset in minutes from UTC for the device time zone, including daylight savings time. 

        :return: The time_zone_offset of this LogFlowDevice.
        :rtype: int
        """
        return self._time_zone_offset

    @time_zone_offset.setter
    def time_zone_offset(self, time_zone_offset):
        """Sets the time_zone_offset of this LogFlowDevice.

        The offset in minutes from UTC for the device time zone, including daylight savings time. 

        :param time_zone_offset: The time_zone_offset of this LogFlowDevice.
        :type time_zone_offset: int
        """
        if time_zone_offset is None:
            raise ValueError("Invalid value for `time_zone_offset`, must not be `None`")
        if time_zone_offset is not None and time_zone_offset > 840:
            raise ValueError("Invalid value for `time_zone_offset`, must be a value less than or equal to `840`")
        if time_zone_offset is not None and time_zone_offset < -840:
            raise ValueError("Invalid value for `time_zone_offset`, must be a value greater than or equal to `-840`")

        self._time_zone_offset = time_zone_offset

    @property
    def wrapper_runtime_version(self):
        """Gets the wrapper_runtime_version of this LogFlowDevice.

        Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other. 

        :return: The wrapper_runtime_version of this LogFlowDevice.
        :rtype: str
        """
        return self._wrapper_runtime_version

    @wrapper_runtime_version.setter
    def wrapper_runtime_version(self, wrapper_runtime_version):
        """Sets the wrapper_runtime_version of this LogFlowDevice.

        Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other. 

        :param wrapper_runtime_version: The wrapper_runtime_version of this LogFlowDevice.
        :type wrapper_runtime_version: str
        """

        self._wrapper_runtime_version = wrapper_runtime_version

    @property
    def wrapper_sdk_name(self):
        """Gets the wrapper_sdk_name of this LogFlowDevice.

        Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\". 

        :return: The wrapper_sdk_name of this LogFlowDevice.
        :rtype: str
        """
        return self._wrapper_sdk_name

    @wrapper_sdk_name.setter
    def wrapper_sdk_name(self, wrapper_sdk_name):
        """Sets the wrapper_sdk_name of this LogFlowDevice.

        Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\". 

        :param wrapper_sdk_name: The wrapper_sdk_name of this LogFlowDevice.
        :type wrapper_sdk_name: str
        """

        self._wrapper_sdk_name = wrapper_sdk_name

    @property
    def wrapper_sdk_version(self):
        """Gets the wrapper_sdk_version of this LogFlowDevice.

        Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK. 

        :return: The wrapper_sdk_version of this LogFlowDevice.
        :rtype: str
        """
        return self._wrapper_sdk_version

    @wrapper_sdk_version.setter
    def wrapper_sdk_version(self, wrapper_sdk_version):
        """Sets the wrapper_sdk_version of this LogFlowDevice.

        Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK. 

        :param wrapper_sdk_version: The wrapper_sdk_version of this LogFlowDevice.
        :type wrapper_sdk_version: str
        """

        self._wrapper_sdk_version = wrapper_sdk_version
