# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LegacyCodePushAcquisitionUpdateInstallsStatusRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_version: str=None, client_unique_id: str=None, deployment_key: str=None, label: str=None, previous_deployment_key: str=None, previous_label_or_app_version: str=None, status: str=None):
        """LegacyCodePushAcquisitionUpdateInstallsStatusRequest - a model defined in OpenAPI

        :param app_version: The app_version of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.
        :param client_unique_id: The client_unique_id of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.
        :param deployment_key: The deployment_key of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.
        :param label: The label of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.
        :param previous_deployment_key: The previous_deployment_key of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.
        :param previous_label_or_app_version: The previous_label_or_app_version of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.
        :param status: The status of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.
        """
        self.openapi_types = {
            'app_version': str,
            'client_unique_id': str,
            'deployment_key': str,
            'label': str,
            'previous_deployment_key': str,
            'previous_label_or_app_version': str,
            'status': str
        }

        self.attribute_map = {
            'app_version': 'appVersion',
            'client_unique_id': 'clientUniqueId',
            'deployment_key': 'deploymentKey',
            'label': 'label',
            'previous_deployment_key': 'previousDeploymentKey',
            'previous_label_or_app_version': 'previousLabelOrAppVersion',
            'status': 'status'
        }

        self._app_version = app_version
        self._client_unique_id = client_unique_id
        self._deployment_key = deployment_key
        self._label = label
        self._previous_deployment_key = previous_deployment_key
        self._previous_label_or_app_version = previous_label_or_app_version
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LegacyCodePushAcquisitionUpdateInstallsStatusRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The legacyCodePushAcquisition_updateInstallsStatus_request of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_version(self):
        """Gets the app_version of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.


        :return: The app_version of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.


        :param app_version: The app_version of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.
        :type app_version: str
        """

        self._app_version = app_version

    @property
    def client_unique_id(self):
        """Gets the client_unique_id of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.


        :return: The client_unique_id of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.
        :rtype: str
        """
        return self._client_unique_id

    @client_unique_id.setter
    def client_unique_id(self, client_unique_id):
        """Sets the client_unique_id of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.


        :param client_unique_id: The client_unique_id of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.
        :type client_unique_id: str
        """

        self._client_unique_id = client_unique_id

    @property
    def deployment_key(self):
        """Gets the deployment_key of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.


        :return: The deployment_key of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.
        :rtype: str
        """
        return self._deployment_key

    @deployment_key.setter
    def deployment_key(self, deployment_key):
        """Sets the deployment_key of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.


        :param deployment_key: The deployment_key of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.
        :type deployment_key: str
        """

        self._deployment_key = deployment_key

    @property
    def label(self):
        """Gets the label of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.


        :return: The label of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.


        :param label: The label of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.
        :type label: str
        """

        self._label = label

    @property
    def previous_deployment_key(self):
        """Gets the previous_deployment_key of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.


        :return: The previous_deployment_key of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.
        :rtype: str
        """
        return self._previous_deployment_key

    @previous_deployment_key.setter
    def previous_deployment_key(self, previous_deployment_key):
        """Sets the previous_deployment_key of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.


        :param previous_deployment_key: The previous_deployment_key of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.
        :type previous_deployment_key: str
        """

        self._previous_deployment_key = previous_deployment_key

    @property
    def previous_label_or_app_version(self):
        """Gets the previous_label_or_app_version of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.


        :return: The previous_label_or_app_version of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.
        :rtype: str
        """
        return self._previous_label_or_app_version

    @previous_label_or_app_version.setter
    def previous_label_or_app_version(self, previous_label_or_app_version):
        """Sets the previous_label_or_app_version of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.


        :param previous_label_or_app_version: The previous_label_or_app_version of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.
        :type previous_label_or_app_version: str
        """

        self._previous_label_or_app_version = previous_label_or_app_version

    @property
    def status(self):
        """Gets the status of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.


        :return: The status of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.


        :param status: The status of this LegacyCodePushAcquisitionUpdateInstallsStatusRequest.
        :type status: str
        """

        self._status = status
