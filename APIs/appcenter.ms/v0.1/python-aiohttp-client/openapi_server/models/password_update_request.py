# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PasswordUpdateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, new_password: str=None, old_password: str=None):
        """PasswordUpdateRequest - a model defined in OpenAPI

        :param new_password: The new_password of this PasswordUpdateRequest.
        :param old_password: The old_password of this PasswordUpdateRequest.
        """
        self.openapi_types = {
            'new_password': str,
            'old_password': str
        }

        self.attribute_map = {
            'new_password': 'new_password',
            'old_password': 'old_password'
        }

        self._new_password = new_password
        self._old_password = old_password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PasswordUpdateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PasswordUpdateRequest of this PasswordUpdateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def new_password(self):
        """Gets the new_password of this PasswordUpdateRequest.

        The new password that will be set for the user. Needs to be at least 8 characters long and contain at least one lower- and one uppercase letter.

        :return: The new_password of this PasswordUpdateRequest.
        :rtype: str
        """
        return self._new_password

    @new_password.setter
    def new_password(self, new_password):
        """Sets the new_password of this PasswordUpdateRequest.

        The new password that will be set for the user. Needs to be at least 8 characters long and contain at least one lower- and one uppercase letter.

        :param new_password: The new_password of this PasswordUpdateRequest.
        :type new_password: str
        """
        if new_password is None:
            raise ValueError("Invalid value for `new_password`, must not be `None`")

        self._new_password = new_password

    @property
    def old_password(self):
        """Gets the old_password of this PasswordUpdateRequest.

        The old password, if needed.

        :return: The old_password of this PasswordUpdateRequest.
        :rtype: str
        """
        return self._old_password

    @old_password.setter
    def old_password(self, old_password):
        """Sets the old_password of this PasswordUpdateRequest.

        The old password, if needed.

        :param old_password: The old_password of this PasswordUpdateRequest.
        :type old_password: str
        """

        self._old_password = old_password
