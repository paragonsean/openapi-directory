# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.crash_details import CrashDetails
from openapi_server.models.stacktrace import Stacktrace
from openapi_server import util


class Crash(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build: str=None, crash_id: str=None, details: CrashDetails=None, device: str=None, device_name: str=None, display_id: str=None, new_crash_group_id: str=None, new_crash_id: str=None, os_type: str=None, os_version: str=None, stacktrace: Stacktrace=None, timestamp: datetime=None, user_email: str=None, user_name: str=None, version: str=None):
        """Crash - a model defined in OpenAPI

        :param build: The build of this Crash.
        :param crash_id: The crash_id of this Crash.
        :param details: The details of this Crash.
        :param device: The device of this Crash.
        :param device_name: The device_name of this Crash.
        :param display_id: The display_id of this Crash.
        :param new_crash_group_id: The new_crash_group_id of this Crash.
        :param new_crash_id: The new_crash_id of this Crash.
        :param os_type: The os_type of this Crash.
        :param os_version: The os_version of this Crash.
        :param stacktrace: The stacktrace of this Crash.
        :param timestamp: The timestamp of this Crash.
        :param user_email: The user_email of this Crash.
        :param user_name: The user_name of this Crash.
        :param version: The version of this Crash.
        """
        self.openapi_types = {
            'build': str,
            'crash_id': str,
            'details': CrashDetails,
            'device': str,
            'device_name': str,
            'display_id': str,
            'new_crash_group_id': str,
            'new_crash_id': str,
            'os_type': str,
            'os_version': str,
            'stacktrace': Stacktrace,
            'timestamp': datetime,
            'user_email': str,
            'user_name': str,
            'version': str
        }

        self.attribute_map = {
            'build': 'build',
            'crash_id': 'crash_id',
            'details': 'details',
            'device': 'device',
            'device_name': 'device_name',
            'display_id': 'display_id',
            'new_crash_group_id': 'new_crash_group_id',
            'new_crash_id': 'new_crash_id',
            'os_type': 'os_type',
            'os_version': 'os_version',
            'stacktrace': 'stacktrace',
            'timestamp': 'timestamp',
            'user_email': 'user_email',
            'user_name': 'user_name',
            'version': 'version'
        }

        self._build = build
        self._crash_id = crash_id
        self._details = details
        self._device = device
        self._device_name = device_name
        self._display_id = display_id
        self._new_crash_group_id = new_crash_group_id
        self._new_crash_id = new_crash_id
        self._os_type = os_type
        self._os_version = os_version
        self._stacktrace = stacktrace
        self._timestamp = timestamp
        self._user_email = user_email
        self._user_name = user_name
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Crash':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Crash of this Crash.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build(self):
        """Gets the build of this Crash.

        

        :return: The build of this Crash.
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this Crash.

        

        :param build: The build of this Crash.
        :type build: str
        """
        if build is None:
            raise ValueError("Invalid value for `build`, must not be `None`")

        self._build = build

    @property
    def crash_id(self):
        """Gets the crash_id of this Crash.

        

        :return: The crash_id of this Crash.
        :rtype: str
        """
        return self._crash_id

    @crash_id.setter
    def crash_id(self, crash_id):
        """Sets the crash_id of this Crash.

        

        :param crash_id: The crash_id of this Crash.
        :type crash_id: str
        """
        if crash_id is None:
            raise ValueError("Invalid value for `crash_id`, must not be `None`")

        self._crash_id = crash_id

    @property
    def details(self):
        """Gets the details of this Crash.


        :return: The details of this Crash.
        :rtype: CrashDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Crash.


        :param details: The details of this Crash.
        :type details: CrashDetails
        """

        self._details = details

    @property
    def device(self):
        """Gets the device of this Crash.

        

        :return: The device of this Crash.
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this Crash.

        

        :param device: The device of this Crash.
        :type device: str
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")

        self._device = device

    @property
    def device_name(self):
        """Gets the device_name of this Crash.

        

        :return: The device_name of this Crash.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this Crash.

        

        :param device_name: The device_name of this Crash.
        :type device_name: str
        """

        self._device_name = device_name

    @property
    def display_id(self):
        """Gets the display_id of this Crash.


        :return: The display_id of this Crash.
        :rtype: str
        """
        return self._display_id

    @display_id.setter
    def display_id(self, display_id):
        """Sets the display_id of this Crash.


        :param display_id: The display_id of this Crash.
        :type display_id: str
        """

        self._display_id = display_id

    @property
    def new_crash_group_id(self):
        """Gets the new_crash_group_id of this Crash.

        

        :return: The new_crash_group_id of this Crash.
        :rtype: str
        """
        return self._new_crash_group_id

    @new_crash_group_id.setter
    def new_crash_group_id(self, new_crash_group_id):
        """Sets the new_crash_group_id of this Crash.

        

        :param new_crash_group_id: The new_crash_group_id of this Crash.
        :type new_crash_group_id: str
        """
        if new_crash_group_id is None:
            raise ValueError("Invalid value for `new_crash_group_id`, must not be `None`")

        self._new_crash_group_id = new_crash_group_id

    @property
    def new_crash_id(self):
        """Gets the new_crash_id of this Crash.

        

        :return: The new_crash_id of this Crash.
        :rtype: str
        """
        return self._new_crash_id

    @new_crash_id.setter
    def new_crash_id(self, new_crash_id):
        """Sets the new_crash_id of this Crash.

        

        :param new_crash_id: The new_crash_id of this Crash.
        :type new_crash_id: str
        """
        if new_crash_id is None:
            raise ValueError("Invalid value for `new_crash_id`, must not be `None`")

        self._new_crash_id = new_crash_id

    @property
    def os_type(self):
        """Gets the os_type of this Crash.

        

        :return: The os_type of this Crash.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this Crash.

        

        :param os_type: The os_type of this Crash.
        :type os_type: str
        """

        self._os_type = os_type

    @property
    def os_version(self):
        """Gets the os_version of this Crash.

        

        :return: The os_version of this Crash.
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this Crash.

        

        :param os_version: The os_version of this Crash.
        :type os_version: str
        """
        if os_version is None:
            raise ValueError("Invalid value for `os_version`, must not be `None`")

        self._os_version = os_version

    @property
    def stacktrace(self):
        """Gets the stacktrace of this Crash.


        :return: The stacktrace of this Crash.
        :rtype: Stacktrace
        """
        return self._stacktrace

    @stacktrace.setter
    def stacktrace(self, stacktrace):
        """Sets the stacktrace of this Crash.


        :param stacktrace: The stacktrace of this Crash.
        :type stacktrace: Stacktrace
        """

        self._stacktrace = stacktrace

    @property
    def timestamp(self):
        """Gets the timestamp of this Crash.


        :return: The timestamp of this Crash.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Crash.


        :param timestamp: The timestamp of this Crash.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def user_email(self):
        """Gets the user_email of this Crash.

        

        :return: The user_email of this Crash.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this Crash.

        

        :param user_email: The user_email of this Crash.
        :type user_email: str
        """

        self._user_email = user_email

    @property
    def user_name(self):
        """Gets the user_name of this Crash.

        

        :return: The user_name of this Crash.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this Crash.

        

        :param user_name: The user_name of this Crash.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")

        self._user_name = user_name

    @property
    def version(self):
        """Gets the version of this Crash.

        

        :return: The version of this Crash.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Crash.

        

        :param version: The version of this Crash.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
