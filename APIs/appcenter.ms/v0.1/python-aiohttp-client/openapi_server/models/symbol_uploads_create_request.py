# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SymbolUploadsCreateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build: str=None, client_callback: str=None, file_name: str=None, symbol_type: str=None, version: str=None):
        """SymbolUploadsCreateRequest - a model defined in OpenAPI

        :param build: The build of this SymbolUploadsCreateRequest.
        :param client_callback: The client_callback of this SymbolUploadsCreateRequest.
        :param file_name: The file_name of this SymbolUploadsCreateRequest.
        :param symbol_type: The symbol_type of this SymbolUploadsCreateRequest.
        :param version: The version of this SymbolUploadsCreateRequest.
        """
        self.openapi_types = {
            'build': str,
            'client_callback': str,
            'file_name': str,
            'symbol_type': str,
            'version': str
        }

        self.attribute_map = {
            'build': 'build',
            'client_callback': 'client_callback',
            'file_name': 'file_name',
            'symbol_type': 'symbol_type',
            'version': 'version'
        }

        self._build = build
        self._client_callback = client_callback
        self._file_name = file_name
        self._symbol_type = symbol_type
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SymbolUploadsCreateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The symbolUploads_create_request of this SymbolUploadsCreateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build(self):
        """Gets the build of this SymbolUploadsCreateRequest.

        The build number. Optional for Apple. Required for Android.

        :return: The build of this SymbolUploadsCreateRequest.
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this SymbolUploadsCreateRequest.

        The build number. Optional for Apple. Required for Android.

        :param build: The build of this SymbolUploadsCreateRequest.
        :type build: str
        """

        self._build = build

    @property
    def client_callback(self):
        """Gets the client_callback of this SymbolUploadsCreateRequest.

        The callback URL that the client can optionally provide to get status updates for the current symbol upload

        :return: The client_callback of this SymbolUploadsCreateRequest.
        :rtype: str
        """
        return self._client_callback

    @client_callback.setter
    def client_callback(self, client_callback):
        """Sets the client_callback of this SymbolUploadsCreateRequest.

        The callback URL that the client can optionally provide to get status updates for the current symbol upload

        :param client_callback: The client_callback of this SymbolUploadsCreateRequest.
        :type client_callback: str
        """

        self._client_callback = client_callback

    @property
    def file_name(self):
        """Gets the file_name of this SymbolUploadsCreateRequest.

        The file name for the symbol upload

        :return: The file_name of this SymbolUploadsCreateRequest.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this SymbolUploadsCreateRequest.

        The file name for the symbol upload

        :param file_name: The file_name of this SymbolUploadsCreateRequest.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def symbol_type(self):
        """Gets the symbol_type of this SymbolUploadsCreateRequest.

        The type of the symbol for the current symbol upload

        :return: The symbol_type of this SymbolUploadsCreateRequest.
        :rtype: str
        """
        return self._symbol_type

    @symbol_type.setter
    def symbol_type(self, symbol_type):
        """Sets the symbol_type of this SymbolUploadsCreateRequest.

        The type of the symbol for the current symbol upload

        :param symbol_type: The symbol_type of this SymbolUploadsCreateRequest.
        :type symbol_type: str
        """
        allowed_values = ["Apple", "JavaScript", "Breakpad", "AndroidProguard", "UWP"]  # noqa: E501
        if symbol_type not in allowed_values:
            raise ValueError(
                "Invalid value for `symbol_type` ({0}), must be one of {1}"
                .format(symbol_type, allowed_values)
            )

        self._symbol_type = symbol_type

    @property
    def version(self):
        """Gets the version of this SymbolUploadsCreateRequest.

        The version number. Optional for Apple. Required for Android.

        :return: The version of this SymbolUploadsCreateRequest.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SymbolUploadsCreateRequest.

        The version number. Optional for Apple. Required for Android.

        :param version: The version of this SymbolUploadsCreateRequest.
        :type version: str
        """

        self._version = version
