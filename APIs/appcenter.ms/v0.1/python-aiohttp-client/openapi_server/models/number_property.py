# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class NumberProperty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, value: float=None, name: str=None, type: str=None):
        """NumberProperty - a model defined in OpenAPI

        :param value: The value of this NumberProperty.
        :param name: The name of this NumberProperty.
        :param type: The type of this NumberProperty.
        """
        self.openapi_types = {
            'value': float,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'value': 'value',
            'name': 'name',
            'type': 'type'
        }

        self._value = value
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NumberProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NumberProperty of this NumberProperty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self):
        """Gets the value of this NumberProperty.

        Number property value.

        :return: The value of this NumberProperty.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this NumberProperty.

        Number property value.

        :param value: The value of this NumberProperty.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def name(self):
        """Gets the name of this NumberProperty.


        :return: The name of this NumberProperty.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NumberProperty.


        :param name: The name of this NumberProperty.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and not re.search(r'^[a-zA-Z][a-zA-Z0-9\-_]*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z][a-zA-Z0-9\-_]*$/`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this NumberProperty.


        :return: The type of this NumberProperty.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NumberProperty.


        :param type: The type of this NumberProperty.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
