# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analytics_device_counts200_response_daily_inner import AnalyticsDeviceCounts200ResponseDailyInner
from openapi_server import util


class AnalyticsDeviceCounts200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, daily: List[AnalyticsDeviceCounts200ResponseDailyInner]=None, monthly: List[AnalyticsDeviceCounts200ResponseDailyInner]=None, weekly: List[AnalyticsDeviceCounts200ResponseDailyInner]=None):
        """AnalyticsDeviceCounts200Response - a model defined in OpenAPI

        :param daily: The daily of this AnalyticsDeviceCounts200Response.
        :param monthly: The monthly of this AnalyticsDeviceCounts200Response.
        :param weekly: The weekly of this AnalyticsDeviceCounts200Response.
        """
        self.openapi_types = {
            'daily': List[AnalyticsDeviceCounts200ResponseDailyInner],
            'monthly': List[AnalyticsDeviceCounts200ResponseDailyInner],
            'weekly': List[AnalyticsDeviceCounts200ResponseDailyInner]
        }

        self.attribute_map = {
            'daily': 'daily',
            'monthly': 'monthly',
            'weekly': 'weekly'
        }

        self._daily = daily
        self._monthly = monthly
        self._weekly = weekly

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyticsDeviceCounts200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Analytics_DeviceCounts_200_response of this AnalyticsDeviceCounts200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def daily(self):
        """Gets the daily of this AnalyticsDeviceCounts200Response.

        The active device count for each interval.

        :return: The daily of this AnalyticsDeviceCounts200Response.
        :rtype: List[AnalyticsDeviceCounts200ResponseDailyInner]
        """
        return self._daily

    @daily.setter
    def daily(self, daily):
        """Sets the daily of this AnalyticsDeviceCounts200Response.

        The active device count for each interval.

        :param daily: The daily of this AnalyticsDeviceCounts200Response.
        :type daily: List[AnalyticsDeviceCounts200ResponseDailyInner]
        """

        self._daily = daily

    @property
    def monthly(self):
        """Gets the monthly of this AnalyticsDeviceCounts200Response.

        The active device count for each interval with a month's retention.

        :return: The monthly of this AnalyticsDeviceCounts200Response.
        :rtype: List[AnalyticsDeviceCounts200ResponseDailyInner]
        """
        return self._monthly

    @monthly.setter
    def monthly(self, monthly):
        """Sets the monthly of this AnalyticsDeviceCounts200Response.

        The active device count for each interval with a month's retention.

        :param monthly: The monthly of this AnalyticsDeviceCounts200Response.
        :type monthly: List[AnalyticsDeviceCounts200ResponseDailyInner]
        """

        self._monthly = monthly

    @property
    def weekly(self):
        """Gets the weekly of this AnalyticsDeviceCounts200Response.

        The active device count for each interval with a week's retention.

        :return: The weekly of this AnalyticsDeviceCounts200Response.
        :rtype: List[AnalyticsDeviceCounts200ResponseDailyInner]
        """
        return self._weekly

    @weekly.setter
    def weekly(self, weekly):
        """Sets the weekly of this AnalyticsDeviceCounts200Response.

        The active device count for each interval with a week's retention.

        :param weekly: The weekly of this AnalyticsDeviceCounts200Response.
        :type weekly: List[AnalyticsDeviceCounts200ResponseDailyInner]
        """

        self._weekly = weekly
