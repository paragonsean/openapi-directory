# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppleMappingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apple_id: str=None, bundle_identifier: str=None, service_connection_id: str=None, team_identifier: str=None):
        """AppleMappingRequest - a model defined in OpenAPI

        :param apple_id: The apple_id of this AppleMappingRequest.
        :param bundle_identifier: The bundle_identifier of this AppleMappingRequest.
        :param service_connection_id: The service_connection_id of this AppleMappingRequest.
        :param team_identifier: The team_identifier of this AppleMappingRequest.
        """
        self.openapi_types = {
            'apple_id': str,
            'bundle_identifier': str,
            'service_connection_id': str,
            'team_identifier': str
        }

        self.attribute_map = {
            'apple_id': 'apple_id',
            'bundle_identifier': 'bundle_identifier',
            'service_connection_id': 'service_connection_id',
            'team_identifier': 'team_identifier'
        }

        self._apple_id = apple_id
        self._bundle_identifier = bundle_identifier
        self._service_connection_id = service_connection_id
        self._team_identifier = team_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppleMappingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppleMappingRequest of this AppleMappingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apple_id(self):
        """Gets the apple_id of this AppleMappingRequest.

        ID of the apple application in apple store, takes precedence over bundle_identifier when both are provided

        :return: The apple_id of this AppleMappingRequest.
        :rtype: str
        """
        return self._apple_id

    @apple_id.setter
    def apple_id(self, apple_id):
        """Sets the apple_id of this AppleMappingRequest.

        ID of the apple application in apple store, takes precedence over bundle_identifier when both are provided

        :param apple_id: The apple_id of this AppleMappingRequest.
        :type apple_id: str
        """

        self._apple_id = apple_id

    @property
    def bundle_identifier(self):
        """Gets the bundle_identifier of this AppleMappingRequest.

        Bundle Identifier of the apple package

        :return: The bundle_identifier of this AppleMappingRequest.
        :rtype: str
        """
        return self._bundle_identifier

    @bundle_identifier.setter
    def bundle_identifier(self, bundle_identifier):
        """Sets the bundle_identifier of this AppleMappingRequest.

        Bundle Identifier of the apple package

        :param bundle_identifier: The bundle_identifier of this AppleMappingRequest.
        :type bundle_identifier: str
        """

        self._bundle_identifier = bundle_identifier

    @property
    def service_connection_id(self):
        """Gets the service_connection_id of this AppleMappingRequest.

        Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.

        :return: The service_connection_id of this AppleMappingRequest.
        :rtype: str
        """
        return self._service_connection_id

    @service_connection_id.setter
    def service_connection_id(self, service_connection_id):
        """Sets the service_connection_id of this AppleMappingRequest.

        Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.

        :param service_connection_id: The service_connection_id of this AppleMappingRequest.
        :type service_connection_id: str
        """
        if service_connection_id is None:
            raise ValueError("Invalid value for `service_connection_id`, must not be `None`")

        self._service_connection_id = service_connection_id

    @property
    def team_identifier(self):
        """Gets the team_identifier of this AppleMappingRequest.

        ID of the Team associated with the app in apple store

        :return: The team_identifier of this AppleMappingRequest.
        :rtype: str
        """
        return self._team_identifier

    @team_identifier.setter
    def team_identifier(self, team_identifier):
        """Sets the team_identifier of this AppleMappingRequest.

        ID of the Team associated with the app in apple store

        :param team_identifier: The team_identifier of this AppleMappingRequest.
        :type team_identifier: str
        """
        if team_identifier is None:
            raise ValueError("Invalid value for `team_identifier`, must not be `None`")

        self._team_identifier = team_identifier
