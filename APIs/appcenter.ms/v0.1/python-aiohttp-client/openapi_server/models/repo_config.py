# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RepoConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, state: str=None, type: str=None, user_email: str=None, installation_id: str=None, external_user_id: str=None, repo_id: str=None, repo_url: str=None, service_connection_id: str=None):
        """RepoConfig - a model defined in OpenAPI

        :param id: The id of this RepoConfig.
        :param state: The state of this RepoConfig.
        :param type: The type of this RepoConfig.
        :param user_email: The user_email of this RepoConfig.
        :param installation_id: The installation_id of this RepoConfig.
        :param external_user_id: The external_user_id of this RepoConfig.
        :param repo_id: The repo_id of this RepoConfig.
        :param repo_url: The repo_url of this RepoConfig.
        :param service_connection_id: The service_connection_id of this RepoConfig.
        """
        self.openapi_types = {
            'id': str,
            'state': str,
            'type': str,
            'user_email': str,
            'installation_id': str,
            'external_user_id': str,
            'repo_id': str,
            'repo_url': str,
            'service_connection_id': str
        }

        self.attribute_map = {
            'id': 'id',
            'state': 'state',
            'type': 'type',
            'user_email': 'user_email',
            'installation_id': 'installation_id',
            'external_user_id': 'external_user_id',
            'repo_id': 'repo_id',
            'repo_url': 'repo_url',
            'service_connection_id': 'service_connection_id'
        }

        self._id = id
        self._state = state
        self._type = type
        self._user_email = user_email
        self._installation_id = installation_id
        self._external_user_id = external_user_id
        self._repo_id = repo_id
        self._repo_url = repo_url
        self._service_connection_id = service_connection_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepoConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepoConfig of this RepoConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this RepoConfig.

        Repository configuration identifier

        :return: The id of this RepoConfig.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RepoConfig.

        Repository configuration identifier

        :param id: The id of this RepoConfig.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def state(self):
        """Gets the state of this RepoConfig.

        State of the configuration

        :return: The state of this RepoConfig.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RepoConfig.

        State of the configuration

        :param state: The state of this RepoConfig.
        :type state: str
        """
        allowed_values = ["unauthorized", "inactive", "active"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this RepoConfig.

        Type of repository

        :return: The type of this RepoConfig.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RepoConfig.

        Type of repository

        :param type: The type of this RepoConfig.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def user_email(self):
        """Gets the user_email of this RepoConfig.

        Email of the user who linked the repository

        :return: The user_email of this RepoConfig.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this RepoConfig.

        Email of the user who linked the repository

        :param user_email: The user_email of this RepoConfig.
        :type user_email: str
        """

        self._user_email = user_email

    @property
    def installation_id(self):
        """Gets the installation_id of this RepoConfig.

        The GitHub App Installation id. Required for repositories connected from GitHub App

        :return: The installation_id of this RepoConfig.
        :rtype: str
        """
        return self._installation_id

    @installation_id.setter
    def installation_id(self, installation_id):
        """Sets the installation_id of this RepoConfig.

        The GitHub App Installation id. Required for repositories connected from GitHub App

        :param installation_id: The installation_id of this RepoConfig.
        :type installation_id: str
        """

        self._installation_id = installation_id

    @property
    def external_user_id(self):
        """Gets the external_user_id of this RepoConfig.

        The external user id from the repository provider. Required for GitLab.com repositories

        :return: The external_user_id of this RepoConfig.
        :rtype: str
        """
        return self._external_user_id

    @external_user_id.setter
    def external_user_id(self, external_user_id):
        """Sets the external_user_id of this RepoConfig.

        The external user id from the repository provider. Required for GitLab.com repositories

        :param external_user_id: The external_user_id of this RepoConfig.
        :type external_user_id: str
        """

        self._external_user_id = external_user_id

    @property
    def repo_id(self):
        """Gets the repo_id of this RepoConfig.

        The repository id from the repository provider. Required for repositories connected from GitHub App and GitLab.com

        :return: The repo_id of this RepoConfig.
        :rtype: str
        """
        return self._repo_id

    @repo_id.setter
    def repo_id(self, repo_id):
        """Sets the repo_id of this RepoConfig.

        The repository id from the repository provider. Required for repositories connected from GitHub App and GitLab.com

        :param repo_id: The repo_id of this RepoConfig.
        :type repo_id: str
        """

        self._repo_id = repo_id

    @property
    def repo_url(self):
        """Gets the repo_url of this RepoConfig.

        The repository's git url, must be a HTTPS URL

        :return: The repo_url of this RepoConfig.
        :rtype: str
        """
        return self._repo_url

    @repo_url.setter
    def repo_url(self, repo_url):
        """Sets the repo_url of this RepoConfig.

        The repository's git url, must be a HTTPS URL

        :param repo_url: The repo_url of this RepoConfig.
        :type repo_url: str
        """
        if repo_url is None:
            raise ValueError("Invalid value for `repo_url`, must not be `None`")

        self._repo_url = repo_url

    @property
    def service_connection_id(self):
        """Gets the service_connection_id of this RepoConfig.

        The id of the service connection (private). Required for GitLab self-hosted repositories

        :return: The service_connection_id of this RepoConfig.
        :rtype: str
        """
        return self._service_connection_id

    @service_connection_id.setter
    def service_connection_id(self, service_connection_id):
        """Sets the service_connection_id of this RepoConfig.

        The id of the service connection (private). Required for GitLab self-hosted repositories

        :param service_connection_id: The service_connection_id of this RepoConfig.
        :type service_connection_id: str
        """

        self._service_connection_id = service_connection_id
