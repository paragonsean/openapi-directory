# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_value: str=None, event_type: str=None, value: str=None):
        """EventSetting - a model defined in OpenAPI

        :param default_value: The default_value of this EventSetting.
        :param event_type: The event_type of this EventSetting.
        :param value: The value of this EventSetting.
        """
        self.openapi_types = {
            'default_value': str,
            'event_type': str,
            'value': str
        }

        self.attribute_map = {
            'default_value': 'default_value',
            'event_type': 'event_type',
            'value': 'value'
        }

        self._default_value = default_value
        self._event_type = event_type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventSetting of this EventSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_value(self):
        """Gets the default_value of this EventSetting.

        Default frequency of event

        :return: The default_value of this EventSetting.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this EventSetting.

        Default frequency of event

        :param default_value: The default_value of this EventSetting.
        :type default_value: str
        """
        allowed_values = ["Disabled", "Individual", "Daily", "DailyAndIndividual"]  # noqa: E501
        if default_value not in allowed_values:
            raise ValueError(
                "Invalid value for `default_value` ({0}), must be one of {1}"
                .format(default_value, allowed_values)
            )

        self._default_value = default_value

    @property
    def event_type(self):
        """Gets the event_type of this EventSetting.

        Event Name

        :return: The event_type of this EventSetting.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this EventSetting.

        Event Name

        :param event_type: The event_type of this EventSetting.
        :type event_type: str
        """
        allowed_values = ["crash_newCrashGroupCreated"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def value(self):
        """Gets the value of this EventSetting.

        Frequency of event

        :return: The value of this EventSetting.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this EventSetting.

        Frequency of event

        :param value: The value of this EventSetting.
        :type value: str
        """
        allowed_values = ["Disabled", "Individual", "Daily", "DailyAndIndividual", "Default"]  # noqa: E501
        if value not in allowed_values:
            raise ValueError(
                "Invalid value for `value` ({0}), must be one of {1}"
                .format(value, allowed_values)
            )

        self._value = value
