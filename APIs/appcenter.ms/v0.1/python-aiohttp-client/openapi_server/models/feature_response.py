# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FeatureResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, description: str=None, display_name: str=None, name: str=None, state: int=None, updated_at: str=None):
        """FeatureResponse - a model defined in OpenAPI

        :param created_at: The created_at of this FeatureResponse.
        :param description: The description of this FeatureResponse.
        :param display_name: The display_name of this FeatureResponse.
        :param name: The name of this FeatureResponse.
        :param state: The state of this FeatureResponse.
        :param updated_at: The updated_at of this FeatureResponse.
        """
        self.openapi_types = {
            'created_at': str,
            'description': str,
            'display_name': str,
            'name': str,
            'state': int,
            'updated_at': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'description': 'description',
            'display_name': 'display_name',
            'name': 'name',
            'state': 'state',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._description = description
        self._display_name = display_name
        self._name = name
        self._state = state
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeatureResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeatureResponse of this FeatureResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this FeatureResponse.

        The creation date of the feature

        :return: The created_at of this FeatureResponse.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this FeatureResponse.

        The creation date of the feature

        :param created_at: The created_at of this FeatureResponse.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this FeatureResponse.

        The description of the feature

        :return: The description of this FeatureResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FeatureResponse.

        The description of the feature

        :param description: The description of this FeatureResponse.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this FeatureResponse.

        The friendly name of the feature

        :return: The display_name of this FeatureResponse.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this FeatureResponse.

        The friendly name of the feature

        :param display_name: The display_name of this FeatureResponse.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def name(self):
        """Gets the name of this FeatureResponse.

        The unique name of the feature

        :return: The name of this FeatureResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FeatureResponse.

        The unique name of the feature

        :param name: The name of this FeatureResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def state(self):
        """Gets the state of this FeatureResponse.

        The state (unset, enabled, disabled) of the feature

        :return: The state of this FeatureResponse.
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this FeatureResponse.

        The state (unset, enabled, disabled) of the feature

        :param state: The state of this FeatureResponse.
        :type state: int
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def updated_at(self):
        """Gets the updated_at of this FeatureResponse.

        The date the feature was last updated at

        :return: The updated_at of this FeatureResponse.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this FeatureResponse.

        The date the feature was last updated at

        :param updated_at: The updated_at of this FeatureResponse.
        :type updated_at: str
        """

        self._updated_at = updated_at
