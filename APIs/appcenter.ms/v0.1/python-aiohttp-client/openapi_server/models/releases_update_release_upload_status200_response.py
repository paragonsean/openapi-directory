# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReleasesUpdateReleaseUploadStatus200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, upload_status: str=None):
        """ReleasesUpdateReleaseUploadStatus200Response - a model defined in OpenAPI

        :param id: The id of this ReleasesUpdateReleaseUploadStatus200Response.
        :param upload_status: The upload_status of this ReleasesUpdateReleaseUploadStatus200Response.
        """
        self.openapi_types = {
            'id': str,
            'upload_status': str
        }

        self.attribute_map = {
            'id': 'id',
            'upload_status': 'upload_status'
        }

        self._id = id
        self._upload_status = upload_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReleasesUpdateReleaseUploadStatus200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The releases_updateReleaseUploadStatus_200_response of this ReleasesUpdateReleaseUploadStatus200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ReleasesUpdateReleaseUploadStatus200Response.

        The ID for the upload.

        :return: The id of this ReleasesUpdateReleaseUploadStatus200Response.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReleasesUpdateReleaseUploadStatus200Response.

        The ID for the upload.

        :param id: The id of this ReleasesUpdateReleaseUploadStatus200Response.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def upload_status(self):
        """Gets the upload_status of this ReleasesUpdateReleaseUploadStatus200Response.

        The current upload status.

        :return: The upload_status of this ReleasesUpdateReleaseUploadStatus200Response.
        :rtype: str
        """
        return self._upload_status

    @upload_status.setter
    def upload_status(self, upload_status):
        """Sets the upload_status of this ReleasesUpdateReleaseUploadStatus200Response.

        The current upload status.

        :param upload_status: The upload_status of this ReleasesUpdateReleaseUploadStatus200Response.
        :type upload_status: str
        """
        allowed_values = ["uploadStarted", "uploadFinished", "uploadCanceled", "readyToBePublished", "malwareDetected", "error"]  # noqa: E501
        if upload_status not in allowed_values:
            raise ValueError(
                "Invalid value for `upload_status` ({0}), must be one of {1}"
                .format(upload_status, allowed_values)
            )

        self._upload_status = upload_status
