# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LegacyCodePushApp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, manually_provision_deployments: bool=None, name: str=None, os: str=None, platform: str=None):
        """LegacyCodePushApp - a model defined in OpenAPI

        :param manually_provision_deployments: The manually_provision_deployments of this LegacyCodePushApp.
        :param name: The name of this LegacyCodePushApp.
        :param os: The os of this LegacyCodePushApp.
        :param platform: The platform of this LegacyCodePushApp.
        """
        self.openapi_types = {
            'manually_provision_deployments': bool,
            'name': str,
            'os': str,
            'platform': str
        }

        self.attribute_map = {
            'manually_provision_deployments': 'manuallyProvisionDeployments',
            'name': 'name',
            'os': 'os',
            'platform': 'platform'
        }

        self._manually_provision_deployments = manually_provision_deployments
        self._name = name
        self._os = os
        self._platform = platform

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LegacyCodePushApp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LegacyCodePushApp of this LegacyCodePushApp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def manually_provision_deployments(self):
        """Gets the manually_provision_deployments of this LegacyCodePushApp.

        Whether the user provided their own deployments. Not currently in use.

        :return: The manually_provision_deployments of this LegacyCodePushApp.
        :rtype: bool
        """
        return self._manually_provision_deployments

    @manually_provision_deployments.setter
    def manually_provision_deployments(self, manually_provision_deployments):
        """Sets the manually_provision_deployments of this LegacyCodePushApp.

        Whether the user provided their own deployments. Not currently in use.

        :param manually_provision_deployments: The manually_provision_deployments of this LegacyCodePushApp.
        :type manually_provision_deployments: bool
        """

        self._manually_provision_deployments = manually_provision_deployments

    @property
    def name(self):
        """Gets the name of this LegacyCodePushApp.

        The app name.

        :return: The name of this LegacyCodePushApp.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LegacyCodePushApp.

        The app name.

        :param name: The name of this LegacyCodePushApp.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def os(self):
        """Gets the os of this LegacyCodePushApp.

        The app os.

        :return: The os of this LegacyCodePushApp.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this LegacyCodePushApp.

        The app os.

        :param os: The os of this LegacyCodePushApp.
        :type os: str
        """

        self._os = os

    @property
    def platform(self):
        """Gets the platform of this LegacyCodePushApp.

        The app platform.

        :return: The platform of this LegacyCodePushApp.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this LegacyCodePushApp.

        The app platform.

        :param platform: The platform of this LegacyCodePushApp.
        :type platform: str
        """

        self._platform = platform
