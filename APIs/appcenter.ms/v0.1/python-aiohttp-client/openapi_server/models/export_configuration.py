# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExportConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backfill: bool=None, export_entities: List[str]=None, resource_group: str=None, resource_name: str=None, type: str=None):
        """ExportConfiguration - a model defined in OpenAPI

        :param backfill: The backfill of this ExportConfiguration.
        :param export_entities: The export_entities of this ExportConfiguration.
        :param resource_group: The resource_group of this ExportConfiguration.
        :param resource_name: The resource_name of this ExportConfiguration.
        :param type: The type of this ExportConfiguration.
        """
        self.openapi_types = {
            'backfill': bool,
            'export_entities': List[str],
            'resource_group': str,
            'resource_name': str,
            'type': str
        }

        self.attribute_map = {
            'backfill': 'backfill',
            'export_entities': 'export_entities',
            'resource_group': 'resource_group',
            'resource_name': 'resource_name',
            'type': 'type'
        }

        self._backfill = backfill
        self._export_entities = export_entities
        self._resource_group = resource_group
        self._resource_name = resource_name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExportConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExportConfiguration of this ExportConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backfill(self):
        """Gets the backfill of this ExportConfiguration.

        Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.

        :return: The backfill of this ExportConfiguration.
        :rtype: bool
        """
        return self._backfill

    @backfill.setter
    def backfill(self, backfill):
        """Sets the backfill of this ExportConfiguration.

        Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.

        :param backfill: The backfill of this ExportConfiguration.
        :type backfill: bool
        """

        self._backfill = backfill

    @property
    def export_entities(self):
        """Gets the export_entities of this ExportConfiguration.


        :return: The export_entities of this ExportConfiguration.
        :rtype: List[str]
        """
        return self._export_entities

    @export_entities.setter
    def export_entities(self, export_entities):
        """Sets the export_entities of this ExportConfiguration.


        :param export_entities: The export_entities of this ExportConfiguration.
        :type export_entities: List[str]
        """
        allowed_values = ["crashes", "errors", "attachments", "no_logs"]  # noqa: E501
        if not set(export_entities).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `export_entities` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(export_entities) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._export_entities = export_entities

    @property
    def resource_group(self):
        """Gets the resource_group of this ExportConfiguration.

        The resource group name on azure

        :return: The resource_group of this ExportConfiguration.
        :rtype: str
        """
        return self._resource_group

    @resource_group.setter
    def resource_group(self, resource_group):
        """Sets the resource_group of this ExportConfiguration.

        The resource group name on azure

        :param resource_group: The resource_group of this ExportConfiguration.
        :type resource_group: str
        """

        self._resource_group = resource_group

    @property
    def resource_name(self):
        """Gets the resource_name of this ExportConfiguration.

        The resource name on azure

        :return: The resource_name of this ExportConfiguration.
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this ExportConfiguration.

        The resource name on azure

        :param resource_name: The resource_name of this ExportConfiguration.
        :type resource_name: str
        """

        self._resource_name = resource_name

    @property
    def type(self):
        """Gets the type of this ExportConfiguration.

        Type of export configuration

        :return: The type of this ExportConfiguration.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ExportConfiguration.

        Type of export configuration

        :param type: The type of this ExportConfiguration.
        :type type: str
        """
        allowed_values = ["blob_storage_connection_string", "application_insights_instrumentation_key", "blob_storage_linked_subscription", "application_insights_linked_subscription"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
