# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, app_version: str=None, app_version_id: str=None, build_number: str=None, display_name: str=None):
        """AppVersion - a model defined in OpenAPI

        :param app_id: The app_id of this AppVersion.
        :param app_version: The app_version of this AppVersion.
        :param app_version_id: The app_version_id of this AppVersion.
        :param build_number: The build_number of this AppVersion.
        :param display_name: The display_name of this AppVersion.
        """
        self.openapi_types = {
            'app_id': str,
            'app_version': str,
            'app_version_id': str,
            'build_number': str,
            'display_name': str
        }

        self.attribute_map = {
            'app_id': 'app_id',
            'app_version': 'app_version',
            'app_version_id': 'app_version_id',
            'build_number': 'build_number',
            'display_name': 'display_name'
        }

        self._app_id = app_id
        self._app_version = app_version
        self._app_version_id = app_version_id
        self._build_number = build_number
        self._display_name = display_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppVersion of this AppVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this AppVersion.


        :return: The app_id of this AppVersion.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this AppVersion.


        :param app_id: The app_id of this AppVersion.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def app_version(self):
        """Gets the app_version of this AppVersion.


        :return: The app_version of this AppVersion.
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this AppVersion.


        :param app_version: The app_version of this AppVersion.
        :type app_version: str
        """
        if app_version is None:
            raise ValueError("Invalid value for `app_version`, must not be `None`")

        self._app_version = app_version

    @property
    def app_version_id(self):
        """Gets the app_version_id of this AppVersion.


        :return: The app_version_id of this AppVersion.
        :rtype: str
        """
        return self._app_version_id

    @app_version_id.setter
    def app_version_id(self, app_version_id):
        """Sets the app_version_id of this AppVersion.


        :param app_version_id: The app_version_id of this AppVersion.
        :type app_version_id: str
        """
        if app_version_id is None:
            raise ValueError("Invalid value for `app_version_id`, must not be `None`")

        self._app_version_id = app_version_id

    @property
    def build_number(self):
        """Gets the build_number of this AppVersion.


        :return: The build_number of this AppVersion.
        :rtype: str
        """
        return self._build_number

    @build_number.setter
    def build_number(self, build_number):
        """Sets the build_number of this AppVersion.


        :param build_number: The build_number of this AppVersion.
        :type build_number: str
        """

        self._build_number = build_number

    @property
    def display_name(self):
        """Gets the display_name of this AppVersion.


        :return: The display_name of this AppVersion.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AppVersion.


        :param display_name: The display_name of this AppVersion.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name
