# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResignAttemptResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, context_id: str=None, destinations: List[object]=None, error_code: str=None, error_message: str=None, original_release_id: float=None, resign_id: str=None, start_time: float=None, status: str=None, user_id: str=None):
        """ResignAttemptResponse - a model defined in OpenAPI

        :param app_id: The app_id of this ResignAttemptResponse.
        :param context_id: The context_id of this ResignAttemptResponse.
        :param destinations: The destinations of this ResignAttemptResponse.
        :param error_code: The error_code of this ResignAttemptResponse.
        :param error_message: The error_message of this ResignAttemptResponse.
        :param original_release_id: The original_release_id of this ResignAttemptResponse.
        :param resign_id: The resign_id of this ResignAttemptResponse.
        :param start_time: The start_time of this ResignAttemptResponse.
        :param status: The status of this ResignAttemptResponse.
        :param user_id: The user_id of this ResignAttemptResponse.
        """
        self.openapi_types = {
            'app_id': str,
            'context_id': str,
            'destinations': List[object],
            'error_code': str,
            'error_message': str,
            'original_release_id': float,
            'resign_id': str,
            'start_time': float,
            'status': str,
            'user_id': str
        }

        self.attribute_map = {
            'app_id': 'appId',
            'context_id': 'contextId',
            'destinations': 'destinations',
            'error_code': 'errorCode',
            'error_message': 'errorMessage',
            'original_release_id': 'originalReleaseId',
            'resign_id': 'resignId',
            'start_time': 'startTime',
            'status': 'status',
            'user_id': 'userId'
        }

        self._app_id = app_id
        self._context_id = context_id
        self._destinations = destinations
        self._error_code = error_code
        self._error_message = error_message
        self._original_release_id = original_release_id
        self._resign_id = resign_id
        self._start_time = start_time
        self._status = status
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResignAttemptResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResignAttemptResponse of this ResignAttemptResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this ResignAttemptResponse.

        App ID that the resign operation is being performed against.

        :return: The app_id of this ResignAttemptResponse.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this ResignAttemptResponse.

        App ID that the resign operation is being performed against.

        :param app_id: The app_id of this ResignAttemptResponse.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def context_id(self):
        """Gets the context_id of this ResignAttemptResponse.

        Context ID for the resigning operation.

        :return: The context_id of this ResignAttemptResponse.
        :rtype: str
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id):
        """Sets the context_id of this ResignAttemptResponse.

        Context ID for the resigning operation.

        :param context_id: The context_id of this ResignAttemptResponse.
        :type context_id: str
        """
        if context_id is None:
            raise ValueError("Invalid value for `context_id`, must not be `None`")

        self._context_id = context_id

    @property
    def destinations(self):
        """Gets the destinations of this ResignAttemptResponse.

        List of destinations that the resign operation is being performed against.

        :return: The destinations of this ResignAttemptResponse.
        :rtype: List[object]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this ResignAttemptResponse.

        List of destinations that the resign operation is being performed against.

        :param destinations: The destinations of this ResignAttemptResponse.
        :type destinations: List[object]
        """

        self._destinations = destinations

    @property
    def error_code(self):
        """Gets the error_code of this ResignAttemptResponse.

        Error code associated with the exception.

        :return: The error_code of this ResignAttemptResponse.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ResignAttemptResponse.

        Error code associated with the exception.

        :param error_code: The error_code of this ResignAttemptResponse.
        :type error_code: str
        """

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this ResignAttemptResponse.

        Error message associated with the exception.

        :return: The error_message of this ResignAttemptResponse.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ResignAttemptResponse.

        Error message associated with the exception.

        :param error_message: The error_message of this ResignAttemptResponse.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def original_release_id(self):
        """Gets the original_release_id of this ResignAttemptResponse.

        ID of the release which is being resigned.

        :return: The original_release_id of this ResignAttemptResponse.
        :rtype: float
        """
        return self._original_release_id

    @original_release_id.setter
    def original_release_id(self, original_release_id):
        """Sets the original_release_id of this ResignAttemptResponse.

        ID of the release which is being resigned.

        :param original_release_id: The original_release_id of this ResignAttemptResponse.
        :type original_release_id: float
        """
        if original_release_id is None:
            raise ValueError("Invalid value for `original_release_id`, must not be `None`")

        self._original_release_id = original_release_id

    @property
    def resign_id(self):
        """Gets the resign_id of this ResignAttemptResponse.

        ID of the resign operation.

        :return: The resign_id of this ResignAttemptResponse.
        :rtype: str
        """
        return self._resign_id

    @resign_id.setter
    def resign_id(self, resign_id):
        """Sets the resign_id of this ResignAttemptResponse.

        ID of the resign operation.

        :param resign_id: The resign_id of this ResignAttemptResponse.
        :type resign_id: str
        """
        if resign_id is None:
            raise ValueError("Invalid value for `resign_id`, must not be `None`")

        self._resign_id = resign_id

    @property
    def start_time(self):
        """Gets the start_time of this ResignAttemptResponse.

        The time that the resign operation was started.

        :return: The start_time of this ResignAttemptResponse.
        :rtype: float
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ResignAttemptResponse.

        The time that the resign operation was started.

        :param start_time: The start_time of this ResignAttemptResponse.
        :type start_time: float
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this ResignAttemptResponse.

        The status of the resigning operation.

        :return: The status of this ResignAttemptResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResignAttemptResponse.

        The status of the resigning operation.

        :param status: The status of this ResignAttemptResponse.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def user_id(self):
        """Gets the user_id of this ResignAttemptResponse.

        ID of the user performing the resign operaiton.

        :return: The user_id of this ResignAttemptResponse.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ResignAttemptResponse.

        ID of the user performing the resign operaiton.

        :param user_id: The user_id of this ResignAttemptResponse.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
