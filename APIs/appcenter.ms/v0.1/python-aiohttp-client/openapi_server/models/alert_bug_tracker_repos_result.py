# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alert_bug_tracker_repos_result_repositories_inner import AlertBugTrackerReposResultRepositoriesInner
from openapi_server import util


class AlertBugTrackerReposResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repo_type: str=None, repositories: List[AlertBugTrackerReposResultRepositoriesInner]=None):
        """AlertBugTrackerReposResult - a model defined in OpenAPI

        :param repo_type: The repo_type of this AlertBugTrackerReposResult.
        :param repositories: The repositories of this AlertBugTrackerReposResult.
        """
        self.openapi_types = {
            'repo_type': str,
            'repositories': List[AlertBugTrackerReposResultRepositoriesInner]
        }

        self.attribute_map = {
            'repo_type': 'repo_type',
            'repositories': 'repositories'
        }

        self._repo_type = repo_type
        self._repositories = repositories

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertBugTrackerReposResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlertBugTrackerReposResult of this AlertBugTrackerReposResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repo_type(self):
        """Gets the repo_type of this AlertBugTrackerReposResult.


        :return: The repo_type of this AlertBugTrackerReposResult.
        :rtype: str
        """
        return self._repo_type

    @repo_type.setter
    def repo_type(self, repo_type):
        """Sets the repo_type of this AlertBugTrackerReposResult.


        :param repo_type: The repo_type of this AlertBugTrackerReposResult.
        :type repo_type: str
        """
        allowed_values = ["github", "vsts", "jira"]  # noqa: E501
        if repo_type not in allowed_values:
            raise ValueError(
                "Invalid value for `repo_type` ({0}), must be one of {1}"
                .format(repo_type, allowed_values)
            )

        self._repo_type = repo_type

    @property
    def repositories(self):
        """Gets the repositories of this AlertBugTrackerReposResult.


        :return: The repositories of this AlertBugTrackerReposResult.
        :rtype: List[AlertBugTrackerReposResultRepositoriesInner]
        """
        return self._repositories

    @repositories.setter
    def repositories(self, repositories):
        """Sets the repositories of this AlertBugTrackerReposResult.


        :param repositories: The repositories of this AlertBugTrackerReposResult.
        :type repositories: List[AlertBugTrackerReposResultRepositoriesInner]
        """
        if repositories is None:
            raise ValueError("Invalid value for `repositories`, must not be `None`")

        self._repositories = repositories
