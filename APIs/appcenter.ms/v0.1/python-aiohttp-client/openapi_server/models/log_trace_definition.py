# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LogTraceDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_secret: str=None, expiration: datetime=None, install_id: str=None):
        """LogTraceDefinition - a model defined in OpenAPI

        :param app_secret: The app_secret of this LogTraceDefinition.
        :param expiration: The expiration of this LogTraceDefinition.
        :param install_id: The install_id of this LogTraceDefinition.
        """
        self.openapi_types = {
            'app_secret': str,
            'expiration': datetime,
            'install_id': str
        }

        self.attribute_map = {
            'app_secret': 'app_secret',
            'expiration': 'expiration',
            'install_id': 'install_id'
        }

        self._app_secret = app_secret
        self._expiration = expiration
        self._install_id = install_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogTraceDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogTraceDefinition of this LogTraceDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_secret(self):
        """Gets the app_secret of this LogTraceDefinition.


        :return: The app_secret of this LogTraceDefinition.
        :rtype: str
        """
        return self._app_secret

    @app_secret.setter
    def app_secret(self, app_secret):
        """Sets the app_secret of this LogTraceDefinition.


        :param app_secret: The app_secret of this LogTraceDefinition.
        :type app_secret: str
        """
        if app_secret is None:
            raise ValueError("Invalid value for `app_secret`, must not be `None`")

        self._app_secret = app_secret

    @property
    def expiration(self):
        """Gets the expiration of this LogTraceDefinition.


        :return: The expiration of this LogTraceDefinition.
        :rtype: datetime
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this LogTraceDefinition.


        :param expiration: The expiration of this LogTraceDefinition.
        :type expiration: datetime
        """

        self._expiration = expiration

    @property
    def install_id(self):
        """Gets the install_id of this LogTraceDefinition.


        :return: The install_id of this LogTraceDefinition.
        :rtype: str
        """
        return self._install_id

    @install_id.setter
    def install_id(self, install_id):
        """Sets the install_id of this LogTraceDefinition.


        :param install_id: The install_id of this LogTraceDefinition.
        :type install_id: str
        """

        self._install_id = install_id
