# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RepositoryConfigurationsCreateOrUpdateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, installation_id: str=None, external_user_id: str=None, repo_id: str=None, repo_url: str=None, service_connection_id: str=None):
        """RepositoryConfigurationsCreateOrUpdateRequest - a model defined in OpenAPI

        :param installation_id: The installation_id of this RepositoryConfigurationsCreateOrUpdateRequest.
        :param external_user_id: The external_user_id of this RepositoryConfigurationsCreateOrUpdateRequest.
        :param repo_id: The repo_id of this RepositoryConfigurationsCreateOrUpdateRequest.
        :param repo_url: The repo_url of this RepositoryConfigurationsCreateOrUpdateRequest.
        :param service_connection_id: The service_connection_id of this RepositoryConfigurationsCreateOrUpdateRequest.
        """
        self.openapi_types = {
            'installation_id': str,
            'external_user_id': str,
            'repo_id': str,
            'repo_url': str,
            'service_connection_id': str
        }

        self.attribute_map = {
            'installation_id': 'installation_id',
            'external_user_id': 'external_user_id',
            'repo_id': 'repo_id',
            'repo_url': 'repo_url',
            'service_connection_id': 'service_connection_id'
        }

        self._installation_id = installation_id
        self._external_user_id = external_user_id
        self._repo_id = repo_id
        self._repo_url = repo_url
        self._service_connection_id = service_connection_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepositoryConfigurationsCreateOrUpdateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The repositoryConfigurations_createOrUpdate_request of this RepositoryConfigurationsCreateOrUpdateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def installation_id(self):
        """Gets the installation_id of this RepositoryConfigurationsCreateOrUpdateRequest.

        The GitHub App Installation id. Required for repositories connected from GitHub App

        :return: The installation_id of this RepositoryConfigurationsCreateOrUpdateRequest.
        :rtype: str
        """
        return self._installation_id

    @installation_id.setter
    def installation_id(self, installation_id):
        """Sets the installation_id of this RepositoryConfigurationsCreateOrUpdateRequest.

        The GitHub App Installation id. Required for repositories connected from GitHub App

        :param installation_id: The installation_id of this RepositoryConfigurationsCreateOrUpdateRequest.
        :type installation_id: str
        """

        self._installation_id = installation_id

    @property
    def external_user_id(self):
        """Gets the external_user_id of this RepositoryConfigurationsCreateOrUpdateRequest.

        The external user id from the repository provider. Required for GitLab.com repositories

        :return: The external_user_id of this RepositoryConfigurationsCreateOrUpdateRequest.
        :rtype: str
        """
        return self._external_user_id

    @external_user_id.setter
    def external_user_id(self, external_user_id):
        """Sets the external_user_id of this RepositoryConfigurationsCreateOrUpdateRequest.

        The external user id from the repository provider. Required for GitLab.com repositories

        :param external_user_id: The external_user_id of this RepositoryConfigurationsCreateOrUpdateRequest.
        :type external_user_id: str
        """

        self._external_user_id = external_user_id

    @property
    def repo_id(self):
        """Gets the repo_id of this RepositoryConfigurationsCreateOrUpdateRequest.

        The repository id from the repository provider. Required for repositories connected from GitHub App and GitLab.com

        :return: The repo_id of this RepositoryConfigurationsCreateOrUpdateRequest.
        :rtype: str
        """
        return self._repo_id

    @repo_id.setter
    def repo_id(self, repo_id):
        """Sets the repo_id of this RepositoryConfigurationsCreateOrUpdateRequest.

        The repository id from the repository provider. Required for repositories connected from GitHub App and GitLab.com

        :param repo_id: The repo_id of this RepositoryConfigurationsCreateOrUpdateRequest.
        :type repo_id: str
        """

        self._repo_id = repo_id

    @property
    def repo_url(self):
        """Gets the repo_url of this RepositoryConfigurationsCreateOrUpdateRequest.

        The repository's git url, must be a HTTPS URL

        :return: The repo_url of this RepositoryConfigurationsCreateOrUpdateRequest.
        :rtype: str
        """
        return self._repo_url

    @repo_url.setter
    def repo_url(self, repo_url):
        """Sets the repo_url of this RepositoryConfigurationsCreateOrUpdateRequest.

        The repository's git url, must be a HTTPS URL

        :param repo_url: The repo_url of this RepositoryConfigurationsCreateOrUpdateRequest.
        :type repo_url: str
        """
        if repo_url is None:
            raise ValueError("Invalid value for `repo_url`, must not be `None`")

        self._repo_url = repo_url

    @property
    def service_connection_id(self):
        """Gets the service_connection_id of this RepositoryConfigurationsCreateOrUpdateRequest.

        The id of the service connection (private). Required for GitLab self-hosted repositories

        :return: The service_connection_id of this RepositoryConfigurationsCreateOrUpdateRequest.
        :rtype: str
        """
        return self._service_connection_id

    @service_connection_id.setter
    def service_connection_id(self, service_connection_id):
        """Sets the service_connection_id of this RepositoryConfigurationsCreateOrUpdateRequest.

        The id of the service connection (private). Required for GitLab self-hosted repositories

        :param service_connection_id: The service_connection_id of this RepositoryConfigurationsCreateOrUpdateRequest.
        :type service_connection_id: str
        """

        self._service_connection_id = service_connection_id
