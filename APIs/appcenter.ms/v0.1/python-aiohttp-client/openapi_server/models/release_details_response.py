# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.releases_get_latest_by_distribution_group200_response_build import ReleasesGetLatestByDistributionGroup200ResponseBuild
from openapi_server.models.releases_get_latest_by_distribution_group200_response_destinations_inner import ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner
from openapi_server.models.releases_get_latest_by_distribution_group200_response_distribution_groups_inner import ReleasesGetLatestByDistributionGroup200ResponseDistributionGroupsInner
from openapi_server.models.releases_get_latest_by_distribution_group200_response_distribution_stores_inner import ReleasesGetLatestByDistributionGroup200ResponseDistributionStoresInner
from openapi_server import util


class ReleaseDetailsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, android_min_api_level: str=None, app_display_name: str=None, app_icon_url: str=None, app_name: str=None, app_os: str=None, build: ReleasesGetLatestByDistributionGroup200ResponseBuild=None, bundle_identifier: str=None, can_resign: bool=None, destination_type: str=None, destinations: List[ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner]=None, device_family: str=None, distribution_groups: List[ReleasesGetLatestByDistributionGroup200ResponseDistributionGroupsInner]=None, distribution_stores: List[ReleasesGetLatestByDistributionGroup200ResponseDistributionStoresInner]=None, download_url: str=None, enabled: bool=None, fingerprint: str=None, id: int=None, install_url: str=None, is_external_build: bool=None, is_provisioning_profile_syncing: bool=None, is_udid_provisioned: bool=None, min_os: str=None, origin: str=None, package_hashes: List[str]=None, provisioning_profile_expiry_date: str=None, provisioning_profile_name: str=None, provisioning_profile_type: str=None, release_notes: str=None, secondary_download_url: str=None, short_version: str=None, size: int=None, status: str=None, uploaded_at: str=None, version: str=None):
        """ReleaseDetailsResponse - a model defined in OpenAPI

        :param android_min_api_level: The android_min_api_level of this ReleaseDetailsResponse.
        :param app_display_name: The app_display_name of this ReleaseDetailsResponse.
        :param app_icon_url: The app_icon_url of this ReleaseDetailsResponse.
        :param app_name: The app_name of this ReleaseDetailsResponse.
        :param app_os: The app_os of this ReleaseDetailsResponse.
        :param build: The build of this ReleaseDetailsResponse.
        :param bundle_identifier: The bundle_identifier of this ReleaseDetailsResponse.
        :param can_resign: The can_resign of this ReleaseDetailsResponse.
        :param destination_type: The destination_type of this ReleaseDetailsResponse.
        :param destinations: The destinations of this ReleaseDetailsResponse.
        :param device_family: The device_family of this ReleaseDetailsResponse.
        :param distribution_groups: The distribution_groups of this ReleaseDetailsResponse.
        :param distribution_stores: The distribution_stores of this ReleaseDetailsResponse.
        :param download_url: The download_url of this ReleaseDetailsResponse.
        :param enabled: The enabled of this ReleaseDetailsResponse.
        :param fingerprint: The fingerprint of this ReleaseDetailsResponse.
        :param id: The id of this ReleaseDetailsResponse.
        :param install_url: The install_url of this ReleaseDetailsResponse.
        :param is_external_build: The is_external_build of this ReleaseDetailsResponse.
        :param is_provisioning_profile_syncing: The is_provisioning_profile_syncing of this ReleaseDetailsResponse.
        :param is_udid_provisioned: The is_udid_provisioned of this ReleaseDetailsResponse.
        :param min_os: The min_os of this ReleaseDetailsResponse.
        :param origin: The origin of this ReleaseDetailsResponse.
        :param package_hashes: The package_hashes of this ReleaseDetailsResponse.
        :param provisioning_profile_expiry_date: The provisioning_profile_expiry_date of this ReleaseDetailsResponse.
        :param provisioning_profile_name: The provisioning_profile_name of this ReleaseDetailsResponse.
        :param provisioning_profile_type: The provisioning_profile_type of this ReleaseDetailsResponse.
        :param release_notes: The release_notes of this ReleaseDetailsResponse.
        :param secondary_download_url: The secondary_download_url of this ReleaseDetailsResponse.
        :param short_version: The short_version of this ReleaseDetailsResponse.
        :param size: The size of this ReleaseDetailsResponse.
        :param status: The status of this ReleaseDetailsResponse.
        :param uploaded_at: The uploaded_at of this ReleaseDetailsResponse.
        :param version: The version of this ReleaseDetailsResponse.
        """
        self.openapi_types = {
            'android_min_api_level': str,
            'app_display_name': str,
            'app_icon_url': str,
            'app_name': str,
            'app_os': str,
            'build': ReleasesGetLatestByDistributionGroup200ResponseBuild,
            'bundle_identifier': str,
            'can_resign': bool,
            'destination_type': str,
            'destinations': List[ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner],
            'device_family': str,
            'distribution_groups': List[ReleasesGetLatestByDistributionGroup200ResponseDistributionGroupsInner],
            'distribution_stores': List[ReleasesGetLatestByDistributionGroup200ResponseDistributionStoresInner],
            'download_url': str,
            'enabled': bool,
            'fingerprint': str,
            'id': int,
            'install_url': str,
            'is_external_build': bool,
            'is_provisioning_profile_syncing': bool,
            'is_udid_provisioned': bool,
            'min_os': str,
            'origin': str,
            'package_hashes': List[str],
            'provisioning_profile_expiry_date': str,
            'provisioning_profile_name': str,
            'provisioning_profile_type': str,
            'release_notes': str,
            'secondary_download_url': str,
            'short_version': str,
            'size': int,
            'status': str,
            'uploaded_at': str,
            'version': str
        }

        self.attribute_map = {
            'android_min_api_level': 'android_min_api_level',
            'app_display_name': 'app_display_name',
            'app_icon_url': 'app_icon_url',
            'app_name': 'app_name',
            'app_os': 'app_os',
            'build': 'build',
            'bundle_identifier': 'bundle_identifier',
            'can_resign': 'can_resign',
            'destination_type': 'destination_type',
            'destinations': 'destinations',
            'device_family': 'device_family',
            'distribution_groups': 'distribution_groups',
            'distribution_stores': 'distribution_stores',
            'download_url': 'download_url',
            'enabled': 'enabled',
            'fingerprint': 'fingerprint',
            'id': 'id',
            'install_url': 'install_url',
            'is_external_build': 'is_external_build',
            'is_provisioning_profile_syncing': 'is_provisioning_profile_syncing',
            'is_udid_provisioned': 'is_udid_provisioned',
            'min_os': 'min_os',
            'origin': 'origin',
            'package_hashes': 'package_hashes',
            'provisioning_profile_expiry_date': 'provisioning_profile_expiry_date',
            'provisioning_profile_name': 'provisioning_profile_name',
            'provisioning_profile_type': 'provisioning_profile_type',
            'release_notes': 'release_notes',
            'secondary_download_url': 'secondary_download_url',
            'short_version': 'short_version',
            'size': 'size',
            'status': 'status',
            'uploaded_at': 'uploaded_at',
            'version': 'version'
        }

        self._android_min_api_level = android_min_api_level
        self._app_display_name = app_display_name
        self._app_icon_url = app_icon_url
        self._app_name = app_name
        self._app_os = app_os
        self._build = build
        self._bundle_identifier = bundle_identifier
        self._can_resign = can_resign
        self._destination_type = destination_type
        self._destinations = destinations
        self._device_family = device_family
        self._distribution_groups = distribution_groups
        self._distribution_stores = distribution_stores
        self._download_url = download_url
        self._enabled = enabled
        self._fingerprint = fingerprint
        self._id = id
        self._install_url = install_url
        self._is_external_build = is_external_build
        self._is_provisioning_profile_syncing = is_provisioning_profile_syncing
        self._is_udid_provisioned = is_udid_provisioned
        self._min_os = min_os
        self._origin = origin
        self._package_hashes = package_hashes
        self._provisioning_profile_expiry_date = provisioning_profile_expiry_date
        self._provisioning_profile_name = provisioning_profile_name
        self._provisioning_profile_type = provisioning_profile_type
        self._release_notes = release_notes
        self._secondary_download_url = secondary_download_url
        self._short_version = short_version
        self._size = size
        self._status = status
        self._uploaded_at = uploaded_at
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReleaseDetailsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReleaseDetailsResponse of this ReleaseDetailsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def android_min_api_level(self):
        """Gets the android_min_api_level of this ReleaseDetailsResponse.

        The release's minimum required Android API level.

        :return: The android_min_api_level of this ReleaseDetailsResponse.
        :rtype: str
        """
        return self._android_min_api_level

    @android_min_api_level.setter
    def android_min_api_level(self, android_min_api_level):
        """Sets the android_min_api_level of this ReleaseDetailsResponse.

        The release's minimum required Android API level.

        :param android_min_api_level: The android_min_api_level of this ReleaseDetailsResponse.
        :type android_min_api_level: str
        """

        self._android_min_api_level = android_min_api_level

    @property
    def app_display_name(self):
        """Gets the app_display_name of this ReleaseDetailsResponse.

        The app's display name.

        :return: The app_display_name of this ReleaseDetailsResponse.
        :rtype: str
        """
        return self._app_display_name

    @app_display_name.setter
    def app_display_name(self, app_display_name):
        """Sets the app_display_name of this ReleaseDetailsResponse.

        The app's display name.

        :param app_display_name: The app_display_name of this ReleaseDetailsResponse.
        :type app_display_name: str
        """
        if app_display_name is None:
            raise ValueError("Invalid value for `app_display_name`, must not be `None`")

        self._app_display_name = app_display_name

    @property
    def app_icon_url(self):
        """Gets the app_icon_url of this ReleaseDetailsResponse.

        A URL to the app's icon.

        :return: The app_icon_url of this ReleaseDetailsResponse.
        :rtype: str
        """
        return self._app_icon_url

    @app_icon_url.setter
    def app_icon_url(self, app_icon_url):
        """Sets the app_icon_url of this ReleaseDetailsResponse.

        A URL to the app's icon.

        :param app_icon_url: The app_icon_url of this ReleaseDetailsResponse.
        :type app_icon_url: str
        """
        if app_icon_url is None:
            raise ValueError("Invalid value for `app_icon_url`, must not be `None`")

        self._app_icon_url = app_icon_url

    @property
    def app_name(self):
        """Gets the app_name of this ReleaseDetailsResponse.

        The app's name (extracted from the uploaded release).

        :return: The app_name of this ReleaseDetailsResponse.
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this ReleaseDetailsResponse.

        The app's name (extracted from the uploaded release).

        :param app_name: The app_name of this ReleaseDetailsResponse.
        :type app_name: str
        """
        if app_name is None:
            raise ValueError("Invalid value for `app_name`, must not be `None`")

        self._app_name = app_name

    @property
    def app_os(self):
        """Gets the app_os of this ReleaseDetailsResponse.

        The app's OS.

        :return: The app_os of this ReleaseDetailsResponse.
        :rtype: str
        """
        return self._app_os

    @app_os.setter
    def app_os(self, app_os):
        """Sets the app_os of this ReleaseDetailsResponse.

        The app's OS.

        :param app_os: The app_os of this ReleaseDetailsResponse.
        :type app_os: str
        """

        self._app_os = app_os

    @property
    def build(self):
        """Gets the build of this ReleaseDetailsResponse.


        :return: The build of this ReleaseDetailsResponse.
        :rtype: ReleasesGetLatestByDistributionGroup200ResponseBuild
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this ReleaseDetailsResponse.


        :param build: The build of this ReleaseDetailsResponse.
        :type build: ReleasesGetLatestByDistributionGroup200ResponseBuild
        """

        self._build = build

    @property
    def bundle_identifier(self):
        """Gets the bundle_identifier of this ReleaseDetailsResponse.

        The identifier of the apps bundle.

        :return: The bundle_identifier of this ReleaseDetailsResponse.
        :rtype: str
        """
        return self._bundle_identifier

    @bundle_identifier.setter
    def bundle_identifier(self, bundle_identifier):
        """Sets the bundle_identifier of this ReleaseDetailsResponse.

        The identifier of the apps bundle.

        :param bundle_identifier: The bundle_identifier of this ReleaseDetailsResponse.
        :type bundle_identifier: str
        """

        self._bundle_identifier = bundle_identifier

    @property
    def can_resign(self):
        """Gets the can_resign of this ReleaseDetailsResponse.

        In calls that allow passing `udid` in the query string, this value determines if a release can be re-signed. When true, after a re-sign, the tester will be able to install the release from his registered devices. Will not be returned for non-iOS platforms.

        :return: The can_resign of this ReleaseDetailsResponse.
        :rtype: bool
        """
        return self._can_resign

    @can_resign.setter
    def can_resign(self, can_resign):
        """Sets the can_resign of this ReleaseDetailsResponse.

        In calls that allow passing `udid` in the query string, this value determines if a release can be re-signed. When true, after a re-sign, the tester will be able to install the release from his registered devices. Will not be returned for non-iOS platforms.

        :param can_resign: The can_resign of this ReleaseDetailsResponse.
        :type can_resign: bool
        """

        self._can_resign = can_resign

    @property
    def destination_type(self):
        """Gets the destination_type of this ReleaseDetailsResponse.

        OBSOLETE. Will be removed in next version. The destination type.<br> <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br> <b>store</b>: The release distributed to external stores and distribution_stores details will be returned.<br> <b>tester</b>: The release distributed testers details will be returned.<br> 

        :return: The destination_type of this ReleaseDetailsResponse.
        :rtype: str
        """
        return self._destination_type

    @destination_type.setter
    def destination_type(self, destination_type):
        """Sets the destination_type of this ReleaseDetailsResponse.

        OBSOLETE. Will be removed in next version. The destination type.<br> <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br> <b>store</b>: The release distributed to external stores and distribution_stores details will be returned.<br> <b>tester</b>: The release distributed testers details will be returned.<br> 

        :param destination_type: The destination_type of this ReleaseDetailsResponse.
        :type destination_type: str
        """
        allowed_values = ["group", "store", "tester"]  # noqa: E501
        if destination_type not in allowed_values:
            raise ValueError(
                "Invalid value for `destination_type` ({0}), must be one of {1}"
                .format(destination_type, allowed_values)
            )

        self._destination_type = destination_type

    @property
    def destinations(self):
        """Gets the destinations of this ReleaseDetailsResponse.

        A list of distribution groups or stores.

        :return: The destinations of this ReleaseDetailsResponse.
        :rtype: List[ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this ReleaseDetailsResponse.

        A list of distribution groups or stores.

        :param destinations: The destinations of this ReleaseDetailsResponse.
        :type destinations: List[ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner]
        """

        self._destinations = destinations

    @property
    def device_family(self):
        """Gets the device_family of this ReleaseDetailsResponse.

        The release's device family.

        :return: The device_family of this ReleaseDetailsResponse.
        :rtype: str
        """
        return self._device_family

    @device_family.setter
    def device_family(self, device_family):
        """Sets the device_family of this ReleaseDetailsResponse.

        The release's device family.

        :param device_family: The device_family of this ReleaseDetailsResponse.
        :type device_family: str
        """

        self._device_family = device_family

    @property
    def distribution_groups(self):
        """Gets the distribution_groups of this ReleaseDetailsResponse.

        OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.

        :return: The distribution_groups of this ReleaseDetailsResponse.
        :rtype: List[ReleasesGetLatestByDistributionGroup200ResponseDistributionGroupsInner]
        """
        return self._distribution_groups

    @distribution_groups.setter
    def distribution_groups(self, distribution_groups):
        """Sets the distribution_groups of this ReleaseDetailsResponse.

        OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.

        :param distribution_groups: The distribution_groups of this ReleaseDetailsResponse.
        :type distribution_groups: List[ReleasesGetLatestByDistributionGroup200ResponseDistributionGroupsInner]
        """

        self._distribution_groups = distribution_groups

    @property
    def distribution_stores(self):
        """Gets the distribution_stores of this ReleaseDetailsResponse.

        OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.

        :return: The distribution_stores of this ReleaseDetailsResponse.
        :rtype: List[ReleasesGetLatestByDistributionGroup200ResponseDistributionStoresInner]
        """
        return self._distribution_stores

    @distribution_stores.setter
    def distribution_stores(self, distribution_stores):
        """Sets the distribution_stores of this ReleaseDetailsResponse.

        OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.

        :param distribution_stores: The distribution_stores of this ReleaseDetailsResponse.
        :type distribution_stores: List[ReleasesGetLatestByDistributionGroup200ResponseDistributionStoresInner]
        """

        self._distribution_stores = distribution_stores

    @property
    def download_url(self):
        """Gets the download_url of this ReleaseDetailsResponse.

        The URL that hosts the binary for this release.

        :return: The download_url of this ReleaseDetailsResponse.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this ReleaseDetailsResponse.

        The URL that hosts the binary for this release.

        :param download_url: The download_url of this ReleaseDetailsResponse.
        :type download_url: str
        """

        self._download_url = download_url

    @property
    def enabled(self):
        """Gets the enabled of this ReleaseDetailsResponse.

        This value determines the whether a release currently is enabled or disabled.

        :return: The enabled of this ReleaseDetailsResponse.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ReleaseDetailsResponse.

        This value determines the whether a release currently is enabled or disabled.

        :param enabled: The enabled of this ReleaseDetailsResponse.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def fingerprint(self):
        """Gets the fingerprint of this ReleaseDetailsResponse.

        MD5 checksum of the release binary.

        :return: The fingerprint of this ReleaseDetailsResponse.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this ReleaseDetailsResponse.

        MD5 checksum of the release binary.

        :param fingerprint: The fingerprint of this ReleaseDetailsResponse.
        :type fingerprint: str
        """

        self._fingerprint = fingerprint

    @property
    def id(self):
        """Gets the id of this ReleaseDetailsResponse.

        ID identifying this unique release.

        :return: The id of this ReleaseDetailsResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReleaseDetailsResponse.

        ID identifying this unique release.

        :param id: The id of this ReleaseDetailsResponse.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def install_url(self):
        """Gets the install_url of this ReleaseDetailsResponse.

        The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`

        :return: The install_url of this ReleaseDetailsResponse.
        :rtype: str
        """
        return self._install_url

    @install_url.setter
    def install_url(self, install_url):
        """Sets the install_url of this ReleaseDetailsResponse.

        The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`

        :param install_url: The install_url of this ReleaseDetailsResponse.
        :type install_url: str
        """

        self._install_url = install_url

    @property
    def is_external_build(self):
        """Gets the is_external_build of this ReleaseDetailsResponse.

        This value determines if a release is external or not.

        :return: The is_external_build of this ReleaseDetailsResponse.
        :rtype: bool
        """
        return self._is_external_build

    @is_external_build.setter
    def is_external_build(self, is_external_build):
        """Sets the is_external_build of this ReleaseDetailsResponse.

        This value determines if a release is external or not.

        :param is_external_build: The is_external_build of this ReleaseDetailsResponse.
        :type is_external_build: bool
        """

        self._is_external_build = is_external_build

    @property
    def is_provisioning_profile_syncing(self):
        """Gets the is_provisioning_profile_syncing of this ReleaseDetailsResponse.

        A flag that determines whether the release's provisioning profile is still extracted or not.

        :return: The is_provisioning_profile_syncing of this ReleaseDetailsResponse.
        :rtype: bool
        """
        return self._is_provisioning_profile_syncing

    @is_provisioning_profile_syncing.setter
    def is_provisioning_profile_syncing(self, is_provisioning_profile_syncing):
        """Sets the is_provisioning_profile_syncing of this ReleaseDetailsResponse.

        A flag that determines whether the release's provisioning profile is still extracted or not.

        :param is_provisioning_profile_syncing: The is_provisioning_profile_syncing of this ReleaseDetailsResponse.
        :type is_provisioning_profile_syncing: bool
        """

        self._is_provisioning_profile_syncing = is_provisioning_profile_syncing

    @property
    def is_udid_provisioned(self):
        """Gets the is_udid_provisioned of this ReleaseDetailsResponse.

        In calls that allow passing `udid` in the query string, this value will hold the provisioning status of that UDID in this release. Will be ignored for non-iOS platforms.

        :return: The is_udid_provisioned of this ReleaseDetailsResponse.
        :rtype: bool
        """
        return self._is_udid_provisioned

    @is_udid_provisioned.setter
    def is_udid_provisioned(self, is_udid_provisioned):
        """Sets the is_udid_provisioned of this ReleaseDetailsResponse.

        In calls that allow passing `udid` in the query string, this value will hold the provisioning status of that UDID in this release. Will be ignored for non-iOS platforms.

        :param is_udid_provisioned: The is_udid_provisioned of this ReleaseDetailsResponse.
        :type is_udid_provisioned: bool
        """

        self._is_udid_provisioned = is_udid_provisioned

    @property
    def min_os(self):
        """Gets the min_os of this ReleaseDetailsResponse.

        The release's minimum required operating system.

        :return: The min_os of this ReleaseDetailsResponse.
        :rtype: str
        """
        return self._min_os

    @min_os.setter
    def min_os(self, min_os):
        """Sets the min_os of this ReleaseDetailsResponse.

        The release's minimum required operating system.

        :param min_os: The min_os of this ReleaseDetailsResponse.
        :type min_os: str
        """

        self._min_os = min_os

    @property
    def origin(self):
        """Gets the origin of this ReleaseDetailsResponse.

        The release's origin

        :return: The origin of this ReleaseDetailsResponse.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this ReleaseDetailsResponse.

        The release's origin

        :param origin: The origin of this ReleaseDetailsResponse.
        :type origin: str
        """
        allowed_values = ["hockeyapp", "appcenter"]  # noqa: E501
        if origin not in allowed_values:
            raise ValueError(
                "Invalid value for `origin` ({0}), must be one of {1}"
                .format(origin, allowed_values)
            )

        self._origin = origin

    @property
    def package_hashes(self):
        """Gets the package_hashes of this ReleaseDetailsResponse.

        Hashes for the packages.

        :return: The package_hashes of this ReleaseDetailsResponse.
        :rtype: List[str]
        """
        return self._package_hashes

    @package_hashes.setter
    def package_hashes(self, package_hashes):
        """Sets the package_hashes of this ReleaseDetailsResponse.

        Hashes for the packages.

        :param package_hashes: The package_hashes of this ReleaseDetailsResponse.
        :type package_hashes: List[str]
        """

        self._package_hashes = package_hashes

    @property
    def provisioning_profile_expiry_date(self):
        """Gets the provisioning_profile_expiry_date of this ReleaseDetailsResponse.

        expiration date of provisioning profile in UTC format.

        :return: The provisioning_profile_expiry_date of this ReleaseDetailsResponse.
        :rtype: str
        """
        return self._provisioning_profile_expiry_date

    @provisioning_profile_expiry_date.setter
    def provisioning_profile_expiry_date(self, provisioning_profile_expiry_date):
        """Sets the provisioning_profile_expiry_date of this ReleaseDetailsResponse.

        expiration date of provisioning profile in UTC format.

        :param provisioning_profile_expiry_date: The provisioning_profile_expiry_date of this ReleaseDetailsResponse.
        :type provisioning_profile_expiry_date: str
        """

        self._provisioning_profile_expiry_date = provisioning_profile_expiry_date

    @property
    def provisioning_profile_name(self):
        """Gets the provisioning_profile_name of this ReleaseDetailsResponse.

        The release's provisioning profile name.

        :return: The provisioning_profile_name of this ReleaseDetailsResponse.
        :rtype: str
        """
        return self._provisioning_profile_name

    @provisioning_profile_name.setter
    def provisioning_profile_name(self, provisioning_profile_name):
        """Sets the provisioning_profile_name of this ReleaseDetailsResponse.

        The release's provisioning profile name.

        :param provisioning_profile_name: The provisioning_profile_name of this ReleaseDetailsResponse.
        :type provisioning_profile_name: str
        """

        self._provisioning_profile_name = provisioning_profile_name

    @property
    def provisioning_profile_type(self):
        """Gets the provisioning_profile_type of this ReleaseDetailsResponse.

        The type of the provisioning profile for the requested app version.

        :return: The provisioning_profile_type of this ReleaseDetailsResponse.
        :rtype: str
        """
        return self._provisioning_profile_type

    @provisioning_profile_type.setter
    def provisioning_profile_type(self, provisioning_profile_type):
        """Sets the provisioning_profile_type of this ReleaseDetailsResponse.

        The type of the provisioning profile for the requested app version.

        :param provisioning_profile_type: The provisioning_profile_type of this ReleaseDetailsResponse.
        :type provisioning_profile_type: str
        """
        allowed_values = ["adhoc", "enterprise", "other"]  # noqa: E501
        if provisioning_profile_type not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_profile_type` ({0}), must be one of {1}"
                .format(provisioning_profile_type, allowed_values)
            )

        self._provisioning_profile_type = provisioning_profile_type

    @property
    def release_notes(self):
        """Gets the release_notes of this ReleaseDetailsResponse.

        The release's release notes.

        :return: The release_notes of this ReleaseDetailsResponse.
        :rtype: str
        """
        return self._release_notes

    @release_notes.setter
    def release_notes(self, release_notes):
        """Sets the release_notes of this ReleaseDetailsResponse.

        The release's release notes.

        :param release_notes: The release_notes of this ReleaseDetailsResponse.
        :type release_notes: str
        """

        self._release_notes = release_notes

    @property
    def secondary_download_url(self):
        """Gets the secondary_download_url of this ReleaseDetailsResponse.

        The URL that hosts the secondary binary for this release, such as the apk file for aab releases.

        :return: The secondary_download_url of this ReleaseDetailsResponse.
        :rtype: str
        """
        return self._secondary_download_url

    @secondary_download_url.setter
    def secondary_download_url(self, secondary_download_url):
        """Sets the secondary_download_url of this ReleaseDetailsResponse.

        The URL that hosts the secondary binary for this release, such as the apk file for aab releases.

        :param secondary_download_url: The secondary_download_url of this ReleaseDetailsResponse.
        :type secondary_download_url: str
        """

        self._secondary_download_url = secondary_download_url

    @property
    def short_version(self):
        """Gets the short_version of this ReleaseDetailsResponse.

        The release's short version.<br> For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml. 

        :return: The short_version of this ReleaseDetailsResponse.
        :rtype: str
        """
        return self._short_version

    @short_version.setter
    def short_version(self, short_version):
        """Sets the short_version of this ReleaseDetailsResponse.

        The release's short version.<br> For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml. 

        :param short_version: The short_version of this ReleaseDetailsResponse.
        :type short_version: str
        """
        if short_version is None:
            raise ValueError("Invalid value for `short_version`, must not be `None`")

        self._short_version = short_version

    @property
    def size(self):
        """Gets the size of this ReleaseDetailsResponse.

        The release's size in bytes.

        :return: The size of this ReleaseDetailsResponse.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ReleaseDetailsResponse.

        The release's size in bytes.

        :param size: The size of this ReleaseDetailsResponse.
        :type size: int
        """

        self._size = size

    @property
    def status(self):
        """Gets the status of this ReleaseDetailsResponse.

        Status of the release.

        :return: The status of this ReleaseDetailsResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReleaseDetailsResponse.

        Status of the release.

        :param status: The status of this ReleaseDetailsResponse.
        :type status: str
        """

        self._status = status

    @property
    def uploaded_at(self):
        """Gets the uploaded_at of this ReleaseDetailsResponse.

        UTC time in ISO 8601 format of the uploaded time.

        :return: The uploaded_at of this ReleaseDetailsResponse.
        :rtype: str
        """
        return self._uploaded_at

    @uploaded_at.setter
    def uploaded_at(self, uploaded_at):
        """Sets the uploaded_at of this ReleaseDetailsResponse.

        UTC time in ISO 8601 format of the uploaded time.

        :param uploaded_at: The uploaded_at of this ReleaseDetailsResponse.
        :type uploaded_at: str
        """
        if uploaded_at is None:
            raise ValueError("Invalid value for `uploaded_at`, must not be `None`")

        self._uploaded_at = uploaded_at

    @property
    def version(self):
        """Gets the version of this ReleaseDetailsResponse.

        The release's version.<br> For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml. 

        :return: The version of this ReleaseDetailsResponse.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ReleaseDetailsResponse.

        The release's version.<br> For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml. 

        :param version: The version of this ReleaseDetailsResponse.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
