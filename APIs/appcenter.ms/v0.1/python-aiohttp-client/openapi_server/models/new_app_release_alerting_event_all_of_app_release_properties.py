# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewAppReleaseAlertingEventAllOfAppReleaseProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_display_name: str=None, app_name: str=None, bundle_identifier: str=None, distribution_group_id: str=None, fingerprint: str=None, icon_link: str=None, install_link: str=None, installable: bool=None, mandatory_update: bool=None, min_os: str=None, platform: str=None, provisioning_profile_name: str=None, provisioning_profile_type: str=None, release_id: str=None, release_notes: str=None, short_version: str=None, size: int=None, uploaded_at: str=None, version: str=None):
        """NewAppReleaseAlertingEventAllOfAppReleaseProperties - a model defined in OpenAPI

        :param app_display_name: The app_display_name of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :param app_name: The app_name of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :param bundle_identifier: The bundle_identifier of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :param distribution_group_id: The distribution_group_id of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :param fingerprint: The fingerprint of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :param icon_link: The icon_link of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :param install_link: The install_link of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :param installable: The installable of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :param mandatory_update: The mandatory_update of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :param min_os: The min_os of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :param platform: The platform of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :param provisioning_profile_name: The provisioning_profile_name of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :param provisioning_profile_type: The provisioning_profile_type of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :param release_id: The release_id of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :param release_notes: The release_notes of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :param short_version: The short_version of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :param size: The size of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :param uploaded_at: The uploaded_at of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :param version: The version of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        """
        self.openapi_types = {
            'app_display_name': str,
            'app_name': str,
            'bundle_identifier': str,
            'distribution_group_id': str,
            'fingerprint': str,
            'icon_link': str,
            'install_link': str,
            'installable': bool,
            'mandatory_update': bool,
            'min_os': str,
            'platform': str,
            'provisioning_profile_name': str,
            'provisioning_profile_type': str,
            'release_id': str,
            'release_notes': str,
            'short_version': str,
            'size': int,
            'uploaded_at': str,
            'version': str
        }

        self.attribute_map = {
            'app_display_name': 'app_display_name',
            'app_name': 'app_name',
            'bundle_identifier': 'bundle_identifier',
            'distribution_group_id': 'distribution_group_id',
            'fingerprint': 'fingerprint',
            'icon_link': 'icon_link',
            'install_link': 'install_link',
            'installable': 'installable',
            'mandatory_update': 'mandatory_update',
            'min_os': 'min_os',
            'platform': 'platform',
            'provisioning_profile_name': 'provisioning_profile_name',
            'provisioning_profile_type': 'provisioning_profile_type',
            'release_id': 'release_id',
            'release_notes': 'release_notes',
            'short_version': 'short_version',
            'size': 'size',
            'uploaded_at': 'uploaded_at',
            'version': 'version'
        }

        self._app_display_name = app_display_name
        self._app_name = app_name
        self._bundle_identifier = bundle_identifier
        self._distribution_group_id = distribution_group_id
        self._fingerprint = fingerprint
        self._icon_link = icon_link
        self._install_link = install_link
        self._installable = installable
        self._mandatory_update = mandatory_update
        self._min_os = min_os
        self._platform = platform
        self._provisioning_profile_name = provisioning_profile_name
        self._provisioning_profile_type = provisioning_profile_type
        self._release_id = release_id
        self._release_notes = release_notes
        self._short_version = short_version
        self._size = size
        self._uploaded_at = uploaded_at
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewAppReleaseAlertingEventAllOfAppReleaseProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewAppReleaseAlertingEvent_allOf_app_release_properties of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_display_name(self):
        """Gets the app_display_name of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :return: The app_display_name of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :rtype: str
        """
        return self._app_display_name

    @app_display_name.setter
    def app_display_name(self, app_display_name):
        """Sets the app_display_name of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :param app_display_name: The app_display_name of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :type app_display_name: str
        """
        if app_display_name is None:
            raise ValueError("Invalid value for `app_display_name`, must not be `None`")

        self._app_display_name = app_display_name

    @property
    def app_name(self):
        """Gets the app_name of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :return: The app_name of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :param app_name: The app_name of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :type app_name: str
        """
        if app_name is None:
            raise ValueError("Invalid value for `app_name`, must not be `None`")

        self._app_name = app_name

    @property
    def bundle_identifier(self):
        """Gets the bundle_identifier of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :return: The bundle_identifier of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :rtype: str
        """
        return self._bundle_identifier

    @bundle_identifier.setter
    def bundle_identifier(self, bundle_identifier):
        """Sets the bundle_identifier of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :param bundle_identifier: The bundle_identifier of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :type bundle_identifier: str
        """
        if bundle_identifier is None:
            raise ValueError("Invalid value for `bundle_identifier`, must not be `None`")

        self._bundle_identifier = bundle_identifier

    @property
    def distribution_group_id(self):
        """Gets the distribution_group_id of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :return: The distribution_group_id of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :rtype: str
        """
        return self._distribution_group_id

    @distribution_group_id.setter
    def distribution_group_id(self, distribution_group_id):
        """Sets the distribution_group_id of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :param distribution_group_id: The distribution_group_id of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :type distribution_group_id: str
        """

        self._distribution_group_id = distribution_group_id

    @property
    def fingerprint(self):
        """Gets the fingerprint of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :return: The fingerprint of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :param fingerprint: The fingerprint of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :type fingerprint: str
        """

        self._fingerprint = fingerprint

    @property
    def icon_link(self):
        """Gets the icon_link of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :return: The icon_link of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :rtype: str
        """
        return self._icon_link

    @icon_link.setter
    def icon_link(self, icon_link):
        """Sets the icon_link of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :param icon_link: The icon_link of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :type icon_link: str
        """

        self._icon_link = icon_link

    @property
    def install_link(self):
        """Gets the install_link of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :return: The install_link of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :rtype: str
        """
        return self._install_link

    @install_link.setter
    def install_link(self, install_link):
        """Sets the install_link of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :param install_link: The install_link of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :type install_link: str
        """
        if install_link is None:
            raise ValueError("Invalid value for `install_link`, must not be `None`")

        self._install_link = install_link

    @property
    def installable(self):
        """Gets the installable of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :return: The installable of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :rtype: bool
        """
        return self._installable

    @installable.setter
    def installable(self, installable):
        """Sets the installable of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :param installable: The installable of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :type installable: bool
        """

        self._installable = installable

    @property
    def mandatory_update(self):
        """Gets the mandatory_update of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :return: The mandatory_update of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :rtype: bool
        """
        return self._mandatory_update

    @mandatory_update.setter
    def mandatory_update(self, mandatory_update):
        """Sets the mandatory_update of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :param mandatory_update: The mandatory_update of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :type mandatory_update: bool
        """

        self._mandatory_update = mandatory_update

    @property
    def min_os(self):
        """Gets the min_os of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :return: The min_os of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :rtype: str
        """
        return self._min_os

    @min_os.setter
    def min_os(self, min_os):
        """Sets the min_os of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :param min_os: The min_os of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :type min_os: str
        """

        self._min_os = min_os

    @property
    def platform(self):
        """Gets the platform of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :return: The platform of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :param platform: The platform of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :type platform: str
        """
        if platform is None:
            raise ValueError("Invalid value for `platform`, must not be `None`")

        self._platform = platform

    @property
    def provisioning_profile_name(self):
        """Gets the provisioning_profile_name of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :return: The provisioning_profile_name of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :rtype: str
        """
        return self._provisioning_profile_name

    @provisioning_profile_name.setter
    def provisioning_profile_name(self, provisioning_profile_name):
        """Sets the provisioning_profile_name of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :param provisioning_profile_name: The provisioning_profile_name of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :type provisioning_profile_name: str
        """

        self._provisioning_profile_name = provisioning_profile_name

    @property
    def provisioning_profile_type(self):
        """Gets the provisioning_profile_type of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :return: The provisioning_profile_type of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :rtype: str
        """
        return self._provisioning_profile_type

    @provisioning_profile_type.setter
    def provisioning_profile_type(self, provisioning_profile_type):
        """Sets the provisioning_profile_type of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :param provisioning_profile_type: The provisioning_profile_type of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :type provisioning_profile_type: str
        """

        self._provisioning_profile_type = provisioning_profile_type

    @property
    def release_id(self):
        """Gets the release_id of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :return: The release_id of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :rtype: str
        """
        return self._release_id

    @release_id.setter
    def release_id(self, release_id):
        """Sets the release_id of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :param release_id: The release_id of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :type release_id: str
        """
        if release_id is None:
            raise ValueError("Invalid value for `release_id`, must not be `None`")

        self._release_id = release_id

    @property
    def release_notes(self):
        """Gets the release_notes of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :return: The release_notes of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :rtype: str
        """
        return self._release_notes

    @release_notes.setter
    def release_notes(self, release_notes):
        """Sets the release_notes of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :param release_notes: The release_notes of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :type release_notes: str
        """

        self._release_notes = release_notes

    @property
    def short_version(self):
        """Gets the short_version of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :return: The short_version of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :rtype: str
        """
        return self._short_version

    @short_version.setter
    def short_version(self, short_version):
        """Sets the short_version of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :param short_version: The short_version of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :type short_version: str
        """
        if short_version is None:
            raise ValueError("Invalid value for `short_version`, must not be `None`")

        self._short_version = short_version

    @property
    def size(self):
        """Gets the size of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :return: The size of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :param size: The size of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def uploaded_at(self):
        """Gets the uploaded_at of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.

        Date and time in ISO 8601 format

        :return: The uploaded_at of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :rtype: str
        """
        return self._uploaded_at

    @uploaded_at.setter
    def uploaded_at(self, uploaded_at):
        """Sets the uploaded_at of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.

        Date and time in ISO 8601 format

        :param uploaded_at: The uploaded_at of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :type uploaded_at: str
        """
        if uploaded_at is None:
            raise ValueError("Invalid value for `uploaded_at`, must not be `None`")

        self._uploaded_at = uploaded_at

    @property
    def version(self):
        """Gets the version of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :return: The version of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.


        :param version: The version of this NewAppReleaseAlertingEventAllOfAppReleaseProperties.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
