# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostRepositoryProviderMappingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, external_account_id: str=None, provider: str=None):
        """PostRepositoryProviderMappingRequest - a model defined in OpenAPI

        :param account_id: The account_id of this PostRepositoryProviderMappingRequest.
        :param external_account_id: The external_account_id of this PostRepositoryProviderMappingRequest.
        :param provider: The provider of this PostRepositoryProviderMappingRequest.
        """
        self.openapi_types = {
            'account_id': str,
            'external_account_id': str,
            'provider': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'external_account_id': 'external_account_id',
            'provider': 'provider'
        }

        self._account_id = account_id
        self._external_account_id = external_account_id
        self._provider = provider

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostRepositoryProviderMappingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostRepositoryProviderMappingRequest of this PostRepositoryProviderMappingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this PostRepositoryProviderMappingRequest.

        App Center account id to link to this provider and external id

        :return: The account_id of this PostRepositoryProviderMappingRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this PostRepositoryProviderMappingRequest.

        App Center account id to link to this provider and external id

        :param account_id: The account_id of this PostRepositoryProviderMappingRequest.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def external_account_id(self):
        """Gets the external_account_id of this PostRepositoryProviderMappingRequest.

        Id of user in the external provider service

        :return: The external_account_id of this PostRepositoryProviderMappingRequest.
        :rtype: str
        """
        return self._external_account_id

    @external_account_id.setter
    def external_account_id(self, external_account_id):
        """Sets the external_account_id of this PostRepositoryProviderMappingRequest.

        Id of user in the external provider service

        :param external_account_id: The external_account_id of this PostRepositoryProviderMappingRequest.
        :type external_account_id: str
        """
        if external_account_id is None:
            raise ValueError("Invalid value for `external_account_id`, must not be `None`")

        self._external_account_id = external_account_id

    @property
    def provider(self):
        """Gets the provider of this PostRepositoryProviderMappingRequest.

        Supported external providers of source control repositories

        :return: The provider of this PostRepositoryProviderMappingRequest.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this PostRepositoryProviderMappingRequest.

        Supported external providers of source control repositories

        :param provider: The provider of this PostRepositoryProviderMappingRequest.
        :type provider: str
        """
        allowed_values = ["github"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"
                .format(provider, allowed_values)
            )

        self._provider = provider
