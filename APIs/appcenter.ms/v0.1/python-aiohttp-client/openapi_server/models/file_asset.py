# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FileAsset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, location: str=None, token: str=None, upload_domain: str=None, upload_window_location: str=None, url_encoded_token: str=None):
        """FileAsset - a model defined in OpenAPI

        :param id: The id of this FileAsset.
        :param location: The location of this FileAsset.
        :param token: The token of this FileAsset.
        :param upload_domain: The upload_domain of this FileAsset.
        :param upload_window_location: The upload_window_location of this FileAsset.
        :param url_encoded_token: The url_encoded_token of this FileAsset.
        """
        self.openapi_types = {
            'id': str,
            'location': str,
            'token': str,
            'upload_domain': str,
            'upload_window_location': str,
            'url_encoded_token': str
        }

        self.attribute_map = {
            'id': 'id',
            'location': 'location',
            'token': 'token',
            'upload_domain': 'uploadDomain',
            'upload_window_location': 'uploadWindowLocation',
            'url_encoded_token': 'urlEncodedToken'
        }

        self._id = id
        self._location = location
        self._token = token
        self._upload_domain = upload_domain
        self._upload_window_location = upload_window_location
        self._url_encoded_token = url_encoded_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileAsset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileAsset of this FileAsset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this FileAsset.


        :return: The id of this FileAsset.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FileAsset.


        :param id: The id of this FileAsset.
        :type id: str
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this FileAsset.


        :return: The location of this FileAsset.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this FileAsset.


        :param location: The location of this FileAsset.
        :type location: str
        """

        self._location = location

    @property
    def token(self):
        """Gets the token of this FileAsset.


        :return: The token of this FileAsset.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this FileAsset.


        :param token: The token of this FileAsset.
        :type token: str
        """

        self._token = token

    @property
    def upload_domain(self):
        """Gets the upload_domain of this FileAsset.


        :return: The upload_domain of this FileAsset.
        :rtype: str
        """
        return self._upload_domain

    @upload_domain.setter
    def upload_domain(self, upload_domain):
        """Sets the upload_domain of this FileAsset.


        :param upload_domain: The upload_domain of this FileAsset.
        :type upload_domain: str
        """

        self._upload_domain = upload_domain

    @property
    def upload_window_location(self):
        """Gets the upload_window_location of this FileAsset.


        :return: The upload_window_location of this FileAsset.
        :rtype: str
        """
        return self._upload_window_location

    @upload_window_location.setter
    def upload_window_location(self, upload_window_location):
        """Sets the upload_window_location of this FileAsset.


        :param upload_window_location: The upload_window_location of this FileAsset.
        :type upload_window_location: str
        """

        self._upload_window_location = upload_window_location

    @property
    def url_encoded_token(self):
        """Gets the url_encoded_token of this FileAsset.


        :return: The url_encoded_token of this FileAsset.
        :rtype: str
        """
        return self._url_encoded_token

    @url_encoded_token.setter
    def url_encoded_token(self, url_encoded_token):
        """Sets the url_encoded_token of this FileAsset.


        :param url_encoded_token: The url_encoded_token of this FileAsset.
        :type url_encoded_token: str
        """

        self._url_encoded_token = url_encoded_token
