# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.builds_distribute_request_destinations_inner import BuildsDistributeRequestDestinationsInner
from openapi_server import util


class BuildsDistributeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destinations: List[BuildsDistributeRequestDestinationsInner]=None, mandatory_update: bool=None, notify_testers: bool=True, release_notes: str=None):
        """BuildsDistributeRequest - a model defined in OpenAPI

        :param destinations: The destinations of this BuildsDistributeRequest.
        :param mandatory_update: The mandatory_update of this BuildsDistributeRequest.
        :param notify_testers: The notify_testers of this BuildsDistributeRequest.
        :param release_notes: The release_notes of this BuildsDistributeRequest.
        """
        self.openapi_types = {
            'destinations': List[BuildsDistributeRequestDestinationsInner],
            'mandatory_update': bool,
            'notify_testers': bool,
            'release_notes': str
        }

        self.attribute_map = {
            'destinations': 'destinations',
            'mandatory_update': 'mandatoryUpdate',
            'notify_testers': 'notifyTesters',
            'release_notes': 'releaseNotes'
        }

        self._destinations = destinations
        self._mandatory_update = mandatory_update
        self._notify_testers = notify_testers
        self._release_notes = release_notes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildsDistributeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The builds_distribute_request of this BuildsDistributeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destinations(self):
        """Gets the destinations of this BuildsDistributeRequest.

        Array of objects {id:string, type:string} with \"id\" being the distribution group ID, store ID, or tester email, and \"type\" being \"group\", \"store\", or \"tester\"

        :return: The destinations of this BuildsDistributeRequest.
        :rtype: List[BuildsDistributeRequestDestinationsInner]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this BuildsDistributeRequest.

        Array of objects {id:string, type:string} with \"id\" being the distribution group ID, store ID, or tester email, and \"type\" being \"group\", \"store\", or \"tester\"

        :param destinations: The destinations of this BuildsDistributeRequest.
        :type destinations: List[BuildsDistributeRequestDestinationsInner]
        """

        self._destinations = destinations

    @property
    def mandatory_update(self):
        """Gets the mandatory_update of this BuildsDistributeRequest.


        :return: The mandatory_update of this BuildsDistributeRequest.
        :rtype: bool
        """
        return self._mandatory_update

    @mandatory_update.setter
    def mandatory_update(self, mandatory_update):
        """Sets the mandatory_update of this BuildsDistributeRequest.


        :param mandatory_update: The mandatory_update of this BuildsDistributeRequest.
        :type mandatory_update: bool
        """

        self._mandatory_update = mandatory_update

    @property
    def notify_testers(self):
        """Gets the notify_testers of this BuildsDistributeRequest.


        :return: The notify_testers of this BuildsDistributeRequest.
        :rtype: bool
        """
        return self._notify_testers

    @notify_testers.setter
    def notify_testers(self, notify_testers):
        """Sets the notify_testers of this BuildsDistributeRequest.


        :param notify_testers: The notify_testers of this BuildsDistributeRequest.
        :type notify_testers: bool
        """

        self._notify_testers = notify_testers

    @property
    def release_notes(self):
        """Gets the release_notes of this BuildsDistributeRequest.

        The release notes

        :return: The release_notes of this BuildsDistributeRequest.
        :rtype: str
        """
        return self._release_notes

    @release_notes.setter
    def release_notes(self, release_notes):
        """Sets the release_notes of this BuildsDistributeRequest.

        The release notes

        :param release_notes: The release_notes of this BuildsDistributeRequest.
        :type release_notes: str
        """

        self._release_notes = release_notes
