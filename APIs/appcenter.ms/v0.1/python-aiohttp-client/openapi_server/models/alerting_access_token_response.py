# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AlertingAccessTokenResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token_id: str=None, external_account_name: str=None, external_provider_name: str=None, external_user_email: str=None):
        """AlertingAccessTokenResponse - a model defined in OpenAPI

        :param access_token_id: The access_token_id of this AlertingAccessTokenResponse.
        :param external_account_name: The external_account_name of this AlertingAccessTokenResponse.
        :param external_provider_name: The external_provider_name of this AlertingAccessTokenResponse.
        :param external_user_email: The external_user_email of this AlertingAccessTokenResponse.
        """
        self.openapi_types = {
            'access_token_id': str,
            'external_account_name': str,
            'external_provider_name': str,
            'external_user_email': str
        }

        self.attribute_map = {
            'access_token_id': 'access_token_id',
            'external_account_name': 'external_account_name',
            'external_provider_name': 'external_provider_name',
            'external_user_email': 'external_user_email'
        }

        self._access_token_id = access_token_id
        self._external_account_name = external_account_name
        self._external_provider_name = external_provider_name
        self._external_user_email = external_user_email

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertingAccessTokenResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlertingAccessTokenResponse of this AlertingAccessTokenResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token_id(self):
        """Gets the access_token_id of this AlertingAccessTokenResponse.

        ID of the access token

        :return: The access_token_id of this AlertingAccessTokenResponse.
        :rtype: str
        """
        return self._access_token_id

    @access_token_id.setter
    def access_token_id(self, access_token_id):
        """Sets the access_token_id of this AlertingAccessTokenResponse.

        ID of the access token

        :param access_token_id: The access_token_id of this AlertingAccessTokenResponse.
        :type access_token_id: str
        """
        if access_token_id is None:
            raise ValueError("Invalid value for `access_token_id`, must not be `None`")

        self._access_token_id = access_token_id

    @property
    def external_account_name(self):
        """Gets the external_account_name of this AlertingAccessTokenResponse.

        The account name of external user that used to authenticate against the external oauth provider or basic auth

        :return: The external_account_name of this AlertingAccessTokenResponse.
        :rtype: str
        """
        return self._external_account_name

    @external_account_name.setter
    def external_account_name(self, external_account_name):
        """Sets the external_account_name of this AlertingAccessTokenResponse.

        The account name of external user that used to authenticate against the external oauth provider or basic auth

        :param external_account_name: The external_account_name of this AlertingAccessTokenResponse.
        :type external_account_name: str
        """
        if external_account_name is None:
            raise ValueError("Invalid value for `external_account_name`, must not be `None`")

        self._external_account_name = external_account_name

    @property
    def external_provider_name(self):
        """Gets the external_provider_name of this AlertingAccessTokenResponse.

        External provider name

        :return: The external_provider_name of this AlertingAccessTokenResponse.
        :rtype: str
        """
        return self._external_provider_name

    @external_provider_name.setter
    def external_provider_name(self, external_provider_name):
        """Sets the external_provider_name of this AlertingAccessTokenResponse.

        External provider name

        :param external_provider_name: The external_provider_name of this AlertingAccessTokenResponse.
        :type external_provider_name: str
        """
        allowed_values = ["github", "vsts", "jira"]  # noqa: E501
        if external_provider_name not in allowed_values:
            raise ValueError(
                "Invalid value for `external_provider_name` ({0}), must be one of {1}"
                .format(external_provider_name, allowed_values)
            )

        self._external_provider_name = external_provider_name

    @property
    def external_user_email(self):
        """Gets the external_user_email of this AlertingAccessTokenResponse.

        The email of external user that used to authenticate aginst the external oauth provider

        :return: The external_user_email of this AlertingAccessTokenResponse.
        :rtype: str
        """
        return self._external_user_email

    @external_user_email.setter
    def external_user_email(self, external_user_email):
        """Sets the external_user_email of this AlertingAccessTokenResponse.

        The email of external user that used to authenticate aginst the external oauth provider

        :param external_user_email: The external_user_email of this AlertingAccessTokenResponse.
        :type external_user_email: str
        """
        if external_user_email is None:
            raise ValueError("Invalid value for `external_user_email`, must not be `None`")

        self._external_user_email = external_user_email
