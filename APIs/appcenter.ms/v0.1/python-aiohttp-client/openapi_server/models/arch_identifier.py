# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ArchIdentifier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, architecture: str=None, uuid: str=None):
        """ArchIdentifier - a model defined in OpenAPI

        :param architecture: The architecture of this ArchIdentifier.
        :param uuid: The uuid of this ArchIdentifier.
        """
        self.openapi_types = {
            'architecture': str,
            'uuid': str
        }

        self.attribute_map = {
            'architecture': 'architecture',
            'uuid': 'uuid'
        }

        self._architecture = architecture
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArchIdentifier':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArchIdentifier of this ArchIdentifier.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def architecture(self):
        """Gets the architecture of this ArchIdentifier.

        The architecture that the UUID belongs to, i.e. armv7 or arm64.

        :return: The architecture of this ArchIdentifier.
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this ArchIdentifier.

        The architecture that the UUID belongs to, i.e. armv7 or arm64.

        :param architecture: The architecture of this ArchIdentifier.
        :type architecture: str
        """
        if architecture is None:
            raise ValueError("Invalid value for `architecture`, must not be `None`")

        self._architecture = architecture

    @property
    def uuid(self):
        """Gets the uuid of this ArchIdentifier.

        The unique identifier.

        :return: The uuid of this ArchIdentifier.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ArchIdentifier.

        The unique identifier.

        :param uuid: The uuid of this ArchIdentifier.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")

        self._uuid = uuid
