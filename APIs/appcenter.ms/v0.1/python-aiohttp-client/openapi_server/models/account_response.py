# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, email: str=None, id: str=None, name: str=None, origin: str=None, type: str=None):
        """AccountResponse - a model defined in OpenAPI

        :param display_name: The display_name of this AccountResponse.
        :param email: The email of this AccountResponse.
        :param id: The id of this AccountResponse.
        :param name: The name of this AccountResponse.
        :param origin: The origin of this AccountResponse.
        :param type: The type of this AccountResponse.
        """
        self.openapi_types = {
            'display_name': str,
            'email': str,
            'id': str,
            'name': str,
            'origin': str,
            'type': str
        }

        self.attribute_map = {
            'display_name': 'display_name',
            'email': 'email',
            'id': 'id',
            'name': 'name',
            'origin': 'origin',
            'type': 'type'
        }

        self._display_name = display_name
        self._email = email
        self._id = id
        self._name = name
        self._origin = origin
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountResponse of this AccountResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this AccountResponse.

        The display name of the account

        :return: The display_name of this AccountResponse.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AccountResponse.

        The display name of the account

        :param display_name: The display_name of this AccountResponse.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this AccountResponse.

        The account's email. For org that value might be empty.

        :return: The email of this AccountResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AccountResponse.

        The account's email. For org that value might be empty.

        :param email: The email of this AccountResponse.
        :type email: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this AccountResponse.

        The internal unique id (UUID) of the account.

        :return: The id of this AccountResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountResponse.

        The internal unique id (UUID) of the account.

        :param id: The id of this AccountResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this AccountResponse.

        The slug name of the account

        :return: The name of this AccountResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountResponse.

        The slug name of the account

        :param name: The name of this AccountResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def origin(self):
        """Gets the origin of this AccountResponse.

        The creation origin of this account

        :return: The origin of this AccountResponse.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this AccountResponse.

        The creation origin of this account

        :param origin: The origin of this AccountResponse.
        :type origin: str
        """
        allowed_values = ["appcenter", "hockeyapp"]  # noqa: E501
        if origin not in allowed_values:
            raise ValueError(
                "Invalid value for `origin` ({0}), must be one of {1}"
                .format(origin, allowed_values)
            )

        self._origin = origin

    @property
    def type(self):
        """Gets the type of this AccountResponse.

        The type of this account

        :return: The type of this AccountResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AccountResponse.

        The type of this account

        :param type: The type of this AccountResponse.
        :type type: str
        """
        allowed_values = ["user", "org"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
