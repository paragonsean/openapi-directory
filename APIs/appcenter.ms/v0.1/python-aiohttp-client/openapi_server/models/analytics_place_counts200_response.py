# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analytics_place_counts200_response_places_inner import AnalyticsPlaceCounts200ResponsePlacesInner
from openapi_server import util


class AnalyticsPlaceCounts200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, places: List[AnalyticsPlaceCounts200ResponsePlacesInner]=None, total: int=None):
        """AnalyticsPlaceCounts200Response - a model defined in OpenAPI

        :param places: The places of this AnalyticsPlaceCounts200Response.
        :param total: The total of this AnalyticsPlaceCounts200Response.
        """
        self.openapi_types = {
            'places': List[AnalyticsPlaceCounts200ResponsePlacesInner],
            'total': int
        }

        self.attribute_map = {
            'places': 'places',
            'total': 'total'
        }

        self._places = places
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyticsPlaceCounts200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Analytics_PlaceCounts_200_response of this AnalyticsPlaceCounts200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def places(self):
        """Gets the places of this AnalyticsPlaceCounts200Response.


        :return: The places of this AnalyticsPlaceCounts200Response.
        :rtype: List[AnalyticsPlaceCounts200ResponsePlacesInner]
        """
        return self._places

    @places.setter
    def places(self, places):
        """Sets the places of this AnalyticsPlaceCounts200Response.


        :param places: The places of this AnalyticsPlaceCounts200Response.
        :type places: List[AnalyticsPlaceCounts200ResponsePlacesInner]
        """

        self._places = places

    @property
    def total(self):
        """Gets the total of this AnalyticsPlaceCounts200Response.


        :return: The total of this AnalyticsPlaceCounts200Response.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this AnalyticsPlaceCounts200Response.


        :param total: The total of this AnalyticsPlaceCounts200Response.
        :type total: int
        """

        self._total = total
