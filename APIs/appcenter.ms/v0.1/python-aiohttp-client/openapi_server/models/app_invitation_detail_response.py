# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_invitations_list200_response_distribution_group import AppInvitationsList200ResponseDistributionGroup
from openapi_server.models.app_invitations_list200_response_invited_by import AppInvitationsList200ResponseInvitedBy
from openapi_server.models.apps_list200_response_inner import AppsList200ResponseInner
from openapi_server import util


class AppInvitationDetailResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app: AppsList200ResponseInner=None, app_count: float=None, distribution_group: AppInvitationsList200ResponseDistributionGroup=None, email: str=None, id: str=None, invite_type: str=None, invited_by: AppInvitationsList200ResponseInvitedBy=None, is_existing_user: bool=None, permissions: List[str]=None):
        """AppInvitationDetailResponse - a model defined in OpenAPI

        :param app: The app of this AppInvitationDetailResponse.
        :param app_count: The app_count of this AppInvitationDetailResponse.
        :param distribution_group: The distribution_group of this AppInvitationDetailResponse.
        :param email: The email of this AppInvitationDetailResponse.
        :param id: The id of this AppInvitationDetailResponse.
        :param invite_type: The invite_type of this AppInvitationDetailResponse.
        :param invited_by: The invited_by of this AppInvitationDetailResponse.
        :param is_existing_user: The is_existing_user of this AppInvitationDetailResponse.
        :param permissions: The permissions of this AppInvitationDetailResponse.
        """
        self.openapi_types = {
            'app': AppsList200ResponseInner,
            'app_count': float,
            'distribution_group': AppInvitationsList200ResponseDistributionGroup,
            'email': str,
            'id': str,
            'invite_type': str,
            'invited_by': AppInvitationsList200ResponseInvitedBy,
            'is_existing_user': bool,
            'permissions': List[str]
        }

        self.attribute_map = {
            'app': 'app',
            'app_count': 'app_count',
            'distribution_group': 'distribution_group',
            'email': 'email',
            'id': 'id',
            'invite_type': 'invite_type',
            'invited_by': 'invited_by',
            'is_existing_user': 'is_existing_user',
            'permissions': 'permissions'
        }

        self._app = app
        self._app_count = app_count
        self._distribution_group = distribution_group
        self._email = email
        self._id = id
        self._invite_type = invite_type
        self._invited_by = invited_by
        self._is_existing_user = is_existing_user
        self._permissions = permissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppInvitationDetailResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppInvitationDetailResponse of this AppInvitationDetailResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app(self):
        """Gets the app of this AppInvitationDetailResponse.


        :return: The app of this AppInvitationDetailResponse.
        :rtype: AppsList200ResponseInner
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this AppInvitationDetailResponse.


        :param app: The app of this AppInvitationDetailResponse.
        :type app: AppsList200ResponseInner
        """
        if app is None:
            raise ValueError("Invalid value for `app`, must not be `None`")

        self._app = app

    @property
    def app_count(self):
        """Gets the app_count of this AppInvitationDetailResponse.

        The number of apps in the group

        :return: The app_count of this AppInvitationDetailResponse.
        :rtype: float
        """
        return self._app_count

    @app_count.setter
    def app_count(self, app_count):
        """Sets the app_count of this AppInvitationDetailResponse.

        The number of apps in the group

        :param app_count: The app_count of this AppInvitationDetailResponse.
        :type app_count: float
        """

        self._app_count = app_count

    @property
    def distribution_group(self):
        """Gets the distribution_group of this AppInvitationDetailResponse.


        :return: The distribution_group of this AppInvitationDetailResponse.
        :rtype: AppInvitationsList200ResponseDistributionGroup
        """
        return self._distribution_group

    @distribution_group.setter
    def distribution_group(self, distribution_group):
        """Sets the distribution_group of this AppInvitationDetailResponse.


        :param distribution_group: The distribution_group of this AppInvitationDetailResponse.
        :type distribution_group: AppInvitationsList200ResponseDistributionGroup
        """

        self._distribution_group = distribution_group

    @property
    def email(self):
        """Gets the email of this AppInvitationDetailResponse.

        The email address of the invited user

        :return: The email of this AppInvitationDetailResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AppInvitationDetailResponse.

        The email address of the invited user

        :param email: The email of this AppInvitationDetailResponse.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def id(self):
        """Gets the id of this AppInvitationDetailResponse.

        The unique ID (UUID) of the invitation

        :return: The id of this AppInvitationDetailResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppInvitationDetailResponse.

        The unique ID (UUID) of the invitation

        :param id: The id of this AppInvitationDetailResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def invite_type(self):
        """Gets the invite_type of this AppInvitationDetailResponse.

        The invitation type

        :return: The invite_type of this AppInvitationDetailResponse.
        :rtype: str
        """
        return self._invite_type

    @invite_type.setter
    def invite_type(self, invite_type):
        """Sets the invite_type of this AppInvitationDetailResponse.

        The invitation type

        :param invite_type: The invite_type of this AppInvitationDetailResponse.
        :type invite_type: str
        """
        allowed_values = ["developer", "tester"]  # noqa: E501
        if invite_type not in allowed_values:
            raise ValueError(
                "Invalid value for `invite_type` ({0}), must be one of {1}"
                .format(invite_type, allowed_values)
            )

        self._invite_type = invite_type

    @property
    def invited_by(self):
        """Gets the invited_by of this AppInvitationDetailResponse.


        :return: The invited_by of this AppInvitationDetailResponse.
        :rtype: AppInvitationsList200ResponseInvitedBy
        """
        return self._invited_by

    @invited_by.setter
    def invited_by(self, invited_by):
        """Sets the invited_by of this AppInvitationDetailResponse.


        :param invited_by: The invited_by of this AppInvitationDetailResponse.
        :type invited_by: AppInvitationsList200ResponseInvitedBy
        """
        if invited_by is None:
            raise ValueError("Invalid value for `invited_by`, must not be `None`")

        self._invited_by = invited_by

    @property
    def is_existing_user(self):
        """Gets the is_existing_user of this AppInvitationDetailResponse.

        Indicates whether the invited user already exists

        :return: The is_existing_user of this AppInvitationDetailResponse.
        :rtype: bool
        """
        return self._is_existing_user

    @is_existing_user.setter
    def is_existing_user(self, is_existing_user):
        """Sets the is_existing_user of this AppInvitationDetailResponse.

        Indicates whether the invited user already exists

        :param is_existing_user: The is_existing_user of this AppInvitationDetailResponse.
        :type is_existing_user: bool
        """
        if is_existing_user is None:
            raise ValueError("Invalid value for `is_existing_user`, must not be `None`")

        self._is_existing_user = is_existing_user

    @property
    def permissions(self):
        """Gets the permissions of this AppInvitationDetailResponse.

        The permissions the user has for the app

        :return: The permissions of this AppInvitationDetailResponse.
        :rtype: List[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this AppInvitationDetailResponse.

        The permissions the user has for the app

        :param permissions: The permissions of this AppInvitationDetailResponse.
        :type permissions: List[str]
        """
        allowed_values = ["manager", "developer", "viewer", "tester"]  # noqa: E501
        if not set(permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `permissions` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(permissions) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._permissions = permissions
