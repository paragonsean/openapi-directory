# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.performance_report_video_video_metadata import PerformanceReportVideoVideoMetadata
from openapi_server import util


class PerformanceReportVideo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, video_metadata: PerformanceReportVideoVideoMetadata=None, video_url: str=None):
        """PerformanceReportVideo - a model defined in OpenAPI

        :param video_metadata: The video_metadata of this PerformanceReportVideo.
        :param video_url: The video_url of this PerformanceReportVideo.
        """
        self.openapi_types = {
            'video_metadata': PerformanceReportVideoVideoMetadata,
            'video_url': str
        }

        self.attribute_map = {
            'video_metadata': 'video_metadata',
            'video_url': 'video_url'
        }

        self._video_metadata = video_metadata
        self._video_url = video_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PerformanceReportVideo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PerformanceReport_video of this PerformanceReportVideo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def video_metadata(self):
        """Gets the video_metadata of this PerformanceReportVideo.


        :return: The video_metadata of this PerformanceReportVideo.
        :rtype: PerformanceReportVideoVideoMetadata
        """
        return self._video_metadata

    @video_metadata.setter
    def video_metadata(self, video_metadata):
        """Sets the video_metadata of this PerformanceReportVideo.


        :param video_metadata: The video_metadata of this PerformanceReportVideo.
        :type video_metadata: PerformanceReportVideoVideoMetadata
        """
        if video_metadata is None:
            raise ValueError("Invalid value for `video_metadata`, must not be `None`")

        self._video_metadata = video_metadata

    @property
    def video_url(self):
        """Gets the video_url of this PerformanceReportVideo.


        :return: The video_url of this PerformanceReportVideo.
        :rtype: str
        """
        return self._video_url

    @video_url.setter
    def video_url(self, video_url):
        """Sets the video_url of this PerformanceReportVideo.


        :param video_url: The video_url of this PerformanceReportVideo.
        :type video_url: str
        """
        if video_url is None:
            raise ValueError("Invalid value for `video_url`, must not be `None`")

        self._video_url = video_url
