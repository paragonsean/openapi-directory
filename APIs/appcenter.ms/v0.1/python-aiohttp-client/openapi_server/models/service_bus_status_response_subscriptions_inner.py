# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceBusStatusResponseSubscriptionsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message_count: float=None, name: str=None):
        """ServiceBusStatusResponseSubscriptionsInner - a model defined in OpenAPI

        :param message_count: The message_count of this ServiceBusStatusResponseSubscriptionsInner.
        :param name: The name of this ServiceBusStatusResponseSubscriptionsInner.
        """
        self.openapi_types = {
            'message_count': float,
            'name': str
        }

        self.attribute_map = {
            'message_count': 'message_count',
            'name': 'name'
        }

        self._message_count = message_count
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceBusStatusResponseSubscriptionsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceBusStatusResponse_subscriptions_inner of this ServiceBusStatusResponseSubscriptionsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message_count(self):
        """Gets the message_count of this ServiceBusStatusResponseSubscriptionsInner.

        The number of messages in the subscription

        :return: The message_count of this ServiceBusStatusResponseSubscriptionsInner.
        :rtype: float
        """
        return self._message_count

    @message_count.setter
    def message_count(self, message_count):
        """Sets the message_count of this ServiceBusStatusResponseSubscriptionsInner.

        The number of messages in the subscription

        :param message_count: The message_count of this ServiceBusStatusResponseSubscriptionsInner.
        :type message_count: float
        """
        if message_count is None:
            raise ValueError("Invalid value for `message_count`, must not be `None`")

        self._message_count = message_count

    @property
    def name(self):
        """Gets the name of this ServiceBusStatusResponseSubscriptionsInner.

        The name of the subsciption (prefixed with the topic name)

        :return: The name of this ServiceBusStatusResponseSubscriptionsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceBusStatusResponseSubscriptionsInner.

        The name of the subsciption (prefixed with the topic name)

        :param name: The name of this ServiceBusStatusResponseSubscriptionsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
