# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GitHubInstallationRepositoriesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clone_url: str=None, default_branch: str=None, description: str=None, fork: bool=None, language: str=None, name: str=None, updated_at: str=None):
        """GitHubInstallationRepositoriesInner - a model defined in OpenAPI

        :param clone_url: The clone_url of this GitHubInstallationRepositoriesInner.
        :param default_branch: The default_branch of this GitHubInstallationRepositoriesInner.
        :param description: The description of this GitHubInstallationRepositoriesInner.
        :param fork: The fork of this GitHubInstallationRepositoriesInner.
        :param language: The language of this GitHubInstallationRepositoriesInner.
        :param name: The name of this GitHubInstallationRepositoriesInner.
        :param updated_at: The updated_at of this GitHubInstallationRepositoriesInner.
        """
        self.openapi_types = {
            'clone_url': str,
            'default_branch': str,
            'description': str,
            'fork': bool,
            'language': str,
            'name': str,
            'updated_at': str
        }

        self.attribute_map = {
            'clone_url': 'clone_url',
            'default_branch': 'default_branch',
            'description': 'description',
            'fork': 'fork',
            'language': 'language',
            'name': 'name',
            'updated_at': 'updated_at'
        }

        self._clone_url = clone_url
        self._default_branch = default_branch
        self._description = description
        self._fork = fork
        self._language = language
        self._name = name
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GitHubInstallationRepositoriesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GitHubInstallationRepositories_inner of this GitHubInstallationRepositoriesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clone_url(self):
        """Gets the clone_url of this GitHubInstallationRepositoriesInner.

        URL used to clone the repository

        :return: The clone_url of this GitHubInstallationRepositoriesInner.
        :rtype: str
        """
        return self._clone_url

    @clone_url.setter
    def clone_url(self, clone_url):
        """Sets the clone_url of this GitHubInstallationRepositoriesInner.

        URL used to clone the repository

        :param clone_url: The clone_url of this GitHubInstallationRepositoriesInner.
        :type clone_url: str
        """

        self._clone_url = clone_url

    @property
    def default_branch(self):
        """Gets the default_branch of this GitHubInstallationRepositoriesInner.

        The default branch for the repo

        :return: The default_branch of this GitHubInstallationRepositoriesInner.
        :rtype: str
        """
        return self._default_branch

    @default_branch.setter
    def default_branch(self, default_branch):
        """Sets the default_branch of this GitHubInstallationRepositoriesInner.

        The default branch for the repo

        :param default_branch: The default_branch of this GitHubInstallationRepositoriesInner.
        :type default_branch: str
        """

        self._default_branch = default_branch

    @property
    def description(self):
        """Gets the description of this GitHubInstallationRepositoriesInner.

        The discription of repository

        :return: The description of this GitHubInstallationRepositoriesInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GitHubInstallationRepositoriesInner.

        The discription of repository

        :param description: The description of this GitHubInstallationRepositoriesInner.
        :type description: str
        """

        self._description = description

    @property
    def fork(self):
        """Gets the fork of this GitHubInstallationRepositoriesInner.

        Whether the repository is a fork

        :return: The fork of this GitHubInstallationRepositoriesInner.
        :rtype: bool
        """
        return self._fork

    @fork.setter
    def fork(self, fork):
        """Sets the fork of this GitHubInstallationRepositoriesInner.

        Whether the repository is a fork

        :param fork: The fork of this GitHubInstallationRepositoriesInner.
        :type fork: bool
        """

        self._fork = fork

    @property
    def language(self):
        """Gets the language of this GitHubInstallationRepositoriesInner.

        The language in the repository

        :return: The language of this GitHubInstallationRepositoriesInner.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this GitHubInstallationRepositoriesInner.

        The language in the repository

        :param language: The language of this GitHubInstallationRepositoriesInner.
        :type language: str
        """

        self._language = language

    @property
    def name(self):
        """Gets the name of this GitHubInstallationRepositoriesInner.

        The repository name

        :return: The name of this GitHubInstallationRepositoriesInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GitHubInstallationRepositoriesInner.

        The repository name

        :param name: The name of this GitHubInstallationRepositoriesInner.
        :type name: str
        """

        self._name = name

    @property
    def updated_at(self):
        """Gets the updated_at of this GitHubInstallationRepositoriesInner.

        The repository updated time

        :return: The updated_at of this GitHubInstallationRepositoriesInner.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this GitHubInstallationRepositoriesInner.

        The repository updated time

        :param updated_at: The updated_at of this GitHubInstallationRepositoriesInner.
        :type updated_at: str
        """

        self._updated_at = updated_at
