# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.builds_list_toolset_projects200_response_android_android_modules_inner_build_configurations_inner import BuildsListToolsetProjects200ResponseAndroidAndroidModulesInnerBuildConfigurationsInner
from openapi_server import util


class BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build_configurations: List[BuildsListToolsetProjects200ResponseAndroidAndroidModulesInnerBuildConfigurationsInner]=None, build_types: List[str]=None, build_variants: List[str]=None, has_bundle: bool=None, is_root: bool=None, name: str=None, product_flavors: List[str]=None):
        """BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner - a model defined in OpenAPI

        :param build_configurations: The build_configurations of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.
        :param build_types: The build_types of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.
        :param build_variants: The build_variants of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.
        :param has_bundle: The has_bundle of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.
        :param is_root: The is_root of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.
        :param name: The name of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.
        :param product_flavors: The product_flavors of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.
        """
        self.openapi_types = {
            'build_configurations': List[BuildsListToolsetProjects200ResponseAndroidAndroidModulesInnerBuildConfigurationsInner],
            'build_types': List[str],
            'build_variants': List[str],
            'has_bundle': bool,
            'is_root': bool,
            'name': str,
            'product_flavors': List[str]
        }

        self.attribute_map = {
            'build_configurations': 'buildConfigurations',
            'build_types': 'buildTypes',
            'build_variants': 'buildVariants',
            'has_bundle': 'hasBundle',
            'is_root': 'isRoot',
            'name': 'name',
            'product_flavors': 'productFlavors'
        }

        self._build_configurations = build_configurations
        self._build_types = build_types
        self._build_variants = build_variants
        self._has_bundle = has_bundle
        self._is_root = is_root
        self._name = name
        self._product_flavors = product_flavors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The builds_listToolsetProjects_200_response_android_androidModules_inner of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build_configurations(self):
        """Gets the build_configurations of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.

        The detected build configurations of the Android module

        :return: The build_configurations of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.
        :rtype: List[BuildsListToolsetProjects200ResponseAndroidAndroidModulesInnerBuildConfigurationsInner]
        """
        return self._build_configurations

    @build_configurations.setter
    def build_configurations(self, build_configurations):
        """Sets the build_configurations of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.

        The detected build configurations of the Android module

        :param build_configurations: The build_configurations of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.
        :type build_configurations: List[BuildsListToolsetProjects200ResponseAndroidAndroidModulesInnerBuildConfigurationsInner]
        """

        self._build_configurations = build_configurations

    @property
    def build_types(self):
        """Gets the build_types of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.

        The detected build types of the Android module

        :return: The build_types of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.
        :rtype: List[str]
        """
        return self._build_types

    @build_types.setter
    def build_types(self, build_types):
        """Sets the build_types of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.

        The detected build types of the Android module

        :param build_types: The build_types of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.
        :type build_types: List[str]
        """

        self._build_types = build_types

    @property
    def build_variants(self):
        """Gets the build_variants of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.

        The detected build variants of the Android module (matrix of product flavor + build type (debug|release))

        :return: The build_variants of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.
        :rtype: List[str]
        """
        return self._build_variants

    @build_variants.setter
    def build_variants(self, build_variants):
        """Sets the build_variants of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.

        The detected build variants of the Android module (matrix of product flavor + build type (debug|release))

        :param build_variants: The build_variants of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.
        :type build_variants: List[str]
        """

        self._build_variants = build_variants

    @property
    def has_bundle(self):
        """Gets the has_bundle of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.

        Module contains bundle settings

        :return: The has_bundle of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.
        :rtype: bool
        """
        return self._has_bundle

    @has_bundle.setter
    def has_bundle(self, has_bundle):
        """Sets the has_bundle of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.

        Module contains bundle settings

        :param has_bundle: The has_bundle of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.
        :type has_bundle: bool
        """

        self._has_bundle = has_bundle

    @property
    def is_root(self):
        """Gets the is_root of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.

        Whether the module is at the root level of the project

        :return: The is_root of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.
        :rtype: bool
        """
        return self._is_root

    @is_root.setter
    def is_root(self, is_root):
        """Sets the is_root of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.

        Whether the module is at the root level of the project

        :param is_root: The is_root of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.
        :type is_root: bool
        """

        self._is_root = is_root

    @property
    def name(self):
        """Gets the name of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.

        Name of the Android module

        :return: The name of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.

        Name of the Android module

        :param name: The name of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def product_flavors(self):
        """Gets the product_flavors of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.

        The product flavors of the Android module

        :return: The product_flavors of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.
        :rtype: List[str]
        """
        return self._product_flavors

    @product_flavors.setter
    def product_flavors(self, product_flavors):
        """Sets the product_flavors of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.

        The product flavors of the Android module

        :param product_flavors: The product_flavors of this BuildsListToolsetProjects200ResponseAndroidAndroidModulesInner.
        :type product_flavors: List[str]
        """

        self._product_flavors = product_flavors
