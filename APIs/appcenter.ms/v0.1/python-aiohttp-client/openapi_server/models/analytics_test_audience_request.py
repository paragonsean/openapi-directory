# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AnalyticsTestAudienceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_properties: Dict[str, str]=None, definition: str=None, description: str=None, enabled: bool=True):
        """AnalyticsTestAudienceRequest - a model defined in OpenAPI

        :param custom_properties: The custom_properties of this AnalyticsTestAudienceRequest.
        :param definition: The definition of this AnalyticsTestAudienceRequest.
        :param description: The description of this AnalyticsTestAudienceRequest.
        :param enabled: The enabled of this AnalyticsTestAudienceRequest.
        """
        self.openapi_types = {
            'custom_properties': Dict[str, str],
            'definition': str,
            'description': str,
            'enabled': bool
        }

        self.attribute_map = {
            'custom_properties': 'custom_properties',
            'definition': 'definition',
            'description': 'description',
            'enabled': 'enabled'
        }

        self._custom_properties = custom_properties
        self._definition = definition
        self._description = description
        self._enabled = enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyticsTestAudienceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Analytics_TestAudience_request of this AnalyticsTestAudienceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_properties(self):
        """Gets the custom_properties of this AnalyticsTestAudienceRequest.

        Custom properties used in the definition.

        :return: The custom_properties of this AnalyticsTestAudienceRequest.
        :rtype: Dict[str, str]
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this AnalyticsTestAudienceRequest.

        Custom properties used in the definition.

        :param custom_properties: The custom_properties of this AnalyticsTestAudienceRequest.
        :type custom_properties: Dict[str, str]
        """
        allowed_values = ["string", "number", "boolean", "date_time"]  # noqa: E501
        if not set(custom_properties.keys()).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid keys in `custom_properties` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(custom_properties.keys()) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._custom_properties = custom_properties

    @property
    def definition(self):
        """Gets the definition of this AnalyticsTestAudienceRequest.

        Audience definition in OData format.

        :return: The definition of this AnalyticsTestAudienceRequest.
        :rtype: str
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this AnalyticsTestAudienceRequest.

        Audience definition in OData format.

        :param definition: The definition of this AnalyticsTestAudienceRequest.
        :type definition: str
        """
        if definition is None:
            raise ValueError("Invalid value for `definition`, must not be `None`")
        if definition is not None and len(definition) > 2000:
            raise ValueError("Invalid value for `definition`, length must be less than or equal to `2000`")

        self._definition = definition

    @property
    def description(self):
        """Gets the description of this AnalyticsTestAudienceRequest.

        Audience description.

        :return: The description of this AnalyticsTestAudienceRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AnalyticsTestAudienceRequest.

        Audience description.

        :param description: The description of this AnalyticsTestAudienceRequest.
        :type description: str
        """
        if description is not None and len(description) > 128:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `128`")

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this AnalyticsTestAudienceRequest.


        :return: The enabled of this AnalyticsTestAudienceRequest.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AnalyticsTestAudienceRequest.


        :param enabled: The enabled of this AnalyticsTestAudienceRequest.
        :type enabled: bool
        """

        self._enabled = enabled
