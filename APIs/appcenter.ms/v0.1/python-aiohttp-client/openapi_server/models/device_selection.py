# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceSelection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, short_id: str=None):
        """DeviceSelection - a model defined in OpenAPI

        :param short_id: The short_id of this DeviceSelection.
        """
        self.openapi_types = {
            'short_id': str
        }

        self.attribute_map = {
            'short_id': 'shortId'
        }

        self._short_id = short_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceSelection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Device_Selection of this DeviceSelection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def short_id(self):
        """Gets the short_id of this DeviceSelection.

        Identifier of the device selection

        :return: The short_id of this DeviceSelection.
        :rtype: str
        """
        return self._short_id

    @short_id.setter
    def short_id(self, short_id):
        """Sets the short_id of this DeviceSelection.

        Identifier of the device selection

        :param short_id: The short_id of this DeviceSelection.
        :type short_id: str
        """
        if short_id is None:
            raise ValueError("Invalid value for `short_id`, must not be `None`")

        self._short_id = short_id
