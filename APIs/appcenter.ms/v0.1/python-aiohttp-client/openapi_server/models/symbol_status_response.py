# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SymbolStatusResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, status: str=None, symbol_id: str=None):
        """SymbolStatusResponse - a model defined in OpenAPI

        :param app_id: The app_id of this SymbolStatusResponse.
        :param status: The status of this SymbolStatusResponse.
        :param symbol_id: The symbol_id of this SymbolStatusResponse.
        """
        self.openapi_types = {
            'app_id': str,
            'status': str,
            'symbol_id': str
        }

        self.attribute_map = {
            'app_id': 'app_id',
            'status': 'status',
            'symbol_id': 'symbol_id'
        }

        self._app_id = app_id
        self._status = status
        self._symbol_id = symbol_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SymbolStatusResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SymbolStatusResponse of this SymbolStatusResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this SymbolStatusResponse.

        The application that this symbol belongs to

        :return: The app_id of this SymbolStatusResponse.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this SymbolStatusResponse.

        The application that this symbol belongs to

        :param app_id: The app_id of this SymbolStatusResponse.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def status(self):
        """Gets the status of this SymbolStatusResponse.

        Whether the symbol is ignored.

        :return: The status of this SymbolStatusResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SymbolStatusResponse.

        Whether the symbol is ignored.

        :param status: The status of this SymbolStatusResponse.
        :type status: str
        """
        allowed_values = ["available", "ignored", "missing"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def symbol_id(self):
        """Gets the symbol_id of this SymbolStatusResponse.

        The unique id for this symbol (uuid)

        :return: The symbol_id of this SymbolStatusResponse.
        :rtype: str
        """
        return self._symbol_id

    @symbol_id.setter
    def symbol_id(self, symbol_id):
        """Sets the symbol_id of this SymbolStatusResponse.

        The unique id for this symbol (uuid)

        :param symbol_id: The symbol_id of this SymbolStatusResponse.
        :type symbol_id: str
        """
        if symbol_id is None:
            raise ValueError("Invalid value for `symbol_id`, must not be `None`")

        self._symbol_id = symbol_id
