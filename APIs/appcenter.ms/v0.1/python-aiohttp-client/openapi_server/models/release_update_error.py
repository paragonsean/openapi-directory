# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.releases_update_details400_response_all_of_destinations_inner import ReleasesUpdateDetails400ResponseAllOfDestinationsInner
from openapi_server import util


class ReleaseUpdateError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, message: str=None, destinations: List[ReleasesUpdateDetails400ResponseAllOfDestinationsInner]=None, mandatory_update: bool=None, release_notes: str=None):
        """ReleaseUpdateError - a model defined in OpenAPI

        :param code: The code of this ReleaseUpdateError.
        :param message: The message of this ReleaseUpdateError.
        :param destinations: The destinations of this ReleaseUpdateError.
        :param mandatory_update: The mandatory_update of this ReleaseUpdateError.
        :param release_notes: The release_notes of this ReleaseUpdateError.
        """
        self.openapi_types = {
            'code': str,
            'message': str,
            'destinations': List[ReleasesUpdateDetails400ResponseAllOfDestinationsInner],
            'mandatory_update': bool,
            'release_notes': str
        }

        self.attribute_map = {
            'code': 'code',
            'message': 'message',
            'destinations': 'destinations',
            'mandatory_update': 'mandatory_update',
            'release_notes': 'release_notes'
        }

        self._code = code
        self._message = message
        self._destinations = destinations
        self._mandatory_update = mandatory_update
        self._release_notes = release_notes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReleaseUpdateError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReleaseUpdateError of this ReleaseUpdateError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ReleaseUpdateError.


        :return: The code of this ReleaseUpdateError.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ReleaseUpdateError.


        :param code: The code of this ReleaseUpdateError.
        :type code: str
        """
        allowed_values = ["BadRequest", "Conflict", "NotAcceptable", "NotFound", "InternalServerError", "Unauthorized", "TooManyRequests"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def message(self):
        """Gets the message of this ReleaseUpdateError.


        :return: The message of this ReleaseUpdateError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ReleaseUpdateError.


        :param message: The message of this ReleaseUpdateError.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def destinations(self):
        """Gets the destinations of this ReleaseUpdateError.


        :return: The destinations of this ReleaseUpdateError.
        :rtype: List[ReleasesUpdateDetails400ResponseAllOfDestinationsInner]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this ReleaseUpdateError.


        :param destinations: The destinations of this ReleaseUpdateError.
        :type destinations: List[ReleasesUpdateDetails400ResponseAllOfDestinationsInner]
        """

        self._destinations = destinations

    @property
    def mandatory_update(self):
        """Gets the mandatory_update of this ReleaseUpdateError.


        :return: The mandatory_update of this ReleaseUpdateError.
        :rtype: bool
        """
        return self._mandatory_update

    @mandatory_update.setter
    def mandatory_update(self, mandatory_update):
        """Sets the mandatory_update of this ReleaseUpdateError.


        :param mandatory_update: The mandatory_update of this ReleaseUpdateError.
        :type mandatory_update: bool
        """

        self._mandatory_update = mandatory_update

    @property
    def release_notes(self):
        """Gets the release_notes of this ReleaseUpdateError.


        :return: The release_notes of this ReleaseUpdateError.
        :rtype: str
        """
        return self._release_notes

    @release_notes.setter
    def release_notes(self, release_notes):
        """Sets the release_notes of this ReleaseUpdateError.


        :param release_notes: The release_notes of this ReleaseUpdateError.
        :type release_notes: str
        """

        self._release_notes = release_notes
