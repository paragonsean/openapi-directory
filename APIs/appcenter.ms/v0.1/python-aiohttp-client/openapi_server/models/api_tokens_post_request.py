# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiTokensPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, encrypted_token: str=None, scope: List[str]=None, token_hash: str=None, token_type: str=None):
        """ApiTokensPostRequest - a model defined in OpenAPI

        :param description: The description of this ApiTokensPostRequest.
        :param encrypted_token: The encrypted_token of this ApiTokensPostRequest.
        :param scope: The scope of this ApiTokensPostRequest.
        :param token_hash: The token_hash of this ApiTokensPostRequest.
        :param token_type: The token_type of this ApiTokensPostRequest.
        """
        self.openapi_types = {
            'description': str,
            'encrypted_token': str,
            'scope': List[str],
            'token_hash': str,
            'token_type': str
        }

        self.attribute_map = {
            'description': 'description',
            'encrypted_token': 'encrypted_token',
            'scope': 'scope',
            'token_hash': 'token_hash',
            'token_type': 'token_type'
        }

        self._description = description
        self._encrypted_token = encrypted_token
        self._scope = scope
        self._token_hash = token_hash
        self._token_type = token_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiTokensPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiTokensPostRequest of this ApiTokensPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ApiTokensPostRequest.

        The description of the token

        :return: The description of this ApiTokensPostRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiTokensPostRequest.

        The description of the token

        :param description: The description of this ApiTokensPostRequest.
        :type description: str
        """

        self._description = description

    @property
    def encrypted_token(self):
        """Gets the encrypted_token of this ApiTokensPostRequest.

        An encrypted value of the token.

        :return: The encrypted_token of this ApiTokensPostRequest.
        :rtype: str
        """
        return self._encrypted_token

    @encrypted_token.setter
    def encrypted_token(self, encrypted_token):
        """Sets the encrypted_token of this ApiTokensPostRequest.

        An encrypted value of the token.

        :param encrypted_token: The encrypted_token of this ApiTokensPostRequest.
        :type encrypted_token: str
        """

        self._encrypted_token = encrypted_token

    @property
    def scope(self):
        """Gets the scope of this ApiTokensPostRequest.

        The scope for this token. An array of supported roles.

        :return: The scope of this ApiTokensPostRequest.
        :rtype: List[str]
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this ApiTokensPostRequest.

        The scope for this token. An array of supported roles.

        :param scope: The scope of this ApiTokensPostRequest.
        :type scope: List[str]
        """
        allowed_values = ["all", "in_app_update", "viewer"]  # noqa: E501
        if not set(scope).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `scope` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(scope) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._scope = scope

    @property
    def token_hash(self):
        """Gets the token_hash of this ApiTokensPostRequest.

        The hashed value of api token

        :return: The token_hash of this ApiTokensPostRequest.
        :rtype: str
        """
        return self._token_hash

    @token_hash.setter
    def token_hash(self, token_hash):
        """Sets the token_hash of this ApiTokensPostRequest.

        The hashed value of api token

        :param token_hash: The token_hash of this ApiTokensPostRequest.
        :type token_hash: str
        """

        self._token_hash = token_hash

    @property
    def token_type(self):
        """Gets the token_type of this ApiTokensPostRequest.

        The token's type. public:managed by the user; in_app_update:special token for in-app update scenario; buid:dedicated for CI usage for now; session:for CLI session management; tester_app: used for tester mobile app; default is \"public\".'

        :return: The token_type of this ApiTokensPostRequest.
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this ApiTokensPostRequest.

        The token's type. public:managed by the user; in_app_update:special token for in-app update scenario; buid:dedicated for CI usage for now; session:for CLI session management; tester_app: used for tester mobile app; default is \"public\".'

        :param token_type: The token_type of this ApiTokensPostRequest.
        :type token_type: str
        """
        allowed_values = ["public", "in_app_update", "build", "session", "tester_app"]  # noqa: E501
        if token_type not in allowed_values:
            raise ValueError(
                "Invalid value for `token_type` ({0}), must be one of {1}"
                .format(token_type, allowed_values)
            )

        self._token_type = token_type
