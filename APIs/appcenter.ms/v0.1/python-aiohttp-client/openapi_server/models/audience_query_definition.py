# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AudienceQueryDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identifiers: List[str]=None, query_type: str=None):
        """AudienceQueryDefinition - a model defined in OpenAPI

        :param identifiers: The identifiers of this AudienceQueryDefinition.
        :param query_type: The query_type of this AudienceQueryDefinition.
        """
        self.openapi_types = {
            'identifiers': List[str],
            'query_type': str
        }

        self.attribute_map = {
            'identifiers': 'identifiers',
            'query_type': 'queryType'
        }

        self._identifiers = identifiers
        self._query_type = query_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudienceQueryDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudienceQueryDefinition of this AudienceQueryDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identifiers(self):
        """Gets the identifiers of this AudienceQueryDefinition.

        List of identifiers.

        :return: The identifiers of this AudienceQueryDefinition.
        :rtype: List[str]
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this AudienceQueryDefinition.

        List of identifiers.

        :param identifiers: The identifiers of this AudienceQueryDefinition.
        :type identifiers: List[str]
        """

        self._identifiers = identifiers

    @property
    def query_type(self):
        """Gets the query_type of this AudienceQueryDefinition.

        Audience Query Type

        :return: The query_type of this AudienceQueryDefinition.
        :rtype: str
        """
        return self._query_type

    @query_type.setter
    def query_type(self, query_type):
        """Sets the query_type of this AudienceQueryDefinition.

        Audience Query Type

        :param query_type: The query_type of this AudienceQueryDefinition.
        :type query_type: str
        """
        allowed_values = ["broadcast", "user_ids", "account_ids", "install_ids"]  # noqa: E501
        if query_type not in allowed_values:
            raise ValueError(
                "Invalid value for `query_type` ({0}), must be one of {1}"
                .format(query_type, allowed_values)
            )

        self._query_type = query_type
