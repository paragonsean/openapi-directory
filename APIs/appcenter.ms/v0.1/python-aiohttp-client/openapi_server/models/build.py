# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Build(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build_number: str=None, finish_time: str=None, id: int=None, last_changed_date: str=None, queue_time: str=None, result: str=None, source_branch: str=None, source_version: str=None, start_time: str=None, status: str=None):
        """Build - a model defined in OpenAPI

        :param build_number: The build_number of this Build.
        :param finish_time: The finish_time of this Build.
        :param id: The id of this Build.
        :param last_changed_date: The last_changed_date of this Build.
        :param queue_time: The queue_time of this Build.
        :param result: The result of this Build.
        :param source_branch: The source_branch of this Build.
        :param source_version: The source_version of this Build.
        :param start_time: The start_time of this Build.
        :param status: The status of this Build.
        """
        self.openapi_types = {
            'build_number': str,
            'finish_time': str,
            'id': int,
            'last_changed_date': str,
            'queue_time': str,
            'result': str,
            'source_branch': str,
            'source_version': str,
            'start_time': str,
            'status': str
        }

        self.attribute_map = {
            'build_number': 'buildNumber',
            'finish_time': 'finishTime',
            'id': 'id',
            'last_changed_date': 'lastChangedDate',
            'queue_time': 'queueTime',
            'result': 'result',
            'source_branch': 'sourceBranch',
            'source_version': 'sourceVersion',
            'start_time': 'startTime',
            'status': 'status'
        }

        self._build_number = build_number
        self._finish_time = finish_time
        self._id = id
        self._last_changed_date = last_changed_date
        self._queue_time = queue_time
        self._result = result
        self._source_branch = source_branch
        self._source_version = source_version
        self._start_time = start_time
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Build':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Build of this Build.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build_number(self):
        """Gets the build_number of this Build.

        The build number

        :return: The build_number of this Build.
        :rtype: str
        """
        return self._build_number

    @build_number.setter
    def build_number(self, build_number):
        """Sets the build_number of this Build.

        The build number

        :param build_number: The build_number of this Build.
        :type build_number: str
        """
        if build_number is None:
            raise ValueError("Invalid value for `build_number`, must not be `None`")

        self._build_number = build_number

    @property
    def finish_time(self):
        """Gets the finish_time of this Build.

        The time the build was finished

        :return: The finish_time of this Build.
        :rtype: str
        """
        return self._finish_time

    @finish_time.setter
    def finish_time(self, finish_time):
        """Sets the finish_time of this Build.

        The time the build was finished

        :param finish_time: The finish_time of this Build.
        :type finish_time: str
        """

        self._finish_time = finish_time

    @property
    def id(self):
        """Gets the id of this Build.

        The build ID

        :return: The id of this Build.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Build.

        The build ID

        :param id: The id of this Build.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and id <= 0:
            raise ValueError("Invalid value for `id`, must be a value greater than `0`")

        self._id = id

    @property
    def last_changed_date(self):
        """Gets the last_changed_date of this Build.

        The time the build status was last changed

        :return: The last_changed_date of this Build.
        :rtype: str
        """
        return self._last_changed_date

    @last_changed_date.setter
    def last_changed_date(self, last_changed_date):
        """Sets the last_changed_date of this Build.

        The time the build status was last changed

        :param last_changed_date: The last_changed_date of this Build.
        :type last_changed_date: str
        """

        self._last_changed_date = last_changed_date

    @property
    def queue_time(self):
        """Gets the queue_time of this Build.

        The time the build was queued

        :return: The queue_time of this Build.
        :rtype: str
        """
        return self._queue_time

    @queue_time.setter
    def queue_time(self, queue_time):
        """Sets the queue_time of this Build.

        The time the build was queued

        :param queue_time: The queue_time of this Build.
        :type queue_time: str
        """
        if queue_time is None:
            raise ValueError("Invalid value for `queue_time`, must not be `None`")

        self._queue_time = queue_time

    @property
    def result(self):
        """Gets the result of this Build.

        The build result

        :return: The result of this Build.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Build.

        The build result

        :param result: The result of this Build.
        :type result: str
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")

        self._result = result

    @property
    def source_branch(self):
        """Gets the source_branch of this Build.

        The source branch name

        :return: The source_branch of this Build.
        :rtype: str
        """
        return self._source_branch

    @source_branch.setter
    def source_branch(self, source_branch):
        """Sets the source_branch of this Build.

        The source branch name

        :param source_branch: The source_branch of this Build.
        :type source_branch: str
        """
        if source_branch is None:
            raise ValueError("Invalid value for `source_branch`, must not be `None`")

        self._source_branch = source_branch

    @property
    def source_version(self):
        """Gets the source_version of this Build.

        The source SHA

        :return: The source_version of this Build.
        :rtype: str
        """
        return self._source_version

    @source_version.setter
    def source_version(self, source_version):
        """Sets the source_version of this Build.

        The source SHA

        :param source_version: The source_version of this Build.
        :type source_version: str
        """
        if source_version is None:
            raise ValueError("Invalid value for `source_version`, must not be `None`")

        self._source_version = source_version

    @property
    def start_time(self):
        """Gets the start_time of this Build.

        The time the build was started

        :return: The start_time of this Build.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Build.

        The time the build was started

        :param start_time: The start_time of this Build.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this Build.

        The build status

        :return: The status of this Build.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Build.

        The build status

        :param status: The status of this Build.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
