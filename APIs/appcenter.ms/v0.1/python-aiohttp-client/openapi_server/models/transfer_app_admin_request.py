# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransferAppAdminRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, issue_id: str=None, new_owner_id: str=None, responsible_admin_id: str=None, transfer_reason: str=None):
        """TransferAppAdminRequest - a model defined in OpenAPI

        :param issue_id: The issue_id of this TransferAppAdminRequest.
        :param new_owner_id: The new_owner_id of this TransferAppAdminRequest.
        :param responsible_admin_id: The responsible_admin_id of this TransferAppAdminRequest.
        :param transfer_reason: The transfer_reason of this TransferAppAdminRequest.
        """
        self.openapi_types = {
            'issue_id': str,
            'new_owner_id': str,
            'responsible_admin_id': str,
            'transfer_reason': str
        }

        self.attribute_map = {
            'issue_id': 'issue_id',
            'new_owner_id': 'new_owner_id',
            'responsible_admin_id': 'responsible_admin_id',
            'transfer_reason': 'transfer_reason'
        }

        self._issue_id = issue_id
        self._new_owner_id = new_owner_id
        self._responsible_admin_id = responsible_admin_id
        self._transfer_reason = transfer_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransferAppAdminRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransferAppAdminRequest of this TransferAppAdminRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issue_id(self):
        """Gets the issue_id of this TransferAppAdminRequest.

        The id of the related Intercom issue.

        :return: The issue_id of this TransferAppAdminRequest.
        :rtype: str
        """
        return self._issue_id

    @issue_id.setter
    def issue_id(self, issue_id):
        """Sets the issue_id of this TransferAppAdminRequest.

        The id of the related Intercom issue.

        :param issue_id: The issue_id of this TransferAppAdminRequest.
        :type issue_id: str
        """
        if issue_id is None:
            raise ValueError("Invalid value for `issue_id`, must not be `None`")

        self._issue_id = issue_id

    @property
    def new_owner_id(self):
        """Gets the new_owner_id of this TransferAppAdminRequest.

        The internal unique id (UUID) of the user/org.

        :return: The new_owner_id of this TransferAppAdminRequest.
        :rtype: str
        """
        return self._new_owner_id

    @new_owner_id.setter
    def new_owner_id(self, new_owner_id):
        """Sets the new_owner_id of this TransferAppAdminRequest.

        The internal unique id (UUID) of the user/org.

        :param new_owner_id: The new_owner_id of this TransferAppAdminRequest.
        :type new_owner_id: str
        """
        if new_owner_id is None:
            raise ValueError("Invalid value for `new_owner_id`, must not be `None`")

        self._new_owner_id = new_owner_id

    @property
    def responsible_admin_id(self):
        """Gets the responsible_admin_id of this TransferAppAdminRequest.

        The id of the user who started transfer process.

        :return: The responsible_admin_id of this TransferAppAdminRequest.
        :rtype: str
        """
        return self._responsible_admin_id

    @responsible_admin_id.setter
    def responsible_admin_id(self, responsible_admin_id):
        """Sets the responsible_admin_id of this TransferAppAdminRequest.

        The id of the user who started transfer process.

        :param responsible_admin_id: The responsible_admin_id of this TransferAppAdminRequest.
        :type responsible_admin_id: str
        """
        if responsible_admin_id is None:
            raise ValueError("Invalid value for `responsible_admin_id`, must not be `None`")

        self._responsible_admin_id = responsible_admin_id

    @property
    def transfer_reason(self):
        """Gets the transfer_reason of this TransferAppAdminRequest.

        The explanation for starting transfer process.

        :return: The transfer_reason of this TransferAppAdminRequest.
        :rtype: str
        """
        return self._transfer_reason

    @transfer_reason.setter
    def transfer_reason(self, transfer_reason):
        """Sets the transfer_reason of this TransferAppAdminRequest.

        The explanation for starting transfer process.

        :param transfer_reason: The transfer_reason of this TransferAppAdminRequest.
        :type transfer_reason: str
        """
        if transfer_reason is None:
            raise ValueError("Invalid value for `transfer_reason`, must not be `None`")

        self._transfer_reason = transfer_reason
