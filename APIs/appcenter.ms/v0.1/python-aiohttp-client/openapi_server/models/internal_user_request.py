# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InternalUserRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_invitation: str=None, avatar_url: str=None, display_name: str=None, email: str=None, name: str=None, organization_invitation: str=None, password: str=None, portal_subdomain: str=None, tester_invitation: str=None):
        """InternalUserRequest - a model defined in OpenAPI

        :param app_invitation: The app_invitation of this InternalUserRequest.
        :param avatar_url: The avatar_url of this InternalUserRequest.
        :param display_name: The display_name of this InternalUserRequest.
        :param email: The email of this InternalUserRequest.
        :param name: The name of this InternalUserRequest.
        :param organization_invitation: The organization_invitation of this InternalUserRequest.
        :param password: The password of this InternalUserRequest.
        :param portal_subdomain: The portal_subdomain of this InternalUserRequest.
        :param tester_invitation: The tester_invitation of this InternalUserRequest.
        """
        self.openapi_types = {
            'app_invitation': str,
            'avatar_url': str,
            'display_name': str,
            'email': str,
            'name': str,
            'organization_invitation': str,
            'password': str,
            'portal_subdomain': str,
            'tester_invitation': str
        }

        self.attribute_map = {
            'app_invitation': 'app_invitation',
            'avatar_url': 'avatar_url',
            'display_name': 'display_name',
            'email': 'email',
            'name': 'name',
            'organization_invitation': 'organization_invitation',
            'password': 'password',
            'portal_subdomain': 'portal_subdomain',
            'tester_invitation': 'tester_invitation'
        }

        self._app_invitation = app_invitation
        self._avatar_url = avatar_url
        self._display_name = display_name
        self._email = email
        self._name = name
        self._organization_invitation = organization_invitation
        self._password = password
        self._portal_subdomain = portal_subdomain
        self._tester_invitation = tester_invitation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InternalUserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InternalUserRequest of this InternalUserRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_invitation(self):
        """Gets the app_invitation of this InternalUserRequest.

        The token of the app invitation which lead to signup

        :return: The app_invitation of this InternalUserRequest.
        :rtype: str
        """
        return self._app_invitation

    @app_invitation.setter
    def app_invitation(self, app_invitation):
        """Sets the app_invitation of this InternalUserRequest.

        The token of the app invitation which lead to signup

        :param app_invitation: The app_invitation of this InternalUserRequest.
        :type app_invitation: str
        """

        self._app_invitation = app_invitation

    @property
    def avatar_url(self):
        """Gets the avatar_url of this InternalUserRequest.

        The avatar URL of the user

        :return: The avatar_url of this InternalUserRequest.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this InternalUserRequest.

        The avatar URL of the user

        :param avatar_url: The avatar_url of this InternalUserRequest.
        :type avatar_url: str
        """

        self._avatar_url = avatar_url

    @property
    def display_name(self):
        """Gets the display_name of this InternalUserRequest.

        The full name of the user. Might for example be first and last name

        :return: The display_name of this InternalUserRequest.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InternalUserRequest.

        The full name of the user. Might for example be first and last name

        :param display_name: The display_name of this InternalUserRequest.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this InternalUserRequest.

        The email address of the user

        :return: The email of this InternalUserRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InternalUserRequest.

        The email address of the user

        :param email: The email of this InternalUserRequest.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def name(self):
        """Gets the name of this InternalUserRequest.

        The unique name that is used to identify the user.

        :return: The name of this InternalUserRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InternalUserRequest.

        The unique name that is used to identify the user.

        :param name: The name of this InternalUserRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def organization_invitation(self):
        """Gets the organization_invitation of this InternalUserRequest.

        The token of the organization invitation which lead to signup

        :return: The organization_invitation of this InternalUserRequest.
        :rtype: str
        """
        return self._organization_invitation

    @organization_invitation.setter
    def organization_invitation(self, organization_invitation):
        """Sets the organization_invitation of this InternalUserRequest.

        The token of the organization invitation which lead to signup

        :param organization_invitation: The organization_invitation of this InternalUserRequest.
        :type organization_invitation: str
        """

        self._organization_invitation = organization_invitation

    @property
    def password(self):
        """Gets the password of this InternalUserRequest.

        The password of the user. Needs to be at least 8 characters long and contain at least one lower- and one uppercase letter.

        :return: The password of this InternalUserRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this InternalUserRequest.

        The password of the user. Needs to be at least 8 characters long and contain at least one lower- and one uppercase letter.

        :param password: The password of this InternalUserRequest.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def portal_subdomain(self):
        """Gets the portal_subdomain of this InternalUserRequest.

        The sub-domain of the portal from which this request was made. Will be used to build the invitation link.

        :return: The portal_subdomain of this InternalUserRequest.
        :rtype: str
        """
        return self._portal_subdomain

    @portal_subdomain.setter
    def portal_subdomain(self, portal_subdomain):
        """Sets the portal_subdomain of this InternalUserRequest.

        The sub-domain of the portal from which this request was made. Will be used to build the invitation link.

        :param portal_subdomain: The portal_subdomain of this InternalUserRequest.
        :type portal_subdomain: str
        """
        allowed_values = ["install."]  # noqa: E501
        if portal_subdomain not in allowed_values:
            raise ValueError(
                "Invalid value for `portal_subdomain` ({0}), must be one of {1}"
                .format(portal_subdomain, allowed_values)
            )

        self._portal_subdomain = portal_subdomain

    @property
    def tester_invitation(self):
        """Gets the tester_invitation of this InternalUserRequest.

        The token of the test invitation which lead to signup

        :return: The tester_invitation of this InternalUserRequest.
        :rtype: str
        """
        return self._tester_invitation

    @tester_invitation.setter
    def tester_invitation(self, tester_invitation):
        """Sets the tester_invitation of this InternalUserRequest.

        The token of the test invitation which lead to signup

        :param tester_invitation: The tester_invitation of this InternalUserRequest.
        :type tester_invitation: str
        """

        self._tester_invitation = tester_invitation
