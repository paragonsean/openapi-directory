# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_invitations_list200_response_invited_by import AppInvitationsList200ResponseInvitedBy
from openapi_server.models.organizations_list_administered200_response_organizations import OrganizationsListAdministered200ResponseOrganizations
from openapi_server import util


class OrganizationInvitationDetailResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, id: str=None, invited_by: AppInvitationsList200ResponseInvitedBy=None, is_existing_user: bool=None, organization: OrganizationsListAdministered200ResponseOrganizations=None, role: str=None):
        """OrganizationInvitationDetailResponse - a model defined in OpenAPI

        :param email: The email of this OrganizationInvitationDetailResponse.
        :param id: The id of this OrganizationInvitationDetailResponse.
        :param invited_by: The invited_by of this OrganizationInvitationDetailResponse.
        :param is_existing_user: The is_existing_user of this OrganizationInvitationDetailResponse.
        :param organization: The organization of this OrganizationInvitationDetailResponse.
        :param role: The role of this OrganizationInvitationDetailResponse.
        """
        self.openapi_types = {
            'email': str,
            'id': str,
            'invited_by': AppInvitationsList200ResponseInvitedBy,
            'is_existing_user': bool,
            'organization': OrganizationsListAdministered200ResponseOrganizations,
            'role': str
        }

        self.attribute_map = {
            'email': 'email',
            'id': 'id',
            'invited_by': 'invited_by',
            'is_existing_user': 'is_existing_user',
            'organization': 'organization',
            'role': 'role'
        }

        self._email = email
        self._id = id
        self._invited_by = invited_by
        self._is_existing_user = is_existing_user
        self._organization = organization
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrganizationInvitationDetailResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrganizationInvitationDetailResponse of this OrganizationInvitationDetailResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this OrganizationInvitationDetailResponse.

        The email address of the invited user

        :return: The email of this OrganizationInvitationDetailResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this OrganizationInvitationDetailResponse.

        The email address of the invited user

        :param email: The email of this OrganizationInvitationDetailResponse.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def id(self):
        """Gets the id of this OrganizationInvitationDetailResponse.

        The unique ID (UUID) of the invitation

        :return: The id of this OrganizationInvitationDetailResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrganizationInvitationDetailResponse.

        The unique ID (UUID) of the invitation

        :param id: The id of this OrganizationInvitationDetailResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def invited_by(self):
        """Gets the invited_by of this OrganizationInvitationDetailResponse.


        :return: The invited_by of this OrganizationInvitationDetailResponse.
        :rtype: AppInvitationsList200ResponseInvitedBy
        """
        return self._invited_by

    @invited_by.setter
    def invited_by(self, invited_by):
        """Sets the invited_by of this OrganizationInvitationDetailResponse.


        :param invited_by: The invited_by of this OrganizationInvitationDetailResponse.
        :type invited_by: AppInvitationsList200ResponseInvitedBy
        """
        if invited_by is None:
            raise ValueError("Invalid value for `invited_by`, must not be `None`")

        self._invited_by = invited_by

    @property
    def is_existing_user(self):
        """Gets the is_existing_user of this OrganizationInvitationDetailResponse.

        Indicates whether the invited user already exists

        :return: The is_existing_user of this OrganizationInvitationDetailResponse.
        :rtype: bool
        """
        return self._is_existing_user

    @is_existing_user.setter
    def is_existing_user(self, is_existing_user):
        """Sets the is_existing_user of this OrganizationInvitationDetailResponse.

        Indicates whether the invited user already exists

        :param is_existing_user: The is_existing_user of this OrganizationInvitationDetailResponse.
        :type is_existing_user: bool
        """
        if is_existing_user is None:
            raise ValueError("Invalid value for `is_existing_user`, must not be `None`")

        self._is_existing_user = is_existing_user

    @property
    def organization(self):
        """Gets the organization of this OrganizationInvitationDetailResponse.


        :return: The organization of this OrganizationInvitationDetailResponse.
        :rtype: OrganizationsListAdministered200ResponseOrganizations
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this OrganizationInvitationDetailResponse.


        :param organization: The organization of this OrganizationInvitationDetailResponse.
        :type organization: OrganizationsListAdministered200ResponseOrganizations
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")

        self._organization = organization

    @property
    def role(self):
        """Gets the role of this OrganizationInvitationDetailResponse.

        The role assigned to the invited user

        :return: The role of this OrganizationInvitationDetailResponse.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this OrganizationInvitationDetailResponse.

        The role assigned to the invited user

        :param role: The role of this OrganizationInvitationDetailResponse.
        :type role: str
        """

        self._role = role
