# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_profile_response_management_all_of_identity_providers import UserProfileResponseManagementAllOfIdentityProviders
from openapi_server import util


class UserProfileResponseManagement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar_url: str=None, can_change_password: bool=None, display_name: str=None, email: str=None, id: str=None, name: str=None, origin: str=None, permissions: List[str]=None, admin_role: str=None, feature_flags: List[str]=None, settings: object=None, identity_providers: List[UserProfileResponseManagementAllOfIdentityProviders]=None, updated_at: str=None, verified: bool=None):
        """UserProfileResponseManagement - a model defined in OpenAPI

        :param avatar_url: The avatar_url of this UserProfileResponseManagement.
        :param can_change_password: The can_change_password of this UserProfileResponseManagement.
        :param display_name: The display_name of this UserProfileResponseManagement.
        :param email: The email of this UserProfileResponseManagement.
        :param id: The id of this UserProfileResponseManagement.
        :param name: The name of this UserProfileResponseManagement.
        :param origin: The origin of this UserProfileResponseManagement.
        :param permissions: The permissions of this UserProfileResponseManagement.
        :param admin_role: The admin_role of this UserProfileResponseManagement.
        :param feature_flags: The feature_flags of this UserProfileResponseManagement.
        :param settings: The settings of this UserProfileResponseManagement.
        :param identity_providers: The identity_providers of this UserProfileResponseManagement.
        :param updated_at: The updated_at of this UserProfileResponseManagement.
        :param verified: The verified of this UserProfileResponseManagement.
        """
        self.openapi_types = {
            'avatar_url': str,
            'can_change_password': bool,
            'display_name': str,
            'email': str,
            'id': str,
            'name': str,
            'origin': str,
            'permissions': List[str],
            'admin_role': str,
            'feature_flags': List[str],
            'settings': object,
            'identity_providers': List[UserProfileResponseManagementAllOfIdentityProviders],
            'updated_at': str,
            'verified': bool
        }

        self.attribute_map = {
            'avatar_url': 'avatar_url',
            'can_change_password': 'can_change_password',
            'display_name': 'display_name',
            'email': 'email',
            'id': 'id',
            'name': 'name',
            'origin': 'origin',
            'permissions': 'permissions',
            'admin_role': 'admin_role',
            'feature_flags': 'feature_flags',
            'settings': 'settings',
            'identity_providers': 'identity_providers',
            'updated_at': 'updated_at',
            'verified': 'verified'
        }

        self._avatar_url = avatar_url
        self._can_change_password = can_change_password
        self._display_name = display_name
        self._email = email
        self._id = id
        self._name = name
        self._origin = origin
        self._permissions = permissions
        self._admin_role = admin_role
        self._feature_flags = feature_flags
        self._settings = settings
        self._identity_providers = identity_providers
        self._updated_at = updated_at
        self._verified = verified

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserProfileResponseManagement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserProfileResponseManagement of this UserProfileResponseManagement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar_url(self):
        """Gets the avatar_url of this UserProfileResponseManagement.

        The avatar URL of the user

        :return: The avatar_url of this UserProfileResponseManagement.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this UserProfileResponseManagement.

        The avatar URL of the user

        :param avatar_url: The avatar_url of this UserProfileResponseManagement.
        :type avatar_url: str
        """

        self._avatar_url = avatar_url

    @property
    def can_change_password(self):
        """Gets the can_change_password of this UserProfileResponseManagement.

        User is required to send an old password in order to change the password.

        :return: The can_change_password of this UserProfileResponseManagement.
        :rtype: bool
        """
        return self._can_change_password

    @can_change_password.setter
    def can_change_password(self, can_change_password):
        """Sets the can_change_password of this UserProfileResponseManagement.

        User is required to send an old password in order to change the password.

        :param can_change_password: The can_change_password of this UserProfileResponseManagement.
        :type can_change_password: bool
        """

        self._can_change_password = can_change_password

    @property
    def display_name(self):
        """Gets the display_name of this UserProfileResponseManagement.

        The full name of the user. Might for example be first and last name

        :return: The display_name of this UserProfileResponseManagement.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UserProfileResponseManagement.

        The full name of the user. Might for example be first and last name

        :param display_name: The display_name of this UserProfileResponseManagement.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this UserProfileResponseManagement.

        The email address of the user

        :return: The email of this UserProfileResponseManagement.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserProfileResponseManagement.

        The email address of the user

        :param email: The email of this UserProfileResponseManagement.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def id(self):
        """Gets the id of this UserProfileResponseManagement.

        The unique id (UUID) of the user

        :return: The id of this UserProfileResponseManagement.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserProfileResponseManagement.

        The unique id (UUID) of the user

        :param id: The id of this UserProfileResponseManagement.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this UserProfileResponseManagement.

        The unique name that is used to identify the user.

        :return: The name of this UserProfileResponseManagement.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserProfileResponseManagement.

        The unique name that is used to identify the user.

        :param name: The name of this UserProfileResponseManagement.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def origin(self):
        """Gets the origin of this UserProfileResponseManagement.

        The creation origin of this user

        :return: The origin of this UserProfileResponseManagement.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this UserProfileResponseManagement.

        The creation origin of this user

        :param origin: The origin of this UserProfileResponseManagement.
        :type origin: str
        """
        allowed_values = ["appcenter", "hockeyapp", "codepush"]  # noqa: E501
        if origin not in allowed_values:
            raise ValueError(
                "Invalid value for `origin` ({0}), must be one of {1}"
                .format(origin, allowed_values)
            )

        self._origin = origin

    @property
    def permissions(self):
        """Gets the permissions of this UserProfileResponseManagement.

        The permissions the user has for the app

        :return: The permissions of this UserProfileResponseManagement.
        :rtype: List[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this UserProfileResponseManagement.

        The permissions the user has for the app

        :param permissions: The permissions of this UserProfileResponseManagement.
        :type permissions: List[str]
        """
        allowed_values = ["manager", "developer", "viewer", "tester"]  # noqa: E501
        if not set(permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `permissions` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(permissions) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._permissions = permissions

    @property
    def admin_role(self):
        """Gets the admin_role of this UserProfileResponseManagement.

        The new admin_role

        :return: The admin_role of this UserProfileResponseManagement.
        :rtype: str
        """
        return self._admin_role

    @admin_role.setter
    def admin_role(self, admin_role):
        """Sets the admin_role of this UserProfileResponseManagement.

        The new admin_role

        :param admin_role: The admin_role of this UserProfileResponseManagement.
        :type admin_role: str
        """
        allowed_values = ["superAdmin", "admin", "devOps", "customerSupport", "notAdmin"]  # noqa: E501
        if admin_role not in allowed_values:
            raise ValueError(
                "Invalid value for `admin_role` ({0}), must be one of {1}"
                .format(admin_role, allowed_values)
            )

        self._admin_role = admin_role

    @property
    def feature_flags(self):
        """Gets the feature_flags of this UserProfileResponseManagement.

        The feature flags that are enabled for this app

        :return: The feature_flags of this UserProfileResponseManagement.
        :rtype: List[str]
        """
        return self._feature_flags

    @feature_flags.setter
    def feature_flags(self, feature_flags):
        """Sets the feature_flags of this UserProfileResponseManagement.

        The feature flags that are enabled for this app

        :param feature_flags: The feature_flags of this UserProfileResponseManagement.
        :type feature_flags: List[str]
        """

        self._feature_flags = feature_flags

    @property
    def settings(self):
        """Gets the settings of this UserProfileResponseManagement.

        The user's settings

        :return: The settings of this UserProfileResponseManagement.
        :rtype: object
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this UserProfileResponseManagement.

        The user's settings

        :param settings: The settings of this UserProfileResponseManagement.
        :type settings: object
        """

        self._settings = settings

    @property
    def identity_providers(self):
        """Gets the identity_providers of this UserProfileResponseManagement.

        The identity providers associated with the user's account

        :return: The identity_providers of this UserProfileResponseManagement.
        :rtype: List[UserProfileResponseManagementAllOfIdentityProviders]
        """
        return self._identity_providers

    @identity_providers.setter
    def identity_providers(self, identity_providers):
        """Sets the identity_providers of this UserProfileResponseManagement.

        The identity providers associated with the user's account

        :param identity_providers: The identity_providers of this UserProfileResponseManagement.
        :type identity_providers: List[UserProfileResponseManagementAllOfIdentityProviders]
        """

        self._identity_providers = identity_providers

    @property
    def updated_at(self):
        """Gets the updated_at of this UserProfileResponseManagement.

        The date when the app was last updated

        :return: The updated_at of this UserProfileResponseManagement.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this UserProfileResponseManagement.

        The date when the app was last updated

        :param updated_at: The updated_at of this UserProfileResponseManagement.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def verified(self):
        """Gets the verified of this UserProfileResponseManagement.

        A boolean flag that indicates if the user is already verified

        :return: The verified of this UserProfileResponseManagement.
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this UserProfileResponseManagement.

        A boolean flag that indicates if the user is already verified

        :param verified: The verified of this UserProfileResponseManagement.
        :type verified: bool
        """

        self._verified = verified
