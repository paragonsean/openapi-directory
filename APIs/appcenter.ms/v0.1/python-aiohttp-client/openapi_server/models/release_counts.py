# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analytics_distribution_release_counts200_response_counts_inner import AnalyticsDistributionReleaseCounts200ResponseCountsInner
from openapi_server import util


class ReleaseCounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, counts: List[AnalyticsDistributionReleaseCounts200ResponseCountsInner]=None, total: int=None):
        """ReleaseCounts - a model defined in OpenAPI

        :param counts: The counts of this ReleaseCounts.
        :param total: The total of this ReleaseCounts.
        """
        self.openapi_types = {
            'counts': List[AnalyticsDistributionReleaseCounts200ResponseCountsInner],
            'total': int
        }

        self.attribute_map = {
            'counts': 'counts',
            'total': 'total'
        }

        self._counts = counts
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReleaseCounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReleaseCounts of this ReleaseCounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def counts(self):
        """Gets the counts of this ReleaseCounts.


        :return: The counts of this ReleaseCounts.
        :rtype: List[AnalyticsDistributionReleaseCounts200ResponseCountsInner]
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this ReleaseCounts.


        :param counts: The counts of this ReleaseCounts.
        :type counts: List[AnalyticsDistributionReleaseCounts200ResponseCountsInner]
        """
        if counts is None:
            raise ValueError("Invalid value for `counts`, must not be `None`")

        self._counts = counts

    @property
    def total(self):
        """Gets the total of this ReleaseCounts.


        :return: The total of this ReleaseCounts.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ReleaseCounts.


        :param total: The total of this ReleaseCounts.
        :type total: int
        """

        self._total = total
