# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CodePushReleaseUpload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, token: str=None, upload_domain: str=None):
        """CodePushReleaseUpload - a model defined in OpenAPI

        :param id: The id of this CodePushReleaseUpload.
        :param token: The token of this CodePushReleaseUpload.
        :param upload_domain: The upload_domain of this CodePushReleaseUpload.
        """
        self.openapi_types = {
            'id': str,
            'token': str,
            'upload_domain': str
        }

        self.attribute_map = {
            'id': 'id',
            'token': 'token',
            'upload_domain': 'upload_domain'
        }

        self._id = id
        self._token = token
        self._upload_domain = upload_domain

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodePushReleaseUpload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodePushReleaseUpload of this CodePushReleaseUpload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CodePushReleaseUpload.

        The ID for the newly created upload. It is going to be required later in the process.

        :return: The id of this CodePushReleaseUpload.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodePushReleaseUpload.

        The ID for the newly created upload. It is going to be required later in the process.

        :param id: The id of this CodePushReleaseUpload.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def token(self):
        """Gets the token of this CodePushReleaseUpload.

        The URL encoded token used for upload permissions.

        :return: The token of this CodePushReleaseUpload.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this CodePushReleaseUpload.

        The URL encoded token used for upload permissions.

        :param token: The token of this CodePushReleaseUpload.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def upload_domain(self):
        """Gets the upload_domain of this CodePushReleaseUpload.

        The URL domain used to upload the release.

        :return: The upload_domain of this CodePushReleaseUpload.
        :rtype: str
        """
        return self._upload_domain

    @upload_domain.setter
    def upload_domain(self, upload_domain):
        """Sets the upload_domain of this CodePushReleaseUpload.

        The URL domain used to upload the release.

        :param upload_domain: The upload_domain of this CodePushReleaseUpload.
        :type upload_domain: str
        """
        if upload_domain is None:
            raise ValueError("Invalid value for `upload_domain`, must not be `None`")

        self._upload_domain = upload_domain
