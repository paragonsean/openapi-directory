# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AzureSubscriptionUpdateBillableRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_billable: bool=None):
        """AzureSubscriptionUpdateBillableRequest - a model defined in OpenAPI

        :param is_billable: The is_billable of this AzureSubscriptionUpdateBillableRequest.
        """
        self.openapi_types = {
            'is_billable': bool
        }

        self.attribute_map = {
            'is_billable': 'is_billable'
        }

        self._is_billable = is_billable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AzureSubscriptionUpdateBillableRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AzureSubscriptionUpdateBillableRequest of this AzureSubscriptionUpdateBillableRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_billable(self):
        """Gets the is_billable of this AzureSubscriptionUpdateBillableRequest.

        Billable status of the subscription

        :return: The is_billable of this AzureSubscriptionUpdateBillableRequest.
        :rtype: bool
        """
        return self._is_billable

    @is_billable.setter
    def is_billable(self, is_billable):
        """Sets the is_billable of this AzureSubscriptionUpdateBillableRequest.

        Billable status of the subscription

        :param is_billable: The is_billable of this AzureSubscriptionUpdateBillableRequest.
        :type is_billable: bool
        """
        if is_billable is None:
            raise ValueError("Invalid value for `is_billable`, must not be `None`")

        self._is_billable = is_billable
