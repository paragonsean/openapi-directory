# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LegacyCodePushRelease(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_version: str=None, blob_url: str=None, diff_package_map: object=None, is_disabled: bool=None, is_mandatory: bool=None, label: str=None, manifest_blob_url: str=None, release_method: str=None, released_by_user_id: str=None, rollout: int=None, size: int=None, upload_time: int=None):
        """LegacyCodePushRelease - a model defined in OpenAPI

        :param app_version: The app_version of this LegacyCodePushRelease.
        :param blob_url: The blob_url of this LegacyCodePushRelease.
        :param diff_package_map: The diff_package_map of this LegacyCodePushRelease.
        :param is_disabled: The is_disabled of this LegacyCodePushRelease.
        :param is_mandatory: The is_mandatory of this LegacyCodePushRelease.
        :param label: The label of this LegacyCodePushRelease.
        :param manifest_blob_url: The manifest_blob_url of this LegacyCodePushRelease.
        :param release_method: The release_method of this LegacyCodePushRelease.
        :param released_by_user_id: The released_by_user_id of this LegacyCodePushRelease.
        :param rollout: The rollout of this LegacyCodePushRelease.
        :param size: The size of this LegacyCodePushRelease.
        :param upload_time: The upload_time of this LegacyCodePushRelease.
        """
        self.openapi_types = {
            'app_version': str,
            'blob_url': str,
            'diff_package_map': object,
            'is_disabled': bool,
            'is_mandatory': bool,
            'label': str,
            'manifest_blob_url': str,
            'release_method': str,
            'released_by_user_id': str,
            'rollout': int,
            'size': int,
            'upload_time': int
        }

        self.attribute_map = {
            'app_version': 'appVersion',
            'blob_url': 'blobUrl',
            'diff_package_map': 'diffPackageMap',
            'is_disabled': 'isDisabled',
            'is_mandatory': 'isMandatory',
            'label': 'label',
            'manifest_blob_url': 'manifestBlobUrl',
            'release_method': 'releaseMethod',
            'released_by_user_id': 'releasedByUserId',
            'rollout': 'rollout',
            'size': 'size',
            'upload_time': 'uploadTime'
        }

        self._app_version = app_version
        self._blob_url = blob_url
        self._diff_package_map = diff_package_map
        self._is_disabled = is_disabled
        self._is_mandatory = is_mandatory
        self._label = label
        self._manifest_blob_url = manifest_blob_url
        self._release_method = release_method
        self._released_by_user_id = released_by_user_id
        self._rollout = rollout
        self._size = size
        self._upload_time = upload_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LegacyCodePushRelease':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LegacyCodePushRelease of this LegacyCodePushRelease.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_version(self):
        """Gets the app_version of this LegacyCodePushRelease.

        The version of the release

        :return: The app_version of this LegacyCodePushRelease.
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this LegacyCodePushRelease.

        The version of the release

        :param app_version: The app_version of this LegacyCodePushRelease.
        :type app_version: str
        """

        self._app_version = app_version

    @property
    def blob_url(self):
        """Gets the blob_url of this LegacyCodePushRelease.

        Location (URL) of release package

        :return: The blob_url of this LegacyCodePushRelease.
        :rtype: str
        """
        return self._blob_url

    @blob_url.setter
    def blob_url(self, blob_url):
        """Sets the blob_url of this LegacyCodePushRelease.

        Location (URL) of release package

        :param blob_url: The blob_url of this LegacyCodePushRelease.
        :type blob_url: str
        """

        self._blob_url = blob_url

    @property
    def diff_package_map(self):
        """Gets the diff_package_map of this LegacyCodePushRelease.

        Object containing URL and size of changed package hashes contained in the release

        :return: The diff_package_map of this LegacyCodePushRelease.
        :rtype: object
        """
        return self._diff_package_map

    @diff_package_map.setter
    def diff_package_map(self, diff_package_map):
        """Sets the diff_package_map of this LegacyCodePushRelease.

        Object containing URL and size of changed package hashes contained in the release

        :param diff_package_map: The diff_package_map of this LegacyCodePushRelease.
        :type diff_package_map: object
        """

        self._diff_package_map = diff_package_map

    @property
    def is_disabled(self):
        """Gets the is_disabled of this LegacyCodePushRelease.

        Flag used to determine if release is disabled

        :return: The is_disabled of this LegacyCodePushRelease.
        :rtype: bool
        """
        return self._is_disabled

    @is_disabled.setter
    def is_disabled(self, is_disabled):
        """Sets the is_disabled of this LegacyCodePushRelease.

        Flag used to determine if release is disabled

        :param is_disabled: The is_disabled of this LegacyCodePushRelease.
        :type is_disabled: bool
        """

        self._is_disabled = is_disabled

    @property
    def is_mandatory(self):
        """Gets the is_mandatory of this LegacyCodePushRelease.

        Flag used to determine if release is mandatory

        :return: The is_mandatory of this LegacyCodePushRelease.
        :rtype: bool
        """
        return self._is_mandatory

    @is_mandatory.setter
    def is_mandatory(self, is_mandatory):
        """Sets the is_mandatory of this LegacyCodePushRelease.

        Flag used to determine if release is mandatory

        :param is_mandatory: The is_mandatory of this LegacyCodePushRelease.
        :type is_mandatory: bool
        """

        self._is_mandatory = is_mandatory

    @property
    def label(self):
        """Gets the label of this LegacyCodePushRelease.

        Release label (aka release name)

        :return: The label of this LegacyCodePushRelease.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this LegacyCodePushRelease.

        Release label (aka release name)

        :param label: The label of this LegacyCodePushRelease.
        :type label: str
        """

        self._label = label

    @property
    def manifest_blob_url(self):
        """Gets the manifest_blob_url of this LegacyCodePushRelease.

        The URL location of the package's manifest file.

        :return: The manifest_blob_url of this LegacyCodePushRelease.
        :rtype: str
        """
        return self._manifest_blob_url

    @manifest_blob_url.setter
    def manifest_blob_url(self, manifest_blob_url):
        """Sets the manifest_blob_url of this LegacyCodePushRelease.

        The URL location of the package's manifest file.

        :param manifest_blob_url: The manifest_blob_url of this LegacyCodePushRelease.
        :type manifest_blob_url: str
        """

        self._manifest_blob_url = manifest_blob_url

    @property
    def release_method(self):
        """Gets the release_method of this LegacyCodePushRelease.

        Method used to deploy release

        :return: The release_method of this LegacyCodePushRelease.
        :rtype: str
        """
        return self._release_method

    @release_method.setter
    def release_method(self, release_method):
        """Sets the release_method of this LegacyCodePushRelease.

        Method used to deploy release

        :param release_method: The release_method of this LegacyCodePushRelease.
        :type release_method: str
        """

        self._release_method = release_method

    @property
    def released_by_user_id(self):
        """Gets the released_by_user_id of this LegacyCodePushRelease.

        User ID that triggered most recent release

        :return: The released_by_user_id of this LegacyCodePushRelease.
        :rtype: str
        """
        return self._released_by_user_id

    @released_by_user_id.setter
    def released_by_user_id(self, released_by_user_id):
        """Sets the released_by_user_id of this LegacyCodePushRelease.

        User ID that triggered most recent release

        :param released_by_user_id: The released_by_user_id of this LegacyCodePushRelease.
        :type released_by_user_id: str
        """

        self._released_by_user_id = released_by_user_id

    @property
    def rollout(self):
        """Gets the rollout of this LegacyCodePushRelease.

        Percentage (out of 100) that release is deployed to

        :return: The rollout of this LegacyCodePushRelease.
        :rtype: int
        """
        return self._rollout

    @rollout.setter
    def rollout(self, rollout):
        """Sets the rollout of this LegacyCodePushRelease.

        Percentage (out of 100) that release is deployed to

        :param rollout: The rollout of this LegacyCodePushRelease.
        :type rollout: int
        """

        self._rollout = rollout

    @property
    def size(self):
        """Gets the size of this LegacyCodePushRelease.

        Size of release package

        :return: The size of this LegacyCodePushRelease.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this LegacyCodePushRelease.

        Size of release package

        :param size: The size of this LegacyCodePushRelease.
        :type size: int
        """

        self._size = size

    @property
    def upload_time(self):
        """Gets the upload_time of this LegacyCodePushRelease.

        Release upload time as epoch Unix timestamp

        :return: The upload_time of this LegacyCodePushRelease.
        :rtype: int
        """
        return self._upload_time

    @upload_time.setter
    def upload_time(self, upload_time):
        """Sets the upload_time of this LegacyCodePushRelease.

        Release upload time as epoch Unix timestamp

        :param upload_time: The upload_time of this LegacyCodePushRelease.
        :type upload_time: int
        """

        self._upload_time = upload_time
