# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.export_configurations_list200_response_values_inner_export_configuration import ExportConfigurationsList200ResponseValuesInnerExportConfiguration
from openapi_server import util


class ExportConfigurationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_time: str=None, export_configuration: ExportConfigurationsList200ResponseValuesInnerExportConfiguration=None, export_entities: List[str]=None, export_type: str=None, id: str=None, last_run_time: str=None, resource_group: str=None, resource_name: str=None, state: str=None, state_info: str=None):
        """ExportConfigurationResult - a model defined in OpenAPI

        :param creation_time: The creation_time of this ExportConfigurationResult.
        :param export_configuration: The export_configuration of this ExportConfigurationResult.
        :param export_entities: The export_entities of this ExportConfigurationResult.
        :param export_type: The export_type of this ExportConfigurationResult.
        :param id: The id of this ExportConfigurationResult.
        :param last_run_time: The last_run_time of this ExportConfigurationResult.
        :param resource_group: The resource_group of this ExportConfigurationResult.
        :param resource_name: The resource_name of this ExportConfigurationResult.
        :param state: The state of this ExportConfigurationResult.
        :param state_info: The state_info of this ExportConfigurationResult.
        """
        self.openapi_types = {
            'creation_time': str,
            'export_configuration': ExportConfigurationsList200ResponseValuesInnerExportConfiguration,
            'export_entities': List[str],
            'export_type': str,
            'id': str,
            'last_run_time': str,
            'resource_group': str,
            'resource_name': str,
            'state': str,
            'state_info': str
        }

        self.attribute_map = {
            'creation_time': 'creation_time',
            'export_configuration': 'export_configuration',
            'export_entities': 'export_entities',
            'export_type': 'export_type',
            'id': 'id',
            'last_run_time': 'last_run_time',
            'resource_group': 'resource_group',
            'resource_name': 'resource_name',
            'state': 'state',
            'state_info': 'state_info'
        }

        self._creation_time = creation_time
        self._export_configuration = export_configuration
        self._export_entities = export_entities
        self._export_type = export_type
        self._id = id
        self._last_run_time = last_run_time
        self._resource_group = resource_group
        self._resource_name = resource_name
        self._state = state
        self._state_info = state_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExportConfigurationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExportConfigurationResult of this ExportConfigurationResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_time(self):
        """Gets the creation_time of this ExportConfigurationResult.

        Creation time in ISO 8601 format

        :return: The creation_time of this ExportConfigurationResult.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ExportConfigurationResult.

        Creation time in ISO 8601 format

        :param creation_time: The creation_time of this ExportConfigurationResult.
        :type creation_time: str
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def export_configuration(self):
        """Gets the export_configuration of this ExportConfigurationResult.


        :return: The export_configuration of this ExportConfigurationResult.
        :rtype: ExportConfigurationsList200ResponseValuesInnerExportConfiguration
        """
        return self._export_configuration

    @export_configuration.setter
    def export_configuration(self, export_configuration):
        """Sets the export_configuration of this ExportConfigurationResult.


        :param export_configuration: The export_configuration of this ExportConfigurationResult.
        :type export_configuration: ExportConfigurationsList200ResponseValuesInnerExportConfiguration
        """

        self._export_configuration = export_configuration

    @property
    def export_entities(self):
        """Gets the export_entities of this ExportConfigurationResult.


        :return: The export_entities of this ExportConfigurationResult.
        :rtype: List[str]
        """
        return self._export_entities

    @export_entities.setter
    def export_entities(self, export_entities):
        """Sets the export_entities of this ExportConfigurationResult.


        :param export_entities: The export_entities of this ExportConfigurationResult.
        :type export_entities: List[str]
        """
        allowed_values = ["crashes", "errors", "attachments", "no_logs"]  # noqa: E501
        if not set(export_entities).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `export_entities` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(export_entities) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._export_entities = export_entities

    @property
    def export_type(self):
        """Gets the export_type of this ExportConfigurationResult.

        Target resource type of export configuration

        :return: The export_type of this ExportConfigurationResult.
        :rtype: str
        """
        return self._export_type

    @export_type.setter
    def export_type(self, export_type):
        """Sets the export_type of this ExportConfigurationResult.

        Target resource type of export configuration

        :param export_type: The export_type of this ExportConfigurationResult.
        :type export_type: str
        """
        allowed_values = ["BlobStorage", "AppInsights"]  # noqa: E501
        if export_type not in allowed_values:
            raise ValueError(
                "Invalid value for `export_type` ({0}), must be one of {1}"
                .format(export_type, allowed_values)
            )

        self._export_type = export_type

    @property
    def id(self):
        """Gets the id of this ExportConfigurationResult.

        Export configuration id

        :return: The id of this ExportConfigurationResult.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExportConfigurationResult.

        Export configuration id

        :param id: The id of this ExportConfigurationResult.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_run_time(self):
        """Gets the last_run_time of this ExportConfigurationResult.

        Latest time in ISO 8601 format when export completed successfully

        :return: The last_run_time of this ExportConfigurationResult.
        :rtype: str
        """
        return self._last_run_time

    @last_run_time.setter
    def last_run_time(self, last_run_time):
        """Sets the last_run_time of this ExportConfigurationResult.

        Latest time in ISO 8601 format when export completed successfully

        :param last_run_time: The last_run_time of this ExportConfigurationResult.
        :type last_run_time: str
        """

        self._last_run_time = last_run_time

    @property
    def resource_group(self):
        """Gets the resource_group of this ExportConfigurationResult.

        resource group for the storage account/App Insights resource

        :return: The resource_group of this ExportConfigurationResult.
        :rtype: str
        """
        return self._resource_group

    @resource_group.setter
    def resource_group(self, resource_group):
        """Sets the resource_group of this ExportConfigurationResult.

        resource group for the storage account/App Insights resource

        :param resource_group: The resource_group of this ExportConfigurationResult.
        :type resource_group: str
        """

        self._resource_group = resource_group

    @property
    def resource_name(self):
        """Gets the resource_name of this ExportConfigurationResult.

        Storage accout or Appinsights resource name

        :return: The resource_name of this ExportConfigurationResult.
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this ExportConfigurationResult.

        Storage accout or Appinsights resource name

        :param resource_name: The resource_name of this ExportConfigurationResult.
        :type resource_name: str
        """

        self._resource_name = resource_name

    @property
    def state(self):
        """Gets the state of this ExportConfigurationResult.

        State of the export job

        :return: The state of this ExportConfigurationResult.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ExportConfigurationResult.

        State of the export job

        :param state: The state of this ExportConfigurationResult.
        :type state: str
        """
        allowed_values = ["Enabled", "Disabled", "Pending", "Deleted", "Invalid"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_info(self):
        """Gets the state_info of this ExportConfigurationResult.

        Additional information about export configuration state

        :return: The state_info of this ExportConfigurationResult.
        :rtype: str
        """
        return self._state_info

    @state_info.setter
    def state_info(self, state_info):
        """Sets the state_info of this ExportConfigurationResult.

        Additional information about export configuration state

        :param state_info: The state_info of this ExportConfigurationResult.
        :type state_info: str
        """

        self._state_info = state_info
