# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BuildConcurrencyResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, committed_quantity: float=None, quantity: float=None):
        """BuildConcurrencyResponse - a model defined in OpenAPI

        :param committed_quantity: The committed_quantity of this BuildConcurrencyResponse.
        :param quantity: The quantity of this BuildConcurrencyResponse.
        """
        self.openapi_types = {
            'committed_quantity': float,
            'quantity': float
        }

        self.attribute_map = {
            'committed_quantity': 'committed_quantity',
            'quantity': 'quantity'
        }

        self._committed_quantity = committed_quantity
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildConcurrencyResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildConcurrencyResponse of this BuildConcurrencyResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def committed_quantity(self):
        """Gets the committed_quantity of this BuildConcurrencyResponse.

        The number of pipelines committed, which can be equal or greater than the number from the billing plan

        :return: The committed_quantity of this BuildConcurrencyResponse.
        :rtype: float
        """
        return self._committed_quantity

    @committed_quantity.setter
    def committed_quantity(self, committed_quantity):
        """Sets the committed_quantity of this BuildConcurrencyResponse.

        The number of pipelines committed, which can be equal or greater than the number from the billing plan

        :param committed_quantity: The committed_quantity of this BuildConcurrencyResponse.
        :type committed_quantity: float
        """

        self._committed_quantity = committed_quantity

    @property
    def quantity(self):
        """Gets the quantity of this BuildConcurrencyResponse.

        The number of pipelines set by the billing plan

        :return: The quantity of this BuildConcurrencyResponse.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this BuildConcurrencyResponse.

        The number of pipelines set by the billing plan

        :param quantity: The quantity of this BuildConcurrencyResponse.
        :type quantity: float
        """

        self._quantity = quantity
