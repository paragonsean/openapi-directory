# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PrivateBasicReleaseDetailsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_type: str=None, distribution_group_id: str=None, id: int=None, is_external_build: bool=None, is_latest: bool=None, mandatory_update: bool=None, origin: str=None, publishing_status: str=None, short_version: str=None, uploaded_at: str=None, version: str=None):
        """PrivateBasicReleaseDetailsResponse - a model defined in OpenAPI

        :param destination_type: The destination_type of this PrivateBasicReleaseDetailsResponse.
        :param distribution_group_id: The distribution_group_id of this PrivateBasicReleaseDetailsResponse.
        :param id: The id of this PrivateBasicReleaseDetailsResponse.
        :param is_external_build: The is_external_build of this PrivateBasicReleaseDetailsResponse.
        :param is_latest: The is_latest of this PrivateBasicReleaseDetailsResponse.
        :param mandatory_update: The mandatory_update of this PrivateBasicReleaseDetailsResponse.
        :param origin: The origin of this PrivateBasicReleaseDetailsResponse.
        :param publishing_status: The publishing_status of this PrivateBasicReleaseDetailsResponse.
        :param short_version: The short_version of this PrivateBasicReleaseDetailsResponse.
        :param uploaded_at: The uploaded_at of this PrivateBasicReleaseDetailsResponse.
        :param version: The version of this PrivateBasicReleaseDetailsResponse.
        """
        self.openapi_types = {
            'destination_type': str,
            'distribution_group_id': str,
            'id': int,
            'is_external_build': bool,
            'is_latest': bool,
            'mandatory_update': bool,
            'origin': str,
            'publishing_status': str,
            'short_version': str,
            'uploaded_at': str,
            'version': str
        }

        self.attribute_map = {
            'destination_type': 'destination_type',
            'distribution_group_id': 'distribution_group_id',
            'id': 'id',
            'is_external_build': 'is_external_build',
            'is_latest': 'is_latest',
            'mandatory_update': 'mandatory_update',
            'origin': 'origin',
            'publishing_status': 'publishing_status',
            'short_version': 'short_version',
            'uploaded_at': 'uploaded_at',
            'version': 'version'
        }

        self._destination_type = destination_type
        self._distribution_group_id = distribution_group_id
        self._id = id
        self._is_external_build = is_external_build
        self._is_latest = is_latest
        self._mandatory_update = mandatory_update
        self._origin = origin
        self._publishing_status = publishing_status
        self._short_version = short_version
        self._uploaded_at = uploaded_at
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateBasicReleaseDetailsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateBasicReleaseDetailsResponse of this PrivateBasicReleaseDetailsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_type(self):
        """Gets the destination_type of this PrivateBasicReleaseDetailsResponse.

        The destination type.<br> <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br> <b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br> 

        :return: The destination_type of this PrivateBasicReleaseDetailsResponse.
        :rtype: str
        """
        return self._destination_type

    @destination_type.setter
    def destination_type(self, destination_type):
        """Sets the destination_type of this PrivateBasicReleaseDetailsResponse.

        The destination type.<br> <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br> <b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br> 

        :param destination_type: The destination_type of this PrivateBasicReleaseDetailsResponse.
        :type destination_type: str
        """
        allowed_values = ["group", "store", "tester"]  # noqa: E501
        if destination_type not in allowed_values:
            raise ValueError(
                "Invalid value for `destination_type` ({0}), must be one of {1}"
                .format(destination_type, allowed_values)
            )

        self._destination_type = destination_type

    @property
    def distribution_group_id(self):
        """Gets the distribution_group_id of this PrivateBasicReleaseDetailsResponse.

        the destination id of release where it is distributed.

        :return: The distribution_group_id of this PrivateBasicReleaseDetailsResponse.
        :rtype: str
        """
        return self._distribution_group_id

    @distribution_group_id.setter
    def distribution_group_id(self, distribution_group_id):
        """Sets the distribution_group_id of this PrivateBasicReleaseDetailsResponse.

        the destination id of release where it is distributed.

        :param distribution_group_id: The distribution_group_id of this PrivateBasicReleaseDetailsResponse.
        :type distribution_group_id: str
        """

        self._distribution_group_id = distribution_group_id

    @property
    def id(self):
        """Gets the id of this PrivateBasicReleaseDetailsResponse.

        ID identifying this unique release.

        :return: The id of this PrivateBasicReleaseDetailsResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PrivateBasicReleaseDetailsResponse.

        ID identifying this unique release.

        :param id: The id of this PrivateBasicReleaseDetailsResponse.
        :type id: int
        """

        self._id = id

    @property
    def is_external_build(self):
        """Gets the is_external_build of this PrivateBasicReleaseDetailsResponse.

        This value determines if a release is external or not.

        :return: The is_external_build of this PrivateBasicReleaseDetailsResponse.
        :rtype: bool
        """
        return self._is_external_build

    @is_external_build.setter
    def is_external_build(self, is_external_build):
        """Sets the is_external_build of this PrivateBasicReleaseDetailsResponse.

        This value determines if a release is external or not.

        :param is_external_build: The is_external_build of this PrivateBasicReleaseDetailsResponse.
        :type is_external_build: bool
        """

        self._is_external_build = is_external_build

    @property
    def is_latest(self):
        """Gets the is_latest of this PrivateBasicReleaseDetailsResponse.

        Indicates if this is the latest release in the group.

        :return: The is_latest of this PrivateBasicReleaseDetailsResponse.
        :rtype: bool
        """
        return self._is_latest

    @is_latest.setter
    def is_latest(self, is_latest):
        """Sets the is_latest of this PrivateBasicReleaseDetailsResponse.

        Indicates if this is the latest release in the group.

        :param is_latest: The is_latest of this PrivateBasicReleaseDetailsResponse.
        :type is_latest: bool
        """

        self._is_latest = is_latest

    @property
    def mandatory_update(self):
        """Gets the mandatory_update of this PrivateBasicReleaseDetailsResponse.

        A boolean which determines whether the release is a mandatory update or not.

        :return: The mandatory_update of this PrivateBasicReleaseDetailsResponse.
        :rtype: bool
        """
        return self._mandatory_update

    @mandatory_update.setter
    def mandatory_update(self, mandatory_update):
        """Sets the mandatory_update of this PrivateBasicReleaseDetailsResponse.

        A boolean which determines whether the release is a mandatory update or not.

        :param mandatory_update: The mandatory_update of this PrivateBasicReleaseDetailsResponse.
        :type mandatory_update: bool
        """

        self._mandatory_update = mandatory_update

    @property
    def origin(self):
        """Gets the origin of this PrivateBasicReleaseDetailsResponse.

        The release's origin

        :return: The origin of this PrivateBasicReleaseDetailsResponse.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this PrivateBasicReleaseDetailsResponse.

        The release's origin

        :param origin: The origin of this PrivateBasicReleaseDetailsResponse.
        :type origin: str
        """
        allowed_values = ["hockeyapp", "appcenter"]  # noqa: E501
        if origin not in allowed_values:
            raise ValueError(
                "Invalid value for `origin` ({0}), must be one of {1}"
                .format(origin, allowed_values)
            )

        self._origin = origin

    @property
    def publishing_status(self):
        """Gets the publishing_status of this PrivateBasicReleaseDetailsResponse.

        the publishing status of the distributed release

        :return: The publishing_status of this PrivateBasicReleaseDetailsResponse.
        :rtype: str
        """
        return self._publishing_status

    @publishing_status.setter
    def publishing_status(self, publishing_status):
        """Sets the publishing_status of this PrivateBasicReleaseDetailsResponse.

        the publishing status of the distributed release

        :param publishing_status: The publishing_status of this PrivateBasicReleaseDetailsResponse.
        :type publishing_status: str
        """

        self._publishing_status = publishing_status

    @property
    def short_version(self):
        """Gets the short_version of this PrivateBasicReleaseDetailsResponse.

        The release's short version.<br> For iOS: CFBundleShortVersionString from info.plist.<br> For Android: android:versionName from AppManifest.xml. 

        :return: The short_version of this PrivateBasicReleaseDetailsResponse.
        :rtype: str
        """
        return self._short_version

    @short_version.setter
    def short_version(self, short_version):
        """Sets the short_version of this PrivateBasicReleaseDetailsResponse.

        The release's short version.<br> For iOS: CFBundleShortVersionString from info.plist.<br> For Android: android:versionName from AppManifest.xml. 

        :param short_version: The short_version of this PrivateBasicReleaseDetailsResponse.
        :type short_version: str
        """

        self._short_version = short_version

    @property
    def uploaded_at(self):
        """Gets the uploaded_at of this PrivateBasicReleaseDetailsResponse.

        UTC time in ISO 8601 format of the uploaded time.

        :return: The uploaded_at of this PrivateBasicReleaseDetailsResponse.
        :rtype: str
        """
        return self._uploaded_at

    @uploaded_at.setter
    def uploaded_at(self, uploaded_at):
        """Sets the uploaded_at of this PrivateBasicReleaseDetailsResponse.

        UTC time in ISO 8601 format of the uploaded time.

        :param uploaded_at: The uploaded_at of this PrivateBasicReleaseDetailsResponse.
        :type uploaded_at: str
        """

        self._uploaded_at = uploaded_at

    @property
    def version(self):
        """Gets the version of this PrivateBasicReleaseDetailsResponse.

        The release's version.<br> For iOS: CFBundleVersion from info.plist.<br> For Android: android:versionCode from AppManifest.xml. 

        :return: The version of this PrivateBasicReleaseDetailsResponse.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PrivateBasicReleaseDetailsResponse.

        The release's version.<br> For iOS: CFBundleVersion from info.plist.<br> For Android: android:versionCode from AppManifest.xml. 

        :param version: The version of this PrivateBasicReleaseDetailsResponse.
        :type version: str
        """

        self._version = version
