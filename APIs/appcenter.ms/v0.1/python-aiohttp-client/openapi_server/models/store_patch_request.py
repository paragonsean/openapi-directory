# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StorePatchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_connection_id: str=None):
        """StorePatchRequest - a model defined in OpenAPI

        :param service_connection_id: The service_connection_id of this StorePatchRequest.
        """
        self.openapi_types = {
            'service_connection_id': str
        }

        self.attribute_map = {
            'service_connection_id': 'service_connection_id'
        }

        self._service_connection_id = service_connection_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorePatchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorePatchRequest of this StorePatchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_connection_id(self):
        """Gets the service_connection_id of this StorePatchRequest.

        Service connection id to updated.

        :return: The service_connection_id of this StorePatchRequest.
        :rtype: str
        """
        return self._service_connection_id

    @service_connection_id.setter
    def service_connection_id(self, service_connection_id):
        """Sets the service_connection_id of this StorePatchRequest.

        Service connection id to updated.

        :param service_connection_id: The service_connection_id of this StorePatchRequest.
        :type service_connection_id: str
        """
        if service_connection_id is None:
            raise ValueError("Invalid value for `service_connection_id`, must not be `None`")

        self._service_connection_id = service_connection_id
