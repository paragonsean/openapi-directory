# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.code_push_deployment_releases_create_request_release_upload import CodePushDeploymentReleasesCreateRequestReleaseUpload
from openapi_server import util


class CodePushUploadedRelease(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deployment_name: str=None, description: str=None, disabled: bool=None, mandatory: bool=None, no_duplicate_release_error: bool=None, release_upload: CodePushDeploymentReleasesCreateRequestReleaseUpload=None, rollout: int=None, target_binary_version: str=None):
        """CodePushUploadedRelease - a model defined in OpenAPI

        :param deployment_name: The deployment_name of this CodePushUploadedRelease.
        :param description: The description of this CodePushUploadedRelease.
        :param disabled: The disabled of this CodePushUploadedRelease.
        :param mandatory: The mandatory of this CodePushUploadedRelease.
        :param no_duplicate_release_error: The no_duplicate_release_error of this CodePushUploadedRelease.
        :param release_upload: The release_upload of this CodePushUploadedRelease.
        :param rollout: The rollout of this CodePushUploadedRelease.
        :param target_binary_version: The target_binary_version of this CodePushUploadedRelease.
        """
        self.openapi_types = {
            'deployment_name': str,
            'description': str,
            'disabled': bool,
            'mandatory': bool,
            'no_duplicate_release_error': bool,
            'release_upload': CodePushDeploymentReleasesCreateRequestReleaseUpload,
            'rollout': int,
            'target_binary_version': str
        }

        self.attribute_map = {
            'deployment_name': 'deployment_name',
            'description': 'description',
            'disabled': 'disabled',
            'mandatory': 'mandatory',
            'no_duplicate_release_error': 'no_duplicate_release_error',
            'release_upload': 'release_upload',
            'rollout': 'rollout',
            'target_binary_version': 'target_binary_version'
        }

        self._deployment_name = deployment_name
        self._description = description
        self._disabled = disabled
        self._mandatory = mandatory
        self._no_duplicate_release_error = no_duplicate_release_error
        self._release_upload = release_upload
        self._rollout = rollout
        self._target_binary_version = target_binary_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodePushUploadedRelease':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodePushUploadedRelease of this CodePushUploadedRelease.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deployment_name(self):
        """Gets the deployment_name of this CodePushUploadedRelease.

        This specifies which deployment you want to release the update to. Default is Staging.

        :return: The deployment_name of this CodePushUploadedRelease.
        :rtype: str
        """
        return self._deployment_name

    @deployment_name.setter
    def deployment_name(self, deployment_name):
        """Sets the deployment_name of this CodePushUploadedRelease.

        This specifies which deployment you want to release the update to. Default is Staging.

        :param deployment_name: The deployment_name of this CodePushUploadedRelease.
        :type deployment_name: str
        """

        self._deployment_name = deployment_name

    @property
    def description(self):
        """Gets the description of this CodePushUploadedRelease.

        This provides an optional \"change log\" for the deployment.

        :return: The description of this CodePushUploadedRelease.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CodePushUploadedRelease.

        This provides an optional \"change log\" for the deployment.

        :param description: The description of this CodePushUploadedRelease.
        :type description: str
        """

        self._description = description

    @property
    def disabled(self):
        """Gets the disabled of this CodePushUploadedRelease.

        This specifies whether an update should be downloadable by end users or not.

        :return: The disabled of this CodePushUploadedRelease.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this CodePushUploadedRelease.

        This specifies whether an update should be downloadable by end users or not.

        :param disabled: The disabled of this CodePushUploadedRelease.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def mandatory(self):
        """Gets the mandatory of this CodePushUploadedRelease.

        This specifies whether the update should be considered mandatory or not (e.g. it includes a critical security fix).

        :return: The mandatory of this CodePushUploadedRelease.
        :rtype: bool
        """
        return self._mandatory

    @mandatory.setter
    def mandatory(self, mandatory):
        """Sets the mandatory of this CodePushUploadedRelease.

        This specifies whether the update should be considered mandatory or not (e.g. it includes a critical security fix).

        :param mandatory: The mandatory of this CodePushUploadedRelease.
        :type mandatory: bool
        """

        self._mandatory = mandatory

    @property
    def no_duplicate_release_error(self):
        """Gets the no_duplicate_release_error of this CodePushUploadedRelease.

        This specifies that if the update is identical to the latest release on the deployment, the CLI should generate a warning instead of an error.

        :return: The no_duplicate_release_error of this CodePushUploadedRelease.
        :rtype: bool
        """
        return self._no_duplicate_release_error

    @no_duplicate_release_error.setter
    def no_duplicate_release_error(self, no_duplicate_release_error):
        """Sets the no_duplicate_release_error of this CodePushUploadedRelease.

        This specifies that if the update is identical to the latest release on the deployment, the CLI should generate a warning instead of an error.

        :param no_duplicate_release_error: The no_duplicate_release_error of this CodePushUploadedRelease.
        :type no_duplicate_release_error: bool
        """

        self._no_duplicate_release_error = no_duplicate_release_error

    @property
    def release_upload(self):
        """Gets the release_upload of this CodePushUploadedRelease.


        :return: The release_upload of this CodePushUploadedRelease.
        :rtype: CodePushDeploymentReleasesCreateRequestReleaseUpload
        """
        return self._release_upload

    @release_upload.setter
    def release_upload(self, release_upload):
        """Sets the release_upload of this CodePushUploadedRelease.


        :param release_upload: The release_upload of this CodePushUploadedRelease.
        :type release_upload: CodePushDeploymentReleasesCreateRequestReleaseUpload
        """
        if release_upload is None:
            raise ValueError("Invalid value for `release_upload`, must not be `None`")

        self._release_upload = release_upload

    @property
    def rollout(self):
        """Gets the rollout of this CodePushUploadedRelease.

        This specifies the percentage of users (as an integer between 1 and 100) that should be eligible to receive this update.

        :return: The rollout of this CodePushUploadedRelease.
        :rtype: int
        """
        return self._rollout

    @rollout.setter
    def rollout(self, rollout):
        """Sets the rollout of this CodePushUploadedRelease.

        This specifies the percentage of users (as an integer between 1 and 100) that should be eligible to receive this update.

        :param rollout: The rollout of this CodePushUploadedRelease.
        :type rollout: int
        """

        self._rollout = rollout

    @property
    def target_binary_version(self):
        """Gets the target_binary_version of this CodePushUploadedRelease.

        the binary version of the application

        :return: The target_binary_version of this CodePushUploadedRelease.
        :rtype: str
        """
        return self._target_binary_version

    @target_binary_version.setter
    def target_binary_version(self, target_binary_version):
        """Sets the target_binary_version of this CodePushUploadedRelease.

        the binary version of the application

        :param target_binary_version: The target_binary_version of this CodePushUploadedRelease.
        :type target_binary_version: str
        """
        if target_binary_version is None:
            raise ValueError("Invalid value for `target_binary_version`, must not be `None`")

        self._target_binary_version = target_binary_version
