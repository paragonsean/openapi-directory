# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.builds_list_toolsets200_response_node_inner import BuildsListToolsets200ResponseNodeInner
from openapi_server.models.builds_list_toolsets200_response_xamarin_inner import BuildsListToolsets200ResponseXamarinInner
from openapi_server.models.builds_list_toolsets200_response_xcode_inner import BuildsListToolsets200ResponseXcodeInner
from openapi_server import util


class Toolsets(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node: List[BuildsListToolsets200ResponseNodeInner]=None, xamarin: List[BuildsListToolsets200ResponseXamarinInner]=None, xcode: List[BuildsListToolsets200ResponseXcodeInner]=None):
        """Toolsets - a model defined in OpenAPI

        :param node: The node of this Toolsets.
        :param xamarin: The xamarin of this Toolsets.
        :param xcode: The xcode of this Toolsets.
        """
        self.openapi_types = {
            'node': List[BuildsListToolsets200ResponseNodeInner],
            'xamarin': List[BuildsListToolsets200ResponseXamarinInner],
            'xcode': List[BuildsListToolsets200ResponseXcodeInner]
        }

        self.attribute_map = {
            'node': 'node',
            'xamarin': 'xamarin',
            'xcode': 'xcode'
        }

        self._node = node
        self._xamarin = xamarin
        self._xcode = xcode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Toolsets':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Toolsets of this Toolsets.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node(self):
        """Gets the node of this Toolsets.

        A list of Node versions

        :return: The node of this Toolsets.
        :rtype: List[BuildsListToolsets200ResponseNodeInner]
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this Toolsets.

        A list of Node versions

        :param node: The node of this Toolsets.
        :type node: List[BuildsListToolsets200ResponseNodeInner]
        """

        self._node = node

    @property
    def xamarin(self):
        """Gets the xamarin of this Toolsets.

        A list of Xamarin SDK bundles

        :return: The xamarin of this Toolsets.
        :rtype: List[BuildsListToolsets200ResponseXamarinInner]
        """
        return self._xamarin

    @xamarin.setter
    def xamarin(self, xamarin):
        """Sets the xamarin of this Toolsets.

        A list of Xamarin SDK bundles

        :param xamarin: The xamarin of this Toolsets.
        :type xamarin: List[BuildsListToolsets200ResponseXamarinInner]
        """

        self._xamarin = xamarin

    @property
    def xcode(self):
        """Gets the xcode of this Toolsets.

        A list of Xcode versions

        :return: The xcode of this Toolsets.
        :rtype: List[BuildsListToolsets200ResponseXcodeInner]
        """
        return self._xcode

    @xcode.setter
    def xcode(self, xcode):
        """Sets the xcode of this Toolsets.

        A list of Xcode versions

        :param xcode: The xcode of this Toolsets.
        :type xcode: List[BuildsListToolsets200ResponseXcodeInner]
        """

        self._xcode = xcode
