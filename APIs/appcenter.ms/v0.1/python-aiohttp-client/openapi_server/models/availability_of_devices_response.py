# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.availability_of_devices_response_ipads import AvailabilityOfDevicesResponseIpads
from openapi_server import util


class AvailabilityOfDevicesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ipads: AvailabilityOfDevicesResponseIpads=None, iphones: AvailabilityOfDevicesResponseIpads=None, ipods: AvailabilityOfDevicesResponseIpads=None, watches: AvailabilityOfDevicesResponseIpads=None):
        """AvailabilityOfDevicesResponse - a model defined in OpenAPI

        :param ipads: The ipads of this AvailabilityOfDevicesResponse.
        :param iphones: The iphones of this AvailabilityOfDevicesResponse.
        :param ipods: The ipods of this AvailabilityOfDevicesResponse.
        :param watches: The watches of this AvailabilityOfDevicesResponse.
        """
        self.openapi_types = {
            'ipads': AvailabilityOfDevicesResponseIpads,
            'iphones': AvailabilityOfDevicesResponseIpads,
            'ipods': AvailabilityOfDevicesResponseIpads,
            'watches': AvailabilityOfDevicesResponseIpads
        }

        self.attribute_map = {
            'ipads': 'ipads',
            'iphones': 'iphones',
            'ipods': 'ipods',
            'watches': 'watches'
        }

        self._ipads = ipads
        self._iphones = iphones
        self._ipods = ipods
        self._watches = watches

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailabilityOfDevicesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AvailabilityOfDevicesResponse of this AvailabilityOfDevicesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ipads(self):
        """Gets the ipads of this AvailabilityOfDevicesResponse.


        :return: The ipads of this AvailabilityOfDevicesResponse.
        :rtype: AvailabilityOfDevicesResponseIpads
        """
        return self._ipads

    @ipads.setter
    def ipads(self, ipads):
        """Sets the ipads of this AvailabilityOfDevicesResponse.


        :param ipads: The ipads of this AvailabilityOfDevicesResponse.
        :type ipads: AvailabilityOfDevicesResponseIpads
        """
        if ipads is None:
            raise ValueError("Invalid value for `ipads`, must not be `None`")

        self._ipads = ipads

    @property
    def iphones(self):
        """Gets the iphones of this AvailabilityOfDevicesResponse.


        :return: The iphones of this AvailabilityOfDevicesResponse.
        :rtype: AvailabilityOfDevicesResponseIpads
        """
        return self._iphones

    @iphones.setter
    def iphones(self, iphones):
        """Sets the iphones of this AvailabilityOfDevicesResponse.


        :param iphones: The iphones of this AvailabilityOfDevicesResponse.
        :type iphones: AvailabilityOfDevicesResponseIpads
        """
        if iphones is None:
            raise ValueError("Invalid value for `iphones`, must not be `None`")

        self._iphones = iphones

    @property
    def ipods(self):
        """Gets the ipods of this AvailabilityOfDevicesResponse.


        :return: The ipods of this AvailabilityOfDevicesResponse.
        :rtype: AvailabilityOfDevicesResponseIpads
        """
        return self._ipods

    @ipods.setter
    def ipods(self, ipods):
        """Sets the ipods of this AvailabilityOfDevicesResponse.


        :param ipods: The ipods of this AvailabilityOfDevicesResponse.
        :type ipods: AvailabilityOfDevicesResponseIpads
        """
        if ipods is None:
            raise ValueError("Invalid value for `ipods`, must not be `None`")

        self._ipods = ipods

    @property
    def watches(self):
        """Gets the watches of this AvailabilityOfDevicesResponse.


        :return: The watches of this AvailabilityOfDevicesResponse.
        :rtype: AvailabilityOfDevicesResponseIpads
        """
        return self._watches

    @watches.setter
    def watches(self, watches):
        """Sets the watches of this AvailabilityOfDevicesResponse.


        :param watches: The watches of this AvailabilityOfDevicesResponse.
        :type watches: AvailabilityOfDevicesResponseIpads
        """
        if watches is None:
            raise ValueError("Invalid value for `watches`, must not be `None`")

        self._watches = watches
