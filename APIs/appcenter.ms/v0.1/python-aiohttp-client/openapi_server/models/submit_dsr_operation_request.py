# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubmitDsrOperationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, app_id: str=None, operation_id: str=None, request: str=None, request_id: str=None):
        """SubmitDsrOperationRequest - a model defined in OpenAPI

        :param account_id: The account_id of this SubmitDsrOperationRequest.
        :param app_id: The app_id of this SubmitDsrOperationRequest.
        :param operation_id: The operation_id of this SubmitDsrOperationRequest.
        :param request: The request of this SubmitDsrOperationRequest.
        :param request_id: The request_id of this SubmitDsrOperationRequest.
        """
        self.openapi_types = {
            'account_id': str,
            'app_id': str,
            'operation_id': str,
            'request': str,
            'request_id': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'app_id': 'appId',
            'operation_id': 'operationId',
            'request': 'request',
            'request_id': 'requestId'
        }

        self._account_id = account_id
        self._app_id = app_id
        self._operation_id = operation_id
        self._request = request
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubmitDsrOperationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubmitDsrOperationRequest of this SubmitDsrOperationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this SubmitDsrOperationRequest.


        :return: The account_id of this SubmitDsrOperationRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SubmitDsrOperationRequest.


        :param account_id: The account_id of this SubmitDsrOperationRequest.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def app_id(self):
        """Gets the app_id of this SubmitDsrOperationRequest.


        :return: The app_id of this SubmitDsrOperationRequest.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this SubmitDsrOperationRequest.


        :param app_id: The app_id of this SubmitDsrOperationRequest.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def operation_id(self):
        """Gets the operation_id of this SubmitDsrOperationRequest.

        The DSR operation ID provided by the GDPR coordinator. Used for tracking only.

        :return: The operation_id of this SubmitDsrOperationRequest.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this SubmitDsrOperationRequest.

        The DSR operation ID provided by the GDPR coordinator. Used for tracking only.

        :param operation_id: The operation_id of this SubmitDsrOperationRequest.
        :type operation_id: str
        """

        self._operation_id = operation_id

    @property
    def request(self):
        """Gets the request of this SubmitDsrOperationRequest.


        :return: The request of this SubmitDsrOperationRequest.
        :rtype: str
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this SubmitDsrOperationRequest.


        :param request: The request of this SubmitDsrOperationRequest.
        :type request: str
        """
        allowed_values = ["Delete", "Purge", "UndoDelete", "Export"]  # noqa: E501
        if request not in allowed_values:
            raise ValueError(
                "Invalid value for `request` ({0}), must be one of {1}"
                .format(request, allowed_values)
            )

        self._request = request

    @property
    def request_id(self):
        """Gets the request_id of this SubmitDsrOperationRequest.

        Request ID provided by the GDPR coordinator. Used for tracking.

        :return: The request_id of this SubmitDsrOperationRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this SubmitDsrOperationRequest.

        Request ID provided by the GDPR coordinator. Used for tracking.

        :param request_id: The request_id of this SubmitDsrOperationRequest.
        :type request_id: str
        """

        self._request_id = request_id
