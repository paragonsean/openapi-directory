# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserProfileResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar_url: str=None, can_change_password: bool=None, display_name: str=None, email: str=None, id: str=None, name: str=None, origin: str=None, permissions: List[str]=None):
        """UserProfileResponse - a model defined in OpenAPI

        :param avatar_url: The avatar_url of this UserProfileResponse.
        :param can_change_password: The can_change_password of this UserProfileResponse.
        :param display_name: The display_name of this UserProfileResponse.
        :param email: The email of this UserProfileResponse.
        :param id: The id of this UserProfileResponse.
        :param name: The name of this UserProfileResponse.
        :param origin: The origin of this UserProfileResponse.
        :param permissions: The permissions of this UserProfileResponse.
        """
        self.openapi_types = {
            'avatar_url': str,
            'can_change_password': bool,
            'display_name': str,
            'email': str,
            'id': str,
            'name': str,
            'origin': str,
            'permissions': List[str]
        }

        self.attribute_map = {
            'avatar_url': 'avatar_url',
            'can_change_password': 'can_change_password',
            'display_name': 'display_name',
            'email': 'email',
            'id': 'id',
            'name': 'name',
            'origin': 'origin',
            'permissions': 'permissions'
        }

        self._avatar_url = avatar_url
        self._can_change_password = can_change_password
        self._display_name = display_name
        self._email = email
        self._id = id
        self._name = name
        self._origin = origin
        self._permissions = permissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserProfileResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserProfileResponse of this UserProfileResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar_url(self):
        """Gets the avatar_url of this UserProfileResponse.

        The avatar URL of the user

        :return: The avatar_url of this UserProfileResponse.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this UserProfileResponse.

        The avatar URL of the user

        :param avatar_url: The avatar_url of this UserProfileResponse.
        :type avatar_url: str
        """

        self._avatar_url = avatar_url

    @property
    def can_change_password(self):
        """Gets the can_change_password of this UserProfileResponse.

        User is required to send an old password in order to change the password.

        :return: The can_change_password of this UserProfileResponse.
        :rtype: bool
        """
        return self._can_change_password

    @can_change_password.setter
    def can_change_password(self, can_change_password):
        """Sets the can_change_password of this UserProfileResponse.

        User is required to send an old password in order to change the password.

        :param can_change_password: The can_change_password of this UserProfileResponse.
        :type can_change_password: bool
        """

        self._can_change_password = can_change_password

    @property
    def display_name(self):
        """Gets the display_name of this UserProfileResponse.

        The full name of the user. Might for example be first and last name

        :return: The display_name of this UserProfileResponse.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UserProfileResponse.

        The full name of the user. Might for example be first and last name

        :param display_name: The display_name of this UserProfileResponse.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this UserProfileResponse.

        The email address of the user

        :return: The email of this UserProfileResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserProfileResponse.

        The email address of the user

        :param email: The email of this UserProfileResponse.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def id(self):
        """Gets the id of this UserProfileResponse.

        The unique id (UUID) of the user

        :return: The id of this UserProfileResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserProfileResponse.

        The unique id (UUID) of the user

        :param id: The id of this UserProfileResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this UserProfileResponse.

        The unique name that is used to identify the user.

        :return: The name of this UserProfileResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserProfileResponse.

        The unique name that is used to identify the user.

        :param name: The name of this UserProfileResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def origin(self):
        """Gets the origin of this UserProfileResponse.

        The creation origin of this user

        :return: The origin of this UserProfileResponse.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this UserProfileResponse.

        The creation origin of this user

        :param origin: The origin of this UserProfileResponse.
        :type origin: str
        """
        allowed_values = ["appcenter", "hockeyapp", "codepush"]  # noqa: E501
        if origin not in allowed_values:
            raise ValueError(
                "Invalid value for `origin` ({0}), must be one of {1}"
                .format(origin, allowed_values)
            )

        self._origin = origin

    @property
    def permissions(self):
        """Gets the permissions of this UserProfileResponse.

        The permissions the user has for the app

        :return: The permissions of this UserProfileResponse.
        :rtype: List[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this UserProfileResponse.

        The permissions the user has for the app

        :param permissions: The permissions of this UserProfileResponse.
        :type permissions: List[str]
        """
        allowed_values = ["manager", "developer", "viewer", "tester"]  # noqa: E501
        if not set(permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `permissions` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(permissions) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._permissions = permissions
