# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, display_name: str=None, name: str=None, os: str=None, platform: str=None, release_type: str=None):
        """AppRequest - a model defined in OpenAPI

        :param description: The description of this AppRequest.
        :param display_name: The display_name of this AppRequest.
        :param name: The name of this AppRequest.
        :param os: The os of this AppRequest.
        :param platform: The platform of this AppRequest.
        :param release_type: The release_type of this AppRequest.
        """
        self.openapi_types = {
            'description': str,
            'display_name': str,
            'name': str,
            'os': str,
            'platform': str,
            'release_type': str
        }

        self.attribute_map = {
            'description': 'description',
            'display_name': 'display_name',
            'name': 'name',
            'os': 'os',
            'platform': 'platform',
            'release_type': 'release_type'
        }

        self._description = description
        self._display_name = display_name
        self._name = name
        self._os = os
        self._platform = platform
        self._release_type = release_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppRequest of this AppRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this AppRequest.

        A short text describing the app

        :return: The description of this AppRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AppRequest.

        A short text describing the app

        :param description: The description of this AppRequest.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this AppRequest.

        The descriptive name of the app. This can contain any characters

        :return: The display_name of this AppRequest.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AppRequest.

        The descriptive name of the app. This can contain any characters

        :param display_name: The display_name of this AppRequest.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def name(self):
        """Gets the name of this AppRequest.

        The name of the app used in URLs

        :return: The name of this AppRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AppRequest.

        The name of the app used in URLs

        :param name: The name of this AppRequest.
        :type name: str
        """

        self._name = name

    @property
    def os(self):
        """Gets the os of this AppRequest.

        The OS the app will be running on

        :return: The os of this AppRequest.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this AppRequest.

        The OS the app will be running on

        :param os: The os of this AppRequest.
        :type os: str
        """
        allowed_values = ["Android", "iOS", "macOS", "Tizen", "tvOS", "Windows", "Linux", "Custom"]  # noqa: E501
        if os not in allowed_values:
            raise ValueError(
                "Invalid value for `os` ({0}), must be one of {1}"
                .format(os, allowed_values)
            )

        self._os = os

    @property
    def platform(self):
        """Gets the platform of this AppRequest.

        The platform of the app

        :return: The platform of this AppRequest.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this AppRequest.

        The platform of the app

        :param platform: The platform of this AppRequest.
        :type platform: str
        """
        allowed_values = ["Java", "Objective-C-Swift", "UWP", "Cordova", "React-Native", "Xamarin", "Unity", "Electron", "WPF", "WinForms", "Custom"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def release_type(self):
        """Gets the release_type of this AppRequest.

        A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase

        :return: The release_type of this AppRequest.
        :rtype: str
        """
        return self._release_type

    @release_type.setter
    def release_type(self, release_type):
        """Sets the release_type of this AppRequest.

        A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase

        :param release_type: The release_type of this AppRequest.
        :type release_type: str
        """

        self._release_type = release_type
