# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrgComplianceSettingsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_connection_id: str=None, id: str=None, is_mam_enabled: bool=None, org_id: str=None):
        """OrgComplianceSettingsResponse - a model defined in OpenAPI

        :param certificate_connection_id: The certificate_connection_id of this OrgComplianceSettingsResponse.
        :param id: The id of this OrgComplianceSettingsResponse.
        :param is_mam_enabled: The is_mam_enabled of this OrgComplianceSettingsResponse.
        :param org_id: The org_id of this OrgComplianceSettingsResponse.
        """
        self.openapi_types = {
            'certificate_connection_id': str,
            'id': str,
            'is_mam_enabled': bool,
            'org_id': str
        }

        self.attribute_map = {
            'certificate_connection_id': 'certificate_connection_id',
            'id': 'id',
            'is_mam_enabled': 'is_mam_enabled',
            'org_id': 'org_id'
        }

        self._certificate_connection_id = certificate_connection_id
        self._id = id
        self._is_mam_enabled = is_mam_enabled
        self._org_id = org_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrgComplianceSettingsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrgComplianceSettingsResponse of this OrgComplianceSettingsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_connection_id(self):
        """Gets the certificate_connection_id of this OrgComplianceSettingsResponse.

        certificate connection id to wrap and resign the app after wrapping

        :return: The certificate_connection_id of this OrgComplianceSettingsResponse.
        :rtype: str
        """
        return self._certificate_connection_id

    @certificate_connection_id.setter
    def certificate_connection_id(self, certificate_connection_id):
        """Sets the certificate_connection_id of this OrgComplianceSettingsResponse.

        certificate connection id to wrap and resign the app after wrapping

        :param certificate_connection_id: The certificate_connection_id of this OrgComplianceSettingsResponse.
        :type certificate_connection_id: str
        """
        if certificate_connection_id is None:
            raise ValueError("Invalid value for `certificate_connection_id`, must not be `None`")

        self._certificate_connection_id = certificate_connection_id

    @property
    def id(self):
        """Gets the id of this OrgComplianceSettingsResponse.

        The internal unique id (UUID) of the organization compliance setting

        :return: The id of this OrgComplianceSettingsResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrgComplianceSettingsResponse.

        The internal unique id (UUID) of the organization compliance setting

        :param id: The id of this OrgComplianceSettingsResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_mam_enabled(self):
        """Gets the is_mam_enabled of this OrgComplianceSettingsResponse.

        flag to tell if mam warpping is enabled on the Org

        :return: The is_mam_enabled of this OrgComplianceSettingsResponse.
        :rtype: bool
        """
        return self._is_mam_enabled

    @is_mam_enabled.setter
    def is_mam_enabled(self, is_mam_enabled):
        """Sets the is_mam_enabled of this OrgComplianceSettingsResponse.

        flag to tell if mam warpping is enabled on the Org

        :param is_mam_enabled: The is_mam_enabled of this OrgComplianceSettingsResponse.
        :type is_mam_enabled: bool
        """

        self._is_mam_enabled = is_mam_enabled

    @property
    def org_id(self):
        """Gets the org_id of this OrgComplianceSettingsResponse.

        The internal unique id (UUID) of the organization.

        :return: The org_id of this OrgComplianceSettingsResponse.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this OrgComplianceSettingsResponse.

        The internal unique id (UUID) of the organization.

        :param org_id: The org_id of this OrgComplianceSettingsResponse.
        :type org_id: str
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")

        self._org_id = org_id
