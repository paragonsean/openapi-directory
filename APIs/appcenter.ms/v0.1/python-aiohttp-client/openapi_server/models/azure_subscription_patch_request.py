# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AzureSubscriptionPatchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_billing: bool=None):
        """AzureSubscriptionPatchRequest - a model defined in OpenAPI

        :param is_billing: The is_billing of this AzureSubscriptionPatchRequest.
        """
        self.openapi_types = {
            'is_billing': bool
        }

        self.attribute_map = {
            'is_billing': 'is_billing'
        }

        self._is_billing = is_billing

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AzureSubscriptionPatchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AzureSubscriptionPatchRequest of this AzureSubscriptionPatchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_billing(self):
        """Gets the is_billing of this AzureSubscriptionPatchRequest.

        If the subscription is used for billing

        :return: The is_billing of this AzureSubscriptionPatchRequest.
        :rtype: bool
        """
        return self._is_billing

    @is_billing.setter
    def is_billing(self, is_billing):
        """Sets the is_billing of this AzureSubscriptionPatchRequest.

        If the subscription is used for billing

        :param is_billing: The is_billing of this AzureSubscriptionPatchRequest.
        :type is_billing: bool
        """
        if is_billing is None:
            raise ValueError("Invalid value for `is_billing`, must not be `None`")

        self._is_billing = is_billing
