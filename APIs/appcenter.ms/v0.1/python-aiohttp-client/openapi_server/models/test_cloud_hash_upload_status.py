# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestCloudHashUploadStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location: str=None, status_code: float=None):
        """TestCloudHashUploadStatus - a model defined in OpenAPI

        :param location: The location of this TestCloudHashUploadStatus.
        :param status_code: The status_code of this TestCloudHashUploadStatus.
        """
        self.openapi_types = {
            'location': str,
            'status_code': float
        }

        self.attribute_map = {
            'location': 'location',
            'status_code': 'statusCode'
        }

        self._location = location
        self._status_code = status_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestCloudHashUploadStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Test_Cloud_Hash_Upload_Status of this TestCloudHashUploadStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self):
        """Gets the location of this TestCloudHashUploadStatus.

        URI that should be used to make POST request if file with given hash doesn't exist. This is set when status_code is equal to 412

        :return: The location of this TestCloudHashUploadStatus.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this TestCloudHashUploadStatus.

        URI that should be used to make POST request if file with given hash doesn't exist. This is set when status_code is equal to 412

        :param location: The location of this TestCloudHashUploadStatus.
        :type location: str
        """

        self._location = location

    @property
    def status_code(self):
        """Gets the status_code of this TestCloudHashUploadStatus.

        HTTP status code that represent result of upload

        :return: The status_code of this TestCloudHashUploadStatus.
        :rtype: float
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this TestCloudHashUploadStatus.

        HTTP status code that represent result of upload

        :param status_code: The status_code of this TestCloudHashUploadStatus.
        :type status_code: float
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")

        self._status_code = status_code
