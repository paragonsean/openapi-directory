# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WebhooksList200ResponseValuesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, event_types: List[str]=None, id: str=None, name: str=None, url: str=None):
        """WebhooksList200ResponseValuesInner - a model defined in OpenAPI

        :param enabled: The enabled of this WebhooksList200ResponseValuesInner.
        :param event_types: The event_types of this WebhooksList200ResponseValuesInner.
        :param id: The id of this WebhooksList200ResponseValuesInner.
        :param name: The name of this WebhooksList200ResponseValuesInner.
        :param url: The url of this WebhooksList200ResponseValuesInner.
        """
        self.openapi_types = {
            'enabled': bool,
            'event_types': List[str],
            'id': str,
            'name': str,
            'url': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'event_types': 'event_types',
            'id': 'id',
            'name': 'name',
            'url': 'url'
        }

        self._enabled = enabled
        self._event_types = event_types
        self._id = id
        self._name = name
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebhooksList200ResponseValuesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The webhooks_list_200_response_values_inner of this WebhooksList200ResponseValuesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this WebhooksList200ResponseValuesInner.

        Allows eanble/disable webhook

        :return: The enabled of this WebhooksList200ResponseValuesInner.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this WebhooksList200ResponseValuesInner.

        Allows eanble/disable webhook

        :param enabled: The enabled of this WebhooksList200ResponseValuesInner.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def event_types(self):
        """Gets the event_types of this WebhooksList200ResponseValuesInner.

        Event types enabled for webhook

        :return: The event_types of this WebhooksList200ResponseValuesInner.
        :rtype: List[str]
        """
        return self._event_types

    @event_types.setter
    def event_types(self, event_types):
        """Sets the event_types of this WebhooksList200ResponseValuesInner.

        Event types enabled for webhook

        :param event_types: The event_types of this WebhooksList200ResponseValuesInner.
        :type event_types: List[str]
        """
        allowed_values = ["newCrashGroupCreated", "newAppReleased"]  # noqa: E501
        if not set(event_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `event_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(event_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._event_types = event_types

    @property
    def id(self):
        """Gets the id of this WebhooksList200ResponseValuesInner.

        The unique id (UUID) of the webhook

        :return: The id of this WebhooksList200ResponseValuesInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WebhooksList200ResponseValuesInner.

        The unique id (UUID) of the webhook

        :param id: The id of this WebhooksList200ResponseValuesInner.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this WebhooksList200ResponseValuesInner.

        display name of the webhook

        :return: The name of this WebhooksList200ResponseValuesInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WebhooksList200ResponseValuesInner.

        display name of the webhook

        :param name: The name of this WebhooksList200ResponseValuesInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 512:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `512`")

        self._name = name

    @property
    def url(self):
        """Gets the url of this WebhooksList200ResponseValuesInner.

        target url of the webhook

        :return: The url of this WebhooksList200ResponseValuesInner.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebhooksList200ResponseValuesInner.

        target url of the webhook

        :param url: The url of this WebhooksList200ResponseValuesInner.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
