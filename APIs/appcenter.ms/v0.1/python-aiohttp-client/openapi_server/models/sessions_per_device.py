# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analytics_per_device_counts200_response_sessions_per_user_inner import AnalyticsPerDeviceCounts200ResponseSessionsPerUserInner
from openapi_server import util


class SessionsPerDevice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average_sessions_per_user: float=None, previous_average_sessions_per_user: float=None, previous_total_count: int=None, sessions_per_user: List[AnalyticsPerDeviceCounts200ResponseSessionsPerUserInner]=None, total_count: int=None):
        """SessionsPerDevice - a model defined in OpenAPI

        :param average_sessions_per_user: The average_sessions_per_user of this SessionsPerDevice.
        :param previous_average_sessions_per_user: The previous_average_sessions_per_user of this SessionsPerDevice.
        :param previous_total_count: The previous_total_count of this SessionsPerDevice.
        :param sessions_per_user: The sessions_per_user of this SessionsPerDevice.
        :param total_count: The total_count of this SessionsPerDevice.
        """
        self.openapi_types = {
            'average_sessions_per_user': float,
            'previous_average_sessions_per_user': float,
            'previous_total_count': int,
            'sessions_per_user': List[AnalyticsPerDeviceCounts200ResponseSessionsPerUserInner],
            'total_count': int
        }

        self.attribute_map = {
            'average_sessions_per_user': 'average_sessions_per_user',
            'previous_average_sessions_per_user': 'previous_average_sessions_per_user',
            'previous_total_count': 'previous_total_count',
            'sessions_per_user': 'sessions_per_user',
            'total_count': 'total_count'
        }

        self._average_sessions_per_user = average_sessions_per_user
        self._previous_average_sessions_per_user = previous_average_sessions_per_user
        self._previous_total_count = previous_total_count
        self._sessions_per_user = sessions_per_user
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SessionsPerDevice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SessionsPerDevice of this SessionsPerDevice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average_sessions_per_user(self):
        """Gets the average_sessions_per_user of this SessionsPerDevice.

        Average seesion per user.

        :return: The average_sessions_per_user of this SessionsPerDevice.
        :rtype: float
        """
        return self._average_sessions_per_user

    @average_sessions_per_user.setter
    def average_sessions_per_user(self, average_sessions_per_user):
        """Sets the average_sessions_per_user of this SessionsPerDevice.

        Average seesion per user.

        :param average_sessions_per_user: The average_sessions_per_user of this SessionsPerDevice.
        :type average_sessions_per_user: float
        """

        self._average_sessions_per_user = average_sessions_per_user

    @property
    def previous_average_sessions_per_user(self):
        """Gets the previous_average_sessions_per_user of this SessionsPerDevice.

        Previous average session per user.

        :return: The previous_average_sessions_per_user of this SessionsPerDevice.
        :rtype: float
        """
        return self._previous_average_sessions_per_user

    @previous_average_sessions_per_user.setter
    def previous_average_sessions_per_user(self, previous_average_sessions_per_user):
        """Sets the previous_average_sessions_per_user of this SessionsPerDevice.

        Previous average session per user.

        :param previous_average_sessions_per_user: The previous_average_sessions_per_user of this SessionsPerDevice.
        :type previous_average_sessions_per_user: float
        """

        self._previous_average_sessions_per_user = previous_average_sessions_per_user

    @property
    def previous_total_count(self):
        """Gets the previous_total_count of this SessionsPerDevice.

        Previous total count.

        :return: The previous_total_count of this SessionsPerDevice.
        :rtype: int
        """
        return self._previous_total_count

    @previous_total_count.setter
    def previous_total_count(self, previous_total_count):
        """Sets the previous_total_count of this SessionsPerDevice.

        Previous total count.

        :param previous_total_count: The previous_total_count of this SessionsPerDevice.
        :type previous_total_count: int
        """

        self._previous_total_count = previous_total_count

    @property
    def sessions_per_user(self):
        """Gets the sessions_per_user of this SessionsPerDevice.

        The session count for each interval per device.

        :return: The sessions_per_user of this SessionsPerDevice.
        :rtype: List[AnalyticsPerDeviceCounts200ResponseSessionsPerUserInner]
        """
        return self._sessions_per_user

    @sessions_per_user.setter
    def sessions_per_user(self, sessions_per_user):
        """Sets the sessions_per_user of this SessionsPerDevice.

        The session count for each interval per device.

        :param sessions_per_user: The sessions_per_user of this SessionsPerDevice.
        :type sessions_per_user: List[AnalyticsPerDeviceCounts200ResponseSessionsPerUserInner]
        """

        self._sessions_per_user = sessions_per_user

    @property
    def total_count(self):
        """Gets the total_count of this SessionsPerDevice.

        Total session per device count.

        :return: The total_count of this SessionsPerDevice.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this SessionsPerDevice.

        Total session per device count.

        :param total_count: The total_count of this SessionsPerDevice.
        :type total_count: int
        """

        self._total_count = total_count
