# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_timeline_records_inner_issues_inner import BuildTimelineRecordsInnerIssuesInner
from openapi_server import util


class BuildTimelineRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_operation: str=None, error_count: float=None, finish_time: str=None, id: str=None, issues: List[BuildTimelineRecordsInnerIssuesInner]=None, name: str=None, order: float=None, percent_complete: float=None, result: str=None, start_time: str=None, state: str=None, type: str=None, warning_count: float=None):
        """BuildTimelineRecord - a model defined in OpenAPI

        :param current_operation: The current_operation of this BuildTimelineRecord.
        :param error_count: The error_count of this BuildTimelineRecord.
        :param finish_time: The finish_time of this BuildTimelineRecord.
        :param id: The id of this BuildTimelineRecord.
        :param issues: The issues of this BuildTimelineRecord.
        :param name: The name of this BuildTimelineRecord.
        :param order: The order of this BuildTimelineRecord.
        :param percent_complete: The percent_complete of this BuildTimelineRecord.
        :param result: The result of this BuildTimelineRecord.
        :param start_time: The start_time of this BuildTimelineRecord.
        :param state: The state of this BuildTimelineRecord.
        :param type: The type of this BuildTimelineRecord.
        :param warning_count: The warning_count of this BuildTimelineRecord.
        """
        self.openapi_types = {
            'current_operation': str,
            'error_count': float,
            'finish_time': str,
            'id': str,
            'issues': List[BuildTimelineRecordsInnerIssuesInner],
            'name': str,
            'order': float,
            'percent_complete': float,
            'result': str,
            'start_time': str,
            'state': str,
            'type': str,
            'warning_count': float
        }

        self.attribute_map = {
            'current_operation': 'currentOperation',
            'error_count': 'errorCount',
            'finish_time': 'finishTime',
            'id': 'id',
            'issues': 'issues',
            'name': 'name',
            'order': 'order',
            'percent_complete': 'percentComplete',
            'result': 'result',
            'start_time': 'startTime',
            'state': 'state',
            'type': 'type',
            'warning_count': 'warningCount'
        }

        self._current_operation = current_operation
        self._error_count = error_count
        self._finish_time = finish_time
        self._id = id
        self._issues = issues
        self._name = name
        self._order = order
        self._percent_complete = percent_complete
        self._result = result
        self._start_time = start_time
        self._state = state
        self._type = type
        self._warning_count = warning_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildTimelineRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildTimelineRecord of this BuildTimelineRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_operation(self):
        """Gets the current_operation of this BuildTimelineRecord.


        :return: The current_operation of this BuildTimelineRecord.
        :rtype: str
        """
        return self._current_operation

    @current_operation.setter
    def current_operation(self, current_operation):
        """Sets the current_operation of this BuildTimelineRecord.


        :param current_operation: The current_operation of this BuildTimelineRecord.
        :type current_operation: str
        """

        self._current_operation = current_operation

    @property
    def error_count(self):
        """Gets the error_count of this BuildTimelineRecord.


        :return: The error_count of this BuildTimelineRecord.
        :rtype: float
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """Sets the error_count of this BuildTimelineRecord.


        :param error_count: The error_count of this BuildTimelineRecord.
        :type error_count: float
        """

        self._error_count = error_count

    @property
    def finish_time(self):
        """Gets the finish_time of this BuildTimelineRecord.


        :return: The finish_time of this BuildTimelineRecord.
        :rtype: str
        """
        return self._finish_time

    @finish_time.setter
    def finish_time(self, finish_time):
        """Sets the finish_time of this BuildTimelineRecord.


        :param finish_time: The finish_time of this BuildTimelineRecord.
        :type finish_time: str
        """

        self._finish_time = finish_time

    @property
    def id(self):
        """Gets the id of this BuildTimelineRecord.


        :return: The id of this BuildTimelineRecord.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BuildTimelineRecord.


        :param id: The id of this BuildTimelineRecord.
        :type id: str
        """

        self._id = id

    @property
    def issues(self):
        """Gets the issues of this BuildTimelineRecord.


        :return: The issues of this BuildTimelineRecord.
        :rtype: List[BuildTimelineRecordsInnerIssuesInner]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this BuildTimelineRecord.


        :param issues: The issues of this BuildTimelineRecord.
        :type issues: List[BuildTimelineRecordsInnerIssuesInner]
        """

        self._issues = issues

    @property
    def name(self):
        """Gets the name of this BuildTimelineRecord.


        :return: The name of this BuildTimelineRecord.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BuildTimelineRecord.


        :param name: The name of this BuildTimelineRecord.
        :type name: str
        """

        self._name = name

    @property
    def order(self):
        """Gets the order of this BuildTimelineRecord.


        :return: The order of this BuildTimelineRecord.
        :rtype: float
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this BuildTimelineRecord.


        :param order: The order of this BuildTimelineRecord.
        :type order: float
        """

        self._order = order

    @property
    def percent_complete(self):
        """Gets the percent_complete of this BuildTimelineRecord.


        :return: The percent_complete of this BuildTimelineRecord.
        :rtype: float
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this BuildTimelineRecord.


        :param percent_complete: The percent_complete of this BuildTimelineRecord.
        :type percent_complete: float
        """

        self._percent_complete = percent_complete

    @property
    def result(self):
        """Gets the result of this BuildTimelineRecord.


        :return: The result of this BuildTimelineRecord.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this BuildTimelineRecord.


        :param result: The result of this BuildTimelineRecord.
        :type result: str
        """

        self._result = result

    @property
    def start_time(self):
        """Gets the start_time of this BuildTimelineRecord.


        :return: The start_time of this BuildTimelineRecord.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this BuildTimelineRecord.


        :param start_time: The start_time of this BuildTimelineRecord.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this BuildTimelineRecord.


        :return: The state of this BuildTimelineRecord.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BuildTimelineRecord.


        :param state: The state of this BuildTimelineRecord.
        :type state: str
        """

        self._state = state

    @property
    def type(self):
        """Gets the type of this BuildTimelineRecord.


        :return: The type of this BuildTimelineRecord.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BuildTimelineRecord.


        :param type: The type of this BuildTimelineRecord.
        :type type: str
        """

        self._type = type

    @property
    def warning_count(self):
        """Gets the warning_count of this BuildTimelineRecord.


        :return: The warning_count of this BuildTimelineRecord.
        :rtype: float
        """
        return self._warning_count

    @warning_count.setter
    def warning_count(self, warning_count):
        """Sets the warning_count of this BuildTimelineRecord.


        :param warning_count: The warning_count of this BuildTimelineRecord.
        :type warning_count: float
        """

        self._warning_count = warning_count
