# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.step_report_device_screenshots_inner_screenshot_urls import StepReportDeviceScreenshotsInnerScreenshotUrls
from openapi_server import util


class StepReportDeviceScreenshotsInnerScreenshot(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, landscape: bool=None, rotation: float=None, urls: StepReportDeviceScreenshotsInnerScreenshotUrls=None):
        """StepReportDeviceScreenshotsInnerScreenshot - a model defined in OpenAPI

        :param landscape: The landscape of this StepReportDeviceScreenshotsInnerScreenshot.
        :param rotation: The rotation of this StepReportDeviceScreenshotsInnerScreenshot.
        :param urls: The urls of this StepReportDeviceScreenshotsInnerScreenshot.
        """
        self.openapi_types = {
            'landscape': bool,
            'rotation': float,
            'urls': StepReportDeviceScreenshotsInnerScreenshotUrls
        }

        self.attribute_map = {
            'landscape': 'landscape',
            'rotation': 'rotation',
            'urls': 'urls'
        }

        self._landscape = landscape
        self._rotation = rotation
        self._urls = urls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StepReportDeviceScreenshotsInnerScreenshot':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StepReport_deviceScreenshots_inner_screenshot of this StepReportDeviceScreenshotsInnerScreenshot.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def landscape(self):
        """Gets the landscape of this StepReportDeviceScreenshotsInnerScreenshot.


        :return: The landscape of this StepReportDeviceScreenshotsInnerScreenshot.
        :rtype: bool
        """
        return self._landscape

    @landscape.setter
    def landscape(self, landscape):
        """Sets the landscape of this StepReportDeviceScreenshotsInnerScreenshot.


        :param landscape: The landscape of this StepReportDeviceScreenshotsInnerScreenshot.
        :type landscape: bool
        """
        if landscape is None:
            raise ValueError("Invalid value for `landscape`, must not be `None`")

        self._landscape = landscape

    @property
    def rotation(self):
        """Gets the rotation of this StepReportDeviceScreenshotsInnerScreenshot.


        :return: The rotation of this StepReportDeviceScreenshotsInnerScreenshot.
        :rtype: float
        """
        return self._rotation

    @rotation.setter
    def rotation(self, rotation):
        """Sets the rotation of this StepReportDeviceScreenshotsInnerScreenshot.


        :param rotation: The rotation of this StepReportDeviceScreenshotsInnerScreenshot.
        :type rotation: float
        """
        if rotation is None:
            raise ValueError("Invalid value for `rotation`, must not be `None`")

        self._rotation = rotation

    @property
    def urls(self):
        """Gets the urls of this StepReportDeviceScreenshotsInnerScreenshot.


        :return: The urls of this StepReportDeviceScreenshotsInnerScreenshot.
        :rtype: StepReportDeviceScreenshotsInnerScreenshotUrls
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this StepReportDeviceScreenshotsInnerScreenshot.


        :param urls: The urls of this StepReportDeviceScreenshotsInnerScreenshot.
        :type urls: StepReportDeviceScreenshotsInnerScreenshotUrls
        """
        if urls is None:
            raise ValueError("Invalid value for `urls`, must not be `None`")

        self._urls = urls
