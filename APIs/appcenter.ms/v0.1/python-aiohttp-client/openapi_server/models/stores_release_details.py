# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.store_releases_get_latest200_response_inner_distribution_stores_inner import StoreReleasesGetLatest200ResponseInnerDistributionStoresInner
from openapi_server import util


class StoresReleaseDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, android_min_api_level: str=None, app_display_name: str=None, app_name: str=None, bundle_identifier: str=None, distribution_stores: List[StoreReleasesGetLatest200ResponseInnerDistributionStoresInner]=None, download_url: str=None, fingerprint: str=None, id: float=None, install_url: str=None, min_os: str=None, release_notes: str=None, short_version: str=None, size: float=None, status: str=None, uploaded_at: str=None, version: str=None):
        """StoresReleaseDetails - a model defined in OpenAPI

        :param android_min_api_level: The android_min_api_level of this StoresReleaseDetails.
        :param app_display_name: The app_display_name of this StoresReleaseDetails.
        :param app_name: The app_name of this StoresReleaseDetails.
        :param bundle_identifier: The bundle_identifier of this StoresReleaseDetails.
        :param distribution_stores: The distribution_stores of this StoresReleaseDetails.
        :param download_url: The download_url of this StoresReleaseDetails.
        :param fingerprint: The fingerprint of this StoresReleaseDetails.
        :param id: The id of this StoresReleaseDetails.
        :param install_url: The install_url of this StoresReleaseDetails.
        :param min_os: The min_os of this StoresReleaseDetails.
        :param release_notes: The release_notes of this StoresReleaseDetails.
        :param short_version: The short_version of this StoresReleaseDetails.
        :param size: The size of this StoresReleaseDetails.
        :param status: The status of this StoresReleaseDetails.
        :param uploaded_at: The uploaded_at of this StoresReleaseDetails.
        :param version: The version of this StoresReleaseDetails.
        """
        self.openapi_types = {
            'android_min_api_level': str,
            'app_display_name': str,
            'app_name': str,
            'bundle_identifier': str,
            'distribution_stores': List[StoreReleasesGetLatest200ResponseInnerDistributionStoresInner],
            'download_url': str,
            'fingerprint': str,
            'id': float,
            'install_url': str,
            'min_os': str,
            'release_notes': str,
            'short_version': str,
            'size': float,
            'status': str,
            'uploaded_at': str,
            'version': str
        }

        self.attribute_map = {
            'android_min_api_level': 'android_min_api_level',
            'app_display_name': 'app_display_name',
            'app_name': 'app_name',
            'bundle_identifier': 'bundle_identifier',
            'distribution_stores': 'distribution_stores',
            'download_url': 'download_url',
            'fingerprint': 'fingerprint',
            'id': 'id',
            'install_url': 'install_url',
            'min_os': 'min_os',
            'release_notes': 'release_notes',
            'short_version': 'short_version',
            'size': 'size',
            'status': 'status',
            'uploaded_at': 'uploaded_at',
            'version': 'version'
        }

        self._android_min_api_level = android_min_api_level
        self._app_display_name = app_display_name
        self._app_name = app_name
        self._bundle_identifier = bundle_identifier
        self._distribution_stores = distribution_stores
        self._download_url = download_url
        self._fingerprint = fingerprint
        self._id = id
        self._install_url = install_url
        self._min_os = min_os
        self._release_notes = release_notes
        self._short_version = short_version
        self._size = size
        self._status = status
        self._uploaded_at = uploaded_at
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoresReleaseDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StoresReleaseDetails of this StoresReleaseDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def android_min_api_level(self):
        """Gets the android_min_api_level of this StoresReleaseDetails.

        The release's minimum required Android API level.

        :return: The android_min_api_level of this StoresReleaseDetails.
        :rtype: str
        """
        return self._android_min_api_level

    @android_min_api_level.setter
    def android_min_api_level(self, android_min_api_level):
        """Sets the android_min_api_level of this StoresReleaseDetails.

        The release's minimum required Android API level.

        :param android_min_api_level: The android_min_api_level of this StoresReleaseDetails.
        :type android_min_api_level: str
        """

        self._android_min_api_level = android_min_api_level

    @property
    def app_display_name(self):
        """Gets the app_display_name of this StoresReleaseDetails.

        The app's display name.

        :return: The app_display_name of this StoresReleaseDetails.
        :rtype: str
        """
        return self._app_display_name

    @app_display_name.setter
    def app_display_name(self, app_display_name):
        """Sets the app_display_name of this StoresReleaseDetails.

        The app's display name.

        :param app_display_name: The app_display_name of this StoresReleaseDetails.
        :type app_display_name: str
        """

        self._app_display_name = app_display_name

    @property
    def app_name(self):
        """Gets the app_name of this StoresReleaseDetails.

        The app's name (extracted from the uploaded release).

        :return: The app_name of this StoresReleaseDetails.
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this StoresReleaseDetails.

        The app's name (extracted from the uploaded release).

        :param app_name: The app_name of this StoresReleaseDetails.
        :type app_name: str
        """

        self._app_name = app_name

    @property
    def bundle_identifier(self):
        """Gets the bundle_identifier of this StoresReleaseDetails.

        The identifier of the apps bundle.

        :return: The bundle_identifier of this StoresReleaseDetails.
        :rtype: str
        """
        return self._bundle_identifier

    @bundle_identifier.setter
    def bundle_identifier(self, bundle_identifier):
        """Sets the bundle_identifier of this StoresReleaseDetails.

        The identifier of the apps bundle.

        :param bundle_identifier: The bundle_identifier of this StoresReleaseDetails.
        :type bundle_identifier: str
        """

        self._bundle_identifier = bundle_identifier

    @property
    def distribution_stores(self):
        """Gets the distribution_stores of this StoresReleaseDetails.

        a list of distribution stores that are associated with this release.

        :return: The distribution_stores of this StoresReleaseDetails.
        :rtype: List[StoreReleasesGetLatest200ResponseInnerDistributionStoresInner]
        """
        return self._distribution_stores

    @distribution_stores.setter
    def distribution_stores(self, distribution_stores):
        """Sets the distribution_stores of this StoresReleaseDetails.

        a list of distribution stores that are associated with this release.

        :param distribution_stores: The distribution_stores of this StoresReleaseDetails.
        :type distribution_stores: List[StoreReleasesGetLatest200ResponseInnerDistributionStoresInner]
        """

        self._distribution_stores = distribution_stores

    @property
    def download_url(self):
        """Gets the download_url of this StoresReleaseDetails.

        The URL that hosts the binary for this release.

        :return: The download_url of this StoresReleaseDetails.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this StoresReleaseDetails.

        The URL that hosts the binary for this release.

        :param download_url: The download_url of this StoresReleaseDetails.
        :type download_url: str
        """

        self._download_url = download_url

    @property
    def fingerprint(self):
        """Gets the fingerprint of this StoresReleaseDetails.

        MD5 checksum of the release binary.

        :return: The fingerprint of this StoresReleaseDetails.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this StoresReleaseDetails.

        MD5 checksum of the release binary.

        :param fingerprint: The fingerprint of this StoresReleaseDetails.
        :type fingerprint: str
        """

        self._fingerprint = fingerprint

    @property
    def id(self):
        """Gets the id of this StoresReleaseDetails.

        ID identifying this unique release.

        :return: The id of this StoresReleaseDetails.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StoresReleaseDetails.

        ID identifying this unique release.

        :param id: The id of this StoresReleaseDetails.
        :type id: float
        """

        self._id = id

    @property
    def install_url(self):
        """Gets the install_url of this StoresReleaseDetails.

        The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`

        :return: The install_url of this StoresReleaseDetails.
        :rtype: str
        """
        return self._install_url

    @install_url.setter
    def install_url(self, install_url):
        """Sets the install_url of this StoresReleaseDetails.

        The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`

        :param install_url: The install_url of this StoresReleaseDetails.
        :type install_url: str
        """
        allowed_values = ["group", "store"]  # noqa: E501
        if install_url not in allowed_values:
            raise ValueError(
                "Invalid value for `install_url` ({0}), must be one of {1}"
                .format(install_url, allowed_values)
            )

        self._install_url = install_url

    @property
    def min_os(self):
        """Gets the min_os of this StoresReleaseDetails.

        The release's minimum required operating system.

        :return: The min_os of this StoresReleaseDetails.
        :rtype: str
        """
        return self._min_os

    @min_os.setter
    def min_os(self, min_os):
        """Sets the min_os of this StoresReleaseDetails.

        The release's minimum required operating system.

        :param min_os: The min_os of this StoresReleaseDetails.
        :type min_os: str
        """

        self._min_os = min_os

    @property
    def release_notes(self):
        """Gets the release_notes of this StoresReleaseDetails.

        The release's release notes.

        :return: The release_notes of this StoresReleaseDetails.
        :rtype: str
        """
        return self._release_notes

    @release_notes.setter
    def release_notes(self, release_notes):
        """Sets the release_notes of this StoresReleaseDetails.

        The release's release notes.

        :param release_notes: The release_notes of this StoresReleaseDetails.
        :type release_notes: str
        """

        self._release_notes = release_notes

    @property
    def short_version(self):
        """Gets the short_version of this StoresReleaseDetails.

        The release's short version.<br> For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml. 

        :return: The short_version of this StoresReleaseDetails.
        :rtype: str
        """
        return self._short_version

    @short_version.setter
    def short_version(self, short_version):
        """Sets the short_version of this StoresReleaseDetails.

        The release's short version.<br> For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml. 

        :param short_version: The short_version of this StoresReleaseDetails.
        :type short_version: str
        """

        self._short_version = short_version

    @property
    def size(self):
        """Gets the size of this StoresReleaseDetails.

        The release's size in bytes.

        :return: The size of this StoresReleaseDetails.
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this StoresReleaseDetails.

        The release's size in bytes.

        :param size: The size of this StoresReleaseDetails.
        :type size: float
        """

        self._size = size

    @property
    def status(self):
        """Gets the status of this StoresReleaseDetails.

        OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any 'available' release will be associated with the default distribution group of an app.</br> The release state.<br> <b>available</b>: The uploaded release has been distributed.<br> <b>unavailable</b>: The uploaded release is not visible to the user. <br> 

        :return: The status of this StoresReleaseDetails.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StoresReleaseDetails.

        OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any 'available' release will be associated with the default distribution group of an app.</br> The release state.<br> <b>available</b>: The uploaded release has been distributed.<br> <b>unavailable</b>: The uploaded release is not visible to the user. <br> 

        :param status: The status of this StoresReleaseDetails.
        :type status: str
        """
        allowed_values = ["available", "unavailable"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def uploaded_at(self):
        """Gets the uploaded_at of this StoresReleaseDetails.

        UTC time in ISO 8601 format of the uploaded time.

        :return: The uploaded_at of this StoresReleaseDetails.
        :rtype: str
        """
        return self._uploaded_at

    @uploaded_at.setter
    def uploaded_at(self, uploaded_at):
        """Sets the uploaded_at of this StoresReleaseDetails.

        UTC time in ISO 8601 format of the uploaded time.

        :param uploaded_at: The uploaded_at of this StoresReleaseDetails.
        :type uploaded_at: str
        """

        self._uploaded_at = uploaded_at

    @property
    def version(self):
        """Gets the version of this StoresReleaseDetails.

        The release's version.<br> For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml. 

        :return: The version of this StoresReleaseDetails.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this StoresReleaseDetails.

        The release's version.<br> For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml. 

        :param version: The version of this StoresReleaseDetails.
        :type version: str
        """

        self._version = version
