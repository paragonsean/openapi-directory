# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AlertingError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, request_id: str=None, code: int=None, message: str=None):
        """AlertingError - a model defined in OpenAPI

        :param request_id: The request_id of this AlertingError.
        :param code: The code of this AlertingError.
        :param message: The message of this AlertingError.
        """
        self.openapi_types = {
            'request_id': str,
            'code': int,
            'message': str
        }

        self.attribute_map = {
            'request_id': 'request_id',
            'code': 'code',
            'message': 'message'
        }

        self._request_id = request_id
        self._code = code
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertingError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlertingError of this AlertingError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request_id(self):
        """Gets the request_id of this AlertingError.

        Unique request identifier for tracking

        :return: The request_id of this AlertingError.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this AlertingError.

        Unique request identifier for tracking

        :param request_id: The request_id of this AlertingError.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")

        self._request_id = request_id

    @property
    def code(self):
        """Gets the code of this AlertingError.

        The status code return by the API. It can be 400 or 404 or 409 or 500.

        :return: The code of this AlertingError.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AlertingError.

        The status code return by the API. It can be 400 or 404 or 409 or 500.

        :param code: The code of this AlertingError.
        :type code: int
        """
        allowed_values = [400, 404, 409, 500]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def message(self):
        """Gets the message of this AlertingError.

        The reason for the request failed

        :return: The message of this AlertingError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AlertingError.

        The reason for the request failed

        :param message: The message of this AlertingError.
        :type message: str
        """

        self._message = message
