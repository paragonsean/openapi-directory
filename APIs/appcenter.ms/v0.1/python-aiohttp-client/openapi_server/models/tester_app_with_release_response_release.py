# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TesterAppWithReleaseResponseRelease(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, id: int=None, is_external_build: bool=None, mandatory_update: bool=None, origin: str=None, short_version: str=None, uploaded_at: str=None, version: str=None, install_url: str=None, release_notes: str=None, size: int=None):
        """TesterAppWithReleaseResponseRelease - a model defined in OpenAPI

        :param enabled: The enabled of this TesterAppWithReleaseResponseRelease.
        :param id: The id of this TesterAppWithReleaseResponseRelease.
        :param is_external_build: The is_external_build of this TesterAppWithReleaseResponseRelease.
        :param mandatory_update: The mandatory_update of this TesterAppWithReleaseResponseRelease.
        :param origin: The origin of this TesterAppWithReleaseResponseRelease.
        :param short_version: The short_version of this TesterAppWithReleaseResponseRelease.
        :param uploaded_at: The uploaded_at of this TesterAppWithReleaseResponseRelease.
        :param version: The version of this TesterAppWithReleaseResponseRelease.
        :param install_url: The install_url of this TesterAppWithReleaseResponseRelease.
        :param release_notes: The release_notes of this TesterAppWithReleaseResponseRelease.
        :param size: The size of this TesterAppWithReleaseResponseRelease.
        """
        self.openapi_types = {
            'enabled': bool,
            'id': int,
            'is_external_build': bool,
            'mandatory_update': bool,
            'origin': str,
            'short_version': str,
            'uploaded_at': str,
            'version': str,
            'install_url': str,
            'release_notes': str,
            'size': int
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'id': 'id',
            'is_external_build': 'is_external_build',
            'mandatory_update': 'mandatory_update',
            'origin': 'origin',
            'short_version': 'short_version',
            'uploaded_at': 'uploaded_at',
            'version': 'version',
            'install_url': 'install_url',
            'release_notes': 'release_notes',
            'size': 'size'
        }

        self._enabled = enabled
        self._id = id
        self._is_external_build = is_external_build
        self._mandatory_update = mandatory_update
        self._origin = origin
        self._short_version = short_version
        self._uploaded_at = uploaded_at
        self._version = version
        self._install_url = install_url
        self._release_notes = release_notes
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TesterAppWithReleaseResponseRelease':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TesterAppWithReleaseResponse_release of this TesterAppWithReleaseResponseRelease.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this TesterAppWithReleaseResponseRelease.

        This value determines the whether a release currently is enabled or disabled.

        :return: The enabled of this TesterAppWithReleaseResponseRelease.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this TesterAppWithReleaseResponseRelease.

        This value determines the whether a release currently is enabled or disabled.

        :param enabled: The enabled of this TesterAppWithReleaseResponseRelease.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this TesterAppWithReleaseResponseRelease.

        ID identifying this unique release.

        :return: The id of this TesterAppWithReleaseResponseRelease.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TesterAppWithReleaseResponseRelease.

        ID identifying this unique release.

        :param id: The id of this TesterAppWithReleaseResponseRelease.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_external_build(self):
        """Gets the is_external_build of this TesterAppWithReleaseResponseRelease.

        This value determines if a release is external or not.

        :return: The is_external_build of this TesterAppWithReleaseResponseRelease.
        :rtype: bool
        """
        return self._is_external_build

    @is_external_build.setter
    def is_external_build(self, is_external_build):
        """Sets the is_external_build of this TesterAppWithReleaseResponseRelease.

        This value determines if a release is external or not.

        :param is_external_build: The is_external_build of this TesterAppWithReleaseResponseRelease.
        :type is_external_build: bool
        """

        self._is_external_build = is_external_build

    @property
    def mandatory_update(self):
        """Gets the mandatory_update of this TesterAppWithReleaseResponseRelease.

        A boolean which determines whether the release is a mandatory update or not.

        :return: The mandatory_update of this TesterAppWithReleaseResponseRelease.
        :rtype: bool
        """
        return self._mandatory_update

    @mandatory_update.setter
    def mandatory_update(self, mandatory_update):
        """Sets the mandatory_update of this TesterAppWithReleaseResponseRelease.

        A boolean which determines whether the release is a mandatory update or not.

        :param mandatory_update: The mandatory_update of this TesterAppWithReleaseResponseRelease.
        :type mandatory_update: bool
        """
        if mandatory_update is None:
            raise ValueError("Invalid value for `mandatory_update`, must not be `None`")

        self._mandatory_update = mandatory_update

    @property
    def origin(self):
        """Gets the origin of this TesterAppWithReleaseResponseRelease.

        The release's origin

        :return: The origin of this TesterAppWithReleaseResponseRelease.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this TesterAppWithReleaseResponseRelease.

        The release's origin

        :param origin: The origin of this TesterAppWithReleaseResponseRelease.
        :type origin: str
        """
        allowed_values = ["hockeyapp", "appcenter"]  # noqa: E501
        if origin not in allowed_values:
            raise ValueError(
                "Invalid value for `origin` ({0}), must be one of {1}"
                .format(origin, allowed_values)
            )

        self._origin = origin

    @property
    def short_version(self):
        """Gets the short_version of this TesterAppWithReleaseResponseRelease.

        The release's short version.<br> For iOS: CFBundleShortVersionString from info.plist.<br> For Android: android:versionName from AppManifest.xml. 

        :return: The short_version of this TesterAppWithReleaseResponseRelease.
        :rtype: str
        """
        return self._short_version

    @short_version.setter
    def short_version(self, short_version):
        """Sets the short_version of this TesterAppWithReleaseResponseRelease.

        The release's short version.<br> For iOS: CFBundleShortVersionString from info.plist.<br> For Android: android:versionName from AppManifest.xml. 

        :param short_version: The short_version of this TesterAppWithReleaseResponseRelease.
        :type short_version: str
        """
        if short_version is None:
            raise ValueError("Invalid value for `short_version`, must not be `None`")

        self._short_version = short_version

    @property
    def uploaded_at(self):
        """Gets the uploaded_at of this TesterAppWithReleaseResponseRelease.

        UTC time in ISO 8601 format of the uploaded time.

        :return: The uploaded_at of this TesterAppWithReleaseResponseRelease.
        :rtype: str
        """
        return self._uploaded_at

    @uploaded_at.setter
    def uploaded_at(self, uploaded_at):
        """Sets the uploaded_at of this TesterAppWithReleaseResponseRelease.

        UTC time in ISO 8601 format of the uploaded time.

        :param uploaded_at: The uploaded_at of this TesterAppWithReleaseResponseRelease.
        :type uploaded_at: str
        """
        if uploaded_at is None:
            raise ValueError("Invalid value for `uploaded_at`, must not be `None`")

        self._uploaded_at = uploaded_at

    @property
    def version(self):
        """Gets the version of this TesterAppWithReleaseResponseRelease.

        The release's version.<br> For iOS: CFBundleVersion from info.plist.<br> For Android: android:versionCode from AppManifest.xml. 

        :return: The version of this TesterAppWithReleaseResponseRelease.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TesterAppWithReleaseResponseRelease.

        The release's version.<br> For iOS: CFBundleVersion from info.plist.<br> For Android: android:versionCode from AppManifest.xml. 

        :param version: The version of this TesterAppWithReleaseResponseRelease.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def install_url(self):
        """Gets the install_url of this TesterAppWithReleaseResponseRelease.

        The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`

        :return: The install_url of this TesterAppWithReleaseResponseRelease.
        :rtype: str
        """
        return self._install_url

    @install_url.setter
    def install_url(self, install_url):
        """Sets the install_url of this TesterAppWithReleaseResponseRelease.

        The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`

        :param install_url: The install_url of this TesterAppWithReleaseResponseRelease.
        :type install_url: str
        """

        self._install_url = install_url

    @property
    def release_notes(self):
        """Gets the release_notes of this TesterAppWithReleaseResponseRelease.

        The release's release notes.

        :return: The release_notes of this TesterAppWithReleaseResponseRelease.
        :rtype: str
        """
        return self._release_notes

    @release_notes.setter
    def release_notes(self, release_notes):
        """Sets the release_notes of this TesterAppWithReleaseResponseRelease.

        The release's release notes.

        :param release_notes: The release_notes of this TesterAppWithReleaseResponseRelease.
        :type release_notes: str
        """

        self._release_notes = release_notes

    @property
    def size(self):
        """Gets the size of this TesterAppWithReleaseResponseRelease.

        The release's size in bytes.

        :return: The size of this TesterAppWithReleaseResponseRelease.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this TesterAppWithReleaseResponseRelease.

        The release's size in bytes.

        :param size: The size of this TesterAppWithReleaseResponseRelease.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size
