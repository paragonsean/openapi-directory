# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.test_get_test_report200_response_device_logs_inner import TestGetTestReport200ResponseDeviceLogsInner
from openapi_server.models.test_get_test_report200_response_features_inner import TestGetTestReport200ResponseFeaturesInner
from openapi_server.models.test_get_test_report200_response_snapshot_fatal_errors_inner import TestGetTestReport200ResponseSnapshotFatalErrorsInner
from openapi_server.models.test_get_test_report200_response_stats import TestGetTestReport200ResponseStats
from openapi_server import util


class TestReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_upload_id: str=None, _date: str=None, date_finished: str=None, device_logs: List[TestGetTestReport200ResponseDeviceLogsInner]=None, error_message: str=None, features: List[TestGetTestReport200ResponseFeaturesInner]=None, finished_device_snapshots: List[str]=None, id: str=None, platform: str=None, revision: float=None, schema_version: float=None, snapshot_fatal_errors: List[TestGetTestReport200ResponseSnapshotFatalErrorsInner]=None, stats: TestGetTestReport200ResponseStats=None, test_type: str=None):
        """TestReport - a model defined in OpenAPI

        :param app_upload_id: The app_upload_id of this TestReport.
        :param _date: The _date of this TestReport.
        :param date_finished: The date_finished of this TestReport.
        :param device_logs: The device_logs of this TestReport.
        :param error_message: The error_message of this TestReport.
        :param features: The features of this TestReport.
        :param finished_device_snapshots: The finished_device_snapshots of this TestReport.
        :param id: The id of this TestReport.
        :param platform: The platform of this TestReport.
        :param revision: The revision of this TestReport.
        :param schema_version: The schema_version of this TestReport.
        :param snapshot_fatal_errors: The snapshot_fatal_errors of this TestReport.
        :param stats: The stats of this TestReport.
        :param test_type: The test_type of this TestReport.
        """
        self.openapi_types = {
            'app_upload_id': str,
            '_date': str,
            'date_finished': str,
            'device_logs': List[TestGetTestReport200ResponseDeviceLogsInner],
            'error_message': str,
            'features': List[TestGetTestReport200ResponseFeaturesInner],
            'finished_device_snapshots': List[str],
            'id': str,
            'platform': str,
            'revision': float,
            'schema_version': float,
            'snapshot_fatal_errors': List[TestGetTestReport200ResponseSnapshotFatalErrorsInner],
            'stats': TestGetTestReport200ResponseStats,
            'test_type': str
        }

        self.attribute_map = {
            'app_upload_id': 'app_upload_id',
            '_date': 'date',
            'date_finished': 'date_finished',
            'device_logs': 'device_logs',
            'error_message': 'errorMessage',
            'features': 'features',
            'finished_device_snapshots': 'finished_device_snapshots',
            'id': 'id',
            'platform': 'platform',
            'revision': 'revision',
            'schema_version': 'schema_version',
            'snapshot_fatal_errors': 'snapshot_fatal_errors',
            'stats': 'stats',
            'test_type': 'testType'
        }

        self._app_upload_id = app_upload_id
        self.__date = _date
        self._date_finished = date_finished
        self._device_logs = device_logs
        self._error_message = error_message
        self._features = features
        self._finished_device_snapshots = finished_device_snapshots
        self._id = id
        self._platform = platform
        self._revision = revision
        self._schema_version = schema_version
        self._snapshot_fatal_errors = snapshot_fatal_errors
        self._stats = stats
        self._test_type = test_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestReport of this TestReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_upload_id(self):
        """Gets the app_upload_id of this TestReport.


        :return: The app_upload_id of this TestReport.
        :rtype: str
        """
        return self._app_upload_id

    @app_upload_id.setter
    def app_upload_id(self, app_upload_id):
        """Sets the app_upload_id of this TestReport.


        :param app_upload_id: The app_upload_id of this TestReport.
        :type app_upload_id: str
        """
        if app_upload_id is None:
            raise ValueError("Invalid value for `app_upload_id`, must not be `None`")

        self._app_upload_id = app_upload_id

    @property
    def _date(self):
        """Gets the _date of this TestReport.


        :return: The _date of this TestReport.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this TestReport.


        :param _date: The _date of this TestReport.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def date_finished(self):
        """Gets the date_finished of this TestReport.


        :return: The date_finished of this TestReport.
        :rtype: str
        """
        return self._date_finished

    @date_finished.setter
    def date_finished(self, date_finished):
        """Sets the date_finished of this TestReport.


        :param date_finished: The date_finished of this TestReport.
        :type date_finished: str
        """
        if date_finished is None:
            raise ValueError("Invalid value for `date_finished`, must not be `None`")

        self._date_finished = date_finished

    @property
    def device_logs(self):
        """Gets the device_logs of this TestReport.


        :return: The device_logs of this TestReport.
        :rtype: List[TestGetTestReport200ResponseDeviceLogsInner]
        """
        return self._device_logs

    @device_logs.setter
    def device_logs(self, device_logs):
        """Sets the device_logs of this TestReport.


        :param device_logs: The device_logs of this TestReport.
        :type device_logs: List[TestGetTestReport200ResponseDeviceLogsInner]
        """
        if device_logs is None:
            raise ValueError("Invalid value for `device_logs`, must not be `None`")

        self._device_logs = device_logs

    @property
    def error_message(self):
        """Gets the error_message of this TestReport.


        :return: The error_message of this TestReport.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this TestReport.


        :param error_message: The error_message of this TestReport.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def features(self):
        """Gets the features of this TestReport.


        :return: The features of this TestReport.
        :rtype: List[TestGetTestReport200ResponseFeaturesInner]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this TestReport.


        :param features: The features of this TestReport.
        :type features: List[TestGetTestReport200ResponseFeaturesInner]
        """
        if features is None:
            raise ValueError("Invalid value for `features`, must not be `None`")

        self._features = features

    @property
    def finished_device_snapshots(self):
        """Gets the finished_device_snapshots of this TestReport.


        :return: The finished_device_snapshots of this TestReport.
        :rtype: List[str]
        """
        return self._finished_device_snapshots

    @finished_device_snapshots.setter
    def finished_device_snapshots(self, finished_device_snapshots):
        """Sets the finished_device_snapshots of this TestReport.


        :param finished_device_snapshots: The finished_device_snapshots of this TestReport.
        :type finished_device_snapshots: List[str]
        """
        if finished_device_snapshots is None:
            raise ValueError("Invalid value for `finished_device_snapshots`, must not be `None`")

        self._finished_device_snapshots = finished_device_snapshots

    @property
    def id(self):
        """Gets the id of this TestReport.


        :return: The id of this TestReport.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TestReport.


        :param id: The id of this TestReport.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def platform(self):
        """Gets the platform of this TestReport.


        :return: The platform of this TestReport.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this TestReport.


        :param platform: The platform of this TestReport.
        :type platform: str
        """
        if platform is None:
            raise ValueError("Invalid value for `platform`, must not be `None`")

        self._platform = platform

    @property
    def revision(self):
        """Gets the revision of this TestReport.


        :return: The revision of this TestReport.
        :rtype: float
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this TestReport.


        :param revision: The revision of this TestReport.
        :type revision: float
        """
        if revision is None:
            raise ValueError("Invalid value for `revision`, must not be `None`")

        self._revision = revision

    @property
    def schema_version(self):
        """Gets the schema_version of this TestReport.


        :return: The schema_version of this TestReport.
        :rtype: float
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this TestReport.


        :param schema_version: The schema_version of this TestReport.
        :type schema_version: float
        """
        if schema_version is None:
            raise ValueError("Invalid value for `schema_version`, must not be `None`")

        self._schema_version = schema_version

    @property
    def snapshot_fatal_errors(self):
        """Gets the snapshot_fatal_errors of this TestReport.


        :return: The snapshot_fatal_errors of this TestReport.
        :rtype: List[TestGetTestReport200ResponseSnapshotFatalErrorsInner]
        """
        return self._snapshot_fatal_errors

    @snapshot_fatal_errors.setter
    def snapshot_fatal_errors(self, snapshot_fatal_errors):
        """Sets the snapshot_fatal_errors of this TestReport.


        :param snapshot_fatal_errors: The snapshot_fatal_errors of this TestReport.
        :type snapshot_fatal_errors: List[TestGetTestReport200ResponseSnapshotFatalErrorsInner]
        """

        self._snapshot_fatal_errors = snapshot_fatal_errors

    @property
    def stats(self):
        """Gets the stats of this TestReport.


        :return: The stats of this TestReport.
        :rtype: TestGetTestReport200ResponseStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this TestReport.


        :param stats: The stats of this TestReport.
        :type stats: TestGetTestReport200ResponseStats
        """
        if stats is None:
            raise ValueError("Invalid value for `stats`, must not be `None`")

        self._stats = stats

    @property
    def test_type(self):
        """Gets the test_type of this TestReport.


        :return: The test_type of this TestReport.
        :rtype: str
        """
        return self._test_type

    @test_type.setter
    def test_type(self, test_type):
        """Sets the test_type of this TestReport.


        :param test_type: The test_type of this TestReport.
        :type test_type: str
        """
        if test_type is None:
            raise ValueError("Invalid value for `test_type`, must not be `None`")

        self._test_type = test_type
