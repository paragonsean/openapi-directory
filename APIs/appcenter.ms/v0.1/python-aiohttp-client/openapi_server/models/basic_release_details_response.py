# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.releases_get_latest_by_distribution_group200_response_destinations_inner import ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner
from openapi_server.models.releases_list_latest200_response_inner_build import ReleasesListLatest200ResponseInnerBuild
from openapi_server.models.releases_list_latest200_response_inner_distribution_groups_inner import ReleasesListLatest200ResponseInnerDistributionGroupsInner
from openapi_server.models.releases_list_latest200_response_inner_distribution_stores_inner import ReleasesListLatest200ResponseInnerDistributionStoresInner
from openapi_server import util


class BasicReleaseDetailsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build: ReleasesListLatest200ResponseInnerBuild=None, destination_type: str=None, destinations: List[ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner]=None, distribution_groups: List[ReleasesListLatest200ResponseInnerDistributionGroupsInner]=None, distribution_stores: List[ReleasesListLatest200ResponseInnerDistributionStoresInner]=None, enabled: bool=None, file_extension: str=None, id: int=None, is_external_build: bool=None, origin: str=None, short_version: str=None, uploaded_at: str=None, version: str=None):
        """BasicReleaseDetailsResponse - a model defined in OpenAPI

        :param build: The build of this BasicReleaseDetailsResponse.
        :param destination_type: The destination_type of this BasicReleaseDetailsResponse.
        :param destinations: The destinations of this BasicReleaseDetailsResponse.
        :param distribution_groups: The distribution_groups of this BasicReleaseDetailsResponse.
        :param distribution_stores: The distribution_stores of this BasicReleaseDetailsResponse.
        :param enabled: The enabled of this BasicReleaseDetailsResponse.
        :param file_extension: The file_extension of this BasicReleaseDetailsResponse.
        :param id: The id of this BasicReleaseDetailsResponse.
        :param is_external_build: The is_external_build of this BasicReleaseDetailsResponse.
        :param origin: The origin of this BasicReleaseDetailsResponse.
        :param short_version: The short_version of this BasicReleaseDetailsResponse.
        :param uploaded_at: The uploaded_at of this BasicReleaseDetailsResponse.
        :param version: The version of this BasicReleaseDetailsResponse.
        """
        self.openapi_types = {
            'build': ReleasesListLatest200ResponseInnerBuild,
            'destination_type': str,
            'destinations': List[ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner],
            'distribution_groups': List[ReleasesListLatest200ResponseInnerDistributionGroupsInner],
            'distribution_stores': List[ReleasesListLatest200ResponseInnerDistributionStoresInner],
            'enabled': bool,
            'file_extension': str,
            'id': int,
            'is_external_build': bool,
            'origin': str,
            'short_version': str,
            'uploaded_at': str,
            'version': str
        }

        self.attribute_map = {
            'build': 'build',
            'destination_type': 'destination_type',
            'destinations': 'destinations',
            'distribution_groups': 'distribution_groups',
            'distribution_stores': 'distribution_stores',
            'enabled': 'enabled',
            'file_extension': 'file_extension',
            'id': 'id',
            'is_external_build': 'is_external_build',
            'origin': 'origin',
            'short_version': 'short_version',
            'uploaded_at': 'uploaded_at',
            'version': 'version'
        }

        self._build = build
        self._destination_type = destination_type
        self._destinations = destinations
        self._distribution_groups = distribution_groups
        self._distribution_stores = distribution_stores
        self._enabled = enabled
        self._file_extension = file_extension
        self._id = id
        self._is_external_build = is_external_build
        self._origin = origin
        self._short_version = short_version
        self._uploaded_at = uploaded_at
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BasicReleaseDetailsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BasicReleaseDetailsResponse of this BasicReleaseDetailsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build(self):
        """Gets the build of this BasicReleaseDetailsResponse.


        :return: The build of this BasicReleaseDetailsResponse.
        :rtype: ReleasesListLatest200ResponseInnerBuild
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this BasicReleaseDetailsResponse.


        :param build: The build of this BasicReleaseDetailsResponse.
        :type build: ReleasesListLatest200ResponseInnerBuild
        """

        self._build = build

    @property
    def destination_type(self):
        """Gets the destination_type of this BasicReleaseDetailsResponse.

        OBSOLETE. Will be removed in next version. The destination type.<br> <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br> <b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br> 

        :return: The destination_type of this BasicReleaseDetailsResponse.
        :rtype: str
        """
        return self._destination_type

    @destination_type.setter
    def destination_type(self, destination_type):
        """Sets the destination_type of this BasicReleaseDetailsResponse.

        OBSOLETE. Will be removed in next version. The destination type.<br> <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br> <b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br> 

        :param destination_type: The destination_type of this BasicReleaseDetailsResponse.
        :type destination_type: str
        """
        allowed_values = ["group", "store", "tester"]  # noqa: E501
        if destination_type not in allowed_values:
            raise ValueError(
                "Invalid value for `destination_type` ({0}), must be one of {1}"
                .format(destination_type, allowed_values)
            )

        self._destination_type = destination_type

    @property
    def destinations(self):
        """Gets the destinations of this BasicReleaseDetailsResponse.

        A list of distribution groups or stores.

        :return: The destinations of this BasicReleaseDetailsResponse.
        :rtype: List[ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this BasicReleaseDetailsResponse.

        A list of distribution groups or stores.

        :param destinations: The destinations of this BasicReleaseDetailsResponse.
        :type destinations: List[ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner]
        """

        self._destinations = destinations

    @property
    def distribution_groups(self):
        """Gets the distribution_groups of this BasicReleaseDetailsResponse.

        OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.

        :return: The distribution_groups of this BasicReleaseDetailsResponse.
        :rtype: List[ReleasesListLatest200ResponseInnerDistributionGroupsInner]
        """
        return self._distribution_groups

    @distribution_groups.setter
    def distribution_groups(self, distribution_groups):
        """Sets the distribution_groups of this BasicReleaseDetailsResponse.

        OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.

        :param distribution_groups: The distribution_groups of this BasicReleaseDetailsResponse.
        :type distribution_groups: List[ReleasesListLatest200ResponseInnerDistributionGroupsInner]
        """

        self._distribution_groups = distribution_groups

    @property
    def distribution_stores(self):
        """Gets the distribution_stores of this BasicReleaseDetailsResponse.

        OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.

        :return: The distribution_stores of this BasicReleaseDetailsResponse.
        :rtype: List[ReleasesListLatest200ResponseInnerDistributionStoresInner]
        """
        return self._distribution_stores

    @distribution_stores.setter
    def distribution_stores(self, distribution_stores):
        """Sets the distribution_stores of this BasicReleaseDetailsResponse.

        OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.

        :param distribution_stores: The distribution_stores of this BasicReleaseDetailsResponse.
        :type distribution_stores: List[ReleasesListLatest200ResponseInnerDistributionStoresInner]
        """

        self._distribution_stores = distribution_stores

    @property
    def enabled(self):
        """Gets the enabled of this BasicReleaseDetailsResponse.

        This value determines the whether a release currently is enabled or disabled.

        :return: The enabled of this BasicReleaseDetailsResponse.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this BasicReleaseDetailsResponse.

        This value determines the whether a release currently is enabled or disabled.

        :param enabled: The enabled of this BasicReleaseDetailsResponse.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def file_extension(self):
        """Gets the file_extension of this BasicReleaseDetailsResponse.

        The file extension of the main (user-uploaded) package file.

        :return: The file_extension of this BasicReleaseDetailsResponse.
        :rtype: str
        """
        return self._file_extension

    @file_extension.setter
    def file_extension(self, file_extension):
        """Sets the file_extension of this BasicReleaseDetailsResponse.

        The file extension of the main (user-uploaded) package file.

        :param file_extension: The file_extension of this BasicReleaseDetailsResponse.
        :type file_extension: str
        """

        self._file_extension = file_extension

    @property
    def id(self):
        """Gets the id of this BasicReleaseDetailsResponse.

        ID identifying this unique release.

        :return: The id of this BasicReleaseDetailsResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BasicReleaseDetailsResponse.

        ID identifying this unique release.

        :param id: The id of this BasicReleaseDetailsResponse.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_external_build(self):
        """Gets the is_external_build of this BasicReleaseDetailsResponse.

        This value determines if a release is external or not.

        :return: The is_external_build of this BasicReleaseDetailsResponse.
        :rtype: bool
        """
        return self._is_external_build

    @is_external_build.setter
    def is_external_build(self, is_external_build):
        """Sets the is_external_build of this BasicReleaseDetailsResponse.

        This value determines if a release is external or not.

        :param is_external_build: The is_external_build of this BasicReleaseDetailsResponse.
        :type is_external_build: bool
        """

        self._is_external_build = is_external_build

    @property
    def origin(self):
        """Gets the origin of this BasicReleaseDetailsResponse.

        The release's origin

        :return: The origin of this BasicReleaseDetailsResponse.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this BasicReleaseDetailsResponse.

        The release's origin

        :param origin: The origin of this BasicReleaseDetailsResponse.
        :type origin: str
        """
        allowed_values = ["hockeyapp", "appcenter"]  # noqa: E501
        if origin not in allowed_values:
            raise ValueError(
                "Invalid value for `origin` ({0}), must be one of {1}"
                .format(origin, allowed_values)
            )

        self._origin = origin

    @property
    def short_version(self):
        """Gets the short_version of this BasicReleaseDetailsResponse.

        The release's short version.<br> For iOS: CFBundleShortVersionString from info.plist.<br> For Android: android:versionName from AppManifest.xml. 

        :return: The short_version of this BasicReleaseDetailsResponse.
        :rtype: str
        """
        return self._short_version

    @short_version.setter
    def short_version(self, short_version):
        """Sets the short_version of this BasicReleaseDetailsResponse.

        The release's short version.<br> For iOS: CFBundleShortVersionString from info.plist.<br> For Android: android:versionName from AppManifest.xml. 

        :param short_version: The short_version of this BasicReleaseDetailsResponse.
        :type short_version: str
        """
        if short_version is None:
            raise ValueError("Invalid value for `short_version`, must not be `None`")

        self._short_version = short_version

    @property
    def uploaded_at(self):
        """Gets the uploaded_at of this BasicReleaseDetailsResponse.

        UTC time in ISO 8601 format of the uploaded time.

        :return: The uploaded_at of this BasicReleaseDetailsResponse.
        :rtype: str
        """
        return self._uploaded_at

    @uploaded_at.setter
    def uploaded_at(self, uploaded_at):
        """Sets the uploaded_at of this BasicReleaseDetailsResponse.

        UTC time in ISO 8601 format of the uploaded time.

        :param uploaded_at: The uploaded_at of this BasicReleaseDetailsResponse.
        :type uploaded_at: str
        """
        if uploaded_at is None:
            raise ValueError("Invalid value for `uploaded_at`, must not be `None`")

        self._uploaded_at = uploaded_at

    @property
    def version(self):
        """Gets the version of this BasicReleaseDetailsResponse.

        The release's version.<br> For iOS: CFBundleVersion from info.plist.<br> For Android: android:versionCode from AppManifest.xml. 

        :return: The version of this BasicReleaseDetailsResponse.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BasicReleaseDetailsResponse.

        The release's version.<br> For iOS: CFBundleVersion from info.plist.<br> For Android: android:versionCode from AppManifest.xml. 

        :param version: The version of this BasicReleaseDetailsResponse.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
