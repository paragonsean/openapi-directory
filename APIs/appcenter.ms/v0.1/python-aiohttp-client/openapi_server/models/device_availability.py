# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceAvailability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available: float=None, maximum: float=None, registered: float=None):
        """DeviceAvailability - a model defined in OpenAPI

        :param available: The available of this DeviceAvailability.
        :param maximum: The maximum of this DeviceAvailability.
        :param registered: The registered of this DeviceAvailability.
        """
        self.openapi_types = {
            'available': float,
            'maximum': float,
            'registered': float
        }

        self.attribute_map = {
            'available': 'available',
            'maximum': 'maximum',
            'registered': 'registered'
        }

        self._available = available
        self._maximum = maximum
        self._registered = registered

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceAvailability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceAvailability of this DeviceAvailability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available(self):
        """Gets the available of this DeviceAvailability.


        :return: The available of this DeviceAvailability.
        :rtype: float
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this DeviceAvailability.


        :param available: The available of this DeviceAvailability.
        :type available: float
        """
        if available is None:
            raise ValueError("Invalid value for `available`, must not be `None`")

        self._available = available

    @property
    def maximum(self):
        """Gets the maximum of this DeviceAvailability.


        :return: The maximum of this DeviceAvailability.
        :rtype: float
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this DeviceAvailability.


        :param maximum: The maximum of this DeviceAvailability.
        :type maximum: float
        """
        if maximum is None:
            raise ValueError("Invalid value for `maximum`, must not be `None`")

        self._maximum = maximum

    @property
    def registered(self):
        """Gets the registered of this DeviceAvailability.


        :return: The registered of this DeviceAvailability.
        :rtype: float
        """
        return self._registered

    @registered.setter
    def registered(self, registered):
        """Sets the registered of this DeviceAvailability.


        :param registered: The registered of this DeviceAvailability.
        :type registered: float
        """
        if registered is None:
            raise ValueError("Invalid value for `registered`, must not be `None`")

        self._registered = registered
