# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiTokensCreateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, scope: List[str]=None):
        """ApiTokensCreateRequest - a model defined in OpenAPI

        :param description: The description of this ApiTokensCreateRequest.
        :param scope: The scope of this ApiTokensCreateRequest.
        """
        self.openapi_types = {
            'description': str,
            'scope': List[str]
        }

        self.attribute_map = {
            'description': 'description',
            'scope': 'scope'
        }

        self._description = description
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiTokensCreateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiTokensCreateRequest of this ApiTokensCreateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ApiTokensCreateRequest.

        The description of the token

        :return: The description of this ApiTokensCreateRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiTokensCreateRequest.

        The description of the token

        :param description: The description of this ApiTokensCreateRequest.
        :type description: str
        """

        self._description = description

    @property
    def scope(self):
        """Gets the scope of this ApiTokensCreateRequest.

        The scope for this token.

        :return: The scope of this ApiTokensCreateRequest.
        :rtype: List[str]
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this ApiTokensCreateRequest.

        The scope for this token.

        :param scope: The scope of this ApiTokensCreateRequest.
        :type scope: List[str]
        """
        allowed_values = ["all", "viewer"]  # noqa: E501
        if not set(scope).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `scope` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(scope) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._scope = scope
