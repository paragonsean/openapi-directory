# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CodePushReleaseInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, is_disabled: bool=None, is_mandatory: bool=None, rollout: int=None, target_binary_range: str=None):
        """CodePushReleaseInfo - a model defined in OpenAPI

        :param description: The description of this CodePushReleaseInfo.
        :param is_disabled: The is_disabled of this CodePushReleaseInfo.
        :param is_mandatory: The is_mandatory of this CodePushReleaseInfo.
        :param rollout: The rollout of this CodePushReleaseInfo.
        :param target_binary_range: The target_binary_range of this CodePushReleaseInfo.
        """
        self.openapi_types = {
            'description': str,
            'is_disabled': bool,
            'is_mandatory': bool,
            'rollout': int,
            'target_binary_range': str
        }

        self.attribute_map = {
            'description': 'description',
            'is_disabled': 'is_disabled',
            'is_mandatory': 'is_mandatory',
            'rollout': 'rollout',
            'target_binary_range': 'target_binary_range'
        }

        self._description = description
        self._is_disabled = is_disabled
        self._is_mandatory = is_mandatory
        self._rollout = rollout
        self._target_binary_range = target_binary_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodePushReleaseInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodePushReleaseInfo of this CodePushReleaseInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CodePushReleaseInfo.


        :return: The description of this CodePushReleaseInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CodePushReleaseInfo.


        :param description: The description of this CodePushReleaseInfo.
        :type description: str
        """

        self._description = description

    @property
    def is_disabled(self):
        """Gets the is_disabled of this CodePushReleaseInfo.


        :return: The is_disabled of this CodePushReleaseInfo.
        :rtype: bool
        """
        return self._is_disabled

    @is_disabled.setter
    def is_disabled(self, is_disabled):
        """Sets the is_disabled of this CodePushReleaseInfo.


        :param is_disabled: The is_disabled of this CodePushReleaseInfo.
        :type is_disabled: bool
        """

        self._is_disabled = is_disabled

    @property
    def is_mandatory(self):
        """Gets the is_mandatory of this CodePushReleaseInfo.


        :return: The is_mandatory of this CodePushReleaseInfo.
        :rtype: bool
        """
        return self._is_mandatory

    @is_mandatory.setter
    def is_mandatory(self, is_mandatory):
        """Sets the is_mandatory of this CodePushReleaseInfo.


        :param is_mandatory: The is_mandatory of this CodePushReleaseInfo.
        :type is_mandatory: bool
        """

        self._is_mandatory = is_mandatory

    @property
    def rollout(self):
        """Gets the rollout of this CodePushReleaseInfo.


        :return: The rollout of this CodePushReleaseInfo.
        :rtype: int
        """
        return self._rollout

    @rollout.setter
    def rollout(self, rollout):
        """Sets the rollout of this CodePushReleaseInfo.


        :param rollout: The rollout of this CodePushReleaseInfo.
        :type rollout: int
        """
        if rollout is not None and rollout > 100:
            raise ValueError("Invalid value for `rollout`, must be a value less than or equal to `100`")
        if rollout is not None and rollout < 1:
            raise ValueError("Invalid value for `rollout`, must be a value greater than or equal to `1`")

        self._rollout = rollout

    @property
    def target_binary_range(self):
        """Gets the target_binary_range of this CodePushReleaseInfo.


        :return: The target_binary_range of this CodePushReleaseInfo.
        :rtype: str
        """
        return self._target_binary_range

    @target_binary_range.setter
    def target_binary_range(self, target_binary_range):
        """Sets the target_binary_range of this CodePushReleaseInfo.


        :param target_binary_range: The target_binary_range of this CodePushReleaseInfo.
        :type target_binary_range: str
        """

        self._target_binary_range = target_binary_range
