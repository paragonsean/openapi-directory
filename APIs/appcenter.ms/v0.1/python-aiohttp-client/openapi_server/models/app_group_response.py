# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppGroupResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, group_id: str=None, id: str=None, name: str=None, os: str=None, platform: str=None, release_type: str=None):
        """AppGroupResponse - a model defined in OpenAPI

        :param display_name: The display_name of this AppGroupResponse.
        :param group_id: The group_id of this AppGroupResponse.
        :param id: The id of this AppGroupResponse.
        :param name: The name of this AppGroupResponse.
        :param os: The os of this AppGroupResponse.
        :param platform: The platform of this AppGroupResponse.
        :param release_type: The release_type of this AppGroupResponse.
        """
        self.openapi_types = {
            'display_name': str,
            'group_id': str,
            'id': str,
            'name': str,
            'os': str,
            'platform': str,
            'release_type': str
        }

        self.attribute_map = {
            'display_name': 'display_name',
            'group_id': 'group_id',
            'id': 'id',
            'name': 'name',
            'os': 'os',
            'platform': 'platform',
            'release_type': 'release_type'
        }

        self._display_name = display_name
        self._group_id = group_id
        self._id = id
        self._name = name
        self._os = os
        self._platform = platform
        self._release_type = release_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppGroupResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppGroupResponse of this AppGroupResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this AppGroupResponse.

        The display name of the app

        :return: The display_name of this AppGroupResponse.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AppGroupResponse.

        The display name of the app

        :param display_name: The display_name of this AppGroupResponse.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def group_id(self):
        """Gets the group_id of this AppGroupResponse.

        The unique ID (UUID) of the group that the app belongs to

        :return: The group_id of this AppGroupResponse.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this AppGroupResponse.

        The unique ID (UUID) of the group that the app belongs to

        :param group_id: The group_id of this AppGroupResponse.
        :type group_id: str
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")

        self._group_id = group_id

    @property
    def id(self):
        """Gets the id of this AppGroupResponse.

        The unique ID (UUID) of the app

        :return: The id of this AppGroupResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppGroupResponse.

        The unique ID (UUID) of the app

        :param id: The id of this AppGroupResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this AppGroupResponse.

        The name of the app used in URLs

        :return: The name of this AppGroupResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AppGroupResponse.

        The name of the app used in URLs

        :param name: The name of this AppGroupResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def os(self):
        """Gets the os of this AppGroupResponse.

        The OS the app will be running on

        :return: The os of this AppGroupResponse.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this AppGroupResponse.

        The OS the app will be running on

        :param os: The os of this AppGroupResponse.
        :type os: str
        """
        allowed_values = ["Android", "iOS", "macOS", "Tizen", "tvOS", "Windows", "Linux", "Custom"]  # noqa: E501
        if os not in allowed_values:
            raise ValueError(
                "Invalid value for `os` ({0}), must be one of {1}"
                .format(os, allowed_values)
            )

        self._os = os

    @property
    def platform(self):
        """Gets the platform of this AppGroupResponse.

        The platform of the app

        :return: The platform of this AppGroupResponse.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this AppGroupResponse.

        The platform of the app

        :param platform: The platform of this AppGroupResponse.
        :type platform: str
        """
        allowed_values = ["Java", "Objective-C-Swift", "UWP", "Cordova", "React-Native", "Unity", "Electron", "Xamarin", "WPF", "WinForms", "Unknown", "Custom"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def release_type(self):
        """Gets the release_type of this AppGroupResponse.

        A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase

        :return: The release_type of this AppGroupResponse.
        :rtype: str
        """
        return self._release_type

    @release_type.setter
    def release_type(self, release_type):
        """Sets the release_type of this AppGroupResponse.

        A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase

        :param release_type: The release_type of this AppGroupResponse.
        :type release_type: str
        """

        self._release_type = release_type
