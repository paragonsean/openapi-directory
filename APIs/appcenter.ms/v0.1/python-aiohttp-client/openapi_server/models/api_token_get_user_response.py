# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiTokenGetUserResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, token_id: str=None, token_scope: List[str]=None, user_email: str=None, user_id: str=None, user_origin: str=None):
        """ApiTokenGetUserResponse - a model defined in OpenAPI

        :param token_id: The token_id of this ApiTokenGetUserResponse.
        :param token_scope: The token_scope of this ApiTokenGetUserResponse.
        :param user_email: The user_email of this ApiTokenGetUserResponse.
        :param user_id: The user_id of this ApiTokenGetUserResponse.
        :param user_origin: The user_origin of this ApiTokenGetUserResponse.
        """
        self.openapi_types = {
            'token_id': str,
            'token_scope': List[str],
            'user_email': str,
            'user_id': str,
            'user_origin': str
        }

        self.attribute_map = {
            'token_id': 'token_id',
            'token_scope': 'token_scope',
            'user_email': 'user_email',
            'user_id': 'user_id',
            'user_origin': 'user_origin'
        }

        self._token_id = token_id
        self._token_scope = token_scope
        self._user_email = user_email
        self._user_id = user_id
        self._user_origin = user_origin

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiTokenGetUserResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiTokenGetUserResponse of this ApiTokenGetUserResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token_id(self):
        """Gets the token_id of this ApiTokenGetUserResponse.

        The token's unique id (UUID)

        :return: The token_id of this ApiTokenGetUserResponse.
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this ApiTokenGetUserResponse.

        The token's unique id (UUID)

        :param token_id: The token_id of this ApiTokenGetUserResponse.
        :type token_id: str
        """
        if token_id is None:
            raise ValueError("Invalid value for `token_id`, must not be `None`")

        self._token_id = token_id

    @property
    def token_scope(self):
        """Gets the token_scope of this ApiTokenGetUserResponse.

        The token's scope. A list of allowed roles.

        :return: The token_scope of this ApiTokenGetUserResponse.
        :rtype: List[str]
        """
        return self._token_scope

    @token_scope.setter
    def token_scope(self, token_scope):
        """Sets the token_scope of this ApiTokenGetUserResponse.

        The token's scope. A list of allowed roles.

        :param token_scope: The token_scope of this ApiTokenGetUserResponse.
        :type token_scope: List[str]
        """
        allowed_values = ["all", "in_app_update", "viewer"]  # noqa: E501
        if not set(token_scope).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `token_scope` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(token_scope) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._token_scope = token_scope

    @property
    def user_email(self):
        """Gets the user_email of this ApiTokenGetUserResponse.

        The user email

        :return: The user_email of this ApiTokenGetUserResponse.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this ApiTokenGetUserResponse.

        The user email

        :param user_email: The user_email of this ApiTokenGetUserResponse.
        :type user_email: str
        """
        if user_email is None:
            raise ValueError("Invalid value for `user_email`, must not be `None`")

        self._user_email = user_email

    @property
    def user_id(self):
        """Gets the user_id of this ApiTokenGetUserResponse.

        The unique id (UUID) of the user

        :return: The user_id of this ApiTokenGetUserResponse.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ApiTokenGetUserResponse.

        The unique id (UUID) of the user

        :param user_id: The user_id of this ApiTokenGetUserResponse.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id

    @property
    def user_origin(self):
        """Gets the user_origin of this ApiTokenGetUserResponse.

        The creation origin of the user who created this api token

        :return: The user_origin of this ApiTokenGetUserResponse.
        :rtype: str
        """
        return self._user_origin

    @user_origin.setter
    def user_origin(self, user_origin):
        """Sets the user_origin of this ApiTokenGetUserResponse.

        The creation origin of the user who created this api token

        :param user_origin: The user_origin of this ApiTokenGetUserResponse.
        :type user_origin: str
        """
        allowed_values = ["appcenter", "hockeyapp", "codepush"]  # noqa: E501
        if user_origin not in allowed_values:
            raise ValueError(
                "Invalid value for `user_origin` ({0}), must be one of {1}"
                .format(user_origin, allowed_values)
            )

        self._user_origin = user_origin
