# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataSubjectRightOperation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, context: str=None, operation_id: str=None, participant: str=None, participant_data: str=None, request_id: str=None, request_type: str=None, status: str=None):
        """DataSubjectRightOperation - a model defined in OpenAPI

        :param app_id: The app_id of this DataSubjectRightOperation.
        :param context: The context of this DataSubjectRightOperation.
        :param operation_id: The operation_id of this DataSubjectRightOperation.
        :param participant: The participant of this DataSubjectRightOperation.
        :param participant_data: The participant_data of this DataSubjectRightOperation.
        :param request_id: The request_id of this DataSubjectRightOperation.
        :param request_type: The request_type of this DataSubjectRightOperation.
        :param status: The status of this DataSubjectRightOperation.
        """
        self.openapi_types = {
            'app_id': str,
            'context': str,
            'operation_id': str,
            'participant': str,
            'participant_data': str,
            'request_id': str,
            'request_type': str,
            'status': str
        }

        self.attribute_map = {
            'app_id': 'appId',
            'context': 'context',
            'operation_id': 'operationId',
            'participant': 'participant',
            'participant_data': 'participantData',
            'request_id': 'requestId',
            'request_type': 'requestType',
            'status': 'status'
        }

        self._app_id = app_id
        self._context = context
        self._operation_id = operation_id
        self._participant = participant
        self._participant_data = participant_data
        self._request_id = request_id
        self._request_type = request_type
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataSubjectRightOperation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataSubjectRightOperation of this DataSubjectRightOperation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this DataSubjectRightOperation.

        Application identifier if applicable

        :return: The app_id of this DataSubjectRightOperation.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this DataSubjectRightOperation.

        Application identifier if applicable

        :param app_id: The app_id of this DataSubjectRightOperation.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def context(self):
        """Gets the context of this DataSubjectRightOperation.

        JSON object decribing what to delete (TODO - make separate definition?)

        :return: The context of this DataSubjectRightOperation.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this DataSubjectRightOperation.

        JSON object decribing what to delete (TODO - make separate definition?)

        :param context: The context of this DataSubjectRightOperation.
        :type context: str
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")

        self._context = context

    @property
    def operation_id(self):
        """Gets the operation_id of this DataSubjectRightOperation.

        Unique operation identifier

        :return: The operation_id of this DataSubjectRightOperation.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this DataSubjectRightOperation.

        Unique operation identifier

        :param operation_id: The operation_id of this DataSubjectRightOperation.
        :type operation_id: str
        """
        if operation_id is None:
            raise ValueError("Invalid value for `operation_id`, must not be `None`")

        self._operation_id = operation_id

    @property
    def participant(self):
        """Gets the participant of this DataSubjectRightOperation.

        Participant to execute the response

        :return: The participant of this DataSubjectRightOperation.
        :rtype: str
        """
        return self._participant

    @participant.setter
    def participant(self, participant):
        """Sets the participant of this DataSubjectRightOperation.

        Participant to execute the response

        :param participant: The participant of this DataSubjectRightOperation.
        :type participant: str
        """
        if participant is None:
            raise ValueError("Invalid value for `participant`, must not be `None`")

        self._participant = participant

    @property
    def participant_data(self):
        """Gets the participant_data of this DataSubjectRightOperation.

        String field to be used by participant for any intermediate statuses or data they need to save

        :return: The participant_data of this DataSubjectRightOperation.
        :rtype: str
        """
        return self._participant_data

    @participant_data.setter
    def participant_data(self, participant_data):
        """Sets the participant_data of this DataSubjectRightOperation.

        String field to be used by participant for any intermediate statuses or data they need to save

        :param participant_data: The participant_data of this DataSubjectRightOperation.
        :type participant_data: str
        """

        self._participant_data = participant_data

    @property
    def request_id(self):
        """Gets the request_id of this DataSubjectRightOperation.

        Unique request identifier

        :return: The request_id of this DataSubjectRightOperation.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this DataSubjectRightOperation.

        Unique request identifier

        :param request_id: The request_id of this DataSubjectRightOperation.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")

        self._request_id = request_id

    @property
    def request_type(self):
        """Gets the request_type of this DataSubjectRightOperation.

        Request type

        :return: The request_type of this DataSubjectRightOperation.
        :rtype: str
        """
        return self._request_type

    @request_type.setter
    def request_type(self, request_type):
        """Sets the request_type of this DataSubjectRightOperation.

        Request type

        :param request_type: The request_type of this DataSubjectRightOperation.
        :type request_type: str
        """
        allowed_values = ["Unsupported", "Delete", "Purge", "UndoDelete", "Scheduled", "AppDelete", "AppPurge", "AppUndoDelete", "Export", "CustomerAccountDelete", "CustomerAccountExport", "CustomerUserDelete", "CustomerUserExport"]  # noqa: E501
        if request_type not in allowed_values:
            raise ValueError(
                "Invalid value for `request_type` ({0}), must be one of {1}"
                .format(request_type, allowed_values)
            )

        self._request_type = request_type

    @property
    def status(self):
        """Gets the status of this DataSubjectRightOperation.

        Operation status

        :return: The status of this DataSubjectRightOperation.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DataSubjectRightOperation.

        Operation status

        :param status: The status of this DataSubjectRightOperation.
        :type status: str
        """
        allowed_values = ["None", "Created", "Queued", "InProgress", "Completed", "Failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
