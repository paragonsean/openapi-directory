# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppUserPermissionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, app_origin: str=None, app_secret: str=None, permissions: List[str]=None, user_email: str=None, user_id: str=None):
        """AppUserPermissionResponse - a model defined in OpenAPI

        :param app_id: The app_id of this AppUserPermissionResponse.
        :param app_origin: The app_origin of this AppUserPermissionResponse.
        :param app_secret: The app_secret of this AppUserPermissionResponse.
        :param permissions: The permissions of this AppUserPermissionResponse.
        :param user_email: The user_email of this AppUserPermissionResponse.
        :param user_id: The user_id of this AppUserPermissionResponse.
        """
        self.openapi_types = {
            'app_id': str,
            'app_origin': str,
            'app_secret': str,
            'permissions': List[str],
            'user_email': str,
            'user_id': str
        }

        self.attribute_map = {
            'app_id': 'app_id',
            'app_origin': 'app_origin',
            'app_secret': 'app_secret',
            'permissions': 'permissions',
            'user_email': 'user_email',
            'user_id': 'user_id'
        }

        self._app_id = app_id
        self._app_origin = app_origin
        self._app_secret = app_secret
        self._permissions = permissions
        self._user_email = user_email
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppUserPermissionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppUserPermissionResponse of this AppUserPermissionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this AppUserPermissionResponse.

        The unique id (UUID) of the app

        :return: The app_id of this AppUserPermissionResponse.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this AppUserPermissionResponse.

        The unique id (UUID) of the app

        :param app_id: The app_id of this AppUserPermissionResponse.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def app_origin(self):
        """Gets the app_origin of this AppUserPermissionResponse.

        The creation origin of this app

        :return: The app_origin of this AppUserPermissionResponse.
        :rtype: str
        """
        return self._app_origin

    @app_origin.setter
    def app_origin(self, app_origin):
        """Sets the app_origin of this AppUserPermissionResponse.

        The creation origin of this app

        :param app_origin: The app_origin of this AppUserPermissionResponse.
        :type app_origin: str
        """
        allowed_values = ["appcenter", "codepush"]  # noqa: E501
        if app_origin not in allowed_values:
            raise ValueError(
                "Invalid value for `app_origin` ({0}), must be one of {1}"
                .format(app_origin, allowed_values)
            )

        self._app_origin = app_origin

    @property
    def app_secret(self):
        """Gets the app_secret of this AppUserPermissionResponse.

        A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics

        :return: The app_secret of this AppUserPermissionResponse.
        :rtype: str
        """
        return self._app_secret

    @app_secret.setter
    def app_secret(self, app_secret):
        """Sets the app_secret of this AppUserPermissionResponse.

        A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics

        :param app_secret: The app_secret of this AppUserPermissionResponse.
        :type app_secret: str
        """
        if app_secret is None:
            raise ValueError("Invalid value for `app_secret`, must not be `None`")

        self._app_secret = app_secret

    @property
    def permissions(self):
        """Gets the permissions of this AppUserPermissionResponse.

        The permissions the user has for the app

        :return: The permissions of this AppUserPermissionResponse.
        :rtype: List[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this AppUserPermissionResponse.

        The permissions the user has for the app

        :param permissions: The permissions of this AppUserPermissionResponse.
        :type permissions: List[str]
        """
        allowed_values = ["manager", "developer", "viewer", "tester"]  # noqa: E501
        if not set(permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `permissions` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(permissions) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._permissions = permissions

    @property
    def user_email(self):
        """Gets the user_email of this AppUserPermissionResponse.

        The email of the user

        :return: The user_email of this AppUserPermissionResponse.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this AppUserPermissionResponse.

        The email of the user

        :param user_email: The user_email of this AppUserPermissionResponse.
        :type user_email: str
        """
        if user_email is None:
            raise ValueError("Invalid value for `user_email`, must not be `None`")

        self._user_email = user_email

    @property
    def user_id(self):
        """Gets the user_id of this AppUserPermissionResponse.

        The unique id (UUID) of the user

        :return: The user_id of this AppUserPermissionResponse.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AppUserPermissionResponse.

        The unique id (UUID) of the user

        :param user_id: The user_id of this AppUserPermissionResponse.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
