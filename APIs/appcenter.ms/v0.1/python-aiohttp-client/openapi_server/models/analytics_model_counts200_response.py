# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analytics_model_counts200_response_models_inner import AnalyticsModelCounts200ResponseModelsInner
from openapi_server import util


class AnalyticsModelCounts200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, models: List[AnalyticsModelCounts200ResponseModelsInner]=None, total: int=None):
        """AnalyticsModelCounts200Response - a model defined in OpenAPI

        :param models: The models of this AnalyticsModelCounts200Response.
        :param total: The total of this AnalyticsModelCounts200Response.
        """
        self.openapi_types = {
            'models': List[AnalyticsModelCounts200ResponseModelsInner],
            'total': int
        }

        self.attribute_map = {
            'models': 'models',
            'total': 'total'
        }

        self._models = models
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyticsModelCounts200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Analytics_ModelCounts_200_response of this AnalyticsModelCounts200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def models(self):
        """Gets the models of this AnalyticsModelCounts200Response.


        :return: The models of this AnalyticsModelCounts200Response.
        :rtype: List[AnalyticsModelCounts200ResponseModelsInner]
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this AnalyticsModelCounts200Response.


        :param models: The models of this AnalyticsModelCounts200Response.
        :type models: List[AnalyticsModelCounts200ResponseModelsInner]
        """

        self._models = models

    @property
    def total(self):
        """Gets the total of this AnalyticsModelCounts200Response.


        :return: The total of this AnalyticsModelCounts200Response.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this AnalyticsModelCounts200Response.


        :param total: The total of this AnalyticsModelCounts200Response.
        :type total: int
        """

        self._total = total
