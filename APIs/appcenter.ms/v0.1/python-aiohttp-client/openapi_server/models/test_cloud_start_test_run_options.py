# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestCloudStartTestRunOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_selection: str=None, language: str=None, locale: str=None, test_framework: str=None, test_parameters: object=None, test_series: str=None):
        """TestCloudStartTestRunOptions - a model defined in OpenAPI

        :param device_selection: The device_selection of this TestCloudStartTestRunOptions.
        :param language: The language of this TestCloudStartTestRunOptions.
        :param locale: The locale of this TestCloudStartTestRunOptions.
        :param test_framework: The test_framework of this TestCloudStartTestRunOptions.
        :param test_parameters: The test_parameters of this TestCloudStartTestRunOptions.
        :param test_series: The test_series of this TestCloudStartTestRunOptions.
        """
        self.openapi_types = {
            'device_selection': str,
            'language': str,
            'locale': str,
            'test_framework': str,
            'test_parameters': object,
            'test_series': str
        }

        self.attribute_map = {
            'device_selection': 'device_selection',
            'language': 'language',
            'locale': 'locale',
            'test_framework': 'test_framework',
            'test_parameters': 'test_parameters',
            'test_series': 'test_series'
        }

        self._device_selection = device_selection
        self._language = language
        self._locale = locale
        self._test_framework = test_framework
        self._test_parameters = test_parameters
        self._test_series = test_series

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestCloudStartTestRunOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Test_Cloud_Start_Test_Run_Options of this TestCloudStartTestRunOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_selection(self):
        """Gets the device_selection of this TestCloudStartTestRunOptions.

        Device selection string.

        :return: The device_selection of this TestCloudStartTestRunOptions.
        :rtype: str
        """
        return self._device_selection

    @device_selection.setter
    def device_selection(self, device_selection):
        """Sets the device_selection of this TestCloudStartTestRunOptions.

        Device selection string.

        :param device_selection: The device_selection of this TestCloudStartTestRunOptions.
        :type device_selection: str
        """
        if device_selection is None:
            raise ValueError("Invalid value for `device_selection`, must not be `None`")

        self._device_selection = device_selection

    @property
    def language(self):
        """Gets the language of this TestCloudStartTestRunOptions.

        Language that should be used to run tests.

        :return: The language of this TestCloudStartTestRunOptions.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this TestCloudStartTestRunOptions.

        Language that should be used to run tests.

        :param language: The language of this TestCloudStartTestRunOptions.
        :type language: str
        """

        self._language = language

    @property
    def locale(self):
        """Gets the locale of this TestCloudStartTestRunOptions.

        Locale that should be used to run tests.

        :return: The locale of this TestCloudStartTestRunOptions.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this TestCloudStartTestRunOptions.

        Locale that should be used to run tests.

        :param locale: The locale of this TestCloudStartTestRunOptions.
        :type locale: str
        """

        self._locale = locale

    @property
    def test_framework(self):
        """Gets the test_framework of this TestCloudStartTestRunOptions.

        Test framework used by tests.

        :return: The test_framework of this TestCloudStartTestRunOptions.
        :rtype: str
        """
        return self._test_framework

    @test_framework.setter
    def test_framework(self, test_framework):
        """Sets the test_framework of this TestCloudStartTestRunOptions.

        Test framework used by tests.

        :param test_framework: The test_framework of this TestCloudStartTestRunOptions.
        :type test_framework: str
        """
        if test_framework is None:
            raise ValueError("Invalid value for `test_framework`, must not be `None`")

        self._test_framework = test_framework

    @property
    def test_parameters(self):
        """Gets the test_parameters of this TestCloudStartTestRunOptions.

        A JSON dictionary with additional test parameters

        :return: The test_parameters of this TestCloudStartTestRunOptions.
        :rtype: object
        """
        return self._test_parameters

    @test_parameters.setter
    def test_parameters(self, test_parameters):
        """Sets the test_parameters of this TestCloudStartTestRunOptions.

        A JSON dictionary with additional test parameters

        :param test_parameters: The test_parameters of this TestCloudStartTestRunOptions.
        :type test_parameters: object
        """

        self._test_parameters = test_parameters

    @property
    def test_series(self):
        """Gets the test_series of this TestCloudStartTestRunOptions.

        Name of the test series.

        :return: The test_series of this TestCloudStartTestRunOptions.
        :rtype: str
        """
        return self._test_series

    @test_series.setter
    def test_series(self, test_series):
        """Sets the test_series of this TestCloudStartTestRunOptions.

        Name of the test series.

        :param test_series: The test_series of this TestCloudStartTestRunOptions.
        :type test_series: str
        """

        self._test_series = test_series
