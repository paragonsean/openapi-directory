# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analytics_language_counts200_response_languages_inner import AnalyticsLanguageCounts200ResponseLanguagesInner
from openapi_server import util


class AnalyticsLanguageCounts200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, languages: List[AnalyticsLanguageCounts200ResponseLanguagesInner]=None, total: int=None):
        """AnalyticsLanguageCounts200Response - a model defined in OpenAPI

        :param languages: The languages of this AnalyticsLanguageCounts200Response.
        :param total: The total of this AnalyticsLanguageCounts200Response.
        """
        self.openapi_types = {
            'languages': List[AnalyticsLanguageCounts200ResponseLanguagesInner],
            'total': int
        }

        self.attribute_map = {
            'languages': 'languages',
            'total': 'total'
        }

        self._languages = languages
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyticsLanguageCounts200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Analytics_LanguageCounts_200_response of this AnalyticsLanguageCounts200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def languages(self):
        """Gets the languages of this AnalyticsLanguageCounts200Response.


        :return: The languages of this AnalyticsLanguageCounts200Response.
        :rtype: List[AnalyticsLanguageCounts200ResponseLanguagesInner]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this AnalyticsLanguageCounts200Response.


        :param languages: The languages of this AnalyticsLanguageCounts200Response.
        :type languages: List[AnalyticsLanguageCounts200ResponseLanguagesInner]
        """

        self._languages = languages

    @property
    def total(self):
        """Gets the total of this AnalyticsLanguageCounts200Response.


        :return: The total of this AnalyticsLanguageCounts200Response.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this AnalyticsLanguageCounts200Response.


        :param total: The total of this AnalyticsLanguageCounts200Response.
        :type total: int
        """

        self._total = total
