# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewCrashGroupAlertingEventAllOfCrashGroupProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_display_name: str=None, app_platform: str=None, app_version: str=None, id: str=None, name: str=None, reason: str=None, stack_trace: List[str]=None, url: str=None):
        """NewCrashGroupAlertingEventAllOfCrashGroupProperties - a model defined in OpenAPI

        :param app_display_name: The app_display_name of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.
        :param app_platform: The app_platform of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.
        :param app_version: The app_version of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.
        :param id: The id of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.
        :param name: The name of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.
        :param reason: The reason of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.
        :param stack_trace: The stack_trace of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.
        :param url: The url of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.
        """
        self.openapi_types = {
            'app_display_name': str,
            'app_platform': str,
            'app_version': str,
            'id': str,
            'name': str,
            'reason': str,
            'stack_trace': List[str],
            'url': str
        }

        self.attribute_map = {
            'app_display_name': 'app_display_name',
            'app_platform': 'app_platform',
            'app_version': 'app_version',
            'id': 'id',
            'name': 'name',
            'reason': 'reason',
            'stack_trace': 'stack_trace',
            'url': 'url'
        }

        self._app_display_name = app_display_name
        self._app_platform = app_platform
        self._app_version = app_version
        self._id = id
        self._name = name
        self._reason = reason
        self._stack_trace = stack_trace
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewCrashGroupAlertingEventAllOfCrashGroupProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewCrashGroupAlertingEvent_allOf_crash_group_properties of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_display_name(self):
        """Gets the app_display_name of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.


        :return: The app_display_name of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.
        :rtype: str
        """
        return self._app_display_name

    @app_display_name.setter
    def app_display_name(self, app_display_name):
        """Sets the app_display_name of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.


        :param app_display_name: The app_display_name of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.
        :type app_display_name: str
        """
        if app_display_name is None:
            raise ValueError("Invalid value for `app_display_name`, must not be `None`")

        self._app_display_name = app_display_name

    @property
    def app_platform(self):
        """Gets the app_platform of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.


        :return: The app_platform of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.
        :rtype: str
        """
        return self._app_platform

    @app_platform.setter
    def app_platform(self, app_platform):
        """Sets the app_platform of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.


        :param app_platform: The app_platform of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.
        :type app_platform: str
        """
        if app_platform is None:
            raise ValueError("Invalid value for `app_platform`, must not be `None`")

        self._app_platform = app_platform

    @property
    def app_version(self):
        """Gets the app_version of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.


        :return: The app_version of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.


        :param app_version: The app_version of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.
        :type app_version: str
        """
        if app_version is None:
            raise ValueError("Invalid value for `app_version`, must not be `None`")

        self._app_version = app_version

    @property
    def id(self):
        """Gets the id of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.


        :return: The id of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.


        :param id: The id of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.


        :return: The name of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.


        :param name: The name of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def reason(self):
        """Gets the reason of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.


        :return: The reason of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.


        :param reason: The reason of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.
        :type reason: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")

        self._reason = reason

    @property
    def stack_trace(self):
        """Gets the stack_trace of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.


        :return: The stack_trace of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.
        :rtype: List[str]
        """
        return self._stack_trace

    @stack_trace.setter
    def stack_trace(self, stack_trace):
        """Sets the stack_trace of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.


        :param stack_trace: The stack_trace of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.
        :type stack_trace: List[str]
        """
        if stack_trace is None:
            raise ValueError("Invalid value for `stack_trace`, must not be `None`")

        self._stack_trace = stack_trace

    @property
    def url(self):
        """Gets the url of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.


        :return: The url of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.


        :param url: The url of this NewCrashGroupAlertingEventAllOfCrashGroupProperties.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
