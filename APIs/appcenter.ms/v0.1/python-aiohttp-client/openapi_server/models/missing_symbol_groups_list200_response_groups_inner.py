# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.missing_symbol_groups_list200_response_groups_inner_missing_symbols_inner import MissingSymbolGroupsList200ResponseGroupsInnerMissingSymbolsInner
from openapi_server import util


class MissingSymbolGroupsList200ResponseGroupsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_build: str=None, app_id: str=None, app_ver: str=None, crash_count: int=None, error_count: int=None, last_modified: datetime=None, missing_symbols: List[MissingSymbolGroupsList200ResponseGroupsInnerMissingSymbolsInner]=None, status: str=None, symbol_group_id: str=None):
        """MissingSymbolGroupsList200ResponseGroupsInner - a model defined in OpenAPI

        :param app_build: The app_build of this MissingSymbolGroupsList200ResponseGroupsInner.
        :param app_id: The app_id of this MissingSymbolGroupsList200ResponseGroupsInner.
        :param app_ver: The app_ver of this MissingSymbolGroupsList200ResponseGroupsInner.
        :param crash_count: The crash_count of this MissingSymbolGroupsList200ResponseGroupsInner.
        :param error_count: The error_count of this MissingSymbolGroupsList200ResponseGroupsInner.
        :param last_modified: The last_modified of this MissingSymbolGroupsList200ResponseGroupsInner.
        :param missing_symbols: The missing_symbols of this MissingSymbolGroupsList200ResponseGroupsInner.
        :param status: The status of this MissingSymbolGroupsList200ResponseGroupsInner.
        :param symbol_group_id: The symbol_group_id of this MissingSymbolGroupsList200ResponseGroupsInner.
        """
        self.openapi_types = {
            'app_build': str,
            'app_id': str,
            'app_ver': str,
            'crash_count': int,
            'error_count': int,
            'last_modified': datetime,
            'missing_symbols': List[MissingSymbolGroupsList200ResponseGroupsInnerMissingSymbolsInner],
            'status': str,
            'symbol_group_id': str
        }

        self.attribute_map = {
            'app_build': 'app_build',
            'app_id': 'app_id',
            'app_ver': 'app_ver',
            'crash_count': 'crash_count',
            'error_count': 'error_count',
            'last_modified': 'last_modified',
            'missing_symbols': 'missing_symbols',
            'status': 'status',
            'symbol_group_id': 'symbol_group_id'
        }

        self._app_build = app_build
        self._app_id = app_id
        self._app_ver = app_ver
        self._crash_count = crash_count
        self._error_count = error_count
        self._last_modified = last_modified
        self._missing_symbols = missing_symbols
        self._status = status
        self._symbol_group_id = symbol_group_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MissingSymbolGroupsList200ResponseGroupsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The missingSymbolGroups_list_200_response_groups_inner of this MissingSymbolGroupsList200ResponseGroupsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_build(self):
        """Gets the app_build of this MissingSymbolGroupsList200ResponseGroupsInner.

        application build

        :return: The app_build of this MissingSymbolGroupsList200ResponseGroupsInner.
        :rtype: str
        """
        return self._app_build

    @app_build.setter
    def app_build(self, app_build):
        """Sets the app_build of this MissingSymbolGroupsList200ResponseGroupsInner.

        application build

        :param app_build: The app_build of this MissingSymbolGroupsList200ResponseGroupsInner.
        :type app_build: str
        """
        if app_build is None:
            raise ValueError("Invalid value for `app_build`, must not be `None`")

        self._app_build = app_build

    @property
    def app_id(self):
        """Gets the app_id of this MissingSymbolGroupsList200ResponseGroupsInner.

        application id

        :return: The app_id of this MissingSymbolGroupsList200ResponseGroupsInner.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this MissingSymbolGroupsList200ResponseGroupsInner.

        application id

        :param app_id: The app_id of this MissingSymbolGroupsList200ResponseGroupsInner.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def app_ver(self):
        """Gets the app_ver of this MissingSymbolGroupsList200ResponseGroupsInner.

        application version

        :return: The app_ver of this MissingSymbolGroupsList200ResponseGroupsInner.
        :rtype: str
        """
        return self._app_ver

    @app_ver.setter
    def app_ver(self, app_ver):
        """Sets the app_ver of this MissingSymbolGroupsList200ResponseGroupsInner.

        application version

        :param app_ver: The app_ver of this MissingSymbolGroupsList200ResponseGroupsInner.
        :type app_ver: str
        """
        if app_ver is None:
            raise ValueError("Invalid value for `app_ver`, must not be `None`")

        self._app_ver = app_ver

    @property
    def crash_count(self):
        """Gets the crash_count of this MissingSymbolGroupsList200ResponseGroupsInner.

        number of crashes that belong to this group

        :return: The crash_count of this MissingSymbolGroupsList200ResponseGroupsInner.
        :rtype: int
        """
        return self._crash_count

    @crash_count.setter
    def crash_count(self, crash_count):
        """Sets the crash_count of this MissingSymbolGroupsList200ResponseGroupsInner.

        number of crashes that belong to this group

        :param crash_count: The crash_count of this MissingSymbolGroupsList200ResponseGroupsInner.
        :type crash_count: int
        """

        self._crash_count = crash_count

    @property
    def error_count(self):
        """Gets the error_count of this MissingSymbolGroupsList200ResponseGroupsInner.

        number of errors that belong to this group

        :return: The error_count of this MissingSymbolGroupsList200ResponseGroupsInner.
        :rtype: int
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """Sets the error_count of this MissingSymbolGroupsList200ResponseGroupsInner.

        number of errors that belong to this group

        :param error_count: The error_count of this MissingSymbolGroupsList200ResponseGroupsInner.
        :type error_count: int
        """

        self._error_count = error_count

    @property
    def last_modified(self):
        """Gets the last_modified of this MissingSymbolGroupsList200ResponseGroupsInner.

        last update date for the group

        :return: The last_modified of this MissingSymbolGroupsList200ResponseGroupsInner.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this MissingSymbolGroupsList200ResponseGroupsInner.

        last update date for the group

        :param last_modified: The last_modified of this MissingSymbolGroupsList200ResponseGroupsInner.
        :type last_modified: datetime
        """
        if last_modified is None:
            raise ValueError("Invalid value for `last_modified`, must not be `None`")

        self._last_modified = last_modified

    @property
    def missing_symbols(self):
        """Gets the missing_symbols of this MissingSymbolGroupsList200ResponseGroupsInner.

        list of missing symbols

        :return: The missing_symbols of this MissingSymbolGroupsList200ResponseGroupsInner.
        :rtype: List[MissingSymbolGroupsList200ResponseGroupsInnerMissingSymbolsInner]
        """
        return self._missing_symbols

    @missing_symbols.setter
    def missing_symbols(self, missing_symbols):
        """Sets the missing_symbols of this MissingSymbolGroupsList200ResponseGroupsInner.

        list of missing symbols

        :param missing_symbols: The missing_symbols of this MissingSymbolGroupsList200ResponseGroupsInner.
        :type missing_symbols: List[MissingSymbolGroupsList200ResponseGroupsInnerMissingSymbolsInner]
        """
        if missing_symbols is None:
            raise ValueError("Invalid value for `missing_symbols`, must not be `None`")

        self._missing_symbols = missing_symbols

    @property
    def status(self):
        """Gets the status of this MissingSymbolGroupsList200ResponseGroupsInner.

        group status

        :return: The status of this MissingSymbolGroupsList200ResponseGroupsInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MissingSymbolGroupsList200ResponseGroupsInner.

        group status

        :param status: The status of this MissingSymbolGroupsList200ResponseGroupsInner.
        :type status: str
        """
        allowed_values = ["active", "pending", "closed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def symbol_group_id(self):
        """Gets the symbol_group_id of this MissingSymbolGroupsList200ResponseGroupsInner.

        id of the symbol group

        :return: The symbol_group_id of this MissingSymbolGroupsList200ResponseGroupsInner.
        :rtype: str
        """
        return self._symbol_group_id

    @symbol_group_id.setter
    def symbol_group_id(self, symbol_group_id):
        """Sets the symbol_group_id of this MissingSymbolGroupsList200ResponseGroupsInner.

        id of the symbol group

        :param symbol_group_id: The symbol_group_id of this MissingSymbolGroupsList200ResponseGroupsInner.
        :type symbol_group_id: str
        """
        if symbol_group_id is None:
            raise ValueError("Invalid value for `symbol_group_id`, must not be `None`")

        self._symbol_group_id = symbol_group_id
