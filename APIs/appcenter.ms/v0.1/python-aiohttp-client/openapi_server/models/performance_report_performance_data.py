# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.performance_report_performance_data_steps_inner import PerformanceReportPerformanceDataStepsInner
from openapi_server import util


class PerformanceReportPerformanceData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, elapsed_secs: float=None, elapsed_secs_end: float=None, elapsed_secs_start: float=None, id: str=None, steps: List[PerformanceReportPerformanceDataStepsInner]=None):
        """PerformanceReportPerformanceData - a model defined in OpenAPI

        :param elapsed_secs: The elapsed_secs of this PerformanceReportPerformanceData.
        :param elapsed_secs_end: The elapsed_secs_end of this PerformanceReportPerformanceData.
        :param elapsed_secs_start: The elapsed_secs_start of this PerformanceReportPerformanceData.
        :param id: The id of this PerformanceReportPerformanceData.
        :param steps: The steps of this PerformanceReportPerformanceData.
        """
        self.openapi_types = {
            'elapsed_secs': float,
            'elapsed_secs_end': float,
            'elapsed_secs_start': float,
            'id': str,
            'steps': List[PerformanceReportPerformanceDataStepsInner]
        }

        self.attribute_map = {
            'elapsed_secs': 'elapsed-secs',
            'elapsed_secs_end': 'elapsed-secs-end',
            'elapsed_secs_start': 'elapsed-secs-start',
            'id': 'id',
            'steps': 'steps'
        }

        self._elapsed_secs = elapsed_secs
        self._elapsed_secs_end = elapsed_secs_end
        self._elapsed_secs_start = elapsed_secs_start
        self._id = id
        self._steps = steps

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PerformanceReportPerformanceData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PerformanceReport_performance_data of this PerformanceReportPerformanceData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def elapsed_secs(self):
        """Gets the elapsed_secs of this PerformanceReportPerformanceData.


        :return: The elapsed_secs of this PerformanceReportPerformanceData.
        :rtype: float
        """
        return self._elapsed_secs

    @elapsed_secs.setter
    def elapsed_secs(self, elapsed_secs):
        """Sets the elapsed_secs of this PerformanceReportPerformanceData.


        :param elapsed_secs: The elapsed_secs of this PerformanceReportPerformanceData.
        :type elapsed_secs: float
        """
        if elapsed_secs is None:
            raise ValueError("Invalid value for `elapsed_secs`, must not be `None`")

        self._elapsed_secs = elapsed_secs

    @property
    def elapsed_secs_end(self):
        """Gets the elapsed_secs_end of this PerformanceReportPerformanceData.


        :return: The elapsed_secs_end of this PerformanceReportPerformanceData.
        :rtype: float
        """
        return self._elapsed_secs_end

    @elapsed_secs_end.setter
    def elapsed_secs_end(self, elapsed_secs_end):
        """Sets the elapsed_secs_end of this PerformanceReportPerformanceData.


        :param elapsed_secs_end: The elapsed_secs_end of this PerformanceReportPerformanceData.
        :type elapsed_secs_end: float
        """
        if elapsed_secs_end is None:
            raise ValueError("Invalid value for `elapsed_secs_end`, must not be `None`")

        self._elapsed_secs_end = elapsed_secs_end

    @property
    def elapsed_secs_start(self):
        """Gets the elapsed_secs_start of this PerformanceReportPerformanceData.


        :return: The elapsed_secs_start of this PerformanceReportPerformanceData.
        :rtype: float
        """
        return self._elapsed_secs_start

    @elapsed_secs_start.setter
    def elapsed_secs_start(self, elapsed_secs_start):
        """Sets the elapsed_secs_start of this PerformanceReportPerformanceData.


        :param elapsed_secs_start: The elapsed_secs_start of this PerformanceReportPerformanceData.
        :type elapsed_secs_start: float
        """
        if elapsed_secs_start is None:
            raise ValueError("Invalid value for `elapsed_secs_start`, must not be `None`")

        self._elapsed_secs_start = elapsed_secs_start

    @property
    def id(self):
        """Gets the id of this PerformanceReportPerformanceData.


        :return: The id of this PerformanceReportPerformanceData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PerformanceReportPerformanceData.


        :param id: The id of this PerformanceReportPerformanceData.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def steps(self):
        """Gets the steps of this PerformanceReportPerformanceData.


        :return: The steps of this PerformanceReportPerformanceData.
        :rtype: List[PerformanceReportPerformanceDataStepsInner]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this PerformanceReportPerformanceData.


        :param steps: The steps of this PerformanceReportPerformanceData.
        :type steps: List[PerformanceReportPerformanceDataStepsInner]
        """
        if steps is None:
            raise ValueError("Invalid value for `steps`, must not be `None`")

        self._steps = steps
