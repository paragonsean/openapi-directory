# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analytics_events200_response_events_inner import AnalyticsEvents200ResponseEventsInner
from openapi_server import util


class Events(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, events: List[AnalyticsEvents200ResponseEventsInner]=None, total: int=None, total_devices: int=None):
        """Events - a model defined in OpenAPI

        :param events: The events of this Events.
        :param total: The total of this Events.
        :param total_devices: The total_devices of this Events.
        """
        self.openapi_types = {
            'events': List[AnalyticsEvents200ResponseEventsInner],
            'total': int,
            'total_devices': int
        }

        self.attribute_map = {
            'events': 'events',
            'total': 'total',
            'total_devices': 'total_devices'
        }

        self._events = events
        self._total = total
        self._total_devices = total_devices

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Events':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Events of this Events.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def events(self):
        """Gets the events of this Events.


        :return: The events of this Events.
        :rtype: List[AnalyticsEvents200ResponseEventsInner]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this Events.


        :param events: The events of this Events.
        :type events: List[AnalyticsEvents200ResponseEventsInner]
        """

        self._events = events

    @property
    def total(self):
        """Gets the total of this Events.

        The total count of events.

        :return: The total of this Events.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Events.

        The total count of events.

        :param total: The total of this Events.
        :type total: int
        """

        self._total = total

    @property
    def total_devices(self):
        """Gets the total_devices of this Events.

        The active device over this period.

        :return: The total_devices of this Events.
        :rtype: int
        """
        return self._total_devices

    @total_devices.setter
    def total_devices(self, total_devices):
        """Sets the total_devices of this Events.

        The active device over this period.

        :param total_devices: The total_devices of this Events.
        :type total_devices: int
        """

        self._total_devices = total_devices
