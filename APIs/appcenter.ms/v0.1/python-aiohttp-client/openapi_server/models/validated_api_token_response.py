# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.validated_api_token_response_claims_inner import ValidatedApiTokenResponseClaimsInner
from openapi_server import util


class ValidatedApiTokenResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, claims: List[ValidatedApiTokenResponseClaimsInner]=None, principal_id: str=None, principal_type: str=None, token_id: str=None, token_scope: List[str]=None):
        """ValidatedApiTokenResponse - a model defined in OpenAPI

        :param claims: The claims of this ValidatedApiTokenResponse.
        :param principal_id: The principal_id of this ValidatedApiTokenResponse.
        :param principal_type: The principal_type of this ValidatedApiTokenResponse.
        :param token_id: The token_id of this ValidatedApiTokenResponse.
        :param token_scope: The token_scope of this ValidatedApiTokenResponse.
        """
        self.openapi_types = {
            'claims': List[ValidatedApiTokenResponseClaimsInner],
            'principal_id': str,
            'principal_type': str,
            'token_id': str,
            'token_scope': List[str]
        }

        self.attribute_map = {
            'claims': 'claims',
            'principal_id': 'principal_id',
            'principal_type': 'principal_type',
            'token_id': 'token_id',
            'token_scope': 'token_scope'
        }

        self._claims = claims
        self._principal_id = principal_id
        self._principal_type = principal_type
        self._token_id = token_id
        self._token_scope = token_scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValidatedApiTokenResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValidatedApiTokenResponse of this ValidatedApiTokenResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def claims(self):
        """Gets the claims of this ValidatedApiTokenResponse.

        Collection of attributes that describe the principal of the specified API Token

        :return: The claims of this ValidatedApiTokenResponse.
        :rtype: List[ValidatedApiTokenResponseClaimsInner]
        """
        return self._claims

    @claims.setter
    def claims(self, claims):
        """Sets the claims of this ValidatedApiTokenResponse.

        Collection of attributes that describe the principal of the specified API Token

        :param claims: The claims of this ValidatedApiTokenResponse.
        :type claims: List[ValidatedApiTokenResponseClaimsInner]
        """
        if claims is None:
            raise ValueError("Invalid value for `claims`, must not be `None`")

        self._claims = claims

    @property
    def principal_id(self):
        """Gets the principal_id of this ValidatedApiTokenResponse.

        The ID of the owner of the API Token (user_id or app_id)

        :return: The principal_id of this ValidatedApiTokenResponse.
        :rtype: str
        """
        return self._principal_id

    @principal_id.setter
    def principal_id(self, principal_id):
        """Sets the principal_id of this ValidatedApiTokenResponse.

        The ID of the owner of the API Token (user_id or app_id)

        :param principal_id: The principal_id of this ValidatedApiTokenResponse.
        :type principal_id: str
        """
        if principal_id is None:
            raise ValueError("Invalid value for `principal_id`, must not be `None`")

        self._principal_id = principal_id

    @property
    def principal_type(self):
        """Gets the principal_type of this ValidatedApiTokenResponse.

        Indicates the type of the principal (app or user)

        :return: The principal_type of this ValidatedApiTokenResponse.
        :rtype: str
        """
        return self._principal_type

    @principal_type.setter
    def principal_type(self, principal_type):
        """Sets the principal_type of this ValidatedApiTokenResponse.

        Indicates the type of the principal (app or user)

        :param principal_type: The principal_type of this ValidatedApiTokenResponse.
        :type principal_type: str
        """
        allowed_values = ["app", "user"]  # noqa: E501
        if principal_type not in allowed_values:
            raise ValueError(
                "Invalid value for `principal_type` ({0}), must be one of {1}"
                .format(principal_type, allowed_values)
            )

        self._principal_type = principal_type

    @property
    def token_id(self):
        """Gets the token_id of this ValidatedApiTokenResponse.

        The token's unique id (UUID)

        :return: The token_id of this ValidatedApiTokenResponse.
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this ValidatedApiTokenResponse.

        The token's unique id (UUID)

        :param token_id: The token_id of this ValidatedApiTokenResponse.
        :type token_id: str
        """
        if token_id is None:
            raise ValueError("Invalid value for `token_id`, must not be `None`")

        self._token_id = token_id

    @property
    def token_scope(self):
        """Gets the token_scope of this ValidatedApiTokenResponse.

        The token's scope. A list of allowed roles.

        :return: The token_scope of this ValidatedApiTokenResponse.
        :rtype: List[str]
        """
        return self._token_scope

    @token_scope.setter
    def token_scope(self, token_scope):
        """Sets the token_scope of this ValidatedApiTokenResponse.

        The token's scope. A list of allowed roles.

        :param token_scope: The token_scope of this ValidatedApiTokenResponse.
        :type token_scope: List[str]
        """
        allowed_values = ["all", "in_app_update", "viewer"]  # noqa: E501
        if not set(token_scope).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `token_scope` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(token_scope) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._token_scope = token_scope
