# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceCpu(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, core: str=None, frequency: str=None, text: str=None):
        """DeviceCpu - a model defined in OpenAPI

        :param core: The core of this DeviceCpu.
        :param frequency: The frequency of this DeviceCpu.
        :param text: The text of this DeviceCpu.
        """
        self.openapi_types = {
            'core': str,
            'frequency': str,
            'text': str
        }

        self.attribute_map = {
            'core': 'core',
            'frequency': 'frequency',
            'text': 'text'
        }

        self._core = core
        self._frequency = frequency
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceCpu':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceCpu of this DeviceCpu.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def core(self):
        """Gets the core of this DeviceCpu.


        :return: The core of this DeviceCpu.
        :rtype: str
        """
        return self._core

    @core.setter
    def core(self, core):
        """Sets the core of this DeviceCpu.


        :param core: The core of this DeviceCpu.
        :type core: str
        """

        self._core = core

    @property
    def frequency(self):
        """Gets the frequency of this DeviceCpu.


        :return: The frequency of this DeviceCpu.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this DeviceCpu.


        :param frequency: The frequency of this DeviceCpu.
        :type frequency: str
        """

        self._frequency = frequency

    @property
    def text(self):
        """Gets the text of this DeviceCpu.


        :return: The text of this DeviceCpu.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this DeviceCpu.


        :param text: The text of this DeviceCpu.
        :type text: str
        """

        self._text = text
