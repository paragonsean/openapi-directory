# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PatchReleaseAssetIdRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ipa_uuids: str=None, package_asset_id: str=None, upload_id: str=None):
        """PatchReleaseAssetIdRequest - a model defined in OpenAPI

        :param ipa_uuids: The ipa_uuids of this PatchReleaseAssetIdRequest.
        :param package_asset_id: The package_asset_id of this PatchReleaseAssetIdRequest.
        :param upload_id: The upload_id of this PatchReleaseAssetIdRequest.
        """
        self.openapi_types = {
            'ipa_uuids': str,
            'package_asset_id': str,
            'upload_id': str
        }

        self.attribute_map = {
            'ipa_uuids': 'ipa_uuids',
            'package_asset_id': 'package_asset_id',
            'upload_id': 'upload_id'
        }

        self._ipa_uuids = ipa_uuids
        self._package_asset_id = package_asset_id
        self._upload_id = upload_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchReleaseAssetIdRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchReleaseAssetIdRequest of this PatchReleaseAssetIdRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ipa_uuids(self):
        """Gets the ipa_uuids of this PatchReleaseAssetIdRequest.

        The ipa UUIDs for this release, as a serialized JSON array

        :return: The ipa_uuids of this PatchReleaseAssetIdRequest.
        :rtype: str
        """
        return self._ipa_uuids

    @ipa_uuids.setter
    def ipa_uuids(self, ipa_uuids):
        """Sets the ipa_uuids of this PatchReleaseAssetIdRequest.

        The ipa UUIDs for this release, as a serialized JSON array

        :param ipa_uuids: The ipa_uuids of this PatchReleaseAssetIdRequest.
        :type ipa_uuids: str
        """

        self._ipa_uuids = ipa_uuids

    @property
    def package_asset_id(self):
        """Gets the package_asset_id of this PatchReleaseAssetIdRequest.

        The release new package id in ACFUS

        :return: The package_asset_id of this PatchReleaseAssetIdRequest.
        :rtype: str
        """
        return self._package_asset_id

    @package_asset_id.setter
    def package_asset_id(self, package_asset_id):
        """Sets the package_asset_id of this PatchReleaseAssetIdRequest.

        The release new package id in ACFUS

        :param package_asset_id: The package_asset_id of this PatchReleaseAssetIdRequest.
        :type package_asset_id: str
        """
        if package_asset_id is None:
            raise ValueError("Invalid value for `package_asset_id`, must not be `None`")

        self._package_asset_id = package_asset_id

    @property
    def upload_id(self):
        """Gets the upload_id of this PatchReleaseAssetIdRequest.

        The release upload id used to upload the release

        :return: The upload_id of this PatchReleaseAssetIdRequest.
        :rtype: str
        """
        return self._upload_id

    @upload_id.setter
    def upload_id(self, upload_id):
        """Sets the upload_id of this PatchReleaseAssetIdRequest.

        The release upload id used to upload the release

        :param upload_id: The upload_id of this PatchReleaseAssetIdRequest.
        :type upload_id: str
        """
        if upload_id is None:
            raise ValueError("Invalid value for `upload_id`, must not be `None`")

        self._upload_id = upload_id
