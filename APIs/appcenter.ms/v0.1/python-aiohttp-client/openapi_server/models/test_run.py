# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.test_run_statistics import TestRunStatistics
from openapi_server import util


class TestRun(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_version: str=None, _date: str=None, description: str=None, id: str=None, platform: str=None, result_status: str=None, run_status: str=None, state: str=None, stats: TestRunStatistics=None, status: str=None, test_series: str=None, test_type: str=None):
        """TestRun - a model defined in OpenAPI

        :param app_version: The app_version of this TestRun.
        :param _date: The _date of this TestRun.
        :param description: The description of this TestRun.
        :param id: The id of this TestRun.
        :param platform: The platform of this TestRun.
        :param result_status: The result_status of this TestRun.
        :param run_status: The run_status of this TestRun.
        :param state: The state of this TestRun.
        :param stats: The stats of this TestRun.
        :param status: The status of this TestRun.
        :param test_series: The test_series of this TestRun.
        :param test_type: The test_type of this TestRun.
        """
        self.openapi_types = {
            'app_version': str,
            '_date': str,
            'description': str,
            'id': str,
            'platform': str,
            'result_status': str,
            'run_status': str,
            'state': str,
            'stats': TestRunStatistics,
            'status': str,
            'test_series': str,
            'test_type': str
        }

        self.attribute_map = {
            'app_version': 'appVersion',
            '_date': 'date',
            'description': 'description',
            'id': 'id',
            'platform': 'platform',
            'result_status': 'resultStatus',
            'run_status': 'runStatus',
            'state': 'state',
            'stats': 'stats',
            'status': 'status',
            'test_series': 'testSeries',
            'test_type': 'testType'
        }

        self._app_version = app_version
        self.__date = _date
        self._description = description
        self._id = id
        self._platform = platform
        self._result_status = result_status
        self._run_status = run_status
        self._state = state
        self._stats = stats
        self._status = status
        self._test_series = test_series
        self._test_type = test_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestRun':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Test_Run of this TestRun.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_version(self):
        """Gets the app_version of this TestRun.

        The compiled version of the app binary

        :return: The app_version of this TestRun.
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this TestRun.

        The compiled version of the app binary

        :param app_version: The app_version of this TestRun.
        :type app_version: str
        """

        self._app_version = app_version

    @property
    def _date(self):
        """Gets the _date of this TestRun.

        The date and time the test was uploaded

        :return: The _date of this TestRun.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this TestRun.

        The date and time the test was uploaded

        :param _date: The _date of this TestRun.
        :type _date: str
        """

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this TestRun.

        Human readable explanation of the current test status

        :return: The description of this TestRun.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TestRun.

        Human readable explanation of the current test status

        :param description: The description of this TestRun.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this TestRun.

        The unique id of the test upload

        :return: The id of this TestRun.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TestRun.

        The unique id of the test upload

        :param id: The id of this TestRun.
        :type id: str
        """

        self._id = id

    @property
    def platform(self):
        """Gets the platform of this TestRun.

        The device platform targeted by the test. Possible values are 'ios' or 'android'

        :return: The platform of this TestRun.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this TestRun.

        The device platform targeted by the test. Possible values are 'ios' or 'android'

        :param platform: The platform of this TestRun.
        :type platform: str
        """

        self._platform = platform

    @property
    def result_status(self):
        """Gets the result_status of this TestRun.

        The passed/failed state

        :return: The result_status of this TestRun.
        :rtype: str
        """
        return self._result_status

    @result_status.setter
    def result_status(self, result_status):
        """Sets the result_status of this TestRun.

        The passed/failed state

        :param result_status: The result_status of this TestRun.
        :type result_status: str
        """

        self._result_status = result_status

    @property
    def run_status(self):
        """Gets the run_status of this TestRun.

        The current status of the test run, in relation to the various phases

        :return: The run_status of this TestRun.
        :rtype: str
        """
        return self._run_status

    @run_status.setter
    def run_status(self, run_status):
        """Sets the run_status of this TestRun.

        The current status of the test run, in relation to the various phases

        :param run_status: The run_status of this TestRun.
        :type run_status: str
        """

        self._run_status = run_status

    @property
    def state(self):
        """Gets the state of this TestRun.

        Deprecated. Use runStatus instead.

        :return: The state of this TestRun.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TestRun.

        Deprecated. Use runStatus instead.

        :param state: The state of this TestRun.
        :type state: str
        """

        self._state = state

    @property
    def stats(self):
        """Gets the stats of this TestRun.


        :return: The stats of this TestRun.
        :rtype: TestRunStatistics
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this TestRun.


        :param stats: The stats of this TestRun.
        :type stats: TestRunStatistics
        """

        self._stats = stats

    @property
    def status(self):
        """Gets the status of this TestRun.

        Deprecated. Use resultStatus instead.

        :return: The status of this TestRun.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TestRun.

        Deprecated. Use resultStatus instead.

        :param status: The status of this TestRun.
        :type status: str
        """

        self._status = status

    @property
    def test_series(self):
        """Gets the test_series of this TestRun.

        The name of the test series with which this test upload is associated

        :return: The test_series of this TestRun.
        :rtype: str
        """
        return self._test_series

    @test_series.setter
    def test_series(self, test_series):
        """Sets the test_series of this TestRun.

        The name of the test series with which this test upload is associated

        :param test_series: The test_series of this TestRun.
        :type test_series: str
        """

        self._test_series = test_series

    @property
    def test_type(self):
        """Gets the test_type of this TestRun.

        The name of the test framework used to run this test

        :return: The test_type of this TestRun.
        :rtype: str
        """
        return self._test_type

    @test_type.setter
    def test_type(self, test_type):
        """Sets the test_type of this TestRun.

        The name of the test framework used to run this test

        :param test_type: The test_type of this TestRun.
        :type test_type: str
        """

        self._test_type = test_type
