# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analytics_generic_log_flow200_response_logs_inner_device import AnalyticsGenericLogFlow200ResponseLogsInnerDevice
from openapi_server import util


class Log(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device: AnalyticsGenericLogFlow200ResponseLogsInnerDevice=None, install_id: str=None, timestamp: datetime=None, type: str=None):
        """Log - a model defined in OpenAPI

        :param device: The device of this Log.
        :param install_id: The install_id of this Log.
        :param timestamp: The timestamp of this Log.
        :param type: The type of this Log.
        """
        self.openapi_types = {
            'device': AnalyticsGenericLogFlow200ResponseLogsInnerDevice,
            'install_id': str,
            'timestamp': datetime,
            'type': str
        }

        self.attribute_map = {
            'device': 'device',
            'install_id': 'install_id',
            'timestamp': 'timestamp',
            'type': 'type'
        }

        self._device = device
        self._install_id = install_id
        self._timestamp = timestamp
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Log':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Log of this Log.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device(self):
        """Gets the device of this Log.


        :return: The device of this Log.
        :rtype: AnalyticsGenericLogFlow200ResponseLogsInnerDevice
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this Log.


        :param device: The device of this Log.
        :type device: AnalyticsGenericLogFlow200ResponseLogsInnerDevice
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")

        self._device = device

    @property
    def install_id(self):
        """Gets the install_id of this Log.

        Install ID. 

        :return: The install_id of this Log.
        :rtype: str
        """
        return self._install_id

    @install_id.setter
    def install_id(self, install_id):
        """Sets the install_id of this Log.

        Install ID. 

        :param install_id: The install_id of this Log.
        :type install_id: str
        """
        if install_id is None:
            raise ValueError("Invalid value for `install_id`, must not be `None`")

        self._install_id = install_id

    @property
    def timestamp(self):
        """Gets the timestamp of this Log.

        Log creation timestamp. 

        :return: The timestamp of this Log.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Log.

        Log creation timestamp. 

        :param timestamp: The timestamp of this Log.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def type(self):
        """Gets the type of this Log.

        Log type. 

        :return: The type of this Log.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Log.

        Log type. 

        :param type: The type of this Log.
        :type type: str
        """
        allowed_values = ["event", "page", "start_session", "error", "push_installation", "start_service", "custom_properties"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
