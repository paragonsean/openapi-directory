# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AlertingBugtrackerSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, callback_url: str=None, owner_name: str=None, type: str=None):
        """AlertingBugtrackerSettings - a model defined in OpenAPI

        :param callback_url: The callback_url of this AlertingBugtrackerSettings.
        :param owner_name: The owner_name of this AlertingBugtrackerSettings.
        :param type: The type of this AlertingBugtrackerSettings.
        """
        self.openapi_types = {
            'callback_url': str,
            'owner_name': str,
            'type': str
        }

        self.attribute_map = {
            'callback_url': 'callback_url',
            'owner_name': 'owner_name',
            'type': 'type'
        }

        self._callback_url = callback_url
        self._owner_name = owner_name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertingBugtrackerSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlertingBugtrackerSettings of this AlertingBugtrackerSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def callback_url(self):
        """Gets the callback_url of this AlertingBugtrackerSettings.


        :return: The callback_url of this AlertingBugtrackerSettings.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this AlertingBugtrackerSettings.


        :param callback_url: The callback_url of this AlertingBugtrackerSettings.
        :type callback_url: str
        """

        self._callback_url = callback_url

    @property
    def owner_name(self):
        """Gets the owner_name of this AlertingBugtrackerSettings.


        :return: The owner_name of this AlertingBugtrackerSettings.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this AlertingBugtrackerSettings.


        :param owner_name: The owner_name of this AlertingBugtrackerSettings.
        :type owner_name: str
        """
        if owner_name is None:
            raise ValueError("Invalid value for `owner_name`, must not be `None`")

        self._owner_name = owner_name

    @property
    def type(self):
        """Gets the type of this AlertingBugtrackerSettings.

        type of bugtracker

        :return: The type of this AlertingBugtrackerSettings.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AlertingBugtrackerSettings.

        type of bugtracker

        :param type: The type of this AlertingBugtrackerSettings.
        :type type: str
        """
        allowed_values = ["github", "vsts", "jira"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
