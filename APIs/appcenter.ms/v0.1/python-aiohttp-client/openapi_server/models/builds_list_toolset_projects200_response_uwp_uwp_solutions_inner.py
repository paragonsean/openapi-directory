# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BuildsListToolsetProjects200ResponseUwpUwpSolutionsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configurations: List[str]=None, path: str=None):
        """BuildsListToolsetProjects200ResponseUwpUwpSolutionsInner - a model defined in OpenAPI

        :param configurations: The configurations of this BuildsListToolsetProjects200ResponseUwpUwpSolutionsInner.
        :param path: The path of this BuildsListToolsetProjects200ResponseUwpUwpSolutionsInner.
        """
        self.openapi_types = {
            'configurations': List[str],
            'path': str
        }

        self.attribute_map = {
            'configurations': 'configurations',
            'path': 'path'
        }

        self._configurations = configurations
        self._path = path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildsListToolsetProjects200ResponseUwpUwpSolutionsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The builds_listToolsetProjects_200_response_uwp_uwpSolutions_inner of this BuildsListToolsetProjects200ResponseUwpUwpSolutionsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configurations(self):
        """Gets the configurations of this BuildsListToolsetProjects200ResponseUwpUwpSolutionsInner.

        The possible configurations detected for the UWP solution

        :return: The configurations of this BuildsListToolsetProjects200ResponseUwpUwpSolutionsInner.
        :rtype: List[str]
        """
        return self._configurations

    @configurations.setter
    def configurations(self, configurations):
        """Sets the configurations of this BuildsListToolsetProjects200ResponseUwpUwpSolutionsInner.

        The possible configurations detected for the UWP solution

        :param configurations: The configurations of this BuildsListToolsetProjects200ResponseUwpUwpSolutionsInner.
        :type configurations: List[str]
        """
        if configurations is None:
            raise ValueError("Invalid value for `configurations`, must not be `None`")

        self._configurations = configurations

    @property
    def path(self):
        """Gets the path of this BuildsListToolsetProjects200ResponseUwpUwpSolutionsInner.

        The path to the UWP solution

        :return: The path of this BuildsListToolsetProjects200ResponseUwpUwpSolutionsInner.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this BuildsListToolsetProjects200ResponseUwpUwpSolutionsInner.

        The path to the UWP solution

        :param path: The path of this BuildsListToolsetProjects200ResponseUwpUwpSolutionsInner.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path
