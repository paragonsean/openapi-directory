# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_devices_request_destinations_inner import UpdateDevicesRequestDestinationsInner
from openapi_server import util


class UpdateDevicesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_service_connection_id: str=None, destinations: List[UpdateDevicesRequestDestinationsInner]=None, devices: List[str]=None, p12_base64: str=None, p12_password: str=None, p12_service_connection_id: str=None, password: str=None, publish_all_devices: bool=None, release_id: float=None, username: str=None):
        """UpdateDevicesRequest - a model defined in OpenAPI

        :param account_service_connection_id: The account_service_connection_id of this UpdateDevicesRequest.
        :param destinations: The destinations of this UpdateDevicesRequest.
        :param devices: The devices of this UpdateDevicesRequest.
        :param p12_base64: The p12_base64 of this UpdateDevicesRequest.
        :param p12_password: The p12_password of this UpdateDevicesRequest.
        :param p12_service_connection_id: The p12_service_connection_id of this UpdateDevicesRequest.
        :param password: The password of this UpdateDevicesRequest.
        :param publish_all_devices: The publish_all_devices of this UpdateDevicesRequest.
        :param release_id: The release_id of this UpdateDevicesRequest.
        :param username: The username of this UpdateDevicesRequest.
        """
        self.openapi_types = {
            'account_service_connection_id': str,
            'destinations': List[UpdateDevicesRequestDestinationsInner],
            'devices': List[str],
            'p12_base64': str,
            'p12_password': str,
            'p12_service_connection_id': str,
            'password': str,
            'publish_all_devices': bool,
            'release_id': float,
            'username': str
        }

        self.attribute_map = {
            'account_service_connection_id': 'account_service_connection_id',
            'destinations': 'destinations',
            'devices': 'devices',
            'p12_base64': 'p12_base64',
            'p12_password': 'p12_password',
            'p12_service_connection_id': 'p12_service_connection_id',
            'password': 'password',
            'publish_all_devices': 'publish_all_devices',
            'release_id': 'release_id',
            'username': 'username'
        }

        self._account_service_connection_id = account_service_connection_id
        self._destinations = destinations
        self._devices = devices
        self._p12_base64 = p12_base64
        self._p12_password = p12_password
        self._p12_service_connection_id = p12_service_connection_id
        self._password = password
        self._publish_all_devices = publish_all_devices
        self._release_id = release_id
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDevicesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateDevicesRequest of this UpdateDevicesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_service_connection_id(self):
        """Gets the account_service_connection_id of this UpdateDevicesRequest.

        The service_connection_id of the stored Apple credentials instead of username, password.

        :return: The account_service_connection_id of this UpdateDevicesRequest.
        :rtype: str
        """
        return self._account_service_connection_id

    @account_service_connection_id.setter
    def account_service_connection_id(self, account_service_connection_id):
        """Sets the account_service_connection_id of this UpdateDevicesRequest.

        The service_connection_id of the stored Apple credentials instead of username, password.

        :param account_service_connection_id: The account_service_connection_id of this UpdateDevicesRequest.
        :type account_service_connection_id: str
        """

        self._account_service_connection_id = account_service_connection_id

    @property
    def destinations(self):
        """Gets the destinations of this UpdateDevicesRequest.

        Array of distribution groups that the devices should be provisioned from.

        :return: The destinations of this UpdateDevicesRequest.
        :rtype: List[UpdateDevicesRequestDestinationsInner]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this UpdateDevicesRequest.

        Array of distribution groups that the devices should be provisioned from.

        :param destinations: The destinations of this UpdateDevicesRequest.
        :type destinations: List[UpdateDevicesRequestDestinationsInner]
        """

        self._destinations = destinations

    @property
    def devices(self):
        """Gets the devices of this UpdateDevicesRequest.

        Array of device UDID's to be published to the Apple Developer account.

        :return: The devices of this UpdateDevicesRequest.
        :rtype: List[str]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this UpdateDevicesRequest.

        Array of device UDID's to be published to the Apple Developer account.

        :param devices: The devices of this UpdateDevicesRequest.
        :type devices: List[str]
        """

        self._devices = devices

    @property
    def p12_base64(self):
        """Gets the p12_base64 of this UpdateDevicesRequest.

        The certificate to use for resigning the application with the updated provisioning profiles.

        :return: The p12_base64 of this UpdateDevicesRequest.
        :rtype: str
        """
        return self._p12_base64

    @p12_base64.setter
    def p12_base64(self, p12_base64):
        """Sets the p12_base64 of this UpdateDevicesRequest.

        The certificate to use for resigning the application with the updated provisioning profiles.

        :param p12_base64: The p12_base64 of this UpdateDevicesRequest.
        :type p12_base64: str
        """

        self._p12_base64 = p12_base64

    @property
    def p12_password(self):
        """Gets the p12_password of this UpdateDevicesRequest.

        The password certificate if one is needed.

        :return: The p12_password of this UpdateDevicesRequest.
        :rtype: str
        """
        return self._p12_password

    @p12_password.setter
    def p12_password(self, p12_password):
        """Sets the p12_password of this UpdateDevicesRequest.

        The password certificate if one is needed.

        :param p12_password: The p12_password of this UpdateDevicesRequest.
        :type p12_password: str
        """

        self._p12_password = p12_password

    @property
    def p12_service_connection_id(self):
        """Gets the p12_service_connection_id of this UpdateDevicesRequest.

        The service_connection_id of the stored Apple certificate instead of p12_base64 value.

        :return: The p12_service_connection_id of this UpdateDevicesRequest.
        :rtype: str
        """
        return self._p12_service_connection_id

    @p12_service_connection_id.setter
    def p12_service_connection_id(self, p12_service_connection_id):
        """Sets the p12_service_connection_id of this UpdateDevicesRequest.

        The service_connection_id of the stored Apple certificate instead of p12_base64 value.

        :param p12_service_connection_id: The p12_service_connection_id of this UpdateDevicesRequest.
        :type p12_service_connection_id: str
        """

        self._p12_service_connection_id = p12_service_connection_id

    @property
    def password(self):
        """Gets the password of this UpdateDevicesRequest.

        The password for the Apple Developer account to publish the devices to.

        :return: The password of this UpdateDevicesRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UpdateDevicesRequest.

        The password for the Apple Developer account to publish the devices to.

        :param password: The password of this UpdateDevicesRequest.
        :type password: str
        """

        self._password = password

    @property
    def publish_all_devices(self):
        """Gets the publish_all_devices of this UpdateDevicesRequest.

        When set to true, all unprovisioned devices will be published to the Apple Developer account.  When false, only the provided devices will be published to the Apple Developer account.

        :return: The publish_all_devices of this UpdateDevicesRequest.
        :rtype: bool
        """
        return self._publish_all_devices

    @publish_all_devices.setter
    def publish_all_devices(self, publish_all_devices):
        """Sets the publish_all_devices of this UpdateDevicesRequest.

        When set to true, all unprovisioned devices will be published to the Apple Developer account.  When false, only the provided devices will be published to the Apple Developer account.

        :param publish_all_devices: The publish_all_devices of this UpdateDevicesRequest.
        :type publish_all_devices: bool
        """

        self._publish_all_devices = publish_all_devices

    @property
    def release_id(self):
        """Gets the release_id of this UpdateDevicesRequest.

        When provided, will update the provided release with the new set of devices. By default the latest release of the distribution group is used when this property is omitted. If `release_id` is passed in the path, there is no need to pass in the body as well.

        :return: The release_id of this UpdateDevicesRequest.
        :rtype: float
        """
        return self._release_id

    @release_id.setter
    def release_id(self, release_id):
        """Sets the release_id of this UpdateDevicesRequest.

        When provided, will update the provided release with the new set of devices. By default the latest release of the distribution group is used when this property is omitted. If `release_id` is passed in the path, there is no need to pass in the body as well.

        :param release_id: The release_id of this UpdateDevicesRequest.
        :type release_id: float
        """

        self._release_id = release_id

    @property
    def username(self):
        """Gets the username of this UpdateDevicesRequest.

        The username for the Apple Developer account to publish the devices to.

        :return: The username of this UpdateDevicesRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UpdateDevicesRequest.

        The username for the Apple Developer account to publish the devices to.

        :param username: The username of this UpdateDevicesRequest.
        :type username: str
        """

        self._username = username
