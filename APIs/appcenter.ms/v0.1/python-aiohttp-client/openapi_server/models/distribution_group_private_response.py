# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DistributionGroupPrivateResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, id: str=None, is_public: bool=None, name: str=None, origin: str=None, group_type: str=None):
        """DistributionGroupPrivateResponse - a model defined in OpenAPI

        :param display_name: The display_name of this DistributionGroupPrivateResponse.
        :param id: The id of this DistributionGroupPrivateResponse.
        :param is_public: The is_public of this DistributionGroupPrivateResponse.
        :param name: The name of this DistributionGroupPrivateResponse.
        :param origin: The origin of this DistributionGroupPrivateResponse.
        :param group_type: The group_type of this DistributionGroupPrivateResponse.
        """
        self.openapi_types = {
            'display_name': str,
            'id': str,
            'is_public': bool,
            'name': str,
            'origin': str,
            'group_type': str
        }

        self.attribute_map = {
            'display_name': 'display_name',
            'id': 'id',
            'is_public': 'is_public',
            'name': 'name',
            'origin': 'origin',
            'group_type': 'group_type'
        }

        self._display_name = display_name
        self._id = id
        self._is_public = is_public
        self._name = name
        self._origin = origin
        self._group_type = group_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DistributionGroupPrivateResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DistributionGroupPrivateResponse of this DistributionGroupPrivateResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this DistributionGroupPrivateResponse.

        The name of the distribution group

        :return: The display_name of this DistributionGroupPrivateResponse.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DistributionGroupPrivateResponse.

        The name of the distribution group

        :param display_name: The display_name of this DistributionGroupPrivateResponse.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this DistributionGroupPrivateResponse.

        The unique ID of the distribution group

        :return: The id of this DistributionGroupPrivateResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DistributionGroupPrivateResponse.

        The unique ID of the distribution group

        :param id: The id of this DistributionGroupPrivateResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_public(self):
        """Gets the is_public of this DistributionGroupPrivateResponse.

        Whether the distribution group is public

        :return: The is_public of this DistributionGroupPrivateResponse.
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this DistributionGroupPrivateResponse.

        Whether the distribution group is public

        :param is_public: The is_public of this DistributionGroupPrivateResponse.
        :type is_public: bool
        """
        if is_public is None:
            raise ValueError("Invalid value for `is_public`, must not be `None`")

        self._is_public = is_public

    @property
    def name(self):
        """Gets the name of this DistributionGroupPrivateResponse.

        The name of the distribution group used in URLs

        :return: The name of this DistributionGroupPrivateResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DistributionGroupPrivateResponse.

        The name of the distribution group used in URLs

        :param name: The name of this DistributionGroupPrivateResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def origin(self):
        """Gets the origin of this DistributionGroupPrivateResponse.

        The creation origin of this distribution group

        :return: The origin of this DistributionGroupPrivateResponse.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this DistributionGroupPrivateResponse.

        The creation origin of this distribution group

        :param origin: The origin of this DistributionGroupPrivateResponse.
        :type origin: str
        """
        allowed_values = ["appcenter", "hockeyapp"]  # noqa: E501
        if origin not in allowed_values:
            raise ValueError(
                "Invalid value for `origin` ({0}), must be one of {1}"
                .format(origin, allowed_values)
            )

        self._origin = origin

    @property
    def group_type(self):
        """Gets the group_type of this DistributionGroupPrivateResponse.

        Type of group

        :return: The group_type of this DistributionGroupPrivateResponse.
        :rtype: str
        """
        return self._group_type

    @group_type.setter
    def group_type(self, group_type):
        """Sets the group_type of this DistributionGroupPrivateResponse.

        Type of group

        :param group_type: The group_type of this DistributionGroupPrivateResponse.
        :type group_type: str
        """
        allowed_values = ["Default", "HockeyAppDefault", "MicrosoftDogfooding"]  # noqa: E501
        if group_type not in allowed_values:
            raise ValueError(
                "Invalid value for `group_type` ({0}), must be one of {1}"
                .format(group_type, allowed_values)
            )

        self._group_type = group_type
