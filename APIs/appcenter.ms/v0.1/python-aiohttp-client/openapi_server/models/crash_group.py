# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.crash_groups_list200_response_crash_groups_inner_reason_frame import CrashGroupsList200ResponseCrashGroupsInnerReasonFrame
from openapi_server import util


class CrashGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotation: str=None, app_version: str=None, build: str=None, count: int=None, crash_group_id: str=None, crash_reason: str=None, display_id: str=None, exception: str=None, fatal: bool=None, first_occurrence: datetime=None, impacted_users: int=None, last_occurrence: datetime=None, new_crash_group_id: str=None, reason_frame: CrashGroupsList200ResponseCrashGroupsInnerReasonFrame=None, status: str=None):
        """CrashGroup - a model defined in OpenAPI

        :param annotation: The annotation of this CrashGroup.
        :param app_version: The app_version of this CrashGroup.
        :param build: The build of this CrashGroup.
        :param count: The count of this CrashGroup.
        :param crash_group_id: The crash_group_id of this CrashGroup.
        :param crash_reason: The crash_reason of this CrashGroup.
        :param display_id: The display_id of this CrashGroup.
        :param exception: The exception of this CrashGroup.
        :param fatal: The fatal of this CrashGroup.
        :param first_occurrence: The first_occurrence of this CrashGroup.
        :param impacted_users: The impacted_users of this CrashGroup.
        :param last_occurrence: The last_occurrence of this CrashGroup.
        :param new_crash_group_id: The new_crash_group_id of this CrashGroup.
        :param reason_frame: The reason_frame of this CrashGroup.
        :param status: The status of this CrashGroup.
        """
        self.openapi_types = {
            'annotation': str,
            'app_version': str,
            'build': str,
            'count': int,
            'crash_group_id': str,
            'crash_reason': str,
            'display_id': str,
            'exception': str,
            'fatal': bool,
            'first_occurrence': datetime,
            'impacted_users': int,
            'last_occurrence': datetime,
            'new_crash_group_id': str,
            'reason_frame': CrashGroupsList200ResponseCrashGroupsInnerReasonFrame,
            'status': str
        }

        self.attribute_map = {
            'annotation': 'annotation',
            'app_version': 'app_version',
            'build': 'build',
            'count': 'count',
            'crash_group_id': 'crash_group_id',
            'crash_reason': 'crash_reason',
            'display_id': 'display_id',
            'exception': 'exception',
            'fatal': 'fatal',
            'first_occurrence': 'first_occurrence',
            'impacted_users': 'impacted_users',
            'last_occurrence': 'last_occurrence',
            'new_crash_group_id': 'new_crash_group_id',
            'reason_frame': 'reason_frame',
            'status': 'status'
        }

        self._annotation = annotation
        self._app_version = app_version
        self._build = build
        self._count = count
        self._crash_group_id = crash_group_id
        self._crash_reason = crash_reason
        self._display_id = display_id
        self._exception = exception
        self._fatal = fatal
        self._first_occurrence = first_occurrence
        self._impacted_users = impacted_users
        self._last_occurrence = last_occurrence
        self._new_crash_group_id = new_crash_group_id
        self._reason_frame = reason_frame
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CrashGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CrashGroup of this CrashGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotation(self):
        """Gets the annotation of this CrashGroup.


        :return: The annotation of this CrashGroup.
        :rtype: str
        """
        return self._annotation

    @annotation.setter
    def annotation(self, annotation):
        """Sets the annotation of this CrashGroup.


        :param annotation: The annotation of this CrashGroup.
        :type annotation: str
        """
        if annotation is None:
            raise ValueError("Invalid value for `annotation`, must not be `None`")

        self._annotation = annotation

    @property
    def app_version(self):
        """Gets the app_version of this CrashGroup.


        :return: The app_version of this CrashGroup.
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this CrashGroup.


        :param app_version: The app_version of this CrashGroup.
        :type app_version: str
        """
        if app_version is None:
            raise ValueError("Invalid value for `app_version`, must not be `None`")

        self._app_version = app_version

    @property
    def build(self):
        """Gets the build of this CrashGroup.


        :return: The build of this CrashGroup.
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this CrashGroup.


        :param build: The build of this CrashGroup.
        :type build: str
        """
        if build is None:
            raise ValueError("Invalid value for `build`, must not be `None`")

        self._build = build

    @property
    def count(self):
        """Gets the count of this CrashGroup.


        :return: The count of this CrashGroup.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this CrashGroup.


        :param count: The count of this CrashGroup.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def crash_group_id(self):
        """Gets the crash_group_id of this CrashGroup.


        :return: The crash_group_id of this CrashGroup.
        :rtype: str
        """
        return self._crash_group_id

    @crash_group_id.setter
    def crash_group_id(self, crash_group_id):
        """Sets the crash_group_id of this CrashGroup.


        :param crash_group_id: The crash_group_id of this CrashGroup.
        :type crash_group_id: str
        """
        if crash_group_id is None:
            raise ValueError("Invalid value for `crash_group_id`, must not be `None`")

        self._crash_group_id = crash_group_id

    @property
    def crash_reason(self):
        """Gets the crash_reason of this CrashGroup.


        :return: The crash_reason of this CrashGroup.
        :rtype: str
        """
        return self._crash_reason

    @crash_reason.setter
    def crash_reason(self, crash_reason):
        """Sets the crash_reason of this CrashGroup.


        :param crash_reason: The crash_reason of this CrashGroup.
        :type crash_reason: str
        """
        if crash_reason is None:
            raise ValueError("Invalid value for `crash_reason`, must not be `None`")

        self._crash_reason = crash_reason

    @property
    def display_id(self):
        """Gets the display_id of this CrashGroup.


        :return: The display_id of this CrashGroup.
        :rtype: str
        """
        return self._display_id

    @display_id.setter
    def display_id(self, display_id):
        """Sets the display_id of this CrashGroup.


        :param display_id: The display_id of this CrashGroup.
        :type display_id: str
        """
        if display_id is None:
            raise ValueError("Invalid value for `display_id`, must not be `None`")

        self._display_id = display_id

    @property
    def exception(self):
        """Gets the exception of this CrashGroup.


        :return: The exception of this CrashGroup.
        :rtype: str
        """
        return self._exception

    @exception.setter
    def exception(self, exception):
        """Sets the exception of this CrashGroup.


        :param exception: The exception of this CrashGroup.
        :type exception: str
        """

        self._exception = exception

    @property
    def fatal(self):
        """Gets the fatal of this CrashGroup.

        Crash or handled exception

        :return: The fatal of this CrashGroup.
        :rtype: bool
        """
        return self._fatal

    @fatal.setter
    def fatal(self, fatal):
        """Sets the fatal of this CrashGroup.

        Crash or handled exception

        :param fatal: The fatal of this CrashGroup.
        :type fatal: bool
        """
        if fatal is None:
            raise ValueError("Invalid value for `fatal`, must not be `None`")

        self._fatal = fatal

    @property
    def first_occurrence(self):
        """Gets the first_occurrence of this CrashGroup.


        :return: The first_occurrence of this CrashGroup.
        :rtype: datetime
        """
        return self._first_occurrence

    @first_occurrence.setter
    def first_occurrence(self, first_occurrence):
        """Sets the first_occurrence of this CrashGroup.


        :param first_occurrence: The first_occurrence of this CrashGroup.
        :type first_occurrence: datetime
        """
        if first_occurrence is None:
            raise ValueError("Invalid value for `first_occurrence`, must not be `None`")

        self._first_occurrence = first_occurrence

    @property
    def impacted_users(self):
        """Gets the impacted_users of this CrashGroup.


        :return: The impacted_users of this CrashGroup.
        :rtype: int
        """
        return self._impacted_users

    @impacted_users.setter
    def impacted_users(self, impacted_users):
        """Sets the impacted_users of this CrashGroup.


        :param impacted_users: The impacted_users of this CrashGroup.
        :type impacted_users: int
        """

        self._impacted_users = impacted_users

    @property
    def last_occurrence(self):
        """Gets the last_occurrence of this CrashGroup.


        :return: The last_occurrence of this CrashGroup.
        :rtype: datetime
        """
        return self._last_occurrence

    @last_occurrence.setter
    def last_occurrence(self, last_occurrence):
        """Sets the last_occurrence of this CrashGroup.


        :param last_occurrence: The last_occurrence of this CrashGroup.
        :type last_occurrence: datetime
        """
        if last_occurrence is None:
            raise ValueError("Invalid value for `last_occurrence`, must not be `None`")

        self._last_occurrence = last_occurrence

    @property
    def new_crash_group_id(self):
        """Gets the new_crash_group_id of this CrashGroup.


        :return: The new_crash_group_id of this CrashGroup.
        :rtype: str
        """
        return self._new_crash_group_id

    @new_crash_group_id.setter
    def new_crash_group_id(self, new_crash_group_id):
        """Sets the new_crash_group_id of this CrashGroup.


        :param new_crash_group_id: The new_crash_group_id of this CrashGroup.
        :type new_crash_group_id: str
        """
        if new_crash_group_id is None:
            raise ValueError("Invalid value for `new_crash_group_id`, must not be `None`")

        self._new_crash_group_id = new_crash_group_id

    @property
    def reason_frame(self):
        """Gets the reason_frame of this CrashGroup.


        :return: The reason_frame of this CrashGroup.
        :rtype: CrashGroupsList200ResponseCrashGroupsInnerReasonFrame
        """
        return self._reason_frame

    @reason_frame.setter
    def reason_frame(self, reason_frame):
        """Sets the reason_frame of this CrashGroup.


        :param reason_frame: The reason_frame of this CrashGroup.
        :type reason_frame: CrashGroupsList200ResponseCrashGroupsInnerReasonFrame
        """

        self._reason_frame = reason_frame

    @property
    def status(self):
        """Gets the status of this CrashGroup.


        :return: The status of this CrashGroup.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CrashGroup.


        :param status: The status of this CrashGroup.
        :type status: str
        """
        allowed_values = ["open", "closed", "ignored"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
