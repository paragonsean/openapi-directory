# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.branch_configurations_get200_response_all_of_artifact_versioning import BranchConfigurationsGet200ResponseAllOfArtifactVersioning
from openapi_server.models.branch_configurations_get200_response_all_of_toolsets import BranchConfigurationsGet200ResponseAllOfToolsets
from openapi_server.models.builds_list_branches200_response_inner_value import BuildsListBranches200ResponseInnerValue
from openapi_server import util


class BranchConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifact_versioning: BranchConfigurationsGet200ResponseAllOfArtifactVersioning=None, badge_is_enabled: bool=None, clone_from_branch: str=None, signed: bool=None, tests_enabled: bool=None, toolsets: BranchConfigurationsGet200ResponseAllOfToolsets=None, trigger: str=None):
        """BranchConfiguration - a model defined in OpenAPI

        :param artifact_versioning: The artifact_versioning of this BranchConfiguration.
        :param badge_is_enabled: The badge_is_enabled of this BranchConfiguration.
        :param clone_from_branch: The clone_from_branch of this BranchConfiguration.
        :param signed: The signed of this BranchConfiguration.
        :param tests_enabled: The tests_enabled of this BranchConfiguration.
        :param toolsets: The toolsets of this BranchConfiguration.
        :param trigger: The trigger of this BranchConfiguration.
        """
        self.openapi_types = {
            'artifact_versioning': BranchConfigurationsGet200ResponseAllOfArtifactVersioning,
            'badge_is_enabled': bool,
            'clone_from_branch': str,
            'signed': bool,
            'tests_enabled': bool,
            'toolsets': BranchConfigurationsGet200ResponseAllOfToolsets,
            'trigger': str
        }

        self.attribute_map = {
            'artifact_versioning': 'artifactVersioning',
            'badge_is_enabled': 'badgeIsEnabled',
            'clone_from_branch': 'cloneFromBranch',
            'signed': 'signed',
            'tests_enabled': 'testsEnabled',
            'toolsets': 'toolsets',
            'trigger': 'trigger'
        }

        self._artifact_versioning = artifact_versioning
        self._badge_is_enabled = badge_is_enabled
        self._clone_from_branch = clone_from_branch
        self._signed = signed
        self._tests_enabled = tests_enabled
        self._toolsets = toolsets
        self._trigger = trigger

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BranchConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BranchConfiguration of this BranchConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifact_versioning(self):
        """Gets the artifact_versioning of this BranchConfiguration.


        :return: The artifact_versioning of this BranchConfiguration.
        :rtype: BranchConfigurationsGet200ResponseAllOfArtifactVersioning
        """
        return self._artifact_versioning

    @artifact_versioning.setter
    def artifact_versioning(self, artifact_versioning):
        """Sets the artifact_versioning of this BranchConfiguration.


        :param artifact_versioning: The artifact_versioning of this BranchConfiguration.
        :type artifact_versioning: BranchConfigurationsGet200ResponseAllOfArtifactVersioning
        """

        self._artifact_versioning = artifact_versioning

    @property
    def badge_is_enabled(self):
        """Gets the badge_is_enabled of this BranchConfiguration.


        :return: The badge_is_enabled of this BranchConfiguration.
        :rtype: bool
        """
        return self._badge_is_enabled

    @badge_is_enabled.setter
    def badge_is_enabled(self, badge_is_enabled):
        """Sets the badge_is_enabled of this BranchConfiguration.


        :param badge_is_enabled: The badge_is_enabled of this BranchConfiguration.
        :type badge_is_enabled: bool
        """

        self._badge_is_enabled = badge_is_enabled

    @property
    def clone_from_branch(self):
        """Gets the clone_from_branch of this BranchConfiguration.

        A configured branch name to clone from. If provided, all other parameters will be ignored. Only supported in POST requests.

        :return: The clone_from_branch of this BranchConfiguration.
        :rtype: str
        """
        return self._clone_from_branch

    @clone_from_branch.setter
    def clone_from_branch(self, clone_from_branch):
        """Sets the clone_from_branch of this BranchConfiguration.

        A configured branch name to clone from. If provided, all other parameters will be ignored. Only supported in POST requests.

        :param clone_from_branch: The clone_from_branch of this BranchConfiguration.
        :type clone_from_branch: str
        """

        self._clone_from_branch = clone_from_branch

    @property
    def signed(self):
        """Gets the signed of this BranchConfiguration.


        :return: The signed of this BranchConfiguration.
        :rtype: bool
        """
        return self._signed

    @signed.setter
    def signed(self, signed):
        """Sets the signed of this BranchConfiguration.


        :param signed: The signed of this BranchConfiguration.
        :type signed: bool
        """

        self._signed = signed

    @property
    def tests_enabled(self):
        """Gets the tests_enabled of this BranchConfiguration.


        :return: The tests_enabled of this BranchConfiguration.
        :rtype: bool
        """
        return self._tests_enabled

    @tests_enabled.setter
    def tests_enabled(self, tests_enabled):
        """Sets the tests_enabled of this BranchConfiguration.


        :param tests_enabled: The tests_enabled of this BranchConfiguration.
        :type tests_enabled: bool
        """

        self._tests_enabled = tests_enabled

    @property
    def toolsets(self):
        """Gets the toolsets of this BranchConfiguration.


        :return: The toolsets of this BranchConfiguration.
        :rtype: BranchConfigurationsGet200ResponseAllOfToolsets
        """
        return self._toolsets

    @toolsets.setter
    def toolsets(self, toolsets):
        """Sets the toolsets of this BranchConfiguration.


        :param toolsets: The toolsets of this BranchConfiguration.
        :type toolsets: BranchConfigurationsGet200ResponseAllOfToolsets
        """

        self._toolsets = toolsets

    @property
    def trigger(self):
        """Gets the trigger of this BranchConfiguration.


        :return: The trigger of this BranchConfiguration.
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this BranchConfiguration.


        :param trigger: The trigger of this BranchConfiguration.
        :type trigger: str
        """
        allowed_values = ["continous", "continuous", "manual"]  # noqa: E501
        if trigger not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger` ({0}), must be one of {1}"
                .format(trigger, allowed_values)
            )

        self._trigger = trigger
