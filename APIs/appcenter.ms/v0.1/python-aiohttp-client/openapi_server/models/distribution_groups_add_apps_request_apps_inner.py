# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DistributionGroupsAddAppsRequestAppsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None):
        """DistributionGroupsAddAppsRequestAppsInner - a model defined in OpenAPI

        :param name: The name of this DistributionGroupsAddAppsRequestAppsInner.
        """
        self.openapi_types = {
            'name': str
        }

        self.attribute_map = {
            'name': 'name'
        }

        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DistributionGroupsAddAppsRequestAppsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The distributionGroups_addApps_request_apps_inner of this DistributionGroupsAddAppsRequestAppsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this DistributionGroupsAddAppsRequestAppsInner.

        The name of the app to be added to the distribution group

        :return: The name of this DistributionGroupsAddAppsRequestAppsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DistributionGroupsAddAppsRequestAppsInner.

        The name of the app to be added to the distribution group

        :param name: The name of this DistributionGroupsAddAppsRequestAppsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
