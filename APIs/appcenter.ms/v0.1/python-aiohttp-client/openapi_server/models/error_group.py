# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ErrorGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_build: str=None, app_version: str=None, code_raw: str=None, count: int=None, device_count: int=None, error_group_id: str=None, exception_app_code: bool=None, exception_class_method: bool=None, exception_class_name: str=None, exception_file: str=None, exception_line: str=None, exception_message: str=None, exception_method: str=None, exception_type: str=None, first_occurrence: datetime=None, hidden: bool=None, last_occurrence: datetime=None, reason_frames: List[object]=None, annotation: str=None, state: str=None):
        """ErrorGroup - a model defined in OpenAPI

        :param app_build: The app_build of this ErrorGroup.
        :param app_version: The app_version of this ErrorGroup.
        :param code_raw: The code_raw of this ErrorGroup.
        :param count: The count of this ErrorGroup.
        :param device_count: The device_count of this ErrorGroup.
        :param error_group_id: The error_group_id of this ErrorGroup.
        :param exception_app_code: The exception_app_code of this ErrorGroup.
        :param exception_class_method: The exception_class_method of this ErrorGroup.
        :param exception_class_name: The exception_class_name of this ErrorGroup.
        :param exception_file: The exception_file of this ErrorGroup.
        :param exception_line: The exception_line of this ErrorGroup.
        :param exception_message: The exception_message of this ErrorGroup.
        :param exception_method: The exception_method of this ErrorGroup.
        :param exception_type: The exception_type of this ErrorGroup.
        :param first_occurrence: The first_occurrence of this ErrorGroup.
        :param hidden: The hidden of this ErrorGroup.
        :param last_occurrence: The last_occurrence of this ErrorGroup.
        :param reason_frames: The reason_frames of this ErrorGroup.
        :param annotation: The annotation of this ErrorGroup.
        :param state: The state of this ErrorGroup.
        """
        self.openapi_types = {
            'app_build': str,
            'app_version': str,
            'code_raw': str,
            'count': int,
            'device_count': int,
            'error_group_id': str,
            'exception_app_code': bool,
            'exception_class_method': bool,
            'exception_class_name': str,
            'exception_file': str,
            'exception_line': str,
            'exception_message': str,
            'exception_method': str,
            'exception_type': str,
            'first_occurrence': datetime,
            'hidden': bool,
            'last_occurrence': datetime,
            'reason_frames': List[object],
            'annotation': str,
            'state': str
        }

        self.attribute_map = {
            'app_build': 'appBuild',
            'app_version': 'appVersion',
            'code_raw': 'codeRaw',
            'count': 'count',
            'device_count': 'deviceCount',
            'error_group_id': 'errorGroupId',
            'exception_app_code': 'exceptionAppCode',
            'exception_class_method': 'exceptionClassMethod',
            'exception_class_name': 'exceptionClassName',
            'exception_file': 'exceptionFile',
            'exception_line': 'exceptionLine',
            'exception_message': 'exceptionMessage',
            'exception_method': 'exceptionMethod',
            'exception_type': 'exceptionType',
            'first_occurrence': 'firstOccurrence',
            'hidden': 'hidden',
            'last_occurrence': 'lastOccurrence',
            'reason_frames': 'reasonFrames',
            'annotation': 'annotation',
            'state': 'state'
        }

        self._app_build = app_build
        self._app_version = app_version
        self._code_raw = code_raw
        self._count = count
        self._device_count = device_count
        self._error_group_id = error_group_id
        self._exception_app_code = exception_app_code
        self._exception_class_method = exception_class_method
        self._exception_class_name = exception_class_name
        self._exception_file = exception_file
        self._exception_line = exception_line
        self._exception_message = exception_message
        self._exception_method = exception_method
        self._exception_type = exception_type
        self._first_occurrence = first_occurrence
        self._hidden = hidden
        self._last_occurrence = last_occurrence
        self._reason_frames = reason_frames
        self._annotation = annotation
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorGroup of this ErrorGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_build(self):
        """Gets the app_build of this ErrorGroup.


        :return: The app_build of this ErrorGroup.
        :rtype: str
        """
        return self._app_build

    @app_build.setter
    def app_build(self, app_build):
        """Sets the app_build of this ErrorGroup.


        :param app_build: The app_build of this ErrorGroup.
        :type app_build: str
        """

        self._app_build = app_build

    @property
    def app_version(self):
        """Gets the app_version of this ErrorGroup.


        :return: The app_version of this ErrorGroup.
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this ErrorGroup.


        :param app_version: The app_version of this ErrorGroup.
        :type app_version: str
        """
        if app_version is None:
            raise ValueError("Invalid value for `app_version`, must not be `None`")

        self._app_version = app_version

    @property
    def code_raw(self):
        """Gets the code_raw of this ErrorGroup.


        :return: The code_raw of this ErrorGroup.
        :rtype: str
        """
        return self._code_raw

    @code_raw.setter
    def code_raw(self, code_raw):
        """Sets the code_raw of this ErrorGroup.


        :param code_raw: The code_raw of this ErrorGroup.
        :type code_raw: str
        """

        self._code_raw = code_raw

    @property
    def count(self):
        """Gets the count of this ErrorGroup.


        :return: The count of this ErrorGroup.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ErrorGroup.


        :param count: The count of this ErrorGroup.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def device_count(self):
        """Gets the device_count of this ErrorGroup.


        :return: The device_count of this ErrorGroup.
        :rtype: int
        """
        return self._device_count

    @device_count.setter
    def device_count(self, device_count):
        """Sets the device_count of this ErrorGroup.


        :param device_count: The device_count of this ErrorGroup.
        :type device_count: int
        """
        if device_count is None:
            raise ValueError("Invalid value for `device_count`, must not be `None`")

        self._device_count = device_count

    @property
    def error_group_id(self):
        """Gets the error_group_id of this ErrorGroup.


        :return: The error_group_id of this ErrorGroup.
        :rtype: str
        """
        return self._error_group_id

    @error_group_id.setter
    def error_group_id(self, error_group_id):
        """Sets the error_group_id of this ErrorGroup.


        :param error_group_id: The error_group_id of this ErrorGroup.
        :type error_group_id: str
        """
        if error_group_id is None:
            raise ValueError("Invalid value for `error_group_id`, must not be `None`")

        self._error_group_id = error_group_id

    @property
    def exception_app_code(self):
        """Gets the exception_app_code of this ErrorGroup.


        :return: The exception_app_code of this ErrorGroup.
        :rtype: bool
        """
        return self._exception_app_code

    @exception_app_code.setter
    def exception_app_code(self, exception_app_code):
        """Sets the exception_app_code of this ErrorGroup.


        :param exception_app_code: The exception_app_code of this ErrorGroup.
        :type exception_app_code: bool
        """

        self._exception_app_code = exception_app_code

    @property
    def exception_class_method(self):
        """Gets the exception_class_method of this ErrorGroup.


        :return: The exception_class_method of this ErrorGroup.
        :rtype: bool
        """
        return self._exception_class_method

    @exception_class_method.setter
    def exception_class_method(self, exception_class_method):
        """Sets the exception_class_method of this ErrorGroup.


        :param exception_class_method: The exception_class_method of this ErrorGroup.
        :type exception_class_method: bool
        """

        self._exception_class_method = exception_class_method

    @property
    def exception_class_name(self):
        """Gets the exception_class_name of this ErrorGroup.


        :return: The exception_class_name of this ErrorGroup.
        :rtype: str
        """
        return self._exception_class_name

    @exception_class_name.setter
    def exception_class_name(self, exception_class_name):
        """Sets the exception_class_name of this ErrorGroup.


        :param exception_class_name: The exception_class_name of this ErrorGroup.
        :type exception_class_name: str
        """

        self._exception_class_name = exception_class_name

    @property
    def exception_file(self):
        """Gets the exception_file of this ErrorGroup.


        :return: The exception_file of this ErrorGroup.
        :rtype: str
        """
        return self._exception_file

    @exception_file.setter
    def exception_file(self, exception_file):
        """Sets the exception_file of this ErrorGroup.


        :param exception_file: The exception_file of this ErrorGroup.
        :type exception_file: str
        """

        self._exception_file = exception_file

    @property
    def exception_line(self):
        """Gets the exception_line of this ErrorGroup.


        :return: The exception_line of this ErrorGroup.
        :rtype: str
        """
        return self._exception_line

    @exception_line.setter
    def exception_line(self, exception_line):
        """Sets the exception_line of this ErrorGroup.


        :param exception_line: The exception_line of this ErrorGroup.
        :type exception_line: str
        """

        self._exception_line = exception_line

    @property
    def exception_message(self):
        """Gets the exception_message of this ErrorGroup.


        :return: The exception_message of this ErrorGroup.
        :rtype: str
        """
        return self._exception_message

    @exception_message.setter
    def exception_message(self, exception_message):
        """Sets the exception_message of this ErrorGroup.


        :param exception_message: The exception_message of this ErrorGroup.
        :type exception_message: str
        """

        self._exception_message = exception_message

    @property
    def exception_method(self):
        """Gets the exception_method of this ErrorGroup.


        :return: The exception_method of this ErrorGroup.
        :rtype: str
        """
        return self._exception_method

    @exception_method.setter
    def exception_method(self, exception_method):
        """Sets the exception_method of this ErrorGroup.


        :param exception_method: The exception_method of this ErrorGroup.
        :type exception_method: str
        """

        self._exception_method = exception_method

    @property
    def exception_type(self):
        """Gets the exception_type of this ErrorGroup.


        :return: The exception_type of this ErrorGroup.
        :rtype: str
        """
        return self._exception_type

    @exception_type.setter
    def exception_type(self, exception_type):
        """Sets the exception_type of this ErrorGroup.


        :param exception_type: The exception_type of this ErrorGroup.
        :type exception_type: str
        """

        self._exception_type = exception_type

    @property
    def first_occurrence(self):
        """Gets the first_occurrence of this ErrorGroup.


        :return: The first_occurrence of this ErrorGroup.
        :rtype: datetime
        """
        return self._first_occurrence

    @first_occurrence.setter
    def first_occurrence(self, first_occurrence):
        """Sets the first_occurrence of this ErrorGroup.


        :param first_occurrence: The first_occurrence of this ErrorGroup.
        :type first_occurrence: datetime
        """
        if first_occurrence is None:
            raise ValueError("Invalid value for `first_occurrence`, must not be `None`")

        self._first_occurrence = first_occurrence

    @property
    def hidden(self):
        """Gets the hidden of this ErrorGroup.


        :return: The hidden of this ErrorGroup.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this ErrorGroup.


        :param hidden: The hidden of this ErrorGroup.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def last_occurrence(self):
        """Gets the last_occurrence of this ErrorGroup.


        :return: The last_occurrence of this ErrorGroup.
        :rtype: datetime
        """
        return self._last_occurrence

    @last_occurrence.setter
    def last_occurrence(self, last_occurrence):
        """Sets the last_occurrence of this ErrorGroup.


        :param last_occurrence: The last_occurrence of this ErrorGroup.
        :type last_occurrence: datetime
        """
        if last_occurrence is None:
            raise ValueError("Invalid value for `last_occurrence`, must not be `None`")

        self._last_occurrence = last_occurrence

    @property
    def reason_frames(self):
        """Gets the reason_frames of this ErrorGroup.


        :return: The reason_frames of this ErrorGroup.
        :rtype: List[object]
        """
        return self._reason_frames

    @reason_frames.setter
    def reason_frames(self, reason_frames):
        """Sets the reason_frames of this ErrorGroup.


        :param reason_frames: The reason_frames of this ErrorGroup.
        :type reason_frames: List[object]
        """

        self._reason_frames = reason_frames

    @property
    def annotation(self):
        """Gets the annotation of this ErrorGroup.


        :return: The annotation of this ErrorGroup.
        :rtype: str
        """
        return self._annotation

    @annotation.setter
    def annotation(self, annotation):
        """Sets the annotation of this ErrorGroup.


        :param annotation: The annotation of this ErrorGroup.
        :type annotation: str
        """

        self._annotation = annotation

    @property
    def state(self):
        """Gets the state of this ErrorGroup.


        :return: The state of this ErrorGroup.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ErrorGroup.


        :param state: The state of this ErrorGroup.
        :type state: str
        """
        allowed_values = ["open", "closed", "ignored"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
