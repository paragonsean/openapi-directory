# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.missing_symbol_groups_list200_response_groups_inner import MissingSymbolGroupsList200ResponseGroupsInner
from openapi_server import util


class V2MissingSymbolCrashGroupsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, groups: List[MissingSymbolGroupsList200ResponseGroupsInner]=None, total_crash_count: int=None):
        """V2MissingSymbolCrashGroupsResponse - a model defined in OpenAPI

        :param groups: The groups of this V2MissingSymbolCrashGroupsResponse.
        :param total_crash_count: The total_crash_count of this V2MissingSymbolCrashGroupsResponse.
        """
        self.openapi_types = {
            'groups': List[MissingSymbolGroupsList200ResponseGroupsInner],
            'total_crash_count': int
        }

        self.attribute_map = {
            'groups': 'groups',
            'total_crash_count': 'total_crash_count'
        }

        self._groups = groups
        self._total_crash_count = total_crash_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V2MissingSymbolCrashGroupsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The v2MissingSymbolCrashGroupsResponse of this V2MissingSymbolCrashGroupsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def groups(self):
        """Gets the groups of this V2MissingSymbolCrashGroupsResponse.

        list of crash groups formed by missing symbols combination

        :return: The groups of this V2MissingSymbolCrashGroupsResponse.
        :rtype: List[MissingSymbolGroupsList200ResponseGroupsInner]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this V2MissingSymbolCrashGroupsResponse.

        list of crash groups formed by missing symbols combination

        :param groups: The groups of this V2MissingSymbolCrashGroupsResponse.
        :type groups: List[MissingSymbolGroupsList200ResponseGroupsInner]
        """
        if groups is None:
            raise ValueError("Invalid value for `groups`, must not be `None`")

        self._groups = groups

    @property
    def total_crash_count(self):
        """Gets the total_crash_count of this V2MissingSymbolCrashGroupsResponse.

        total number of crashes for all the groups

        :return: The total_crash_count of this V2MissingSymbolCrashGroupsResponse.
        :rtype: int
        """
        return self._total_crash_count

    @total_crash_count.setter
    def total_crash_count(self, total_crash_count):
        """Sets the total_crash_count of this V2MissingSymbolCrashGroupsResponse.

        total number of crashes for all the groups

        :param total_crash_count: The total_crash_count of this V2MissingSymbolCrashGroupsResponse.
        :type total_crash_count: int
        """
        if total_crash_count is None:
            raise ValueError("Invalid value for `total_crash_count`, must not be `None`")

        self._total_crash_count = total_crash_count
