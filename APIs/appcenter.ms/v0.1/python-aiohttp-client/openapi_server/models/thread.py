# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.exception import Exception
from openapi_server.models.exception_frames_inner import ExceptionFramesInner
from openapi_server import util


class Thread(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, crashed: bool=None, exception: Exception=None, frames: List[ExceptionFramesInner]=None, platform: str=None, relevant: bool=None, title: str=None):
        """Thread - a model defined in OpenAPI

        :param crashed: The crashed of this Thread.
        :param exception: The exception of this Thread.
        :param frames: The frames of this Thread.
        :param platform: The platform of this Thread.
        :param relevant: The relevant of this Thread.
        :param title: The title of this Thread.
        """
        self.openapi_types = {
            'crashed': bool,
            'exception': Exception,
            'frames': List[ExceptionFramesInner],
            'platform': str,
            'relevant': bool,
            'title': str
        }

        self.attribute_map = {
            'crashed': 'crashed',
            'exception': 'exception',
            'frames': 'frames',
            'platform': 'platform',
            'relevant': 'relevant',
            'title': 'title'
        }

        self._crashed = crashed
        self._exception = exception
        self._frames = frames
        self._platform = platform
        self._relevant = relevant
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Thread':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Thread of this Thread.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def crashed(self):
        """Gets the crashed of this Thread.

        True if this thread crashed

        :return: The crashed of this Thread.
        :rtype: bool
        """
        return self._crashed

    @crashed.setter
    def crashed(self, crashed):
        """Sets the crashed of this Thread.

        True if this thread crashed

        :param crashed: The crashed of this Thread.
        :type crashed: bool
        """

        self._crashed = crashed

    @property
    def exception(self):
        """Gets the exception of this Thread.


        :return: The exception of this Thread.
        :rtype: Exception
        """
        return self._exception

    @exception.setter
    def exception(self, exception):
        """Sets the exception of this Thread.


        :param exception: The exception of this Thread.
        :type exception: Exception
        """

        self._exception = exception

    @property
    def frames(self):
        """Gets the frames of this Thread.

        frames of that thread

        :return: The frames of this Thread.
        :rtype: List[ExceptionFramesInner]
        """
        return self._frames

    @frames.setter
    def frames(self, frames):
        """Sets the frames of this Thread.

        frames of that thread

        :param frames: The frames of this Thread.
        :type frames: List[ExceptionFramesInner]
        """
        if frames is None:
            raise ValueError("Invalid value for `frames`, must not be `None`")

        self._frames = frames

    @property
    def platform(self):
        """Gets the platform of this Thread.

        SDK/Platform this thread is beeing generated from

        :return: The platform of this Thread.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this Thread.

        SDK/Platform this thread is beeing generated from

        :param platform: The platform of this Thread.
        :type platform: str
        """
        allowed_values = ["ios", "android", "xamarin", "react-native", "ndk", "unity", "other"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def relevant(self):
        """Gets the relevant of this Thread.

        Shows if a thread is relevant or not. Is false if all frames are non relevant, otherwise true

        :return: The relevant of this Thread.
        :rtype: bool
        """
        return self._relevant

    @relevant.setter
    def relevant(self, relevant):
        """Sets the relevant of this Thread.

        Shows if a thread is relevant or not. Is false if all frames are non relevant, otherwise true

        :param relevant: The relevant of this Thread.
        :type relevant: bool
        """

        self._relevant = relevant

    @property
    def title(self):
        """Gets the title of this Thread.

        name of the thread

        :return: The title of this Thread.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Thread.

        name of the thread

        :param title: The title of this Thread.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
