# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_set_device_configurations_inner import DeviceSetDeviceConfigurationsInner
from openapi_server.models.device_set_owner import DeviceSetOwner
from openapi_server import util


class DeviceSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_configurations: List[DeviceSetDeviceConfigurationsInner]=None, id: str=None, manufacturer_count: float=None, name: str=None, os_version_count: float=None, owner: DeviceSetOwner=None, slug: str=None):
        """DeviceSet - a model defined in OpenAPI

        :param device_configurations: The device_configurations of this DeviceSet.
        :param id: The id of this DeviceSet.
        :param manufacturer_count: The manufacturer_count of this DeviceSet.
        :param name: The name of this DeviceSet.
        :param os_version_count: The os_version_count of this DeviceSet.
        :param owner: The owner of this DeviceSet.
        :param slug: The slug of this DeviceSet.
        """
        self.openapi_types = {
            'device_configurations': List[DeviceSetDeviceConfigurationsInner],
            'id': str,
            'manufacturer_count': float,
            'name': str,
            'os_version_count': float,
            'owner': DeviceSetOwner,
            'slug': str
        }

        self.attribute_map = {
            'device_configurations': 'deviceConfigurations',
            'id': 'id',
            'manufacturer_count': 'manufacturerCount',
            'name': 'name',
            'os_version_count': 'osVersionCount',
            'owner': 'owner',
            'slug': 'slug'
        }

        self._device_configurations = device_configurations
        self._id = id
        self._manufacturer_count = manufacturer_count
        self._name = name
        self._os_version_count = os_version_count
        self._owner = owner
        self._slug = slug

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Device_Set of this DeviceSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_configurations(self):
        """Gets the device_configurations of this DeviceSet.


        :return: The device_configurations of this DeviceSet.
        :rtype: List[DeviceSetDeviceConfigurationsInner]
        """
        return self._device_configurations

    @device_configurations.setter
    def device_configurations(self, device_configurations):
        """Sets the device_configurations of this DeviceSet.


        :param device_configurations: The device_configurations of this DeviceSet.
        :type device_configurations: List[DeviceSetDeviceConfigurationsInner]
        """
        if device_configurations is None:
            raise ValueError("Invalid value for `device_configurations`, must not be `None`")

        self._device_configurations = device_configurations

    @property
    def id(self):
        """Gets the id of this DeviceSet.

        Identifier of the device set

        :return: The id of this DeviceSet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceSet.

        Identifier of the device set

        :param id: The id of this DeviceSet.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def manufacturer_count(self):
        """Gets the manufacturer_count of this DeviceSet.

        The number of manufacturers in the device set's device selection

        :return: The manufacturer_count of this DeviceSet.
        :rtype: float
        """
        return self._manufacturer_count

    @manufacturer_count.setter
    def manufacturer_count(self, manufacturer_count):
        """Sets the manufacturer_count of this DeviceSet.

        The number of manufacturers in the device set's device selection

        :param manufacturer_count: The manufacturer_count of this DeviceSet.
        :type manufacturer_count: float
        """

        self._manufacturer_count = manufacturer_count

    @property
    def name(self):
        """Gets the name of this DeviceSet.

        Name of the device set

        :return: The name of this DeviceSet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceSet.

        Name of the device set

        :param name: The name of this DeviceSet.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def os_version_count(self):
        """Gets the os_version_count of this DeviceSet.

        The number of os versions in the device set's device selection

        :return: The os_version_count of this DeviceSet.
        :rtype: float
        """
        return self._os_version_count

    @os_version_count.setter
    def os_version_count(self, os_version_count):
        """Sets the os_version_count of this DeviceSet.

        The number of os versions in the device set's device selection

        :param os_version_count: The os_version_count of this DeviceSet.
        :type os_version_count: float
        """

        self._os_version_count = os_version_count

    @property
    def owner(self):
        """Gets the owner of this DeviceSet.


        :return: The owner of this DeviceSet.
        :rtype: DeviceSetOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this DeviceSet.


        :param owner: The owner of this DeviceSet.
        :type owner: DeviceSetOwner
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")

        self._owner = owner

    @property
    def slug(self):
        """Gets the slug of this DeviceSet.

        Slug of the device set

        :return: The slug of this DeviceSet.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this DeviceSet.

        Slug of the device set

        :param slug: The slug of this DeviceSet.
        :type slug: str
        """

        self._slug = slug
