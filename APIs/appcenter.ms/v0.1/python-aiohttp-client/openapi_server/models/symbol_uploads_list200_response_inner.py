# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.symbol_uploads_list200_response_inner_symbols_uploaded_inner import SymbolUploadsList200ResponseInnerSymbolsUploadedInner
from openapi_server.models.symbol_uploads_list200_response_inner_user import SymbolUploadsList200ResponseInnerUser
from openapi_server import util


class SymbolUploadsList200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, file_name: str=None, file_size: float=None, origin: str=None, status: str=None, symbol_type: str=None, symbol_upload_id: str=None, symbols_uploaded: List[SymbolUploadsList200ResponseInnerSymbolsUploadedInner]=None, timestamp: datetime=None, user: SymbolUploadsList200ResponseInnerUser=None):
        """SymbolUploadsList200ResponseInner - a model defined in OpenAPI

        :param app_id: The app_id of this SymbolUploadsList200ResponseInner.
        :param file_name: The file_name of this SymbolUploadsList200ResponseInner.
        :param file_size: The file_size of this SymbolUploadsList200ResponseInner.
        :param origin: The origin of this SymbolUploadsList200ResponseInner.
        :param status: The status of this SymbolUploadsList200ResponseInner.
        :param symbol_type: The symbol_type of this SymbolUploadsList200ResponseInner.
        :param symbol_upload_id: The symbol_upload_id of this SymbolUploadsList200ResponseInner.
        :param symbols_uploaded: The symbols_uploaded of this SymbolUploadsList200ResponseInner.
        :param timestamp: The timestamp of this SymbolUploadsList200ResponseInner.
        :param user: The user of this SymbolUploadsList200ResponseInner.
        """
        self.openapi_types = {
            'app_id': str,
            'file_name': str,
            'file_size': float,
            'origin': str,
            'status': str,
            'symbol_type': str,
            'symbol_upload_id': str,
            'symbols_uploaded': List[SymbolUploadsList200ResponseInnerSymbolsUploadedInner],
            'timestamp': datetime,
            'user': SymbolUploadsList200ResponseInnerUser
        }

        self.attribute_map = {
            'app_id': 'app_id',
            'file_name': 'file_name',
            'file_size': 'file_size',
            'origin': 'origin',
            'status': 'status',
            'symbol_type': 'symbol_type',
            'symbol_upload_id': 'symbol_upload_id',
            'symbols_uploaded': 'symbols_uploaded',
            'timestamp': 'timestamp',
            'user': 'user'
        }

        self._app_id = app_id
        self._file_name = file_name
        self._file_size = file_size
        self._origin = origin
        self._status = status
        self._symbol_type = symbol_type
        self._symbol_upload_id = symbol_upload_id
        self._symbols_uploaded = symbols_uploaded
        self._timestamp = timestamp
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SymbolUploadsList200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The symbolUploads_list_200_response_inner of this SymbolUploadsList200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this SymbolUploadsList200ResponseInner.

        The application that this symbol upload belongs to

        :return: The app_id of this SymbolUploadsList200ResponseInner.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this SymbolUploadsList200ResponseInner.

        The application that this symbol upload belongs to

        :param app_id: The app_id of this SymbolUploadsList200ResponseInner.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def file_name(self):
        """Gets the file_name of this SymbolUploadsList200ResponseInner.

        The file name for the symbol upload

        :return: The file_name of this SymbolUploadsList200ResponseInner.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this SymbolUploadsList200ResponseInner.

        The file name for the symbol upload

        :param file_name: The file_name of this SymbolUploadsList200ResponseInner.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def file_size(self):
        """Gets the file_size of this SymbolUploadsList200ResponseInner.

        The size of the file in Mebibytes. This may be 0 until the status is indexed

        :return: The file_size of this SymbolUploadsList200ResponseInner.
        :rtype: float
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this SymbolUploadsList200ResponseInner.

        The size of the file in Mebibytes. This may be 0 until the status is indexed

        :param file_size: The file_size of this SymbolUploadsList200ResponseInner.
        :type file_size: float
        """

        self._file_size = file_size

    @property
    def origin(self):
        """Gets the origin of this SymbolUploadsList200ResponseInner.

        The origin of the symbol upload

        :return: The origin of this SymbolUploadsList200ResponseInner.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this SymbolUploadsList200ResponseInner.

        The origin of the symbol upload

        :param origin: The origin of this SymbolUploadsList200ResponseInner.
        :type origin: str
        """
        allowed_values = ["User", "System"]  # noqa: E501
        if origin not in allowed_values:
            raise ValueError(
                "Invalid value for `origin` ({0}), must be one of {1}"
                .format(origin, allowed_values)
            )

        self._origin = origin

    @property
    def status(self):
        """Gets the status of this SymbolUploadsList200ResponseInner.

        The current status for the symbol upload

        :return: The status of this SymbolUploadsList200ResponseInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SymbolUploadsList200ResponseInner.

        The current status for the symbol upload

        :param status: The status of this SymbolUploadsList200ResponseInner.
        :type status: str
        """
        allowed_values = ["created", "committed", "aborted", "processing", "indexed", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def symbol_type(self):
        """Gets the symbol_type of this SymbolUploadsList200ResponseInner.

        The type of the symbol for the current symbol upload

        :return: The symbol_type of this SymbolUploadsList200ResponseInner.
        :rtype: str
        """
        return self._symbol_type

    @symbol_type.setter
    def symbol_type(self, symbol_type):
        """Sets the symbol_type of this SymbolUploadsList200ResponseInner.

        The type of the symbol for the current symbol upload

        :param symbol_type: The symbol_type of this SymbolUploadsList200ResponseInner.
        :type symbol_type: str
        """
        allowed_values = ["Apple", "JavaScript", "Breakpad", "AndroidProguard", "UWP"]  # noqa: E501
        if symbol_type not in allowed_values:
            raise ValueError(
                "Invalid value for `symbol_type` ({0}), must be one of {1}"
                .format(symbol_type, allowed_values)
            )

        self._symbol_type = symbol_type

    @property
    def symbol_upload_id(self):
        """Gets the symbol_upload_id of this SymbolUploadsList200ResponseInner.

        The id for the current symbol upload

        :return: The symbol_upload_id of this SymbolUploadsList200ResponseInner.
        :rtype: str
        """
        return self._symbol_upload_id

    @symbol_upload_id.setter
    def symbol_upload_id(self, symbol_upload_id):
        """Sets the symbol_upload_id of this SymbolUploadsList200ResponseInner.

        The id for the current symbol upload

        :param symbol_upload_id: The symbol_upload_id of this SymbolUploadsList200ResponseInner.
        :type symbol_upload_id: str
        """
        if symbol_upload_id is None:
            raise ValueError("Invalid value for `symbol_upload_id`, must not be `None`")

        self._symbol_upload_id = symbol_upload_id

    @property
    def symbols_uploaded(self):
        """Gets the symbols_uploaded of this SymbolUploadsList200ResponseInner.

        The symbols found in the upload. This may be empty until the status is indexed

        :return: The symbols_uploaded of this SymbolUploadsList200ResponseInner.
        :rtype: List[SymbolUploadsList200ResponseInnerSymbolsUploadedInner]
        """
        return self._symbols_uploaded

    @symbols_uploaded.setter
    def symbols_uploaded(self, symbols_uploaded):
        """Sets the symbols_uploaded of this SymbolUploadsList200ResponseInner.

        The symbols found in the upload. This may be empty until the status is indexed

        :param symbols_uploaded: The symbols_uploaded of this SymbolUploadsList200ResponseInner.
        :type symbols_uploaded: List[SymbolUploadsList200ResponseInnerSymbolsUploadedInner]
        """

        self._symbols_uploaded = symbols_uploaded

    @property
    def timestamp(self):
        """Gets the timestamp of this SymbolUploadsList200ResponseInner.

        When the symbol upload was committed, or last transaction time if not committed

        :return: The timestamp of this SymbolUploadsList200ResponseInner.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this SymbolUploadsList200ResponseInner.

        When the symbol upload was committed, or last transaction time if not committed

        :param timestamp: The timestamp of this SymbolUploadsList200ResponseInner.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def user(self):
        """Gets the user of this SymbolUploadsList200ResponseInner.


        :return: The user of this SymbolUploadsList200ResponseInner.
        :rtype: SymbolUploadsList200ResponseInnerUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this SymbolUploadsList200ResponseInner.


        :param user: The user of this SymbolUploadsList200ResponseInner.
        :type user: SymbolUploadsList200ResponseInnerUser
        """

        self._user = user
