# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccessKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_by: str=None, created_time: float=None, description: str=None, expires: float=None, friendly_name: str=None, id: str=None, is_session: bool=None, name: str=None):
        """AccessKey - a model defined in OpenAPI

        :param created_by: The created_by of this AccessKey.
        :param created_time: The created_time of this AccessKey.
        :param description: The description of this AccessKey.
        :param expires: The expires of this AccessKey.
        :param friendly_name: The friendly_name of this AccessKey.
        :param id: The id of this AccessKey.
        :param is_session: The is_session of this AccessKey.
        :param name: The name of this AccessKey.
        """
        self.openapi_types = {
            'created_by': str,
            'created_time': float,
            'description': str,
            'expires': float,
            'friendly_name': str,
            'id': str,
            'is_session': bool,
            'name': str
        }

        self.attribute_map = {
            'created_by': 'createdBy',
            'created_time': 'createdTime',
            'description': 'description',
            'expires': 'expires',
            'friendly_name': 'friendlyName',
            'id': 'id',
            'is_session': 'isSession',
            'name': 'name'
        }

        self._created_by = created_by
        self._created_time = created_time
        self._description = description
        self._expires = expires
        self._friendly_name = friendly_name
        self._id = id
        self._is_session = is_session
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessKey of this AccessKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_by(self):
        """Gets the created_by of this AccessKey.

        Account name of creator.

        :return: The created_by of this AccessKey.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AccessKey.

        Account name of creator.

        :param created_by: The created_by of this AccessKey.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def created_time(self):
        """Gets the created_time of this AccessKey.

        Created time of access key

        :return: The created_time of this AccessKey.
        :rtype: float
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this AccessKey.

        Created time of access key

        :param created_time: The created_time of this AccessKey.
        :type created_time: float
        """

        self._created_time = created_time

    @property
    def description(self):
        """Gets the description of this AccessKey.

        Description of access key

        :return: The description of this AccessKey.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccessKey.

        Description of access key

        :param description: The description of this AccessKey.
        :type description: str
        """

        self._description = description

    @property
    def expires(self):
        """Gets the expires of this AccessKey.

        Time of expiry of access key

        :return: The expires of this AccessKey.
        :rtype: float
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this AccessKey.

        Time of expiry of access key

        :param expires: The expires of this AccessKey.
        :type expires: float
        """

        self._expires = expires

    @property
    def friendly_name(self):
        """Gets the friendly_name of this AccessKey.

        Friendly name of access key

        :return: The friendly_name of this AccessKey.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this AccessKey.

        Friendly name of access key

        :param friendly_name: The friendly_name of this AccessKey.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def id(self):
        """Gets the id of this AccessKey.

        Id of accessKey

        :return: The id of this AccessKey.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccessKey.

        Id of accessKey

        :param id: The id of this AccessKey.
        :type id: str
        """

        self._id = id

    @property
    def is_session(self):
        """Gets the is_session of this AccessKey.

        Legacy property which indicate if accessKey was created from session

        :return: The is_session of this AccessKey.
        :rtype: bool
        """
        return self._is_session

    @is_session.setter
    def is_session(self, is_session):
        """Sets the is_session of this AccessKey.

        Legacy property which indicate if accessKey was created from session

        :param is_session: The is_session of this AccessKey.
        :type is_session: bool
        """

        self._is_session = is_session

    @property
    def name(self):
        """Gets the name of this AccessKey.

        Key of access key

        :return: The name of this AccessKey.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccessKey.

        Key of access key

        :param name: The name of this AccessKey.
        :type name: str
        """

        self._name = name
