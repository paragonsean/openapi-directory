# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alert_bug_tracker_repo_owner import AlertBugTrackerRepoOwner
from openapi_server import util


class AlertBugTrackerReposResultRepositoriesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, id: str=None, name: str=None, owner: AlertBugTrackerRepoOwner=None, private: bool=None, url: str=None):
        """AlertBugTrackerReposResultRepositoriesInner - a model defined in OpenAPI

        :param description: The description of this AlertBugTrackerReposResultRepositoriesInner.
        :param id: The id of this AlertBugTrackerReposResultRepositoriesInner.
        :param name: The name of this AlertBugTrackerReposResultRepositoriesInner.
        :param owner: The owner of this AlertBugTrackerReposResultRepositoriesInner.
        :param private: The private of this AlertBugTrackerReposResultRepositoriesInner.
        :param url: The url of this AlertBugTrackerReposResultRepositoriesInner.
        """
        self.openapi_types = {
            'description': str,
            'id': str,
            'name': str,
            'owner': AlertBugTrackerRepoOwner,
            'private': bool,
            'url': str
        }

        self.attribute_map = {
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'owner': 'owner',
            'private': 'private',
            'url': 'url'
        }

        self._description = description
        self._id = id
        self._name = name
        self._owner = owner
        self._private = private
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertBugTrackerReposResultRepositoriesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlertBugTrackerReposResult_repositories_inner of this AlertBugTrackerReposResultRepositoriesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this AlertBugTrackerReposResultRepositoriesInner.


        :return: The description of this AlertBugTrackerReposResultRepositoriesInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AlertBugTrackerReposResultRepositoriesInner.


        :param description: The description of this AlertBugTrackerReposResultRepositoriesInner.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this AlertBugTrackerReposResultRepositoriesInner.


        :return: The id of this AlertBugTrackerReposResultRepositoriesInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AlertBugTrackerReposResultRepositoriesInner.


        :param id: The id of this AlertBugTrackerReposResultRepositoriesInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this AlertBugTrackerReposResultRepositoriesInner.


        :return: The name of this AlertBugTrackerReposResultRepositoriesInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AlertBugTrackerReposResultRepositoriesInner.


        :param name: The name of this AlertBugTrackerReposResultRepositoriesInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this AlertBugTrackerReposResultRepositoriesInner.


        :return: The owner of this AlertBugTrackerReposResultRepositoriesInner.
        :rtype: AlertBugTrackerRepoOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this AlertBugTrackerReposResultRepositoriesInner.


        :param owner: The owner of this AlertBugTrackerReposResultRepositoriesInner.
        :type owner: AlertBugTrackerRepoOwner
        """

        self._owner = owner

    @property
    def private(self):
        """Gets the private of this AlertBugTrackerReposResultRepositoriesInner.


        :return: The private of this AlertBugTrackerReposResultRepositoriesInner.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this AlertBugTrackerReposResultRepositoriesInner.


        :param private: The private of this AlertBugTrackerReposResultRepositoriesInner.
        :type private: bool
        """

        self._private = private

    @property
    def url(self):
        """Gets the url of this AlertBugTrackerReposResultRepositoriesInner.


        :return: The url of this AlertBugTrackerReposResultRepositoriesInner.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AlertBugTrackerReposResultRepositoriesInner.


        :param url: The url of this AlertBugTrackerReposResultRepositoriesInner.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
