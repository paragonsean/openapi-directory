# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestRunSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completed: bool=None, _date: str=None, failed: float=None, passed: float=None, status_description: str=None):
        """TestRunSummary - a model defined in OpenAPI

        :param completed: The completed of this TestRunSummary.
        :param _date: The _date of this TestRunSummary.
        :param failed: The failed of this TestRunSummary.
        :param passed: The passed of this TestRunSummary.
        :param status_description: The status_description of this TestRunSummary.
        """
        self.openapi_types = {
            'completed': bool,
            '_date': str,
            'failed': float,
            'passed': float,
            'status_description': str
        }

        self.attribute_map = {
            'completed': 'completed',
            '_date': 'date',
            'failed': 'failed',
            'passed': 'passed',
            'status_description': 'statusDescription'
        }

        self._completed = completed
        self.__date = _date
        self._failed = failed
        self._passed = passed
        self._status_description = status_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestRunSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Test_Run_Summary of this TestRunSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completed(self):
        """Gets the completed of this TestRunSummary.

        Tells whether the test run has completed

        :return: The completed of this TestRunSummary.
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this TestRunSummary.

        Tells whether the test run has completed

        :param completed: The completed of this TestRunSummary.
        :type completed: bool
        """

        self._completed = completed

    @property
    def _date(self):
        """Gets the _date of this TestRunSummary.

        Date of the test run.

        :return: The _date of this TestRunSummary.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this TestRunSummary.

        Date of the test run.

        :param _date: The _date of this TestRunSummary.
        :type _date: str
        """

        self.__date = _date

    @property
    def failed(self):
        """Gets the failed of this TestRunSummary.

        Number of failed tests

        :return: The failed of this TestRunSummary.
        :rtype: float
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this TestRunSummary.

        Number of failed tests

        :param failed: The failed of this TestRunSummary.
        :type failed: float
        """

        self._failed = failed

    @property
    def passed(self):
        """Gets the passed of this TestRunSummary.

        Number of passed tests

        :return: The passed of this TestRunSummary.
        :rtype: float
        """
        return self._passed

    @passed.setter
    def passed(self, passed):
        """Sets the passed of this TestRunSummary.

        Number of passed tests

        :param passed: The passed of this TestRunSummary.
        :type passed: float
        """

        self._passed = passed

    @property
    def status_description(self):
        """Gets the status_description of this TestRunSummary.

        Human-readable status of the test run.

        :return: The status_description of this TestRunSummary.
        :rtype: str
        """
        return self._status_description

    @status_description.setter
    def status_description(self, status_description):
        """Sets the status_description of this TestRunSummary.

        Human-readable status of the test run.

        :param status_description: The status_description of this TestRunSummary.
        :type status_description: str
        """

        self._status_description = status_description
