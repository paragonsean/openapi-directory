# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SymbolUploadBeginResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiration_date: datetime=None, symbol_upload_id: str=None, upload_url: str=None):
        """SymbolUploadBeginResponse - a model defined in OpenAPI

        :param expiration_date: The expiration_date of this SymbolUploadBeginResponse.
        :param symbol_upload_id: The symbol_upload_id of this SymbolUploadBeginResponse.
        :param upload_url: The upload_url of this SymbolUploadBeginResponse.
        """
        self.openapi_types = {
            'expiration_date': datetime,
            'symbol_upload_id': str,
            'upload_url': str
        }

        self.attribute_map = {
            'expiration_date': 'expiration_date',
            'symbol_upload_id': 'symbol_upload_id',
            'upload_url': 'upload_url'
        }

        self._expiration_date = expiration_date
        self._symbol_upload_id = symbol_upload_id
        self._upload_url = upload_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SymbolUploadBeginResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SymbolUploadBeginResponse of this SymbolUploadBeginResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiration_date(self):
        """Gets the expiration_date of this SymbolUploadBeginResponse.

        Describes how long the upload_url is valid

        :return: The expiration_date of this SymbolUploadBeginResponse.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this SymbolUploadBeginResponse.

        Describes how long the upload_url is valid

        :param expiration_date: The expiration_date of this SymbolUploadBeginResponse.
        :type expiration_date: datetime
        """
        if expiration_date is None:
            raise ValueError("Invalid value for `expiration_date`, must not be `None`")

        self._expiration_date = expiration_date

    @property
    def symbol_upload_id(self):
        """Gets the symbol_upload_id of this SymbolUploadBeginResponse.

        The id for the current upload

        :return: The symbol_upload_id of this SymbolUploadBeginResponse.
        :rtype: str
        """
        return self._symbol_upload_id

    @symbol_upload_id.setter
    def symbol_upload_id(self, symbol_upload_id):
        """Sets the symbol_upload_id of this SymbolUploadBeginResponse.

        The id for the current upload

        :param symbol_upload_id: The symbol_upload_id of this SymbolUploadBeginResponse.
        :type symbol_upload_id: str
        """
        if symbol_upload_id is None:
            raise ValueError("Invalid value for `symbol_upload_id`, must not be `None`")

        self._symbol_upload_id = symbol_upload_id

    @property
    def upload_url(self):
        """Gets the upload_url of this SymbolUploadBeginResponse.

        The URL where the client needs to upload the symbol blob to

        :return: The upload_url of this SymbolUploadBeginResponse.
        :rtype: str
        """
        return self._upload_url

    @upload_url.setter
    def upload_url(self, upload_url):
        """Sets the upload_url of this SymbolUploadBeginResponse.

        The URL where the client needs to upload the symbol blob to

        :param upload_url: The upload_url of this SymbolUploadBeginResponse.
        :type upload_url: str
        """
        if upload_url is None:
            raise ValueError("Invalid value for `upload_url`, must not be `None`")

        self._upload_url = upload_url
