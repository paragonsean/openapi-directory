# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrganizationsList200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, name: str=None, origin: str=None):
        """OrganizationsList200ResponseInner - a model defined in OpenAPI

        :param display_name: The display_name of this OrganizationsList200ResponseInner.
        :param name: The name of this OrganizationsList200ResponseInner.
        :param origin: The origin of this OrganizationsList200ResponseInner.
        """
        self.openapi_types = {
            'display_name': str,
            'name': str,
            'origin': str
        }

        self.attribute_map = {
            'display_name': 'display_name',
            'name': 'name',
            'origin': 'origin'
        }

        self._display_name = display_name
        self._name = name
        self._origin = origin

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrganizationsList200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The organizations_list_200_response_inner of this OrganizationsList200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this OrganizationsList200ResponseInner.

        The display name of the organization

        :return: The display_name of this OrganizationsList200ResponseInner.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this OrganizationsList200ResponseInner.

        The display name of the organization

        :param display_name: The display_name of this OrganizationsList200ResponseInner.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def name(self):
        """Gets the name of this OrganizationsList200ResponseInner.

        The slug name of the organization

        :return: The name of this OrganizationsList200ResponseInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganizationsList200ResponseInner.

        The slug name of the organization

        :param name: The name of this OrganizationsList200ResponseInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def origin(self):
        """Gets the origin of this OrganizationsList200ResponseInner.

        The creation origin of this organization

        :return: The origin of this OrganizationsList200ResponseInner.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this OrganizationsList200ResponseInner.

        The creation origin of this organization

        :param origin: The origin of this OrganizationsList200ResponseInner.
        :type origin: str
        """
        allowed_values = ["appcenter", "hockeyapp"]  # noqa: E501
        if origin not in allowed_values:
            raise ValueError(
                "Invalid value for `origin` ({0}), must be one of {1}"
                .format(origin, allowed_values)
            )

        self._origin = origin
