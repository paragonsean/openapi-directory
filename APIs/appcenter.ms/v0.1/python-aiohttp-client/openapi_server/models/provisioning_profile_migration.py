# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProvisioningProfileMigration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bundle_id: str=None, expired_at: str=None, is_appex: bool=None, name: str=None, team_identifier: str=None, type: int=None, udids: List[str]=None, url: str=None):
        """ProvisioningProfileMigration - a model defined in OpenAPI

        :param bundle_id: The bundle_id of this ProvisioningProfileMigration.
        :param expired_at: The expired_at of this ProvisioningProfileMigration.
        :param is_appex: The is_appex of this ProvisioningProfileMigration.
        :param name: The name of this ProvisioningProfileMigration.
        :param team_identifier: The team_identifier of this ProvisioningProfileMigration.
        :param type: The type of this ProvisioningProfileMigration.
        :param udids: The udids of this ProvisioningProfileMigration.
        :param url: The url of this ProvisioningProfileMigration.
        """
        self.openapi_types = {
            'bundle_id': str,
            'expired_at': str,
            'is_appex': bool,
            'name': str,
            'team_identifier': str,
            'type': int,
            'udids': List[str],
            'url': str
        }

        self.attribute_map = {
            'bundle_id': 'bundle_id',
            'expired_at': 'expired_at',
            'is_appex': 'is_appex',
            'name': 'name',
            'team_identifier': 'team_identifier',
            'type': 'type',
            'udids': 'udids',
            'url': 'url'
        }

        self._bundle_id = bundle_id
        self._expired_at = expired_at
        self._is_appex = is_appex
        self._name = name
        self._team_identifier = team_identifier
        self._type = type
        self._udids = udids
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProvisioningProfileMigration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProvisioningProfileMigration of this ProvisioningProfileMigration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bundle_id(self):
        """Gets the bundle_id of this ProvisioningProfileMigration.

        The bundle/application identifier.

        :return: The bundle_id of this ProvisioningProfileMigration.
        :rtype: str
        """
        return self._bundle_id

    @bundle_id.setter
    def bundle_id(self, bundle_id):
        """Sets the bundle_id of this ProvisioningProfileMigration.

        The bundle/application identifier.

        :param bundle_id: The bundle_id of this ProvisioningProfileMigration.
        :type bundle_id: str
        """
        if bundle_id is None:
            raise ValueError("Invalid value for `bundle_id`, must not be `None`")

        self._bundle_id = bundle_id

    @property
    def expired_at(self):
        """Gets the expired_at of this ProvisioningProfileMigration.

        The provisioning profile's expiration date in RFC 3339 format, i.e. 2017-07-21T17:32:28Z.

        :return: The expired_at of this ProvisioningProfileMigration.
        :rtype: str
        """
        return self._expired_at

    @expired_at.setter
    def expired_at(self, expired_at):
        """Sets the expired_at of this ProvisioningProfileMigration.

        The provisioning profile's expiration date in RFC 3339 format, i.e. 2017-07-21T17:32:28Z.

        :param expired_at: The expired_at of this ProvisioningProfileMigration.
        :type expired_at: str
        """

        self._expired_at = expired_at

    @property
    def is_appex(self):
        """Gets the is_appex of this ProvisioningProfileMigration.

        A boolean value that indicates whether the provisioning profile represents an app extension.

        :return: The is_appex of this ProvisioningProfileMigration.
        :rtype: bool
        """
        return self._is_appex

    @is_appex.setter
    def is_appex(self, is_appex):
        """Sets the is_appex of this ProvisioningProfileMigration.

        A boolean value that indicates whether the provisioning profile represents an app extension.

        :param is_appex: The is_appex of this ProvisioningProfileMigration.
        :type is_appex: bool
        """
        if is_appex is None:
            raise ValueError("Invalid value for `is_appex`, must not be `None`")

        self._is_appex = is_appex

    @property
    def name(self):
        """Gets the name of this ProvisioningProfileMigration.

        The name of the provisioning profile.

        :return: The name of this ProvisioningProfileMigration.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProvisioningProfileMigration.

        The name of the provisioning profile.

        :param name: The name of this ProvisioningProfileMigration.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def team_identifier(self):
        """Gets the team_identifier of this ProvisioningProfileMigration.

        The team identifier.

        :return: The team_identifier of this ProvisioningProfileMigration.
        :rtype: str
        """
        return self._team_identifier

    @team_identifier.setter
    def team_identifier(self, team_identifier):
        """Sets the team_identifier of this ProvisioningProfileMigration.

        The team identifier.

        :param team_identifier: The team_identifier of this ProvisioningProfileMigration.
        :type team_identifier: str
        """
        if team_identifier is None:
            raise ValueError("Invalid value for `team_identifier`, must not be `None`")

        self._team_identifier = team_identifier

    @property
    def type(self):
        """Gets the type of this ProvisioningProfileMigration.

        The type of provisoning profile.

        :return: The type of this ProvisioningProfileMigration.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProvisioningProfileMigration.

        The type of provisoning profile.

        :param type: The type of this ProvisioningProfileMigration.
        :type type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def udids(self):
        """Gets the udids of this ProvisioningProfileMigration.

        A list of UDIDs of provisioned devices.

        :return: The udids of this ProvisioningProfileMigration.
        :rtype: List[str]
        """
        return self._udids

    @udids.setter
    def udids(self, udids):
        """Sets the udids of this ProvisioningProfileMigration.

        A list of UDIDs of provisioned devices.

        :param udids: The udids of this ProvisioningProfileMigration.
        :type udids: List[str]
        """

        self._udids = udids

    @property
    def url(self):
        """Gets the url of this ProvisioningProfileMigration.

        A provisioning profile URL that indicates where to download it from.

        :return: The url of this ProvisioningProfileMigration.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ProvisioningProfileMigration.

        A provisioning profile URL that indicates where to download it from.

        :param url: The url of this ProvisioningProfileMigration.
        :type url: str
        """

        self._url = url
