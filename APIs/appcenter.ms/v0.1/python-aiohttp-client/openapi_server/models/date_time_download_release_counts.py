# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_time_download_release_counts_counts_inner import DateTimeDownloadReleaseCountsCountsInner
from openapi_server import util


class DateTimeDownloadReleaseCounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, counts: List[DateTimeDownloadReleaseCountsCountsInner]=None, total: int=None, unique: int=None):
        """DateTimeDownloadReleaseCounts - a model defined in OpenAPI

        :param counts: The counts of this DateTimeDownloadReleaseCounts.
        :param total: The total of this DateTimeDownloadReleaseCounts.
        :param unique: The unique of this DateTimeDownloadReleaseCounts.
        """
        self.openapi_types = {
            'counts': List[DateTimeDownloadReleaseCountsCountsInner],
            'total': int,
            'unique': int
        }

        self.attribute_map = {
            'counts': 'counts',
            'total': 'total',
            'unique': 'unique'
        }

        self._counts = counts
        self._total = total
        self._unique = unique

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DateTimeDownloadReleaseCounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DateTimeDownloadReleaseCounts of this DateTimeDownloadReleaseCounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def counts(self):
        """Gets the counts of this DateTimeDownloadReleaseCounts.

        Release counts per day.

        :return: The counts of this DateTimeDownloadReleaseCounts.
        :rtype: List[DateTimeDownloadReleaseCountsCountsInner]
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this DateTimeDownloadReleaseCounts.

        Release counts per day.

        :param counts: The counts of this DateTimeDownloadReleaseCounts.
        :type counts: List[DateTimeDownloadReleaseCountsCountsInner]
        """

        self._counts = counts

    @property
    def total(self):
        """Gets the total of this DateTimeDownloadReleaseCounts.


        :return: The total of this DateTimeDownloadReleaseCounts.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this DateTimeDownloadReleaseCounts.


        :param total: The total of this DateTimeDownloadReleaseCounts.
        :type total: int
        """

        self._total = total

    @property
    def unique(self):
        """Gets the unique of this DateTimeDownloadReleaseCounts.


        :return: The unique of this DateTimeDownloadReleaseCounts.
        :rtype: int
        """
        return self._unique

    @unique.setter
    def unique(self, unique):
        """Sets the unique of this DateTimeDownloadReleaseCounts.


        :param unique: The unique of this DateTimeDownloadReleaseCounts.
        :type unique: int
        """

        self._unique = unique
