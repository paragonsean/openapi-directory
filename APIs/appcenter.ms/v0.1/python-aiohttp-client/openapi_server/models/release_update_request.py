# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.releases_get_latest_by_distribution_group200_response_build import ReleasesGetLatestByDistributionGroup200ResponseBuild
from openapi_server.models.releases_update_request_destinations_inner import ReleasesUpdateRequestDestinationsInner
from openapi_server.models.releases_update_request_metadata import ReleasesUpdateRequestMetadata
from openapi_server import util


class ReleaseUpdateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build: ReleasesGetLatestByDistributionGroup200ResponseBuild=None, destination_id: str=None, destination_name: str=None, destination_type: str=None, destinations: List[ReleasesUpdateRequestDestinationsInner]=None, distribution_group_id: str=None, distribution_group_name: str=None, mandatory_update: bool=None, metadata: ReleasesUpdateRequestMetadata=None, notify_testers: bool=True, release_notes: str=None):
        """ReleaseUpdateRequest - a model defined in OpenAPI

        :param build: The build of this ReleaseUpdateRequest.
        :param destination_id: The destination_id of this ReleaseUpdateRequest.
        :param destination_name: The destination_name of this ReleaseUpdateRequest.
        :param destination_type: The destination_type of this ReleaseUpdateRequest.
        :param destinations: The destinations of this ReleaseUpdateRequest.
        :param distribution_group_id: The distribution_group_id of this ReleaseUpdateRequest.
        :param distribution_group_name: The distribution_group_name of this ReleaseUpdateRequest.
        :param mandatory_update: The mandatory_update of this ReleaseUpdateRequest.
        :param metadata: The metadata of this ReleaseUpdateRequest.
        :param notify_testers: The notify_testers of this ReleaseUpdateRequest.
        :param release_notes: The release_notes of this ReleaseUpdateRequest.
        """
        self.openapi_types = {
            'build': ReleasesGetLatestByDistributionGroup200ResponseBuild,
            'destination_id': str,
            'destination_name': str,
            'destination_type': str,
            'destinations': List[ReleasesUpdateRequestDestinationsInner],
            'distribution_group_id': str,
            'distribution_group_name': str,
            'mandatory_update': bool,
            'metadata': ReleasesUpdateRequestMetadata,
            'notify_testers': bool,
            'release_notes': str
        }

        self.attribute_map = {
            'build': 'build',
            'destination_id': 'destination_id',
            'destination_name': 'destination_name',
            'destination_type': 'destination_type',
            'destinations': 'destinations',
            'distribution_group_id': 'distribution_group_id',
            'distribution_group_name': 'distribution_group_name',
            'mandatory_update': 'mandatory_update',
            'metadata': 'metadata',
            'notify_testers': 'notify_testers',
            'release_notes': 'release_notes'
        }

        self._build = build
        self._destination_id = destination_id
        self._destination_name = destination_name
        self._destination_type = destination_type
        self._destinations = destinations
        self._distribution_group_id = distribution_group_id
        self._distribution_group_name = distribution_group_name
        self._mandatory_update = mandatory_update
        self._metadata = metadata
        self._notify_testers = notify_testers
        self._release_notes = release_notes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReleaseUpdateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReleaseUpdateRequest of this ReleaseUpdateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build(self):
        """Gets the build of this ReleaseUpdateRequest.


        :return: The build of this ReleaseUpdateRequest.
        :rtype: ReleasesGetLatestByDistributionGroup200ResponseBuild
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this ReleaseUpdateRequest.


        :param build: The build of this ReleaseUpdateRequest.
        :type build: ReleasesGetLatestByDistributionGroup200ResponseBuild
        """

        self._build = build

    @property
    def destination_id(self):
        """Gets the destination_id of this ReleaseUpdateRequest.

        OBSOLETE. Will be removed in future releases - use destinations instead. Id of a destination. The release will be associated with this destination. If the destination doesn't exist a 400 is returned. If both destination name and id are passed, the id is taking precedence.

        :return: The destination_id of this ReleaseUpdateRequest.
        :rtype: str
        """
        return self._destination_id

    @destination_id.setter
    def destination_id(self, destination_id):
        """Sets the destination_id of this ReleaseUpdateRequest.

        OBSOLETE. Will be removed in future releases - use destinations instead. Id of a destination. The release will be associated with this destination. If the destination doesn't exist a 400 is returned. If both destination name and id are passed, the id is taking precedence.

        :param destination_id: The destination_id of this ReleaseUpdateRequest.
        :type destination_id: str
        """

        self._destination_id = destination_id

    @property
    def destination_name(self):
        """Gets the destination_name of this ReleaseUpdateRequest.

        OBSOLETE. Will be removed in future releases - use destinations instead. Name of a destination. The release will be associated with this destination. If the destination doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.

        :return: The destination_name of this ReleaseUpdateRequest.
        :rtype: str
        """
        return self._destination_name

    @destination_name.setter
    def destination_name(self, destination_name):
        """Sets the destination_name of this ReleaseUpdateRequest.

        OBSOLETE. Will be removed in future releases - use destinations instead. Name of a destination. The release will be associated with this destination. If the destination doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.

        :param destination_name: The destination_name of this ReleaseUpdateRequest.
        :type destination_name: str
        """

        self._destination_name = destination_name

    @property
    def destination_type(self):
        """Gets the destination_type of this ReleaseUpdateRequest.

        Not used anymore.

        :return: The destination_type of this ReleaseUpdateRequest.
        :rtype: str
        """
        return self._destination_type

    @destination_type.setter
    def destination_type(self, destination_type):
        """Sets the destination_type of this ReleaseUpdateRequest.

        Not used anymore.

        :param destination_type: The destination_type of this ReleaseUpdateRequest.
        :type destination_type: str
        """

        self._destination_type = destination_type

    @property
    def destinations(self):
        """Gets the destinations of this ReleaseUpdateRequest.

        Distribute this release under the following list of destinations (store groups or distribution groups).

        :return: The destinations of this ReleaseUpdateRequest.
        :rtype: List[ReleasesUpdateRequestDestinationsInner]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this ReleaseUpdateRequest.

        Distribute this release under the following list of destinations (store groups or distribution groups).

        :param destinations: The destinations of this ReleaseUpdateRequest.
        :type destinations: List[ReleasesUpdateRequestDestinationsInner]
        """

        self._destinations = destinations

    @property
    def distribution_group_id(self):
        """Gets the distribution_group_id of this ReleaseUpdateRequest.

        OBSOLETE. Will be removed in future releases - use destinations instead. Id of a distribution group. The release will be associated with this distribution group. If the distribution group doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.

        :return: The distribution_group_id of this ReleaseUpdateRequest.
        :rtype: str
        """
        return self._distribution_group_id

    @distribution_group_id.setter
    def distribution_group_id(self, distribution_group_id):
        """Sets the distribution_group_id of this ReleaseUpdateRequest.

        OBSOLETE. Will be removed in future releases - use destinations instead. Id of a distribution group. The release will be associated with this distribution group. If the distribution group doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.

        :param distribution_group_id: The distribution_group_id of this ReleaseUpdateRequest.
        :type distribution_group_id: str
        """

        self._distribution_group_id = distribution_group_id

    @property
    def distribution_group_name(self):
        """Gets the distribution_group_name of this ReleaseUpdateRequest.

        OBSOLETE. Will be removed in future releases - use destinations instead. Name of a distribution group. The release will be associated with this distribution group. If the distribution group doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.

        :return: The distribution_group_name of this ReleaseUpdateRequest.
        :rtype: str
        """
        return self._distribution_group_name

    @distribution_group_name.setter
    def distribution_group_name(self, distribution_group_name):
        """Sets the distribution_group_name of this ReleaseUpdateRequest.

        OBSOLETE. Will be removed in future releases - use destinations instead. Name of a distribution group. The release will be associated with this distribution group. If the distribution group doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.

        :param distribution_group_name: The distribution_group_name of this ReleaseUpdateRequest.
        :type distribution_group_name: str
        """

        self._distribution_group_name = distribution_group_name

    @property
    def mandatory_update(self):
        """Gets the mandatory_update of this ReleaseUpdateRequest.

        A boolean which determines whether this version should be a mandatory update or not.

        :return: The mandatory_update of this ReleaseUpdateRequest.
        :rtype: bool
        """
        return self._mandatory_update

    @mandatory_update.setter
    def mandatory_update(self, mandatory_update):
        """Sets the mandatory_update of this ReleaseUpdateRequest.

        A boolean which determines whether this version should be a mandatory update or not.

        :param mandatory_update: The mandatory_update of this ReleaseUpdateRequest.
        :type mandatory_update: bool
        """

        self._mandatory_update = mandatory_update

    @property
    def metadata(self):
        """Gets the metadata of this ReleaseUpdateRequest.


        :return: The metadata of this ReleaseUpdateRequest.
        :rtype: ReleasesUpdateRequestMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ReleaseUpdateRequest.


        :param metadata: The metadata of this ReleaseUpdateRequest.
        :type metadata: ReleasesUpdateRequestMetadata
        """

        self._metadata = metadata

    @property
    def notify_testers(self):
        """Gets the notify_testers of this ReleaseUpdateRequest.

        A boolean which determines whether to notify testers of a new release, default to true.

        :return: The notify_testers of this ReleaseUpdateRequest.
        :rtype: bool
        """
        return self._notify_testers

    @notify_testers.setter
    def notify_testers(self, notify_testers):
        """Sets the notify_testers of this ReleaseUpdateRequest.

        A boolean which determines whether to notify testers of a new release, default to true.

        :param notify_testers: The notify_testers of this ReleaseUpdateRequest.
        :type notify_testers: bool
        """

        self._notify_testers = notify_testers

    @property
    def release_notes(self):
        """Gets the release_notes of this ReleaseUpdateRequest.

        Release notes for this release.

        :return: The release_notes of this ReleaseUpdateRequest.
        :rtype: str
        """
        return self._release_notes

    @release_notes.setter
    def release_notes(self, release_notes):
        """Sets the release_notes of this ReleaseUpdateRequest.

        Release notes for this release.

        :param release_notes: The release_notes of this ReleaseUpdateRequest.
        :type release_notes: str
        """

        self._release_notes = release_notes
