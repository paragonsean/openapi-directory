# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, is_latest: bool=None, publishing_status: str=None, type: str=None, destination_type: str=None, display_name: str=None):
        """ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner - a model defined in OpenAPI

        :param id: The id of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.
        :param name: The name of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.
        :param is_latest: The is_latest of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.
        :param publishing_status: The publishing_status of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.
        :param type: The type of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.
        :param destination_type: The destination_type of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.
        :param display_name: The display_name of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'is_latest': bool,
            'publishing_status': str,
            'type': str,
            'destination_type': str,
            'display_name': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'is_latest': 'is_latest',
            'publishing_status': 'publishing_status',
            'type': 'type',
            'destination_type': 'destination_type',
            'display_name': 'display_name'
        }

        self._id = id
        self._name = name
        self._is_latest = is_latest
        self._publishing_status = publishing_status
        self._type = type
        self._destination_type = destination_type
        self._display_name = display_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The releases_getLatestByDistributionGroup_200_response_destinations_inner of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.

        Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.

        :return: The id of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.

        Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.

        :param id: The id of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.

        Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.

        :return: The name of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.

        Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.

        :param name: The name of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.
        :type name: str
        """

        self._name = name

    @property
    def is_latest(self):
        """Gets the is_latest of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.

        Is the containing release the latest one in this distribution store.

        :return: The is_latest of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.
        :rtype: bool
        """
        return self._is_latest

    @is_latest.setter
    def is_latest(self, is_latest):
        """Sets the is_latest of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.

        Is the containing release the latest one in this distribution store.

        :param is_latest: The is_latest of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.
        :type is_latest: bool
        """

        self._is_latest = is_latest

    @property
    def publishing_status(self):
        """Gets the publishing_status of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.

        publishing status of the release in the store.

        :return: The publishing_status of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.
        :rtype: str
        """
        return self._publishing_status

    @publishing_status.setter
    def publishing_status(self, publishing_status):
        """Sets the publishing_status of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.

        publishing status of the release in the store.

        :param publishing_status: The publishing_status of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.
        :type publishing_status: str
        """

        self._publishing_status = publishing_status

    @property
    def type(self):
        """Gets the type of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.

        type of the distribution store currently stores type can be intune, googleplay or windows.

        :return: The type of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.

        type of the distribution store currently stores type can be intune, googleplay or windows.

        :param type: The type of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.
        :type type: str
        """
        allowed_values = ["intune", "googleplay", "apple", "none"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def destination_type(self):
        """Gets the destination_type of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.

        Destination can be either store or group.

        :return: The destination_type of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.
        :rtype: str
        """
        return self._destination_type

    @destination_type.setter
    def destination_type(self, destination_type):
        """Sets the destination_type of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.

        Destination can be either store or group.

        :param destination_type: The destination_type of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.
        :type destination_type: str
        """
        allowed_values = ["group", "store", "tester"]  # noqa: E501
        if destination_type not in allowed_values:
            raise ValueError(
                "Invalid value for `destination_type` ({0}), must be one of {1}"
                .format(destination_type, allowed_values)
            )

        self._destination_type = destination_type

    @property
    def display_name(self):
        """Gets the display_name of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.

        Display name for the group or tester

        :return: The display_name of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.

        Display name for the group or tester

        :param display_name: The display_name of this ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.
        :type display_name: str
        """

        self._display_name = display_name
