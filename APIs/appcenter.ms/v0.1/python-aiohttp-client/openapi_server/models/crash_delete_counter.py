# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CrashDeleteCounter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, attachments_deleted: int=None, blobs_failed: int=None, blobs_succeeded: int=None, crash_group_id: str=None, crash_id: str=None, crashes_deleted: int=None):
        """CrashDeleteCounter - a model defined in OpenAPI

        :param app_id: The app_id of this CrashDeleteCounter.
        :param attachments_deleted: The attachments_deleted of this CrashDeleteCounter.
        :param blobs_failed: The blobs_failed of this CrashDeleteCounter.
        :param blobs_succeeded: The blobs_succeeded of this CrashDeleteCounter.
        :param crash_group_id: The crash_group_id of this CrashDeleteCounter.
        :param crash_id: The crash_id of this CrashDeleteCounter.
        :param crashes_deleted: The crashes_deleted of this CrashDeleteCounter.
        """
        self.openapi_types = {
            'app_id': str,
            'attachments_deleted': int,
            'blobs_failed': int,
            'blobs_succeeded': int,
            'crash_group_id': str,
            'crash_id': str,
            'crashes_deleted': int
        }

        self.attribute_map = {
            'app_id': 'app_id',
            'attachments_deleted': 'attachments_deleted',
            'blobs_failed': 'blobs_failed',
            'blobs_succeeded': 'blobs_succeeded',
            'crash_group_id': 'crash_group_id',
            'crash_id': 'crash_id',
            'crashes_deleted': 'crashes_deleted'
        }

        self._app_id = app_id
        self._attachments_deleted = attachments_deleted
        self._blobs_failed = blobs_failed
        self._blobs_succeeded = blobs_succeeded
        self._crash_group_id = crash_group_id
        self._crash_id = crash_id
        self._crashes_deleted = crashes_deleted

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CrashDeleteCounter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CrashDeleteCounter of this CrashDeleteCounter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this CrashDeleteCounter.


        :return: The app_id of this CrashDeleteCounter.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this CrashDeleteCounter.


        :param app_id: The app_id of this CrashDeleteCounter.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def attachments_deleted(self):
        """Gets the attachments_deleted of this CrashDeleteCounter.


        :return: The attachments_deleted of this CrashDeleteCounter.
        :rtype: int
        """
        return self._attachments_deleted

    @attachments_deleted.setter
    def attachments_deleted(self, attachments_deleted):
        """Sets the attachments_deleted of this CrashDeleteCounter.


        :param attachments_deleted: The attachments_deleted of this CrashDeleteCounter.
        :type attachments_deleted: int
        """

        self._attachments_deleted = attachments_deleted

    @property
    def blobs_failed(self):
        """Gets the blobs_failed of this CrashDeleteCounter.


        :return: The blobs_failed of this CrashDeleteCounter.
        :rtype: int
        """
        return self._blobs_failed

    @blobs_failed.setter
    def blobs_failed(self, blobs_failed):
        """Sets the blobs_failed of this CrashDeleteCounter.


        :param blobs_failed: The blobs_failed of this CrashDeleteCounter.
        :type blobs_failed: int
        """

        self._blobs_failed = blobs_failed

    @property
    def blobs_succeeded(self):
        """Gets the blobs_succeeded of this CrashDeleteCounter.


        :return: The blobs_succeeded of this CrashDeleteCounter.
        :rtype: int
        """
        return self._blobs_succeeded

    @blobs_succeeded.setter
    def blobs_succeeded(self, blobs_succeeded):
        """Sets the blobs_succeeded of this CrashDeleteCounter.


        :param blobs_succeeded: The blobs_succeeded of this CrashDeleteCounter.
        :type blobs_succeeded: int
        """

        self._blobs_succeeded = blobs_succeeded

    @property
    def crash_group_id(self):
        """Gets the crash_group_id of this CrashDeleteCounter.


        :return: The crash_group_id of this CrashDeleteCounter.
        :rtype: str
        """
        return self._crash_group_id

    @crash_group_id.setter
    def crash_group_id(self, crash_group_id):
        """Sets the crash_group_id of this CrashDeleteCounter.


        :param crash_group_id: The crash_group_id of this CrashDeleteCounter.
        :type crash_group_id: str
        """

        self._crash_group_id = crash_group_id

    @property
    def crash_id(self):
        """Gets the crash_id of this CrashDeleteCounter.


        :return: The crash_id of this CrashDeleteCounter.
        :rtype: str
        """
        return self._crash_id

    @crash_id.setter
    def crash_id(self, crash_id):
        """Sets the crash_id of this CrashDeleteCounter.


        :param crash_id: The crash_id of this CrashDeleteCounter.
        :type crash_id: str
        """

        self._crash_id = crash_id

    @property
    def crashes_deleted(self):
        """Gets the crashes_deleted of this CrashDeleteCounter.


        :return: The crashes_deleted of this CrashDeleteCounter.
        :rtype: int
        """
        return self._crashes_deleted

    @crashes_deleted.setter
    def crashes_deleted(self, crashes_deleted):
        """Sets the crashes_deleted of this CrashDeleteCounter.


        :param crashes_deleted: The crashes_deleted of this CrashDeleteCounter.
        :type crashes_deleted: int
        """

        self._crashes_deleted = crashes_deleted
