# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserApiTokensNew201Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_token: str=None, created_at: str=None, description: str=None, id: str=None, scope: List[str]=None):
        """UserApiTokensNew201Response - a model defined in OpenAPI

        :param api_token: The api_token of this UserApiTokensNew201Response.
        :param created_at: The created_at of this UserApiTokensNew201Response.
        :param description: The description of this UserApiTokensNew201Response.
        :param id: The id of this UserApiTokensNew201Response.
        :param scope: The scope of this UserApiTokensNew201Response.
        """
        self.openapi_types = {
            'api_token': str,
            'created_at': str,
            'description': str,
            'id': str,
            'scope': List[str]
        }

        self.attribute_map = {
            'api_token': 'api_token',
            'created_at': 'created_at',
            'description': 'description',
            'id': 'id',
            'scope': 'scope'
        }

        self._api_token = api_token
        self._created_at = created_at
        self._description = description
        self._id = id
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserApiTokensNew201Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The userApiTokens_new_201_response of this UserApiTokensNew201Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_token(self):
        """Gets the api_token of this UserApiTokensNew201Response.

        The api token generated will not be accessible again

        :return: The api_token of this UserApiTokensNew201Response.
        :rtype: str
        """
        return self._api_token

    @api_token.setter
    def api_token(self, api_token):
        """Sets the api_token of this UserApiTokensNew201Response.

        The api token generated will not be accessible again

        :param api_token: The api_token of this UserApiTokensNew201Response.
        :type api_token: str
        """
        if api_token is None:
            raise ValueError("Invalid value for `api_token`, must not be `None`")

        self._api_token = api_token

    @property
    def created_at(self):
        """Gets the created_at of this UserApiTokensNew201Response.

        The creation time

        :return: The created_at of this UserApiTokensNew201Response.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UserApiTokensNew201Response.

        The creation time

        :param created_at: The created_at of this UserApiTokensNew201Response.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this UserApiTokensNew201Response.

        The description of the token

        :return: The description of this UserApiTokensNew201Response.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UserApiTokensNew201Response.

        The description of the token

        :param description: The description of this UserApiTokensNew201Response.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this UserApiTokensNew201Response.

        The unique id (UUID) of the api token

        :return: The id of this UserApiTokensNew201Response.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserApiTokensNew201Response.

        The unique id (UUID) of the api token

        :param id: The id of this UserApiTokensNew201Response.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def scope(self):
        """Gets the scope of this UserApiTokensNew201Response.

        The scope for this token.

        :return: The scope of this UserApiTokensNew201Response.
        :rtype: List[str]
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this UserApiTokensNew201Response.

        The scope for this token.

        :param scope: The scope of this UserApiTokensNew201Response.
        :type scope: List[str]
        """
        allowed_values = ["all", "viewer"]  # noqa: E501
        if not set(scope).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `scope` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(scope) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._scope = scope
