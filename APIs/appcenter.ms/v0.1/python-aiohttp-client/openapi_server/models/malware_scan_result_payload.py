# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MalwareScanResultPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, request_id: str=None, result: str=None):
        """MalwareScanResultPayload - a model defined in OpenAPI

        :param request_id: The request_id of this MalwareScanResultPayload.
        :param result: The result of this MalwareScanResultPayload.
        """
        self.openapi_types = {
            'request_id': str,
            'result': str
        }

        self.attribute_map = {
            'request_id': 'requestId',
            'result': 'result'
        }

        self._request_id = request_id
        self._result = result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MalwareScanResultPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MalwareScanResultPayload of this MalwareScanResultPayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request_id(self):
        """Gets the request_id of this MalwareScanResultPayload.

        Scan request identifier

        :return: The request_id of this MalwareScanResultPayload.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this MalwareScanResultPayload.

        Scan request identifier

        :param request_id: The request_id of this MalwareScanResultPayload.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")

        self._request_id = request_id

    @property
    def result(self):
        """Gets the result of this MalwareScanResultPayload.

        Scan result

        :return: The result of this MalwareScanResultPayload.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this MalwareScanResultPayload.

        Scan result

        :param result: The result of this MalwareScanResultPayload.
        :type result: str
        """
        allowed_values = ["clean", "infected", "error"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"
                .format(result, allowed_values)
            )

        self._result = result
