# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrganizationResponseManagement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar_url: str=None, created_at: str=None, display_name: str=None, id: str=None, name: str=None, origin: str=None, updated_at: str=None, feature_flags: List[str]=None, email: str=None):
        """OrganizationResponseManagement - a model defined in OpenAPI

        :param avatar_url: The avatar_url of this OrganizationResponseManagement.
        :param created_at: The created_at of this OrganizationResponseManagement.
        :param display_name: The display_name of this OrganizationResponseManagement.
        :param id: The id of this OrganizationResponseManagement.
        :param name: The name of this OrganizationResponseManagement.
        :param origin: The origin of this OrganizationResponseManagement.
        :param updated_at: The updated_at of this OrganizationResponseManagement.
        :param feature_flags: The feature_flags of this OrganizationResponseManagement.
        :param email: The email of this OrganizationResponseManagement.
        """
        self.openapi_types = {
            'avatar_url': str,
            'created_at': str,
            'display_name': str,
            'id': str,
            'name': str,
            'origin': str,
            'updated_at': str,
            'feature_flags': List[str],
            'email': str
        }

        self.attribute_map = {
            'avatar_url': 'avatar_url',
            'created_at': 'created_at',
            'display_name': 'display_name',
            'id': 'id',
            'name': 'name',
            'origin': 'origin',
            'updated_at': 'updated_at',
            'feature_flags': 'feature_flags',
            'email': 'email'
        }

        self._avatar_url = avatar_url
        self._created_at = created_at
        self._display_name = display_name
        self._id = id
        self._name = name
        self._origin = origin
        self._updated_at = updated_at
        self._feature_flags = feature_flags
        self._email = email

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrganizationResponseManagement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrganizationResponseManagement of this OrganizationResponseManagement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar_url(self):
        """Gets the avatar_url of this OrganizationResponseManagement.

        The URL to a user-uploaded Avatar image

        :return: The avatar_url of this OrganizationResponseManagement.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this OrganizationResponseManagement.

        The URL to a user-uploaded Avatar image

        :param avatar_url: The avatar_url of this OrganizationResponseManagement.
        :type avatar_url: str
        """

        self._avatar_url = avatar_url

    @property
    def created_at(self):
        """Gets the created_at of this OrganizationResponseManagement.

        The date when the organization was created

        :return: The created_at of this OrganizationResponseManagement.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this OrganizationResponseManagement.

        The date when the organization was created

        :param created_at: The created_at of this OrganizationResponseManagement.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def display_name(self):
        """Gets the display_name of this OrganizationResponseManagement.

        The display name of the organization

        :return: The display_name of this OrganizationResponseManagement.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this OrganizationResponseManagement.

        The display name of the organization

        :param display_name: The display_name of this OrganizationResponseManagement.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this OrganizationResponseManagement.

        The internal unique id (UUID) of the organization.

        :return: The id of this OrganizationResponseManagement.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrganizationResponseManagement.

        The internal unique id (UUID) of the organization.

        :param id: The id of this OrganizationResponseManagement.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this OrganizationResponseManagement.

        The slug name of the organization

        :return: The name of this OrganizationResponseManagement.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganizationResponseManagement.

        The slug name of the organization

        :param name: The name of this OrganizationResponseManagement.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def origin(self):
        """Gets the origin of this OrganizationResponseManagement.

        The creation origin of this organization

        :return: The origin of this OrganizationResponseManagement.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this OrganizationResponseManagement.

        The creation origin of this organization

        :param origin: The origin of this OrganizationResponseManagement.
        :type origin: str
        """
        allowed_values = ["appcenter", "hockeyapp"]  # noqa: E501
        if origin not in allowed_values:
            raise ValueError(
                "Invalid value for `origin` ({0}), must be one of {1}"
                .format(origin, allowed_values)
            )

        self._origin = origin

    @property
    def updated_at(self):
        """Gets the updated_at of this OrganizationResponseManagement.

        The date when the organization was updated

        :return: The updated_at of this OrganizationResponseManagement.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this OrganizationResponseManagement.

        The date when the organization was updated

        :param updated_at: The updated_at of this OrganizationResponseManagement.
        :type updated_at: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def feature_flags(self):
        """Gets the feature_flags of this OrganizationResponseManagement.

        The feature flags that are enabled for this organization

        :return: The feature_flags of this OrganizationResponseManagement.
        :rtype: List[str]
        """
        return self._feature_flags

    @feature_flags.setter
    def feature_flags(self, feature_flags):
        """Sets the feature_flags of this OrganizationResponseManagement.

        The feature flags that are enabled for this organization

        :param feature_flags: The feature_flags of this OrganizationResponseManagement.
        :type feature_flags: List[str]
        """

        self._feature_flags = feature_flags

    @property
    def email(self):
        """Gets the email of this OrganizationResponseManagement.

        The organization email, if the app was synced from HockeyApp

        :return: The email of this OrganizationResponseManagement.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this OrganizationResponseManagement.

        The organization email, if the app was synced from HockeyApp

        :param email: The email of this OrganizationResponseManagement.
        :type email: str
        """

        self._email = email
