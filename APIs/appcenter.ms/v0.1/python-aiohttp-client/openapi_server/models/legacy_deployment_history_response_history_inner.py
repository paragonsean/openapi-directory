# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.legacy_code_push_release_response_package import LegacyCodePushReleaseResponsePackage
from openapi_server import util


class LegacyDeploymentHistoryResponseHistoryInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_of: LegacyCodePushReleaseResponsePackage=None, description: str=None, original_deployment: str=None, original_label: str=None, package_hash: str=None):
        """LegacyDeploymentHistoryResponseHistoryInner - a model defined in OpenAPI

        :param all_of: The all_of of this LegacyDeploymentHistoryResponseHistoryInner.
        :param description: The description of this LegacyDeploymentHistoryResponseHistoryInner.
        :param original_deployment: The original_deployment of this LegacyDeploymentHistoryResponseHistoryInner.
        :param original_label: The original_label of this LegacyDeploymentHistoryResponseHistoryInner.
        :param package_hash: The package_hash of this LegacyDeploymentHistoryResponseHistoryInner.
        """
        self.openapi_types = {
            'all_of': LegacyCodePushReleaseResponsePackage,
            'description': str,
            'original_deployment': str,
            'original_label': str,
            'package_hash': str
        }

        self.attribute_map = {
            'all_of': 'allOf',
            'description': 'description',
            'original_deployment': 'originalDeployment',
            'original_label': 'originalLabel',
            'package_hash': 'packageHash'
        }

        self._all_of = all_of
        self._description = description
        self._original_deployment = original_deployment
        self._original_label = original_label
        self._package_hash = package_hash

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LegacyDeploymentHistoryResponseHistoryInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LegacyDeploymentHistoryResponse_history_inner of this LegacyDeploymentHistoryResponseHistoryInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_of(self):
        """Gets the all_of of this LegacyDeploymentHistoryResponseHistoryInner.


        :return: The all_of of this LegacyDeploymentHistoryResponseHistoryInner.
        :rtype: LegacyCodePushReleaseResponsePackage
        """
        return self._all_of

    @all_of.setter
    def all_of(self, all_of):
        """Sets the all_of of this LegacyDeploymentHistoryResponseHistoryInner.


        :param all_of: The all_of of this LegacyDeploymentHistoryResponseHistoryInner.
        :type all_of: LegacyCodePushReleaseResponsePackage
        """

        self._all_of = all_of

    @property
    def description(self):
        """Gets the description of this LegacyDeploymentHistoryResponseHistoryInner.

        The description of the release.

        :return: The description of this LegacyDeploymentHistoryResponseHistoryInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LegacyDeploymentHistoryResponseHistoryInner.

        The description of the release.

        :param description: The description of this LegacyDeploymentHistoryResponseHistoryInner.
        :type description: str
        """

        self._description = description

    @property
    def original_deployment(self):
        """Gets the original_deployment of this LegacyDeploymentHistoryResponseHistoryInner.

        The original deployment of the release, if it's ever been promoted.

        :return: The original_deployment of this LegacyDeploymentHistoryResponseHistoryInner.
        :rtype: str
        """
        return self._original_deployment

    @original_deployment.setter
    def original_deployment(self, original_deployment):
        """Sets the original_deployment of this LegacyDeploymentHistoryResponseHistoryInner.

        The original deployment of the release, if it's ever been promoted.

        :param original_deployment: The original_deployment of this LegacyDeploymentHistoryResponseHistoryInner.
        :type original_deployment: str
        """

        self._original_deployment = original_deployment

    @property
    def original_label(self):
        """Gets the original_label of this LegacyDeploymentHistoryResponseHistoryInner.

        The original label of the release, if it's ever been updated.

        :return: The original_label of this LegacyDeploymentHistoryResponseHistoryInner.
        :rtype: str
        """
        return self._original_label

    @original_label.setter
    def original_label(self, original_label):
        """Sets the original_label of this LegacyDeploymentHistoryResponseHistoryInner.

        The original label of the release, if it's ever been updated.

        :param original_label: The original_label of this LegacyDeploymentHistoryResponseHistoryInner.
        :type original_label: str
        """

        self._original_label = original_label

    @property
    def package_hash(self):
        """Gets the package_hash of this LegacyDeploymentHistoryResponseHistoryInner.

        The package's hash value (internal use).

        :return: The package_hash of this LegacyDeploymentHistoryResponseHistoryInner.
        :rtype: str
        """
        return self._package_hash

    @package_hash.setter
    def package_hash(self, package_hash):
        """Sets the package_hash of this LegacyDeploymentHistoryResponseHistoryInner.

        The package's hash value (internal use).

        :param package_hash: The package_hash of this LegacyDeploymentHistoryResponseHistoryInner.
        :type package_hash: str
        """

        self._package_hash = package_hash
