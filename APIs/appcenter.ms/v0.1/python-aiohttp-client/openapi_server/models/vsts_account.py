# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vsts_account_projects_inner import VSTSAccountProjectsInner
from openapi_server.models.vsts_account_user import VSTSAccountUser
from openapi_server import util


class VSTSAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, account_name: str=None, account_status: str=None, account_type: str=None, account_uri: str=None, projects: List[VSTSAccountProjectsInner]=None, user: VSTSAccountUser=None):
        """VSTSAccount - a model defined in OpenAPI

        :param account_id: The account_id of this VSTSAccount.
        :param account_name: The account_name of this VSTSAccount.
        :param account_status: The account_status of this VSTSAccount.
        :param account_type: The account_type of this VSTSAccount.
        :param account_uri: The account_uri of this VSTSAccount.
        :param projects: The projects of this VSTSAccount.
        :param user: The user of this VSTSAccount.
        """
        self.openapi_types = {
            'account_id': str,
            'account_name': str,
            'account_status': str,
            'account_type': str,
            'account_uri': str,
            'projects': List[VSTSAccountProjectsInner],
            'user': VSTSAccountUser
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'account_name': 'accountName',
            'account_status': 'accountStatus',
            'account_type': 'accountType',
            'account_uri': 'accountUri',
            'projects': 'projects',
            'user': 'user'
        }

        self._account_id = account_id
        self._account_name = account_name
        self._account_status = account_status
        self._account_type = account_type
        self._account_uri = account_uri
        self._projects = projects
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VSTSAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VSTSAccount of this VSTSAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this VSTSAccount.

        Account id

        :return: The account_id of this VSTSAccount.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this VSTSAccount.

        Account id

        :param account_id: The account_id of this VSTSAccount.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def account_name(self):
        """Gets the account_name of this VSTSAccount.

        Account name

        :return: The account_name of this VSTSAccount.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this VSTSAccount.

        Account name

        :param account_name: The account_name of this VSTSAccount.
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def account_status(self):
        """Gets the account_status of this VSTSAccount.

        Account status

        :return: The account_status of this VSTSAccount.
        :rtype: str
        """
        return self._account_status

    @account_status.setter
    def account_status(self, account_status):
        """Sets the account_status of this VSTSAccount.

        Account status

        :param account_status: The account_status of this VSTSAccount.
        :type account_status: str
        """

        self._account_status = account_status

    @property
    def account_type(self):
        """Gets the account_type of this VSTSAccount.

        Account type

        :return: The account_type of this VSTSAccount.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this VSTSAccount.

        Account type

        :param account_type: The account_type of this VSTSAccount.
        :type account_type: str
        """

        self._account_type = account_type

    @property
    def account_uri(self):
        """Gets the account_uri of this VSTSAccount.

        Account uri

        :return: The account_uri of this VSTSAccount.
        :rtype: str
        """
        return self._account_uri

    @account_uri.setter
    def account_uri(self, account_uri):
        """Sets the account_uri of this VSTSAccount.

        Account uri

        :param account_uri: The account_uri of this VSTSAccount.
        :type account_uri: str
        """

        self._account_uri = account_uri

    @property
    def projects(self):
        """Gets the projects of this VSTSAccount.

        Account projects

        :return: The projects of this VSTSAccount.
        :rtype: List[VSTSAccountProjectsInner]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this VSTSAccount.

        Account projects

        :param projects: The projects of this VSTSAccount.
        :type projects: List[VSTSAccountProjectsInner]
        """

        self._projects = projects

    @property
    def user(self):
        """Gets the user of this VSTSAccount.


        :return: The user of this VSTSAccount.
        :rtype: VSTSAccountUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this VSTSAccount.


        :param user: The user of this VSTSAccount.
        :type user: VSTSAccountUser
        """

        self._user = user
