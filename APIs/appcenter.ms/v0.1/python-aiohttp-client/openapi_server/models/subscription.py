# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subscription_tier import SubscriptionTier
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, concurrent_devices_limit: int=None, days_left: float=None, ends_at: str=None, id: str=None, running_devices: int=None, starts_at: str=None, tier: SubscriptionTier=None):
        """Subscription - a model defined in OpenAPI

        :param active: The active of this Subscription.
        :param concurrent_devices_limit: The concurrent_devices_limit of this Subscription.
        :param days_left: The days_left of this Subscription.
        :param ends_at: The ends_at of this Subscription.
        :param id: The id of this Subscription.
        :param running_devices: The running_devices of this Subscription.
        :param starts_at: The starts_at of this Subscription.
        :param tier: The tier of this Subscription.
        """
        self.openapi_types = {
            'active': bool,
            'concurrent_devices_limit': int,
            'days_left': float,
            'ends_at': str,
            'id': str,
            'running_devices': int,
            'starts_at': str,
            'tier': SubscriptionTier
        }

        self.attribute_map = {
            'active': 'active',
            'concurrent_devices_limit': 'concurrentDevicesLimit',
            'days_left': 'daysLeft',
            'ends_at': 'endsAt',
            'id': 'id',
            'running_devices': 'runningDevices',
            'starts_at': 'startsAt',
            'tier': 'tier'
        }

        self._active = active
        self._concurrent_devices_limit = concurrent_devices_limit
        self._days_left = days_left
        self._ends_at = ends_at
        self._id = id
        self._running_devices = running_devices
        self._starts_at = starts_at
        self._tier = tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this Subscription.

        Is the subscription currently active?

        :return: The active of this Subscription.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Subscription.

        Is the subscription currently active?

        :param active: The active of this Subscription.
        :type active: bool
        """

        self._active = active

    @property
    def concurrent_devices_limit(self):
        """Gets the concurrent_devices_limit of this Subscription.

        Customer limits on concurrent devices

        :return: The concurrent_devices_limit of this Subscription.
        :rtype: int
        """
        return self._concurrent_devices_limit

    @concurrent_devices_limit.setter
    def concurrent_devices_limit(self, concurrent_devices_limit):
        """Sets the concurrent_devices_limit of this Subscription.

        Customer limits on concurrent devices

        :param concurrent_devices_limit: The concurrent_devices_limit of this Subscription.
        :type concurrent_devices_limit: int
        """

        self._concurrent_devices_limit = concurrent_devices_limit

    @property
    def days_left(self):
        """Gets the days_left of this Subscription.

        The number of days left in the subscription

        :return: The days_left of this Subscription.
        :rtype: float
        """
        return self._days_left

    @days_left.setter
    def days_left(self, days_left):
        """Sets the days_left of this Subscription.

        The number of days left in the subscription

        :param days_left: The days_left of this Subscription.
        :type days_left: float
        """

        self._days_left = days_left

    @property
    def ends_at(self):
        """Gets the ends_at of this Subscription.

        The date the subscription will end or ended

        :return: The ends_at of this Subscription.
        :rtype: str
        """
        return self._ends_at

    @ends_at.setter
    def ends_at(self, ends_at):
        """Sets the ends_at of this Subscription.

        The date the subscription will end or ended

        :param ends_at: The ends_at of this Subscription.
        :type ends_at: str
        """

        self._ends_at = ends_at

    @property
    def id(self):
        """Gets the id of this Subscription.

        Id of the subscription

        :return: The id of this Subscription.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subscription.

        Id of the subscription

        :param id: The id of this Subscription.
        :type id: str
        """

        self._id = id

    @property
    def running_devices(self):
        """Gets the running_devices of this Subscription.

        Current device concurrency utilization

        :return: The running_devices of this Subscription.
        :rtype: int
        """
        return self._running_devices

    @running_devices.setter
    def running_devices(self, running_devices):
        """Sets the running_devices of this Subscription.

        Current device concurrency utilization

        :param running_devices: The running_devices of this Subscription.
        :type running_devices: int
        """

        self._running_devices = running_devices

    @property
    def starts_at(self):
        """Gets the starts_at of this Subscription.

        The date the subscription began

        :return: The starts_at of this Subscription.
        :rtype: str
        """
        return self._starts_at

    @starts_at.setter
    def starts_at(self, starts_at):
        """Sets the starts_at of this Subscription.

        The date the subscription began

        :param starts_at: The starts_at of this Subscription.
        :type starts_at: str
        """

        self._starts_at = starts_at

    @property
    def tier(self):
        """Gets the tier of this Subscription.


        :return: The tier of this Subscription.
        :rtype: SubscriptionTier
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this Subscription.


        :param tier: The tier of this Subscription.
        :type tier: SubscriptionTier
        """

        self._tier = tier
