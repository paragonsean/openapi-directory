# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SymbolsList200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternate_symbol_ids: List[str]=None, app_id: str=None, build: str=None, origin: str=None, platform: str=None, status: str=None, symbol_id: str=None, symbol_upload_id: str=None, type: str=None, url: str=None, version: str=None):
        """SymbolsList200ResponseInner - a model defined in OpenAPI

        :param alternate_symbol_ids: The alternate_symbol_ids of this SymbolsList200ResponseInner.
        :param app_id: The app_id of this SymbolsList200ResponseInner.
        :param build: The build of this SymbolsList200ResponseInner.
        :param origin: The origin of this SymbolsList200ResponseInner.
        :param platform: The platform of this SymbolsList200ResponseInner.
        :param status: The status of this SymbolsList200ResponseInner.
        :param symbol_id: The symbol_id of this SymbolsList200ResponseInner.
        :param symbol_upload_id: The symbol_upload_id of this SymbolsList200ResponseInner.
        :param type: The type of this SymbolsList200ResponseInner.
        :param url: The url of this SymbolsList200ResponseInner.
        :param version: The version of this SymbolsList200ResponseInner.
        """
        self.openapi_types = {
            'alternate_symbol_ids': List[str],
            'app_id': str,
            'build': str,
            'origin': str,
            'platform': str,
            'status': str,
            'symbol_id': str,
            'symbol_upload_id': str,
            'type': str,
            'url': str,
            'version': str
        }

        self.attribute_map = {
            'alternate_symbol_ids': 'alternate_symbol_ids',
            'app_id': 'app_id',
            'build': 'build',
            'origin': 'origin',
            'platform': 'platform',
            'status': 'status',
            'symbol_id': 'symbol_id',
            'symbol_upload_id': 'symbol_upload_id',
            'type': 'type',
            'url': 'url',
            'version': 'version'
        }

        self._alternate_symbol_ids = alternate_symbol_ids
        self._app_id = app_id
        self._build = build
        self._origin = origin
        self._platform = platform
        self._status = status
        self._symbol_id = symbol_id
        self._symbol_upload_id = symbol_upload_id
        self._type = type
        self._url = url
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SymbolsList200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The symbols_list_200_response_inner of this SymbolsList200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternate_symbol_ids(self):
        """Gets the alternate_symbol_ids of this SymbolsList200ResponseInner.

        The other symbols in the same file

        :return: The alternate_symbol_ids of this SymbolsList200ResponseInner.
        :rtype: List[str]
        """
        return self._alternate_symbol_ids

    @alternate_symbol_ids.setter
    def alternate_symbol_ids(self, alternate_symbol_ids):
        """Sets the alternate_symbol_ids of this SymbolsList200ResponseInner.

        The other symbols in the same file

        :param alternate_symbol_ids: The alternate_symbol_ids of this SymbolsList200ResponseInner.
        :type alternate_symbol_ids: List[str]
        """
        if alternate_symbol_ids is None:
            raise ValueError("Invalid value for `alternate_symbol_ids`, must not be `None`")

        self._alternate_symbol_ids = alternate_symbol_ids

    @property
    def app_id(self):
        """Gets the app_id of this SymbolsList200ResponseInner.

        The application that this symbol belongs to

        :return: The app_id of this SymbolsList200ResponseInner.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this SymbolsList200ResponseInner.

        The application that this symbol belongs to

        :param app_id: The app_id of this SymbolsList200ResponseInner.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def build(self):
        """Gets the build of this SymbolsList200ResponseInner.

        The build number. Optional for Apple. Required for Android.

        :return: The build of this SymbolsList200ResponseInner.
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this SymbolsList200ResponseInner.

        The build number. Optional for Apple. Required for Android.

        :param build: The build of this SymbolsList200ResponseInner.
        :type build: str
        """

        self._build = build

    @property
    def origin(self):
        """Gets the origin of this SymbolsList200ResponseInner.

        The origin of the symbol file

        :return: The origin of this SymbolsList200ResponseInner.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this SymbolsList200ResponseInner.

        The origin of the symbol file

        :param origin: The origin of this SymbolsList200ResponseInner.
        :type origin: str
        """
        allowed_values = ["System", "User"]  # noqa: E501
        if origin not in allowed_values:
            raise ValueError(
                "Invalid value for `origin` ({0}), must be one of {1}"
                .format(origin, allowed_values)
            )

        self._origin = origin

    @property
    def platform(self):
        """Gets the platform of this SymbolsList200ResponseInner.

        The platform that this symbol is associated with

        :return: The platform of this SymbolsList200ResponseInner.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this SymbolsList200ResponseInner.

        The platform that this symbol is associated with

        :param platform: The platform of this SymbolsList200ResponseInner.
        :type platform: str
        """
        if platform is None:
            raise ValueError("Invalid value for `platform`, must not be `None`")

        self._platform = platform

    @property
    def status(self):
        """Gets the status of this SymbolsList200ResponseInner.

        Whether the symbol is ignored.

        :return: The status of this SymbolsList200ResponseInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SymbolsList200ResponseInner.

        Whether the symbol is ignored.

        :param status: The status of this SymbolsList200ResponseInner.
        :type status: str
        """
        allowed_values = ["available", "ignored"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def symbol_id(self):
        """Gets the symbol_id of this SymbolsList200ResponseInner.

        The unique id for this symbol (uuid)

        :return: The symbol_id of this SymbolsList200ResponseInner.
        :rtype: str
        """
        return self._symbol_id

    @symbol_id.setter
    def symbol_id(self, symbol_id):
        """Sets the symbol_id of this SymbolsList200ResponseInner.

        The unique id for this symbol (uuid)

        :param symbol_id: The symbol_id of this SymbolsList200ResponseInner.
        :type symbol_id: str
        """
        if symbol_id is None:
            raise ValueError("Invalid value for `symbol_id`, must not be `None`")

        self._symbol_id = symbol_id

    @property
    def symbol_upload_id(self):
        """Gets the symbol_upload_id of this SymbolsList200ResponseInner.

        The id of the symbol upload this symbol belongs to.

        :return: The symbol_upload_id of this SymbolsList200ResponseInner.
        :rtype: str
        """
        return self._symbol_upload_id

    @symbol_upload_id.setter
    def symbol_upload_id(self, symbol_upload_id):
        """Sets the symbol_upload_id of this SymbolsList200ResponseInner.

        The id of the symbol upload this symbol belongs to.

        :param symbol_upload_id: The symbol_upload_id of this SymbolsList200ResponseInner.
        :type symbol_upload_id: str
        """
        if symbol_upload_id is None:
            raise ValueError("Invalid value for `symbol_upload_id`, must not be `None`")

        self._symbol_upload_id = symbol_upload_id

    @property
    def type(self):
        """Gets the type of this SymbolsList200ResponseInner.

        The type of the symbol for the current symbol upload

        :return: The type of this SymbolsList200ResponseInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SymbolsList200ResponseInner.

        The type of the symbol for the current symbol upload

        :param type: The type of this SymbolsList200ResponseInner.
        :type type: str
        """
        allowed_values = ["Apple", "JavaScript", "Breakpad", "AndroidProguard", "UWP"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this SymbolsList200ResponseInner.

        The path name of the symbol file in blob storage

        :return: The url of this SymbolsList200ResponseInner.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SymbolsList200ResponseInner.

        The path name of the symbol file in blob storage

        :param url: The url of this SymbolsList200ResponseInner.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def version(self):
        """Gets the version of this SymbolsList200ResponseInner.

        The version number. Optional for Apple. Required for Android.

        :return: The version of this SymbolsList200ResponseInner.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SymbolsList200ResponseInner.

        The version number. Optional for Apple. Required for Android.

        :param version: The version of this SymbolsList200ResponseInner.
        :type version: str
        """

        self._version = version
