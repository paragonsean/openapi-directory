# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReleasesCreateReleaseUpload201Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, package_asset_id: str=None, token: str=None, upload_domain: str=None, url_encoded_token: str=None):
        """ReleasesCreateReleaseUpload201Response - a model defined in OpenAPI

        :param id: The id of this ReleasesCreateReleaseUpload201Response.
        :param package_asset_id: The package_asset_id of this ReleasesCreateReleaseUpload201Response.
        :param token: The token of this ReleasesCreateReleaseUpload201Response.
        :param upload_domain: The upload_domain of this ReleasesCreateReleaseUpload201Response.
        :param url_encoded_token: The url_encoded_token of this ReleasesCreateReleaseUpload201Response.
        """
        self.openapi_types = {
            'id': str,
            'package_asset_id': str,
            'token': str,
            'upload_domain': str,
            'url_encoded_token': str
        }

        self.attribute_map = {
            'id': 'id',
            'package_asset_id': 'package_asset_id',
            'token': 'token',
            'upload_domain': 'upload_domain',
            'url_encoded_token': 'url_encoded_token'
        }

        self._id = id
        self._package_asset_id = package_asset_id
        self._token = token
        self._upload_domain = upload_domain
        self._url_encoded_token = url_encoded_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReleasesCreateReleaseUpload201Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The releases_createReleaseUpload_201_response of this ReleasesCreateReleaseUpload201Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ReleasesCreateReleaseUpload201Response.

        The ID for the newly created upload. It is going to be required later in the process.

        :return: The id of this ReleasesCreateReleaseUpload201Response.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReleasesCreateReleaseUpload201Response.

        The ID for the newly created upload. It is going to be required later in the process.

        :param id: The id of this ReleasesCreateReleaseUpload201Response.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def package_asset_id(self):
        """Gets the package_asset_id of this ReleasesCreateReleaseUpload201Response.

        The associated asset ID in the file management service associated with this uploaded.

        :return: The package_asset_id of this ReleasesCreateReleaseUpload201Response.
        :rtype: str
        """
        return self._package_asset_id

    @package_asset_id.setter
    def package_asset_id(self, package_asset_id):
        """Sets the package_asset_id of this ReleasesCreateReleaseUpload201Response.

        The associated asset ID in the file management service associated with this uploaded.

        :param package_asset_id: The package_asset_id of this ReleasesCreateReleaseUpload201Response.
        :type package_asset_id: str
        """
        if package_asset_id is None:
            raise ValueError("Invalid value for `package_asset_id`, must not be `None`")

        self._package_asset_id = package_asset_id

    @property
    def token(self):
        """Gets the token of this ReleasesCreateReleaseUpload201Response.

        The access token used for upload permissions.

        :return: The token of this ReleasesCreateReleaseUpload201Response.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ReleasesCreateReleaseUpload201Response.

        The access token used for upload permissions.

        :param token: The token of this ReleasesCreateReleaseUpload201Response.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def upload_domain(self):
        """Gets the upload_domain of this ReleasesCreateReleaseUpload201Response.

        The URL domain used to upload the release.

        :return: The upload_domain of this ReleasesCreateReleaseUpload201Response.
        :rtype: str
        """
        return self._upload_domain

    @upload_domain.setter
    def upload_domain(self, upload_domain):
        """Sets the upload_domain of this ReleasesCreateReleaseUpload201Response.

        The URL domain used to upload the release.

        :param upload_domain: The upload_domain of this ReleasesCreateReleaseUpload201Response.
        :type upload_domain: str
        """
        if upload_domain is None:
            raise ValueError("Invalid value for `upload_domain`, must not be `None`")

        self._upload_domain = upload_domain

    @property
    def url_encoded_token(self):
        """Gets the url_encoded_token of this ReleasesCreateReleaseUpload201Response.

        The access token used for upload permissions (URL encoded to use as a single query parameter).

        :return: The url_encoded_token of this ReleasesCreateReleaseUpload201Response.
        :rtype: str
        """
        return self._url_encoded_token

    @url_encoded_token.setter
    def url_encoded_token(self, url_encoded_token):
        """Sets the url_encoded_token of this ReleasesCreateReleaseUpload201Response.

        The access token used for upload permissions (URL encoded to use as a single query parameter).

        :param url_encoded_token: The url_encoded_token of this ReleasesCreateReleaseUpload201Response.
        :type url_encoded_token: str
        """
        if url_encoded_token is None:
            raise ValueError("Invalid value for `url_encoded_token`, must not be `None`")

        self._url_encoded_token = url_encoded_token
