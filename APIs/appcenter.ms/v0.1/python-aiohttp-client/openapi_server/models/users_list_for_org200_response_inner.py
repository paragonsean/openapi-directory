# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UsersListForOrg200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, email: str=None, joined_at: str=None, name: str=None, role: str=None):
        """UsersListForOrg200ResponseInner - a model defined in OpenAPI

        :param display_name: The display_name of this UsersListForOrg200ResponseInner.
        :param email: The email of this UsersListForOrg200ResponseInner.
        :param joined_at: The joined_at of this UsersListForOrg200ResponseInner.
        :param name: The name of this UsersListForOrg200ResponseInner.
        :param role: The role of this UsersListForOrg200ResponseInner.
        """
        self.openapi_types = {
            'display_name': str,
            'email': str,
            'joined_at': str,
            'name': str,
            'role': str
        }

        self.attribute_map = {
            'display_name': 'display_name',
            'email': 'email',
            'joined_at': 'joined_at',
            'name': 'name',
            'role': 'role'
        }

        self._display_name = display_name
        self._email = email
        self._joined_at = joined_at
        self._name = name
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsersListForOrg200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The users_listForOrg_200_response_inner of this UsersListForOrg200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this UsersListForOrg200ResponseInner.

        The full name of the user. Might for example be first and last name

        :return: The display_name of this UsersListForOrg200ResponseInner.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UsersListForOrg200ResponseInner.

        The full name of the user. Might for example be first and last name

        :param display_name: The display_name of this UsersListForOrg200ResponseInner.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this UsersListForOrg200ResponseInner.

        The email address of the user

        :return: The email of this UsersListForOrg200ResponseInner.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UsersListForOrg200ResponseInner.

        The email address of the user

        :param email: The email of this UsersListForOrg200ResponseInner.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def joined_at(self):
        """Gets the joined_at of this UsersListForOrg200ResponseInner.

        The date when the user joined the organization

        :return: The joined_at of this UsersListForOrg200ResponseInner.
        :rtype: str
        """
        return self._joined_at

    @joined_at.setter
    def joined_at(self, joined_at):
        """Sets the joined_at of this UsersListForOrg200ResponseInner.

        The date when the user joined the organization

        :param joined_at: The joined_at of this UsersListForOrg200ResponseInner.
        :type joined_at: str
        """
        if joined_at is None:
            raise ValueError("Invalid value for `joined_at`, must not be `None`")

        self._joined_at = joined_at

    @property
    def name(self):
        """Gets the name of this UsersListForOrg200ResponseInner.

        The unique name that is used to identify the user.

        :return: The name of this UsersListForOrg200ResponseInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UsersListForOrg200ResponseInner.

        The unique name that is used to identify the user.

        :param name: The name of this UsersListForOrg200ResponseInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def role(self):
        """Gets the role of this UsersListForOrg200ResponseInner.

        The role the user has within the organization

        :return: The role of this UsersListForOrg200ResponseInner.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UsersListForOrg200ResponseInner.

        The role the user has within the organization

        :param role: The role of this UsersListForOrg200ResponseInner.
        :type role: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role
