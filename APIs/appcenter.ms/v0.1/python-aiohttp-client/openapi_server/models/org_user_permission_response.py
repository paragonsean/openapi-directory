# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrgUserPermissionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, org_id: str=None, user_role: str=None):
        """OrgUserPermissionResponse - a model defined in OpenAPI

        :param org_id: The org_id of this OrgUserPermissionResponse.
        :param user_role: The user_role of this OrgUserPermissionResponse.
        """
        self.openapi_types = {
            'org_id': str,
            'user_role': str
        }

        self.attribute_map = {
            'org_id': 'orgId',
            'user_role': 'userRole'
        }

        self._org_id = org_id
        self._user_role = user_role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrgUserPermissionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrgUserPermissionResponse of this OrgUserPermissionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def org_id(self):
        """Gets the org_id of this OrgUserPermissionResponse.

        The unique id (UUID) of the org

        :return: The org_id of this OrgUserPermissionResponse.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this OrgUserPermissionResponse.

        The unique id (UUID) of the org

        :param org_id: The org_id of this OrgUserPermissionResponse.
        :type org_id: str
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")

        self._org_id = org_id

    @property
    def user_role(self):
        """Gets the user_role of this OrgUserPermissionResponse.

        The user role for the org

        :return: The user_role of this OrgUserPermissionResponse.
        :rtype: str
        """
        return self._user_role

    @user_role.setter
    def user_role(self, user_role):
        """Sets the user_role of this OrgUserPermissionResponse.

        The user role for the org

        :param user_role: The user_role of this OrgUserPermissionResponse.
        :type user_role: str
        """
        allowed_values = ["admin", "collaborator"]  # noqa: E501
        if user_role not in allowed_values:
            raise ValueError(
                "Invalid value for `user_role` ({0}), must be one of {1}"
                .format(user_role, allowed_values)
            )

        self._user_role = user_role
