# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PrivateReleaseDetailsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, android_min_api_level: str=None, app_display_name: str=None, app_icon_url: str=None, app_name: str=None, bundle_identifier: str=None, destination_type: str=None, device_family: str=None, distribution_group_id: str=None, download_url: str=None, fingerprint: str=None, id: int=None, install_url: str=None, is_external_build: bool=None, is_provisioning_profile_syncing: bool=None, min_os: str=None, origin: str=None, provisioning_profile_name: str=None, provisioning_profile_type: str=None, publishing_status: str=None, release_notes: str=None, secondary_download_url: str=None, short_version: str=None, size: int=None, status: str=None, uploaded_at: str=None, version: str=None):
        """PrivateReleaseDetailsResponse - a model defined in OpenAPI

        :param android_min_api_level: The android_min_api_level of this PrivateReleaseDetailsResponse.
        :param app_display_name: The app_display_name of this PrivateReleaseDetailsResponse.
        :param app_icon_url: The app_icon_url of this PrivateReleaseDetailsResponse.
        :param app_name: The app_name of this PrivateReleaseDetailsResponse.
        :param bundle_identifier: The bundle_identifier of this PrivateReleaseDetailsResponse.
        :param destination_type: The destination_type of this PrivateReleaseDetailsResponse.
        :param device_family: The device_family of this PrivateReleaseDetailsResponse.
        :param distribution_group_id: The distribution_group_id of this PrivateReleaseDetailsResponse.
        :param download_url: The download_url of this PrivateReleaseDetailsResponse.
        :param fingerprint: The fingerprint of this PrivateReleaseDetailsResponse.
        :param id: The id of this PrivateReleaseDetailsResponse.
        :param install_url: The install_url of this PrivateReleaseDetailsResponse.
        :param is_external_build: The is_external_build of this PrivateReleaseDetailsResponse.
        :param is_provisioning_profile_syncing: The is_provisioning_profile_syncing of this PrivateReleaseDetailsResponse.
        :param min_os: The min_os of this PrivateReleaseDetailsResponse.
        :param origin: The origin of this PrivateReleaseDetailsResponse.
        :param provisioning_profile_name: The provisioning_profile_name of this PrivateReleaseDetailsResponse.
        :param provisioning_profile_type: The provisioning_profile_type of this PrivateReleaseDetailsResponse.
        :param publishing_status: The publishing_status of this PrivateReleaseDetailsResponse.
        :param release_notes: The release_notes of this PrivateReleaseDetailsResponse.
        :param secondary_download_url: The secondary_download_url of this PrivateReleaseDetailsResponse.
        :param short_version: The short_version of this PrivateReleaseDetailsResponse.
        :param size: The size of this PrivateReleaseDetailsResponse.
        :param status: The status of this PrivateReleaseDetailsResponse.
        :param uploaded_at: The uploaded_at of this PrivateReleaseDetailsResponse.
        :param version: The version of this PrivateReleaseDetailsResponse.
        """
        self.openapi_types = {
            'android_min_api_level': str,
            'app_display_name': str,
            'app_icon_url': str,
            'app_name': str,
            'bundle_identifier': str,
            'destination_type': str,
            'device_family': str,
            'distribution_group_id': str,
            'download_url': str,
            'fingerprint': str,
            'id': int,
            'install_url': str,
            'is_external_build': bool,
            'is_provisioning_profile_syncing': bool,
            'min_os': str,
            'origin': str,
            'provisioning_profile_name': str,
            'provisioning_profile_type': str,
            'publishing_status': str,
            'release_notes': str,
            'secondary_download_url': str,
            'short_version': str,
            'size': int,
            'status': str,
            'uploaded_at': str,
            'version': str
        }

        self.attribute_map = {
            'android_min_api_level': 'android_min_api_level',
            'app_display_name': 'app_display_name',
            'app_icon_url': 'app_icon_url',
            'app_name': 'app_name',
            'bundle_identifier': 'bundle_identifier',
            'destination_type': 'destination_type',
            'device_family': 'device_family',
            'distribution_group_id': 'distribution_group_id',
            'download_url': 'download_url',
            'fingerprint': 'fingerprint',
            'id': 'id',
            'install_url': 'install_url',
            'is_external_build': 'is_external_build',
            'is_provisioning_profile_syncing': 'is_provisioning_profile_syncing',
            'min_os': 'min_os',
            'origin': 'origin',
            'provisioning_profile_name': 'provisioning_profile_name',
            'provisioning_profile_type': 'provisioning_profile_type',
            'publishing_status': 'publishing_status',
            'release_notes': 'release_notes',
            'secondary_download_url': 'secondary_download_url',
            'short_version': 'short_version',
            'size': 'size',
            'status': 'status',
            'uploaded_at': 'uploaded_at',
            'version': 'version'
        }

        self._android_min_api_level = android_min_api_level
        self._app_display_name = app_display_name
        self._app_icon_url = app_icon_url
        self._app_name = app_name
        self._bundle_identifier = bundle_identifier
        self._destination_type = destination_type
        self._device_family = device_family
        self._distribution_group_id = distribution_group_id
        self._download_url = download_url
        self._fingerprint = fingerprint
        self._id = id
        self._install_url = install_url
        self._is_external_build = is_external_build
        self._is_provisioning_profile_syncing = is_provisioning_profile_syncing
        self._min_os = min_os
        self._origin = origin
        self._provisioning_profile_name = provisioning_profile_name
        self._provisioning_profile_type = provisioning_profile_type
        self._publishing_status = publishing_status
        self._release_notes = release_notes
        self._secondary_download_url = secondary_download_url
        self._short_version = short_version
        self._size = size
        self._status = status
        self._uploaded_at = uploaded_at
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateReleaseDetailsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateReleaseDetailsResponse of this PrivateReleaseDetailsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def android_min_api_level(self):
        """Gets the android_min_api_level of this PrivateReleaseDetailsResponse.

        The release's minimum required Android API level.

        :return: The android_min_api_level of this PrivateReleaseDetailsResponse.
        :rtype: str
        """
        return self._android_min_api_level

    @android_min_api_level.setter
    def android_min_api_level(self, android_min_api_level):
        """Sets the android_min_api_level of this PrivateReleaseDetailsResponse.

        The release's minimum required Android API level.

        :param android_min_api_level: The android_min_api_level of this PrivateReleaseDetailsResponse.
        :type android_min_api_level: str
        """

        self._android_min_api_level = android_min_api_level

    @property
    def app_display_name(self):
        """Gets the app_display_name of this PrivateReleaseDetailsResponse.

        The app's display name.

        :return: The app_display_name of this PrivateReleaseDetailsResponse.
        :rtype: str
        """
        return self._app_display_name

    @app_display_name.setter
    def app_display_name(self, app_display_name):
        """Sets the app_display_name of this PrivateReleaseDetailsResponse.

        The app's display name.

        :param app_display_name: The app_display_name of this PrivateReleaseDetailsResponse.
        :type app_display_name: str
        """

        self._app_display_name = app_display_name

    @property
    def app_icon_url(self):
        """Gets the app_icon_url of this PrivateReleaseDetailsResponse.

        A URL to the app's icon.

        :return: The app_icon_url of this PrivateReleaseDetailsResponse.
        :rtype: str
        """
        return self._app_icon_url

    @app_icon_url.setter
    def app_icon_url(self, app_icon_url):
        """Sets the app_icon_url of this PrivateReleaseDetailsResponse.

        A URL to the app's icon.

        :param app_icon_url: The app_icon_url of this PrivateReleaseDetailsResponse.
        :type app_icon_url: str
        """

        self._app_icon_url = app_icon_url

    @property
    def app_name(self):
        """Gets the app_name of this PrivateReleaseDetailsResponse.

        The app's name (extracted from the uploaded release).

        :return: The app_name of this PrivateReleaseDetailsResponse.
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this PrivateReleaseDetailsResponse.

        The app's name (extracted from the uploaded release).

        :param app_name: The app_name of this PrivateReleaseDetailsResponse.
        :type app_name: str
        """

        self._app_name = app_name

    @property
    def bundle_identifier(self):
        """Gets the bundle_identifier of this PrivateReleaseDetailsResponse.

        The identifier of the apps bundle.

        :return: The bundle_identifier of this PrivateReleaseDetailsResponse.
        :rtype: str
        """
        return self._bundle_identifier

    @bundle_identifier.setter
    def bundle_identifier(self, bundle_identifier):
        """Sets the bundle_identifier of this PrivateReleaseDetailsResponse.

        The identifier of the apps bundle.

        :param bundle_identifier: The bundle_identifier of this PrivateReleaseDetailsResponse.
        :type bundle_identifier: str
        """

        self._bundle_identifier = bundle_identifier

    @property
    def destination_type(self):
        """Gets the destination_type of this PrivateReleaseDetailsResponse.

        The destination type.<br> <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br> <b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br> 

        :return: The destination_type of this PrivateReleaseDetailsResponse.
        :rtype: str
        """
        return self._destination_type

    @destination_type.setter
    def destination_type(self, destination_type):
        """Sets the destination_type of this PrivateReleaseDetailsResponse.

        The destination type.<br> <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br> <b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br> 

        :param destination_type: The destination_type of this PrivateReleaseDetailsResponse.
        :type destination_type: str
        """
        allowed_values = ["group", "store", "tester"]  # noqa: E501
        if destination_type not in allowed_values:
            raise ValueError(
                "Invalid value for `destination_type` ({0}), must be one of {1}"
                .format(destination_type, allowed_values)
            )

        self._destination_type = destination_type

    @property
    def device_family(self):
        """Gets the device_family of this PrivateReleaseDetailsResponse.

        The release's device family.

        :return: The device_family of this PrivateReleaseDetailsResponse.
        :rtype: str
        """
        return self._device_family

    @device_family.setter
    def device_family(self, device_family):
        """Sets the device_family of this PrivateReleaseDetailsResponse.

        The release's device family.

        :param device_family: The device_family of this PrivateReleaseDetailsResponse.
        :type device_family: str
        """

        self._device_family = device_family

    @property
    def distribution_group_id(self):
        """Gets the distribution_group_id of this PrivateReleaseDetailsResponse.

        the destination where release is distributed

        :return: The distribution_group_id of this PrivateReleaseDetailsResponse.
        :rtype: str
        """
        return self._distribution_group_id

    @distribution_group_id.setter
    def distribution_group_id(self, distribution_group_id):
        """Sets the distribution_group_id of this PrivateReleaseDetailsResponse.

        the destination where release is distributed

        :param distribution_group_id: The distribution_group_id of this PrivateReleaseDetailsResponse.
        :type distribution_group_id: str
        """

        self._distribution_group_id = distribution_group_id

    @property
    def download_url(self):
        """Gets the download_url of this PrivateReleaseDetailsResponse.

        The URL that hosts the binary for this release.

        :return: The download_url of this PrivateReleaseDetailsResponse.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this PrivateReleaseDetailsResponse.

        The URL that hosts the binary for this release.

        :param download_url: The download_url of this PrivateReleaseDetailsResponse.
        :type download_url: str
        """

        self._download_url = download_url

    @property
    def fingerprint(self):
        """Gets the fingerprint of this PrivateReleaseDetailsResponse.

        MD5 checksum of the release binary.

        :return: The fingerprint of this PrivateReleaseDetailsResponse.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this PrivateReleaseDetailsResponse.

        MD5 checksum of the release binary.

        :param fingerprint: The fingerprint of this PrivateReleaseDetailsResponse.
        :type fingerprint: str
        """

        self._fingerprint = fingerprint

    @property
    def id(self):
        """Gets the id of this PrivateReleaseDetailsResponse.

        ID identifying this unique release.

        :return: The id of this PrivateReleaseDetailsResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PrivateReleaseDetailsResponse.

        ID identifying this unique release.

        :param id: The id of this PrivateReleaseDetailsResponse.
        :type id: int
        """

        self._id = id

    @property
    def install_url(self):
        """Gets the install_url of this PrivateReleaseDetailsResponse.

        The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`

        :return: The install_url of this PrivateReleaseDetailsResponse.
        :rtype: str
        """
        return self._install_url

    @install_url.setter
    def install_url(self, install_url):
        """Sets the install_url of this PrivateReleaseDetailsResponse.

        The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`

        :param install_url: The install_url of this PrivateReleaseDetailsResponse.
        :type install_url: str
        """

        self._install_url = install_url

    @property
    def is_external_build(self):
        """Gets the is_external_build of this PrivateReleaseDetailsResponse.

        This value determines if a release is external or not.

        :return: The is_external_build of this PrivateReleaseDetailsResponse.
        :rtype: bool
        """
        return self._is_external_build

    @is_external_build.setter
    def is_external_build(self, is_external_build):
        """Sets the is_external_build of this PrivateReleaseDetailsResponse.

        This value determines if a release is external or not.

        :param is_external_build: The is_external_build of this PrivateReleaseDetailsResponse.
        :type is_external_build: bool
        """

        self._is_external_build = is_external_build

    @property
    def is_provisioning_profile_syncing(self):
        """Gets the is_provisioning_profile_syncing of this PrivateReleaseDetailsResponse.

        A flag that determines whether the release's provisioning profile is still extracted or not.

        :return: The is_provisioning_profile_syncing of this PrivateReleaseDetailsResponse.
        :rtype: bool
        """
        return self._is_provisioning_profile_syncing

    @is_provisioning_profile_syncing.setter
    def is_provisioning_profile_syncing(self, is_provisioning_profile_syncing):
        """Sets the is_provisioning_profile_syncing of this PrivateReleaseDetailsResponse.

        A flag that determines whether the release's provisioning profile is still extracted or not.

        :param is_provisioning_profile_syncing: The is_provisioning_profile_syncing of this PrivateReleaseDetailsResponse.
        :type is_provisioning_profile_syncing: bool
        """

        self._is_provisioning_profile_syncing = is_provisioning_profile_syncing

    @property
    def min_os(self):
        """Gets the min_os of this PrivateReleaseDetailsResponse.

        The release's minimum required operating system.

        :return: The min_os of this PrivateReleaseDetailsResponse.
        :rtype: str
        """
        return self._min_os

    @min_os.setter
    def min_os(self, min_os):
        """Sets the min_os of this PrivateReleaseDetailsResponse.

        The release's minimum required operating system.

        :param min_os: The min_os of this PrivateReleaseDetailsResponse.
        :type min_os: str
        """

        self._min_os = min_os

    @property
    def origin(self):
        """Gets the origin of this PrivateReleaseDetailsResponse.

        The release's origin

        :return: The origin of this PrivateReleaseDetailsResponse.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this PrivateReleaseDetailsResponse.

        The release's origin

        :param origin: The origin of this PrivateReleaseDetailsResponse.
        :type origin: str
        """
        allowed_values = ["hockeyapp", "appcenter"]  # noqa: E501
        if origin not in allowed_values:
            raise ValueError(
                "Invalid value for `origin` ({0}), must be one of {1}"
                .format(origin, allowed_values)
            )

        self._origin = origin

    @property
    def provisioning_profile_name(self):
        """Gets the provisioning_profile_name of this PrivateReleaseDetailsResponse.

        The release's provisioning profile name.

        :return: The provisioning_profile_name of this PrivateReleaseDetailsResponse.
        :rtype: str
        """
        return self._provisioning_profile_name

    @provisioning_profile_name.setter
    def provisioning_profile_name(self, provisioning_profile_name):
        """Sets the provisioning_profile_name of this PrivateReleaseDetailsResponse.

        The release's provisioning profile name.

        :param provisioning_profile_name: The provisioning_profile_name of this PrivateReleaseDetailsResponse.
        :type provisioning_profile_name: str
        """

        self._provisioning_profile_name = provisioning_profile_name

    @property
    def provisioning_profile_type(self):
        """Gets the provisioning_profile_type of this PrivateReleaseDetailsResponse.

        The type of the provisioning profile for the requested app version.

        :return: The provisioning_profile_type of this PrivateReleaseDetailsResponse.
        :rtype: str
        """
        return self._provisioning_profile_type

    @provisioning_profile_type.setter
    def provisioning_profile_type(self, provisioning_profile_type):
        """Sets the provisioning_profile_type of this PrivateReleaseDetailsResponse.

        The type of the provisioning profile for the requested app version.

        :param provisioning_profile_type: The provisioning_profile_type of this PrivateReleaseDetailsResponse.
        :type provisioning_profile_type: str
        """
        allowed_values = ["adhoc", "enterprise", "other"]  # noqa: E501
        if provisioning_profile_type not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_profile_type` ({0}), must be one of {1}"
                .format(provisioning_profile_type, allowed_values)
            )

        self._provisioning_profile_type = provisioning_profile_type

    @property
    def publishing_status(self):
        """Gets the publishing_status of this PrivateReleaseDetailsResponse.

        the publishing status of the distributed release

        :return: The publishing_status of this PrivateReleaseDetailsResponse.
        :rtype: str
        """
        return self._publishing_status

    @publishing_status.setter
    def publishing_status(self, publishing_status):
        """Sets the publishing_status of this PrivateReleaseDetailsResponse.

        the publishing status of the distributed release

        :param publishing_status: The publishing_status of this PrivateReleaseDetailsResponse.
        :type publishing_status: str
        """

        self._publishing_status = publishing_status

    @property
    def release_notes(self):
        """Gets the release_notes of this PrivateReleaseDetailsResponse.

        The release's release notes.

        :return: The release_notes of this PrivateReleaseDetailsResponse.
        :rtype: str
        """
        return self._release_notes

    @release_notes.setter
    def release_notes(self, release_notes):
        """Sets the release_notes of this PrivateReleaseDetailsResponse.

        The release's release notes.

        :param release_notes: The release_notes of this PrivateReleaseDetailsResponse.
        :type release_notes: str
        """

        self._release_notes = release_notes

    @property
    def secondary_download_url(self):
        """Gets the secondary_download_url of this PrivateReleaseDetailsResponse.

        The URL that hosts the secondary binary for this release, such as the apk file for aab releases.

        :return: The secondary_download_url of this PrivateReleaseDetailsResponse.
        :rtype: str
        """
        return self._secondary_download_url

    @secondary_download_url.setter
    def secondary_download_url(self, secondary_download_url):
        """Sets the secondary_download_url of this PrivateReleaseDetailsResponse.

        The URL that hosts the secondary binary for this release, such as the apk file for aab releases.

        :param secondary_download_url: The secondary_download_url of this PrivateReleaseDetailsResponse.
        :type secondary_download_url: str
        """

        self._secondary_download_url = secondary_download_url

    @property
    def short_version(self):
        """Gets the short_version of this PrivateReleaseDetailsResponse.

        The release's short version.<br> For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml. 

        :return: The short_version of this PrivateReleaseDetailsResponse.
        :rtype: str
        """
        return self._short_version

    @short_version.setter
    def short_version(self, short_version):
        """Sets the short_version of this PrivateReleaseDetailsResponse.

        The release's short version.<br> For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml. 

        :param short_version: The short_version of this PrivateReleaseDetailsResponse.
        :type short_version: str
        """

        self._short_version = short_version

    @property
    def size(self):
        """Gets the size of this PrivateReleaseDetailsResponse.

        The release's size in bytes.

        :return: The size of this PrivateReleaseDetailsResponse.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this PrivateReleaseDetailsResponse.

        The release's size in bytes.

        :param size: The size of this PrivateReleaseDetailsResponse.
        :type size: int
        """

        self._size = size

    @property
    def status(self):
        """Gets the status of this PrivateReleaseDetailsResponse.

        OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any 'available' release will be associated with the default distribution group of an app.</br> The release state.<br> <b>available</b>: The uploaded release has been distributed.<br> <b>unavailable</b>: The uploaded release is not visible to the user. <br> 

        :return: The status of this PrivateReleaseDetailsResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PrivateReleaseDetailsResponse.

        OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any 'available' release will be associated with the default distribution group of an app.</br> The release state.<br> <b>available</b>: The uploaded release has been distributed.<br> <b>unavailable</b>: The uploaded release is not visible to the user. <br> 

        :param status: The status of this PrivateReleaseDetailsResponse.
        :type status: str
        """
        allowed_values = ["available", "unavailable"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def uploaded_at(self):
        """Gets the uploaded_at of this PrivateReleaseDetailsResponse.

        UTC time in ISO 8601 format of the uploaded time.

        :return: The uploaded_at of this PrivateReleaseDetailsResponse.
        :rtype: str
        """
        return self._uploaded_at

    @uploaded_at.setter
    def uploaded_at(self, uploaded_at):
        """Sets the uploaded_at of this PrivateReleaseDetailsResponse.

        UTC time in ISO 8601 format of the uploaded time.

        :param uploaded_at: The uploaded_at of this PrivateReleaseDetailsResponse.
        :type uploaded_at: str
        """

        self._uploaded_at = uploaded_at

    @property
    def version(self):
        """Gets the version of this PrivateReleaseDetailsResponse.

        The release's version.<br> For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml. 

        :return: The version of this PrivateReleaseDetailsResponse.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PrivateReleaseDetailsResponse.

        The release's version.<br> For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml. 

        :param version: The version of this PrivateReleaseDetailsResponse.
        :type version: str
        """

        self._version = version
