# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_set_device_configurations_inner_image import DeviceSetDeviceConfigurationsInnerImage
from openapi_server.models.device_set_device_configurations_inner_model import DeviceSetDeviceConfigurationsInnerModel
from openapi_server import util


class DeviceSetDeviceConfigurationsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, image: DeviceSetDeviceConfigurationsInnerImage=None, model: DeviceSetDeviceConfigurationsInnerModel=None, os: str=None, os_name: str=None):
        """DeviceSetDeviceConfigurationsInner - a model defined in OpenAPI

        :param id: The id of this DeviceSetDeviceConfigurationsInner.
        :param image: The image of this DeviceSetDeviceConfigurationsInner.
        :param model: The model of this DeviceSetDeviceConfigurationsInner.
        :param os: The os of this DeviceSetDeviceConfigurationsInner.
        :param os_name: The os_name of this DeviceSetDeviceConfigurationsInner.
        """
        self.openapi_types = {
            'id': str,
            'image': DeviceSetDeviceConfigurationsInnerImage,
            'model': DeviceSetDeviceConfigurationsInnerModel,
            'os': str,
            'os_name': str
        }

        self.attribute_map = {
            'id': 'id',
            'image': 'image',
            'model': 'model',
            'os': 'os',
            'os_name': 'osName'
        }

        self._id = id
        self._image = image
        self._model = model
        self._os = os
        self._os_name = os_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceSetDeviceConfigurationsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Device_Set_deviceConfigurations_inner of this DeviceSetDeviceConfigurationsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this DeviceSetDeviceConfigurationsInner.

        The unique id of the device configuration

        :return: The id of this DeviceSetDeviceConfigurationsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceSetDeviceConfigurationsInner.

        The unique id of the device configuration

        :param id: The id of this DeviceSetDeviceConfigurationsInner.
        :type id: str
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this DeviceSetDeviceConfigurationsInner.


        :return: The image of this DeviceSetDeviceConfigurationsInner.
        :rtype: DeviceSetDeviceConfigurationsInnerImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this DeviceSetDeviceConfigurationsInner.


        :param image: The image of this DeviceSetDeviceConfigurationsInner.
        :type image: DeviceSetDeviceConfigurationsInnerImage
        """

        self._image = image

    @property
    def model(self):
        """Gets the model of this DeviceSetDeviceConfigurationsInner.


        :return: The model of this DeviceSetDeviceConfigurationsInner.
        :rtype: DeviceSetDeviceConfigurationsInnerModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this DeviceSetDeviceConfigurationsInner.


        :param model: The model of this DeviceSetDeviceConfigurationsInner.
        :type model: DeviceSetDeviceConfigurationsInnerModel
        """

        self._model = model

    @property
    def os(self):
        """Gets the os of this DeviceSetDeviceConfigurationsInner.


        :return: The os of this DeviceSetDeviceConfigurationsInner.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this DeviceSetDeviceConfigurationsInner.


        :param os: The os of this DeviceSetDeviceConfigurationsInner.
        :type os: str
        """

        self._os = os

    @property
    def os_name(self):
        """Gets the os_name of this DeviceSetDeviceConfigurationsInner.


        :return: The os_name of this DeviceSetDeviceConfigurationsInner.
        :rtype: str
        """
        return self._os_name

    @os_name.setter
    def os_name(self, os_name):
        """Sets the os_name of this DeviceSetDeviceConfigurationsInner.


        :param os_name: The os_name of this DeviceSetDeviceConfigurationsInner.
        :type os_name: str
        """

        self._os_name = os_name
