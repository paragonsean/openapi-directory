# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BuildIssue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, message: str=None, type: str=None):
        """BuildIssue - a model defined in OpenAPI

        :param category: The category of this BuildIssue.
        :param message: The message of this BuildIssue.
        :param type: The type of this BuildIssue.
        """
        self.openapi_types = {
            'category': str,
            'message': str,
            'type': str
        }

        self.attribute_map = {
            'category': 'category',
            'message': 'message',
            'type': 'type'
        }

        self._category = category
        self._message = message
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildIssue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildIssue of this BuildIssue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this BuildIssue.


        :return: The category of this BuildIssue.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this BuildIssue.


        :param category: The category of this BuildIssue.
        :type category: str
        """

        self._category = category

    @property
    def message(self):
        """Gets the message of this BuildIssue.


        :return: The message of this BuildIssue.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this BuildIssue.


        :param message: The message of this BuildIssue.
        :type message: str
        """

        self._message = message

    @property
    def type(self):
        """Gets the type of this BuildIssue.


        :return: The type of this BuildIssue.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BuildIssue.


        :param type: The type of this BuildIssue.
        :type type: str
        """

        self._type = type
