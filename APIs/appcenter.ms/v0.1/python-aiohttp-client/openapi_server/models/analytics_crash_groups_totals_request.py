# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analytics_crash_groups_totals_request_crash_groups_inner import AnalyticsCrashGroupsTotalsRequestCrashGroupsInner
from openapi_server import util


class AnalyticsCrashGroupsTotalsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, crash_groups: List[AnalyticsCrashGroupsTotalsRequestCrashGroupsInner]=None):
        """AnalyticsCrashGroupsTotalsRequest - a model defined in OpenAPI

        :param crash_groups: The crash_groups of this AnalyticsCrashGroupsTotalsRequest.
        """
        self.openapi_types = {
            'crash_groups': List[AnalyticsCrashGroupsTotalsRequestCrashGroupsInner]
        }

        self.attribute_map = {
            'crash_groups': 'crash_groups'
        }

        self._crash_groups = crash_groups

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyticsCrashGroupsTotalsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Analytics_CrashGroupsTotals_request of this AnalyticsCrashGroupsTotalsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def crash_groups(self):
        """Gets the crash_groups of this AnalyticsCrashGroupsTotalsRequest.


        :return: The crash_groups of this AnalyticsCrashGroupsTotalsRequest.
        :rtype: List[AnalyticsCrashGroupsTotalsRequestCrashGroupsInner]
        """
        return self._crash_groups

    @crash_groups.setter
    def crash_groups(self, crash_groups):
        """Sets the crash_groups of this AnalyticsCrashGroupsTotalsRequest.


        :param crash_groups: The crash_groups of this AnalyticsCrashGroupsTotalsRequest.
        :type crash_groups: List[AnalyticsCrashGroupsTotalsRequestCrashGroupsInner]
        """
        if crash_groups is None:
            raise ValueError("Invalid value for `crash_groups`, must not be `None`")
        if crash_groups is not None and len(crash_groups) < 1:
            raise ValueError("Invalid value for `crash_groups`, number of items must be greater than or equal to `1`")

        self._crash_groups = crash_groups
