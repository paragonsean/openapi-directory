# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MessageEnvelope(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: object=None, message_id: str=None, message_type: str=None):
        """MessageEnvelope - a model defined in OpenAPI

        :param message: The message of this MessageEnvelope.
        :param message_id: The message_id of this MessageEnvelope.
        :param message_type: The message_type of this MessageEnvelope.
        """
        self.openapi_types = {
            'message': object,
            'message_id': str,
            'message_type': str
        }

        self.attribute_map = {
            'message': 'message',
            'message_id': 'messageId',
            'message_type': 'messageType'
        }

        self._message = message
        self._message_id = message_id
        self._message_type = message_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageEnvelope':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageEnvelope of this MessageEnvelope.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this MessageEnvelope.

        Body of the message

        :return: The message of this MessageEnvelope.
        :rtype: object
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this MessageEnvelope.

        Body of the message

        :param message: The message of this MessageEnvelope.
        :type message: object
        """

        self._message = message

    @property
    def message_id(self):
        """Gets the message_id of this MessageEnvelope.

        Unique id of the message

        :return: The message_id of this MessageEnvelope.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this MessageEnvelope.

        Unique id of the message

        :param message_id: The message_id of this MessageEnvelope.
        :type message_id: str
        """

        self._message_id = message_id

    @property
    def message_type(self):
        """Gets the message_type of this MessageEnvelope.

        Type of the message

        :return: The message_type of this MessageEnvelope.
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this MessageEnvelope.

        Type of the message

        :param message_type: The message_type of this MessageEnvelope.
        :type message_type: str
        """

        self._message_type = message_type
