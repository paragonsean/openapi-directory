# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.release_create_request_appex_provisioning_profiles_inner import ReleaseCreateRequestAppexProvisioningProfilesInner
from openapi_server.models.release_create_request_ipa_uuids_inner import ReleaseCreateRequestIpaUuidsInner
from openapi_server import util


class ReleaseCreateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appex_provisioning_profiles: List[ReleaseCreateRequestAppexProvisioningProfilesInner]=None, build_version: str=None, device_family: str=None, file_extension: str=None, fingerprint: str=None, icon_asset_id: str=None, ipa_uuids: List[ReleaseCreateRequestIpaUuidsInner]=None, languages: List[str]=None, minimum_os_version: str=None, package_url: str=None, provision: ReleaseCreateRequestAppexProvisioningProfilesInner=None, proxy_flow: bool=None, size: int=None, unique_identifier: str=None, upload_id: str=None, version: str=None):
        """ReleaseCreateRequest - a model defined in OpenAPI

        :param appex_provisioning_profiles: The appex_provisioning_profiles of this ReleaseCreateRequest.
        :param build_version: The build_version of this ReleaseCreateRequest.
        :param device_family: The device_family of this ReleaseCreateRequest.
        :param file_extension: The file_extension of this ReleaseCreateRequest.
        :param fingerprint: The fingerprint of this ReleaseCreateRequest.
        :param icon_asset_id: The icon_asset_id of this ReleaseCreateRequest.
        :param ipa_uuids: The ipa_uuids of this ReleaseCreateRequest.
        :param languages: The languages of this ReleaseCreateRequest.
        :param minimum_os_version: The minimum_os_version of this ReleaseCreateRequest.
        :param package_url: The package_url of this ReleaseCreateRequest.
        :param provision: The provision of this ReleaseCreateRequest.
        :param proxy_flow: The proxy_flow of this ReleaseCreateRequest.
        :param size: The size of this ReleaseCreateRequest.
        :param unique_identifier: The unique_identifier of this ReleaseCreateRequest.
        :param upload_id: The upload_id of this ReleaseCreateRequest.
        :param version: The version of this ReleaseCreateRequest.
        """
        self.openapi_types = {
            'appex_provisioning_profiles': List[ReleaseCreateRequestAppexProvisioningProfilesInner],
            'build_version': str,
            'device_family': str,
            'file_extension': str,
            'fingerprint': str,
            'icon_asset_id': str,
            'ipa_uuids': List[ReleaseCreateRequestIpaUuidsInner],
            'languages': List[str],
            'minimum_os_version': str,
            'package_url': str,
            'provision': ReleaseCreateRequestAppexProvisioningProfilesInner,
            'proxy_flow': bool,
            'size': int,
            'unique_identifier': str,
            'upload_id': str,
            'version': str
        }

        self.attribute_map = {
            'appex_provisioning_profiles': 'appex_provisioning_profiles',
            'build_version': 'build_version',
            'device_family': 'device_family',
            'file_extension': 'file_extension',
            'fingerprint': 'fingerprint',
            'icon_asset_id': 'icon_asset_id',
            'ipa_uuids': 'ipa_uuids',
            'languages': 'languages',
            'minimum_os_version': 'minimum_os_version',
            'package_url': 'package_url',
            'provision': 'provision',
            'proxy_flow': 'proxy_flow',
            'size': 'size',
            'unique_identifier': 'unique_identifier',
            'upload_id': 'upload_id',
            'version': 'version'
        }

        self._appex_provisioning_profiles = appex_provisioning_profiles
        self._build_version = build_version
        self._device_family = device_family
        self._file_extension = file_extension
        self._fingerprint = fingerprint
        self._icon_asset_id = icon_asset_id
        self._ipa_uuids = ipa_uuids
        self._languages = languages
        self._minimum_os_version = minimum_os_version
        self._package_url = package_url
        self._provision = provision
        self._proxy_flow = proxy_flow
        self._size = size
        self._unique_identifier = unique_identifier
        self._upload_id = upload_id
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReleaseCreateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReleaseCreateRequest of this ReleaseCreateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appex_provisioning_profiles(self):
        """Gets the appex_provisioning_profiles of this ReleaseCreateRequest.

        iOS app extension provisioning profiles included in the release.

        :return: The appex_provisioning_profiles of this ReleaseCreateRequest.
        :rtype: List[ReleaseCreateRequestAppexProvisioningProfilesInner]
        """
        return self._appex_provisioning_profiles

    @appex_provisioning_profiles.setter
    def appex_provisioning_profiles(self, appex_provisioning_profiles):
        """Sets the appex_provisioning_profiles of this ReleaseCreateRequest.

        iOS app extension provisioning profiles included in the release.

        :param appex_provisioning_profiles: The appex_provisioning_profiles of this ReleaseCreateRequest.
        :type appex_provisioning_profiles: List[ReleaseCreateRequestAppexProvisioningProfilesInner]
        """

        self._appex_provisioning_profiles = appex_provisioning_profiles

    @property
    def build_version(self):
        """Gets the build_version of this ReleaseCreateRequest.

        The release's short version.<br> For iOS: CFBundleShortVersionString from info.plist.<br> For Android: android:versionName from AppManifest.xml. 

        :return: The build_version of this ReleaseCreateRequest.
        :rtype: str
        """
        return self._build_version

    @build_version.setter
    def build_version(self, build_version):
        """Sets the build_version of this ReleaseCreateRequest.

        The release's short version.<br> For iOS: CFBundleShortVersionString from info.plist.<br> For Android: android:versionName from AppManifest.xml. 

        :param build_version: The build_version of this ReleaseCreateRequest.
        :type build_version: str
        """

        self._build_version = build_version

    @property
    def device_family(self):
        """Gets the device_family of this ReleaseCreateRequest.

        The release's device family.

        :return: The device_family of this ReleaseCreateRequest.
        :rtype: str
        """
        return self._device_family

    @device_family.setter
    def device_family(self, device_family):
        """Sets the device_family of this ReleaseCreateRequest.

        The release's device family.

        :param device_family: The device_family of this ReleaseCreateRequest.
        :type device_family: str
        """

        self._device_family = device_family

    @property
    def file_extension(self):
        """Gets the file_extension of this ReleaseCreateRequest.

        The file extension of the asset. Does not include the initial period.

        :return: The file_extension of this ReleaseCreateRequest.
        :rtype: str
        """
        return self._file_extension

    @file_extension.setter
    def file_extension(self, file_extension):
        """Sets the file_extension of this ReleaseCreateRequest.

        The file extension of the asset. Does not include the initial period.

        :param file_extension: The file_extension of this ReleaseCreateRequest.
        :type file_extension: str
        """

        self._file_extension = file_extension

    @property
    def fingerprint(self):
        """Gets the fingerprint of this ReleaseCreateRequest.

        MD5 checksum of the release binary.

        :return: The fingerprint of this ReleaseCreateRequest.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this ReleaseCreateRequest.

        MD5 checksum of the release binary.

        :param fingerprint: The fingerprint of this ReleaseCreateRequest.
        :type fingerprint: str
        """
        if fingerprint is None:
            raise ValueError("Invalid value for `fingerprint`, must not be `None`")

        self._fingerprint = fingerprint

    @property
    def icon_asset_id(self):
        """Gets the icon_asset_id of this ReleaseCreateRequest.

        The assetId associated with the icon uploaded to app center file upload service.

        :return: The icon_asset_id of this ReleaseCreateRequest.
        :rtype: str
        """
        return self._icon_asset_id

    @icon_asset_id.setter
    def icon_asset_id(self, icon_asset_id):
        """Sets the icon_asset_id of this ReleaseCreateRequest.

        The assetId associated with the icon uploaded to app center file upload service.

        :param icon_asset_id: The icon_asset_id of this ReleaseCreateRequest.
        :type icon_asset_id: str
        """

        self._icon_asset_id = icon_asset_id

    @property
    def ipa_uuids(self):
        """Gets the ipa_uuids of this ReleaseCreateRequest.

        A list of UUIDs for architectures for an iOS app.

        :return: The ipa_uuids of this ReleaseCreateRequest.
        :rtype: List[ReleaseCreateRequestIpaUuidsInner]
        """
        return self._ipa_uuids

    @ipa_uuids.setter
    def ipa_uuids(self, ipa_uuids):
        """Sets the ipa_uuids of this ReleaseCreateRequest.

        A list of UUIDs for architectures for an iOS app.

        :param ipa_uuids: The ipa_uuids of this ReleaseCreateRequest.
        :type ipa_uuids: List[ReleaseCreateRequestIpaUuidsInner]
        """

        self._ipa_uuids = ipa_uuids

    @property
    def languages(self):
        """Gets the languages of this ReleaseCreateRequest.

        The languages supported by the release. Limited to 510 characters in a serialized array.

        :return: The languages of this ReleaseCreateRequest.
        :rtype: List[str]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this ReleaseCreateRequest.

        The languages supported by the release. Limited to 510 characters in a serialized array.

        :param languages: The languages of this ReleaseCreateRequest.
        :type languages: List[str]
        """

        self._languages = languages

    @property
    def minimum_os_version(self):
        """Gets the minimum_os_version of this ReleaseCreateRequest.

        The release's minimum required operating system.

        :return: The minimum_os_version of this ReleaseCreateRequest.
        :rtype: str
        """
        return self._minimum_os_version

    @minimum_os_version.setter
    def minimum_os_version(self, minimum_os_version):
        """Sets the minimum_os_version of this ReleaseCreateRequest.

        The release's minimum required operating system.

        :param minimum_os_version: The minimum_os_version of this ReleaseCreateRequest.
        :type minimum_os_version: str
        """

        self._minimum_os_version = minimum_os_version

    @property
    def package_url(self):
        """Gets the package_url of this ReleaseCreateRequest.

        The URL to the release's binary.

        :return: The package_url of this ReleaseCreateRequest.
        :rtype: str
        """
        return self._package_url

    @package_url.setter
    def package_url(self, package_url):
        """Sets the package_url of this ReleaseCreateRequest.

        The URL to the release's binary.

        :param package_url: The package_url of this ReleaseCreateRequest.
        :type package_url: str
        """

        self._package_url = package_url

    @property
    def provision(self):
        """Gets the provision of this ReleaseCreateRequest.


        :return: The provision of this ReleaseCreateRequest.
        :rtype: ReleaseCreateRequestAppexProvisioningProfilesInner
        """
        return self._provision

    @provision.setter
    def provision(self, provision):
        """Sets the provision of this ReleaseCreateRequest.


        :param provision: The provision of this ReleaseCreateRequest.
        :type provision: ReleaseCreateRequestAppexProvisioningProfilesInner
        """

        self._provision = provision

    @property
    def proxy_flow(self):
        """Gets the proxy_flow of this ReleaseCreateRequest.

        If true this release was uploaded to the AKS upload proxy

        :return: The proxy_flow of this ReleaseCreateRequest.
        :rtype: bool
        """
        return self._proxy_flow

    @proxy_flow.setter
    def proxy_flow(self, proxy_flow):
        """Sets the proxy_flow of this ReleaseCreateRequest.

        If true this release was uploaded to the AKS upload proxy

        :param proxy_flow: The proxy_flow of this ReleaseCreateRequest.
        :type proxy_flow: bool
        """

        self._proxy_flow = proxy_flow

    @property
    def size(self):
        """Gets the size of this ReleaseCreateRequest.

        The release's size in bytes.

        :return: The size of this ReleaseCreateRequest.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ReleaseCreateRequest.

        The release's size in bytes.

        :param size: The size of this ReleaseCreateRequest.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this ReleaseCreateRequest.

        The identifier of the app's bundle.

        :return: The unique_identifier of this ReleaseCreateRequest.
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this ReleaseCreateRequest.

        The identifier of the app's bundle.

        :param unique_identifier: The unique_identifier of this ReleaseCreateRequest.
        :type unique_identifier: str
        """

        self._unique_identifier = unique_identifier

    @property
    def upload_id(self):
        """Gets the upload_id of this ReleaseCreateRequest.

        The upload id associated with the release, to map to the releases upload table.

        :return: The upload_id of this ReleaseCreateRequest.
        :rtype: str
        """
        return self._upload_id

    @upload_id.setter
    def upload_id(self, upload_id):
        """Sets the upload_id of this ReleaseCreateRequest.

        The upload id associated with the release, to map to the releases upload table.

        :param upload_id: The upload_id of this ReleaseCreateRequest.
        :type upload_id: str
        """
        if upload_id is None:
            raise ValueError("Invalid value for `upload_id`, must not be `None`")

        self._upload_id = upload_id

    @property
    def version(self):
        """Gets the version of this ReleaseCreateRequest.

        The release's version.<br> For iOS: CFBundleVersion from info.plist.<br> For Android: android:versionCode from AppManifest.xml. 

        :return: The version of this ReleaseCreateRequest.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ReleaseCreateRequest.

        The release's version.<br> For iOS: CFBundleVersion from info.plist.<br> For Android: android:versionCode from AppManifest.xml. 

        :param version: The version of this ReleaseCreateRequest.
        :type version: str
        """

        self._version = version
