# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReleaseCount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, distribution_group: str=None, release_id: str=None, total_count: int=None, unique_count: int=None):
        """ReleaseCount - a model defined in OpenAPI

        :param distribution_group: The distribution_group of this ReleaseCount.
        :param release_id: The release_id of this ReleaseCount.
        :param total_count: The total_count of this ReleaseCount.
        :param unique_count: The unique_count of this ReleaseCount.
        """
        self.openapi_types = {
            'distribution_group': str,
            'release_id': str,
            'total_count': int,
            'unique_count': int
        }

        self.attribute_map = {
            'distribution_group': 'distribution_group',
            'release_id': 'release_id',
            'total_count': 'total_count',
            'unique_count': 'unique_count'
        }

        self._distribution_group = distribution_group
        self._release_id = release_id
        self._total_count = total_count
        self._unique_count = unique_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReleaseCount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReleaseCount of this ReleaseCount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distribution_group(self):
        """Gets the distribution_group of this ReleaseCount.

        Distribution group queried. 

        :return: The distribution_group of this ReleaseCount.
        :rtype: str
        """
        return self._distribution_group

    @distribution_group.setter
    def distribution_group(self, distribution_group):
        """Sets the distribution_group of this ReleaseCount.

        Distribution group queried. 

        :param distribution_group: The distribution_group of this ReleaseCount.
        :type distribution_group: str
        """

        self._distribution_group = distribution_group

    @property
    def release_id(self):
        """Gets the release_id of this ReleaseCount.


        :return: The release_id of this ReleaseCount.
        :rtype: str
        """
        return self._release_id

    @release_id.setter
    def release_id(self, release_id):
        """Sets the release_id of this ReleaseCount.


        :param release_id: The release_id of this ReleaseCount.
        :type release_id: str
        """
        if release_id is None:
            raise ValueError("Invalid value for `release_id`, must not be `None`")

        self._release_id = release_id

    @property
    def total_count(self):
        """Gets the total_count of this ReleaseCount.

        Total count of downloads. 

        :return: The total_count of this ReleaseCount.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ReleaseCount.

        Total count of downloads. 

        :param total_count: The total_count of this ReleaseCount.
        :type total_count: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")

        self._total_count = total_count

    @property
    def unique_count(self):
        """Gets the unique_count of this ReleaseCount.

        Count of unique downloads against user id. 

        :return: The unique_count of this ReleaseCount.
        :rtype: int
        """
        return self._unique_count

    @unique_count.setter
    def unique_count(self, unique_count):
        """Sets the unique_count of this ReleaseCount.

        Count of unique downloads against user id. 

        :param unique_count: The unique_count of this ReleaseCount.
        :type unique_count: int
        """
        if unique_count is None:
            raise ValueError("Invalid value for `unique_count`, must not be `None`")

        self._unique_count = unique_count
