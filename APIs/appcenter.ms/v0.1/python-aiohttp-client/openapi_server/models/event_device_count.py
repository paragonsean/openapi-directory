# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analytics_device_counts200_response_daily_inner import AnalyticsDeviceCounts200ResponseDailyInner
from openapi_server import util


class EventDeviceCount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, devices_count: List[AnalyticsDeviceCounts200ResponseDailyInner]=None, previous_total_devices_with_event: int=None, total_devices: int=None, total_devices_with_event: int=None):
        """EventDeviceCount - a model defined in OpenAPI

        :param devices_count: The devices_count of this EventDeviceCount.
        :param previous_total_devices_with_event: The previous_total_devices_with_event of this EventDeviceCount.
        :param total_devices: The total_devices of this EventDeviceCount.
        :param total_devices_with_event: The total_devices_with_event of this EventDeviceCount.
        """
        self.openapi_types = {
            'devices_count': List[AnalyticsDeviceCounts200ResponseDailyInner],
            'previous_total_devices_with_event': int,
            'total_devices': int,
            'total_devices_with_event': int
        }

        self.attribute_map = {
            'devices_count': 'devices_count',
            'previous_total_devices_with_event': 'previous_total_devices_with_event',
            'total_devices': 'total_devices',
            'total_devices_with_event': 'total_devices_with_event'
        }

        self._devices_count = devices_count
        self._previous_total_devices_with_event = previous_total_devices_with_event
        self._total_devices = total_devices
        self._total_devices_with_event = total_devices_with_event

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventDeviceCount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventDeviceCount of this EventDeviceCount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def devices_count(self):
        """Gets the devices_count of this EventDeviceCount.


        :return: The devices_count of this EventDeviceCount.
        :rtype: List[AnalyticsDeviceCounts200ResponseDailyInner]
        """
        return self._devices_count

    @devices_count.setter
    def devices_count(self, devices_count):
        """Sets the devices_count of this EventDeviceCount.


        :param devices_count: The devices_count of this EventDeviceCount.
        :type devices_count: List[AnalyticsDeviceCounts200ResponseDailyInner]
        """

        self._devices_count = devices_count

    @property
    def previous_total_devices_with_event(self):
        """Gets the previous_total_devices_with_event of this EventDeviceCount.


        :return: The previous_total_devices_with_event of this EventDeviceCount.
        :rtype: int
        """
        return self._previous_total_devices_with_event

    @previous_total_devices_with_event.setter
    def previous_total_devices_with_event(self, previous_total_devices_with_event):
        """Sets the previous_total_devices_with_event of this EventDeviceCount.


        :param previous_total_devices_with_event: The previous_total_devices_with_event of this EventDeviceCount.
        :type previous_total_devices_with_event: int
        """

        self._previous_total_devices_with_event = previous_total_devices_with_event

    @property
    def total_devices(self):
        """Gets the total_devices of this EventDeviceCount.


        :return: The total_devices of this EventDeviceCount.
        :rtype: int
        """
        return self._total_devices

    @total_devices.setter
    def total_devices(self, total_devices):
        """Sets the total_devices of this EventDeviceCount.


        :param total_devices: The total_devices of this EventDeviceCount.
        :type total_devices: int
        """

        self._total_devices = total_devices

    @property
    def total_devices_with_event(self):
        """Gets the total_devices_with_event of this EventDeviceCount.


        :return: The total_devices_with_event of this EventDeviceCount.
        :rtype: int
        """
        return self._total_devices_with_event

    @total_devices_with_event.setter
    def total_devices_with_event(self, total_devices_with_event):
        """Sets the total_devices_with_event of this EventDeviceCount.


        :param total_devices_with_event: The total_devices_with_event of this EventDeviceCount.
        :type total_devices_with_event: int
        """

        self._total_devices_with_event = total_devices_with_event
