# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bug_tracker_get_repo_issue_from_crash200_response import BugTrackerGetRepoIssueFromCrash200Response
from openapi_server import util


class BugTrackerIssuesResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, issues: List[BugTrackerGetRepoIssueFromCrash200Response]=None):
        """BugTrackerIssuesResult - a model defined in OpenAPI

        :param issues: The issues of this BugTrackerIssuesResult.
        """
        self.openapi_types = {
            'issues': List[BugTrackerGetRepoIssueFromCrash200Response]
        }

        self.attribute_map = {
            'issues': 'issues'
        }

        self._issues = issues

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BugTrackerIssuesResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BugTrackerIssuesResult of this BugTrackerIssuesResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issues(self):
        """Gets the issues of this BugTrackerIssuesResult.


        :return: The issues of this BugTrackerIssuesResult.
        :rtype: List[BugTrackerGetRepoIssueFromCrash200Response]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this BugTrackerIssuesResult.


        :param issues: The issues of this BugTrackerIssuesResult.
        :type issues: List[BugTrackerGetRepoIssueFromCrash200Response]
        """

        self._issues = issues
