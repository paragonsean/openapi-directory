# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestGetTestReport200ResponseStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifacts: Dict[str, str]=None, devices: float=None, devices_failed: float=None, devices_finished: float=None, devices_not_runned: float=None, devices_skipped: float=None, failed: float=None, filesize: float=None, os: float=None, passed: float=None, skipped: float=None, step_count: float=None, total: float=None, total_device_minutes: float=None):
        """TestGetTestReport200ResponseStats - a model defined in OpenAPI

        :param artifacts: The artifacts of this TestGetTestReport200ResponseStats.
        :param devices: The devices of this TestGetTestReport200ResponseStats.
        :param devices_failed: The devices_failed of this TestGetTestReport200ResponseStats.
        :param devices_finished: The devices_finished of this TestGetTestReport200ResponseStats.
        :param devices_not_runned: The devices_not_runned of this TestGetTestReport200ResponseStats.
        :param devices_skipped: The devices_skipped of this TestGetTestReport200ResponseStats.
        :param failed: The failed of this TestGetTestReport200ResponseStats.
        :param filesize: The filesize of this TestGetTestReport200ResponseStats.
        :param os: The os of this TestGetTestReport200ResponseStats.
        :param passed: The passed of this TestGetTestReport200ResponseStats.
        :param skipped: The skipped of this TestGetTestReport200ResponseStats.
        :param step_count: The step_count of this TestGetTestReport200ResponseStats.
        :param total: The total of this TestGetTestReport200ResponseStats.
        :param total_device_minutes: The total_device_minutes of this TestGetTestReport200ResponseStats.
        """
        self.openapi_types = {
            'artifacts': Dict[str, str],
            'devices': float,
            'devices_failed': float,
            'devices_finished': float,
            'devices_not_runned': float,
            'devices_skipped': float,
            'failed': float,
            'filesize': float,
            'os': float,
            'passed': float,
            'skipped': float,
            'step_count': float,
            'total': float,
            'total_device_minutes': float
        }

        self.attribute_map = {
            'artifacts': 'artifacts',
            'devices': 'devices',
            'devices_failed': 'devices_failed',
            'devices_finished': 'devices_finished',
            'devices_not_runned': 'devices_not_runned',
            'devices_skipped': 'devices_skipped',
            'failed': 'failed',
            'filesize': 'filesize',
            'os': 'os',
            'passed': 'passed',
            'skipped': 'skipped',
            'step_count': 'step_count',
            'total': 'total',
            'total_device_minutes': 'totalDeviceMinutes'
        }

        self._artifacts = artifacts
        self._devices = devices
        self._devices_failed = devices_failed
        self._devices_finished = devices_finished
        self._devices_not_runned = devices_not_runned
        self._devices_skipped = devices_skipped
        self._failed = failed
        self._filesize = filesize
        self._os = os
        self._passed = passed
        self._skipped = skipped
        self._step_count = step_count
        self._total = total
        self._total_device_minutes = total_device_minutes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestGetTestReport200ResponseStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The test_getTestReport_200_response_stats of this TestGetTestReport200ResponseStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifacts(self):
        """Gets the artifacts of this TestGetTestReport200ResponseStats.


        :return: The artifacts of this TestGetTestReport200ResponseStats.
        :rtype: Dict[str, str]
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this TestGetTestReport200ResponseStats.


        :param artifacts: The artifacts of this TestGetTestReport200ResponseStats.
        :type artifacts: Dict[str, str]
        """

        self._artifacts = artifacts

    @property
    def devices(self):
        """Gets the devices of this TestGetTestReport200ResponseStats.


        :return: The devices of this TestGetTestReport200ResponseStats.
        :rtype: float
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this TestGetTestReport200ResponseStats.


        :param devices: The devices of this TestGetTestReport200ResponseStats.
        :type devices: float
        """
        if devices is None:
            raise ValueError("Invalid value for `devices`, must not be `None`")

        self._devices = devices

    @property
    def devices_failed(self):
        """Gets the devices_failed of this TestGetTestReport200ResponseStats.


        :return: The devices_failed of this TestGetTestReport200ResponseStats.
        :rtype: float
        """
        return self._devices_failed

    @devices_failed.setter
    def devices_failed(self, devices_failed):
        """Sets the devices_failed of this TestGetTestReport200ResponseStats.


        :param devices_failed: The devices_failed of this TestGetTestReport200ResponseStats.
        :type devices_failed: float
        """
        if devices_failed is None:
            raise ValueError("Invalid value for `devices_failed`, must not be `None`")

        self._devices_failed = devices_failed

    @property
    def devices_finished(self):
        """Gets the devices_finished of this TestGetTestReport200ResponseStats.


        :return: The devices_finished of this TestGetTestReport200ResponseStats.
        :rtype: float
        """
        return self._devices_finished

    @devices_finished.setter
    def devices_finished(self, devices_finished):
        """Sets the devices_finished of this TestGetTestReport200ResponseStats.


        :param devices_finished: The devices_finished of this TestGetTestReport200ResponseStats.
        :type devices_finished: float
        """
        if devices_finished is None:
            raise ValueError("Invalid value for `devices_finished`, must not be `None`")

        self._devices_finished = devices_finished

    @property
    def devices_not_runned(self):
        """Gets the devices_not_runned of this TestGetTestReport200ResponseStats.


        :return: The devices_not_runned of this TestGetTestReport200ResponseStats.
        :rtype: float
        """
        return self._devices_not_runned

    @devices_not_runned.setter
    def devices_not_runned(self, devices_not_runned):
        """Sets the devices_not_runned of this TestGetTestReport200ResponseStats.


        :param devices_not_runned: The devices_not_runned of this TestGetTestReport200ResponseStats.
        :type devices_not_runned: float
        """
        if devices_not_runned is None:
            raise ValueError("Invalid value for `devices_not_runned`, must not be `None`")

        self._devices_not_runned = devices_not_runned

    @property
    def devices_skipped(self):
        """Gets the devices_skipped of this TestGetTestReport200ResponseStats.


        :return: The devices_skipped of this TestGetTestReport200ResponseStats.
        :rtype: float
        """
        return self._devices_skipped

    @devices_skipped.setter
    def devices_skipped(self, devices_skipped):
        """Sets the devices_skipped of this TestGetTestReport200ResponseStats.


        :param devices_skipped: The devices_skipped of this TestGetTestReport200ResponseStats.
        :type devices_skipped: float
        """
        if devices_skipped is None:
            raise ValueError("Invalid value for `devices_skipped`, must not be `None`")

        self._devices_skipped = devices_skipped

    @property
    def failed(self):
        """Gets the failed of this TestGetTestReport200ResponseStats.


        :return: The failed of this TestGetTestReport200ResponseStats.
        :rtype: float
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this TestGetTestReport200ResponseStats.


        :param failed: The failed of this TestGetTestReport200ResponseStats.
        :type failed: float
        """
        if failed is None:
            raise ValueError("Invalid value for `failed`, must not be `None`")

        self._failed = failed

    @property
    def filesize(self):
        """Gets the filesize of this TestGetTestReport200ResponseStats.


        :return: The filesize of this TestGetTestReport200ResponseStats.
        :rtype: float
        """
        return self._filesize

    @filesize.setter
    def filesize(self, filesize):
        """Sets the filesize of this TestGetTestReport200ResponseStats.


        :param filesize: The filesize of this TestGetTestReport200ResponseStats.
        :type filesize: float
        """
        if filesize is None:
            raise ValueError("Invalid value for `filesize`, must not be `None`")

        self._filesize = filesize

    @property
    def os(self):
        """Gets the os of this TestGetTestReport200ResponseStats.


        :return: The os of this TestGetTestReport200ResponseStats.
        :rtype: float
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this TestGetTestReport200ResponseStats.


        :param os: The os of this TestGetTestReport200ResponseStats.
        :type os: float
        """
        if os is None:
            raise ValueError("Invalid value for `os`, must not be `None`")

        self._os = os

    @property
    def passed(self):
        """Gets the passed of this TestGetTestReport200ResponseStats.


        :return: The passed of this TestGetTestReport200ResponseStats.
        :rtype: float
        """
        return self._passed

    @passed.setter
    def passed(self, passed):
        """Sets the passed of this TestGetTestReport200ResponseStats.


        :param passed: The passed of this TestGetTestReport200ResponseStats.
        :type passed: float
        """
        if passed is None:
            raise ValueError("Invalid value for `passed`, must not be `None`")

        self._passed = passed

    @property
    def skipped(self):
        """Gets the skipped of this TestGetTestReport200ResponseStats.


        :return: The skipped of this TestGetTestReport200ResponseStats.
        :rtype: float
        """
        return self._skipped

    @skipped.setter
    def skipped(self, skipped):
        """Sets the skipped of this TestGetTestReport200ResponseStats.


        :param skipped: The skipped of this TestGetTestReport200ResponseStats.
        :type skipped: float
        """
        if skipped is None:
            raise ValueError("Invalid value for `skipped`, must not be `None`")

        self._skipped = skipped

    @property
    def step_count(self):
        """Gets the step_count of this TestGetTestReport200ResponseStats.


        :return: The step_count of this TestGetTestReport200ResponseStats.
        :rtype: float
        """
        return self._step_count

    @step_count.setter
    def step_count(self, step_count):
        """Sets the step_count of this TestGetTestReport200ResponseStats.


        :param step_count: The step_count of this TestGetTestReport200ResponseStats.
        :type step_count: float
        """
        if step_count is None:
            raise ValueError("Invalid value for `step_count`, must not be `None`")

        self._step_count = step_count

    @property
    def total(self):
        """Gets the total of this TestGetTestReport200ResponseStats.


        :return: The total of this TestGetTestReport200ResponseStats.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this TestGetTestReport200ResponseStats.


        :param total: The total of this TestGetTestReport200ResponseStats.
        :type total: float
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total

    @property
    def total_device_minutes(self):
        """Gets the total_device_minutes of this TestGetTestReport200ResponseStats.


        :return: The total_device_minutes of this TestGetTestReport200ResponseStats.
        :rtype: float
        """
        return self._total_device_minutes

    @total_device_minutes.setter
    def total_device_minutes(self, total_device_minutes):
        """Sets the total_device_minutes of this TestGetTestReport200ResponseStats.


        :param total_device_minutes: The total_device_minutes of this TestGetTestReport200ResponseStats.
        :type total_device_minutes: float
        """
        if total_device_minutes is None:
            raise ValueError("Invalid value for `total_device_minutes`, must not be `None`")

        self._total_device_minutes = total_device_minutes
