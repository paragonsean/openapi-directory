# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.org_distribution_group_details_response_all_of_apps import OrgDistributionGroupDetailsResponseAllOfApps
from openapi_server import util


class OrgDistributionGroupDetailsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, id: str=None, is_public: bool=None, name: str=None, origin: str=None, apps: List[OrgDistributionGroupDetailsResponseAllOfApps]=None, total_apps_count: float=None, total_users_count: float=None):
        """OrgDistributionGroupDetailsResponse - a model defined in OpenAPI

        :param display_name: The display_name of this OrgDistributionGroupDetailsResponse.
        :param id: The id of this OrgDistributionGroupDetailsResponse.
        :param is_public: The is_public of this OrgDistributionGroupDetailsResponse.
        :param name: The name of this OrgDistributionGroupDetailsResponse.
        :param origin: The origin of this OrgDistributionGroupDetailsResponse.
        :param apps: The apps of this OrgDistributionGroupDetailsResponse.
        :param total_apps_count: The total_apps_count of this OrgDistributionGroupDetailsResponse.
        :param total_users_count: The total_users_count of this OrgDistributionGroupDetailsResponse.
        """
        self.openapi_types = {
            'display_name': str,
            'id': str,
            'is_public': bool,
            'name': str,
            'origin': str,
            'apps': List[OrgDistributionGroupDetailsResponseAllOfApps],
            'total_apps_count': float,
            'total_users_count': float
        }

        self.attribute_map = {
            'display_name': 'display_name',
            'id': 'id',
            'is_public': 'is_public',
            'name': 'name',
            'origin': 'origin',
            'apps': 'apps',
            'total_apps_count': 'total_apps_count',
            'total_users_count': 'total_users_count'
        }

        self._display_name = display_name
        self._id = id
        self._is_public = is_public
        self._name = name
        self._origin = origin
        self._apps = apps
        self._total_apps_count = total_apps_count
        self._total_users_count = total_users_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrgDistributionGroupDetailsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrgDistributionGroupDetailsResponse of this OrgDistributionGroupDetailsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this OrgDistributionGroupDetailsResponse.

        The name of the distribution group

        :return: The display_name of this OrgDistributionGroupDetailsResponse.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this OrgDistributionGroupDetailsResponse.

        The name of the distribution group

        :param display_name: The display_name of this OrgDistributionGroupDetailsResponse.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this OrgDistributionGroupDetailsResponse.

        The unique ID of the distribution group

        :return: The id of this OrgDistributionGroupDetailsResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrgDistributionGroupDetailsResponse.

        The unique ID of the distribution group

        :param id: The id of this OrgDistributionGroupDetailsResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_public(self):
        """Gets the is_public of this OrgDistributionGroupDetailsResponse.

        Whether the distribution group is public

        :return: The is_public of this OrgDistributionGroupDetailsResponse.
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this OrgDistributionGroupDetailsResponse.

        Whether the distribution group is public

        :param is_public: The is_public of this OrgDistributionGroupDetailsResponse.
        :type is_public: bool
        """
        if is_public is None:
            raise ValueError("Invalid value for `is_public`, must not be `None`")

        self._is_public = is_public

    @property
    def name(self):
        """Gets the name of this OrgDistributionGroupDetailsResponse.

        The name of the distribution group used in URLs

        :return: The name of this OrgDistributionGroupDetailsResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrgDistributionGroupDetailsResponse.

        The name of the distribution group used in URLs

        :param name: The name of this OrgDistributionGroupDetailsResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def origin(self):
        """Gets the origin of this OrgDistributionGroupDetailsResponse.

        The creation origin of this distribution group

        :return: The origin of this OrgDistributionGroupDetailsResponse.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this OrgDistributionGroupDetailsResponse.

        The creation origin of this distribution group

        :param origin: The origin of this OrgDistributionGroupDetailsResponse.
        :type origin: str
        """
        allowed_values = ["appcenter", "hockeyapp"]  # noqa: E501
        if origin not in allowed_values:
            raise ValueError(
                "Invalid value for `origin` ({0}), must be one of {1}"
                .format(origin, allowed_values)
            )

        self._origin = origin

    @property
    def apps(self):
        """Gets the apps of this OrgDistributionGroupDetailsResponse.

        The apps associated with the distribution group

        :return: The apps of this OrgDistributionGroupDetailsResponse.
        :rtype: List[OrgDistributionGroupDetailsResponseAllOfApps]
        """
        return self._apps

    @apps.setter
    def apps(self, apps):
        """Sets the apps of this OrgDistributionGroupDetailsResponse.

        The apps associated with the distribution group

        :param apps: The apps of this OrgDistributionGroupDetailsResponse.
        :type apps: List[OrgDistributionGroupDetailsResponseAllOfApps]
        """
        if apps is None:
            raise ValueError("Invalid value for `apps`, must not be `None`")

        self._apps = apps

    @property
    def total_apps_count(self):
        """Gets the total_apps_count of this OrgDistributionGroupDetailsResponse.

        The count of apps associated with this distribution group

        :return: The total_apps_count of this OrgDistributionGroupDetailsResponse.
        :rtype: float
        """
        return self._total_apps_count

    @total_apps_count.setter
    def total_apps_count(self, total_apps_count):
        """Sets the total_apps_count of this OrgDistributionGroupDetailsResponse.

        The count of apps associated with this distribution group

        :param total_apps_count: The total_apps_count of this OrgDistributionGroupDetailsResponse.
        :type total_apps_count: float
        """
        if total_apps_count is None:
            raise ValueError("Invalid value for `total_apps_count`, must not be `None`")

        self._total_apps_count = total_apps_count

    @property
    def total_users_count(self):
        """Gets the total_users_count of this OrgDistributionGroupDetailsResponse.

        The count of users in the distribution group

        :return: The total_users_count of this OrgDistributionGroupDetailsResponse.
        :rtype: float
        """
        return self._total_users_count

    @total_users_count.setter
    def total_users_count(self, total_users_count):
        """Sets the total_users_count of this OrgDistributionGroupDetailsResponse.

        The count of users in the distribution group

        :param total_users_count: The total_users_count of this OrgDistributionGroupDetailsResponse.
        :type total_users_count: float
        """
        if total_users_count is None:
            raise ValueError("Invalid value for `total_users_count`, must not be `None`")

        self._total_users_count = total_users_count
