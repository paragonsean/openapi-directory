# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StoreReleasesList200ResponseInnerDistributionStoresInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, is_latest: bool=None, name: str=None, publishing_status: str=None, type: str=None):
        """StoreReleasesList200ResponseInnerDistributionStoresInner - a model defined in OpenAPI

        :param id: The id of this StoreReleasesList200ResponseInnerDistributionStoresInner.
        :param is_latest: The is_latest of this StoreReleasesList200ResponseInnerDistributionStoresInner.
        :param name: The name of this StoreReleasesList200ResponseInnerDistributionStoresInner.
        :param publishing_status: The publishing_status of this StoreReleasesList200ResponseInnerDistributionStoresInner.
        :param type: The type of this StoreReleasesList200ResponseInnerDistributionStoresInner.
        """
        self.openapi_types = {
            'id': str,
            'is_latest': bool,
            'name': str,
            'publishing_status': str,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'is_latest': 'is_latest',
            'name': 'name',
            'publishing_status': 'publishing_status',
            'type': 'type'
        }

        self._id = id
        self._is_latest = is_latest
        self._name = name
        self._publishing_status = publishing_status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoreReleasesList200ResponseInnerDistributionStoresInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The storeReleases_list_200_response_inner_distribution_stores_inner of this StoreReleasesList200ResponseInnerDistributionStoresInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this StoreReleasesList200ResponseInnerDistributionStoresInner.

        ID identifying a unique distribution store.

        :return: The id of this StoreReleasesList200ResponseInnerDistributionStoresInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StoreReleasesList200ResponseInnerDistributionStoresInner.

        ID identifying a unique distribution store.

        :param id: The id of this StoreReleasesList200ResponseInnerDistributionStoresInner.
        :type id: str
        """

        self._id = id

    @property
    def is_latest(self):
        """Gets the is_latest of this StoreReleasesList200ResponseInnerDistributionStoresInner.

        Is the containing release the latest one in this distribution store.

        :return: The is_latest of this StoreReleasesList200ResponseInnerDistributionStoresInner.
        :rtype: bool
        """
        return self._is_latest

    @is_latest.setter
    def is_latest(self, is_latest):
        """Sets the is_latest of this StoreReleasesList200ResponseInnerDistributionStoresInner.

        Is the containing release the latest one in this distribution store.

        :param is_latest: The is_latest of this StoreReleasesList200ResponseInnerDistributionStoresInner.
        :type is_latest: bool
        """

        self._is_latest = is_latest

    @property
    def name(self):
        """Gets the name of this StoreReleasesList200ResponseInnerDistributionStoresInner.

        A name identifying a unique distribution store.

        :return: The name of this StoreReleasesList200ResponseInnerDistributionStoresInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StoreReleasesList200ResponseInnerDistributionStoresInner.

        A name identifying a unique distribution store.

        :param name: The name of this StoreReleasesList200ResponseInnerDistributionStoresInner.
        :type name: str
        """

        self._name = name

    @property
    def publishing_status(self):
        """Gets the publishing_status of this StoreReleasesList200ResponseInnerDistributionStoresInner.

        A status identifying the status of release in the distribution store.

        :return: The publishing_status of this StoreReleasesList200ResponseInnerDistributionStoresInner.
        :rtype: str
        """
        return self._publishing_status

    @publishing_status.setter
    def publishing_status(self, publishing_status):
        """Sets the publishing_status of this StoreReleasesList200ResponseInnerDistributionStoresInner.

        A status identifying the status of release in the distribution store.

        :param publishing_status: The publishing_status of this StoreReleasesList200ResponseInnerDistributionStoresInner.
        :type publishing_status: str
        """

        self._publishing_status = publishing_status

    @property
    def type(self):
        """Gets the type of this StoreReleasesList200ResponseInnerDistributionStoresInner.

        A type identifying the type of distribution store.

        :return: The type of this StoreReleasesList200ResponseInnerDistributionStoresInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StoreReleasesList200ResponseInnerDistributionStoresInner.

        A type identifying the type of distribution store.

        :param type: The type of this StoreReleasesList200ResponseInnerDistributionStoresInner.
        :type type: str
        """
        allowed_values = ["googleplay", "intune", "apple"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
