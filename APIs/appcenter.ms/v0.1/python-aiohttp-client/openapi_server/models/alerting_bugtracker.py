# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bugtracker_get_settings200_response_settings import BugtrackerGetSettings200ResponseSettings
from openapi_server import util


class AlertingBugtracker(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_types: List[str]=None, settings: BugtrackerGetSettings200ResponseSettings=None, state: str=None, token_id: str=None, type: str=None):
        """AlertingBugtracker - a model defined in OpenAPI

        :param event_types: The event_types of this AlertingBugtracker.
        :param settings: The settings of this AlertingBugtracker.
        :param state: The state of this AlertingBugtracker.
        :param token_id: The token_id of this AlertingBugtracker.
        :param type: The type of this AlertingBugtracker.
        """
        self.openapi_types = {
            'event_types': List[str],
            'settings': BugtrackerGetSettings200ResponseSettings,
            'state': str,
            'token_id': str,
            'type': str
        }

        self.attribute_map = {
            'event_types': 'event_types',
            'settings': 'settings',
            'state': 'state',
            'token_id': 'token_id',
            'type': 'type'
        }

        self._event_types = event_types
        self._settings = settings
        self._state = state
        self._token_id = token_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertingBugtracker':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlertingBugtracker of this AlertingBugtracker.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_types(self):
        """Gets the event_types of this AlertingBugtracker.

        Event types enabled for bugtracker

        :return: The event_types of this AlertingBugtracker.
        :rtype: List[str]
        """
        return self._event_types

    @event_types.setter
    def event_types(self, event_types):
        """Sets the event_types of this AlertingBugtracker.

        Event types enabled for bugtracker

        :param event_types: The event_types of this AlertingBugtracker.
        :type event_types: List[str]
        """
        allowed_values = ["newCrashGroupCreated", "newAppReleased"]  # noqa: E501
        if not set(event_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `event_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(event_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._event_types = event_types

    @property
    def settings(self):
        """Gets the settings of this AlertingBugtracker.


        :return: The settings of this AlertingBugtracker.
        :rtype: BugtrackerGetSettings200ResponseSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this AlertingBugtracker.


        :param settings: The settings of this AlertingBugtracker.
        :type settings: BugtrackerGetSettings200ResponseSettings
        """

        self._settings = settings

    @property
    def state(self):
        """Gets the state of this AlertingBugtracker.

        bugtracker state

        :return: The state of this AlertingBugtracker.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AlertingBugtracker.

        bugtracker state

        :param state: The state of this AlertingBugtracker.
        :type state: str
        """
        allowed_values = ["enabled", "disabled", "unauthorized"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def token_id(self):
        """Gets the token_id of this AlertingBugtracker.

        ID of OAuth token

        :return: The token_id of this AlertingBugtracker.
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this AlertingBugtracker.

        ID of OAuth token

        :param token_id: The token_id of this AlertingBugtracker.
        :type token_id: str
        """

        self._token_id = token_id

    @property
    def type(self):
        """Gets the type of this AlertingBugtracker.

        type of bugtracker

        :return: The type of this AlertingBugtracker.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AlertingBugtracker.

        type of bugtracker

        :param type: The type of this AlertingBugtracker.
        :type type: str
        """
        allowed_values = ["github", "vsts", "jira"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
