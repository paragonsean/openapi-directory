# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DiagnosticsStackFrame(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, app_code: bool=None, class_method: bool=None, class_name: str=None, code_formatted: str=None, code_raw: str=None, file: str=None, framework_name: str=None, language: str=None, line: int=None, method: str=None, method_params: str=None, relevant: bool=None):
        """DiagnosticsStackFrame - a model defined in OpenAPI

        :param address: The address of this DiagnosticsStackFrame.
        :param app_code: The app_code of this DiagnosticsStackFrame.
        :param class_method: The class_method of this DiagnosticsStackFrame.
        :param class_name: The class_name of this DiagnosticsStackFrame.
        :param code_formatted: The code_formatted of this DiagnosticsStackFrame.
        :param code_raw: The code_raw of this DiagnosticsStackFrame.
        :param file: The file of this DiagnosticsStackFrame.
        :param framework_name: The framework_name of this DiagnosticsStackFrame.
        :param language: The language of this DiagnosticsStackFrame.
        :param line: The line of this DiagnosticsStackFrame.
        :param method: The method of this DiagnosticsStackFrame.
        :param method_params: The method_params of this DiagnosticsStackFrame.
        :param relevant: The relevant of this DiagnosticsStackFrame.
        """
        self.openapi_types = {
            'address': str,
            'app_code': bool,
            'class_method': bool,
            'class_name': str,
            'code_formatted': str,
            'code_raw': str,
            'file': str,
            'framework_name': str,
            'language': str,
            'line': int,
            'method': str,
            'method_params': str,
            'relevant': bool
        }

        self.attribute_map = {
            'address': 'address',
            'app_code': 'app_code',
            'class_method': 'class_method',
            'class_name': 'class_name',
            'code_formatted': 'code_formatted',
            'code_raw': 'code_raw',
            'file': 'file',
            'framework_name': 'framework_name',
            'language': 'language',
            'line': 'line',
            'method': 'method',
            'method_params': 'method_params',
            'relevant': 'relevant'
        }

        self._address = address
        self._app_code = app_code
        self._class_method = class_method
        self._class_name = class_name
        self._code_formatted = code_formatted
        self._code_raw = code_raw
        self._file = file
        self._framework_name = framework_name
        self._language = language
        self._line = line
        self._method = method
        self._method_params = method_params
        self._relevant = relevant

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiagnosticsStackFrame':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiagnosticsStackFrame of this DiagnosticsStackFrame.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this DiagnosticsStackFrame.

        address of the frame

        :return: The address of this DiagnosticsStackFrame.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this DiagnosticsStackFrame.

        address of the frame

        :param address: The address of this DiagnosticsStackFrame.
        :type address: str
        """

        self._address = address

    @property
    def app_code(self):
        """Gets the app_code of this DiagnosticsStackFrame.

        this line isn't from any framework

        :return: The app_code of this DiagnosticsStackFrame.
        :rtype: bool
        """
        return self._app_code

    @app_code.setter
    def app_code(self, app_code):
        """Sets the app_code of this DiagnosticsStackFrame.

        this line isn't from any framework

        :param app_code: The app_code of this DiagnosticsStackFrame.
        :type app_code: bool
        """
        if app_code is None:
            raise ValueError("Invalid value for `app_code`, must not be `None`")

        self._app_code = app_code

    @property
    def class_method(self):
        """Gets the class_method of this DiagnosticsStackFrame.

        is a class method

        :return: The class_method of this DiagnosticsStackFrame.
        :rtype: bool
        """
        return self._class_method

    @class_method.setter
    def class_method(self, class_method):
        """Sets the class_method of this DiagnosticsStackFrame.

        is a class method

        :param class_method: The class_method of this DiagnosticsStackFrame.
        :type class_method: bool
        """

        self._class_method = class_method

    @property
    def class_name(self):
        """Gets the class_name of this DiagnosticsStackFrame.

        name of the class

        :return: The class_name of this DiagnosticsStackFrame.
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this DiagnosticsStackFrame.

        name of the class

        :param class_name: The class_name of this DiagnosticsStackFrame.
        :type class_name: str
        """

        self._class_name = class_name

    @property
    def code_formatted(self):
        """Gets the code_formatted of this DiagnosticsStackFrame.

        Formatted frame string

        :return: The code_formatted of this DiagnosticsStackFrame.
        :rtype: str
        """
        return self._code_formatted

    @code_formatted.setter
    def code_formatted(self, code_formatted):
        """Sets the code_formatted of this DiagnosticsStackFrame.

        Formatted frame string

        :param code_formatted: The code_formatted of this DiagnosticsStackFrame.
        :type code_formatted: str
        """
        if code_formatted is None:
            raise ValueError("Invalid value for `code_formatted`, must not be `None`")

        self._code_formatted = code_formatted

    @property
    def code_raw(self):
        """Gets the code_raw of this DiagnosticsStackFrame.

        Raw frame string

        :return: The code_raw of this DiagnosticsStackFrame.
        :rtype: str
        """
        return self._code_raw

    @code_raw.setter
    def code_raw(self, code_raw):
        """Sets the code_raw of this DiagnosticsStackFrame.

        Raw frame string

        :param code_raw: The code_raw of this DiagnosticsStackFrame.
        :type code_raw: str
        """
        if code_raw is None:
            raise ValueError("Invalid value for `code_raw`, must not be `None`")

        self._code_raw = code_raw

    @property
    def file(self):
        """Gets the file of this DiagnosticsStackFrame.

        name of the file

        :return: The file of this DiagnosticsStackFrame.
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this DiagnosticsStackFrame.

        name of the file

        :param file: The file of this DiagnosticsStackFrame.
        :type file: str
        """

        self._file = file

    @property
    def framework_name(self):
        """Gets the framework_name of this DiagnosticsStackFrame.

        Name of the framework

        :return: The framework_name of this DiagnosticsStackFrame.
        :rtype: str
        """
        return self._framework_name

    @framework_name.setter
    def framework_name(self, framework_name):
        """Sets the framework_name of this DiagnosticsStackFrame.

        Name of the framework

        :param framework_name: The framework_name of this DiagnosticsStackFrame.
        :type framework_name: str
        """

        self._framework_name = framework_name

    @property
    def language(self):
        """Gets the language of this DiagnosticsStackFrame.

        programming language of the frame

        :return: The language of this DiagnosticsStackFrame.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this DiagnosticsStackFrame.

        programming language of the frame

        :param language: The language of this DiagnosticsStackFrame.
        :type language: str
        """
        allowed_values = ["JavaScript", "CSharp", "Objective-C", "Objective-Cpp", "Cpp", "C", "Swift", "Java", "Unknown"]  # noqa: E501
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def line(self):
        """Gets the line of this DiagnosticsStackFrame.

        line number

        :return: The line of this DiagnosticsStackFrame.
        :rtype: int
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this DiagnosticsStackFrame.

        line number

        :param line: The line of this DiagnosticsStackFrame.
        :type line: int
        """

        self._line = line

    @property
    def method(self):
        """Gets the method of this DiagnosticsStackFrame.

        name of the method

        :return: The method of this DiagnosticsStackFrame.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this DiagnosticsStackFrame.

        name of the method

        :param method: The method of this DiagnosticsStackFrame.
        :type method: str
        """

        self._method = method

    @property
    def method_params(self):
        """Gets the method_params of this DiagnosticsStackFrame.

        parameters of the frames method

        :return: The method_params of this DiagnosticsStackFrame.
        :rtype: str
        """
        return self._method_params

    @method_params.setter
    def method_params(self, method_params):
        """Sets the method_params of this DiagnosticsStackFrame.

        parameters of the frames method

        :param method_params: The method_params of this DiagnosticsStackFrame.
        :type method_params: str
        """

        self._method_params = method_params

    @property
    def relevant(self):
        """Gets the relevant of this DiagnosticsStackFrame.

        frame should be shown always

        :return: The relevant of this DiagnosticsStackFrame.
        :rtype: bool
        """
        return self._relevant

    @relevant.setter
    def relevant(self, relevant):
        """Sets the relevant of this DiagnosticsStackFrame.

        frame should be shown always

        :param relevant: The relevant of this DiagnosticsStackFrame.
        :type relevant: bool
        """

        self._relevant = relevant
