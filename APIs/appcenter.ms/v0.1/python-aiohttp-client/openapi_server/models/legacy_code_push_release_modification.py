# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LegacyCodePushReleaseModification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, package_info: object=None):
        """LegacyCodePushReleaseModification - a model defined in OpenAPI

        :param package_info: The package_info of this LegacyCodePushReleaseModification.
        """
        self.openapi_types = {
            'package_info': object
        }

        self.attribute_map = {
            'package_info': 'packageInfo'
        }

        self._package_info = package_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LegacyCodePushReleaseModification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LegacyCodePushReleaseModification of this LegacyCodePushReleaseModification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def package_info(self):
        """Gets the package_info of this LegacyCodePushReleaseModification.

        The release package information

        :return: The package_info of this LegacyCodePushReleaseModification.
        :rtype: object
        """
        return self._package_info

    @package_info.setter
    def package_info(self, package_info):
        """Sets the package_info of this LegacyCodePushReleaseModification.

        The release package information

        :param package_info: The package_info of this LegacyCodePushReleaseModification.
        :type package_info: object
        """
        if package_info is None:
            raise ValueError("Invalid value for `package_info`, must not be `None`")

        self._package_info = package_info
