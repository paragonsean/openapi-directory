# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReleasesGetReleaseUploadStatus200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_details: str=None, id: str=None, release_distinct_id: float=None, release_url: object=None, upload_status: str=None):
        """ReleasesGetReleaseUploadStatus200Response - a model defined in OpenAPI

        :param error_details: The error_details of this ReleasesGetReleaseUploadStatus200Response.
        :param id: The id of this ReleasesGetReleaseUploadStatus200Response.
        :param release_distinct_id: The release_distinct_id of this ReleasesGetReleaseUploadStatus200Response.
        :param release_url: The release_url of this ReleasesGetReleaseUploadStatus200Response.
        :param upload_status: The upload_status of this ReleasesGetReleaseUploadStatus200Response.
        """
        self.openapi_types = {
            'error_details': str,
            'id': str,
            'release_distinct_id': float,
            'release_url': object,
            'upload_status': str
        }

        self.attribute_map = {
            'error_details': 'error_details',
            'id': 'id',
            'release_distinct_id': 'release_distinct_id',
            'release_url': 'release_url',
            'upload_status': 'upload_status'
        }

        self._error_details = error_details
        self._id = id
        self._release_distinct_id = release_distinct_id
        self._release_url = release_url
        self._upload_status = upload_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReleasesGetReleaseUploadStatus200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The releases_getReleaseUploadStatus_200_response of this ReleasesGetReleaseUploadStatus200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_details(self):
        """Gets the error_details of this ReleasesGetReleaseUploadStatus200Response.

        Details describing what went wrong processing the upload. Will only be set if status = 'error'.

        :return: The error_details of this ReleasesGetReleaseUploadStatus200Response.
        :rtype: str
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this ReleasesGetReleaseUploadStatus200Response.

        Details describing what went wrong processing the upload. Will only be set if status = 'error'.

        :param error_details: The error_details of this ReleasesGetReleaseUploadStatus200Response.
        :type error_details: str
        """

        self._error_details = error_details

    @property
    def id(self):
        """Gets the id of this ReleasesGetReleaseUploadStatus200Response.

        The ID for the upload.

        :return: The id of this ReleasesGetReleaseUploadStatus200Response.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReleasesGetReleaseUploadStatus200Response.

        The ID for the upload.

        :param id: The id of this ReleasesGetReleaseUploadStatus200Response.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def release_distinct_id(self):
        """Gets the release_distinct_id of this ReleasesGetReleaseUploadStatus200Response.

        The distinct ID of the release. Will only be set when the status = 'readyToBePublished'.

        :return: The release_distinct_id of this ReleasesGetReleaseUploadStatus200Response.
        :rtype: float
        """
        return self._release_distinct_id

    @release_distinct_id.setter
    def release_distinct_id(self, release_distinct_id):
        """Sets the release_distinct_id of this ReleasesGetReleaseUploadStatus200Response.

        The distinct ID of the release. Will only be set when the status = 'readyToBePublished'.

        :param release_distinct_id: The release_distinct_id of this ReleasesGetReleaseUploadStatus200Response.
        :type release_distinct_id: float
        """

        self._release_distinct_id = release_distinct_id

    @property
    def release_url(self):
        """Gets the release_url of this ReleasesGetReleaseUploadStatus200Response.

        The URL of the release. Will only be set when the status = 'readyToBePublished'.

        :return: The release_url of this ReleasesGetReleaseUploadStatus200Response.
        :rtype: object
        """
        return self._release_url

    @release_url.setter
    def release_url(self, release_url):
        """Sets the release_url of this ReleasesGetReleaseUploadStatus200Response.

        The URL of the release. Will only be set when the status = 'readyToBePublished'.

        :param release_url: The release_url of this ReleasesGetReleaseUploadStatus200Response.
        :type release_url: object
        """

        self._release_url = release_url

    @property
    def upload_status(self):
        """Gets the upload_status of this ReleasesGetReleaseUploadStatus200Response.

        The current upload status.

        :return: The upload_status of this ReleasesGetReleaseUploadStatus200Response.
        :rtype: str
        """
        return self._upload_status

    @upload_status.setter
    def upload_status(self, upload_status):
        """Sets the upload_status of this ReleasesGetReleaseUploadStatus200Response.

        The current upload status.

        :param upload_status: The upload_status of this ReleasesGetReleaseUploadStatus200Response.
        :type upload_status: str
        """
        allowed_values = ["uploadStarted", "uploadFinished", "readyToBePublished", "malwareDetected", "error"]  # noqa: E501
        if upload_status not in allowed_values:
            raise ValueError(
                "Invalid value for `upload_status` ({0}), must be one of {1}"
                .format(upload_status, allowed_values)
            )

        self._upload_status = upload_status
