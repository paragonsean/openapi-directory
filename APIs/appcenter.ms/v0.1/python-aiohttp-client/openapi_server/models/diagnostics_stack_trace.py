# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.diagnostics_exception import DiagnosticsException
from openapi_server.models.diagnostics_thread import DiagnosticsThread
from openapi_server import util


class DiagnosticsStackTrace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exception: DiagnosticsException=None, reason: str=None, threads: List[DiagnosticsThread]=None, title: str=None):
        """DiagnosticsStackTrace - a model defined in OpenAPI

        :param exception: The exception of this DiagnosticsStackTrace.
        :param reason: The reason of this DiagnosticsStackTrace.
        :param threads: The threads of this DiagnosticsStackTrace.
        :param title: The title of this DiagnosticsStackTrace.
        """
        self.openapi_types = {
            'exception': DiagnosticsException,
            'reason': str,
            'threads': List[DiagnosticsThread],
            'title': str
        }

        self.attribute_map = {
            'exception': 'exception',
            'reason': 'reason',
            'threads': 'threads',
            'title': 'title'
        }

        self._exception = exception
        self._reason = reason
        self._threads = threads
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiagnosticsStackTrace':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiagnosticsStackTrace of this DiagnosticsStackTrace.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exception(self):
        """Gets the exception of this DiagnosticsStackTrace.


        :return: The exception of this DiagnosticsStackTrace.
        :rtype: DiagnosticsException
        """
        return self._exception

    @exception.setter
    def exception(self, exception):
        """Sets the exception of this DiagnosticsStackTrace.


        :param exception: The exception of this DiagnosticsStackTrace.
        :type exception: DiagnosticsException
        """

        self._exception = exception

    @property
    def reason(self):
        """Gets the reason of this DiagnosticsStackTrace.


        :return: The reason of this DiagnosticsStackTrace.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this DiagnosticsStackTrace.


        :param reason: The reason of this DiagnosticsStackTrace.
        :type reason: str
        """

        self._reason = reason

    @property
    def threads(self):
        """Gets the threads of this DiagnosticsStackTrace.


        :return: The threads of this DiagnosticsStackTrace.
        :rtype: List[DiagnosticsThread]
        """
        return self._threads

    @threads.setter
    def threads(self, threads):
        """Sets the threads of this DiagnosticsStackTrace.


        :param threads: The threads of this DiagnosticsStackTrace.
        :type threads: List[DiagnosticsThread]
        """

        self._threads = threads

    @property
    def title(self):
        """Gets the title of this DiagnosticsStackTrace.


        :return: The title of this DiagnosticsStackTrace.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DiagnosticsStackTrace.


        :param title: The title of this DiagnosticsStackTrace.
        :type title: str
        """

        self._title = title
