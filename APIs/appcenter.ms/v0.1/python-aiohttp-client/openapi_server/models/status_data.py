# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StatusData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: str=None, storetype: str=None, track: str=None, version: str=None):
        """StatusData - a model defined in OpenAPI

        :param status: The status of this StatusData.
        :param storetype: The storetype of this StatusData.
        :param track: The track of this StatusData.
        :param version: The version of this StatusData.
        """
        self.openapi_types = {
            'status': str,
            'storetype': str,
            'track': str,
            'version': str
        }

        self.attribute_map = {
            'status': 'status',
            'storetype': 'storetype',
            'track': 'track',
            'version': 'version'
        }

        self._status = status
        self._storetype = storetype
        self._track = track
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatusData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatusData of this StatusData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this StatusData.

        status from store

        :return: The status of this StatusData.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StatusData.

        status from store

        :param status: The status of this StatusData.
        :type status: str
        """

        self._status = status

    @property
    def storetype(self):
        """Gets the storetype of this StatusData.

        store type

        :return: The storetype of this StatusData.
        :rtype: str
        """
        return self._storetype

    @storetype.setter
    def storetype(self, storetype):
        """Sets the storetype of this StatusData.

        store type

        :param storetype: The storetype of this StatusData.
        :type storetype: str
        """

        self._storetype = storetype

    @property
    def track(self):
        """Gets the track of this StatusData.

        track information from store

        :return: The track of this StatusData.
        :rtype: str
        """
        return self._track

    @track.setter
    def track(self, track):
        """Sets the track of this StatusData.

        track information from store

        :param track: The track of this StatusData.
        :type track: str
        """

        self._track = track

    @property
    def version(self):
        """Gets the version of this StatusData.

        version of the app from store

        :return: The version of this StatusData.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this StatusData.

        version of the app from store

        :param version: The version of this StatusData.
        :type version: str
        """

        self._version = version
