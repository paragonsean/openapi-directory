# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataSubjectRightDeleteRequest202Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, token: str=None):
        """DataSubjectRightDeleteRequest202Response - a model defined in OpenAPI

        :param created_at: The created_at of this DataSubjectRightDeleteRequest202Response.
        :param token: The token of this DataSubjectRightDeleteRequest202Response.
        """
        self.openapi_types = {
            'created_at': datetime,
            'token': str
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'token': 'token'
        }

        self._created_at = created_at
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataSubjectRightDeleteRequest202Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataSubjectRight_DeleteRequest_202_response of this DataSubjectRightDeleteRequest202Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this DataSubjectRightDeleteRequest202Response.

        ISO 8601 format timestamp of when request was created.

        :return: The created_at of this DataSubjectRightDeleteRequest202Response.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DataSubjectRightDeleteRequest202Response.

        ISO 8601 format timestamp of when request was created.

        :param created_at: The created_at of this DataSubjectRightDeleteRequest202Response.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def token(self):
        """Gets the token of this DataSubjectRightDeleteRequest202Response.

        Unique request identifier

        :return: The token of this DataSubjectRightDeleteRequest202Response.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this DataSubjectRightDeleteRequest202Response.

        Unique request identifier

        :param token: The token of this DataSubjectRightDeleteRequest202Response.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token
