# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AndroidBranchConfigurationProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, automatic_signing: bool=None, build_variant: str=None, gradle_wrapper_path: str=None, is_root: bool=None, key_alias: str=None, key_password: str=None, keystore_encoded: str=None, keystore_filename: str=None, keystore_password: str=None, module: str=None, run_lint: bool=None, run_tests: bool=True):
        """AndroidBranchConfigurationProperties - a model defined in OpenAPI

        :param automatic_signing: The automatic_signing of this AndroidBranchConfigurationProperties.
        :param build_variant: The build_variant of this AndroidBranchConfigurationProperties.
        :param gradle_wrapper_path: The gradle_wrapper_path of this AndroidBranchConfigurationProperties.
        :param is_root: The is_root of this AndroidBranchConfigurationProperties.
        :param key_alias: The key_alias of this AndroidBranchConfigurationProperties.
        :param key_password: The key_password of this AndroidBranchConfigurationProperties.
        :param keystore_encoded: The keystore_encoded of this AndroidBranchConfigurationProperties.
        :param keystore_filename: The keystore_filename of this AndroidBranchConfigurationProperties.
        :param keystore_password: The keystore_password of this AndroidBranchConfigurationProperties.
        :param module: The module of this AndroidBranchConfigurationProperties.
        :param run_lint: The run_lint of this AndroidBranchConfigurationProperties.
        :param run_tests: The run_tests of this AndroidBranchConfigurationProperties.
        """
        self.openapi_types = {
            'automatic_signing': bool,
            'build_variant': str,
            'gradle_wrapper_path': str,
            'is_root': bool,
            'key_alias': str,
            'key_password': str,
            'keystore_encoded': str,
            'keystore_filename': str,
            'keystore_password': str,
            'module': str,
            'run_lint': bool,
            'run_tests': bool
        }

        self.attribute_map = {
            'automatic_signing': 'automaticSigning',
            'build_variant': 'buildVariant',
            'gradle_wrapper_path': 'gradleWrapperPath',
            'is_root': 'isRoot',
            'key_alias': 'keyAlias',
            'key_password': 'keyPassword',
            'keystore_encoded': 'keystoreEncoded',
            'keystore_filename': 'keystoreFilename',
            'keystore_password': 'keystorePassword',
            'module': 'module',
            'run_lint': 'runLint',
            'run_tests': 'runTests'
        }

        self._automatic_signing = automatic_signing
        self._build_variant = build_variant
        self._gradle_wrapper_path = gradle_wrapper_path
        self._is_root = is_root
        self._key_alias = key_alias
        self._key_password = key_password
        self._keystore_encoded = keystore_encoded
        self._keystore_filename = keystore_filename
        self._keystore_password = keystore_password
        self._module = module
        self._run_lint = run_lint
        self._run_tests = run_tests

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AndroidBranchConfigurationProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AndroidBranchConfigurationProperties of this AndroidBranchConfigurationProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def automatic_signing(self):
        """Gets the automatic_signing of this AndroidBranchConfigurationProperties.

        Whether to apply automatic signing or not

        :return: The automatic_signing of this AndroidBranchConfigurationProperties.
        :rtype: bool
        """
        return self._automatic_signing

    @automatic_signing.setter
    def automatic_signing(self, automatic_signing):
        """Sets the automatic_signing of this AndroidBranchConfigurationProperties.

        Whether to apply automatic signing or not

        :param automatic_signing: The automatic_signing of this AndroidBranchConfigurationProperties.
        :type automatic_signing: bool
        """

        self._automatic_signing = automatic_signing

    @property
    def build_variant(self):
        """Gets the build_variant of this AndroidBranchConfigurationProperties.

        The Android build variant to build

        :return: The build_variant of this AndroidBranchConfigurationProperties.
        :rtype: str
        """
        return self._build_variant

    @build_variant.setter
    def build_variant(self, build_variant):
        """Sets the build_variant of this AndroidBranchConfigurationProperties.

        The Android build variant to build

        :param build_variant: The build_variant of this AndroidBranchConfigurationProperties.
        :type build_variant: str
        """

        self._build_variant = build_variant

    @property
    def gradle_wrapper_path(self):
        """Gets the gradle_wrapper_path of this AndroidBranchConfigurationProperties.

        Path to the Gradle wrapper script

        :return: The gradle_wrapper_path of this AndroidBranchConfigurationProperties.
        :rtype: str
        """
        return self._gradle_wrapper_path

    @gradle_wrapper_path.setter
    def gradle_wrapper_path(self, gradle_wrapper_path):
        """Sets the gradle_wrapper_path of this AndroidBranchConfigurationProperties.

        Path to the Gradle wrapper script

        :param gradle_wrapper_path: The gradle_wrapper_path of this AndroidBranchConfigurationProperties.
        :type gradle_wrapper_path: str
        """

        self._gradle_wrapper_path = gradle_wrapper_path

    @property
    def is_root(self):
        """Gets the is_root of this AndroidBranchConfigurationProperties.

        Whether it is the root module or not

        :return: The is_root of this AndroidBranchConfigurationProperties.
        :rtype: bool
        """
        return self._is_root

    @is_root.setter
    def is_root(self, is_root):
        """Sets the is_root of this AndroidBranchConfigurationProperties.

        Whether it is the root module or not

        :param is_root: The is_root of this AndroidBranchConfigurationProperties.
        :type is_root: bool
        """

        self._is_root = is_root

    @property
    def key_alias(self):
        """Gets the key_alias of this AndroidBranchConfigurationProperties.

        The key alias

        :return: The key_alias of this AndroidBranchConfigurationProperties.
        :rtype: str
        """
        return self._key_alias

    @key_alias.setter
    def key_alias(self, key_alias):
        """Sets the key_alias of this AndroidBranchConfigurationProperties.

        The key alias

        :param key_alias: The key_alias of this AndroidBranchConfigurationProperties.
        :type key_alias: str
        """

        self._key_alias = key_alias

    @property
    def key_password(self):
        """Gets the key_password of this AndroidBranchConfigurationProperties.

        The key password

        :return: The key_password of this AndroidBranchConfigurationProperties.
        :rtype: str
        """
        return self._key_password

    @key_password.setter
    def key_password(self, key_password):
        """Sets the key_password of this AndroidBranchConfigurationProperties.

        The key password

        :param key_password: The key_password of this AndroidBranchConfigurationProperties.
        :type key_password: str
        """

        self._key_password = key_password

    @property
    def keystore_encoded(self):
        """Gets the keystore_encoded of this AndroidBranchConfigurationProperties.

        The keystore encoded value

        :return: The keystore_encoded of this AndroidBranchConfigurationProperties.
        :rtype: str
        """
        return self._keystore_encoded

    @keystore_encoded.setter
    def keystore_encoded(self, keystore_encoded):
        """Sets the keystore_encoded of this AndroidBranchConfigurationProperties.

        The keystore encoded value

        :param keystore_encoded: The keystore_encoded of this AndroidBranchConfigurationProperties.
        :type keystore_encoded: str
        """

        self._keystore_encoded = keystore_encoded

    @property
    def keystore_filename(self):
        """Gets the keystore_filename of this AndroidBranchConfigurationProperties.

        The name of the keystore file

        :return: The keystore_filename of this AndroidBranchConfigurationProperties.
        :rtype: str
        """
        return self._keystore_filename

    @keystore_filename.setter
    def keystore_filename(self, keystore_filename):
        """Sets the keystore_filename of this AndroidBranchConfigurationProperties.

        The name of the keystore file

        :param keystore_filename: The keystore_filename of this AndroidBranchConfigurationProperties.
        :type keystore_filename: str
        """

        self._keystore_filename = keystore_filename

    @property
    def keystore_password(self):
        """Gets the keystore_password of this AndroidBranchConfigurationProperties.

        The password of the keystore

        :return: The keystore_password of this AndroidBranchConfigurationProperties.
        :rtype: str
        """
        return self._keystore_password

    @keystore_password.setter
    def keystore_password(self, keystore_password):
        """Sets the keystore_password of this AndroidBranchConfigurationProperties.

        The password of the keystore

        :param keystore_password: The keystore_password of this AndroidBranchConfigurationProperties.
        :type keystore_password: str
        """

        self._keystore_password = keystore_password

    @property
    def module(self):
        """Gets the module of this AndroidBranchConfigurationProperties.

        The Gradle module to build

        :return: The module of this AndroidBranchConfigurationProperties.
        :rtype: str
        """
        return self._module

    @module.setter
    def module(self, module):
        """Sets the module of this AndroidBranchConfigurationProperties.

        The Gradle module to build

        :param module: The module of this AndroidBranchConfigurationProperties.
        :type module: str
        """

        self._module = module

    @property
    def run_lint(self):
        """Gets the run_lint of this AndroidBranchConfigurationProperties.

        Whether to run lint checks during the build (default)

        :return: The run_lint of this AndroidBranchConfigurationProperties.
        :rtype: bool
        """
        return self._run_lint

    @run_lint.setter
    def run_lint(self, run_lint):
        """Sets the run_lint of this AndroidBranchConfigurationProperties.

        Whether to run lint checks during the build (default)

        :param run_lint: The run_lint of this AndroidBranchConfigurationProperties.
        :type run_lint: bool
        """

        self._run_lint = run_lint

    @property
    def run_tests(self):
        """Gets the run_tests of this AndroidBranchConfigurationProperties.

        Whether to run unit tests during the build (default)

        :return: The run_tests of this AndroidBranchConfigurationProperties.
        :rtype: bool
        """
        return self._run_tests

    @run_tests.setter
    def run_tests(self, run_tests):
        """Sets the run_tests of this AndroidBranchConfigurationProperties.

        Whether to run unit tests during the build (default)

        :param run_tests: The run_tests of this AndroidBranchConfigurationProperties.
        :type run_tests: bool
        """

        self._run_tests = run_tests
