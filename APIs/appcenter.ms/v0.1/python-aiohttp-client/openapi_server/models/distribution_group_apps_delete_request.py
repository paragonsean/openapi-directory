# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.distribution_groups_bulk_delete_apps_request_apps_inner import DistributionGroupsBulkDeleteAppsRequestAppsInner
from openapi_server import util


class DistributionGroupAppsDeleteRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apps: List[DistributionGroupsBulkDeleteAppsRequestAppsInner]=None):
        """DistributionGroupAppsDeleteRequest - a model defined in OpenAPI

        :param apps: The apps of this DistributionGroupAppsDeleteRequest.
        """
        self.openapi_types = {
            'apps': List[DistributionGroupsBulkDeleteAppsRequestAppsInner]
        }

        self.attribute_map = {
            'apps': 'apps'
        }

        self._apps = apps

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DistributionGroupAppsDeleteRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DistributionGroupAppsDeleteRequest of this DistributionGroupAppsDeleteRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apps(self):
        """Gets the apps of this DistributionGroupAppsDeleteRequest.

        The list of apps to delete from the distribution group

        :return: The apps of this DistributionGroupAppsDeleteRequest.
        :rtype: List[DistributionGroupsBulkDeleteAppsRequestAppsInner]
        """
        return self._apps

    @apps.setter
    def apps(self, apps):
        """Sets the apps of this DistributionGroupAppsDeleteRequest.

        The list of apps to delete from the distribution group

        :param apps: The apps of this DistributionGroupAppsDeleteRequest.
        :type apps: List[DistributionGroupsBulkDeleteAppsRequestAppsInner]
        """
        if apps is not None and len(apps) < 1:
            raise ValueError("Invalid value for `apps`, number of items must be greater than or equal to `1`")

        self._apps = apps
