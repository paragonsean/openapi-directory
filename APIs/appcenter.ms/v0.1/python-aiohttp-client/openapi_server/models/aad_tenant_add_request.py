# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AADTenantAddRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aad_tenant_id: str=None, display_name: str=None, user_id: str=None):
        """AADTenantAddRequest - a model defined in OpenAPI

        :param aad_tenant_id: The aad_tenant_id of this AADTenantAddRequest.
        :param display_name: The display_name of this AADTenantAddRequest.
        :param user_id: The user_id of this AADTenantAddRequest.
        """
        self.openapi_types = {
            'aad_tenant_id': str,
            'display_name': str,
            'user_id': str
        }

        self.attribute_map = {
            'aad_tenant_id': 'aad_tenant_id',
            'display_name': 'display_name',
            'user_id': 'user_id'
        }

        self._aad_tenant_id = aad_tenant_id
        self._display_name = display_name
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AADTenantAddRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AADTenantAddRequest of this AADTenantAddRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aad_tenant_id(self):
        """Gets the aad_tenant_id of this AADTenantAddRequest.

        The AAD tenant id

        :return: The aad_tenant_id of this AADTenantAddRequest.
        :rtype: str
        """
        return self._aad_tenant_id

    @aad_tenant_id.setter
    def aad_tenant_id(self, aad_tenant_id):
        """Sets the aad_tenant_id of this AADTenantAddRequest.

        The AAD tenant id

        :param aad_tenant_id: The aad_tenant_id of this AADTenantAddRequest.
        :type aad_tenant_id: str
        """
        if aad_tenant_id is None:
            raise ValueError("Invalid value for `aad_tenant_id`, must not be `None`")

        self._aad_tenant_id = aad_tenant_id

    @property
    def display_name(self):
        """Gets the display_name of this AADTenantAddRequest.

        The name of the AAD Tenant

        :return: The display_name of this AADTenantAddRequest.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AADTenantAddRequest.

        The name of the AAD Tenant

        :param display_name: The display_name of this AADTenantAddRequest.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def user_id(self):
        """Gets the user_id of this AADTenantAddRequest.

        The user wanting to add this tenant to the organization, must be an admin of the organization

        :return: The user_id of this AADTenantAddRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AADTenantAddRequest.

        The user wanting to add this tenant to the organization, must be an admin of the organization

        :param user_id: The user_id of this AADTenantAddRequest.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
