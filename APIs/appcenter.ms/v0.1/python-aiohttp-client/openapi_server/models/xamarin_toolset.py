# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.builds_list_toolset_projects200_response_xamarin_xamarin_solutions_inner import BuildsListToolsetProjects200ResponseXamarinXamarinSolutionsInner
from openapi_server import util


class XamarinToolset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, xamarin_solutions: List[BuildsListToolsetProjects200ResponseXamarinXamarinSolutionsInner]=None):
        """XamarinToolset - a model defined in OpenAPI

        :param xamarin_solutions: The xamarin_solutions of this XamarinToolset.
        """
        self.openapi_types = {
            'xamarin_solutions': List[BuildsListToolsetProjects200ResponseXamarinXamarinSolutionsInner]
        }

        self.attribute_map = {
            'xamarin_solutions': 'xamarinSolutions'
        }

        self._xamarin_solutions = xamarin_solutions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'XamarinToolset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The XamarinToolset of this XamarinToolset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def xamarin_solutions(self):
        """Gets the xamarin_solutions of this XamarinToolset.

        Xamarin solutions for the toolset

        :return: The xamarin_solutions of this XamarinToolset.
        :rtype: List[BuildsListToolsetProjects200ResponseXamarinXamarinSolutionsInner]
        """
        return self._xamarin_solutions

    @xamarin_solutions.setter
    def xamarin_solutions(self, xamarin_solutions):
        """Sets the xamarin_solutions of this XamarinToolset.

        Xamarin solutions for the toolset

        :param xamarin_solutions: The xamarin_solutions of this XamarinToolset.
        :type xamarin_solutions: List[BuildsListToolsetProjects200ResponseXamarinXamarinSolutionsInner]
        """
        if xamarin_solutions is None:
            raise ValueError("Invalid value for `xamarin_solutions`, must not be `None`")

        self._xamarin_solutions = xamarin_solutions
