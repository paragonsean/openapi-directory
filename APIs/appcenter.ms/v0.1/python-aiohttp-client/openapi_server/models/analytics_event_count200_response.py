# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analytics_device_counts200_response_daily_inner import AnalyticsDeviceCounts200ResponseDailyInner
from openapi_server import util


class AnalyticsEventCount200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: List[AnalyticsDeviceCounts200ResponseDailyInner]=None, previous_total_count: int=None, total_count: int=None):
        """AnalyticsEventCount200Response - a model defined in OpenAPI

        :param count: The count of this AnalyticsEventCount200Response.
        :param previous_total_count: The previous_total_count of this AnalyticsEventCount200Response.
        :param total_count: The total_count of this AnalyticsEventCount200Response.
        """
        self.openapi_types = {
            'count': List[AnalyticsDeviceCounts200ResponseDailyInner],
            'previous_total_count': int,
            'total_count': int
        }

        self.attribute_map = {
            'count': 'count',
            'previous_total_count': 'previous_total_count',
            'total_count': 'total_count'
        }

        self._count = count
        self._previous_total_count = previous_total_count
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyticsEventCount200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Analytics_EventCount_200_response of this AnalyticsEventCount200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this AnalyticsEventCount200Response.


        :return: The count of this AnalyticsEventCount200Response.
        :rtype: List[AnalyticsDeviceCounts200ResponseDailyInner]
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this AnalyticsEventCount200Response.


        :param count: The count of this AnalyticsEventCount200Response.
        :type count: List[AnalyticsDeviceCounts200ResponseDailyInner]
        """

        self._count = count

    @property
    def previous_total_count(self):
        """Gets the previous_total_count of this AnalyticsEventCount200Response.


        :return: The previous_total_count of this AnalyticsEventCount200Response.
        :rtype: int
        """
        return self._previous_total_count

    @previous_total_count.setter
    def previous_total_count(self, previous_total_count):
        """Sets the previous_total_count of this AnalyticsEventCount200Response.


        :param previous_total_count: The previous_total_count of this AnalyticsEventCount200Response.
        :type previous_total_count: int
        """

        self._previous_total_count = previous_total_count

    @property
    def total_count(self):
        """Gets the total_count of this AnalyticsEventCount200Response.


        :return: The total_count of this AnalyticsEventCount200Response.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this AnalyticsEventCount200Response.


        :param total_count: The total_count of this AnalyticsEventCount200Response.
        :type total_count: int
        """

        self._total_count = total_count
