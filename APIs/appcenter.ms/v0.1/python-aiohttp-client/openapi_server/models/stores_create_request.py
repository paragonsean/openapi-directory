# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stores_create_request_intune_details import StoresCreateRequestIntuneDetails
from openapi_server import util


class StoresCreateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, intune_details: StoresCreateRequestIntuneDetails=None, name: str=None, service_connection_id: str=None, track: str=None, type: str=None):
        """StoresCreateRequest - a model defined in OpenAPI

        :param intune_details: The intune_details of this StoresCreateRequest.
        :param name: The name of this StoresCreateRequest.
        :param service_connection_id: The service_connection_id of this StoresCreateRequest.
        :param track: The track of this StoresCreateRequest.
        :param type: The type of this StoresCreateRequest.
        """
        self.openapi_types = {
            'intune_details': StoresCreateRequestIntuneDetails,
            'name': str,
            'service_connection_id': str,
            'track': str,
            'type': str
        }

        self.attribute_map = {
            'intune_details': 'intune_details',
            'name': 'name',
            'service_connection_id': 'service_connection_id',
            'track': 'track',
            'type': 'type'
        }

        self._intune_details = intune_details
        self._name = name
        self._service_connection_id = service_connection_id
        self._track = track
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoresCreateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The stores_create_request of this StoresCreateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def intune_details(self):
        """Gets the intune_details of this StoresCreateRequest.


        :return: The intune_details of this StoresCreateRequest.
        :rtype: StoresCreateRequestIntuneDetails
        """
        return self._intune_details

    @intune_details.setter
    def intune_details(self, intune_details):
        """Sets the intune_details of this StoresCreateRequest.


        :param intune_details: The intune_details of this StoresCreateRequest.
        :type intune_details: StoresCreateRequestIntuneDetails
        """

        self._intune_details = intune_details

    @property
    def name(self):
        """Gets the name of this StoresCreateRequest.

        name of the store. In case of googleplay, and Apple store this is fixed to Production.

        :return: The name of this StoresCreateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StoresCreateRequest.

        name of the store. In case of googleplay, and Apple store this is fixed to Production.

        :param name: The name of this StoresCreateRequest.
        :type name: str
        """

        self._name = name

    @property
    def service_connection_id(self):
        """Gets the service_connection_id of this StoresCreateRequest.

        Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.

        :return: The service_connection_id of this StoresCreateRequest.
        :rtype: str
        """
        return self._service_connection_id

    @service_connection_id.setter
    def service_connection_id(self, service_connection_id):
        """Sets the service_connection_id of this StoresCreateRequest.

        Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.

        :param service_connection_id: The service_connection_id of this StoresCreateRequest.
        :type service_connection_id: str
        """

        self._service_connection_id = service_connection_id

    @property
    def track(self):
        """Gets the track of this StoresCreateRequest.

        track of the store. Can be production, alpha & beta for googleplay. Can be production, testflight-internal & testflight-external for Apple Store.

        :return: The track of this StoresCreateRequest.
        :rtype: str
        """
        return self._track

    @track.setter
    def track(self, track):
        """Sets the track of this StoresCreateRequest.

        track of the store. Can be production, alpha & beta for googleplay. Can be production, testflight-internal & testflight-external for Apple Store.

        :param track: The track of this StoresCreateRequest.
        :type track: str
        """
        allowed_values = ["production", "alpha", "beta", "testflight-internal", "testflight-external"]  # noqa: E501
        if track not in allowed_values:
            raise ValueError(
                "Invalid value for `track` ({0}), must be one of {1}"
                .format(track, allowed_values)
            )

        self._track = track

    @property
    def type(self):
        """Gets the type of this StoresCreateRequest.

        store Type

        :return: The type of this StoresCreateRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StoresCreateRequest.

        store Type

        :param type: The type of this StoresCreateRequest.
        :type type: str
        """
        allowed_values = ["googleplay", "apple", "intune"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
