# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PublishDevicesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_service_connection_id: str=None, devices: List[str]=None, password: str=None, publish_all_devices: bool=None, username: str=None):
        """PublishDevicesRequest - a model defined in OpenAPI

        :param account_service_connection_id: The account_service_connection_id of this PublishDevicesRequest.
        :param devices: The devices of this PublishDevicesRequest.
        :param password: The password of this PublishDevicesRequest.
        :param publish_all_devices: The publish_all_devices of this PublishDevicesRequest.
        :param username: The username of this PublishDevicesRequest.
        """
        self.openapi_types = {
            'account_service_connection_id': str,
            'devices': List[str],
            'password': str,
            'publish_all_devices': bool,
            'username': str
        }

        self.attribute_map = {
            'account_service_connection_id': 'account_service_connection_id',
            'devices': 'devices',
            'password': 'password',
            'publish_all_devices': 'publish_all_devices',
            'username': 'username'
        }

        self._account_service_connection_id = account_service_connection_id
        self._devices = devices
        self._password = password
        self._publish_all_devices = publish_all_devices
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublishDevicesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublishDevicesRequest of this PublishDevicesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_service_connection_id(self):
        """Gets the account_service_connection_id of this PublishDevicesRequest.

        The service_connection_id of the stored Apple credentials instead of username, password.

        :return: The account_service_connection_id of this PublishDevicesRequest.
        :rtype: str
        """
        return self._account_service_connection_id

    @account_service_connection_id.setter
    def account_service_connection_id(self, account_service_connection_id):
        """Sets the account_service_connection_id of this PublishDevicesRequest.

        The service_connection_id of the stored Apple credentials instead of username, password.

        :param account_service_connection_id: The account_service_connection_id of this PublishDevicesRequest.
        :type account_service_connection_id: str
        """

        self._account_service_connection_id = account_service_connection_id

    @property
    def devices(self):
        """Gets the devices of this PublishDevicesRequest.

        Array of device UDID's to be published to the Apple Developer account.

        :return: The devices of this PublishDevicesRequest.
        :rtype: List[str]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this PublishDevicesRequest.

        Array of device UDID's to be published to the Apple Developer account.

        :param devices: The devices of this PublishDevicesRequest.
        :type devices: List[str]
        """

        self._devices = devices

    @property
    def password(self):
        """Gets the password of this PublishDevicesRequest.

        The password for the Apple Developer account to publish the devices to.

        :return: The password of this PublishDevicesRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this PublishDevicesRequest.

        The password for the Apple Developer account to publish the devices to.

        :param password: The password of this PublishDevicesRequest.
        :type password: str
        """

        self._password = password

    @property
    def publish_all_devices(self):
        """Gets the publish_all_devices of this PublishDevicesRequest.

        When set to true, all unprovisioned devices will be published to the Apple Developer account.  When false, only the provided devices will be published to the Apple Developer account.

        :return: The publish_all_devices of this PublishDevicesRequest.
        :rtype: bool
        """
        return self._publish_all_devices

    @publish_all_devices.setter
    def publish_all_devices(self, publish_all_devices):
        """Sets the publish_all_devices of this PublishDevicesRequest.

        When set to true, all unprovisioned devices will be published to the Apple Developer account.  When false, only the provided devices will be published to the Apple Developer account.

        :param publish_all_devices: The publish_all_devices of this PublishDevicesRequest.
        :type publish_all_devices: bool
        """

        self._publish_all_devices = publish_all_devices

    @property
    def username(self):
        """Gets the username of this PublishDevicesRequest.

        The username for the Apple Developer account to publish the devices to.

        :return: The username of this PublishDevicesRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this PublishDevicesRequest.

        The username for the Apple Developer account to publish the devices to.

        :param username: The username of this PublishDevicesRequest.
        :type username: str
        """

        self._username = username
