# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddAppTesterRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, release_id: int=None, user_id: str=None):
        """AddAppTesterRequest - a model defined in OpenAPI

        :param release_id: The release_id of this AddAppTesterRequest.
        :param user_id: The user_id of this AddAppTesterRequest.
        """
        self.openapi_types = {
            'release_id': int,
            'user_id': str
        }

        self.attribute_map = {
            'release_id': 'release_id',
            'user_id': 'user_id'
        }

        self._release_id = release_id
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddAppTesterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddAppTesterRequest of this AddAppTesterRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def release_id(self):
        """Gets the release_id of this AddAppTesterRequest.

        The ID of the release the user was added to

        :return: The release_id of this AddAppTesterRequest.
        :rtype: int
        """
        return self._release_id

    @release_id.setter
    def release_id(self, release_id):
        """Sets the release_id of this AddAppTesterRequest.

        The ID of the release the user was added to

        :param release_id: The release_id of this AddAppTesterRequest.
        :type release_id: int
        """
        if release_id is None:
            raise ValueError("Invalid value for `release_id`, must not be `None`")

        self._release_id = release_id

    @property
    def user_id(self):
        """Gets the user_id of this AddAppTesterRequest.

        The user ID of the tester that needs to be added

        :return: The user_id of this AddAppTesterRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AddAppTesterRequest.

        The user ID of the tester that needs to be added

        :param user_id: The user_id of this AddAppTesterRequest.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
