# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiTokenDeleteResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, token_hash: str=None):
        """ApiTokenDeleteResponse - a model defined in OpenAPI

        :param id: The id of this ApiTokenDeleteResponse.
        :param token_hash: The token_hash of this ApiTokenDeleteResponse.
        """
        self.openapi_types = {
            'id': str,
            'token_hash': str
        }

        self.attribute_map = {
            'id': 'id',
            'token_hash': 'token_hash'
        }

        self._id = id
        self._token_hash = token_hash

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiTokenDeleteResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiTokenDeleteResponse of this ApiTokenDeleteResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ApiTokenDeleteResponse.

        The unique id (UUID) of the api token

        :return: The id of this ApiTokenDeleteResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiTokenDeleteResponse.

        The unique id (UUID) of the api token

        :param id: The id of this ApiTokenDeleteResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def token_hash(self):
        """Gets the token_hash of this ApiTokenDeleteResponse.

        The hashed value of api token

        :return: The token_hash of this ApiTokenDeleteResponse.
        :rtype: str
        """
        return self._token_hash

    @token_hash.setter
    def token_hash(self, token_hash):
        """Sets the token_hash of this ApiTokenDeleteResponse.

        The hashed value of api token

        :param token_hash: The token_hash of this ApiTokenDeleteResponse.
        :type token_hash: str
        """
        if token_hash is None:
            raise ValueError("Invalid value for `token_hash`, must not be `None`")

        self._token_hash = token_hash
