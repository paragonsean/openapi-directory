# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class XcodeArchiveProject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archive_target_id: str=None, project_name: str=None, project_path: str=None):
        """XcodeArchiveProject - a model defined in OpenAPI

        :param archive_target_id: The archive_target_id of this XcodeArchiveProject.
        :param project_name: The project_name of this XcodeArchiveProject.
        :param project_path: The project_path of this XcodeArchiveProject.
        """
        self.openapi_types = {
            'archive_target_id': str,
            'project_name': str,
            'project_path': str
        }

        self.attribute_map = {
            'archive_target_id': 'archiveTargetId',
            'project_name': 'projectName',
            'project_path': 'projectPath'
        }

        self._archive_target_id = archive_target_id
        self._project_name = project_name
        self._project_path = project_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'XcodeArchiveProject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The XcodeArchiveProject of this XcodeArchiveProject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archive_target_id(self):
        """Gets the archive_target_id of this XcodeArchiveProject.

        The Id of the target to archive

        :return: The archive_target_id of this XcodeArchiveProject.
        :rtype: str
        """
        return self._archive_target_id

    @archive_target_id.setter
    def archive_target_id(self, archive_target_id):
        """Sets the archive_target_id of this XcodeArchiveProject.

        The Id of the target to archive

        :param archive_target_id: The archive_target_id of this XcodeArchiveProject.
        :type archive_target_id: str
        """
        if archive_target_id is None:
            raise ValueError("Invalid value for `archive_target_id`, must not be `None`")

        self._archive_target_id = archive_target_id

    @property
    def project_name(self):
        """Gets the project_name of this XcodeArchiveProject.

        The project to archive container name

        :return: The project_name of this XcodeArchiveProject.
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this XcodeArchiveProject.

        The project to archive container name

        :param project_name: The project_name of this XcodeArchiveProject.
        :type project_name: str
        """
        if project_name is None:
            raise ValueError("Invalid value for `project_name`, must not be `None`")

        self._project_name = project_name

    @property
    def project_path(self):
        """Gets the project_path of this XcodeArchiveProject.

        Full path of the target project

        :return: The project_path of this XcodeArchiveProject.
        :rtype: str
        """
        return self._project_path

    @project_path.setter
    def project_path(self, project_path):
        """Sets the project_path of this XcodeArchiveProject.

        Full path of the target project

        :param project_path: The project_path of this XcodeArchiveProject.
        :type project_path: str
        """

        self._project_path = project_path
