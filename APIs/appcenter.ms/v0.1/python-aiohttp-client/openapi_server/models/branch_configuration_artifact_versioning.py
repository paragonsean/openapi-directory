# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BranchConfigurationArtifactVersioning(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build_number_format: str=None):
        """BranchConfigurationArtifactVersioning - a model defined in OpenAPI

        :param build_number_format: The build_number_format of this BranchConfigurationArtifactVersioning.
        """
        self.openapi_types = {
            'build_number_format': str
        }

        self.attribute_map = {
            'build_number_format': 'buildNumberFormat'
        }

        self._build_number_format = build_number_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BranchConfigurationArtifactVersioning':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BranchConfigurationArtifactVersioning of this BranchConfigurationArtifactVersioning.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build_number_format(self):
        """Gets the build_number_format of this BranchConfigurationArtifactVersioning.


        :return: The build_number_format of this BranchConfigurationArtifactVersioning.
        :rtype: str
        """
        return self._build_number_format

    @build_number_format.setter
    def build_number_format(self, build_number_format):
        """Sets the build_number_format of this BranchConfigurationArtifactVersioning.


        :param build_number_format: The build_number_format of this BranchConfigurationArtifactVersioning.
        :type build_number_format: str
        """
        allowed_values = ["buildId", "timestamp"]  # noqa: E501
        if build_number_format not in allowed_values:
            raise ValueError(
                "Invalid value for `build_number_format` ({0}), must be one of {1}"
                .format(build_number_format, allowed_values)
            )

        self._build_number_format = build_number_format
