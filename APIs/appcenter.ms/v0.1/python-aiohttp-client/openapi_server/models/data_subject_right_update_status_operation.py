# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataSubjectRightUpdateStatusOperation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, participant_data: str=None, request_id: str=None, status: str=None):
        """DataSubjectRightUpdateStatusOperation - a model defined in OpenAPI

        :param participant_data: The participant_data of this DataSubjectRightUpdateStatusOperation.
        :param request_id: The request_id of this DataSubjectRightUpdateStatusOperation.
        :param status: The status of this DataSubjectRightUpdateStatusOperation.
        """
        self.openapi_types = {
            'participant_data': str,
            'request_id': str,
            'status': str
        }

        self.attribute_map = {
            'participant_data': 'participantData',
            'request_id': 'requestId',
            'status': 'status'
        }

        self._participant_data = participant_data
        self._request_id = request_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataSubjectRightUpdateStatusOperation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataSubjectRightUpdateStatusOperation of this DataSubjectRightUpdateStatusOperation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def participant_data(self):
        """Gets the participant_data of this DataSubjectRightUpdateStatusOperation.

        String field to be used by participant for any intermediate statuses or data they need to save

        :return: The participant_data of this DataSubjectRightUpdateStatusOperation.
        :rtype: str
        """
        return self._participant_data

    @participant_data.setter
    def participant_data(self, participant_data):
        """Sets the participant_data of this DataSubjectRightUpdateStatusOperation.

        String field to be used by participant for any intermediate statuses or data they need to save

        :param participant_data: The participant_data of this DataSubjectRightUpdateStatusOperation.
        :type participant_data: str
        """

        self._participant_data = participant_data

    @property
    def request_id(self):
        """Gets the request_id of this DataSubjectRightUpdateStatusOperation.

        Request identifier of the operation

        :return: The request_id of this DataSubjectRightUpdateStatusOperation.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this DataSubjectRightUpdateStatusOperation.

        Request identifier of the operation

        :param request_id: The request_id of this DataSubjectRightUpdateStatusOperation.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")

        self._request_id = request_id

    @property
    def status(self):
        """Gets the status of this DataSubjectRightUpdateStatusOperation.

        Operation status

        :return: The status of this DataSubjectRightUpdateStatusOperation.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DataSubjectRightUpdateStatusOperation.

        Operation status

        :param status: The status of this DataSubjectRightUpdateStatusOperation.
        :type status: str
        """
        allowed_values = ["None", "Created", "Queued", "InProgress", "Completed", "Failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
