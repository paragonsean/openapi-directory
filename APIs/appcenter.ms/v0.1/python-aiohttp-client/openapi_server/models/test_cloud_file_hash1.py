# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestCloudFileHash1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, checksum: str=None, file_type: str=None, relative_path: str=None):
        """TestCloudFileHash1 - a model defined in OpenAPI

        :param checksum: The checksum of this TestCloudFileHash1.
        :param file_type: The file_type of this TestCloudFileHash1.
        :param relative_path: The relative_path of this TestCloudFileHash1.
        """
        self.openapi_types = {
            'checksum': str,
            'file_type': str,
            'relative_path': str
        }

        self.attribute_map = {
            'checksum': 'checksum',
            'file_type': 'fileType',
            'relative_path': 'relativePath'
        }

        self._checksum = checksum
        self._file_type = file_type
        self._relative_path = relative_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestCloudFileHash1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Test_Cloud_File_Hash_1 of this TestCloudFileHash1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def checksum(self):
        """Gets the checksum of this TestCloudFileHash1.

        SHA256 hash of the file

        :return: The checksum of this TestCloudFileHash1.
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this TestCloudFileHash1.

        SHA256 hash of the file

        :param checksum: The checksum of this TestCloudFileHash1.
        :type checksum: str
        """
        if checksum is None:
            raise ValueError("Invalid value for `checksum`, must not be `None`")

        self._checksum = checksum

    @property
    def file_type(self):
        """Gets the file_type of this TestCloudFileHash1.

        Type of the file

        :return: The file_type of this TestCloudFileHash1.
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this TestCloudFileHash1.

        Type of the file

        :param file_type: The file_type of this TestCloudFileHash1.
        :type file_type: str
        """
        allowed_values = ["dsym-file", "app-file", "test-file"]  # noqa: E501
        if file_type not in allowed_values:
            raise ValueError(
                "Invalid value for `file_type` ({0}), must be one of {1}"
                .format(file_type, allowed_values)
            )

        self._file_type = file_type

    @property
    def relative_path(self):
        """Gets the relative_path of this TestCloudFileHash1.

        Relative path of the file

        :return: The relative_path of this TestCloudFileHash1.
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """Sets the relative_path of this TestCloudFileHash1.

        Relative path of the file

        :param relative_path: The relative_path of this TestCloudFileHash1.
        :type relative_path: str
        """
        if relative_path is None:
            raise ValueError("Invalid value for `relative_path`, must not be `None`")

        self._relative_path = relative_path
