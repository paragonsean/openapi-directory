/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DiagnosticsStackTrace from '../model/DiagnosticsStackTrace';
import ErrorsAppBuildsList200Response from '../model/ErrorsAppBuildsList200Response';
import ErrorsAvailableVersions200Response from '../model/ErrorsAvailableVersions200Response';
import ErrorsCountsPerDay200Response from '../model/ErrorsCountsPerDay200Response';
import ErrorsDeleteError200Response from '../model/ErrorsDeleteError200Response';
import ErrorsErrorAttachmentText200Response from '../model/ErrorsErrorAttachmentText200Response';
import ErrorsErrorAttachments200ResponseInner from '../model/ErrorsErrorAttachments200ResponseInner';
import ErrorsErrorGroupsSearch200Response from '../model/ErrorsErrorGroupsSearch200Response';
import ErrorsErrorLocation200Response from '../model/ErrorsErrorLocation200Response';
import ErrorsErrorSearch200Response from '../model/ErrorsErrorSearch200Response';
import ErrorsGetRetentionSettings200Response from '../model/ErrorsGetRetentionSettings200Response';
import ErrorsGroupDetails200Response from '../model/ErrorsGroupDetails200Response';
import ErrorsGroupErrorFreeDevicePercentages200Response from '../model/ErrorsGroupErrorFreeDevicePercentages200Response';
import ErrorsGroupList200Response from '../model/ErrorsGroupList200Response';
import ErrorsGroupModelCounts200Response from '../model/ErrorsGroupModelCounts200Response';
import ErrorsGroupOperatingSystemCounts200Response from '../model/ErrorsGroupOperatingSystemCounts200Response';
import ErrorsLatestErrorDetails200Response from '../model/ErrorsLatestErrorDetails200Response';
import ErrorsListForGroup200Response from '../model/ErrorsListForGroup200Response';
import ErrorsListSessionLogs200Response from '../model/ErrorsListSessionLogs200Response';
import ErrorsUpdateStateRequest from '../model/ErrorsUpdateStateRequest';
import OrganizationsListAdministeredDefaultResponse from '../model/OrganizationsListAdministeredDefaultResponse';

/**
* Errors service.
* @module api/ErrorsApi
* @version v0.1
*/
export default class ErrorsApi {

    /**
    * Constructs a new ErrorsApi. 
    * @alias module:api/ErrorsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the errorsAppBuildsList operation.
     * @callback module:api/ErrorsApi~errorsAppBuildsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorsAppBuildsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of app builds
     * @param {String} version 
     * @param {Date} start Start date time in data in ISO 8601 date time format
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [end] Last date time in data in ISO 8601 date time format
     * @param {Number} [top = 30)] The maximum number of results to return. (0 will fetch all results till the max number.)
     * @param {module:model/String} [errorType] Type of error (handled vs unhandled), including All
     * @param {module:api/ErrorsApi~errorsAppBuildsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorsAppBuildsList200Response}
     */
    errorsAppBuildsList(version, start, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling errorsAppBuildsList");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling errorsAppBuildsList");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling errorsAppBuildsList");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling errorsAppBuildsList");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'version': version,
        'start': start,
        'end': opts['end'],
        '$top': opts['top'],
        'errorType': opts['errorType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ErrorsAppBuildsList200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/errors/availableAppBuilds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsAvailableVersions operation.
     * @callback module:api/ErrorsApi~errorsAvailableVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorsAvailableVersions200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all available versions in the time range.
     * @param {Date} start Start date time in data in ISO 8601 date time format
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [end] Last date time in data in ISO 8601 date time format
     * @param {Number} [top = 30)] The maximum number of results to return. (0 will fetch all results till the max number.)
     * @param {Number} [skip = 0)] The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.
     * @param {String} [filter] A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering.
     * @param {module:model/String} [inlinecount = 'none')] Controls whether or not to include a count of all the items across all pages.
     * @param {module:model/String} [errorType] Type of error (handled vs unhandled), including All
     * @param {module:api/ErrorsApi~errorsAvailableVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorsAvailableVersions200Response}
     */
    errorsAvailableVersions(start, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling errorsAvailableVersions");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling errorsAvailableVersions");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling errorsAvailableVersions");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'start': start,
        'end': opts['end'],
        '$top': opts['top'],
        '$skip': opts['skip'],
        '$filter': opts['filter'],
        '$inlinecount': opts['inlinecount'],
        'errorType': opts['errorType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ErrorsAvailableVersions200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/errors/available_versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsCountsPerDay operation.
     * @callback module:api/ErrorsApi~errorsCountsPerDayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorsCountsPerDay200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count of crashes or errors by day in the time range based the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror.
     * @param {Date} start Start date time in data in ISO 8601 date time format
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {String} [version] 
     * @param {Date} [end] Last date time in data in ISO 8601 date time format
     * @param {String} [appBuild] app build
     * @param {module:model/String} [errorType] Type of error (handled vs unhandled), excluding All
     * @param {module:api/ErrorsApi~errorsCountsPerDayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorsCountsPerDay200Response}
     */
    errorsCountsPerDay(start, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling errorsCountsPerDay");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling errorsCountsPerDay");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling errorsCountsPerDay");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'version': opts['version'],
        'start': start,
        'end': opts['end'],
        'app_build': opts['appBuild'],
        'errorType': opts['errorType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ErrorsCountsPerDay200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/errors/errorCountsPerDay', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsDeleteError operation.
     * @callback module:api/ErrorsApi~errorsDeleteErrorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorsDeleteError200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific error and related attachments and blobs for an app. Searchable data will not be deleted immediately and may take up to 30 days.
     * @param {String} errorGroupId The id of the error group
     * @param {String} errorId The id of the error
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/ErrorsApi~errorsDeleteErrorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorsDeleteError200Response}
     */
    errorsDeleteError(errorGroupId, errorId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'errorGroupId' is set
      if (errorGroupId === undefined || errorGroupId === null) {
        throw new Error("Missing the required parameter 'errorGroupId' when calling errorsDeleteError");
      }
      // verify the required parameter 'errorId' is set
      if (errorId === undefined || errorId === null) {
        throw new Error("Missing the required parameter 'errorId' when calling errorsDeleteError");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling errorsDeleteError");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling errorsDeleteError");
      }

      let pathParams = {
        'errorGroupId': errorGroupId,
        'errorId': errorId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ErrorsDeleteError200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsErrorAttachmentLocation operation.
     * @callback module:api/ErrorsApi~errorsErrorAttachmentLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorsErrorLocation200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Error attachment location.
     * @param {String} errorId The id of the error
     * @param {String} attachmentId Error attachment id.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/ErrorsApi~errorsErrorAttachmentLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorsErrorLocation200Response}
     */
    errorsErrorAttachmentLocation(errorId, attachmentId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'errorId' is set
      if (errorId === undefined || errorId === null) {
        throw new Error("Missing the required parameter 'errorId' when calling errorsErrorAttachmentLocation");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling errorsErrorAttachmentLocation");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling errorsErrorAttachmentLocation");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling errorsErrorAttachmentLocation");
      }

      let pathParams = {
        'errorId': errorId,
        'attachmentId': attachmentId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ErrorsErrorLocation200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/location', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsErrorAttachmentText operation.
     * @callback module:api/ErrorsApi~errorsErrorAttachmentTextCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorsErrorAttachmentText200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Error attachment text.
     * @param {String} errorId The id of the error
     * @param {String} attachmentId Error attachment id.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/ErrorsApi~errorsErrorAttachmentTextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorsErrorAttachmentText200Response}
     */
    errorsErrorAttachmentText(errorId, attachmentId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'errorId' is set
      if (errorId === undefined || errorId === null) {
        throw new Error("Missing the required parameter 'errorId' when calling errorsErrorAttachmentText");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling errorsErrorAttachmentText");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling errorsErrorAttachmentText");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling errorsErrorAttachmentText");
      }

      let pathParams = {
        'errorId': errorId,
        'attachmentId': attachmentId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ErrorsErrorAttachmentText200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/text', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsErrorAttachments operation.
     * @callback module:api/ErrorsApi~errorsErrorAttachmentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ErrorsErrorAttachments200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List error attachments.
     * @param {String} errorId The id of the error
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/ErrorsApi~errorsErrorAttachmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ErrorsErrorAttachments200ResponseInner>}
     */
    errorsErrorAttachments(errorId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'errorId' is set
      if (errorId === undefined || errorId === null) {
        throw new Error("Missing the required parameter 'errorId' when calling errorsErrorAttachments");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling errorsErrorAttachments");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling errorsErrorAttachments");
      }

      let pathParams = {
        'errorId': errorId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ErrorsErrorAttachments200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsErrorDownload operation.
     * @callback module:api/ErrorsApi~errorsErrorDownloadCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download details for a specific error.
     * @param {String} errorGroupId The id of the error group
     * @param {String} errorId The id of the error
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format] the format of the crash log
     * @param {module:api/ErrorsApi~errorsErrorDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    errorsErrorDownload(errorGroupId, errorId, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'errorGroupId' is set
      if (errorGroupId === undefined || errorGroupId === null) {
        throw new Error("Missing the required parameter 'errorGroupId' when calling errorsErrorDownload");
      }
      // verify the required parameter 'errorId' is set
      if (errorId === undefined || errorId === null) {
        throw new Error("Missing the required parameter 'errorId' when calling errorsErrorDownload");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling errorsErrorDownload");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling errorsErrorDownload");
      }

      let pathParams = {
        'errorGroupId': errorGroupId,
        'errorId': errorId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsErrorFreeDevicePercentages operation.
     * @callback module:api/ErrorsApi~errorsErrorFreeDevicePercentagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorsGroupErrorFreeDevicePercentages200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Percentage of error-free devices by day in the time range based on the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror. API will return -1 if crash devices is greater than active devices
     * @param {Date} start Start date time in data in ISO 8601 date time format
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [end] Last date time in data in ISO 8601 date time format
     * @param {Array.<String>} [versions] 
     * @param {String} [appBuild] app build
     * @param {module:model/String} [errorType] Type of error (handled vs unhandled), excluding All
     * @param {module:api/ErrorsApi~errorsErrorFreeDevicePercentagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorsGroupErrorFreeDevicePercentages200Response}
     */
    errorsErrorFreeDevicePercentages(start, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling errorsErrorFreeDevicePercentages");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling errorsErrorFreeDevicePercentages");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling errorsErrorFreeDevicePercentages");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'start': start,
        'end': opts['end'],
        'versions': this.apiClient.buildCollectionParam(opts['versions'], 'pipes'),
        'app_build': opts['appBuild'],
        'errorType': opts['errorType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ErrorsGroupErrorFreeDevicePercentages200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/errors/errorfreeDevicePercentages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsErrorGroupsSearch operation.
     * @callback module:api/ErrorsApi~errorsErrorGroupsSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorsErrorGroupsSearch200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Error groups list based on search parameters
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {String} [filter] A filter as specified in OData notation
     * @param {String} [q] A query string
     * @param {module:model/String} [order = 'desc')] It controls the order of sorting
     * @param {module:model/String} [sort = 'matchingReportsCount')] It controls the sort based on specified field
     * @param {Number} [top = 100)] The maximum number of results to return
     * @param {Number} [skip = 0)] The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.
     * @param {module:api/ErrorsApi~errorsErrorGroupsSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorsErrorGroupsSearch200Response}
     */
    errorsErrorGroupsSearch(ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling errorsErrorGroupsSearch");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling errorsErrorGroupsSearch");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'filter': opts['filter'],
        'q': opts['q'],
        'order': opts['order'],
        'sort': opts['sort'],
        '$top': opts['top'],
        '$skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ErrorsErrorGroupsSearch200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsErrorLocation operation.
     * @callback module:api/ErrorsApi~errorsErrorLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorsErrorLocation200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Error location.
     * @param {String} errorGroupId The id of the error group
     * @param {String} errorId The id of the error
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/ErrorsApi~errorsErrorLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorsErrorLocation200Response}
     */
    errorsErrorLocation(errorGroupId, errorId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'errorGroupId' is set
      if (errorGroupId === undefined || errorGroupId === null) {
        throw new Error("Missing the required parameter 'errorGroupId' when calling errorsErrorLocation");
      }
      // verify the required parameter 'errorId' is set
      if (errorId === undefined || errorId === null) {
        throw new Error("Missing the required parameter 'errorId' when calling errorsErrorLocation");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling errorsErrorLocation");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling errorsErrorLocation");
      }

      let pathParams = {
        'errorGroupId': errorGroupId,
        'errorId': errorId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ErrorsErrorLocation200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/location', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsErrorSearch operation.
     * @callback module:api/ErrorsApi~errorsErrorSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorsErrorSearch200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Errors list based on search parameters
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {String} [filter] A filter as specified in OData notation
     * @param {String} [q] A query string
     * @param {module:model/String} [order = 'desc')] It controls the order of sorting
     * @param {module:model/String} [sort = 'timestamp')] It controls the sort based on specified field
     * @param {Number} [top = 100)] The maximum number of results to return
     * @param {Number} [skip = 0)] The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.
     * @param {module:api/ErrorsApi~errorsErrorSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorsErrorSearch200Response}
     */
    errorsErrorSearch(ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling errorsErrorSearch");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling errorsErrorSearch");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'filter': opts['filter'],
        'q': opts['q'],
        'order': opts['order'],
        'sort': opts['sort'],
        '$top': opts['top'],
        '$skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ErrorsErrorSearch200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/errors/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsErrorStackTrace operation.
     * @callback module:api/ErrorsApi~errorsErrorStackTraceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiagnosticsStackTrace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Error Stacktrace details.
     * @param {String} errorGroupId The id of the error group
     * @param {String} errorId The id of the error
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/ErrorsApi~errorsErrorStackTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiagnosticsStackTrace}
     */
    errorsErrorStackTrace(errorGroupId, errorId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'errorGroupId' is set
      if (errorGroupId === undefined || errorGroupId === null) {
        throw new Error("Missing the required parameter 'errorGroupId' when calling errorsErrorStackTrace");
      }
      // verify the required parameter 'errorId' is set
      if (errorId === undefined || errorId === null) {
        throw new Error("Missing the required parameter 'errorId' when calling errorsErrorStackTrace");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling errorsErrorStackTrace");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling errorsErrorStackTrace");
      }

      let pathParams = {
        'errorGroupId': errorGroupId,
        'errorId': errorId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DiagnosticsStackTrace;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/stacktrace', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsGetErrorDetails operation.
     * @callback module:api/ErrorsApi~errorsGetErrorDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorsLatestErrorDetails200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Error details.
     * @param {String} errorGroupId The id of the error group
     * @param {String} errorId The id of the error
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/ErrorsApi~errorsGetErrorDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorsLatestErrorDetails200Response}
     */
    errorsGetErrorDetails(errorGroupId, errorId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'errorGroupId' is set
      if (errorGroupId === undefined || errorGroupId === null) {
        throw new Error("Missing the required parameter 'errorGroupId' when calling errorsGetErrorDetails");
      }
      // verify the required parameter 'errorId' is set
      if (errorId === undefined || errorId === null) {
        throw new Error("Missing the required parameter 'errorId' when calling errorsGetErrorDetails");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling errorsGetErrorDetails");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling errorsGetErrorDetails");
      }

      let pathParams = {
        'errorGroupId': errorGroupId,
        'errorId': errorId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ErrorsLatestErrorDetails200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsGetRetentionSettings operation.
     * @callback module:api/ErrorsApi~errorsGetRetentionSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorsGetRetentionSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * gets the retention settings in days
     * gets the retention settings in days
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/ErrorsApi~errorsGetRetentionSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorsGetRetentionSettings200Response}
     */
    errorsGetRetentionSettings(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling errorsGetRetentionSettings");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling errorsGetRetentionSettings");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ErrorsGetRetentionSettings200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/errors/retention_settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsGroupCountsPerDay operation.
     * @callback module:api/ErrorsApi~errorsGroupCountsPerDayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorsCountsPerDay200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count of errors by day in the time range of the selected error group with selected version
     * @param {String} errorGroupId The id of the error group
     * @param {Date} start Start date time in data in ISO 8601 date time format
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {String} [version] 
     * @param {Date} [end] Last date time in data in ISO 8601 date time format
     * @param {module:api/ErrorsApi~errorsGroupCountsPerDayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorsCountsPerDay200Response}
     */
    errorsGroupCountsPerDay(errorGroupId, start, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'errorGroupId' is set
      if (errorGroupId === undefined || errorGroupId === null) {
        throw new Error("Missing the required parameter 'errorGroupId' when calling errorsGroupCountsPerDay");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling errorsGroupCountsPerDay");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling errorsGroupCountsPerDay");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling errorsGroupCountsPerDay");
      }

      let pathParams = {
        'errorGroupId': errorGroupId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'version': opts['version'],
        'start': start,
        'end': opts['end']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ErrorsCountsPerDay200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorCountsPerDay', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsGroupDetails operation.
     * @callback module:api/ErrorsApi~errorsGroupDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorsGroupDetails200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Error group details
     * @param {String} errorGroupId The id of the error group
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/ErrorsApi~errorsGroupDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorsGroupDetails200Response}
     */
    errorsGroupDetails(errorGroupId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'errorGroupId' is set
      if (errorGroupId === undefined || errorGroupId === null) {
        throw new Error("Missing the required parameter 'errorGroupId' when calling errorsGroupDetails");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling errorsGroupDetails");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling errorsGroupDetails");
      }

      let pathParams = {
        'errorGroupId': errorGroupId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ErrorsGroupDetails200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsGroupErrorFreeDevicePercentages operation.
     * @callback module:api/ErrorsApi~errorsGroupErrorFreeDevicePercentagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorsGroupErrorFreeDevicePercentages200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Percentage of error-free devices by day in the time range. Api will return -1 if crash devices is greater than active devices
     * @param {String} errorGroupId The id of the error group
     * @param {Date} start Start date time in data in ISO 8601 date time format
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [end] Last date time in data in ISO 8601 date time format
     * @param {module:api/ErrorsApi~errorsGroupErrorFreeDevicePercentagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorsGroupErrorFreeDevicePercentages200Response}
     */
    errorsGroupErrorFreeDevicePercentages(errorGroupId, start, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'errorGroupId' is set
      if (errorGroupId === undefined || errorGroupId === null) {
        throw new Error("Missing the required parameter 'errorGroupId' when calling errorsGroupErrorFreeDevicePercentages");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling errorsGroupErrorFreeDevicePercentages");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling errorsGroupErrorFreeDevicePercentages");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling errorsGroupErrorFreeDevicePercentages");
      }

      let pathParams = {
        'errorGroupId': errorGroupId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'start': start,
        'end': opts['end']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ErrorsGroupErrorFreeDevicePercentages200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorfreeDevicePercentages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsGroupErrorStackTrace operation.
     * @callback module:api/ErrorsApi~errorsGroupErrorStackTraceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiagnosticsStackTrace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the stack trace for the error group.
     * @param {String} errorGroupId The id of the error group
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/ErrorsApi~errorsGroupErrorStackTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiagnosticsStackTrace}
     */
    errorsGroupErrorStackTrace(errorGroupId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'errorGroupId' is set
      if (errorGroupId === undefined || errorGroupId === null) {
        throw new Error("Missing the required parameter 'errorGroupId' when calling errorsGroupErrorStackTrace");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling errorsGroupErrorStackTrace");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling errorsGroupErrorStackTrace");
      }

      let pathParams = {
        'errorGroupId': errorGroupId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DiagnosticsStackTrace;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/stacktrace', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsGroupList operation.
     * @callback module:api/ErrorsApi~errorsGroupListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorsGroupList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of error groups
     * @param {Date} start Start date time in data in ISO 8601 date time format
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {String} [version] 
     * @param {String} [appBuild] app build
     * @param {String} [groupState] 
     * @param {Date} [end] Last date time in data in ISO 8601 date time format
     * @param {String} [orderby = 'count desc')] controls the sorting order and sorting based on which column
     * @param {Number} [top = 30)] The maximum number of results to return. (0 will fetch all results till the max number.)
     * @param {module:model/String} [errorType] Type of error (handled vs unhandled), including All
     * @param {module:api/ErrorsApi~errorsGroupListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorsGroupList200Response}
     */
    errorsGroupList(start, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling errorsGroupList");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling errorsGroupList");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling errorsGroupList");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'version': opts['version'],
        'app_build': opts['appBuild'],
        'groupState': opts['groupState'],
        'start': start,
        'end': opts['end'],
        '$orderby': opts['orderby'],
        '$top': opts['top'],
        'errorType': opts['errorType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ErrorsGroupList200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsGroupModelCounts operation.
     * @callback module:api/ErrorsApi~errorsGroupModelCountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorsGroupModelCounts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Top models of the selected error group.
     * @param {String} errorGroupId The id of the error group
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Number} [top = 30)] The maximum number of results to return. (0 will fetch all results till the max number.)
     * @param {module:api/ErrorsApi~errorsGroupModelCountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorsGroupModelCounts200Response}
     */
    errorsGroupModelCounts(errorGroupId, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'errorGroupId' is set
      if (errorGroupId === undefined || errorGroupId === null) {
        throw new Error("Missing the required parameter 'errorGroupId' when calling errorsGroupModelCounts");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling errorsGroupModelCounts");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling errorsGroupModelCounts");
      }

      let pathParams = {
        'errorGroupId': errorGroupId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        '$top': opts['top']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ErrorsGroupModelCounts200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsGroupOperatingSystemCounts operation.
     * @callback module:api/ErrorsApi~errorsGroupOperatingSystemCountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorsGroupOperatingSystemCounts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Top OSes of the selected error group.
     * @param {String} errorGroupId The id of the error group
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Number} [top = 30)] The maximum number of results to return. (0 will fetch all results till the max number.)
     * @param {module:api/ErrorsApi~errorsGroupOperatingSystemCountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorsGroupOperatingSystemCounts200Response}
     */
    errorsGroupOperatingSystemCounts(errorGroupId, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'errorGroupId' is set
      if (errorGroupId === undefined || errorGroupId === null) {
        throw new Error("Missing the required parameter 'errorGroupId' when calling errorsGroupOperatingSystemCounts");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling errorsGroupOperatingSystemCounts");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling errorsGroupOperatingSystemCounts");
      }

      let pathParams = {
        'errorGroupId': errorGroupId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        '$top': opts['top']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ErrorsGroupOperatingSystemCounts200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/operatingSystems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsLatestErrorDetails operation.
     * @callback module:api/ErrorsApi~errorsLatestErrorDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorsLatestErrorDetails200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Latest error details.
     * @param {String} errorGroupId The id of the error group
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/ErrorsApi~errorsLatestErrorDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorsLatestErrorDetails200Response}
     */
    errorsLatestErrorDetails(errorGroupId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'errorGroupId' is set
      if (errorGroupId === undefined || errorGroupId === null) {
        throw new Error("Missing the required parameter 'errorGroupId' when calling errorsLatestErrorDetails");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling errorsLatestErrorDetails");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling errorsLatestErrorDetails");
      }

      let pathParams = {
        'errorGroupId': errorGroupId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ErrorsLatestErrorDetails200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsListForGroup operation.
     * @callback module:api/ErrorsApi~errorsListForGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorsListForGroup200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all errors for group
     * @param {String} errorGroupId The id of the error group
     * @param {Date} start Start date time in data in ISO 8601 date time format
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [end] Last date time in data in ISO 8601 date time format
     * @param {Number} [top = 30)] The maximum number of results to return. (0 will fetch all results till the max number.)
     * @param {String} [model] 
     * @param {String} [os] 
     * @param {module:api/ErrorsApi~errorsListForGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorsListForGroup200Response}
     */
    errorsListForGroup(errorGroupId, start, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'errorGroupId' is set
      if (errorGroupId === undefined || errorGroupId === null) {
        throw new Error("Missing the required parameter 'errorGroupId' when calling errorsListForGroup");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling errorsListForGroup");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling errorsListForGroup");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling errorsListForGroup");
      }

      let pathParams = {
        'errorGroupId': errorGroupId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'start': start,
        'end': opts['end'],
        '$top': opts['top'],
        'model': opts['model'],
        'os': opts['os']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ErrorsListForGroup200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsListSessionLogs operation.
     * @callback module:api/ErrorsApi~errorsListSessionLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorsListSessionLogs200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get session logs by error ID
     * @param {String} errorId The id of the error
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [date] Date of data requested
     * @param {module:api/ErrorsApi~errorsListSessionLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorsListSessionLogs200Response}
     */
    errorsListSessionLogs(errorId, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'errorId' is set
      if (errorId === undefined || errorId === null) {
        throw new Error("Missing the required parameter 'errorId' when calling errorsListSessionLogs");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling errorsListSessionLogs");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling errorsListSessionLogs");
      }

      let pathParams = {
        'errorId': errorId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'date': opts['date']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ErrorsListSessionLogs200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/sessionLogs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsUpdateState operation.
     * @callback module:api/ErrorsApi~errorsUpdateStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorsGroupDetails200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update error group state
     * @param {String} errorGroupId The id of the error group
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/ErrorsUpdateStateRequest} errorsUpdateStateRequest The state of the error group
     * @param {module:api/ErrorsApi~errorsUpdateStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorsGroupDetails200Response}
     */
    errorsUpdateState(errorGroupId, ownerName, appName, errorsUpdateStateRequest, callback) {
      let postBody = errorsUpdateStateRequest;
      // verify the required parameter 'errorGroupId' is set
      if (errorGroupId === undefined || errorGroupId === null) {
        throw new Error("Missing the required parameter 'errorGroupId' when calling errorsUpdateState");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling errorsUpdateState");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling errorsUpdateState");
      }
      // verify the required parameter 'errorsUpdateStateRequest' is set
      if (errorsUpdateStateRequest === undefined || errorsUpdateStateRequest === null) {
        throw new Error("Missing the required parameter 'errorsUpdateStateRequest' when calling errorsUpdateState");
      }

      let pathParams = {
        'errorGroupId': errorGroupId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ErrorsGroupDetails200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
