/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExportConfigurationsList200Response from '../model/ExportConfigurationsList200Response';
import ExportConfigurationsList200ResponseValuesInner from '../model/ExportConfigurationsList200ResponseValuesInner';
import ExportConfigurationsList200ResponseValuesInnerExportConfiguration from '../model/ExportConfigurationsList200ResponseValuesInnerExportConfiguration';
import OrganizationsListAdministeredDefaultResponse from '../model/OrganizationsListAdministeredDefaultResponse';

/**
* Export service.
* @module api/ExportApi
* @version v0.1
*/
export default class ExportApi {

    /**
    * Constructs a new ExportApi. 
    * @alias module:api/ExportApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the exportConfigurationsCreate operation.
     * @callback module:api/ExportApi~exportConfigurationsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportConfigurationsList200ResponseValuesInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new export configuration
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/ExportConfigurationsList200ResponseValuesInnerExportConfiguration} exportConfigurationsList200ResponseValuesInnerExportConfiguration Export configurations.
     * @param {module:api/ExportApi~exportConfigurationsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportConfigurationsList200ResponseValuesInner}
     */
    exportConfigurationsCreate(ownerName, appName, exportConfigurationsList200ResponseValuesInnerExportConfiguration, callback) {
      let postBody = exportConfigurationsList200ResponseValuesInnerExportConfiguration;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling exportConfigurationsCreate");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling exportConfigurationsCreate");
      }
      // verify the required parameter 'exportConfigurationsList200ResponseValuesInnerExportConfiguration' is set
      if (exportConfigurationsList200ResponseValuesInnerExportConfiguration === undefined || exportConfigurationsList200ResponseValuesInnerExportConfiguration === null) {
        throw new Error("Missing the required parameter 'exportConfigurationsList200ResponseValuesInnerExportConfiguration' when calling exportConfigurationsCreate");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExportConfigurationsList200ResponseValuesInner;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/export_configurations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportConfigurationsDelete operation.
     * @callback module:api/ExportApi~exportConfigurationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete export configuration.
     * @param {String} exportConfigurationId The id of the export configuration.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/ExportApi~exportConfigurationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    exportConfigurationsDelete(exportConfigurationId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'exportConfigurationId' is set
      if (exportConfigurationId === undefined || exportConfigurationId === null) {
        throw new Error("Missing the required parameter 'exportConfigurationId' when calling exportConfigurationsDelete");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling exportConfigurationsDelete");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling exportConfigurationsDelete");
      }

      let pathParams = {
        'export_configuration_id': exportConfigurationId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportConfigurationsDisable operation.
     * @callback module:api/ExportApi~exportConfigurationsDisableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable export configuration.
     * @param {String} exportConfigurationId The id of the export configuration.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/ExportApi~exportConfigurationsDisableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    exportConfigurationsDisable(exportConfigurationId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'exportConfigurationId' is set
      if (exportConfigurationId === undefined || exportConfigurationId === null) {
        throw new Error("Missing the required parameter 'exportConfigurationId' when calling exportConfigurationsDisable");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling exportConfigurationsDisable");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling exportConfigurationsDisable");
      }

      let pathParams = {
        'export_configuration_id': exportConfigurationId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportConfigurationsEnable operation.
     * @callback module:api/ExportApi~exportConfigurationsEnableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable export configuration.
     * @param {String} exportConfigurationId The id of the export configuration.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/ExportApi~exportConfigurationsEnableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    exportConfigurationsEnable(exportConfigurationId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'exportConfigurationId' is set
      if (exportConfigurationId === undefined || exportConfigurationId === null) {
        throw new Error("Missing the required parameter 'exportConfigurationId' when calling exportConfigurationsEnable");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling exportConfigurationsEnable");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling exportConfigurationsEnable");
      }

      let pathParams = {
        'export_configuration_id': exportConfigurationId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportConfigurationsGet operation.
     * @callback module:api/ExportApi~exportConfigurationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportConfigurationsList200ResponseValuesInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get export configuration.
     * @param {String} exportConfigurationId The id of the export configuration.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/ExportApi~exportConfigurationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportConfigurationsList200ResponseValuesInner}
     */
    exportConfigurationsGet(exportConfigurationId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'exportConfigurationId' is set
      if (exportConfigurationId === undefined || exportConfigurationId === null) {
        throw new Error("Missing the required parameter 'exportConfigurationId' when calling exportConfigurationsGet");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling exportConfigurationsGet");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling exportConfigurationsGet");
      }

      let pathParams = {
        'export_configuration_id': exportConfigurationId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExportConfigurationsList200ResponseValuesInner;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportConfigurationsList operation.
     * @callback module:api/ExportApi~exportConfigurationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportConfigurationsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List export configurations.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/ExportApi~exportConfigurationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportConfigurationsList200Response}
     */
    exportConfigurationsList(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling exportConfigurationsList");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling exportConfigurationsList");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExportConfigurationsList200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/export_configurations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportConfigurationsPartialUpdate operation.
     * @callback module:api/ExportApi~exportConfigurationsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportConfigurationsList200ResponseValuesInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partially update export configuration.
     * @param {String} exportConfigurationId The id of the export configuration.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/ExportConfigurationsList200ResponseValuesInnerExportConfiguration} exportConfigurationsList200ResponseValuesInnerExportConfiguration Export configurations.
     * @param {module:api/ExportApi~exportConfigurationsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportConfigurationsList200ResponseValuesInner}
     */
    exportConfigurationsPartialUpdate(exportConfigurationId, ownerName, appName, exportConfigurationsList200ResponseValuesInnerExportConfiguration, callback) {
      let postBody = exportConfigurationsList200ResponseValuesInnerExportConfiguration;
      // verify the required parameter 'exportConfigurationId' is set
      if (exportConfigurationId === undefined || exportConfigurationId === null) {
        throw new Error("Missing the required parameter 'exportConfigurationId' when calling exportConfigurationsPartialUpdate");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling exportConfigurationsPartialUpdate");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling exportConfigurationsPartialUpdate");
      }
      // verify the required parameter 'exportConfigurationsList200ResponseValuesInnerExportConfiguration' is set
      if (exportConfigurationsList200ResponseValuesInnerExportConfiguration === undefined || exportConfigurationsList200ResponseValuesInnerExportConfiguration === null) {
        throw new Error("Missing the required parameter 'exportConfigurationsList200ResponseValuesInnerExportConfiguration' when calling exportConfigurationsPartialUpdate");
      }

      let pathParams = {
        'export_configuration_id': exportConfigurationId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExportConfigurationsList200ResponseValuesInner;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
