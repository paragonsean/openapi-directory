/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BranchConfigurationsDelete200Response from '../model/BranchConfigurationsDelete200Response';
import CodePushAcquisitionGetAcquisitionStatus200Response from '../model/CodePushAcquisitionGetAcquisitionStatus200Response';
import CodePushAcquisitionUpdateCheck200Response from '../model/CodePushAcquisitionUpdateCheck200Response';
import CodePushAcquisitionUpdateDeployStatusRequest from '../model/CodePushAcquisitionUpdateDeployStatusRequest';
import CodePushDeploymentMetricsGet200ResponseInner from '../model/CodePushDeploymentMetricsGet200ResponseInner';
import CodePushDeploymentReleaseRollbackRequest from '../model/CodePushDeploymentReleaseRollbackRequest';
import CodePushDeploymentReleasesCreateRequest from '../model/CodePushDeploymentReleasesCreateRequest';
import CodePushDeploymentUploadCreate200Response from '../model/CodePushDeploymentUploadCreate200Response';
import CodePushDeploymentsList200ResponseInner from '../model/CodePushDeploymentsList200ResponseInner';
import CodePushDeploymentsList200ResponseInnerLatestRelease from '../model/CodePushDeploymentsList200ResponseInnerLatestRelease';
import CodePushDeploymentsPromoteRequest from '../model/CodePushDeploymentsPromoteRequest';
import CodePushDeploymentsUpdateRequest from '../model/CodePushDeploymentsUpdateRequest';
import DeploymentReleasesUpdateRequest from '../model/DeploymentReleasesUpdateRequest';
import LegacyCodePushAcquisitionUpdateCheck200Response from '../model/LegacyCodePushAcquisitionUpdateCheck200Response';
import LegacyCodePushAcquisitionUpdateInstallsStatusRequest from '../model/LegacyCodePushAcquisitionUpdateInstallsStatusRequest';

/**
* Codepush service.
* @module api/CodepushApi
* @version v0.1
*/
export default class CodepushApi {

    /**
    * Constructs a new CodepushApi. 
    * @alias module:api/CodepushApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the codePushAcquisitionGetAcquisitionStatus operation.
     * @callback module:api/CodepushApi~codePushAcquisitionGetAcquisitionStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodePushAcquisitionGetAcquisitionStatus200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the acquisition service status to the caller
     * @param {module:api/CodepushApi~codePushAcquisitionGetAcquisitionStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodePushAcquisitionGetAcquisitionStatus200Response}
     */
    codePushAcquisitionGetAcquisitionStatus(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CodePushAcquisitionGetAcquisitionStatus200Response;
      return this.apiClient.callApi(
        '/v0.1/public/codepush/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codePushAcquisitionUpdateCheck operation.
     * @callback module:api/CodepushApi~codePushAcquisitionUpdateCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodePushAcquisitionUpdateCheck200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check for updates
     * @param {String} deploymentKey 
     * @param {String} appVersion 
     * @param {Object} opts Optional parameters
     * @param {String} [packageHash] 
     * @param {String} [label] 
     * @param {String} [clientUniqueId] 
     * @param {Boolean} [isCompanion] 
     * @param {String} [previousLabelOrAppVersion] 
     * @param {String} [previousDeploymentKey] 
     * @param {module:api/CodepushApi~codePushAcquisitionUpdateCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodePushAcquisitionUpdateCheck200Response}
     */
    codePushAcquisitionUpdateCheck(deploymentKey, appVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'deploymentKey' is set
      if (deploymentKey === undefined || deploymentKey === null) {
        throw new Error("Missing the required parameter 'deploymentKey' when calling codePushAcquisitionUpdateCheck");
      }
      // verify the required parameter 'appVersion' is set
      if (appVersion === undefined || appVersion === null) {
        throw new Error("Missing the required parameter 'appVersion' when calling codePushAcquisitionUpdateCheck");
      }

      let pathParams = {
      };
      let queryParams = {
        'deployment_key': deploymentKey,
        'app_version': appVersion,
        'package_hash': opts['packageHash'],
        'label': opts['label'],
        'client_unique_id': opts['clientUniqueId'],
        'is_companion': opts['isCompanion'],
        'previous_label_or_app_version': opts['previousLabelOrAppVersion'],
        'previous_deployment_key': opts['previousDeploymentKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CodePushAcquisitionUpdateCheck200Response;
      return this.apiClient.callApi(
        '/v0.1/public/codepush/update_check', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codePushAcquisitionUpdateDeployStatus operation.
     * @callback module:api/CodepushApi~codePushAcquisitionUpdateDeployStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Report Deployment status metric
     * @param {module:model/CodePushAcquisitionUpdateDeployStatusRequest} codePushAcquisitionUpdateDeployStatusRequest Deployment status metric properties
     * @param {module:api/CodepushApi~codePushAcquisitionUpdateDeployStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codePushAcquisitionUpdateDeployStatus(codePushAcquisitionUpdateDeployStatusRequest, callback) {
      let postBody = codePushAcquisitionUpdateDeployStatusRequest;
      // verify the required parameter 'codePushAcquisitionUpdateDeployStatusRequest' is set
      if (codePushAcquisitionUpdateDeployStatusRequest === undefined || codePushAcquisitionUpdateDeployStatusRequest === null) {
        throw new Error("Missing the required parameter 'codePushAcquisitionUpdateDeployStatusRequest' when calling codePushAcquisitionUpdateDeployStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/public/codepush/report_status/deploy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codePushAcquisitionUpdateDownloadStatus operation.
     * @callback module:api/CodepushApi~codePushAcquisitionUpdateDownloadStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Report download of specified release
     * @param {module:model/CodePushAcquisitionUpdateDeployStatusRequest} codePushAcquisitionUpdateDeployStatusRequest Deployment status metric properties
     * @param {module:api/CodepushApi~codePushAcquisitionUpdateDownloadStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codePushAcquisitionUpdateDownloadStatus(codePushAcquisitionUpdateDeployStatusRequest, callback) {
      let postBody = codePushAcquisitionUpdateDeployStatusRequest;
      // verify the required parameter 'codePushAcquisitionUpdateDeployStatusRequest' is set
      if (codePushAcquisitionUpdateDeployStatusRequest === undefined || codePushAcquisitionUpdateDeployStatusRequest === null) {
        throw new Error("Missing the required parameter 'codePushAcquisitionUpdateDeployStatusRequest' when calling codePushAcquisitionUpdateDownloadStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/public/codepush/report_status/download', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codePushDeploymentMetricsGet operation.
     * @callback module:api/CodepushApi~codePushDeploymentMetricsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CodePushDeploymentMetricsGet200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all releases metrics for specified Deployment
     * @param {String} deploymentName deployment name
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/CodepushApi~codePushDeploymentMetricsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CodePushDeploymentMetricsGet200ResponseInner>}
     */
    codePushDeploymentMetricsGet(deploymentName, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling codePushDeploymentMetricsGet");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling codePushDeploymentMetricsGet");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling codePushDeploymentMetricsGet");
      }

      let pathParams = {
        'deployment_name': deploymentName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CodePushDeploymentMetricsGet200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codePushDeploymentReleaseRollback operation.
     * @callback module:api/CodepushApi~codePushDeploymentReleaseRollbackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodePushDeploymentsList200ResponseInnerLatestRelease} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rollback the latest or a specific release for an app deployment
     * @param {String} deploymentName deployment name
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {module:model/CodePushDeploymentReleaseRollbackRequest} [codePushDeploymentReleaseRollbackRequest] The specific release label that you want to rollback to
     * @param {module:api/CodepushApi~codePushDeploymentReleaseRollbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodePushDeploymentsList200ResponseInnerLatestRelease}
     */
    codePushDeploymentReleaseRollback(deploymentName, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = opts['codePushDeploymentReleaseRollbackRequest'];
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling codePushDeploymentReleaseRollback");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling codePushDeploymentReleaseRollback");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling codePushDeploymentReleaseRollback");
      }

      let pathParams = {
        'deployment_name': deploymentName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CodePushDeploymentsList200ResponseInnerLatestRelease;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/rollback_release', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codePushDeploymentReleasesCreate operation.
     * @callback module:api/CodepushApi~codePushDeploymentReleasesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodePushDeploymentsList200ResponseInnerLatestRelease} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new CodePush release for the specified deployment
     * @param {String} deploymentName deployment name
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/CodePushDeploymentReleasesCreateRequest} codePushDeploymentReleasesCreateRequest The necessary information required to download the bundle and being the release process.
     * @param {module:api/CodepushApi~codePushDeploymentReleasesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodePushDeploymentsList200ResponseInnerLatestRelease}
     */
    codePushDeploymentReleasesCreate(deploymentName, ownerName, appName, codePushDeploymentReleasesCreateRequest, callback) {
      let postBody = codePushDeploymentReleasesCreateRequest;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling codePushDeploymentReleasesCreate");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling codePushDeploymentReleasesCreate");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling codePushDeploymentReleasesCreate");
      }
      // verify the required parameter 'codePushDeploymentReleasesCreateRequest' is set
      if (codePushDeploymentReleasesCreateRequest === undefined || codePushDeploymentReleasesCreateRequest === null) {
        throw new Error("Missing the required parameter 'codePushDeploymentReleasesCreateRequest' when calling codePushDeploymentReleasesCreate");
      }

      let pathParams = {
        'deployment_name': deploymentName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CodePushDeploymentsList200ResponseInnerLatestRelease;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codePushDeploymentReleasesDelete operation.
     * @callback module:api/CodepushApi~codePushDeploymentReleasesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clears a Deployment of releases
     * @param {String} deploymentName deployment name
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/CodepushApi~codePushDeploymentReleasesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codePushDeploymentReleasesDelete(deploymentName, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling codePushDeploymentReleasesDelete");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling codePushDeploymentReleasesDelete");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling codePushDeploymentReleasesDelete");
      }

      let pathParams = {
        'deployment_name': deploymentName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codePushDeploymentReleasesGet operation.
     * @callback module:api/CodepushApi~codePushDeploymentReleasesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CodePushDeploymentsList200ResponseInnerLatestRelease>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the history of releases on a Deployment
     * @param {String} deploymentName deployment name
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/CodepushApi~codePushDeploymentReleasesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CodePushDeploymentsList200ResponseInnerLatestRelease>}
     */
    codePushDeploymentReleasesGet(deploymentName, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling codePushDeploymentReleasesGet");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling codePushDeploymentReleasesGet");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling codePushDeploymentReleasesGet");
      }

      let pathParams = {
        'deployment_name': deploymentName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CodePushDeploymentsList200ResponseInnerLatestRelease];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codePushDeploymentUploadCreate operation.
     * @callback module:api/CodepushApi~codePushDeploymentUploadCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodePushDeploymentUploadCreate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new CodePush release upload for the specified deployment
     * @param {String} deploymentName deployment name
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/CodepushApi~codePushDeploymentUploadCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodePushDeploymentUploadCreate200Response}
     */
    codePushDeploymentUploadCreate(deploymentName, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling codePushDeploymentUploadCreate");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling codePushDeploymentUploadCreate");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling codePushDeploymentUploadCreate");
      }

      let pathParams = {
        'deployment_name': deploymentName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CodePushDeploymentUploadCreate200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/uploads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codePushDeploymentsCreate operation.
     * @callback module:api/CodepushApi~codePushDeploymentsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodePushDeploymentsList200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a CodePush Deployment for the given app
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/CodePushDeploymentsList200ResponseInner} codePushDeploymentsList200ResponseInner Deployment to be created
     * @param {module:api/CodepushApi~codePushDeploymentsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodePushDeploymentsList200ResponseInner}
     */
    codePushDeploymentsCreate(ownerName, appName, codePushDeploymentsList200ResponseInner, callback) {
      let postBody = codePushDeploymentsList200ResponseInner;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling codePushDeploymentsCreate");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling codePushDeploymentsCreate");
      }
      // verify the required parameter 'codePushDeploymentsList200ResponseInner' is set
      if (codePushDeploymentsList200ResponseInner === undefined || codePushDeploymentsList200ResponseInner === null) {
        throw new Error("Missing the required parameter 'codePushDeploymentsList200ResponseInner' when calling codePushDeploymentsCreate");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CodePushDeploymentsList200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/deployments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codePushDeploymentsDelete operation.
     * @callback module:api/CodepushApi~codePushDeploymentsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a CodePush Deployment for the given app
     * @param {String} deploymentName deployment name
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] 
     * @param {module:api/CodepushApi~codePushDeploymentsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codePushDeploymentsDelete(deploymentName, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling codePushDeploymentsDelete");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling codePushDeploymentsDelete");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling codePushDeploymentsDelete");
      }

      let pathParams = {
        'deployment_name': deploymentName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codePushDeploymentsGet operation.
     * @callback module:api/CodepushApi~codePushDeploymentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodePushDeploymentsList200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a CodePush Deployment for the given app
     * @param {String} deploymentName deployment name
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/CodepushApi~codePushDeploymentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodePushDeploymentsList200ResponseInner}
     */
    codePushDeploymentsGet(deploymentName, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling codePushDeploymentsGet");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling codePushDeploymentsGet");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling codePushDeploymentsGet");
      }

      let pathParams = {
        'deployment_name': deploymentName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CodePushDeploymentsList200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codePushDeploymentsList operation.
     * @callback module:api/CodepushApi~codePushDeploymentsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CodePushDeploymentsList200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of CodePush deployments for the given app
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/CodepushApi~codePushDeploymentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CodePushDeploymentsList200ResponseInner>}
     */
    codePushDeploymentsList(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling codePushDeploymentsList");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling codePushDeploymentsList");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CodePushDeploymentsList200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codePushDeploymentsPromote operation.
     * @callback module:api/CodepushApi~codePushDeploymentsPromoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodePushDeploymentsList200ResponseInnerLatestRelease} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Promote one release (default latest one) from one deployment to another
     * @param {String} deploymentName deployment name
     * @param {String} promoteDeploymentName deployment name
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {module:model/CodePushDeploymentsPromoteRequest} [codePushDeploymentsPromoteRequest] Release to be promoted, only needs to provide optional fields, description, label, disabled, mandatory, rollout, targetBinaryVersion
     * @param {module:api/CodepushApi~codePushDeploymentsPromoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodePushDeploymentsList200ResponseInnerLatestRelease}
     */
    codePushDeploymentsPromote(deploymentName, promoteDeploymentName, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = opts['codePushDeploymentsPromoteRequest'];
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling codePushDeploymentsPromote");
      }
      // verify the required parameter 'promoteDeploymentName' is set
      if (promoteDeploymentName === undefined || promoteDeploymentName === null) {
        throw new Error("Missing the required parameter 'promoteDeploymentName' when calling codePushDeploymentsPromote");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling codePushDeploymentsPromote");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling codePushDeploymentsPromote");
      }

      let pathParams = {
        'deployment_name': deploymentName,
        'promote_deployment_name': promoteDeploymentName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CodePushDeploymentsList200ResponseInnerLatestRelease;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/promote_release/{promote_deployment_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codePushDeploymentsUpdate operation.
     * @callback module:api/CodepushApi~codePushDeploymentsUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a CodePush Deployment for the given app
     * @param {String} deploymentName deployment name
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/CodePushDeploymentsUpdateRequest} codePushDeploymentsUpdateRequest Deployment modification. All fields are optional and only provided fields will get updated.
     * @param {module:api/CodepushApi~codePushDeploymentsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codePushDeploymentsUpdate(deploymentName, ownerName, appName, codePushDeploymentsUpdateRequest, callback) {
      let postBody = codePushDeploymentsUpdateRequest;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling codePushDeploymentsUpdate");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling codePushDeploymentsUpdate");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling codePushDeploymentsUpdate");
      }
      // verify the required parameter 'codePushDeploymentsUpdateRequest' is set
      if (codePushDeploymentsUpdateRequest === undefined || codePushDeploymentsUpdateRequest === null) {
        throw new Error("Missing the required parameter 'codePushDeploymentsUpdateRequest' when calling codePushDeploymentsUpdate");
      }

      let pathParams = {
        'deployment_name': deploymentName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentReleasesUpdate operation.
     * @callback module:api/CodepushApi~deploymentReleasesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodePushDeploymentsList200ResponseInnerLatestRelease} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a CodePush release metadata under the given Deployment
     * @param {String} deploymentName deployment name
     * @param {String} releaseLabel release label
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/DeploymentReleasesUpdateRequest} deploymentReleasesUpdateRequest Release modification. All fields are optional and only provided fields will get updated.
     * @param {module:api/CodepushApi~deploymentReleasesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodePushDeploymentsList200ResponseInnerLatestRelease}
     */
    deploymentReleasesUpdate(deploymentName, releaseLabel, ownerName, appName, deploymentReleasesUpdateRequest, callback) {
      let postBody = deploymentReleasesUpdateRequest;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling deploymentReleasesUpdate");
      }
      // verify the required parameter 'releaseLabel' is set
      if (releaseLabel === undefined || releaseLabel === null) {
        throw new Error("Missing the required parameter 'releaseLabel' when calling deploymentReleasesUpdate");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling deploymentReleasesUpdate");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling deploymentReleasesUpdate");
      }
      // verify the required parameter 'deploymentReleasesUpdateRequest' is set
      if (deploymentReleasesUpdateRequest === undefined || deploymentReleasesUpdateRequest === null) {
        throw new Error("Missing the required parameter 'deploymentReleasesUpdateRequest' when calling deploymentReleasesUpdate");
      }

      let pathParams = {
        'deployment_name': deploymentName,
        'release_label': releaseLabel,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CodePushDeploymentsList200ResponseInnerLatestRelease;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases/{release_label}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the legacyCodePushAcquisitionUpdateCheck operation.
     * @callback module:api/CodepushApi~legacyCodePushAcquisitionUpdateCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LegacyCodePushAcquisitionUpdateCheck200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check for updates
     * @param {Object} opts Optional parameters
     * @param {String} [deploymentKey] 
     * @param {String} [appVersion] 
     * @param {String} [packageHash] 
     * @param {String} [label] 
     * @param {String} [clientUniqueId] 
     * @param {String} [isCompanion] 
     * @param {module:api/CodepushApi~legacyCodePushAcquisitionUpdateCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LegacyCodePushAcquisitionUpdateCheck200Response}
     */
    legacyCodePushAcquisitionUpdateCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'deploymentKey': opts['deploymentKey'],
        'appVersion': opts['appVersion'],
        'packageHash': opts['packageHash'],
        'label': opts['label'],
        'clientUniqueId': opts['clientUniqueId'],
        'isCompanion': opts['isCompanion']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LegacyCodePushAcquisitionUpdateCheck200Response;
      return this.apiClient.callApi(
        '/v0.1/legacy/updateCheck', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the legacyCodePushAcquisitionUpdateDownloadStatus operation.
     * @callback module:api/CodepushApi~legacyCodePushAcquisitionUpdateDownloadStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Report download of specified release
     * @param {module:model/LegacyCodePushAcquisitionUpdateInstallsStatusRequest} legacyCodePushAcquisitionUpdateInstallsStatusRequest Deployment status metric properties
     * @param {module:api/CodepushApi~legacyCodePushAcquisitionUpdateDownloadStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    legacyCodePushAcquisitionUpdateDownloadStatus(legacyCodePushAcquisitionUpdateInstallsStatusRequest, callback) {
      let postBody = legacyCodePushAcquisitionUpdateInstallsStatusRequest;
      // verify the required parameter 'legacyCodePushAcquisitionUpdateInstallsStatusRequest' is set
      if (legacyCodePushAcquisitionUpdateInstallsStatusRequest === undefined || legacyCodePushAcquisitionUpdateInstallsStatusRequest === null) {
        throw new Error("Missing the required parameter 'legacyCodePushAcquisitionUpdateInstallsStatusRequest' when calling legacyCodePushAcquisitionUpdateDownloadStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/legacy/reportStatus/download', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the legacyCodePushAcquisitionUpdateInstallsStatus operation.
     * @callback module:api/CodepushApi~legacyCodePushAcquisitionUpdateInstallsStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Report deploy of specified release
     * @param {module:model/LegacyCodePushAcquisitionUpdateInstallsStatusRequest} legacyCodePushAcquisitionUpdateInstallsStatusRequest Deployment status metric properties
     * @param {module:api/CodepushApi~legacyCodePushAcquisitionUpdateInstallsStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    legacyCodePushAcquisitionUpdateInstallsStatus(legacyCodePushAcquisitionUpdateInstallsStatusRequest, callback) {
      let postBody = legacyCodePushAcquisitionUpdateInstallsStatusRequest;
      // verify the required parameter 'legacyCodePushAcquisitionUpdateInstallsStatusRequest' is set
      if (legacyCodePushAcquisitionUpdateInstallsStatusRequest === undefined || legacyCodePushAcquisitionUpdateInstallsStatusRequest === null) {
        throw new Error("Missing the required parameter 'legacyCodePushAcquisitionUpdateInstallsStatusRequest' when calling legacyCodePushAcquisitionUpdateInstallsStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/legacy/reportStatus/deploy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
