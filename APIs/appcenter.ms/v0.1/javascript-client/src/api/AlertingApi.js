/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BugTrackerGetRepoIssueFromCrash200Response from '../model/BugTrackerGetRepoIssueFromCrash200Response';
import BugtrackerGetSettings200Response from '../model/BugtrackerGetSettings200Response';
import BugtrackerGetSettingsDefaultResponse from '../model/BugtrackerGetSettingsDefaultResponse';
import NotificationsGetAppEmailSettings200Response from '../model/NotificationsGetAppEmailSettings200Response';
import NotificationsGetUserEmailSettings200Response from '../model/NotificationsGetUserEmailSettings200Response';
import WebhooksList200Response from '../model/WebhooksList200Response';

/**
* Alerting service.
* @module api/AlertingApi
* @version v0.1
*/
export default class AlertingApi {

    /**
    * Constructs a new AlertingApi. 
    * @alias module:api/AlertingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bugTrackerGetRepoIssueFromCrash operation.
     * @callback module:api/AlertingApi~bugTrackerGetRepoIssueFromCrashCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BugTrackerGetRepoIssueFromCrash200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project issue related to a crash group
     * @param {String} crashGroupId CrashGroup Id
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/AlertingApi~bugTrackerGetRepoIssueFromCrashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BugTrackerGetRepoIssueFromCrash200Response}
     */
    bugTrackerGetRepoIssueFromCrash(crashGroupId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'crashGroupId' is set
      if (crashGroupId === undefined || crashGroupId === null) {
        throw new Error("Missing the required parameter 'crashGroupId' when calling bugTrackerGetRepoIssueFromCrash");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling bugTrackerGetRepoIssueFromCrash");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling bugTrackerGetRepoIssueFromCrash");
      }

      let pathParams = {
        'crash_group_id': crashGroupId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BugTrackerGetRepoIssueFromCrash200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/bugtracker/crashGroup/{crash_group_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bugtrackerGetSettings operation.
     * @callback module:api/AlertingApi~bugtrackerGetSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BugtrackerGetSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get bug tracker settings for a particular app
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/AlertingApi~bugtrackerGetSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BugtrackerGetSettings200Response}
     */
    bugtrackerGetSettings(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling bugtrackerGetSettings");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling bugtrackerGetSettings");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BugtrackerGetSettings200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/bugtracker', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsGetAppEmailSettings operation.
     * @callback module:api/AlertingApi~notificationsGetAppEmailSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationsGetAppEmailSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Email notification settings of user for a particular app
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/AlertingApi~notificationsGetAppEmailSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationsGetAppEmailSettings200Response}
     */
    notificationsGetAppEmailSettings(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling notificationsGetAppEmailSettings");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling notificationsGetAppEmailSettings");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NotificationsGetAppEmailSettings200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/notifications/emailSettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsGetUserEmailSettings operation.
     * @callback module:api/AlertingApi~notificationsGetUserEmailSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationsGetUserEmailSettings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Default email notification settings for the user
     * @param {module:api/AlertingApi~notificationsGetUserEmailSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationsGetUserEmailSettings200Response}
     */
    notificationsGetUserEmailSettings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NotificationsGetUserEmailSettings200Response;
      return this.apiClient.callApi(
        '/v0.1/user/notifications/emailSettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksList operation.
     * @callback module:api/AlertingApi~webhooksListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhooksList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get web hooks configured for a particular app
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/AlertingApi~webhooksListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhooksList200Response}
     */
    webhooksList(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling webhooksList");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling webhooksList");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebhooksList200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
