/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnalyticsCrashCounts200Response from '../model/AnalyticsCrashCounts200Response';
import AnalyticsCrashFreeDevicePercentages200Response from '../model/AnalyticsCrashFreeDevicePercentages200Response';
import AnalyticsCrashGroupModelCounts200Response from '../model/AnalyticsCrashGroupModelCounts200Response';
import AnalyticsCrashGroupOperatingSystemCounts200Response from '../model/AnalyticsCrashGroupOperatingSystemCounts200Response';
import AnalyticsCrashGroupsTotals200ResponseInner from '../model/AnalyticsCrashGroupsTotals200ResponseInner';
import AnalyticsCrashGroupsTotals200ResponseInnerOverall from '../model/AnalyticsCrashGroupsTotals200ResponseInnerOverall';
import AnalyticsCrashGroupsTotalsRequest from '../model/AnalyticsCrashGroupsTotalsRequest';
import AnalyticsDeviceCounts200Response from '../model/AnalyticsDeviceCounts200Response';
import AnalyticsDeviceCounts200ResponseDailyInner from '../model/AnalyticsDeviceCounts200ResponseDailyInner';
import AnalyticsDeviceCountsDefaultResponse from '../model/AnalyticsDeviceCountsDefaultResponse';
import AnalyticsDistributionReleaseCounts200Response from '../model/AnalyticsDistributionReleaseCounts200Response';
import AnalyticsDistributionReleaseCountsRequest from '../model/AnalyticsDistributionReleaseCountsRequest';
import AnalyticsEventCount200Response from '../model/AnalyticsEventCount200Response';
import AnalyticsEventDeviceCount200Response from '../model/AnalyticsEventDeviceCount200Response';
import AnalyticsEventPerDeviceCount200Response from '../model/AnalyticsEventPerDeviceCount200Response';
import AnalyticsEventPerSessionCount200Response from '../model/AnalyticsEventPerSessionCount200Response';
import AnalyticsEventProperties200Response from '../model/AnalyticsEventProperties200Response';
import AnalyticsEventPropertyCounts200Response from '../model/AnalyticsEventPropertyCounts200Response';
import AnalyticsEvents200Response from '../model/AnalyticsEvents200Response';
import AnalyticsGenericLogFlow200Response from '../model/AnalyticsGenericLogFlow200Response';
import AnalyticsGetAudience200Response from '../model/AnalyticsGetAudience200Response';
import AnalyticsLanguageCounts200Response from '../model/AnalyticsLanguageCounts200Response';
import AnalyticsListAudiences200Response from '../model/AnalyticsListAudiences200Response';
import AnalyticsListCustomProperties200Response from '../model/AnalyticsListCustomProperties200Response';
import AnalyticsListDevicePropertyValues200Response from '../model/AnalyticsListDevicePropertyValues200Response';
import AnalyticsLogFlow200Response from '../model/AnalyticsLogFlow200Response';
import AnalyticsModelCounts200Response from '../model/AnalyticsModelCounts200Response';
import AnalyticsOperatingSystemCounts200Response from '../model/AnalyticsOperatingSystemCounts200Response';
import AnalyticsPerDeviceCounts200Response from '../model/AnalyticsPerDeviceCounts200Response';
import AnalyticsPlaceCounts200Response from '../model/AnalyticsPlaceCounts200Response';
import AnalyticsSessionDurationsDistribution200Response from '../model/AnalyticsSessionDurationsDistribution200Response';
import AnalyticsTestAudience200Response from '../model/AnalyticsTestAudience200Response';
import AnalyticsTestAudienceRequest from '../model/AnalyticsTestAudienceRequest';
import AnalyticsVersions200Response from '../model/AnalyticsVersions200Response';
import CrashesListSessionLogs200Response from '../model/CrashesListSessionLogs200Response';
import OrganizationsListAdministeredDefaultResponse from '../model/OrganizationsListAdministeredDefaultResponse';

/**
* Analytics service.
* @module api/AnalyticsApi
* @version v0.1
*/
export default class AnalyticsApi {

    /**
    * Constructs a new AnalyticsApi. 
    * @alias module:api/AnalyticsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the analyticsAudienceNameExists operation.
     * @callback module:api/AnalyticsApi~analyticsAudienceNameExistsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns whether audience definition exists.
     * @param {String} audienceName The name of the audience
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/AnalyticsApi~analyticsAudienceNameExistsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    analyticsAudienceNameExists(audienceName, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'audienceName' is set
      if (audienceName === undefined || audienceName === null) {
        throw new Error("Missing the required parameter 'audienceName' when calling analyticsAudienceNameExists");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsAudienceNameExists");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsAudienceNameExists");
      }

      let pathParams = {
        'audience_name': audienceName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsCrashCounts operation.
     * @callback module:api/AnalyticsApi~analyticsCrashCountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsCrashCounts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Available for UWP apps only.
     * Count of crashes by day in the time range based the selected versions. Available for UWP apps only.
     * @param {Date} start Start date time in data in ISO 8601 date time format.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [end] Last date time in data in ISO 8601 date time format.
     * @param {Array.<String>} [versions] To select specific application versions
     * @param {module:api/AnalyticsApi~analyticsCrashCountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsCrashCounts200Response}
     */
    analyticsCrashCounts(start, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling analyticsCrashCounts");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsCrashCounts");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsCrashCounts");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'start': start,
        'end': opts['end'],
        'versions': this.apiClient.buildCollectionParam(opts['versions'], 'pipes')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsCrashCounts200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsCrashFreeDevicePercentages operation.
     * @callback module:api/AnalyticsApi~analyticsCrashFreeDevicePercentagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsCrashFreeDevicePercentages200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Percentage of crash-free device by day in the time range based on the selected versions. Api will return -1 if crash devices is greater than active devices.
     * @param {Date} start Start date time in data in ISO 8601 date time format.
     * @param {String} version 
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [end] Last date time in data in ISO 8601 date time format.
     * @param {module:api/AnalyticsApi~analyticsCrashFreeDevicePercentagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsCrashFreeDevicePercentages200Response}
     */
    analyticsCrashFreeDevicePercentages(start, version, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling analyticsCrashFreeDevicePercentages");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling analyticsCrashFreeDevicePercentages");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsCrashFreeDevicePercentages");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsCrashFreeDevicePercentages");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'start': start,
        'end': opts['end'],
        'version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsCrashFreeDevicePercentages200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/crashfree_device_percentages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsCrashGroupCounts operation.
     * @callback module:api/AnalyticsApi~analyticsCrashGroupCountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsCrashCounts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Available for UWP apps only.
     * Count of crashes by day in the time range of the selected crash group with selected version. Available for UWP apps only.
     * @param {String} crashGroupId The id of the crash group.
     * @param {String} version 
     * @param {Date} start Start date time in data in ISO 8601 date time format.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [end] Last date time in data in ISO 8601 date time format.
     * @param {module:api/AnalyticsApi~analyticsCrashGroupCountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsCrashCounts200Response}
     */
    analyticsCrashGroupCounts(crashGroupId, version, start, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'crashGroupId' is set
      if (crashGroupId === undefined || crashGroupId === null) {
        throw new Error("Missing the required parameter 'crashGroupId' when calling analyticsCrashGroupCounts");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling analyticsCrashGroupCounts");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling analyticsCrashGroupCounts");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsCrashGroupCounts");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsCrashGroupCounts");
      }

      let pathParams = {
        'crash_group_id': crashGroupId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'version': version,
        'start': start,
        'end': opts['end']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsCrashCounts200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/crash_counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsCrashGroupModelCounts operation.
     * @callback module:api/AnalyticsApi~analyticsCrashGroupModelCountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsCrashGroupModelCounts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Available for UWP apps only.
     * Top models of the selected crash group with selected version. Available for UWP apps only.
     * @param {String} crashGroupId The id of the crash group.
     * @param {String} version 
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Number} [top = 30)] The maximum number of results to return. (0 will fetch all results)
     * @param {module:api/AnalyticsApi~analyticsCrashGroupModelCountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsCrashGroupModelCounts200Response}
     */
    analyticsCrashGroupModelCounts(crashGroupId, version, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'crashGroupId' is set
      if (crashGroupId === undefined || crashGroupId === null) {
        throw new Error("Missing the required parameter 'crashGroupId' when calling analyticsCrashGroupModelCounts");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling analyticsCrashGroupModelCounts");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsCrashGroupModelCounts");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsCrashGroupModelCounts");
      }

      let pathParams = {
        'crash_group_id': crashGroupId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'version': version,
        '$top': opts['top']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsCrashGroupModelCounts200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsCrashGroupOperatingSystemCounts operation.
     * @callback module:api/AnalyticsApi~analyticsCrashGroupOperatingSystemCountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsCrashGroupOperatingSystemCounts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Available for UWP apps only.
     * Top OSes of the selected crash group with selected version. Available for UWP apps only.
     * @param {String} crashGroupId The id of the crash group.
     * @param {String} version 
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Number} [top = 30)] The maximum number of results to return. (0 will fetch all results)
     * @param {module:api/AnalyticsApi~analyticsCrashGroupOperatingSystemCountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsCrashGroupOperatingSystemCounts200Response}
     */
    analyticsCrashGroupOperatingSystemCounts(crashGroupId, version, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'crashGroupId' is set
      if (crashGroupId === undefined || crashGroupId === null) {
        throw new Error("Missing the required parameter 'crashGroupId' when calling analyticsCrashGroupOperatingSystemCounts");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling analyticsCrashGroupOperatingSystemCounts");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsCrashGroupOperatingSystemCounts");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsCrashGroupOperatingSystemCounts");
      }

      let pathParams = {
        'crash_group_id': crashGroupId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'version': version,
        '$top': opts['top']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsCrashGroupOperatingSystemCounts200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/operating_systems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsCrashGroupTotals operation.
     * @callback module:api/AnalyticsApi~analyticsCrashGroupTotalsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsCrashGroupsTotals200ResponseInnerOverall} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Available for UWP apps only.
     * Overall crashes and affected users count of the selected crash group with selected version. Available for UWP apps only.
     * @param {String} crashGroupId The id of the crash group.
     * @param {String} version 
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/AnalyticsApi~analyticsCrashGroupTotalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsCrashGroupsTotals200ResponseInnerOverall}
     */
    analyticsCrashGroupTotals(crashGroupId, version, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'crashGroupId' is set
      if (crashGroupId === undefined || crashGroupId === null) {
        throw new Error("Missing the required parameter 'crashGroupId' when calling analyticsCrashGroupTotals");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling analyticsCrashGroupTotals");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsCrashGroupTotals");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsCrashGroupTotals");
      }

      let pathParams = {
        'crash_group_id': crashGroupId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsCrashGroupsTotals200ResponseInnerOverall;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/overall', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsCrashGroupsTotals operation.
     * @callback module:api/AnalyticsApi~analyticsCrashGroupsTotalsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AnalyticsCrashGroupsTotals200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Overall crashes and affected users count of the selected crash groups with selected versions.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/AnalyticsCrashGroupsTotalsRequest} analyticsCrashGroupsTotalsRequest 
     * @param {module:api/AnalyticsApi~analyticsCrashGroupsTotalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AnalyticsCrashGroupsTotals200ResponseInner>}
     */
    analyticsCrashGroupsTotals(ownerName, appName, analyticsCrashGroupsTotalsRequest, callback) {
      let postBody = analyticsCrashGroupsTotalsRequest;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsCrashGroupsTotals");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsCrashGroupsTotals");
      }
      // verify the required parameter 'analyticsCrashGroupsTotalsRequest' is set
      if (analyticsCrashGroupsTotalsRequest === undefined || analyticsCrashGroupsTotalsRequest === null) {
        throw new Error("Missing the required parameter 'analyticsCrashGroupsTotalsRequest' when calling analyticsCrashGroupsTotals");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [AnalyticsCrashGroupsTotals200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsCreateOrUpdateAudience operation.
     * @callback module:api/AnalyticsApi~analyticsCreateOrUpdateAudienceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsGetAudience200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates audience definition.
     * @param {String} audienceName The name of the audience
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/AnalyticsTestAudienceRequest} analyticsTestAudienceRequest Audience definition
     * @param {module:api/AnalyticsApi~analyticsCreateOrUpdateAudienceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsGetAudience200Response}
     */
    analyticsCreateOrUpdateAudience(audienceName, ownerName, appName, analyticsTestAudienceRequest, callback) {
      let postBody = analyticsTestAudienceRequest;
      // verify the required parameter 'audienceName' is set
      if (audienceName === undefined || audienceName === null) {
        throw new Error("Missing the required parameter 'audienceName' when calling analyticsCreateOrUpdateAudience");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsCreateOrUpdateAudience");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsCreateOrUpdateAudience");
      }
      // verify the required parameter 'analyticsTestAudienceRequest' is set
      if (analyticsTestAudienceRequest === undefined || analyticsTestAudienceRequest === null) {
        throw new Error("Missing the required parameter 'analyticsTestAudienceRequest' when calling analyticsCreateOrUpdateAudience");
      }

      let pathParams = {
        'audience_name': audienceName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AnalyticsGetAudience200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsDeleteAudience operation.
     * @callback module:api/AnalyticsApi~analyticsDeleteAudienceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes audience definition.
     * @param {String} audienceName The name of the audience
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/AnalyticsApi~analyticsDeleteAudienceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    analyticsDeleteAudience(audienceName, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'audienceName' is set
      if (audienceName === undefined || audienceName === null) {
        throw new Error("Missing the required parameter 'audienceName' when calling analyticsDeleteAudience");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsDeleteAudience");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsDeleteAudience");
      }

      let pathParams = {
        'audience_name': audienceName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsDeviceCounts operation.
     * @callback module:api/AnalyticsApi~analyticsDeviceCountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsDeviceCounts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count of active devices by interval in the time range.
     * @param {Date} start Start date time in data in ISO 8601 date time format.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [end] Last date time in data in ISO 8601 date time format.
     * @param {Array.<String>} [versions] To select specific application versions
     * @param {String} [appBuild] Application build number. If build number is specified than multiple versions are not allowed.
     * @param {module:api/AnalyticsApi~analyticsDeviceCountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsDeviceCounts200Response}
     */
    analyticsDeviceCounts(start, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling analyticsDeviceCounts");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsDeviceCounts");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsDeviceCounts");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'start': start,
        'end': opts['end'],
        'versions': this.apiClient.buildCollectionParam(opts['versions'], 'pipes'),
        'app_build': opts['appBuild']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsDeviceCounts200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/active_device_counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsDistributionReleaseCounts operation.
     * @callback module:api/AnalyticsApi~analyticsDistributionReleaseCountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsDistributionReleaseCounts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count of total downloads for the provided distribution releases.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/AnalyticsDistributionReleaseCountsRequest} analyticsDistributionReleaseCountsRequest The releases to retrieve.
     * @param {module:api/AnalyticsApi~analyticsDistributionReleaseCountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsDistributionReleaseCounts200Response}
     */
    analyticsDistributionReleaseCounts(ownerName, appName, analyticsDistributionReleaseCountsRequest, callback) {
      let postBody = analyticsDistributionReleaseCountsRequest;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsDistributionReleaseCounts");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsDistributionReleaseCounts");
      }
      // verify the required parameter 'analyticsDistributionReleaseCountsRequest' is set
      if (analyticsDistributionReleaseCountsRequest === undefined || analyticsDistributionReleaseCountsRequest === null) {
        throw new Error("Missing the required parameter 'analyticsDistributionReleaseCountsRequest' when calling analyticsDistributionReleaseCounts");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AnalyticsDistributionReleaseCounts200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/distribution/release_counts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsEventCount operation.
     * @callback module:api/AnalyticsApi~analyticsEventCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsEventCount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count of events by interval in the time range.
     * @param {String} eventName The id of the event.
     * @param {Date} start Start date time in data in ISO 8601 date time format.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [end] Last date time in data in ISO 8601 date time format.
     * @param {Array.<String>} [versions] To select specific application versions
     * @param {module:api/AnalyticsApi~analyticsEventCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsEventCount200Response}
     */
    analyticsEventCount(eventName, start, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventName' is set
      if (eventName === undefined || eventName === null) {
        throw new Error("Missing the required parameter 'eventName' when calling analyticsEventCount");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling analyticsEventCount");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsEventCount");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsEventCount");
      }

      let pathParams = {
        'event_name': eventName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'start': start,
        'end': opts['end'],
        'versions': this.apiClient.buildCollectionParam(opts['versions'], 'pipes')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsEventCount200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/event_count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsEventDeviceCount operation.
     * @callback module:api/AnalyticsApi~analyticsEventDeviceCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsEventDeviceCount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count of devices for an event by interval in the time range.
     * @param {String} eventName The id of the event.
     * @param {Date} start Start date time in data in ISO 8601 date time format.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [end] Last date time in data in ISO 8601 date time format.
     * @param {Array.<String>} [versions] To select specific application versions
     * @param {module:api/AnalyticsApi~analyticsEventDeviceCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsEventDeviceCount200Response}
     */
    analyticsEventDeviceCount(eventName, start, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventName' is set
      if (eventName === undefined || eventName === null) {
        throw new Error("Missing the required parameter 'eventName' when calling analyticsEventDeviceCount");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling analyticsEventDeviceCount");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsEventDeviceCount");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsEventDeviceCount");
      }

      let pathParams = {
        'event_name': eventName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'start': start,
        'end': opts['end'],
        'versions': this.apiClient.buildCollectionParam(opts['versions'], 'pipes')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsEventDeviceCount200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/device_count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsEventPerDeviceCount operation.
     * @callback module:api/AnalyticsApi~analyticsEventPerDeviceCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsEventPerDeviceCount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count of events per device by interval in the time range.
     * @param {String} eventName The id of the event.
     * @param {Date} start Start date time in data in ISO 8601 date time format.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [end] Last date time in data in ISO 8601 date time format.
     * @param {Array.<String>} [versions] To select specific application versions
     * @param {module:api/AnalyticsApi~analyticsEventPerDeviceCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsEventPerDeviceCount200Response}
     */
    analyticsEventPerDeviceCount(eventName, start, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventName' is set
      if (eventName === undefined || eventName === null) {
        throw new Error("Missing the required parameter 'eventName' when calling analyticsEventPerDeviceCount");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling analyticsEventPerDeviceCount");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsEventPerDeviceCount");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsEventPerDeviceCount");
      }

      let pathParams = {
        'event_name': eventName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'start': start,
        'end': opts['end'],
        'versions': this.apiClient.buildCollectionParam(opts['versions'], 'pipes')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsEventPerDeviceCount200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_device', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsEventPerSessionCount operation.
     * @callback module:api/AnalyticsApi~analyticsEventPerSessionCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsEventPerSessionCount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count of events per session by interval in the time range.
     * @param {String} eventName The id of the event.
     * @param {Date} start Start date time in data in ISO 8601 date time format.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [end] Last date time in data in ISO 8601 date time format.
     * @param {Array.<String>} [versions] To select specific application versions
     * @param {module:api/AnalyticsApi~analyticsEventPerSessionCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsEventPerSessionCount200Response}
     */
    analyticsEventPerSessionCount(eventName, start, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventName' is set
      if (eventName === undefined || eventName === null) {
        throw new Error("Missing the required parameter 'eventName' when calling analyticsEventPerSessionCount");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling analyticsEventPerSessionCount");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsEventPerSessionCount");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsEventPerSessionCount");
      }

      let pathParams = {
        'event_name': eventName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'start': start,
        'end': opts['end'],
        'versions': this.apiClient.buildCollectionParam(opts['versions'], 'pipes')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsEventPerSessionCount200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_session', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsEventProperties operation.
     * @callback module:api/AnalyticsApi~analyticsEventPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsEventProperties200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Event properties.
     * @param {String} eventName The id of the event.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/AnalyticsApi~analyticsEventPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsEventProperties200Response}
     */
    analyticsEventProperties(eventName, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'eventName' is set
      if (eventName === undefined || eventName === null) {
        throw new Error("Missing the required parameter 'eventName' when calling analyticsEventProperties");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsEventProperties");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsEventProperties");
      }

      let pathParams = {
        'event_name': eventName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsEventProperties200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsEventPropertyCounts operation.
     * @callback module:api/AnalyticsApi~analyticsEventPropertyCountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsEventPropertyCounts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Event properties value counts during the time range in descending order.
     * @param {String} eventName The id of the event.
     * @param {String} eventPropertyName The id of the event property.
     * @param {Date} start Start date time in data in ISO 8601 date time format.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [end] Last date time in data in ISO 8601 date time format.
     * @param {Array.<String>} [versions] To select specific application versions
     * @param {Number} [top = 10)] The number of property values to return. Set to 0 in order to fetch all results available.
     * @param {module:api/AnalyticsApi~analyticsEventPropertyCountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsEventPropertyCounts200Response}
     */
    analyticsEventPropertyCounts(eventName, eventPropertyName, start, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventName' is set
      if (eventName === undefined || eventName === null) {
        throw new Error("Missing the required parameter 'eventName' when calling analyticsEventPropertyCounts");
      }
      // verify the required parameter 'eventPropertyName' is set
      if (eventPropertyName === undefined || eventPropertyName === null) {
        throw new Error("Missing the required parameter 'eventPropertyName' when calling analyticsEventPropertyCounts");
      }
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling analyticsEventPropertyCounts");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsEventPropertyCounts");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsEventPropertyCounts");
      }

      let pathParams = {
        'event_name': eventName,
        'event_property_name': eventPropertyName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'start': start,
        'end': opts['end'],
        'versions': this.apiClient.buildCollectionParam(opts['versions'], 'pipes'),
        '$top': opts['top']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsEventPropertyCounts200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties/{event_property_name}/counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsEvents operation.
     * @callback module:api/AnalyticsApi~analyticsEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsEvents200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count of active events in the time range ordered by event.
     * @param {Date} start Start date time in data in ISO 8601 date time format.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [end] Last date time in data in ISO 8601 date time format.
     * @param {Array.<String>} [versions] To select specific application versions
     * @param {Array.<String>} [eventName] To select the specific events.
     * @param {Number} [top = 30)] The maximum number of results to return. (0 will fetch all results)
     * @param {Number} [skip = 0)] The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.
     * @param {module:model/String} [inlinecount = 'none')] Controls whether or not to include a count of all the items across all pages.
     * @param {String} [orderby = 'count desc')] controls the sorting order and sorting based on which column
     * @param {module:api/AnalyticsApi~analyticsEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsEvents200Response}
     */
    analyticsEvents(start, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling analyticsEvents");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsEvents");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsEvents");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'start': start,
        'end': opts['end'],
        'versions': this.apiClient.buildCollectionParam(opts['versions'], 'pipes'),
        'event_name': this.apiClient.buildCollectionParam(opts['eventName'], 'pipes'),
        '$top': opts['top'],
        '$skip': opts['skip'],
        '$inlinecount': opts['inlinecount'],
        '$orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsEvents200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsEventsDelete operation.
     * @callback module:api/AnalyticsApi~analyticsEventsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the set of Events with the specified event names.
     * @param {String} eventName The id of the event.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/AnalyticsApi~analyticsEventsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    analyticsEventsDelete(eventName, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'eventName' is set
      if (eventName === undefined || eventName === null) {
        throw new Error("Missing the required parameter 'eventName' when calling analyticsEventsDelete");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsEventsDelete");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsEventsDelete");
      }

      let pathParams = {
        'event_name': eventName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsEventsDeleteLogs operation.
     * @callback module:api/AnalyticsApi~analyticsEventsDeleteLogsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the set of Events with the specified event names.
     * @param {String} eventName The id of the event.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/AnalyticsApi~analyticsEventsDeleteLogsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    analyticsEventsDeleteLogs(eventName, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'eventName' is set
      if (eventName === undefined || eventName === null) {
        throw new Error("Missing the required parameter 'eventName' when calling analyticsEventsDeleteLogs");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsEventsDeleteLogs");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsEventsDeleteLogs");
      }

      let pathParams = {
        'event_name': eventName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/event_logs/{event_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsGenericLogFlow operation.
     * @callback module:api/AnalyticsApi~analyticsGenericLogFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsGenericLogFlow200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [start] Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.
     * @param {module:api/AnalyticsApi~analyticsGenericLogFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsGenericLogFlow200Response}
     */
    analyticsGenericLogFlow(ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsGenericLogFlow");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsGenericLogFlow");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'start': opts['start']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsGenericLogFlow200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/generic_log_flow', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsGetAudience operation.
     * @callback module:api/AnalyticsApi~analyticsGetAudienceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsGetAudience200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets audience definition.
     * @param {String} audienceName The name of the audience
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/AnalyticsApi~analyticsGetAudienceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsGetAudience200Response}
     */
    analyticsGetAudience(audienceName, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'audienceName' is set
      if (audienceName === undefined || audienceName === null) {
        throw new Error("Missing the required parameter 'audienceName' when calling analyticsGetAudience");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsGetAudience");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsGetAudience");
      }

      let pathParams = {
        'audience_name': audienceName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsGetAudience200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsLanguageCounts operation.
     * @callback module:api/AnalyticsApi~analyticsLanguageCountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsLanguageCounts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Languages in the time range.
     * @param {Date} start Start date time in data in ISO 8601 date time format.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [end] Last date time in data in ISO 8601 date time format.
     * @param {Number} [top = 30)] The maximum number of results to return. (0 will fetch all results)
     * @param {Array.<String>} [versions] To select specific application versions
     * @param {module:api/AnalyticsApi~analyticsLanguageCountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsLanguageCounts200Response}
     */
    analyticsLanguageCounts(start, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling analyticsLanguageCounts");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsLanguageCounts");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsLanguageCounts");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'start': start,
        'end': opts['end'],
        '$top': opts['top'],
        'versions': this.apiClient.buildCollectionParam(opts['versions'], 'pipes')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsLanguageCounts200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/languages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsListAudiences operation.
     * @callback module:api/AnalyticsApi~analyticsListAudiencesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsListAudiences200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of audiences.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeDisabled] Include disabled audience definitions
     * @param {module:api/AnalyticsApi~analyticsListAudiencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsListAudiences200Response}
     */
    analyticsListAudiences(ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsListAudiences");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsListAudiences");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'include_disabled': opts['includeDisabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsListAudiences200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsListCustomProperties operation.
     * @callback module:api/AnalyticsApi~analyticsListCustomPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsListCustomProperties200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of custom properties.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/AnalyticsApi~analyticsListCustomPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsListCustomProperties200Response}
     */
    analyticsListCustomProperties(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsListCustomProperties");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsListCustomProperties");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsListCustomProperties200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/custom_properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsListDeviceProperties operation.
     * @callback module:api/AnalyticsApi~analyticsListDevicePropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsListCustomProperties200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of device properties.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/AnalyticsApi~analyticsListDevicePropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsListCustomProperties200Response}
     */
    analyticsListDeviceProperties(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsListDeviceProperties");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsListDeviceProperties");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsListCustomProperties200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsListDevicePropertyValues operation.
     * @callback module:api/AnalyticsApi~analyticsListDevicePropertyValuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsListDevicePropertyValues200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of device property values.
     * @param {String} propertyName Device property
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {String} [contains] Contains string
     * @param {module:api/AnalyticsApi~analyticsListDevicePropertyValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsListDevicePropertyValues200Response}
     */
    analyticsListDevicePropertyValues(propertyName, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'propertyName' is set
      if (propertyName === undefined || propertyName === null) {
        throw new Error("Missing the required parameter 'propertyName' when calling analyticsListDevicePropertyValues");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsListDevicePropertyValues");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsListDevicePropertyValues");
      }

      let pathParams = {
        'property_name': propertyName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'contains': opts['contains']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsListDevicePropertyValues200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties/{property_name}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsLogFlow operation.
     * @callback module:api/AnalyticsApi~analyticsLogFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsLogFlow200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [start] Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.
     * @param {module:api/AnalyticsApi~analyticsLogFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsLogFlow200Response}
     */
    analyticsLogFlow(ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsLogFlow");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsLogFlow");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'start': opts['start']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsLogFlow200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/log_flow', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsModelCounts operation.
     * @callback module:api/AnalyticsApi~analyticsModelCountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsModelCounts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Models in the time range.
     * @param {Date} start Start date time in data in ISO 8601 date time format.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [end] Last date time in data in ISO 8601 date time format.
     * @param {Number} [top = 30)] The maximum number of results to return. (0 will fetch all results)
     * @param {Array.<String>} [versions] To select specific application versions
     * @param {module:api/AnalyticsApi~analyticsModelCountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsModelCounts200Response}
     */
    analyticsModelCounts(start, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling analyticsModelCounts");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsModelCounts");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsModelCounts");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'start': start,
        'end': opts['end'],
        '$top': opts['top'],
        'versions': this.apiClient.buildCollectionParam(opts['versions'], 'pipes')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsModelCounts200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsOperatingSystemCounts operation.
     * @callback module:api/AnalyticsApi~analyticsOperatingSystemCountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsOperatingSystemCounts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * OSes in the time range.
     * @param {Date} start Start date time in data in ISO 8601 date time format.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [end] Last date time in data in ISO 8601 date time format.
     * @param {Number} [top = 30)] The maximum number of results to return. (0 will fetch all results)
     * @param {Array.<String>} [versions] To select specific application versions
     * @param {module:api/AnalyticsApi~analyticsOperatingSystemCountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsOperatingSystemCounts200Response}
     */
    analyticsOperatingSystemCounts(start, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling analyticsOperatingSystemCounts");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsOperatingSystemCounts");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsOperatingSystemCounts");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'start': start,
        'end': opts['end'],
        '$top': opts['top'],
        'versions': this.apiClient.buildCollectionParam(opts['versions'], 'pipes')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsOperatingSystemCounts200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/oses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsPerDeviceCounts operation.
     * @callback module:api/AnalyticsApi~analyticsPerDeviceCountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsPerDeviceCounts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count of sessions per device in the time range.
     * @param {Date} start Start date time in data in ISO 8601 date time format.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [end] Last date time in data in ISO 8601 date time format.
     * @param {Array.<String>} [versions] To select specific application versions
     * @param {module:api/AnalyticsApi~analyticsPerDeviceCountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsPerDeviceCounts200Response}
     */
    analyticsPerDeviceCounts(start, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling analyticsPerDeviceCounts");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsPerDeviceCounts");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsPerDeviceCounts");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'start': start,
        'end': opts['end'],
        'versions': this.apiClient.buildCollectionParam(opts['versions'], 'pipes')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsPerDeviceCounts200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/sessions_per_device', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsPlaceCounts operation.
     * @callback module:api/AnalyticsApi~analyticsPlaceCountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsPlaceCounts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Places in the time range.
     * @param {Date} start Start date time in data in ISO 8601 date time format.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [end] Last date time in data in ISO 8601 date time format.
     * @param {Number} [top = 30)] The maximum number of results to return. (0 will fetch all results)
     * @param {Array.<String>} [versions] To select specific application versions
     * @param {module:api/AnalyticsApi~analyticsPlaceCountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsPlaceCounts200Response}
     */
    analyticsPlaceCounts(start, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling analyticsPlaceCounts");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsPlaceCounts");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsPlaceCounts");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'start': start,
        'end': opts['end'],
        '$top': opts['top'],
        'versions': this.apiClient.buildCollectionParam(opts['versions'], 'pipes')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsPlaceCounts200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/places', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsSessionCounts operation.
     * @callback module:api/AnalyticsApi~analyticsSessionCountsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AnalyticsDeviceCounts200ResponseDailyInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count of sessions in the time range.
     * @param {Date} start Start date time in data in ISO 8601 date time format.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [end] Last date time in data in ISO 8601 date time format.
     * @param {Array.<String>} [versions] To select specific application versions
     * @param {module:api/AnalyticsApi~analyticsSessionCountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AnalyticsDeviceCounts200ResponseDailyInner>}
     */
    analyticsSessionCounts(start, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling analyticsSessionCounts");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsSessionCounts");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsSessionCounts");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'start': start,
        'end': opts['end'],
        'versions': this.apiClient.buildCollectionParam(opts['versions'], 'pipes')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AnalyticsDeviceCounts200ResponseDailyInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/session_counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsSessionDurationsDistribution operation.
     * @callback module:api/AnalyticsApi~analyticsSessionDurationsDistributionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsSessionDurationsDistribution200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets session duration.
     * @param {Date} start Start date time in data in ISO 8601 date time format.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [end] Last date time in data in ISO 8601 date time format.
     * @param {Array.<String>} [versions] To select specific application versions
     * @param {module:api/AnalyticsApi~analyticsSessionDurationsDistributionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsSessionDurationsDistribution200Response}
     */
    analyticsSessionDurationsDistribution(start, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling analyticsSessionDurationsDistribution");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsSessionDurationsDistribution");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsSessionDurationsDistribution");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'start': start,
        'end': opts['end'],
        'versions': this.apiClient.buildCollectionParam(opts['versions'], 'pipes')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsSessionDurationsDistribution200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/session_durations_distribution', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsTestAudience operation.
     * @callback module:api/AnalyticsApi~analyticsTestAudienceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsTestAudience200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tests audience definition.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/AnalyticsTestAudienceRequest} analyticsTestAudienceRequest Audience definition
     * @param {module:api/AnalyticsApi~analyticsTestAudienceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsTestAudience200Response}
     */
    analyticsTestAudience(ownerName, appName, analyticsTestAudienceRequest, callback) {
      let postBody = analyticsTestAudienceRequest;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsTestAudience");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsTestAudience");
      }
      // verify the required parameter 'analyticsTestAudienceRequest' is set
      if (analyticsTestAudienceRequest === undefined || analyticsTestAudienceRequest === null) {
        throw new Error("Missing the required parameter 'analyticsTestAudienceRequest' when calling analyticsTestAudience");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AnalyticsTestAudience200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/definition/test', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsVersions operation.
     * @callback module:api/AnalyticsApi~analyticsVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsVersions200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count of active versions in the time range ordered by version.
     * @param {Date} start Start date time in data in ISO 8601 date time format.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [end] Last date time in data in ISO 8601 date time format.
     * @param {Number} [top = 30)] The maximum number of results to return. (0 will fetch all results)
     * @param {Array.<String>} [versions] To select specific application versions
     * @param {module:api/AnalyticsApi~analyticsVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsVersions200Response}
     */
    analyticsVersions(start, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling analyticsVersions");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling analyticsVersions");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling analyticsVersions");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'start': start,
        'end': opts['end'],
        '$top': opts['top'],
        'versions': this.apiClient.buildCollectionParam(opts['versions'], 'pipes')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsVersions200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/analytics/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appBlockLogs operation.
     * @callback module:api/AnalyticsApi~appBlockLogsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK by app_id, and cannot be restored. We advise caution when using this API, it is designed to permanently disable an app_id. 
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/AnalyticsApi~appBlockLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    appBlockLogs(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling appBlockLogs");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling appBlockLogs");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/devices/block_logs', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the crashesListSessionLogs operation.
     * @callback module:api/AnalyticsApi~crashesListSessionLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CrashesListSessionLogs200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get session logs by crash ID
     * @param {String} crashId The id of the a crash
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [date] Date of data requested
     * @param {module:api/AnalyticsApi~crashesListSessionLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CrashesListSessionLogs200Response}
     */
    crashesListSessionLogs(crashId, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'crashId' is set
      if (crashId === undefined || crashId === null) {
        throw new Error("Missing the required parameter 'crashId' when calling crashesListSessionLogs");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling crashesListSessionLogs");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling crashesListSessionLogs");
      }

      let pathParams = {
        'crash_id': crashId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'date': opts['date']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CrashesListSessionLogs200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/session_logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesBlockLogs operation.
     * @callback module:api/AnalyticsApi~devicesBlockLogsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK for the given installation ID, and cannot be restored. We advise caution when using this API, it is designed to permanently disable collection from a specific installation of the app on a device, usually following the request from a user. 
     * @param {String} installId The id of the device
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/AnalyticsApi~devicesBlockLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    devicesBlockLogs(installId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'installId' is set
      if (installId === undefined || installId === null) {
        throw new Error("Missing the required parameter 'installId' when calling devicesBlockLogs");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling devicesBlockLogs");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling devicesBlockLogs");
      }

      let pathParams = {
        'install_id': installId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/devices/block_logs/{install_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
