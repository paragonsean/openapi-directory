/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BranchConfigurationsDelete200Response from '../model/BranchConfigurationsDelete200Response';
import Crash from '../model/Crash';
import CrashGroupsList200Response from '../model/CrashGroupsList200Response';
import CrashGroupsList200ResponseCrashGroupsInner from '../model/CrashGroupsList200ResponseCrashGroupsInner';
import CrashGroupsUpdateRequest from '../model/CrashGroupsUpdateRequest';
import CrashesDelete200Response from '../model/CrashesDelete200Response';
import CrashesGetAppCrashesInfo200Response from '../model/CrashesGetAppCrashesInfo200Response';
import CrashesGetAppVersions200ResponseInner from '../model/CrashesGetAppVersions200ResponseInner';
import CrashesGetCrashAttachmentLocation200Response from '../model/CrashesGetCrashAttachmentLocation200Response';
import CrashesGetRawCrashLocation200Response from '../model/CrashesGetRawCrashLocation200Response';
import CrashesListAttachments200ResponseInner from '../model/CrashesListAttachments200ResponseInner';
import MissingSymbolGroupsInfo200Response from '../model/MissingSymbolGroupsInfo200Response';
import MissingSymbolGroupsList200Response from '../model/MissingSymbolGroupsList200Response';
import MissingSymbolGroupsListDefaultResponse from '../model/MissingSymbolGroupsListDefaultResponse';
import Stacktrace from '../model/Stacktrace';
import SymbolUploadsCompleteRequest from '../model/SymbolUploadsCompleteRequest';
import SymbolUploadsCreate200Response from '../model/SymbolUploadsCreate200Response';
import SymbolUploadsCreateRequest from '../model/SymbolUploadsCreateRequest';
import SymbolUploadsGetLocation200Response from '../model/SymbolUploadsGetLocation200Response';
import SymbolUploadsList200ResponseInner from '../model/SymbolUploadsList200ResponseInner';
import SymbolsGetLocation200Response from '../model/SymbolsGetLocation200Response';
import SymbolsGetStatus200Response from '../model/SymbolsGetStatus200Response';
import SymbolsList200ResponseInner from '../model/SymbolsList200ResponseInner';

/**
* Crash service.
* @module api/CrashApi
* @version v0.1
*/
export default class CrashApi {

    /**
    * Constructs a new CrashApi. 
    * @alias module:api/CrashApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the crashGroupsGet operation.
     * @callback module:api/CrashApi~crashGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CrashGroupsList200ResponseCrashGroupsInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a specific group.
     * @param {String} crashGroupId id of a specific group
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/CrashApi~crashGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CrashGroupsList200ResponseCrashGroupsInner}
     */
    crashGroupsGet(crashGroupId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'crashGroupId' is set
      if (crashGroupId === undefined || crashGroupId === null) {
        throw new Error("Missing the required parameter 'crashGroupId' when calling crashGroupsGet");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling crashGroupsGet");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling crashGroupsGet");
      }

      let pathParams = {
        'crash_group_id': crashGroupId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CrashGroupsList200ResponseCrashGroupsInner;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the crashGroupsGetStacktrace operation.
     * @callback module:api/CrashApi~crashGroupsGetStacktraceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stacktrace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a stacktrace for a specific crash.
     * @param {String} crashGroupId id of a specific group
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Boolean} [groupingOnly = false)] true if the stacktrace should be only the relevant thread / exception. Default is false
     * @param {module:api/CrashApi~crashGroupsGetStacktraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Stacktrace}
     */
    crashGroupsGetStacktrace(crashGroupId, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'crashGroupId' is set
      if (crashGroupId === undefined || crashGroupId === null) {
        throw new Error("Missing the required parameter 'crashGroupId' when calling crashGroupsGetStacktrace");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling crashGroupsGetStacktrace");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling crashGroupsGetStacktrace");
      }

      let pathParams = {
        'crash_group_id': crashGroupId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'grouping_only': opts['groupingOnly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Stacktrace;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/stacktrace', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the crashGroupsList operation.
     * @callback module:api/CrashApi~crashGroupsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CrashGroupsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of crash groups and whether the list contains all available groups.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Date} [lastOccurrenceFrom] Earliest date when the last time a crash occured in a crash group
     * @param {Date} [lastOccurrenceTo] Latest date when the last time a crash occured in a crash group
     * @param {String} [appVersion] version
     * @param {module:model/String} [groupType] 
     * @param {module:model/String} [groupStatus] 
     * @param {String} [groupTextSearch] A freetext search that matches in crash, crash types, crash stack_traces and crash user
     * @param {module:model/String} [orderby = 'last_occurrence desc')] the OData-like $orderby argument
     * @param {String} [continuationToken] Cassandra request continuation token. The token is used for pagination.
     * @param {module:api/CrashApi~crashGroupsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CrashGroupsList200Response}
     */
    crashGroupsList(ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling crashGroupsList");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling crashGroupsList");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'last_occurrence_from': opts['lastOccurrenceFrom'],
        'last_occurrence_to': opts['lastOccurrenceTo'],
        'app_version': opts['appVersion'],
        'group_type': opts['groupType'],
        'group_status': opts['groupStatus'],
        'group_text_search': opts['groupTextSearch'],
        '$orderby': opts['orderby'],
        'continuation_token': opts['continuationToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CrashGroupsList200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/crash_groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the crashGroupsUpdate operation.
     * @callback module:api/CrashApi~crashGroupsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CrashGroupsList200ResponseCrashGroupsInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a group.
     * @param {String} crashGroupId id of a specific group
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/CrashGroupsUpdateRequest} crashGroupsUpdateRequest Group change object. All fields are optional and only provided fields will get updated.
     * @param {module:api/CrashApi~crashGroupsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CrashGroupsList200ResponseCrashGroupsInner}
     */
    crashGroupsUpdate(crashGroupId, ownerName, appName, crashGroupsUpdateRequest, callback) {
      let postBody = crashGroupsUpdateRequest;
      // verify the required parameter 'crashGroupId' is set
      if (crashGroupId === undefined || crashGroupId === null) {
        throw new Error("Missing the required parameter 'crashGroupId' when calling crashGroupsUpdate");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling crashGroupsUpdate");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling crashGroupsUpdate");
      }
      // verify the required parameter 'crashGroupsUpdateRequest' is set
      if (crashGroupsUpdateRequest === undefined || crashGroupsUpdateRequest === null) {
        throw new Error("Missing the required parameter 'crashGroupsUpdateRequest' when calling crashGroupsUpdate");
      }

      let pathParams = {
        'crash_group_id': crashGroupId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CrashGroupsList200ResponseCrashGroupsInner;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the crashesDelete operation.
     * @callback module:api/CrashApi~crashesDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CrashesDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific crash and related attachments and blobs for an app.
     * @param {String} crashGroupId id of a specific group
     * @param {String} crashId id of a specific crash
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Boolean} [retentionDelete = false)] true in that case if the method should skip update counts
     * @param {module:api/CrashApi~crashesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CrashesDelete200Response}
     */
    crashesDelete(crashGroupId, crashId, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'crashGroupId' is set
      if (crashGroupId === undefined || crashGroupId === null) {
        throw new Error("Missing the required parameter 'crashGroupId' when calling crashesDelete");
      }
      // verify the required parameter 'crashId' is set
      if (crashId === undefined || crashId === null) {
        throw new Error("Missing the required parameter 'crashId' when calling crashesDelete");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling crashesDelete");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling crashesDelete");
      }

      let pathParams = {
        'crash_group_id': crashGroupId,
        'crash_id': crashId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'retention_delete': opts['retentionDelete']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CrashesDelete200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the crashesGet operation.
     * @callback module:api/CrashApi~crashesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Crash} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a specific crash for an app.
     * @param {String} crashGroupId id of a specific group
     * @param {String} crashId id of a specific crash
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeReport = false)] true if the crash should include the raw crash report. Default is false
     * @param {Boolean} [includeLog = false)] true if the crash should include the custom log report. Default is false
     * @param {Boolean} [includeDetails = false)] true if the crash should include in depth crash details
     * @param {Boolean} [includeStacktrace = false)] true if the crash should include the stacktrace information
     * @param {Boolean} [groupingOnly = false)] true if the stacktrace should be only the relevant thread / exception. Default is false
     * @param {module:api/CrashApi~crashesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Crash}
     */
    crashesGet(crashGroupId, crashId, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'crashGroupId' is set
      if (crashGroupId === undefined || crashGroupId === null) {
        throw new Error("Missing the required parameter 'crashGroupId' when calling crashesGet");
      }
      // verify the required parameter 'crashId' is set
      if (crashId === undefined || crashId === null) {
        throw new Error("Missing the required parameter 'crashId' when calling crashesGet");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling crashesGet");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling crashesGet");
      }

      let pathParams = {
        'crash_group_id': crashGroupId,
        'crash_id': crashId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'include_report': opts['includeReport'],
        'include_log': opts['includeLog'],
        'include_details': opts['includeDetails'],
        'include_stacktrace': opts['includeStacktrace'],
        'grouping_only': opts['groupingOnly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Crash;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the crashesGetAppCrashesInfo operation.
     * @callback module:api/CrashApi~crashesGetAppCrashesInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CrashesGetAppCrashesInfo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets whether the application has any crashes.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/CrashApi~crashesGetAppCrashesInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CrashesGetAppCrashesInfo200Response}
     */
    crashesGetAppCrashesInfo(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling crashesGetAppCrashesInfo");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling crashesGetAppCrashesInfo");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CrashesGetAppCrashesInfo200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/crashes_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the crashesGetAppVersions operation.
     * @callback module:api/CrashApi~crashesGetAppVersionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CrashesGetAppVersions200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of application versions.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/CrashApi~crashesGetAppVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CrashesGetAppVersions200ResponseInner>}
     */
    crashesGetAppVersions(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling crashesGetAppVersions");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling crashesGetAppVersions");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CrashesGetAppVersions200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the crashesGetCrashAttachmentLocation operation.
     * @callback module:api/CrashApi~crashesGetCrashAttachmentLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CrashesGetCrashAttachmentLocation200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the URI location to download crash attachment.
     * @param {String} crashId id of a specific crash
     * @param {String} attachmentId attachment id
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/CrashApi~crashesGetCrashAttachmentLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CrashesGetCrashAttachmentLocation200Response}
     */
    crashesGetCrashAttachmentLocation(crashId, attachmentId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'crashId' is set
      if (crashId === undefined || crashId === null) {
        throw new Error("Missing the required parameter 'crashId' when calling crashesGetCrashAttachmentLocation");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling crashesGetCrashAttachmentLocation");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling crashesGetCrashAttachmentLocation");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling crashesGetCrashAttachmentLocation");
      }

      let pathParams = {
        'crash_id': crashId,
        'attachment_id': attachmentId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CrashesGetCrashAttachmentLocation200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/location', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the crashesGetCrashTextAttachmentContent operation.
     * @callback module:api/CrashApi~crashesGetCrashTextAttachmentContentCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets content of the text attachment.
     * @param {String} crashId id of a specific crash
     * @param {String} attachmentId attachment id
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/CrashApi~crashesGetCrashTextAttachmentContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    crashesGetCrashTextAttachmentContent(crashId, attachmentId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'crashId' is set
      if (crashId === undefined || crashId === null) {
        throw new Error("Missing the required parameter 'crashId' when calling crashesGetCrashTextAttachmentContent");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling crashesGetCrashTextAttachmentContent");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling crashesGetCrashTextAttachmentContent");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling crashesGetCrashTextAttachmentContent");
      }

      let pathParams = {
        'crash_id': crashId,
        'attachment_id': attachmentId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/text', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the crashesGetNativeCrash operation.
     * @callback module:api/CrashApi~crashesGetNativeCrashCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the native log of a specific crash.
     * @param {String} crashGroupId id of a specific group
     * @param {String} crashId id of a specific crash
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/CrashApi~crashesGetNativeCrashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    crashesGetNativeCrash(crashGroupId, crashId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'crashGroupId' is set
      if (crashGroupId === undefined || crashGroupId === null) {
        throw new Error("Missing the required parameter 'crashGroupId' when calling crashesGetNativeCrash");
      }
      // verify the required parameter 'crashId' is set
      if (crashId === undefined || crashId === null) {
        throw new Error("Missing the required parameter 'crashId' when calling crashesGetNativeCrash");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling crashesGetNativeCrash");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling crashesGetNativeCrash");
      }

      let pathParams = {
        'crash_group_id': crashGroupId,
        'crash_id': crashId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the crashesGetNativeCrashDownload operation.
     * @callback module:api/CrashApi~crashesGetNativeCrashDownloadCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the native log of a specific crash as a text attachment.
     * @param {String} crashGroupId id of a specific group
     * @param {String} crashId id of a specific crash
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/CrashApi~crashesGetNativeCrashDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    crashesGetNativeCrashDownload(crashGroupId, crashId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'crashGroupId' is set
      if (crashGroupId === undefined || crashGroupId === null) {
        throw new Error("Missing the required parameter 'crashGroupId' when calling crashesGetNativeCrashDownload");
      }
      // verify the required parameter 'crashId' is set
      if (crashId === undefined || crashId === null) {
        throw new Error("Missing the required parameter 'crashId' when calling crashesGetNativeCrashDownload");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling crashesGetNativeCrashDownload");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling crashesGetNativeCrashDownload");
      }

      let pathParams = {
        'crash_group_id': crashGroupId,
        'crash_id': crashId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the crashesGetRawCrashLocation operation.
     * @callback module:api/CrashApi~crashesGetRawCrashLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CrashesGetRawCrashLocation200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the URI location to download json of a specific crash.
     * @param {String} crashGroupId id of a specific group
     * @param {String} crashId id of a specific crash
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/CrashApi~crashesGetRawCrashLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CrashesGetRawCrashLocation200Response}
     */
    crashesGetRawCrashLocation(crashGroupId, crashId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'crashGroupId' is set
      if (crashGroupId === undefined || crashGroupId === null) {
        throw new Error("Missing the required parameter 'crashGroupId' when calling crashesGetRawCrashLocation");
      }
      // verify the required parameter 'crashId' is set
      if (crashId === undefined || crashId === null) {
        throw new Error("Missing the required parameter 'crashId' when calling crashesGetRawCrashLocation");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling crashesGetRawCrashLocation");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling crashesGetRawCrashLocation");
      }

      let pathParams = {
        'crash_group_id': crashGroupId,
        'crash_id': crashId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CrashesGetRawCrashLocation200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/raw/location', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the crashesGetStacktrace operation.
     * @callback module:api/CrashApi~crashesGetStacktraceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stacktrace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a stacktrace for a specific crash.
     * @param {String} crashGroupId id of a specific group
     * @param {String} crashId id of a specific crash
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Boolean} [groupingOnly = false)] true if the stacktrace should be only the relevant thread / exception. Default is false
     * @param {module:api/CrashApi~crashesGetStacktraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Stacktrace}
     */
    crashesGetStacktrace(crashGroupId, crashId, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'crashGroupId' is set
      if (crashGroupId === undefined || crashGroupId === null) {
        throw new Error("Missing the required parameter 'crashGroupId' when calling crashesGetStacktrace");
      }
      // verify the required parameter 'crashId' is set
      if (crashId === undefined || crashId === null) {
        throw new Error("Missing the required parameter 'crashId' when calling crashesGetStacktrace");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling crashesGetStacktrace");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling crashesGetStacktrace");
      }

      let pathParams = {
        'crash_group_id': crashGroupId,
        'crash_id': crashId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'grouping_only': opts['groupingOnly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Stacktrace;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/stacktrace', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the crashesList operation.
     * @callback module:api/CrashApi~crashesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Crash>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all crashes of a group.
     * @param {String} crashGroupId id of a specific group
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeReport = false)] true if the crash should include the raw crash report. Default is false
     * @param {Boolean} [includeLog = false)] true if the crash should include the custom log report. Default is false
     * @param {Date} [dateFrom] 
     * @param {Date} [dateTo] 
     * @param {String} [appVersion] version
     * @param {module:model/String} [errorType] 
     * @param {module:api/CrashApi~crashesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Crash>}
     */
    crashesList(crashGroupId, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'crashGroupId' is set
      if (crashGroupId === undefined || crashGroupId === null) {
        throw new Error("Missing the required parameter 'crashGroupId' when calling crashesList");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling crashesList");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling crashesList");
      }

      let pathParams = {
        'crash_group_id': crashGroupId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'include_report': opts['includeReport'],
        'include_log': opts['includeLog'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'app_version': opts['appVersion'],
        'error_type': opts['errorType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Crash];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the crashesListAttachments operation.
     * @callback module:api/CrashApi~crashesListAttachmentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CrashesListAttachments200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all attachments for a specific crash.
     * @param {String} crashId id of a specific crash
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/CrashApi~crashesListAttachmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CrashesListAttachments200ResponseInner>}
     */
    crashesListAttachments(crashId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'crashId' is set
      if (crashId === undefined || crashId === null) {
        throw new Error("Missing the required parameter 'crashId' when calling crashesListAttachments");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling crashesListAttachments");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling crashesListAttachments");
      }

      let pathParams = {
        'crash_id': crashId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CrashesListAttachments200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the missingSymbolGroupsGet operation.
     * @callback module:api/CrashApi~missingSymbolGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MissingSymbolGroupsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets missing symbol crash group by its id
     * Gets missing symbol crash group by its id
     * @param {String} symbolGroupId missing symbol crash group id
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/CrashApi~missingSymbolGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MissingSymbolGroupsList200Response}
     */
    missingSymbolGroupsGet(symbolGroupId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'symbolGroupId' is set
      if (symbolGroupId === undefined || symbolGroupId === null) {
        throw new Error("Missing the required parameter 'symbolGroupId' when calling missingSymbolGroupsGet");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling missingSymbolGroupsGet");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling missingSymbolGroupsGet");
      }

      let pathParams = {
        'symbol_group_id': symbolGroupId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MissingSymbolGroupsList200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups/{symbol_group_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the missingSymbolGroupsInfo operation.
     * @callback module:api/CrashApi~missingSymbolGroupsInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MissingSymbolGroupsInfo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets application level statistics for all missing symbol groups
     * Gets application level statistics for all missing symbol groups
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/CrashApi~missingSymbolGroupsInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MissingSymbolGroupsInfo200Response}
     */
    missingSymbolGroupsInfo(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling missingSymbolGroupsInfo");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling missingSymbolGroupsInfo");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MissingSymbolGroupsInfo200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the missingSymbolGroupsList operation.
     * @callback module:api/CrashApi~missingSymbolGroupsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MissingSymbolGroupsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets top N (ordered by crash count) of crash groups by missing symbol
     * Gets top N (ordered by crash count) of crash groups by missing symbol
     * @param {Number} top top N elements
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/CrashApi~missingSymbolGroupsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MissingSymbolGroupsList200Response}
     */
    missingSymbolGroupsList(top, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'top' is set
      if (top === undefined || top === null) {
        throw new Error("Missing the required parameter 'top' when calling missingSymbolGroupsList");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling missingSymbolGroupsList");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling missingSymbolGroupsList");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'top': top
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MissingSymbolGroupsList200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the symbolUploadsComplete operation.
     * @callback module:api/CrashApi~symbolUploadsCompleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SymbolUploadsList200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Commits or aborts the symbol upload process for a new set of symbols for the specified application
     * @param {String} symbolUploadId The ID of the symbol upload
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/SymbolUploadsCompleteRequest} symbolUploadsCompleteRequest The symbol information
     * @param {module:api/CrashApi~symbolUploadsCompleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SymbolUploadsList200ResponseInner}
     */
    symbolUploadsComplete(symbolUploadId, ownerName, appName, symbolUploadsCompleteRequest, callback) {
      let postBody = symbolUploadsCompleteRequest;
      // verify the required parameter 'symbolUploadId' is set
      if (symbolUploadId === undefined || symbolUploadId === null) {
        throw new Error("Missing the required parameter 'symbolUploadId' when calling symbolUploadsComplete");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling symbolUploadsComplete");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling symbolUploadsComplete");
      }
      // verify the required parameter 'symbolUploadsCompleteRequest' is set
      if (symbolUploadsCompleteRequest === undefined || symbolUploadsCompleteRequest === null) {
        throw new Error("Missing the required parameter 'symbolUploadsCompleteRequest' when calling symbolUploadsComplete");
      }

      let pathParams = {
        'symbol_upload_id': symbolUploadId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SymbolUploadsList200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the symbolUploadsCreate operation.
     * @callback module:api/CrashApi~symbolUploadsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SymbolUploadsCreate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Begins the symbol upload process for a new set of symbols for the specified application
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/SymbolUploadsCreateRequest} symbolUploadsCreateRequest The symbol information
     * @param {module:api/CrashApi~symbolUploadsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SymbolUploadsCreate200Response}
     */
    symbolUploadsCreate(ownerName, appName, symbolUploadsCreateRequest, callback) {
      let postBody = symbolUploadsCreateRequest;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling symbolUploadsCreate");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling symbolUploadsCreate");
      }
      // verify the required parameter 'symbolUploadsCreateRequest' is set
      if (symbolUploadsCreateRequest === undefined || symbolUploadsCreateRequest === null) {
        throw new Error("Missing the required parameter 'symbolUploadsCreateRequest' when calling symbolUploadsCreate");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SymbolUploadsCreate200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the symbolUploadsDelete operation.
     * @callback module:api/CrashApi~symbolUploadsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SymbolUploadsList200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a symbol upload by id for the specified application
     * @param {String} symbolUploadId The ID of the symbol upload
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/CrashApi~symbolUploadsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SymbolUploadsList200ResponseInner}
     */
    symbolUploadsDelete(symbolUploadId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'symbolUploadId' is set
      if (symbolUploadId === undefined || symbolUploadId === null) {
        throw new Error("Missing the required parameter 'symbolUploadId' when calling symbolUploadsDelete");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling symbolUploadsDelete");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling symbolUploadsDelete");
      }

      let pathParams = {
        'symbol_upload_id': symbolUploadId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SymbolUploadsList200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the symbolUploadsGet operation.
     * @callback module:api/CrashApi~symbolUploadsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SymbolUploadsList200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a symbol upload by id for the specified application
     * @param {String} symbolUploadId The ID of the symbol upload
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/CrashApi~symbolUploadsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SymbolUploadsList200ResponseInner}
     */
    symbolUploadsGet(symbolUploadId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'symbolUploadId' is set
      if (symbolUploadId === undefined || symbolUploadId === null) {
        throw new Error("Missing the required parameter 'symbolUploadId' when calling symbolUploadsGet");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling symbolUploadsGet");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling symbolUploadsGet");
      }

      let pathParams = {
        'symbol_upload_id': symbolUploadId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SymbolUploadsList200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the symbolUploadsGetLocation operation.
     * @callback module:api/CrashApi~symbolUploadsGetLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SymbolUploadsGetLocation200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the URL to download the symbol upload
     * @param {String} symbolUploadId The ID of the symbol upload
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/CrashApi~symbolUploadsGetLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SymbolUploadsGetLocation200Response}
     */
    symbolUploadsGetLocation(symbolUploadId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'symbolUploadId' is set
      if (symbolUploadId === undefined || symbolUploadId === null) {
        throw new Error("Missing the required parameter 'symbolUploadId' when calling symbolUploadsGetLocation");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling symbolUploadsGetLocation");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling symbolUploadsGetLocation");
      }

      let pathParams = {
        'symbol_upload_id': symbolUploadId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SymbolUploadsGetLocation200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}/location', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the symbolUploadsList operation.
     * @callback module:api/CrashApi~symbolUploadsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SymbolUploadsList200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all uploads for the specified application
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Number} [top = 30)] The maximum number of results to return.
     * @param {module:model/String} [status] Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states. 
     * @param {module:model/String} [symbolType] The type of symbols
     * @param {module:api/CrashApi~symbolUploadsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SymbolUploadsList200ResponseInner>}
     */
    symbolUploadsList(ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling symbolUploadsList");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling symbolUploadsList");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'top': opts['top'],
        'status': opts['status'],
        'symbol_type': opts['symbolType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SymbolUploadsList200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the symbolsGet operation.
     * @callback module:api/CrashApi~symbolsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SymbolsList200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a particular symbol by id (uuid) for the provided application
     * @param {String} symbolId The ID of the symbol (uuid of the symbol)
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/CrashApi~symbolsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SymbolsList200ResponseInner}
     */
    symbolsGet(symbolId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'symbolId' is set
      if (symbolId === undefined || symbolId === null) {
        throw new Error("Missing the required parameter 'symbolId' when calling symbolsGet");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling symbolsGet");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling symbolsGet");
      }

      let pathParams = {
        'symbol_id': symbolId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SymbolsList200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the symbolsGetLocation operation.
     * @callback module:api/CrashApi~symbolsGetLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SymbolsGetLocation200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the URL to download the symbol
     * @param {String} symbolId The ID of the symbol (uuid of the symbol)
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/CrashApi~symbolsGetLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SymbolsGetLocation200Response}
     */
    symbolsGetLocation(symbolId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'symbolId' is set
      if (symbolId === undefined || symbolId === null) {
        throw new Error("Missing the required parameter 'symbolId' when calling symbolsGetLocation");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling symbolsGetLocation");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling symbolsGetLocation");
      }

      let pathParams = {
        'symbol_id': symbolId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SymbolsGetLocation200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/location', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the symbolsGetStatus operation.
     * @callback module:api/CrashApi~symbolsGetStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SymbolsGetStatus200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a particular symbol by id (uuid) for the provided application
     * @param {String} symbolId The ID of the symbol (uuid of the symbol)
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/CrashApi~symbolsGetStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SymbolsGetStatus200Response}
     */
    symbolsGetStatus(symbolId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'symbolId' is set
      if (symbolId === undefined || symbolId === null) {
        throw new Error("Missing the required parameter 'symbolId' when calling symbolsGetStatus");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling symbolsGetStatus");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling symbolsGetStatus");
      }

      let pathParams = {
        'symbol_id': symbolId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SymbolsGetStatus200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the symbolsIgnore operation.
     * @callback module:api/CrashApi~symbolsIgnoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SymbolsList200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marks a symbol by id (uuid) as ignored
     * @param {String} symbolId The ID of the symbol (uuid of the symbol)
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/CrashApi~symbolsIgnoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SymbolsList200ResponseInner}
     */
    symbolsIgnore(symbolId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'symbolId' is set
      if (symbolId === undefined || symbolId === null) {
        throw new Error("Missing the required parameter 'symbolId' when calling symbolsIgnore");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling symbolsIgnore");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling symbolsIgnore");
      }

      let pathParams = {
        'symbol_id': symbolId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SymbolsList200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/ignore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the symbolsList operation.
     * @callback module:api/CrashApi~symbolsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SymbolsList200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of all symbols for the provided application
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/CrashApi~symbolsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SymbolsList200ResponseInner>}
     */
    symbolsList(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling symbolsList");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling symbolsList");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SymbolsList200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/symbols', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
