/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppInvitationsCreateByEmailRequest from '../model/AppInvitationsCreateByEmailRequest';
import AppInvitationsCreateRequest from '../model/AppInvitationsCreateRequest';
import AppInvitationsList200Response from '../model/AppInvitationsList200Response';
import AppInvitationsList200ResponseInvitedBy from '../model/AppInvitationsList200ResponseInvitedBy';
import AppInvitationsUpdatePermissionsRequest from '../model/AppInvitationsUpdatePermissionsRequest';
import AppsCreateRequest from '../model/AppsCreateRequest';
import AppsGetTeams200ResponseInner from '../model/AppsGetTeams200ResponseInner';
import AppsList200ResponseInner from '../model/AppsList200ResponseInner';
import AppsList200ResponseInnerAllOfAzureSubscription from '../model/AppsList200ResponseInnerAllOfAzureSubscription';
import AppsUpdateRequest from '../model/AppsUpdateRequest';
import AppsUpdateUserPermissionsRequest from '../model/AppsUpdateUserPermissionsRequest';
import AzureSubscriptionLinkForAppRequest from '../model/AzureSubscriptionLinkForAppRequest';
import DistributionGroupsAddAppsRequest from '../model/DistributionGroupsAddAppsRequest';
import DistributionGroupsAddAppsRequestAppsInner from '../model/DistributionGroupsAddAppsRequestAppsInner';
import DistributionGroupsAddUser200ResponseInner from '../model/DistributionGroupsAddUser200ResponseInner';
import DistributionGroupsAddUserRequest from '../model/DistributionGroupsAddUserRequest';
import DistributionGroupsBulkDeleteAppsRequest from '../model/DistributionGroupsBulkDeleteAppsRequest';
import DistributionGroupsCreateRequest from '../model/DistributionGroupsCreateRequest';
import DistributionGroupsDetailsForOrg200ResponseInner from '../model/DistributionGroupsDetailsForOrg200ResponseInner';
import DistributionGroupsGetApps200ResponseInner from '../model/DistributionGroupsGetApps200ResponseInner';
import DistributionGroupsList200ResponseInner from '../model/DistributionGroupsList200ResponseInner';
import DistributionGroupsListAllTestersForOrg200ResponseInner from '../model/DistributionGroupsListAllTestersForOrg200ResponseInner';
import DistributionGroupsListUsers200ResponseInner from '../model/DistributionGroupsListUsers200ResponseInner';
import DistributionGroupsRemoveUser200ResponseInner from '../model/DistributionGroupsRemoveUser200ResponseInner';
import DistributionGroupsUpdateRequest from '../model/DistributionGroupsUpdateRequest';
import InvitationsSent200ResponseInner from '../model/InvitationsSent200ResponseInner';
import OrgInvitationsDeleteRequest from '../model/OrgInvitationsDeleteRequest';
import OrgInvitationsListPending200ResponseInner from '../model/OrgInvitationsListPending200ResponseInner';
import OrgInvitationsUpdateRequest from '../model/OrgInvitationsUpdateRequest';
import OrganizationsCreateOrUpdateRequest from '../model/OrganizationsCreateOrUpdateRequest';
import OrganizationsList200ResponseInner from '../model/OrganizationsList200ResponseInner';
import OrganizationsListAdministered200Response from '../model/OrganizationsListAdministered200Response';
import OrganizationsListAdministered200ResponseOrganizations from '../model/OrganizationsListAdministered200ResponseOrganizations';
import OrganizationsListAdministeredDefaultResponse from '../model/OrganizationsListAdministeredDefaultResponse';
import OrganizationsListAdministeredDefaultResponseError from '../model/OrganizationsListAdministeredDefaultResponseError';
import OrganizationsUpdateRequest from '../model/OrganizationsUpdateRequest';
import SharedconnectionConnections200ResponseInner from '../model/SharedconnectionConnections200ResponseInner';
import TeamsCreateTeamRequest from '../model/TeamsCreateTeamRequest';
import TeamsGetUsers200Response from '../model/TeamsGetUsers200Response';
import TeamsListAll200ResponseInner from '../model/TeamsListAll200ResponseInner';
import TeamsListApps200ResponseInner from '../model/TeamsListApps200ResponseInner';
import TeamsUpdatePermissionsRequest from '../model/TeamsUpdatePermissionsRequest';
import TeamsUpdateRequest from '../model/TeamsUpdateRequest';
import UserApiTokensList200ResponseInner from '../model/UserApiTokensList200ResponseInner';
import UserApiTokensNew201Response from '../model/UserApiTokensNew201Response';
import UserApiTokensNewRequest from '../model/UserApiTokensNewRequest';
import UsersGetUserMetadata200Response from '../model/UsersGetUserMetadata200Response';
import UsersGetUserMetadataDefaultResponse from '../model/UsersGetUserMetadataDefaultResponse';
import UsersListForOrg200ResponseInner from '../model/UsersListForOrg200ResponseInner';
import UsersUpdateRequest from '../model/UsersUpdateRequest';

/**
* Account service.
* @module api/AccountApi
* @version v0.1
*/
export default class AccountApi {

    /**
    * Constructs a new AccountApi. 
    * @alias module:api/AccountApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appApiTokensDelete operation.
     * @callback module:api/AccountApi~appApiTokensDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the App Api Token object with the specific ID
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {String} apiTokenId The unique ID (UUID) of the api token
     * @param {module:api/AccountApi~appApiTokensDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appApiTokensDelete(ownerName, appName, apiTokenId, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling appApiTokensDelete");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling appApiTokensDelete");
      }
      // verify the required parameter 'apiTokenId' is set
      if (apiTokenId === undefined || apiTokenId === null) {
        throw new Error("Missing the required parameter 'apiTokenId' when calling appApiTokensDelete");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName,
        'api_token_id': apiTokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/api_tokens/{api_token_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiTokensList operation.
     * @callback module:api/AccountApi~appApiTokensListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserApiTokensList200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns App API tokens for the app
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/AccountApi~appApiTokensListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserApiTokensList200ResponseInner>}
     */
    appApiTokensList(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling appApiTokensList");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling appApiTokensList");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserApiTokensList200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/api_tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiTokensNew operation.
     * @callback module:api/AccountApi~appApiTokensNewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserApiTokensNew201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new App API token
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {module:model/UserApiTokensNewRequest} [userApiTokensNewRequest] Description of the token
     * @param {module:api/AccountApi~appApiTokensNewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserApiTokensNew201Response}
     */
    appApiTokensNew(ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = opts['userApiTokensNewRequest'];
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling appApiTokensNew");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling appApiTokensNew");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserApiTokensNew201Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/api_tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appInvitationsAccept operation.
     * @callback module:api/AccountApi~appInvitationsAcceptCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accepts a pending invitation for the specified user
     * @param {String} invitationToken The app invitation token that was sent to the user
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] allow empty body for custom http-client lib
     * @param {module:api/AccountApi~appInvitationsAcceptCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appInvitationsAccept(invitationToken, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'invitationToken' is set
      if (invitationToken === undefined || invitationToken === null) {
        throw new Error("Missing the required parameter 'invitationToken' when calling appInvitationsAccept");
      }

      let pathParams = {
        'invitation_token': invitationToken
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/user/invitations/apps/{invitation_token}/accept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appInvitationsCreate operation.
     * @callback module:api/AccountApi~appInvitationsCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invites a new or existing user to an app
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {module:model/AppInvitationsCreateRequest} [appInvitationsCreateRequest] The email of the user to invite
     * @param {module:api/AccountApi~appInvitationsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appInvitationsCreate(ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = opts['appInvitationsCreateRequest'];
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling appInvitationsCreate");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling appInvitationsCreate");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/invitations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appInvitationsCreateByEmail operation.
     * @callback module:api/AccountApi~appInvitationsCreateByEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invites a new or existing user to an app
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {String} userEmail The email of the user to invite
     * @param {Object} opts Optional parameters
     * @param {module:model/AppInvitationsCreateByEmailRequest} [appInvitationsCreateByEmailRequest] The role of the user to be added
     * @param {module:api/AccountApi~appInvitationsCreateByEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appInvitationsCreateByEmail(ownerName, appName, userEmail, opts, callback) {
      opts = opts || {};
      let postBody = opts['appInvitationsCreateByEmailRequest'];
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling appInvitationsCreateByEmail");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling appInvitationsCreateByEmail");
      }
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling appInvitationsCreateByEmail");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName,
        'user_email': userEmail
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appInvitationsDelete operation.
     * @callback module:api/AccountApi~appInvitationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a user's invitation to an app
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {String} userEmail The email of the user to invite
     * @param {module:api/AccountApi~appInvitationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appInvitationsDelete(ownerName, appName, userEmail, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling appInvitationsDelete");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling appInvitationsDelete");
      }
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling appInvitationsDelete");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName,
        'user_email': userEmail
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appInvitationsList operation.
     * @callback module:api/AccountApi~appInvitationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppInvitationsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the pending invitations for the app
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/AccountApi~appInvitationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppInvitationsList200Response}
     */
    appInvitationsList(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling appInvitationsList");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling appInvitationsList");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppInvitationsList200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/invitations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appInvitationsReject operation.
     * @callback module:api/AccountApi~appInvitationsRejectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rejects a pending invitation for the specified user
     * @param {String} invitationToken The app invitation token that was sent to the user
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] allow empty body for custom http-client lib
     * @param {module:api/AccountApi~appInvitationsRejectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appInvitationsReject(invitationToken, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'invitationToken' is set
      if (invitationToken === undefined || invitationToken === null) {
        throw new Error("Missing the required parameter 'invitationToken' when calling appInvitationsReject");
      }

      let pathParams = {
        'invitation_token': invitationToken
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/user/invitations/apps/{invitation_token}/reject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appInvitationsUpdatePermissions operation.
     * @callback module:api/AccountApi~appInvitationsUpdatePermissionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update pending invitation permission
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {String} userEmail The email of the user to invite
     * @param {module:model/AppInvitationsUpdatePermissionsRequest} appInvitationsUpdatePermissionsRequest The value to update the user permission in the invite.
     * @param {module:api/AccountApi~appInvitationsUpdatePermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appInvitationsUpdatePermissions(ownerName, appName, userEmail, appInvitationsUpdatePermissionsRequest, callback) {
      let postBody = appInvitationsUpdatePermissionsRequest;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling appInvitationsUpdatePermissions");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling appInvitationsUpdatePermissions");
      }
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling appInvitationsUpdatePermissions");
      }
      // verify the required parameter 'appInvitationsUpdatePermissionsRequest' is set
      if (appInvitationsUpdatePermissionsRequest === undefined || appInvitationsUpdatePermissionsRequest === null) {
        throw new Error("Missing the required parameter 'appInvitationsUpdatePermissionsRequest' when calling appInvitationsUpdatePermissions");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName,
        'user_email': userEmail
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsCreate operation.
     * @callback module:api/AccountApi~appsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsList200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new app and returns it to the caller
     * @param {module:model/AppsCreateRequest} appsCreateRequest The data for the app
     * @param {module:api/AccountApi~appsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsList200ResponseInner}
     */
    appsCreate(appsCreateRequest, callback) {
      let postBody = appsCreateRequest;
      // verify the required parameter 'appsCreateRequest' is set
      if (appsCreateRequest === undefined || appsCreateRequest === null) {
        throw new Error("Missing the required parameter 'appsCreateRequest' when calling appsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppsList200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/apps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsCreateForOrg operation.
     * @callback module:api/AccountApi~appsCreateForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsList200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new app for the organization and returns it to the caller
     * @param {String} orgName The organization's name
     * @param {module:model/AppsCreateRequest} appsCreateRequest The data for the app
     * @param {module:api/AccountApi~appsCreateForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsList200ResponseInner}
     */
    appsCreateForOrg(orgName, appsCreateRequest, callback) {
      let postBody = appsCreateRequest;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling appsCreateForOrg");
      }
      // verify the required parameter 'appsCreateRequest' is set
      if (appsCreateRequest === undefined || appsCreateRequest === null) {
        throw new Error("Missing the required parameter 'appsCreateRequest' when calling appsCreateForOrg");
      }

      let pathParams = {
        'org_name': orgName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppsList200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/apps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsDelete operation.
     * @callback module:api/AccountApi~appsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an app
     * @param {String} appName The name of the application
     * @param {String} ownerName The name of the owner
     * @param {module:api/AccountApi~appsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsDelete(appName, ownerName, callback) {
      let postBody = null;
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling appsDelete");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling appsDelete");
      }

      let pathParams = {
        'app_name': appName,
        'owner_name': ownerName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsDeleteAvatar operation.
     * @callback module:api/AccountApi~appsDeleteAvatarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsList200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the uploaded app avatar
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/AccountApi~appsDeleteAvatarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsList200ResponseInner}
     */
    appsDeleteAvatar(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling appsDeleteAvatar");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling appsDeleteAvatar");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppsList200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/avatar', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGet operation.
     * @callback module:api/AccountApi~appsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsList200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a specific app with the given app name which belongs to the given owner.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/AccountApi~appsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsList200ResponseInner}
     */
    appsGet(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling appsGet");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling appsGet");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppsList200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGetForOrgUser operation.
     * @callback module:api/AccountApi~appsGetForOrgUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppsList200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user apps information from an organization by name
     * @param {String} orgName The organization's name
     * @param {String} userName The slug name of the user
     * @param {module:api/AccountApi~appsGetForOrgUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppsList200ResponseInner>}
     */
    appsGetForOrgUser(orgName, userName, callback) {
      let postBody = null;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling appsGetForOrgUser");
      }
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling appsGetForOrgUser");
      }

      let pathParams = {
        'org_name': orgName,
        'user_name': userName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppsList200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/users/{user_name}/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGetTeams operation.
     * @callback module:api/AccountApi~appsGetTeamsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppsGetTeams200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the details of all teams that have access to the app.
     * @param {String} appName The name of the application
     * @param {String} ownerName The name of the owner
     * @param {module:api/AccountApi~appsGetTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppsGetTeams200ResponseInner>}
     */
    appsGetTeams(appName, ownerName, callback) {
      let postBody = null;
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling appsGetTeams");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling appsGetTeams");
      }

      let pathParams = {
        'app_name': appName,
        'owner_name': ownerName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppsGetTeams200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsList operation.
     * @callback module:api/AccountApi~appsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppsList200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of apps
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [orderBy] The name of the attribute by which to order the response by. By default, apps are in order of creation. All results are ordered in ascending order.
     * @param {module:api/AccountApi~appsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppsList200ResponseInner>}
     */
    appsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '$orderBy': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppsList200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsListForOrg operation.
     * @callback module:api/AccountApi~appsListForOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppsList200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of apps for the organization
     * @param {String} orgName The organization's name
     * @param {module:api/AccountApi~appsListForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppsList200ResponseInner>}
     */
    appsListForOrg(orgName, callback) {
      let postBody = null;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling appsListForOrg");
      }

      let pathParams = {
        'org_name': orgName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppsList200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsListTesters operation.
     * @callback module:api/AccountApi~appsListTestersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppInvitationsList200ResponseInvitedBy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the testers associated with the app specified with the given app name which belongs to the given owner.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/AccountApi~appsListTestersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppInvitationsList200ResponseInvitedBy>}
     */
    appsListTesters(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling appsListTesters");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling appsListTesters");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppInvitationsList200ResponseInvitedBy];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/testers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsRemoveUser operation.
     * @callback module:api/AccountApi~appsRemoveUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the user from the app
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {String} userEmail The user email of the user to delete
     * @param {module:api/AccountApi~appsRemoveUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsRemoveUser(ownerName, appName, userEmail, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling appsRemoveUser");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling appsRemoveUser");
      }
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling appsRemoveUser");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName,
        'user_email': userEmail
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/users/{user_email}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsTransferOwnership operation.
     * @callback module:api/AccountApi~appsTransferOwnershipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsList200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfers ownership of an app to a different user or organization
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {String} destinationOwnerName The name of the owner (user or organization) to which the app is being transferred
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] allow empty body for custom http-client lib
     * @param {module:api/AccountApi~appsTransferOwnershipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsList200ResponseInner}
     */
    appsTransferOwnership(ownerName, appName, destinationOwnerName, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling appsTransferOwnership");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling appsTransferOwnership");
      }
      // verify the required parameter 'destinationOwnerName' is set
      if (destinationOwnerName === undefined || destinationOwnerName === null) {
        throw new Error("Missing the required parameter 'destinationOwnerName' when calling appsTransferOwnership");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName,
        'destination_owner_name': destinationOwnerName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json', 'application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = AppsList200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/transfer/{destination_owner_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsTransferToOrg operation.
     * @callback module:api/AccountApi~appsTransferToOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationsListAdministered200ResponseOrganizations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfers ownership of an app to a new organization
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] allow empty body for custom http-client lib
     * @param {module:api/AccountApi~appsTransferToOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationsListAdministered200ResponseOrganizations}
     */
    appsTransferToOrg(ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling appsTransferToOrg");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling appsTransferToOrg");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrganizationsListAdministered200ResponseOrganizations;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/transfer_to_org', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsUpdate operation.
     * @callback module:api/AccountApi~appsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsList200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partially updates a single app
     * @param {String} appName The name of the application
     * @param {String} ownerName The name of the owner
     * @param {Object} opts Optional parameters
     * @param {module:model/AppsUpdateRequest} [appsUpdateRequest] The partial data for the app
     * @param {module:api/AccountApi~appsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsList200ResponseInner}
     */
    appsUpdate(appName, ownerName, opts, callback) {
      opts = opts || {};
      let postBody = opts['appsUpdateRequest'];
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling appsUpdate");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling appsUpdate");
      }

      let pathParams = {
        'app_name': appName,
        'owner_name': ownerName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppsList200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsUpdateAvatar operation.
     * @callback module:api/AccountApi~appsUpdateAvatarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsList200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the app avatar
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {File} [avatar] The image for an app avatar to upload.
     * @param {module:api/AccountApi~appsUpdateAvatarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsList200ResponseInner}
     */
    appsUpdateAvatar(ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling appsUpdateAvatar");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling appsUpdateAvatar");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'avatar': opts['avatar']
      };

      let authNames = ['APIToken'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AppsList200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/avatar', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsUpdateUserPermissions operation.
     * @callback module:api/AccountApi~appsUpdateUserPermissionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user permission for the app
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {String} userEmail The user email of the user to patch
     * @param {module:model/AppsUpdateUserPermissionsRequest} appsUpdateUserPermissionsRequest The value to update the user permission for the app.
     * @param {module:api/AccountApi~appsUpdateUserPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsUpdateUserPermissions(ownerName, appName, userEmail, appsUpdateUserPermissionsRequest, callback) {
      let postBody = appsUpdateUserPermissionsRequest;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling appsUpdateUserPermissions");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling appsUpdateUserPermissions");
      }
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling appsUpdateUserPermissions");
      }
      // verify the required parameter 'appsUpdateUserPermissionsRequest' is set
      if (appsUpdateUserPermissionsRequest === undefined || appsUpdateUserPermissionsRequest === null) {
        throw new Error("Missing the required parameter 'appsUpdateUserPermissionsRequest' when calling appsUpdateUserPermissions");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName,
        'user_email': userEmail
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/users/{user_email}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the azureSubscriptionDeleteForApp operation.
     * @callback module:api/AccountApi~azureSubscriptionDeleteForAppCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the azure subscriptions for the app
     * @param {String} azureSubscriptionId The unique ID (UUID) of the azure subscription
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/AccountApi~azureSubscriptionDeleteForAppCallback} callback The callback function, accepting three arguments: error, data, response
     */
    azureSubscriptionDeleteForApp(azureSubscriptionId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'azureSubscriptionId' is set
      if (azureSubscriptionId === undefined || azureSubscriptionId === null) {
        throw new Error("Missing the required parameter 'azureSubscriptionId' when calling azureSubscriptionDeleteForApp");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling azureSubscriptionDeleteForApp");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling azureSubscriptionDeleteForApp");
      }

      let pathParams = {
        'azure_subscription_id': azureSubscriptionId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions/{azure_subscription_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the azureSubscriptionLinkForApp operation.
     * @callback module:api/AccountApi~azureSubscriptionLinkForAppCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Link azure subscription to an app
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/AzureSubscriptionLinkForAppRequest} azureSubscriptionLinkForAppRequest The azure subscription data needed to be link to the app.
     * @param {module:api/AccountApi~azureSubscriptionLinkForAppCallback} callback The callback function, accepting three arguments: error, data, response
     */
    azureSubscriptionLinkForApp(ownerName, appName, azureSubscriptionLinkForAppRequest, callback) {
      let postBody = azureSubscriptionLinkForAppRequest;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling azureSubscriptionLinkForApp");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling azureSubscriptionLinkForApp");
      }
      // verify the required parameter 'azureSubscriptionLinkForAppRequest' is set
      if (azureSubscriptionLinkForAppRequest === undefined || azureSubscriptionLinkForAppRequest === null) {
        throw new Error("Missing the required parameter 'azureSubscriptionLinkForAppRequest' when calling azureSubscriptionLinkForApp");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the azureSubscriptionListForApp operation.
     * @callback module:api/AccountApi~azureSubscriptionListForAppCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppsList200ResponseInnerAllOfAzureSubscription>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of azure subscriptions for the app
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/AccountApi~azureSubscriptionListForAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppsList200ResponseInnerAllOfAzureSubscription>}
     */
    azureSubscriptionListForApp(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling azureSubscriptionListForApp");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling azureSubscriptionListForApp");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppsList200ResponseInnerAllOfAzureSubscription];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the azureSubscriptionListForOrg operation.
     * @callback module:api/AccountApi~azureSubscriptionListForOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppsList200ResponseInnerAllOfAzureSubscription>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of azure subscriptions for the organization
     * @param {String} orgName The organization's name
     * @param {module:api/AccountApi~azureSubscriptionListForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppsList200ResponseInnerAllOfAzureSubscription>}
     */
    azureSubscriptionListForOrg(orgName, callback) {
      let postBody = null;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling azureSubscriptionListForOrg");
      }

      let pathParams = {
        'org_name': orgName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppsList200ResponseInnerAllOfAzureSubscription];
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/azure_subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the azureSubscriptionListForUser operation.
     * @callback module:api/AccountApi~azureSubscriptionListForUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppsList200ResponseInnerAllOfAzureSubscription>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of azure subscriptions for the user
     * @param {module:api/AccountApi~azureSubscriptionListForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppsList200ResponseInnerAllOfAzureSubscription>}
     */
    azureSubscriptionListForUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppsList200ResponseInnerAllOfAzureSubscription];
      return this.apiClient.callApi(
        '/v0.1/azure_subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distributionGroupInvitationsAcceptAll operation.
     * @callback module:api/AccountApi~distributionGroupInvitationsAcceptAllCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accepts all pending invitations to distribution groups for the specified user
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] allow empty body for custom http-client lib
     * @param {module:api/AccountApi~distributionGroupInvitationsAcceptAllCallback} callback The callback function, accepting three arguments: error, data, response
     */
    distributionGroupInvitationsAcceptAll(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/user/invitations/distribution_groups/accept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distributionGroupsAddApps operation.
     * @callback module:api/AccountApi~distributionGroupsAddAppsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add apps to distribution group in an org
     * @param {String} orgName The organization's name
     * @param {String} distributionGroupName The name of the distribution group
     * @param {module:model/DistributionGroupsAddAppsRequest} distributionGroupsAddAppsRequest The name of the apps to be added to the distribution group. The apps have to be owned by the organization.
     * @param {module:api/AccountApi~distributionGroupsAddAppsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    distributionGroupsAddApps(orgName, distributionGroupName, distributionGroupsAddAppsRequest, callback) {
      let postBody = distributionGroupsAddAppsRequest;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling distributionGroupsAddApps");
      }
      // verify the required parameter 'distributionGroupName' is set
      if (distributionGroupName === undefined || distributionGroupName === null) {
        throw new Error("Missing the required parameter 'distributionGroupName' when calling distributionGroupsAddApps");
      }
      // verify the required parameter 'distributionGroupsAddAppsRequest' is set
      if (distributionGroupsAddAppsRequest === undefined || distributionGroupsAddAppsRequest === null) {
        throw new Error("Missing the required parameter 'distributionGroupsAddAppsRequest' when calling distributionGroupsAddApps");
      }

      let pathParams = {
        'org_name': orgName,
        'distribution_group_name': distributionGroupName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distributionGroupsAddUser operation.
     * @callback module:api/AccountApi~distributionGroupsAddUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DistributionGroupsAddUser200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the members to the specified distribution group
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {String} distributionGroupName The name of the distribution group
     * @param {module:model/DistributionGroupsAddUserRequest} distributionGroupsAddUserRequest The list of members to add
     * @param {module:api/AccountApi~distributionGroupsAddUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DistributionGroupsAddUser200ResponseInner>}
     */
    distributionGroupsAddUser(ownerName, appName, distributionGroupName, distributionGroupsAddUserRequest, callback) {
      let postBody = distributionGroupsAddUserRequest;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling distributionGroupsAddUser");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling distributionGroupsAddUser");
      }
      // verify the required parameter 'distributionGroupName' is set
      if (distributionGroupName === undefined || distributionGroupName === null) {
        throw new Error("Missing the required parameter 'distributionGroupName' when calling distributionGroupsAddUser");
      }
      // verify the required parameter 'distributionGroupsAddUserRequest' is set
      if (distributionGroupsAddUserRequest === undefined || distributionGroupsAddUserRequest === null) {
        throw new Error("Missing the required parameter 'distributionGroupsAddUserRequest' when calling distributionGroupsAddUser");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName,
        'distribution_group_name': distributionGroupName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [DistributionGroupsAddUser200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distributionGroupsAddUsersForOrg operation.
     * @callback module:api/AccountApi~distributionGroupsAddUsersForOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DistributionGroupsAddUser200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accepts an array of user email addresses to get added to the specified group
     * @param {String} orgName The organization's name
     * @param {String} distributionGroupName The name of the distribution group
     * @param {module:model/DistributionGroupsAddUserRequest} distributionGroupsAddUserRequest list of user email addresses that should get added as members to the specified group
     * @param {module:api/AccountApi~distributionGroupsAddUsersForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DistributionGroupsAddUser200ResponseInner>}
     */
    distributionGroupsAddUsersForOrg(orgName, distributionGroupName, distributionGroupsAddUserRequest, callback) {
      let postBody = distributionGroupsAddUserRequest;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling distributionGroupsAddUsersForOrg");
      }
      // verify the required parameter 'distributionGroupName' is set
      if (distributionGroupName === undefined || distributionGroupName === null) {
        throw new Error("Missing the required parameter 'distributionGroupName' when calling distributionGroupsAddUsersForOrg");
      }
      // verify the required parameter 'distributionGroupsAddUserRequest' is set
      if (distributionGroupsAddUserRequest === undefined || distributionGroupsAddUserRequest === null) {
        throw new Error("Missing the required parameter 'distributionGroupsAddUserRequest' when calling distributionGroupsAddUsersForOrg");
      }

      let pathParams = {
        'org_name': orgName,
        'distribution_group_name': distributionGroupName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [DistributionGroupsAddUser200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distributionGroupsBulkDeleteApps operation.
     * @callback module:api/AccountApi~distributionGroupsBulkDeleteAppsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete apps from distribution group in an org
     * @param {String} orgName The organization's name
     * @param {String} distributionGroupName The name of the distribution group
     * @param {module:model/DistributionGroupsBulkDeleteAppsRequest} distributionGroupsBulkDeleteAppsRequest The name of the apps to be deleted from the distribution group. The apps have to be owned by the organization.
     * @param {module:api/AccountApi~distributionGroupsBulkDeleteAppsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    distributionGroupsBulkDeleteApps(orgName, distributionGroupName, distributionGroupsBulkDeleteAppsRequest, callback) {
      let postBody = distributionGroupsBulkDeleteAppsRequest;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling distributionGroupsBulkDeleteApps");
      }
      // verify the required parameter 'distributionGroupName' is set
      if (distributionGroupName === undefined || distributionGroupName === null) {
        throw new Error("Missing the required parameter 'distributionGroupName' when calling distributionGroupsBulkDeleteApps");
      }
      // verify the required parameter 'distributionGroupsBulkDeleteAppsRequest' is set
      if (distributionGroupsBulkDeleteAppsRequest === undefined || distributionGroupsBulkDeleteAppsRequest === null) {
        throw new Error("Missing the required parameter 'distributionGroupsBulkDeleteAppsRequest' when calling distributionGroupsBulkDeleteApps");
      }

      let pathParams = {
        'org_name': orgName,
        'distribution_group_name': distributionGroupName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps/bulk_delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distributionGroupsBulkDeleteUsers operation.
     * @callback module:api/AccountApi~distributionGroupsBulkDeleteUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete testers from distribution group in an org
     * @param {String} orgName The organization's name
     * @param {String} distributionGroupName The name of the distribution group
     * @param {module:model/DistributionGroupsAddUserRequest} distributionGroupsAddUserRequest The list of members to add
     * @param {module:api/AccountApi~distributionGroupsBulkDeleteUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    distributionGroupsBulkDeleteUsers(orgName, distributionGroupName, distributionGroupsAddUserRequest, callback) {
      let postBody = distributionGroupsAddUserRequest;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling distributionGroupsBulkDeleteUsers");
      }
      // verify the required parameter 'distributionGroupName' is set
      if (distributionGroupName === undefined || distributionGroupName === null) {
        throw new Error("Missing the required parameter 'distributionGroupName' when calling distributionGroupsBulkDeleteUsers");
      }
      // verify the required parameter 'distributionGroupsAddUserRequest' is set
      if (distributionGroupsAddUserRequest === undefined || distributionGroupsAddUserRequest === null) {
        throw new Error("Missing the required parameter 'distributionGroupsAddUserRequest' when calling distributionGroupsBulkDeleteUsers");
      }

      let pathParams = {
        'org_name': orgName,
        'distribution_group_name': distributionGroupName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members/bulk_delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distributionGroupsCreate operation.
     * @callback module:api/AccountApi~distributionGroupsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistributionGroupsList200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new distribution group and returns it to the caller
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/DistributionGroupsCreateRequest} distributionGroupsCreateRequest The attributes to update for the distribution group
     * @param {module:api/AccountApi~distributionGroupsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistributionGroupsList200ResponseInner}
     */
    distributionGroupsCreate(ownerName, appName, distributionGroupsCreateRequest, callback) {
      let postBody = distributionGroupsCreateRequest;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling distributionGroupsCreate");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling distributionGroupsCreate");
      }
      // verify the required parameter 'distributionGroupsCreateRequest' is set
      if (distributionGroupsCreateRequest === undefined || distributionGroupsCreateRequest === null) {
        throw new Error("Missing the required parameter 'distributionGroupsCreateRequest' when calling distributionGroupsCreate");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DistributionGroupsList200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/distribution_groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distributionGroupsCreateForOrg operation.
     * @callback module:api/AccountApi~distributionGroupsCreateForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistributionGroupsList200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a disribution goup which can be shared across apps under an organization
     * @param {String} orgName The organization's name
     * @param {module:model/DistributionGroupsCreateRequest} distributionGroupsCreateRequest The attributes to update for the distribution group
     * @param {module:api/AccountApi~distributionGroupsCreateForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistributionGroupsList200ResponseInner}
     */
    distributionGroupsCreateForOrg(orgName, distributionGroupsCreateRequest, callback) {
      let postBody = distributionGroupsCreateRequest;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling distributionGroupsCreateForOrg");
      }
      // verify the required parameter 'distributionGroupsCreateRequest' is set
      if (distributionGroupsCreateRequest === undefined || distributionGroupsCreateRequest === null) {
        throw new Error("Missing the required parameter 'distributionGroupsCreateRequest' when calling distributionGroupsCreateForOrg");
      }

      let pathParams = {
        'org_name': orgName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DistributionGroupsList200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/distribution_groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distributionGroupsDelete operation.
     * @callback module:api/AccountApi~distributionGroupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a distribution group
     * @param {String} appName The name of the application
     * @param {String} ownerName The name of the owner
     * @param {String} distributionGroupName The name of the distribution group
     * @param {module:api/AccountApi~distributionGroupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    distributionGroupsDelete(appName, ownerName, distributionGroupName, callback) {
      let postBody = null;
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling distributionGroupsDelete");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling distributionGroupsDelete");
      }
      // verify the required parameter 'distributionGroupName' is set
      if (distributionGroupName === undefined || distributionGroupName === null) {
        throw new Error("Missing the required parameter 'distributionGroupName' when calling distributionGroupsDelete");
      }

      let pathParams = {
        'app_name': appName,
        'owner_name': ownerName,
        'distribution_group_name': distributionGroupName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distributionGroupsDeleteForOrg operation.
     * @callback module:api/AccountApi~distributionGroupsDeleteForOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a single distribution group from an org with a given distribution group name
     * @param {String} orgName The organization's name
     * @param {String} distributionGroupName The name of the distribution group
     * @param {module:api/AccountApi~distributionGroupsDeleteForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    distributionGroupsDeleteForOrg(orgName, distributionGroupName, callback) {
      let postBody = null;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling distributionGroupsDeleteForOrg");
      }
      // verify the required parameter 'distributionGroupName' is set
      if (distributionGroupName === undefined || distributionGroupName === null) {
        throw new Error("Missing the required parameter 'distributionGroupName' when calling distributionGroupsDeleteForOrg");
      }

      let pathParams = {
        'org_name': orgName,
        'distribution_group_name': distributionGroupName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distributionGroupsDetailsForOrg operation.
     * @callback module:api/AccountApi~distributionGroupsDetailsForOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DistributionGroupsDetailsForOrg200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of distribution groups with details for an organization
     * @param {String} orgName The organization's name
     * @param {Object} opts Optional parameters
     * @param {Number} [appsLimit] The max number of apps to include in the response
     * @param {module:api/AccountApi~distributionGroupsDetailsForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DistributionGroupsDetailsForOrg200ResponseInner>}
     */
    distributionGroupsDetailsForOrg(orgName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling distributionGroupsDetailsForOrg");
      }

      let pathParams = {
        'org_name': orgName
      };
      let queryParams = {
        'apps_limit': opts['appsLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DistributionGroupsDetailsForOrg200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/distribution_groups_details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distributionGroupsGet operation.
     * @callback module:api/AccountApi~distributionGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistributionGroupsList200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single distribution group for a given distribution group name
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {String} distributionGroupName The name of the distribution group
     * @param {module:api/AccountApi~distributionGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistributionGroupsList200ResponseInner}
     */
    distributionGroupsGet(ownerName, appName, distributionGroupName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling distributionGroupsGet");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling distributionGroupsGet");
      }
      // verify the required parameter 'distributionGroupName' is set
      if (distributionGroupName === undefined || distributionGroupName === null) {
        throw new Error("Missing the required parameter 'distributionGroupName' when calling distributionGroupsGet");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName,
        'distribution_group_name': distributionGroupName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DistributionGroupsList200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distributionGroupsGetApps operation.
     * @callback module:api/AccountApi~distributionGroupsGetAppsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DistributionGroupsGetApps200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get apps from a distribution group in an org
     * @param {String} orgName The organization's name
     * @param {String} distributionGroupName The name of the distribution group
     * @param {module:api/AccountApi~distributionGroupsGetAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DistributionGroupsGetApps200ResponseInner>}
     */
    distributionGroupsGetApps(orgName, distributionGroupName, callback) {
      let postBody = null;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling distributionGroupsGetApps");
      }
      // verify the required parameter 'distributionGroupName' is set
      if (distributionGroupName === undefined || distributionGroupName === null) {
        throw new Error("Missing the required parameter 'distributionGroupName' when calling distributionGroupsGetApps");
      }

      let pathParams = {
        'org_name': orgName,
        'distribution_group_name': distributionGroupName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DistributionGroupsGetApps200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distributionGroupsGetForOrg operation.
     * @callback module:api/AccountApi~distributionGroupsGetForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistributionGroupsList200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single distribution group in org for a given distribution group name
     * @param {String} orgName The organization's name
     * @param {String} distributionGroupName The name of the distribution group
     * @param {module:api/AccountApi~distributionGroupsGetForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistributionGroupsList200ResponseInner}
     */
    distributionGroupsGetForOrg(orgName, distributionGroupName, callback) {
      let postBody = null;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling distributionGroupsGetForOrg");
      }
      // verify the required parameter 'distributionGroupName' is set
      if (distributionGroupName === undefined || distributionGroupName === null) {
        throw new Error("Missing the required parameter 'distributionGroupName' when calling distributionGroupsGetForOrg");
      }

      let pathParams = {
        'org_name': orgName,
        'distribution_group_name': distributionGroupName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DistributionGroupsList200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distributionGroupsList operation.
     * @callback module:api/AccountApi~distributionGroupsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DistributionGroupsList200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of distribution groups in the app specified
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/AccountApi~distributionGroupsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DistributionGroupsList200ResponseInner>}
     */
    distributionGroupsList(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling distributionGroupsList");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling distributionGroupsList");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DistributionGroupsList200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/distribution_groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distributionGroupsListAllTestersForOrg operation.
     * @callback module:api/AccountApi~distributionGroupsListAllTestersForOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DistributionGroupsListAllTestersForOrg200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a unique list of users including the whole organization members plus testers in any shared group of that org
     * @param {String} orgName The organization's name
     * @param {module:api/AccountApi~distributionGroupsListAllTestersForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DistributionGroupsListAllTestersForOrg200ResponseInner>}
     */
    distributionGroupsListAllTestersForOrg(orgName, callback) {
      let postBody = null;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling distributionGroupsListAllTestersForOrg");
      }

      let pathParams = {
        'org_name': orgName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DistributionGroupsListAllTestersForOrg200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/testers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distributionGroupsListForOrg operation.
     * @callback module:api/AccountApi~distributionGroupsListForOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DistributionGroupsList200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of distribution groups in the org specified
     * @param {String} orgName The organization's name
     * @param {module:api/AccountApi~distributionGroupsListForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DistributionGroupsList200ResponseInner>}
     */
    distributionGroupsListForOrg(orgName, callback) {
      let postBody = null;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling distributionGroupsListForOrg");
      }

      let pathParams = {
        'org_name': orgName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DistributionGroupsList200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/distribution_groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distributionGroupsListUsers operation.
     * @callback module:api/AccountApi~distributionGroupsListUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DistributionGroupsListUsers200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of member details in the distribution group specified
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {String} distributionGroupName The name of the distribution group
     * @param {Object} opts Optional parameters
     * @param {Boolean} [excludePendingInvitations] Whether to exclude pending invitations in the response
     * @param {module:api/AccountApi~distributionGroupsListUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DistributionGroupsListUsers200ResponseInner>}
     */
    distributionGroupsListUsers(ownerName, appName, distributionGroupName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling distributionGroupsListUsers");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling distributionGroupsListUsers");
      }
      // verify the required parameter 'distributionGroupName' is set
      if (distributionGroupName === undefined || distributionGroupName === null) {
        throw new Error("Missing the required parameter 'distributionGroupName' when calling distributionGroupsListUsers");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName,
        'distribution_group_name': distributionGroupName
      };
      let queryParams = {
        'exclude_pending_invitations': opts['excludePendingInvitations']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DistributionGroupsListUsers200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distributionGroupsListUsersForOrg operation.
     * @callback module:api/AccountApi~distributionGroupsListUsersForOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DistributionGroupsListUsers200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of member in the distribution group specified
     * @param {String} orgName The organization's name
     * @param {String} distributionGroupName The name of the distribution group
     * @param {module:api/AccountApi~distributionGroupsListUsersForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DistributionGroupsListUsers200ResponseInner>}
     */
    distributionGroupsListUsersForOrg(orgName, distributionGroupName, callback) {
      let postBody = null;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling distributionGroupsListUsersForOrg");
      }
      // verify the required parameter 'distributionGroupName' is set
      if (distributionGroupName === undefined || distributionGroupName === null) {
        throw new Error("Missing the required parameter 'distributionGroupName' when calling distributionGroupsListUsersForOrg");
      }

      let pathParams = {
        'org_name': orgName,
        'distribution_group_name': distributionGroupName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DistributionGroupsListUsers200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distributionGroupsPatchForOrg operation.
     * @callback module:api/AccountApi~distributionGroupsPatchForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistributionGroupsList200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update one given distribution group name in an org
     * @param {String} orgName The organization's name
     * @param {String} distributionGroupName The name of the distribution group
     * @param {Object} opts Optional parameters
     * @param {module:model/DistributionGroupsUpdateRequest} [distributionGroupsUpdateRequest] The attributes to update for the distribution group
     * @param {module:api/AccountApi~distributionGroupsPatchForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistributionGroupsList200ResponseInner}
     */
    distributionGroupsPatchForOrg(orgName, distributionGroupName, opts, callback) {
      opts = opts || {};
      let postBody = opts['distributionGroupsUpdateRequest'];
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling distributionGroupsPatchForOrg");
      }
      // verify the required parameter 'distributionGroupName' is set
      if (distributionGroupName === undefined || distributionGroupName === null) {
        throw new Error("Missing the required parameter 'distributionGroupName' when calling distributionGroupsPatchForOrg");
      }

      let pathParams = {
        'org_name': orgName,
        'distribution_group_name': distributionGroupName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DistributionGroupsList200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distributionGroupsRemoveUser operation.
     * @callback module:api/AccountApi~distributionGroupsRemoveUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DistributionGroupsRemoveUser200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove the users from the distribution group
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {String} distributionGroupName The name of the distribution group
     * @param {module:model/DistributionGroupsAddUserRequest} distributionGroupsAddUserRequest The list of members to add
     * @param {module:api/AccountApi~distributionGroupsRemoveUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DistributionGroupsRemoveUser200ResponseInner>}
     */
    distributionGroupsRemoveUser(ownerName, appName, distributionGroupName, distributionGroupsAddUserRequest, callback) {
      let postBody = distributionGroupsAddUserRequest;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling distributionGroupsRemoveUser");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling distributionGroupsRemoveUser");
      }
      // verify the required parameter 'distributionGroupName' is set
      if (distributionGroupName === undefined || distributionGroupName === null) {
        throw new Error("Missing the required parameter 'distributionGroupName' when calling distributionGroupsRemoveUser");
      }
      // verify the required parameter 'distributionGroupsAddUserRequest' is set
      if (distributionGroupsAddUserRequest === undefined || distributionGroupsAddUserRequest === null) {
        throw new Error("Missing the required parameter 'distributionGroupsAddUserRequest' when calling distributionGroupsRemoveUser");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName,
        'distribution_group_name': distributionGroupName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [DistributionGroupsRemoveUser200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members/bulk_delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distributionGroupsResendInvite operation.
     * @callback module:api/AccountApi~distributionGroupsResendInviteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resend distribution group app invite notification to previously invited testers
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {String} distributionGroupName The name of the distribution group
     * @param {module:model/DistributionGroupsAddUserRequest} distributionGroupsAddUserRequest The list of members to add
     * @param {module:api/AccountApi~distributionGroupsResendInviteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    distributionGroupsResendInvite(ownerName, appName, distributionGroupName, distributionGroupsAddUserRequest, callback) {
      let postBody = distributionGroupsAddUserRequest;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling distributionGroupsResendInvite");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling distributionGroupsResendInvite");
      }
      // verify the required parameter 'distributionGroupName' is set
      if (distributionGroupName === undefined || distributionGroupName === null) {
        throw new Error("Missing the required parameter 'distributionGroupName' when calling distributionGroupsResendInvite");
      }
      // verify the required parameter 'distributionGroupsAddUserRequest' is set
      if (distributionGroupsAddUserRequest === undefined || distributionGroupsAddUserRequest === null) {
        throw new Error("Missing the required parameter 'distributionGroupsAddUserRequest' when calling distributionGroupsResendInvite");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName,
        'distribution_group_name': distributionGroupName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/resend_invite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distributionGroupsResendSharedInvite operation.
     * @callback module:api/AccountApi~distributionGroupsResendSharedInviteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resend shared distribution group invite notification to previously invited testers
     * @param {String} orgName The organization's name
     * @param {String} distributionGroupName The name of the distribution group
     * @param {module:model/DistributionGroupsAddUserRequest} distributionGroupsAddUserRequest The list of members to add
     * @param {module:api/AccountApi~distributionGroupsResendSharedInviteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    distributionGroupsResendSharedInvite(orgName, distributionGroupName, distributionGroupsAddUserRequest, callback) {
      let postBody = distributionGroupsAddUserRequest;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling distributionGroupsResendSharedInvite");
      }
      // verify the required parameter 'distributionGroupName' is set
      if (distributionGroupName === undefined || distributionGroupName === null) {
        throw new Error("Missing the required parameter 'distributionGroupName' when calling distributionGroupsResendSharedInvite");
      }
      // verify the required parameter 'distributionGroupsAddUserRequest' is set
      if (distributionGroupsAddUserRequest === undefined || distributionGroupsAddUserRequest === null) {
        throw new Error("Missing the required parameter 'distributionGroupsAddUserRequest' when calling distributionGroupsResendSharedInvite");
      }

      let pathParams = {
        'org_name': orgName,
        'distribution_group_name': distributionGroupName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/resend_invite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distributionGroupsUpdate operation.
     * @callback module:api/AccountApi~distributionGroupsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistributionGroupsList200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the attributes of distribution group
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {String} distributionGroupName The name of the distribution group
     * @param {module:model/DistributionGroupsUpdateRequest} distributionGroupsUpdateRequest The attributes to update for the distribution group
     * @param {module:api/AccountApi~distributionGroupsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistributionGroupsList200ResponseInner}
     */
    distributionGroupsUpdate(ownerName, appName, distributionGroupName, distributionGroupsUpdateRequest, callback) {
      let postBody = distributionGroupsUpdateRequest;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling distributionGroupsUpdate");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling distributionGroupsUpdate");
      }
      // verify the required parameter 'distributionGroupName' is set
      if (distributionGroupName === undefined || distributionGroupName === null) {
        throw new Error("Missing the required parameter 'distributionGroupName' when calling distributionGroupsUpdate");
      }
      // verify the required parameter 'distributionGroupsUpdateRequest' is set
      if (distributionGroupsUpdateRequest === undefined || distributionGroupsUpdateRequest === null) {
        throw new Error("Missing the required parameter 'distributionGroupsUpdateRequest' when calling distributionGroupsUpdate");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName,
        'distribution_group_name': distributionGroupName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DistributionGroupsList200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invitationsSent operation.
     * @callback module:api/AccountApi~invitationsSentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InvitationsSent200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all invitations sent by the caller
     * @param {module:api/AccountApi~invitationsSentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InvitationsSent200ResponseInner>}
     */
    invitationsSent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InvitationsSent200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/invitations/sent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgInvitations operation.
     * @callback module:api/AccountApi~orgInvitationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a user's invitation to an organization
     * @param {String} orgName The organization's name
     * @param {String} email The email address of the user to send the password reset mail to.
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] allow empty body for custom http-client lib
     * @param {module:api/AccountApi~orgInvitationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgInvitations(orgName, email, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling orgInvitations");
      }
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling orgInvitations");
      }

      let pathParams = {
        'org_name': orgName,
        'email': email
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/invitations/{email}/revoke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgInvitationsAccept operation.
     * @callback module:api/AccountApi~orgInvitationsAcceptCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accepts a pending organization invitation for the specified user
     * @param {String} invitationToken The app invitation token that was sent to the user
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] allow empty body for custom http-client lib
     * @param {module:api/AccountApi~orgInvitationsAcceptCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgInvitationsAccept(invitationToken, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'invitationToken' is set
      if (invitationToken === undefined || invitationToken === null) {
        throw new Error("Missing the required parameter 'invitationToken' when calling orgInvitationsAccept");
      }

      let pathParams = {
        'invitation_token': invitationToken
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/user/invitations/orgs/{invitation_token}/accept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgInvitationsCreate operation.
     * @callback module:api/AccountApi~orgInvitationsCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invites a new or existing user to an organization
     * @param {String} orgName The organization's name
     * @param {module:model/AppInvitationsCreateRequest} appInvitationsCreateRequest The email of the user to invite
     * @param {module:api/AccountApi~orgInvitationsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgInvitationsCreate(orgName, appInvitationsCreateRequest, callback) {
      let postBody = appInvitationsCreateRequest;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling orgInvitationsCreate");
      }
      // verify the required parameter 'appInvitationsCreateRequest' is set
      if (appInvitationsCreateRequest === undefined || appInvitationsCreateRequest === null) {
        throw new Error("Missing the required parameter 'appInvitationsCreateRequest' when calling orgInvitationsCreate");
      }

      let pathParams = {
        'org_name': orgName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/invitations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgInvitationsDelete operation.
     * @callback module:api/AccountApi~orgInvitationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a user's invitation to an organization
     * @param {String} orgName The organization's name
     * @param {module:model/OrgInvitationsDeleteRequest} orgInvitationsDeleteRequest The email of the user whose invitation should be removed
     * @param {module:api/AccountApi~orgInvitationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgInvitationsDelete(orgName, orgInvitationsDeleteRequest, callback) {
      let postBody = orgInvitationsDeleteRequest;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling orgInvitationsDelete");
      }
      // verify the required parameter 'orgInvitationsDeleteRequest' is set
      if (orgInvitationsDeleteRequest === undefined || orgInvitationsDeleteRequest === null) {
        throw new Error("Missing the required parameter 'orgInvitationsDeleteRequest' when calling orgInvitationsDelete");
      }

      let pathParams = {
        'org_name': orgName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/invitations', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgInvitationsListPending operation.
     * @callback module:api/AccountApi~orgInvitationsListPendingCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrgInvitationsListPending200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the pending invitations for the organization
     * @param {String} orgName The organization's name
     * @param {module:api/AccountApi~orgInvitationsListPendingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrgInvitationsListPending200ResponseInner>}
     */
    orgInvitationsListPending(orgName, callback) {
      let postBody = null;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling orgInvitationsListPending");
      }

      let pathParams = {
        'org_name': orgName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrgInvitationsListPending200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/invitations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgInvitationsReject operation.
     * @callback module:api/AccountApi~orgInvitationsRejectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rejects a pending organization invitation
     * @param {String} invitationToken The app invitation token that was sent to the user
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] allow empty body for custom http-client lib
     * @param {module:api/AccountApi~orgInvitationsRejectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgInvitationsReject(invitationToken, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'invitationToken' is set
      if (invitationToken === undefined || invitationToken === null) {
        throw new Error("Missing the required parameter 'invitationToken' when calling orgInvitationsReject");
      }

      let pathParams = {
        'invitation_token': invitationToken
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/user/invitations/orgs/{invitation_token}/reject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgInvitationsSendNewInvitation operation.
     * @callback module:api/AccountApi~orgInvitationsSendNewInvitationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels an existing organization invitation for the user and sends a new one
     * @param {String} orgName The organization's name
     * @param {String} email The email address of the user to send the password reset mail to.
     * @param {Object} opts Optional parameters
     * @param {module:model/AppInvitationsCreateByEmailRequest} [appInvitationsCreateByEmailRequest] The role of the user to be added
     * @param {module:api/AccountApi~orgInvitationsSendNewInvitationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgInvitationsSendNewInvitation(orgName, email, opts, callback) {
      opts = opts || {};
      let postBody = opts['appInvitationsCreateByEmailRequest'];
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling orgInvitationsSendNewInvitation");
      }
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling orgInvitationsSendNewInvitation");
      }

      let pathParams = {
        'org_name': orgName,
        'email': email
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/invitations/{email}/resend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgInvitationsUpdate operation.
     * @callback module:api/AccountApi~orgInvitationsUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows the role of an invited user to be changed
     * @param {String} orgName The organization's name
     * @param {String} email The email address of the user to send the password reset mail to.
     * @param {module:model/OrgInvitationsUpdateRequest} orgInvitationsUpdateRequest The new role of the user
     * @param {module:api/AccountApi~orgInvitationsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgInvitationsUpdate(orgName, email, orgInvitationsUpdateRequest, callback) {
      let postBody = orgInvitationsUpdateRequest;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling orgInvitationsUpdate");
      }
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling orgInvitationsUpdate");
      }
      // verify the required parameter 'orgInvitationsUpdateRequest' is set
      if (orgInvitationsUpdateRequest === undefined || orgInvitationsUpdateRequest === null) {
        throw new Error("Missing the required parameter 'orgInvitationsUpdateRequest' when calling orgInvitationsUpdate");
      }

      let pathParams = {
        'org_name': orgName,
        'email': email
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/invitations/{email}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizationDeleteAvatar operation.
     * @callback module:api/AccountApi~organizationDeleteAvatarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationsListAdministered200ResponseOrganizations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the uploaded organization avatar
     * @param {String} orgName The organization's name
     * @param {module:api/AccountApi~organizationDeleteAvatarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationsListAdministered200ResponseOrganizations}
     */
    organizationDeleteAvatar(orgName, callback) {
      let postBody = null;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling organizationDeleteAvatar");
      }

      let pathParams = {
        'org_name': orgName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrganizationsListAdministered200ResponseOrganizations;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/avatar', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizationUpdateAvatar operation.
     * @callback module:api/AccountApi~organizationUpdateAvatarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationsListAdministered200ResponseOrganizations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the organization avatar
     * @param {String} orgName The organization's name
     * @param {Object} opts Optional parameters
     * @param {File} [avatar] The image for an Organization avatar to upload.
     * @param {module:api/AccountApi~organizationUpdateAvatarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationsListAdministered200ResponseOrganizations}
     */
    organizationUpdateAvatar(orgName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling organizationUpdateAvatar");
      }

      let pathParams = {
        'org_name': orgName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'avatar': opts['avatar']
      };

      let authNames = ['APIToken'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = OrganizationsListAdministered200ResponseOrganizations;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/avatar', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizationsCreateOrUpdate operation.
     * @callback module:api/AccountApi~organizationsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationsListAdministered200ResponseOrganizations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new organization and returns it to the caller
     * @param {module:model/OrganizationsCreateOrUpdateRequest} organizationsCreateOrUpdateRequest The organization data
     * @param {module:api/AccountApi~organizationsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationsListAdministered200ResponseOrganizations}
     */
    organizationsCreateOrUpdate(organizationsCreateOrUpdateRequest, callback) {
      let postBody = organizationsCreateOrUpdateRequest;
      // verify the required parameter 'organizationsCreateOrUpdateRequest' is set
      if (organizationsCreateOrUpdateRequest === undefined || organizationsCreateOrUpdateRequest === null) {
        throw new Error("Missing the required parameter 'organizationsCreateOrUpdateRequest' when calling organizationsCreateOrUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrganizationsListAdministered200ResponseOrganizations;
      return this.apiClient.callApi(
        '/v0.1/orgs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizationsDelete operation.
     * @callback module:api/AccountApi~organizationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a single organization
     * @param {String} orgName The organization's name
     * @param {module:api/AccountApi~organizationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organizationsDelete(orgName, callback) {
      let postBody = null;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling organizationsDelete");
      }

      let pathParams = {
        'org_name': orgName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizationsGet operation.
     * @callback module:api/AccountApi~organizationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationsListAdministered200ResponseOrganizations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the details of a single organization
     * @param {String} orgName The organization's name
     * @param {module:api/AccountApi~organizationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationsListAdministered200ResponseOrganizations}
     */
    organizationsGet(orgName, callback) {
      let postBody = null;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling organizationsGet");
      }

      let pathParams = {
        'org_name': orgName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrganizationsListAdministered200ResponseOrganizations;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizationsList operation.
     * @callback module:api/AccountApi~organizationsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrganizationsList200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of organizations the requesting user has access to
     * @param {module:api/AccountApi~organizationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrganizationsList200ResponseInner>}
     */
    organizationsList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrganizationsList200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/orgs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizationsListAdministered operation.
     * @callback module:api/AccountApi~organizationsListAdministeredCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationsListAdministered200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list organizations in which the requesting user is an admin
     * @param {module:api/AccountApi~organizationsListAdministeredCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationsListAdministered200Response}
     */
    organizationsListAdministered(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrganizationsListAdministered200Response;
      return this.apiClient.callApi(
        '/v0.1/administeredOrgs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizationsUpdate operation.
     * @callback module:api/AccountApi~organizationsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationsListAdministered200ResponseOrganizations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of organizations the requesting user has access to
     * @param {String} orgName The organization's name
     * @param {module:model/OrganizationsUpdateRequest} organizationsUpdateRequest The data for the org
     * @param {module:api/AccountApi~organizationsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationsListAdministered200ResponseOrganizations}
     */
    organizationsUpdate(orgName, organizationsUpdateRequest, callback) {
      let postBody = organizationsUpdateRequest;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling organizationsUpdate");
      }
      // verify the required parameter 'organizationsUpdateRequest' is set
      if (organizationsUpdateRequest === undefined || organizationsUpdateRequest === null) {
        throw new Error("Missing the required parameter 'organizationsUpdateRequest' when calling organizationsUpdate");
      }

      let pathParams = {
        'org_name': orgName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrganizationsListAdministered200ResponseOrganizations;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sharedconnectionConnections operation.
     * @callback module:api/AccountApi~sharedconnectionConnectionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SharedconnectionConnections200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all service connections of the service type for GDPR export.
     * @param {module:api/AccountApi~sharedconnectionConnectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SharedconnectionConnections200ResponseInner>}
     */
    sharedconnectionConnections(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SharedconnectionConnections200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/user/export/serviceConnections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsAddApp operation.
     * @callback module:api/AccountApi~teamsAddAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamsListApps200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an app to a team
     * @param {String} orgName The organization's name
     * @param {String} teamName The team's name
     * @param {module:model/DistributionGroupsAddAppsRequestAppsInner} distributionGroupsAddAppsRequestAppsInner The name of the app to be added to the team. The app has to be owned by the organization.
     * @param {module:api/AccountApi~teamsAddAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamsListApps200ResponseInner}
     */
    teamsAddApp(orgName, teamName, distributionGroupsAddAppsRequestAppsInner, callback) {
      let postBody = distributionGroupsAddAppsRequestAppsInner;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling teamsAddApp");
      }
      // verify the required parameter 'teamName' is set
      if (teamName === undefined || teamName === null) {
        throw new Error("Missing the required parameter 'teamName' when calling teamsAddApp");
      }
      // verify the required parameter 'distributionGroupsAddAppsRequestAppsInner' is set
      if (distributionGroupsAddAppsRequestAppsInner === undefined || distributionGroupsAddAppsRequestAppsInner === null) {
        throw new Error("Missing the required parameter 'distributionGroupsAddAppsRequestAppsInner' when calling teamsAddApp");
      }

      let pathParams = {
        'org_name': orgName,
        'team_name': teamName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamsListApps200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/teams/{team_name}/apps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsAddUser operation.
     * @callback module:api/AccountApi~teamsAddUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamsGetUsers200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new user to a team that is owned by an organization
     * @param {String} orgName The organization's name
     * @param {String} teamName The team's name
     * @param {module:model/OrgInvitationsDeleteRequest} orgInvitationsDeleteRequest The email of the user to add to the team
     * @param {module:api/AccountApi~teamsAddUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamsGetUsers200Response}
     */
    teamsAddUser(orgName, teamName, orgInvitationsDeleteRequest, callback) {
      let postBody = orgInvitationsDeleteRequest;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling teamsAddUser");
      }
      // verify the required parameter 'teamName' is set
      if (teamName === undefined || teamName === null) {
        throw new Error("Missing the required parameter 'teamName' when calling teamsAddUser");
      }
      // verify the required parameter 'orgInvitationsDeleteRequest' is set
      if (orgInvitationsDeleteRequest === undefined || orgInvitationsDeleteRequest === null) {
        throw new Error("Missing the required parameter 'orgInvitationsDeleteRequest' when calling teamsAddUser");
      }

      let pathParams = {
        'org_name': orgName,
        'team_name': teamName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamsGetUsers200Response;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/teams/{team_name}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsCreateTeam operation.
     * @callback module:api/AccountApi~teamsCreateTeamCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamsListAll200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a team and returns it
     * @param {String} orgName The organization's name
     * @param {module:model/TeamsCreateTeamRequest} teamsCreateTeamRequest The information used to create the team
     * @param {module:api/AccountApi~teamsCreateTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamsListAll200ResponseInner>}
     */
    teamsCreateTeam(orgName, teamsCreateTeamRequest, callback) {
      let postBody = teamsCreateTeamRequest;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling teamsCreateTeam");
      }
      // verify the required parameter 'teamsCreateTeamRequest' is set
      if (teamsCreateTeamRequest === undefined || teamsCreateTeamRequest === null) {
        throw new Error("Missing the required parameter 'teamsCreateTeamRequest' when calling teamsCreateTeam");
      }

      let pathParams = {
        'org_name': orgName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [TeamsListAll200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/teams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsDelete operation.
     * @callback module:api/AccountApi~teamsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a single team
     * @param {String} orgName The organization's name
     * @param {String} teamName The team's name
     * @param {module:api/AccountApi~teamsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsDelete(orgName, teamName, callback) {
      let postBody = null;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling teamsDelete");
      }
      // verify the required parameter 'teamName' is set
      if (teamName === undefined || teamName === null) {
        throw new Error("Missing the required parameter 'teamName' when calling teamsDelete");
      }

      let pathParams = {
        'org_name': orgName,
        'team_name': teamName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/teams/{team_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGetTeam operation.
     * @callback module:api/AccountApi~teamsGetTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamsListAll200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the details of a single team
     * @param {String} orgName The organization's name
     * @param {String} teamName The team's name
     * @param {module:api/AccountApi~teamsGetTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamsListAll200ResponseInner}
     */
    teamsGetTeam(orgName, teamName, callback) {
      let postBody = null;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling teamsGetTeam");
      }
      // verify the required parameter 'teamName' is set
      if (teamName === undefined || teamName === null) {
        throw new Error("Missing the required parameter 'teamName' when calling teamsGetTeam");
      }

      let pathParams = {
        'org_name': orgName,
        'team_name': teamName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamsListAll200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/teams/{team_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGetUsers operation.
     * @callback module:api/AccountApi~teamsGetUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamsGetUsers200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the users of a team which is owned by an organization
     * @param {String} orgName The organization's name
     * @param {String} teamName The team's name
     * @param {module:api/AccountApi~teamsGetUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamsGetUsers200Response}
     */
    teamsGetUsers(orgName, teamName, callback) {
      let postBody = null;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling teamsGetUsers");
      }
      // verify the required parameter 'teamName' is set
      if (teamName === undefined || teamName === null) {
        throw new Error("Missing the required parameter 'teamName' when calling teamsGetUsers");
      }

      let pathParams = {
        'org_name': orgName,
        'team_name': teamName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamsGetUsers200Response;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/teams/{team_name}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsListAll operation.
     * @callback module:api/AccountApi~teamsListAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamsListAll200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of all teams in this org
     * @param {String} orgName The organization's name
     * @param {module:api/AccountApi~teamsListAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamsListAll200ResponseInner>}
     */
    teamsListAll(orgName, callback) {
      let postBody = null;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling teamsListAll");
      }

      let pathParams = {
        'org_name': orgName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamsListAll200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsListApps operation.
     * @callback module:api/AccountApi~teamsListAppsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamsListApps200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the apps a team has access to
     * @param {String} orgName The organization's name
     * @param {String} teamName The team's name
     * @param {module:api/AccountApi~teamsListAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamsListApps200ResponseInner>}
     */
    teamsListApps(orgName, teamName, callback) {
      let postBody = null;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling teamsListApps");
      }
      // verify the required parameter 'teamName' is set
      if (teamName === undefined || teamName === null) {
        throw new Error("Missing the required parameter 'teamName' when calling teamsListApps");
      }

      let pathParams = {
        'org_name': orgName,
        'team_name': teamName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamsListApps200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/teams/{team_name}/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsRemoveApp operation.
     * @callback module:api/AccountApi~teamsRemoveAppCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an app from a team
     * @param {String} orgName The organization's name
     * @param {String} teamName The team's name
     * @param {String} appName The name of the application
     * @param {module:api/AccountApi~teamsRemoveAppCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsRemoveApp(orgName, teamName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling teamsRemoveApp");
      }
      // verify the required parameter 'teamName' is set
      if (teamName === undefined || teamName === null) {
        throw new Error("Missing the required parameter 'teamName' when calling teamsRemoveApp");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling teamsRemoveApp");
      }

      let pathParams = {
        'org_name': orgName,
        'team_name': teamName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsRemoveUser operation.
     * @callback module:api/AccountApi~teamsRemoveUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a user from a team that is owned by an organization
     * @param {String} orgName The organization's name
     * @param {String} teamName The team's name
     * @param {String} userName The slug name of the user
     * @param {module:api/AccountApi~teamsRemoveUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsRemoveUser(orgName, teamName, userName, callback) {
      let postBody = null;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling teamsRemoveUser");
      }
      // verify the required parameter 'teamName' is set
      if (teamName === undefined || teamName === null) {
        throw new Error("Missing the required parameter 'teamName' when calling teamsRemoveUser");
      }
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling teamsRemoveUser");
      }

      let pathParams = {
        'org_name': orgName,
        'team_name': teamName,
        'user_name': userName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/teams/{team_name}/users/{user_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsUpdate operation.
     * @callback module:api/AccountApi~teamsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamsListAll200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a single team
     * @param {String} orgName The organization's name
     * @param {String} teamName The team's name
     * @param {module:model/TeamsUpdateRequest} teamsUpdateRequest The information used to update the team
     * @param {module:api/AccountApi~teamsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamsListAll200ResponseInner}
     */
    teamsUpdate(orgName, teamName, teamsUpdateRequest, callback) {
      let postBody = teamsUpdateRequest;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling teamsUpdate");
      }
      // verify the required parameter 'teamName' is set
      if (teamName === undefined || teamName === null) {
        throw new Error("Missing the required parameter 'teamName' when calling teamsUpdate");
      }
      // verify the required parameter 'teamsUpdateRequest' is set
      if (teamsUpdateRequest === undefined || teamsUpdateRequest === null) {
        throw new Error("Missing the required parameter 'teamsUpdateRequest' when calling teamsUpdate");
      }

      let pathParams = {
        'org_name': orgName,
        'team_name': teamName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamsListAll200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/teams/{team_name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsUpdatePermissions operation.
     * @callback module:api/AccountApi~teamsUpdatePermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamsListApps200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the permissions the team has to the app
     * @param {String} orgName The organization's name
     * @param {String} teamName The team's name
     * @param {String} appName The name of the application
     * @param {module:model/TeamsUpdatePermissionsRequest} teamsUpdatePermissionsRequest 
     * @param {module:api/AccountApi~teamsUpdatePermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamsListApps200ResponseInner}
     */
    teamsUpdatePermissions(orgName, teamName, appName, teamsUpdatePermissionsRequest, callback) {
      let postBody = teamsUpdatePermissionsRequest;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling teamsUpdatePermissions");
      }
      // verify the required parameter 'teamName' is set
      if (teamName === undefined || teamName === null) {
        throw new Error("Missing the required parameter 'teamName' when calling teamsUpdatePermissions");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling teamsUpdatePermissions");
      }
      // verify the required parameter 'teamsUpdatePermissionsRequest' is set
      if (teamsUpdatePermissionsRequest === undefined || teamsUpdatePermissionsRequest === null) {
        throw new Error("Missing the required parameter 'teamsUpdatePermissionsRequest' when calling teamsUpdatePermissions");
      }

      let pathParams = {
        'org_name': orgName,
        'team_name': teamName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamsListApps200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userApiTokensDelete operation.
     * @callback module:api/AccountApi~userApiTokensDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the user api_token object with the specific id
     * @param {String} apiTokenId The unique ID (UUID) of the api token
     * @param {module:api/AccountApi~userApiTokensDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userApiTokensDelete(apiTokenId, callback) {
      let postBody = null;
      // verify the required parameter 'apiTokenId' is set
      if (apiTokenId === undefined || apiTokenId === null) {
        throw new Error("Missing the required parameter 'apiTokenId' when calling userApiTokensDelete");
      }

      let pathParams = {
        'api_token_id': apiTokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/api_tokens/{api_token_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userApiTokensList operation.
     * @callback module:api/AccountApi~userApiTokensListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserApiTokensList200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns api tokens for the authenticated user
     * @param {module:api/AccountApi~userApiTokensListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserApiTokensList200ResponseInner>}
     */
    userApiTokensList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserApiTokensList200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/api_tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userApiTokensNew operation.
     * @callback module:api/AccountApi~userApiTokensNewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserApiTokensNew201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new User API token
     * @param {Object} opts Optional parameters
     * @param {module:model/UserApiTokensNewRequest} [userApiTokensNewRequest] Description of the token
     * @param {module:api/AccountApi~userApiTokensNewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserApiTokensNew201Response}
     */
    userApiTokensNew(opts, callback) {
      opts = opts || {};
      let postBody = opts['userApiTokensNewRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserApiTokensNew201Response;
      return this.apiClient.callApi(
        '/v0.1/api_tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGet operation.
     * @callback module:api/AccountApi~usersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppInvitationsList200ResponseInvitedBy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the user profile data
     * @param {module:api/AccountApi~usersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppInvitationsList200ResponseInvitedBy}
     */
    usersGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppInvitationsList200ResponseInvitedBy;
      return this.apiClient.callApi(
        '/v0.1/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetForOrg operation.
     * @callback module:api/AccountApi~usersGetForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersListForOrg200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user information from an organization by name - if there is explicit permission return it, if not if not return highest implicit permission
     * @param {String} orgName The organization's name
     * @param {String} userName The slug name of the user
     * @param {module:api/AccountApi~usersGetForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersListForOrg200ResponseInner}
     */
    usersGetForOrg(orgName, userName, callback) {
      let postBody = null;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling usersGetForOrg");
      }
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling usersGetForOrg");
      }

      let pathParams = {
        'org_name': orgName,
        'user_name': userName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersListForOrg200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/users/{user_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetUserMetadata operation.
     * @callback module:api/AccountApi~usersGetUserMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersGetUserMetadata200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AccountApi~usersGetUserMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersGetUserMetadata200Response}
     */
    usersGetUserMetadata(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersGetUserMetadata200Response;
      return this.apiClient.callApi(
        '/v0.1/user/metadata/optimizely', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersList operation.
     * @callback module:api/AccountApi~usersListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppInvitationsList200ResponseInvitedBy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the users associated with the app specified with the given app name which belongs to the given owner.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/AccountApi~usersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppInvitationsList200ResponseInvitedBy>}
     */
    usersList(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling usersList");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling usersList");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppInvitationsList200ResponseInvitedBy];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersListForOrg operation.
     * @callback module:api/AccountApi~usersListForOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UsersListForOrg200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of users that belong to an organization
     * @param {String} orgName The organization's name
     * @param {module:api/AccountApi~usersListForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UsersListForOrg200ResponseInner>}
     */
    usersListForOrg(orgName, callback) {
      let postBody = null;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling usersListForOrg");
      }

      let pathParams = {
        'org_name': orgName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UsersListForOrg200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersRemoveFromOrg operation.
     * @callback module:api/AccountApi~usersRemoveFromOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a user from an organization.
     * @param {String} orgName The organization's name
     * @param {String} userName The slug name of the user
     * @param {module:api/AccountApi~usersRemoveFromOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersRemoveFromOrg(orgName, userName, callback) {
      let postBody = null;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling usersRemoveFromOrg");
      }
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling usersRemoveFromOrg");
      }

      let pathParams = {
        'org_name': orgName,
        'user_name': userName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/users/{user_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUpdate operation.
     * @callback module:api/AccountApi~usersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppInvitationsList200ResponseInvitedBy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the user profile and returns the updated user data
     * @param {module:model/UsersUpdateRequest} usersUpdateRequest The data for the created user
     * @param {module:api/AccountApi~usersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppInvitationsList200ResponseInvitedBy}
     */
    usersUpdate(usersUpdateRequest, callback) {
      let postBody = usersUpdateRequest;
      // verify the required parameter 'usersUpdateRequest' is set
      if (usersUpdateRequest === undefined || usersUpdateRequest === null) {
        throw new Error("Missing the required parameter 'usersUpdateRequest' when calling usersUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppInvitationsList200ResponseInvitedBy;
      return this.apiClient.callApi(
        '/v0.1/user', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUpdateOrgRole operation.
     * @callback module:api/AccountApi~usersUpdateOrgRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersListForOrg200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the given organization user
     * @param {String} orgName The organization's name
     * @param {String} userName The slug name of the user
     * @param {module:model/OrgInvitationsUpdateRequest} orgInvitationsUpdateRequest 
     * @param {module:api/AccountApi~usersUpdateOrgRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersListForOrg200ResponseInner}
     */
    usersUpdateOrgRole(orgName, userName, orgInvitationsUpdateRequest, callback) {
      let postBody = orgInvitationsUpdateRequest;
      // verify the required parameter 'orgName' is set
      if (orgName === undefined || orgName === null) {
        throw new Error("Missing the required parameter 'orgName' when calling usersUpdateOrgRole");
      }
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling usersUpdateOrgRole");
      }
      // verify the required parameter 'orgInvitationsUpdateRequest' is set
      if (orgInvitationsUpdateRequest === undefined || orgInvitationsUpdateRequest === null) {
        throw new Error("Missing the required parameter 'orgInvitationsUpdateRequest' when calling usersUpdateOrgRole");
      }

      let pathParams = {
        'org_name': orgName,
        'user_name': userName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UsersListForOrg200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/orgs/{org_name}/users/{user_name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
