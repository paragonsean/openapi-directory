/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppleMappingCreateRequest from '../model/AppleMappingCreateRequest';
import AppleMappingGet200Response from '../model/AppleMappingGet200Response';
import AppleMappingTestFlightGroups200ResponseInner from '../model/AppleMappingTestFlightGroups200ResponseInner';
import DevicesGetReleaseUpdateDevicesStatus200Response from '../model/DevicesGetReleaseUpdateDevicesStatus200Response';
import DevicesList200ResponseInner from '../model/DevicesList200ResponseInner';
import DevicesRegisterUserForDeviceRequest from '../model/DevicesRegisterUserForDeviceRequest';
import DistibutionReleasesInstallAnalyticsRequest from '../model/DistibutionReleasesInstallAnalyticsRequest';
import OrganizationsListAdministeredDefaultResponseError from '../model/OrganizationsListAdministeredDefaultResponseError';
import ProvisioningProfileResponse from '../model/ProvisioningProfileResponse';
import ReleasesAddDistributionGroup201Response from '../model/ReleasesAddDistributionGroup201Response';
import ReleasesAddDistributionGroupRequest from '../model/ReleasesAddDistributionGroupRequest';
import ReleasesAddStore201Response from '../model/ReleasesAddStore201Response';
import ReleasesAddStoreRequest from '../model/ReleasesAddStoreRequest';
import ReleasesAddTestersRequest from '../model/ReleasesAddTestersRequest';
import ReleasesCreateReleaseUpload201Response from '../model/ReleasesCreateReleaseUpload201Response';
import ReleasesCreateReleaseUploadRequest from '../model/ReleasesCreateReleaseUploadRequest';
import ReleasesGetLatestByDistributionGroup200Response from '../model/ReleasesGetLatestByDistributionGroup200Response';
import ReleasesGetPublicGroupsForReleaseByHash200ResponseInner from '../model/ReleasesGetPublicGroupsForReleaseByHash200ResponseInner';
import ReleasesGetReleaseUploadStatus200Response from '../model/ReleasesGetReleaseUploadStatus200Response';
import ReleasesListByDistributionGroup200ResponseInner from '../model/ReleasesListByDistributionGroup200ResponseInner';
import ReleasesListLatest200ResponseInner from '../model/ReleasesListLatest200ResponseInner';
import ReleasesPutDistributionGroupRequest from '../model/ReleasesPutDistributionGroupRequest';
import ReleasesUpdate200Response from '../model/ReleasesUpdate200Response';
import ReleasesUpdateDetails200Response from '../model/ReleasesUpdateDetails200Response';
import ReleasesUpdateDetails400Response from '../model/ReleasesUpdateDetails400Response';
import ReleasesUpdateDetailsRequest from '../model/ReleasesUpdateDetailsRequest';
import ReleasesUpdateReleaseUploadStatus200Response from '../model/ReleasesUpdateReleaseUploadStatus200Response';
import ReleasesUpdateReleaseUploadStatusRequest from '../model/ReleasesUpdateReleaseUploadStatusRequest';
import ReleasesUpdateRequest from '../model/ReleasesUpdateRequest';
import StoreNotificationsGetNotificationByAppId200Response from '../model/StoreNotificationsGetNotificationByAppId200Response';
import StoreReleasesGetLatest200ResponseInner from '../model/StoreReleasesGetLatest200ResponseInner';
import StoreReleasesGetPublishError200Response from '../model/StoreReleasesGetPublishError200Response';
import StoreReleasesGetRealTimeStatusByReleaseId200Response from '../model/StoreReleasesGetRealTimeStatusByReleaseId200Response';
import StoreReleasesList200ResponseInner from '../model/StoreReleasesList200ResponseInner';
import StoresCreateRequest from '../model/StoresCreateRequest';
import StoresList200ResponseInner from '../model/StoresList200ResponseInner';
import StoresPatchRequest from '../model/StoresPatchRequest';

/**
* Distribute service.
* @module api/DistributeApi
* @version v0.1
*/
export default class DistributeApi {

    /**
    * Constructs a new DistributeApi. 
    * @alias module:api/DistributeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appleMappingCreate operation.
     * @callback module:api/DistributeApi~appleMappingCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppleMappingGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a mapping for an existing app in apple store for the specified application.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/AppleMappingCreateRequest} appleMappingCreateRequest The apple app mapping object
     * @param {module:api/DistributeApi~appleMappingCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppleMappingGet200Response}
     */
    appleMappingCreate(ownerName, appName, appleMappingCreateRequest, callback) {
      let postBody = appleMappingCreateRequest;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling appleMappingCreate");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling appleMappingCreate");
      }
      // verify the required parameter 'appleMappingCreateRequest' is set
      if (appleMappingCreateRequest === undefined || appleMappingCreateRequest === null) {
        throw new Error("Missing the required parameter 'appleMappingCreateRequest' when calling appleMappingCreate");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppleMappingGet200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/apple_mapping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appleMappingDelete operation.
     * @callback module:api/DistributeApi~appleMappingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete mapping of apple app to an existing app in apple store.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {String} [body] 
     * @param {module:api/DistributeApi~appleMappingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appleMappingDelete(ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling appleMappingDelete");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling appleMappingDelete");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/apple_mapping', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appleMappingGet operation.
     * @callback module:api/DistributeApi~appleMappingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppleMappingGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get mapping of apple app to an existing app in apple store.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/DistributeApi~appleMappingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppleMappingGet200Response}
     */
    appleMappingGet(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling appleMappingGet");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling appleMappingGet");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppleMappingGet200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/apple_mapping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appleMappingTestFlightGroups operation.
     * @callback module:api/DistributeApi~appleMappingTestFlightGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppleMappingTestFlightGroups200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch all apple test flight groups
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/DistributeApi~appleMappingTestFlightGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppleMappingTestFlightGroups200ResponseInner>}
     */
    appleMappingTestFlightGroups(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling appleMappingTestFlightGroups");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling appleMappingTestFlightGroups");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppleMappingTestFlightGroups200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/apple_test_flight_groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesDeviceDetails operation.
     * @callback module:api/DistributeApi~devicesDeviceDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DevicesList200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the device details.
     * @param {String} deviceUdid The UDID of the device
     * @param {module:api/DistributeApi~devicesDeviceDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DevicesList200ResponseInner}
     */
    devicesDeviceDetails(deviceUdid, callback) {
      let postBody = null;
      // verify the required parameter 'deviceUdid' is set
      if (deviceUdid === undefined || deviceUdid === null) {
        throw new Error("Missing the required parameter 'deviceUdid' when calling devicesDeviceDetails");
      }

      let pathParams = {
        'device_udid': deviceUdid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DevicesList200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/user/devices/{device_udid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesGetReleaseUpdateDevicesStatus operation.
     * @callback module:api/DistributeApi~devicesGetReleaseUpdateDevicesStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DevicesGetReleaseUpdateDevicesStatus200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the resign status to the caller
     * @param {String} releaseId The ID of the release.
     * @param {String} resignId The ID of the resign operation.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeProvisioningProfile] A boolean value that indicates if the provisioning profile should be return in addition to the status. When set to true, the provisioning profile will be returned only when status is 'complete' or 'preparing_for_testers'.
     * @param {module:api/DistributeApi~devicesGetReleaseUpdateDevicesStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DevicesGetReleaseUpdateDevicesStatus200Response}
     */
    devicesGetReleaseUpdateDevicesStatus(releaseId, resignId, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling devicesGetReleaseUpdateDevicesStatus");
      }
      // verify the required parameter 'resignId' is set
      if (resignId === undefined || resignId === null) {
        throw new Error("Missing the required parameter 'resignId' when calling devicesGetReleaseUpdateDevicesStatus");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling devicesGetReleaseUpdateDevicesStatus");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling devicesGetReleaseUpdateDevicesStatus");
      }

      let pathParams = {
        'release_id': releaseId,
        'resign_id': resignId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'include_provisioning_profile': opts['includeProvisioningProfile']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DevicesGetReleaseUpdateDevicesStatus200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/update_devices/{resign_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesList operation.
     * @callback module:api/DistributeApi~devicesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DevicesList200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all devices associated with the given distribution group
     * @param {String} distributionGroupName The name of the distribution group.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Number} [releaseId] when provided, gets the provisioning state of the devices owned by users of this distribution group when compared to the provided release.
     * @param {module:api/DistributeApi~devicesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DevicesList200ResponseInner>}
     */
    devicesList(distributionGroupName, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'distributionGroupName' is set
      if (distributionGroupName === undefined || distributionGroupName === null) {
        throw new Error("Missing the required parameter 'distributionGroupName' when calling devicesList");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling devicesList");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling devicesList");
      }

      let pathParams = {
        'distribution_group_name': distributionGroupName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'release_id': opts['releaseId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DevicesList200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesListCsvFormat operation.
     * @callback module:api/DistributeApi~devicesListCsvFormatCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all devices associated with the given distribution group.
     * @param {String} distributionGroupName The name of the distribution group.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Boolean} [unprovisionedOnly = false)] when true, filters out provisioned devices
     * @param {Array.<String>} [udids] multiple UDIDs which should be part of the resulting CSV.
     * @param {module:api/DistributeApi~devicesListCsvFormatCallback} callback The callback function, accepting three arguments: error, data, response
     */
    devicesListCsvFormat(distributionGroupName, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'distributionGroupName' is set
      if (distributionGroupName === undefined || distributionGroupName === null) {
        throw new Error("Missing the required parameter 'distributionGroupName' when calling devicesListCsvFormat");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling devicesListCsvFormat");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling devicesListCsvFormat");
      }

      let pathParams = {
        'distribution_group_name': distributionGroupName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'unprovisioned_only': opts['unprovisionedOnly'],
        'udids': this.apiClient.buildCollectionParam(opts['udids'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['text/csv'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices/download_devices_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesRegisterUserForDevice operation.
     * @callback module:api/DistributeApi~devicesRegisterUserForDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DevicesList200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers a user for an existing device
     * @param {String} userId The ID of the user
     * @param {module:model/DevicesRegisterUserForDeviceRequest} devicesRegisterUserForDeviceRequest The device info.
     * @param {module:api/DistributeApi~devicesRegisterUserForDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DevicesList200ResponseInner}
     */
    devicesRegisterUserForDevice(userId, devicesRegisterUserForDeviceRequest, callback) {
      let postBody = devicesRegisterUserForDeviceRequest;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling devicesRegisterUserForDevice");
      }
      // verify the required parameter 'devicesRegisterUserForDeviceRequest' is set
      if (devicesRegisterUserForDeviceRequest === undefined || devicesRegisterUserForDeviceRequest === null) {
        throw new Error("Missing the required parameter 'devicesRegisterUserForDeviceRequest' when calling devicesRegisterUserForDevice");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DevicesList200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/users/{user_id}/devices/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesRemoveUserDevice operation.
     * @callback module:api/DistributeApi~devicesRemoveUserDeviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an existing device from a user
     * @param {String} deviceUdid The UDID of the device
     * @param {module:api/DistributeApi~devicesRemoveUserDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    devicesRemoveUserDevice(deviceUdid, callback) {
      let postBody = null;
      // verify the required parameter 'deviceUdid' is set
      if (deviceUdid === undefined || deviceUdid === null) {
        throw new Error("Missing the required parameter 'deviceUdid' when calling devicesRemoveUserDevice");
      }

      let pathParams = {
        'device_udid': deviceUdid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/user/devices/{device_udid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesUserDevicesList operation.
     * @callback module:api/DistributeApi~devicesUserDevicesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DevicesList200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all devices associated with the given user.
     * @param {module:api/DistributeApi~devicesUserDevicesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DevicesList200ResponseInner>}
     */
    devicesUserDevicesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DevicesList200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/user/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distibutionReleasesInstallAnalytics operation.
     * @callback module:api/DistributeApi~distibutionReleasesInstallAnalyticsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Notify download(s) for the provided distribution release(s).
     * @param {String} ownerName The name of the app owner
     * @param {String} appName The name of the app
     * @param {module:model/DistibutionReleasesInstallAnalyticsRequest} distibutionReleasesInstallAnalyticsRequest The install analytics request payload
     * @param {module:api/DistributeApi~distibutionReleasesInstallAnalyticsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    distibutionReleasesInstallAnalytics(ownerName, appName, distibutionReleasesInstallAnalyticsRequest, callback) {
      let postBody = distibutionReleasesInstallAnalyticsRequest;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling distibutionReleasesInstallAnalytics");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling distibutionReleasesInstallAnalytics");
      }
      // verify the required parameter 'distibutionReleasesInstallAnalyticsRequest' is set
      if (distibutionReleasesInstallAnalyticsRequest === undefined || distibutionReleasesInstallAnalyticsRequest === null) {
        throw new Error("Missing the required parameter 'distibutionReleasesInstallAnalyticsRequest' when calling distibutionReleasesInstallAnalytics");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/public/apps/{owner_name}/{app_name}/install_analytics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the provisioningProfile operation.
     * @callback module:api/DistributeApi~provisioningProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProvisioningProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return information about the provisioning profile. Only available for iOS.
     * @param {Number} releaseId The release_id
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/DistributeApi~provisioningProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProvisioningProfileResponse}
     */
    provisioningProfile(releaseId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling provisioningProfile");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling provisioningProfile");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling provisioningProfile");
      }

      let pathParams = {
        'release_id': releaseId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProvisioningProfileResponse;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/provisioning_profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesAddDistributionGroup operation.
     * @callback module:api/DistributeApi~releasesAddDistributionGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReleasesAddDistributionGroup201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Distributes a release to a group
     * @param {Number} releaseId The ID of the release
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/ReleasesAddDistributionGroupRequest} releasesAddDistributionGroupRequest The release information.
     * @param {module:api/DistributeApi~releasesAddDistributionGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReleasesAddDistributionGroup201Response}
     */
    releasesAddDistributionGroup(releaseId, ownerName, appName, releasesAddDistributionGroupRequest, callback) {
      let postBody = releasesAddDistributionGroupRequest;
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling releasesAddDistributionGroup");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling releasesAddDistributionGroup");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling releasesAddDistributionGroup");
      }
      // verify the required parameter 'releasesAddDistributionGroupRequest' is set
      if (releasesAddDistributionGroupRequest === undefined || releasesAddDistributionGroupRequest === null) {
        throw new Error("Missing the required parameter 'releasesAddDistributionGroupRequest' when calling releasesAddDistributionGroup");
      }

      let pathParams = {
        'release_id': releaseId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReleasesAddDistributionGroup201Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesAddStore operation.
     * @callback module:api/DistributeApi~releasesAddStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReleasesAddStore201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Distributes a release to a store
     * @param {Number} releaseId The ID of the release
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/ReleasesAddStoreRequest} releasesAddStoreRequest The release information.
     * @param {module:api/DistributeApi~releasesAddStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReleasesAddStore201Response}
     */
    releasesAddStore(releaseId, ownerName, appName, releasesAddStoreRequest, callback) {
      let postBody = releasesAddStoreRequest;
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling releasesAddStore");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling releasesAddStore");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling releasesAddStore");
      }
      // verify the required parameter 'releasesAddStoreRequest' is set
      if (releasesAddStoreRequest === undefined || releasesAddStoreRequest === null) {
        throw new Error("Missing the required parameter 'releasesAddStoreRequest' when calling releasesAddStore");
      }

      let pathParams = {
        'release_id': releaseId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReleasesAddStore201Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesAddTesters operation.
     * @callback module:api/DistributeApi~releasesAddTestersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReleasesAddDistributionGroup201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Distributes a release to a user
     * @param {Number} releaseId The ID of the release
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/ReleasesAddTestersRequest} releasesAddTestersRequest The release information.
     * @param {module:api/DistributeApi~releasesAddTestersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReleasesAddDistributionGroup201Response}
     */
    releasesAddTesters(releaseId, ownerName, appName, releasesAddTestersRequest, callback) {
      let postBody = releasesAddTestersRequest;
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling releasesAddTesters");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling releasesAddTesters");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling releasesAddTesters");
      }
      // verify the required parameter 'releasesAddTestersRequest' is set
      if (releasesAddTestersRequest === undefined || releasesAddTestersRequest === null) {
        throw new Error("Missing the required parameter 'releasesAddTestersRequest' when calling releasesAddTesters");
      }

      let pathParams = {
        'release_id': releaseId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReleasesAddDistributionGroup201Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesAvailableToTester operation.
     * @callback module:api/DistributeApi~releasesAvailableToTesterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReleasesListLatest200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return detailed information about releases avaiable to a tester.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Boolean} [publishedOnly] when *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out.
     * @param {module:api/DistributeApi~releasesAvailableToTesterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReleasesListLatest200ResponseInner>}
     */
    releasesAvailableToTester(ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling releasesAvailableToTester");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling releasesAvailableToTester");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'published_only': opts['publishedOnly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ReleasesListLatest200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/releases/filter_by_tester', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesCreateReleaseUpload operation.
     * @callback module:api/DistributeApi~releasesCreateReleaseUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReleasesCreateReleaseUpload201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate a new release upload. This API is part of multi-step upload process.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {module:model/ReleasesCreateReleaseUploadRequest} [releasesCreateReleaseUploadRequest] Optional parameters to create releases with user defined metadata
     * @param {module:api/DistributeApi~releasesCreateReleaseUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReleasesCreateReleaseUpload201Response}
     */
    releasesCreateReleaseUpload(ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = opts['releasesCreateReleaseUploadRequest'];
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling releasesCreateReleaseUpload");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling releasesCreateReleaseUpload");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReleasesCreateReleaseUpload201Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/uploads/releases', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesDelete operation.
     * @callback module:api/DistributeApi~releasesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a release.
     * @param {Number} releaseId The ID of the release
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/DistributeApi~releasesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    releasesDelete(releaseId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling releasesDelete");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling releasesDelete");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling releasesDelete");
      }

      let pathParams = {
        'release_id': releaseId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesDeleteDistributionGroup operation.
     * @callback module:api/DistributeApi~releasesDeleteDistributionGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the given distribution group from the release
     * @param {Number} releaseId The ID of the release
     * @param {String} groupId The id of the distribution group
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/DistributeApi~releasesDeleteDistributionGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    releasesDeleteDistributionGroup(releaseId, groupId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling releasesDeleteDistributionGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling releasesDeleteDistributionGroup");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling releasesDeleteDistributionGroup");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling releasesDeleteDistributionGroup");
      }

      let pathParams = {
        'release_id': releaseId,
        'group_id': groupId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups/{group_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesDeleteDistributionStore operation.
     * @callback module:api/DistributeApi~releasesDeleteDistributionStoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the given distribution store from the release
     * @param {Number} releaseId The ID of the release
     * @param {String} storeId The id of the distribution store
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/DistributeApi~releasesDeleteDistributionStoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    releasesDeleteDistributionStore(releaseId, storeId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling releasesDeleteDistributionStore");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling releasesDeleteDistributionStore");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling releasesDeleteDistributionStore");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling releasesDeleteDistributionStore");
      }

      let pathParams = {
        'release_id': releaseId,
        'store_id': storeId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores/{store_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesDeleteDistributionTester operation.
     * @callback module:api/DistributeApi~releasesDeleteDistributionTesterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the given tester from the release
     * @param {Number} releaseId The ID of the release
     * @param {String} testerId The id of the tester
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/DistributeApi~releasesDeleteDistributionTesterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    releasesDeleteDistributionTester(releaseId, testerId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling releasesDeleteDistributionTester");
      }
      // verify the required parameter 'testerId' is set
      if (testerId === undefined || testerId === null) {
        throw new Error("Missing the required parameter 'testerId' when calling releasesDeleteDistributionTester");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling releasesDeleteDistributionTester");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling releasesDeleteDistributionTester");
      }

      let pathParams = {
        'release_id': releaseId,
        'tester_id': testerId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers/{tester_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesDeleteTesterFromDestinations operation.
     * @callback module:api/DistributeApi~releasesDeleteTesterFromDestinationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the given tester from the all releases
     * @param {String} testerId The id of the tester
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/DistributeApi~releasesDeleteTesterFromDestinationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    releasesDeleteTesterFromDestinations(testerId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'testerId' is set
      if (testerId === undefined || testerId === null) {
        throw new Error("Missing the required parameter 'testerId' when calling releasesDeleteTesterFromDestinations");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling releasesDeleteTesterFromDestinations");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling releasesDeleteTesterFromDestinations");
      }

      let pathParams = {
        'tester_id': testerId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/testers/{tester_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesDeleteWithDistributionGroupId operation.
     * @callback module:api/DistributeApi~releasesDeleteWithDistributionGroupIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a release with id 'release_id' in a given distribution group.
     * @param {String} ownerName The name of the app owner
     * @param {String} appName The name of the app
     * @param {String} distributionGroupName The name of the distribution group.
     * @param {Number} releaseId The ID identifying the unique release.
     * @param {module:api/DistributeApi~releasesDeleteWithDistributionGroupIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    releasesDeleteWithDistributionGroupId(ownerName, appName, distributionGroupName, releaseId, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling releasesDeleteWithDistributionGroupId");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling releasesDeleteWithDistributionGroupId");
      }
      // verify the required parameter 'distributionGroupName' is set
      if (distributionGroupName === undefined || distributionGroupName === null) {
        throw new Error("Missing the required parameter 'distributionGroupName' when calling releasesDeleteWithDistributionGroupId");
      }
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling releasesDeleteWithDistributionGroupId");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName,
        'distribution_group_name': distributionGroupName,
        'release_id': releaseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesGetIosManifest operation.
     * @callback module:api/DistributeApi~releasesGetIosManifestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the manifest.plist in XML format for installing the release on a device. Only available for iOS.
     * @param {String} appId The ID of the application
     * @param {Number} releaseId The release_id
     * @param {String} token A hash that authorizes the download if it matches the release info.
     * @param {module:api/DistributeApi~releasesGetIosManifestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    releasesGetIosManifest(appId, releaseId, token, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling releasesGetIosManifest");
      }
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling releasesGetIosManifest");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling releasesGetIosManifest");
      }

      let pathParams = {
        'app_id': appId,
        'release_id': releaseId
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/public/apps/{app_id}/releases/{release_id}/ios_manifest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesGetLatestByDistributionGroup operation.
     * @callback module:api/DistributeApi~releasesGetLatestByDistributionGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReleasesGetLatestByDistributionGroup200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return detailed information about a distributed release in a given distribution group.
     * @param {String} ownerName The name of the app owner
     * @param {String} appName The name of the app
     * @param {String} distributionGroupName The name of the distribution group.
     * @param {String} releaseId Also supports the constant `latest`, which will return the latest release in the distribution group.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isInstallPage] The check if the request is from Install page
     * @param {module:api/DistributeApi~releasesGetLatestByDistributionGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReleasesGetLatestByDistributionGroup200Response}
     */
    releasesGetLatestByDistributionGroup(ownerName, appName, distributionGroupName, releaseId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling releasesGetLatestByDistributionGroup");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling releasesGetLatestByDistributionGroup");
      }
      // verify the required parameter 'distributionGroupName' is set
      if (distributionGroupName === undefined || distributionGroupName === null) {
        throw new Error("Missing the required parameter 'distributionGroupName' when calling releasesGetLatestByDistributionGroup");
      }
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling releasesGetLatestByDistributionGroup");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName,
        'distribution_group_name': distributionGroupName,
        'release_id': releaseId
      };
      let queryParams = {
        'is_install_page': opts['isInstallPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReleasesGetLatestByDistributionGroup200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesGetLatestByHash operation.
     * @callback module:api/DistributeApi~releasesGetLatestByHashCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReleasesGetLatestByDistributionGroup200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * If 'latest' is not specified then it will return the specified release if it's enabled. If 'latest' is specified, regardless of whether a release hash is provided, the latest enabled release is returned.
     * @param {String} appSecret The secret of the target application
     * @param {String} releaseHash The hash of the release or 'latest' to get the latest release from all the distribution groups assigned to the current user.
     * @param {Object} opts Optional parameters
     * @param {String} [udid] When passing `udid` in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms.
     * @param {module:api/DistributeApi~releasesGetLatestByHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReleasesGetLatestByDistributionGroup200Response}
     */
    releasesGetLatestByHash(appSecret, releaseHash, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appSecret' is set
      if (appSecret === undefined || appSecret === null) {
        throw new Error("Missing the required parameter 'appSecret' when calling releasesGetLatestByHash");
      }
      // verify the required parameter 'releaseHash' is set
      if (releaseHash === undefined || releaseHash === null) {
        throw new Error("Missing the required parameter 'releaseHash' when calling releasesGetLatestByHash");
      }

      let pathParams = {
        'app_secret': appSecret,
        'release_hash': releaseHash
      };
      let queryParams = {
        'udid': opts['udid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReleasesGetLatestByDistributionGroup200Response;
      return this.apiClient.callApi(
        '/v0.1/sdk/apps/{app_secret}/releases/{release_hash}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesGetLatestByPublicDistributionGroup operation.
     * @callback module:api/DistributeApi~releasesGetLatestByPublicDistributionGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReleasesGetLatestByDistributionGroup200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a release with 'latest' for the given public group.
     * @param {String} appSecret The secret of the target application
     * @param {String} distributionGroupId the id for destination
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isInstallPage] The check if the request is from Install page
     * @param {module:api/DistributeApi~releasesGetLatestByPublicDistributionGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReleasesGetLatestByDistributionGroup200Response}
     */
    releasesGetLatestByPublicDistributionGroup(appSecret, distributionGroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appSecret' is set
      if (appSecret === undefined || appSecret === null) {
        throw new Error("Missing the required parameter 'appSecret' when calling releasesGetLatestByPublicDistributionGroup");
      }
      // verify the required parameter 'distributionGroupId' is set
      if (distributionGroupId === undefined || distributionGroupId === null) {
        throw new Error("Missing the required parameter 'distributionGroupId' when calling releasesGetLatestByPublicDistributionGroup");
      }

      let pathParams = {
        'app_secret': appSecret,
        'distribution_group_id': distributionGroupId
      };
      let queryParams = {
        'is_install_page': opts['isInstallPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReleasesGetLatestByDistributionGroup200Response;
      return this.apiClient.callApi(
        '/v0.1/public/sdk/apps/{app_secret}/distribution_groups/{distribution_group_id}/releases/latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesGetLatestByUser operation.
     * @callback module:api/DistributeApi~releasesGetLatestByUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReleasesGetLatestByDistributionGroup200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a release with id `release_id`. If `release_id` is `latest`, return the latest release that was distributed to the current user (from all the distribution groups).
     * @param {String} releaseId The ID of the release, or `latest` to get the latest release from all the distribution groups assigned to the current user.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {String} [udid] when supplied, this call will also check if the given UDID is provisioned. Will be ignored for non-iOS platforms. The value will be returned in the property is_udid_provisioned.
     * @param {Boolean} [isInstallPage] The check if the request is from Install page
     * @param {module:api/DistributeApi~releasesGetLatestByUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReleasesGetLatestByDistributionGroup200Response}
     */
    releasesGetLatestByUser(releaseId, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling releasesGetLatestByUser");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling releasesGetLatestByUser");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling releasesGetLatestByUser");
      }

      let pathParams = {
        'release_id': releaseId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'udid': opts['udid'],
        'is_install_page': opts['isInstallPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReleasesGetLatestByDistributionGroup200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesGetLatestPrivateRelease operation.
     * @callback module:api/DistributeApi~releasesGetLatestPrivateReleaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReleasesGetLatestByDistributionGroup200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the latest release distributed to a private group the given user is a member of for the given app.
     * @param {String} appSecret The secret of the target application
     * @param {Object} opts Optional parameters
     * @param {String} [udid] When passing `udid` in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms.
     * @param {module:api/DistributeApi~releasesGetLatestPrivateReleaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReleasesGetLatestByDistributionGroup200Response}
     */
    releasesGetLatestPrivateRelease(appSecret, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appSecret' is set
      if (appSecret === undefined || appSecret === null) {
        throw new Error("Missing the required parameter 'appSecret' when calling releasesGetLatestPrivateRelease");
      }

      let pathParams = {
        'app_secret': appSecret
      };
      let queryParams = {
        'udid': opts['udid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReleasesGetLatestByDistributionGroup200Response;
      return this.apiClient.callApi(
        '/v0.1/sdk/apps/{app_secret}/releases/private/latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesGetLatestPublicRelease operation.
     * @callback module:api/DistributeApi~releasesGetLatestPublicReleaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReleasesGetLatestByDistributionGroup200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the latest public release for the given app.
     * @param {String} appSecret The secret of the target application
     * @param {module:api/DistributeApi~releasesGetLatestPublicReleaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReleasesGetLatestByDistributionGroup200Response}
     */
    releasesGetLatestPublicRelease(appSecret, callback) {
      let postBody = null;
      // verify the required parameter 'appSecret' is set
      if (appSecret === undefined || appSecret === null) {
        throw new Error("Missing the required parameter 'appSecret' when calling releasesGetLatestPublicRelease");
      }

      let pathParams = {
        'app_secret': appSecret
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReleasesGetLatestByDistributionGroup200Response;
      return this.apiClient.callApi(
        '/v0.1/public/sdk/apps/{app_secret}/releases/latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesGetPublicGroupsForReleaseByHash operation.
     * @callback module:api/DistributeApi~releasesGetPublicGroupsForReleaseByHashCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReleasesGetPublicGroupsForReleaseByHash200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all public distribution groups that a given release has been distributed to
     * @param {String} appSecret The secret of the target application
     * @param {String} releaseHash The hash of the release
     * @param {module:api/DistributeApi~releasesGetPublicGroupsForReleaseByHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReleasesGetPublicGroupsForReleaseByHash200ResponseInner>}
     */
    releasesGetPublicGroupsForReleaseByHash(appSecret, releaseHash, callback) {
      let postBody = null;
      // verify the required parameter 'appSecret' is set
      if (appSecret === undefined || appSecret === null) {
        throw new Error("Missing the required parameter 'appSecret' when calling releasesGetPublicGroupsForReleaseByHash");
      }
      // verify the required parameter 'releaseHash' is set
      if (releaseHash === undefined || releaseHash === null) {
        throw new Error("Missing the required parameter 'releaseHash' when calling releasesGetPublicGroupsForReleaseByHash");
      }

      let pathParams = {
        'app_secret': appSecret,
        'release_hash': releaseHash
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ReleasesGetPublicGroupsForReleaseByHash200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/public/sdk/apps/{app_secret}/releases/{release_hash}/public_distribution_groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesGetReleaseUploadStatus operation.
     * @callback module:api/DistributeApi~releasesGetReleaseUploadStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReleasesGetReleaseUploadStatus200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current status of the release upload.
     * @param {String} uploadId The ID of the release upload
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/DistributeApi~releasesGetReleaseUploadStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReleasesGetReleaseUploadStatus200Response}
     */
    releasesGetReleaseUploadStatus(uploadId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling releasesGetReleaseUploadStatus");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling releasesGetReleaseUploadStatus");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling releasesGetReleaseUploadStatus");
      }

      let pathParams = {
        'upload_id': uploadId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReleasesGetReleaseUploadStatus200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/uploads/releases/{upload_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesGetSparkleFeed operation.
     * @callback module:api/DistributeApi~releasesGetSparkleFeedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the sparkle feed of the releases that are distributed to all the public distribution groups.
     * @param {String} appSecret The secret of the application.
     * @param {module:api/DistributeApi~releasesGetSparkleFeedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    releasesGetSparkleFeed(appSecret, callback) {
      let postBody = null;
      // verify the required parameter 'appSecret' is set
      if (appSecret === undefined || appSecret === null) {
        throw new Error("Missing the required parameter 'appSecret' when calling releasesGetSparkleFeed");
      }

      let pathParams = {
        'app_secret': appSecret
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/public/sparkle/apps/{app_secret}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesList operation.
     * @callback module:api/DistributeApi~releasesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReleasesListLatest200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return basic information about releases.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Boolean} [publishedOnly] When *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out.
     * @param {String} [scope] When the scope is 'tester', only includes releases that have been distributed to groups that the user belongs to.
     * @param {Number} [top] The number of releases to return
     * @param {Number} [releaseId] The id of a release
     * @param {module:api/DistributeApi~releasesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReleasesListLatest200ResponseInner>}
     */
    releasesList(ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling releasesList");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling releasesList");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'published_only': opts['publishedOnly'],
        'scope': opts['scope'],
        'top': opts['top'],
        'releaseId': opts['releaseId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ReleasesListLatest200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/releases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesListByDistributionGroup operation.
     * @callback module:api/DistributeApi~releasesListByDistributionGroupCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReleasesListByDistributionGroup200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return basic information about distributed releases in a given distribution group.
     * @param {String} distributionGroupName The name of the distribution group.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/DistributeApi~releasesListByDistributionGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReleasesListByDistributionGroup200ResponseInner>}
     */
    releasesListByDistributionGroup(distributionGroupName, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'distributionGroupName' is set
      if (distributionGroupName === undefined || distributionGroupName === null) {
        throw new Error("Missing the required parameter 'distributionGroupName' when calling releasesListByDistributionGroup");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling releasesListByDistributionGroup");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling releasesListByDistributionGroup");
      }

      let pathParams = {
        'distribution_group_name': distributionGroupName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ReleasesListByDistributionGroup200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesListLatest operation.
     * @callback module:api/DistributeApi~releasesListLatestCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReleasesListLatest200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the latest release from every distribution group associated with an application.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/DistributeApi~releasesListLatestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReleasesListLatest200ResponseInner>}
     */
    releasesListLatest(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling releasesListLatest");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling releasesListLatest");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ReleasesListLatest200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/recent_releases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesPutDistributionGroup operation.
     * @callback module:api/DistributeApi~releasesPutDistributionGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update details about the specified distribution group associated with the release
     * @param {Number} releaseId The ID of the release
     * @param {String} groupId The id of the releases destination
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {module:model/ReleasesPutDistributionGroupRequest} [releasesPutDistributionGroupRequest] 
     * @param {module:api/DistributeApi~releasesPutDistributionGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    releasesPutDistributionGroup(releaseId, groupId, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = opts['releasesPutDistributionGroupRequest'];
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling releasesPutDistributionGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling releasesPutDistributionGroup");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling releasesPutDistributionGroup");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling releasesPutDistributionGroup");
      }

      let pathParams = {
        'release_id': releaseId,
        'group_id': groupId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups/{group_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesPutDistributionTester operation.
     * @callback module:api/DistributeApi~releasesPutDistributionTesterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update details about the specified tester associated with the release
     * @param {Number} releaseId The ID of the release
     * @param {String} testerId The id of the tester
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {module:model/ReleasesPutDistributionGroupRequest} [releasesPutDistributionGroupRequest] 
     * @param {module:api/DistributeApi~releasesPutDistributionTesterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    releasesPutDistributionTester(releaseId, testerId, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = opts['releasesPutDistributionGroupRequest'];
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling releasesPutDistributionTester");
      }
      // verify the required parameter 'testerId' is set
      if (testerId === undefined || testerId === null) {
        throw new Error("Missing the required parameter 'testerId' when calling releasesPutDistributionTester");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling releasesPutDistributionTester");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling releasesPutDistributionTester");
      }

      let pathParams = {
        'release_id': releaseId,
        'tester_id': testerId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers/{tester_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesUpdate operation.
     * @callback module:api/DistributeApi~releasesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReleasesUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a release.
     * @param {Number} releaseId The ID of the release
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/ReleasesUpdateRequest} releasesUpdateRequest The release information.
     * @param {module:api/DistributeApi~releasesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReleasesUpdate200Response}
     */
    releasesUpdate(releaseId, ownerName, appName, releasesUpdateRequest, callback) {
      let postBody = releasesUpdateRequest;
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling releasesUpdate");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling releasesUpdate");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling releasesUpdate");
      }
      // verify the required parameter 'releasesUpdateRequest' is set
      if (releasesUpdateRequest === undefined || releasesUpdateRequest === null) {
        throw new Error("Missing the required parameter 'releasesUpdateRequest' when calling releasesUpdate");
      }

      let pathParams = {
        'release_id': releaseId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = ReleasesUpdate200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesUpdateDetails operation.
     * @callback module:api/DistributeApi~releasesUpdateDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReleasesUpdateDetails200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update details of a release.
     * @param {Number} releaseId The ID of the release
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/ReleasesUpdateDetailsRequest} releasesUpdateDetailsRequest The release information.
     * @param {module:api/DistributeApi~releasesUpdateDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReleasesUpdateDetails200Response}
     */
    releasesUpdateDetails(releaseId, ownerName, appName, releasesUpdateDetailsRequest, callback) {
      let postBody = releasesUpdateDetailsRequest;
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling releasesUpdateDetails");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling releasesUpdateDetails");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling releasesUpdateDetails");
      }
      // verify the required parameter 'releasesUpdateDetailsRequest' is set
      if (releasesUpdateDetailsRequest === undefined || releasesUpdateDetailsRequest === null) {
        throw new Error("Missing the required parameter 'releasesUpdateDetailsRequest' when calling releasesUpdateDetails");
      }

      let pathParams = {
        'release_id': releaseId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReleasesUpdateDetails200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasesUpdateReleaseUploadStatus operation.
     * @callback module:api/DistributeApi~releasesUpdateReleaseUploadStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReleasesUpdateReleaseUploadStatus200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the current status of the release upload.
     * @param {String} uploadId The ID of the release upload
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/ReleasesUpdateReleaseUploadStatusRequest} releasesUpdateReleaseUploadStatusRequest The release upload status information.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [extract] A flag that indicates to extract release or not, true by default
     * @param {module:api/DistributeApi~releasesUpdateReleaseUploadStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReleasesUpdateReleaseUploadStatus200Response}
     */
    releasesUpdateReleaseUploadStatus(uploadId, ownerName, appName, releasesUpdateReleaseUploadStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = releasesUpdateReleaseUploadStatusRequest;
      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling releasesUpdateReleaseUploadStatus");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling releasesUpdateReleaseUploadStatus");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling releasesUpdateReleaseUploadStatus");
      }
      // verify the required parameter 'releasesUpdateReleaseUploadStatusRequest' is set
      if (releasesUpdateReleaseUploadStatusRequest === undefined || releasesUpdateReleaseUploadStatusRequest === null) {
        throw new Error("Missing the required parameter 'releasesUpdateReleaseUploadStatusRequest' when calling releasesUpdateReleaseUploadStatus");
      }

      let pathParams = {
        'upload_id': uploadId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'extract': opts['extract']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReleasesUpdateReleaseUploadStatus200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/uploads/releases/{upload_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeNotificationsGetNotificationByAppId operation.
     * @callback module:api/DistributeApi~storeNotificationsGetNotificationByAppIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoreNotificationsGetNotificationByAppId200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Application specific store service status
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/DistributeApi~storeNotificationsGetNotificationByAppIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoreNotificationsGetNotificationByAppId200Response}
     */
    storeNotificationsGetNotificationByAppId(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling storeNotificationsGetNotificationByAppId");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling storeNotificationsGetNotificationByAppId");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StoreNotificationsGetNotificationByAppId200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/store_service_status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeReleasePublishLogsGet operation.
     * @callback module:api/DistributeApi~storeReleasePublishLogsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns publish logs for a particular release published to a particular store
     * @param {String} storeName The name of the store
     * @param {String} releaseId The ID of the realease
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/DistributeApi~storeReleasePublishLogsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeReleasePublishLogsGet(storeName, releaseId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'storeName' is set
      if (storeName === undefined || storeName === null) {
        throw new Error("Missing the required parameter 'storeName' when calling storeReleasePublishLogsGet");
      }
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling storeReleasePublishLogsGet");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling storeReleasePublishLogsGet");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling storeReleasePublishLogsGet");
      }

      let pathParams = {
        'store_name': storeName,
        'release_id': releaseId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeReleasesDelete operation.
     * @callback module:api/DistributeApi~storeReleasesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete the release with release Id
     * @param {String} storeName The name of the store
     * @param {String} releaseId The id of the release
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {String} [body] 
     * @param {module:api/DistributeApi~storeReleasesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeReleasesDelete(storeName, releaseId, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'storeName' is set
      if (storeName === undefined || storeName === null) {
        throw new Error("Missing the required parameter 'storeName' when calling storeReleasesDelete");
      }
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling storeReleasesDelete");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling storeReleasesDelete");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling storeReleasesDelete");
      }

      let pathParams = {
        'store_name': storeName,
        'release_id': releaseId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeReleasesGet operation.
     * @callback module:api/DistributeApi~storeReleasesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StoreReleasesGetLatest200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return releases published in a store for releaseId and storeId
     * @param {String} storeName The name of the store
     * @param {String} releaseId The name of the store
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/DistributeApi~storeReleasesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/StoreReleasesGetLatest200ResponseInner>}
     */
    storeReleasesGet(storeName, releaseId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'storeName' is set
      if (storeName === undefined || storeName === null) {
        throw new Error("Missing the required parameter 'storeName' when calling storeReleasesGet");
      }
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling storeReleasesGet");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling storeReleasesGet");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling storeReleasesGet");
      }

      let pathParams = {
        'store_name': storeName,
        'release_id': releaseId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [StoreReleasesGetLatest200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeReleasesGetLatest operation.
     * @callback module:api/DistributeApi~storeReleasesGetLatestCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StoreReleasesGetLatest200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the latest release published in a store.
     * @param {String} storeName The name of the store
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/DistributeApi~storeReleasesGetLatestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/StoreReleasesGetLatest200ResponseInner>}
     */
    storeReleasesGetLatest(storeName, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'storeName' is set
      if (storeName === undefined || storeName === null) {
        throw new Error("Missing the required parameter 'storeName' when calling storeReleasesGetLatest");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling storeReleasesGetLatest");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling storeReleasesGetLatest");
      }

      let pathParams = {
        'store_name': storeName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [StoreReleasesGetLatest200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/latest_release', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeReleasesGetPublishError operation.
     * @callback module:api/DistributeApi~storeReleasesGetPublishErrorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoreReleasesGetPublishError200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the Error Details of release which failed in publishing.
     * @param {String} storeName The name of the store
     * @param {Number} releaseId The id of the release
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/DistributeApi~storeReleasesGetPublishErrorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoreReleasesGetPublishError200Response}
     */
    storeReleasesGetPublishError(storeName, releaseId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'storeName' is set
      if (storeName === undefined || storeName === null) {
        throw new Error("Missing the required parameter 'storeName' when calling storeReleasesGetPublishError");
      }
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling storeReleasesGetPublishError");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling storeReleasesGetPublishError");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling storeReleasesGetPublishError");
      }

      let pathParams = {
        'store_name': storeName,
        'release_id': releaseId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StoreReleasesGetPublishError200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_error_details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeReleasesGetRealTimeStatusByReleaseId operation.
     * @callback module:api/DistributeApi~storeReleasesGetRealTimeStatusByReleaseIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoreReleasesGetRealTimeStatusByReleaseId200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the Real time Status publishing of release from store.
     * @param {String} storeName The name of the store
     * @param {Number} releaseId The id of the release
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/DistributeApi~storeReleasesGetRealTimeStatusByReleaseIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoreReleasesGetRealTimeStatusByReleaseId200Response}
     */
    storeReleasesGetRealTimeStatusByReleaseId(storeName, releaseId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'storeName' is set
      if (storeName === undefined || storeName === null) {
        throw new Error("Missing the required parameter 'storeName' when calling storeReleasesGetRealTimeStatusByReleaseId");
      }
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling storeReleasesGetRealTimeStatusByReleaseId");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling storeReleasesGetRealTimeStatusByReleaseId");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling storeReleasesGetRealTimeStatusByReleaseId");
      }

      let pathParams = {
        'store_name': storeName,
        'release_id': releaseId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StoreReleasesGetRealTimeStatusByReleaseId200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/realtimestatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeReleasesList operation.
     * @callback module:api/DistributeApi~storeReleasesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StoreReleasesList200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all releases published  in a store
     * @param {String} storeName The name of the store
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/DistributeApi~storeReleasesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/StoreReleasesList200ResponseInner>}
     */
    storeReleasesList(storeName, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'storeName' is set
      if (storeName === undefined || storeName === null) {
        throw new Error("Missing the required parameter 'storeName' when calling storeReleasesList");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling storeReleasesList");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling storeReleasesList");
      }

      let pathParams = {
        'store_name': storeName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [StoreReleasesList200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storesCreate operation.
     * @callback module:api/DistributeApi~storesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoresList200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new external store for the specified application.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/StoresCreateRequest} storesCreateRequest The store request
     * @param {module:api/DistributeApi~storesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoresList200ResponseInner}
     */
    storesCreate(ownerName, appName, storesCreateRequest, callback) {
      let postBody = storesCreateRequest;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling storesCreate");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling storesCreate");
      }
      // verify the required parameter 'storesCreateRequest' is set
      if (storesCreateRequest === undefined || storesCreateRequest === null) {
        throw new Error("Missing the required parameter 'storesCreateRequest' when calling storesCreate");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StoresList200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/distribution_stores', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storesDelete operation.
     * @callback module:api/DistributeApi~storesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete the store based on specific store name.
     * @param {String} storeName The name of the store
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {String} [body] 
     * @param {module:api/DistributeApi~storesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storesDelete(storeName, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'storeName' is set
      if (storeName === undefined || storeName === null) {
        throw new Error("Missing the required parameter 'storeName' when calling storesDelete");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling storesDelete");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling storesDelete");
      }

      let pathParams = {
        'store_name': storeName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storesGet operation.
     * @callback module:api/DistributeApi~storesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoresList200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the store details for specified store name.
     * @param {String} storeName The name of the store
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/DistributeApi~storesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoresList200ResponseInner}
     */
    storesGet(storeName, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'storeName' is set
      if (storeName === undefined || storeName === null) {
        throw new Error("Missing the required parameter 'storeName' when calling storesGet");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling storesGet");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling storesGet");
      }

      let pathParams = {
        'store_name': storeName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StoresList200ResponseInner;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storesList operation.
     * @callback module:api/DistributeApi~storesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StoresList200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the store details from Storage store table for a particular application.
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/DistributeApi~storesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/StoresList200ResponseInner>}
     */
    storesList(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling storesList");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling storesList");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [StoresList200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/distribution_stores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storesPatch operation.
     * @callback module:api/DistributeApi~storesPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the store.
     * @param {String} storeName The name of the store
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/StoresPatchRequest} storesPatchRequest Store update request
     * @param {module:api/DistributeApi~storesPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storesPatch(storeName, ownerName, appName, storesPatchRequest, callback) {
      let postBody = storesPatchRequest;
      // verify the required parameter 'storeName' is set
      if (storeName === undefined || storeName === null) {
        throw new Error("Missing the required parameter 'storeName' when calling storesPatch");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling storesPatch");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling storesPatch");
      }
      // verify the required parameter 'storesPatchRequest' is set
      if (storesPatchRequest === undefined || storesPatchRequest === null) {
        throw new Error("Missing the required parameter 'storesPatchRequest' when calling storesPatch");
      }

      let pathParams = {
        'store_name': storeName,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
