/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BranchConfigurationsDelete200Response from '../model/BranchConfigurationsDelete200Response';
import BranchConfigurationsGet200Response from '../model/BranchConfigurationsGet200Response';
import BranchConfigurationsUpdateRequest from '../model/BranchConfigurationsUpdateRequest';
import BuildConfigurationsGet200Response from '../model/BuildConfigurationsGet200Response';
import BuildsCreateRequest from '../model/BuildsCreateRequest';
import BuildsDistribute200Response from '../model/BuildsDistribute200Response';
import BuildsDistributeRequest from '../model/BuildsDistributeRequest';
import BuildsGetDownloadUri200Response from '../model/BuildsGetDownloadUri200Response';
import BuildsGetLog200Response from '../model/BuildsGetLog200Response';
import BuildsGetStatusByAppId200Response from '../model/BuildsGetStatusByAppId200Response';
import BuildsListBranches200ResponseInner from '../model/BuildsListBranches200ResponseInner';
import BuildsListBranches200ResponseInnerLastBuild from '../model/BuildsListBranches200ResponseInnerLastBuild';
import BuildsListBranchesDefaultResponse from '../model/BuildsListBranchesDefaultResponse';
import BuildsListToolsetProjects200Response from '../model/BuildsListToolsetProjects200Response';
import BuildsListToolsets200Response from '../model/BuildsListToolsets200Response';
import BuildsListToolsets200ResponseXamarinInner from '../model/BuildsListToolsets200ResponseXamarinInner';
import BuildsListToolsets200ResponseXcodeInner from '../model/BuildsListToolsets200ResponseXcodeInner';
import BuildsUpdateRequest from '../model/BuildsUpdateRequest';
import CommitsListByShaList200ResponseInner from '../model/CommitsListByShaList200ResponseInner';
import FileAssetsCreate200Response from '../model/FileAssetsCreate200Response';
import RepositoriesList200ResponseInner from '../model/RepositoriesList200ResponseInner';
import RepositoryConfigurationsCreateOrUpdateRequest from '../model/RepositoryConfigurationsCreateOrUpdateRequest';
import RepositoryConfigurationsList200ResponseInner from '../model/RepositoryConfigurationsList200ResponseInner';

/**
* Build service.
* @module api/BuildApi
* @version v0.1
*/
export default class BuildApi {

    /**
    * Constructs a new BuildApi. 
    * @alias module:api/BuildApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the branchConfigurationsCreate operation.
     * @callback module:api/BuildApi~branchConfigurationsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BranchConfigurationsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures the branch for build
     * @param {String} branch The branch name
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/BranchConfigurationsUpdateRequest} branchConfigurationsUpdateRequest Parameters of the configuration
     * @param {module:api/BuildApi~branchConfigurationsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BranchConfigurationsGet200Response}
     */
    branchConfigurationsCreate(branch, ownerName, appName, branchConfigurationsUpdateRequest, callback) {
      let postBody = branchConfigurationsUpdateRequest;
      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling branchConfigurationsCreate");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling branchConfigurationsCreate");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling branchConfigurationsCreate");
      }
      // verify the required parameter 'branchConfigurationsUpdateRequest' is set
      if (branchConfigurationsUpdateRequest === undefined || branchConfigurationsUpdateRequest === null) {
        throw new Error("Missing the required parameter 'branchConfigurationsUpdateRequest' when calling branchConfigurationsCreate");
      }

      let pathParams = {
        'branch': branch,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BranchConfigurationsGet200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the branchConfigurationsDelete operation.
     * @callback module:api/BuildApi~branchConfigurationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BranchConfigurationsDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the branch build configuration
     * @param {String} branch The branch name
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] 
     * @param {module:api/BuildApi~branchConfigurationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BranchConfigurationsDelete200Response}
     */
    branchConfigurationsDelete(branch, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling branchConfigurationsDelete");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling branchConfigurationsDelete");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling branchConfigurationsDelete");
      }

      let pathParams = {
        'branch': branch,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BranchConfigurationsDelete200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the branchConfigurationsGet operation.
     * @callback module:api/BuildApi~branchConfigurationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BranchConfigurationsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the branch configuration
     * @param {String} branch The branch name
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/BuildApi~branchConfigurationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BranchConfigurationsGet200Response}
     */
    branchConfigurationsGet(branch, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling branchConfigurationsGet");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling branchConfigurationsGet");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling branchConfigurationsGet");
      }

      let pathParams = {
        'branch': branch,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BranchConfigurationsGet200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the branchConfigurationsUpdate operation.
     * @callback module:api/BuildApi~branchConfigurationsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BranchConfigurationsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reconfigures the branch for build
     * @param {String} branch The branch name
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/BranchConfigurationsUpdateRequest} branchConfigurationsUpdateRequest Parameters of the configuration
     * @param {module:api/BuildApi~branchConfigurationsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BranchConfigurationsGet200Response}
     */
    branchConfigurationsUpdate(branch, ownerName, appName, branchConfigurationsUpdateRequest, callback) {
      let postBody = branchConfigurationsUpdateRequest;
      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling branchConfigurationsUpdate");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling branchConfigurationsUpdate");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling branchConfigurationsUpdate");
      }
      // verify the required parameter 'branchConfigurationsUpdateRequest' is set
      if (branchConfigurationsUpdateRequest === undefined || branchConfigurationsUpdateRequest === null) {
        throw new Error("Missing the required parameter 'branchConfigurationsUpdateRequest' when calling branchConfigurationsUpdate");
      }

      let pathParams = {
        'branch': branch,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BranchConfigurationsGet200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildConfigurationsGet operation.
     * @callback module:api/BuildApi~buildConfigurationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildConfigurationsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the build configuration in Azure pipeline YAML format
     * @param {String} branch The branch name
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format = 'yaml')] Configuration format
     * @param {module:api/BuildApi~buildConfigurationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildConfigurationsGet200Response}
     */
    buildConfigurationsGet(branch, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling buildConfigurationsGet");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling buildConfigurationsGet");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling buildConfigurationsGet");
      }

      let pathParams = {
        'branch': branch,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildConfigurationsGet200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/export_config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsCreate operation.
     * @callback module:api/BuildApi~buildsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildsListBranches200ResponseInnerLastBuild} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a build
     * @param {String} branch The branch name
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {module:model/BuildsCreateRequest} [buildsCreateRequest] Parameters of the build
     * @param {module:api/BuildApi~buildsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildsListBranches200ResponseInnerLastBuild}
     */
    buildsCreate(branch, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = opts['buildsCreateRequest'];
      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling buildsCreate");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling buildsCreate");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling buildsCreate");
      }

      let pathParams = {
        'branch': branch,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BuildsListBranches200ResponseInnerLastBuild;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsDistribute operation.
     * @callback module:api/BuildApi~buildsDistributeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildsDistribute200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Distribute a build
     * @param {Number} buildId The build ID
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/BuildsDistributeRequest} buildsDistributeRequest The distribution details
     * @param {module:api/BuildApi~buildsDistributeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildsDistribute200Response}
     */
    buildsDistribute(buildId, ownerName, appName, buildsDistributeRequest, callback) {
      let postBody = buildsDistributeRequest;
      // verify the required parameter 'buildId' is set
      if (buildId === undefined || buildId === null) {
        throw new Error("Missing the required parameter 'buildId' when calling buildsDistribute");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling buildsDistribute");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling buildsDistribute");
      }
      // verify the required parameter 'buildsDistributeRequest' is set
      if (buildsDistributeRequest === undefined || buildsDistributeRequest === null) {
        throw new Error("Missing the required parameter 'buildsDistributeRequest' when calling buildsDistribute");
      }

      let pathParams = {
        'build_id': buildId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BuildsDistribute200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/distribute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsGet operation.
     * @callback module:api/BuildApi~buildsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildsListBranches200ResponseInnerLastBuild} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the build detail for the given build ID
     * @param {Number} buildId The build ID
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/BuildApi~buildsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildsListBranches200ResponseInnerLastBuild}
     */
    buildsGet(buildId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'buildId' is set
      if (buildId === undefined || buildId === null) {
        throw new Error("Missing the required parameter 'buildId' when calling buildsGet");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling buildsGet");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling buildsGet");
      }

      let pathParams = {
        'build_id': buildId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildsListBranches200ResponseInnerLastBuild;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsGetDownloadUri operation.
     * @callback module:api/BuildApi~buildsGetDownloadUriCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildsGetDownloadUri200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the download URI
     * @param {Number} buildId The build ID
     * @param {module:model/String} downloadType The download type
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/BuildApi~buildsGetDownloadUriCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildsGetDownloadUri200Response}
     */
    buildsGetDownloadUri(buildId, downloadType, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'buildId' is set
      if (buildId === undefined || buildId === null) {
        throw new Error("Missing the required parameter 'buildId' when calling buildsGetDownloadUri");
      }
      // verify the required parameter 'downloadType' is set
      if (downloadType === undefined || downloadType === null) {
        throw new Error("Missing the required parameter 'downloadType' when calling buildsGetDownloadUri");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling buildsGetDownloadUri");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling buildsGetDownloadUri");
      }

      let pathParams = {
        'build_id': buildId,
        'download_type': downloadType,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildsGetDownloadUri200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/downloads/{download_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsGetLog operation.
     * @callback module:api/BuildApi~buildsGetLogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildsGetLog200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the build log
     * @param {Number} buildId The build ID
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/BuildApi~buildsGetLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildsGetLog200Response}
     */
    buildsGetLog(buildId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'buildId' is set
      if (buildId === undefined || buildId === null) {
        throw new Error("Missing the required parameter 'buildId' when calling buildsGetLog");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling buildsGetLog");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling buildsGetLog");
      }

      let pathParams = {
        'build_id': buildId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildsGetLog200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsGetStatusByAppId operation.
     * @callback module:api/BuildApi~buildsGetStatusByAppIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildsGetStatusByAppId200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Application specific build service status
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/BuildApi~buildsGetStatusByAppIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildsGetStatusByAppId200Response}
     */
    buildsGetStatusByAppId(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling buildsGetStatusByAppId");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling buildsGetStatusByAppId");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildsGetStatusByAppId200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/build_service_status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsListBranches operation.
     * @callback module:api/BuildApi~buildsListBranchesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BuildsListBranches200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of Git branches for this application
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/BuildApi~buildsListBranchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BuildsListBranches200ResponseInner>}
     */
    buildsListBranches(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling buildsListBranches");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling buildsListBranches");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BuildsListBranches200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/branches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsListByBranch operation.
     * @callback module:api/BuildApi~buildsListByBranchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BuildsListBranches200ResponseInnerLastBuild>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of builds for the branch
     * @param {String} branch The branch name
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/BuildApi~buildsListByBranchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BuildsListBranches200ResponseInnerLastBuild>}
     */
    buildsListByBranch(branch, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling buildsListByBranch");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling buildsListByBranch");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling buildsListByBranch");
      }

      let pathParams = {
        'branch': branch,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BuildsListBranches200ResponseInnerLastBuild];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsListToolsetProjects operation.
     * @callback module:api/BuildApi~buildsListToolsetProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildsListToolsetProjects200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the projects in the repository for the branch, for all toolsets
     * @param {String} branch The branch name
     * @param {module:model/String} os The desired OS for the project scan; normally the same as the app OS
     * @param {module:model/String} platform The desired platform for the project scan
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Number} [maxSearchDepth] The depth of the repository to search for project files
     * @param {module:api/BuildApi~buildsListToolsetProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildsListToolsetProjects200Response}
     */
    buildsListToolsetProjects(branch, os, platform, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling buildsListToolsetProjects");
      }
      // verify the required parameter 'os' is set
      if (os === undefined || os === null) {
        throw new Error("Missing the required parameter 'os' when calling buildsListToolsetProjects");
      }
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling buildsListToolsetProjects");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling buildsListToolsetProjects");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling buildsListToolsetProjects");
      }

      let pathParams = {
        'branch': branch,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'os': os,
        'platform': platform,
        'maxSearchDepth': opts['maxSearchDepth']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildsListToolsetProjects200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/toolset_projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsListToolsets operation.
     * @callback module:api/BuildApi~buildsListToolsetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildsListToolsets200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns available toolsets for application
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [tools] Toolset name
     * @param {module:api/BuildApi~buildsListToolsetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildsListToolsets200Response}
     */
    buildsListToolsets(ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling buildsListToolsets");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling buildsListToolsets");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'tools': opts['tools']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildsListToolsets200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/toolsets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsListXamarinSDKBundles operation.
     * @callback module:api/BuildApi~buildsListXamarinSDKBundlesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BuildsListToolsets200ResponseXamarinInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Xamarin SDK bundles available to this app
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/BuildApi~buildsListXamarinSDKBundlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BuildsListToolsets200ResponseXamarinInner>}
     */
    buildsListXamarinSDKBundles(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling buildsListXamarinSDKBundles");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling buildsListXamarinSDKBundles");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BuildsListToolsets200ResponseXamarinInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/xamarin_sdk_bundles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsListXcodeVersions operation.
     * @callback module:api/BuildApi~buildsListXcodeVersionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BuildsListToolsets200ResponseXcodeInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Xcode versions available to this app
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/BuildApi~buildsListXcodeVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BuildsListToolsets200ResponseXcodeInner>}
     */
    buildsListXcodeVersions(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling buildsListXcodeVersions");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling buildsListXcodeVersions");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BuildsListToolsets200ResponseXcodeInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/xcode_versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsUpdate operation.
     * @callback module:api/BuildApi~buildsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildsListBranches200ResponseInnerLastBuild} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a build
     * @param {Number} buildId The build ID
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/BuildsUpdateRequest} buildsUpdateRequest 
     * @param {module:api/BuildApi~buildsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildsListBranches200ResponseInnerLastBuild}
     */
    buildsUpdate(buildId, ownerName, appName, buildsUpdateRequest, callback) {
      let postBody = buildsUpdateRequest;
      // verify the required parameter 'buildId' is set
      if (buildId === undefined || buildId === null) {
        throw new Error("Missing the required parameter 'buildId' when calling buildsUpdate");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling buildsUpdate");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling buildsUpdate");
      }
      // verify the required parameter 'buildsUpdateRequest' is set
      if (buildsUpdateRequest === undefined || buildsUpdateRequest === null) {
        throw new Error("Missing the required parameter 'buildsUpdateRequest' when calling buildsUpdate");
      }

      let pathParams = {
        'build_id': buildId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BuildsListBranches200ResponseInnerLastBuild;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsWebhook operation.
     * @callback module:api/BuildApi~buildsWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Public webhook sink
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] 
     * @param {module:api/BuildApi~buildsWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    buildsWebhook(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/public/hooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the commitsListByShaList operation.
     * @callback module:api/BuildApi~commitsListByShaListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommitsListByShaList200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns commit information for a batch of shas
     * @param {Array.<String>} hashes A collection of commit SHAs comma-delimited
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/BuildApi~commitsListByShaListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommitsListByShaList200ResponseInner>}
     */
    commitsListByShaList(hashes, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'hashes' is set
      if (hashes === undefined || hashes === null) {
        throw new Error("Missing the required parameter 'hashes' when calling commitsListByShaList");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling commitsListByShaList");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling commitsListByShaList");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'hashes': this.apiClient.buildCollectionParam(hashes, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CommitsListByShaList200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/commits/batch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileAssetsCreate operation.
     * @callback module:api/BuildApi~fileAssetsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileAssetsCreate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new asset to upload a file
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] 
     * @param {module:api/BuildApi~fileAssetsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileAssetsCreate200Response}
     */
    fileAssetsCreate(ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling fileAssetsCreate");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling fileAssetsCreate");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FileAssetsCreate200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/file_asset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesList operation.
     * @callback module:api/BuildApi~repositoriesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RepositoriesList200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the repositories available from the source code host
     * @param {module:model/String} sourceHost The source host
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {String} [vstsAccountName] Filter repositories only for specified account and project, \"vstsProjectId\" is required
     * @param {String} [vstsProjectId] Filter repositories only for specified account and project, \"vstsAccountName\" is required
     * @param {String} [serviceConnectionId] The id of the service connection (private). Required for GitLab self-hosted repositories
     * @param {module:model/String} [form] The selected form of the object
     * @param {module:api/BuildApi~repositoriesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RepositoriesList200ResponseInner>}
     */
    repositoriesList(sourceHost, ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sourceHost' is set
      if (sourceHost === undefined || sourceHost === null) {
        throw new Error("Missing the required parameter 'sourceHost' when calling repositoriesList");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling repositoriesList");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling repositoriesList");
      }

      let pathParams = {
        'source_host': sourceHost,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'vstsAccountName': opts['vstsAccountName'],
        'vstsProjectId': opts['vstsProjectId'],
        'service_connection_id': opts['serviceConnectionId'],
        'form': opts['form']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RepositoriesList200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/source_hosts/{source_host}/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoryConfigurationsCreateOrUpdate operation.
     * @callback module:api/BuildApi~repositoryConfigurationsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BranchConfigurationsDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures the repository for build
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/RepositoryConfigurationsCreateOrUpdateRequest} repositoryConfigurationsCreateOrUpdateRequest The repository information
     * @param {module:api/BuildApi~repositoryConfigurationsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BranchConfigurationsDelete200Response}
     */
    repositoryConfigurationsCreateOrUpdate(ownerName, appName, repositoryConfigurationsCreateOrUpdateRequest, callback) {
      let postBody = repositoryConfigurationsCreateOrUpdateRequest;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling repositoryConfigurationsCreateOrUpdate");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling repositoryConfigurationsCreateOrUpdate");
      }
      // verify the required parameter 'repositoryConfigurationsCreateOrUpdateRequest' is set
      if (repositoryConfigurationsCreateOrUpdateRequest === undefined || repositoryConfigurationsCreateOrUpdateRequest === null) {
        throw new Error("Missing the required parameter 'repositoryConfigurationsCreateOrUpdateRequest' when calling repositoryConfigurationsCreateOrUpdate");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BranchConfigurationsDelete200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/repo_config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoryConfigurationsDelete operation.
     * @callback module:api/BuildApi~repositoryConfigurationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BranchConfigurationsDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the configuration for the repository
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/BuildApi~repositoryConfigurationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BranchConfigurationsDelete200Response}
     */
    repositoryConfigurationsDelete(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling repositoryConfigurationsDelete");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling repositoryConfigurationsDelete");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BranchConfigurationsDelete200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/repo_config', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoryConfigurationsList operation.
     * @callback module:api/BuildApi~repositoryConfigurationsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RepositoryConfigurationsList200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the repository build configuration status of the app
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeInactive] Include inactive configurations if none are active
     * @param {module:api/BuildApi~repositoryConfigurationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RepositoryConfigurationsList200ResponseInner>}
     */
    repositoryConfigurationsList(ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling repositoryConfigurationsList");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling repositoryConfigurationsList");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'includeInactive': opts['includeInactive']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RepositoryConfigurationsList200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/repo_config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
