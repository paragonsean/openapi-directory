/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeviceList from '../model/DeviceList';
import DeviceSelection from '../model/DeviceSelection';
import DeviceSet from '../model/DeviceSet';
import DeviceSetUpdateInformation from '../model/DeviceSetUpdateInformation';
import NameOfTheTestSeries from '../model/NameOfTheTestSeries';
import Subscription1 from '../model/Subscription1';
import TestCloudErrorDetails from '../model/TestCloudErrorDetails';
import TestCloudFileHash from '../model/TestCloudFileHash';
import TestCloudFileHash1 from '../model/TestCloudFileHash1';
import TestCloudFileHashResponse from '../model/TestCloudFileHashResponse';
import TestCloudStartTestRunOptions from '../model/TestCloudStartTestRunOptions';
import TestCloudTestRunStartResult from '../model/TestCloudTestRunStartResult';
import TestGdprExportAccount200Response from '../model/TestGdprExportAccount200Response';
import TestGdprExportAccounts200Response from '../model/TestGdprExportAccounts200Response';
import TestGdprExportApp200Response from '../model/TestGdprExportApp200Response';
import TestGdprExportFeatureFlag200Response from '../model/TestGdprExportFeatureFlag200Response';
import TestGdprExportFileSetFile200Response from '../model/TestGdprExportFileSetFile200Response';
import TestGdprExportHashFile200Response from '../model/TestGdprExportHashFile200Response';
import TestGdprExportPipelineTest200Response from '../model/TestGdprExportPipelineTest200Response';
import TestGdprExportTestRun200Response from '../model/TestGdprExportTestRun200Response';
import TestGetDeviceConfigurations200ResponseInner from '../model/TestGetDeviceConfigurations200ResponseInner';
import TestGetTestReport200Response from '../model/TestGetTestReport200Response';
import TestRun from '../model/TestRun';
import TestRunState from '../model/TestRunState';
import TestSeries from '../model/TestSeries';

/**
* Test service.
* @module api/TestApi
* @version v0.1
*/
export default class TestApi {

    /**
    * Constructs a new TestApi. 
    * @alias module:api/TestApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the testArchiveTestRun operation.
     * @callback module:api/TestApi~testArchiveTestRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logically deletes a test run
     * @param {String} testRunId The ID of the test run
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/TestApi~testArchiveTestRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestRun}
     */
    testArchiveTestRun(testRunId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'testRunId' is set
      if (testRunId === undefined || testRunId === null) {
        throw new Error("Missing the required parameter 'testRunId' when calling testArchiveTestRun");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testArchiveTestRun");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testArchiveTestRun");
      }

      let pathParams = {
        'test_run_id': testRunId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestRun;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testCreateDeviceSelection operation.
     * @callback module:api/TestApi~testCreateDeviceSelectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceSelection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a short ID for a list of devices
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/DeviceList} deviceList 
     * @param {module:api/TestApi~testCreateDeviceSelectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceSelection}
     */
    testCreateDeviceSelection(ownerName, appName, deviceList, callback) {
      let postBody = deviceList;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testCreateDeviceSelection");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testCreateDeviceSelection");
      }
      // verify the required parameter 'deviceList' is set
      if (deviceList === undefined || deviceList === null) {
        throw new Error("Missing the required parameter 'deviceList' when calling testCreateDeviceSelection");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceSelection;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/device_selection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testCreateDeviceSetOfOwner operation.
     * @callback module:api/TestApi~testCreateDeviceSetOfOwnerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a device set belonging to the owner
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/DeviceSetUpdateInformation} deviceSetUpdateInformation 
     * @param {module:api/TestApi~testCreateDeviceSetOfOwnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceSet}
     */
    testCreateDeviceSetOfOwner(ownerName, appName, deviceSetUpdateInformation, callback) {
      let postBody = deviceSetUpdateInformation;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testCreateDeviceSetOfOwner");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testCreateDeviceSetOfOwner");
      }
      // verify the required parameter 'deviceSetUpdateInformation' is set
      if (deviceSetUpdateInformation === undefined || deviceSetUpdateInformation === null) {
        throw new Error("Missing the required parameter 'deviceSetUpdateInformation' when calling testCreateDeviceSetOfOwner");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceSet;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testCreateDeviceSetOfUser operation.
     * @callback module:api/TestApi~testCreateDeviceSetOfUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a device set belonging to the user
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/DeviceSetUpdateInformation} deviceSetUpdateInformation 
     * @param {module:api/TestApi~testCreateDeviceSetOfUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceSet}
     */
    testCreateDeviceSetOfUser(ownerName, appName, deviceSetUpdateInformation, callback) {
      let postBody = deviceSetUpdateInformation;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testCreateDeviceSetOfUser");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testCreateDeviceSetOfUser");
      }
      // verify the required parameter 'deviceSetUpdateInformation' is set
      if (deviceSetUpdateInformation === undefined || deviceSetUpdateInformation === null) {
        throw new Error("Missing the required parameter 'deviceSetUpdateInformation' when calling testCreateDeviceSetOfUser");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceSet;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/user/device_sets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testCreateSubscription operation.
     * @callback module:api/TestApi~testCreateSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscription1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept a free trial subscription
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/TestApi~testCreateSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscription1}
     */
    testCreateSubscription(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testCreateSubscription");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testCreateSubscription");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Subscription1;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/subscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testCreateTestRun operation.
     * @callback module:api/TestApi~testCreateTestRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new test run
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/TestApi~testCreateTestRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    testCreateTestRun(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testCreateTestRun");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testCreateTestRun");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/test_runs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testCreateTestSeries operation.
     * @callback module:api/TestApi~testCreateTestSeriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestSeries} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new test series for an application
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/NameOfTheTestSeries} nameOfTheTestSeries 
     * @param {module:api/TestApi~testCreateTestSeriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestSeries}
     */
    testCreateTestSeries(ownerName, appName, nameOfTheTestSeries, callback) {
      let postBody = nameOfTheTestSeries;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testCreateTestSeries");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testCreateTestSeries");
      }
      // verify the required parameter 'nameOfTheTestSeries' is set
      if (nameOfTheTestSeries === undefined || nameOfTheTestSeries === null) {
        throw new Error("Missing the required parameter 'nameOfTheTestSeries' when calling testCreateTestSeries");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TestSeries;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/test_series', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testDeleteDeviceSetOfOwner operation.
     * @callback module:api/TestApi~testDeleteDeviceSetOfOwnerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a device set belonging to the owner
     * @param {String} id The UUID of the device set
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/TestApi~testDeleteDeviceSetOfOwnerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    testDeleteDeviceSetOfOwner(id, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling testDeleteDeviceSetOfOwner");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testDeleteDeviceSetOfOwner");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testDeleteDeviceSetOfOwner");
      }

      let pathParams = {
        'id': id,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testDeleteDeviceSetOfUser operation.
     * @callback module:api/TestApi~testDeleteDeviceSetOfUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a device set belonging to the user
     * @param {String} id The UUID of the device set
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/TestApi~testDeleteDeviceSetOfUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    testDeleteDeviceSetOfUser(id, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling testDeleteDeviceSetOfUser");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testDeleteDeviceSetOfUser");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testDeleteDeviceSetOfUser");
      }

      let pathParams = {
        'id': id,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testDeleteTestSeries operation.
     * @callback module:api/TestApi~testDeleteTestSeriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a single test series
     * @param {String} testSeriesSlug The slug of the test series
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/TestApi~testDeleteTestSeriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    testDeleteTestSeries(testSeriesSlug, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'testSeriesSlug' is set
      if (testSeriesSlug === undefined || testSeriesSlug === null) {
        throw new Error("Missing the required parameter 'testSeriesSlug' when calling testDeleteTestSeries");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testDeleteTestSeries");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testDeleteTestSeries");
      }

      let pathParams = {
        'test_series_slug': testSeriesSlug,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testGdprExportAccount operation.
     * @callback module:api/TestApi~testGdprExportAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestGdprExportAccount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists account data
     * @param {module:api/TestApi~testGdprExportAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestGdprExportAccount200Response}
     */
    testGdprExportAccount(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestGdprExportAccount200Response;
      return this.apiClient.callApi(
        '/v0.1/account/test/export/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testGdprExportAccounts operation.
     * @callback module:api/TestApi~testGdprExportAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestGdprExportAccounts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the endpoints available for Test accounts data
     * @param {module:api/TestApi~testGdprExportAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestGdprExportAccounts200Response}
     */
    testGdprExportAccounts(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestGdprExportAccounts200Response;
      return this.apiClient.callApi(
        '/v0.1/account/test/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testGdprExportApp operation.
     * @callback module:api/TestApi~testGdprExportAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestGdprExportApp200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists app data
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/TestApi~testGdprExportAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestGdprExportApp200Response}
     */
    testGdprExportApp(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testGdprExportApp");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testGdprExportApp");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestGdprExportApp200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/test/export/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testGdprExportApps operation.
     * @callback module:api/TestApi~testGdprExportAppsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestGdprExportAccounts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the endpoints available for Test apps data
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/TestApi~testGdprExportAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestGdprExportAccounts200Response}
     */
    testGdprExportApps(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testGdprExportApps");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testGdprExportApps");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestGdprExportAccounts200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/test/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testGdprExportFeatureFlag operation.
     * @callback module:api/TestApi~testGdprExportFeatureFlagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestGdprExportFeatureFlag200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists feature flag data
     * @param {module:api/TestApi~testGdprExportFeatureFlagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestGdprExportFeatureFlag200Response}
     */
    testGdprExportFeatureFlag(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestGdprExportFeatureFlag200Response;
      return this.apiClient.callApi(
        '/v0.1/account/test/export/featureFlags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testGdprExportFileSetFile operation.
     * @callback module:api/TestApi~testGdprExportFileSetFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestGdprExportFileSetFile200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists file set file data
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/TestApi~testGdprExportFileSetFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestGdprExportFileSetFile200Response}
     */
    testGdprExportFileSetFile(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testGdprExportFileSetFile");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testGdprExportFileSetFile");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestGdprExportFileSetFile200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/test/export/fileSetFiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testGdprExportHashFile operation.
     * @callback module:api/TestApi~testGdprExportHashFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestGdprExportHashFile200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists hash file data
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/TestApi~testGdprExportHashFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestGdprExportHashFile200Response}
     */
    testGdprExportHashFile(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testGdprExportHashFile");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testGdprExportHashFile");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestGdprExportHashFile200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/test/export/hashFiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testGdprExportPipelineTest operation.
     * @callback module:api/TestApi~testGdprExportPipelineTestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestGdprExportPipelineTest200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists pipeline test data
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/TestApi~testGdprExportPipelineTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestGdprExportPipelineTest200Response}
     */
    testGdprExportPipelineTest(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testGdprExportPipelineTest");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testGdprExportPipelineTest");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestGdprExportPipelineTest200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/test/export/pipelineTests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testGdprExportTestRun operation.
     * @callback module:api/TestApi~testGdprExportTestRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestGdprExportTestRun200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists test run data
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/TestApi~testGdprExportTestRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestGdprExportTestRun200Response}
     */
    testGdprExportTestRun(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testGdprExportTestRun");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testGdprExportTestRun");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestGdprExportTestRun200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/test/export/testRuns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testGetAllTestRunsForSeries operation.
     * @callback module:api/TestApi~testGetAllTestRunsForSeriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestRun>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of all test runs for a given test series
     * @param {String} testSeriesSlug The slug of the test series
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/TestApi~testGetAllTestRunsForSeriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestRun>}
     */
    testGetAllTestRunsForSeries(testSeriesSlug, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'testSeriesSlug' is set
      if (testSeriesSlug === undefined || testSeriesSlug === null) {
        throw new Error("Missing the required parameter 'testSeriesSlug' when calling testGetAllTestRunsForSeries");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testGetAllTestRunsForSeries");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testGetAllTestRunsForSeries");
      }

      let pathParams = {
        'test_series_slug': testSeriesSlug,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TestRun];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}/test_runs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testGetAllTestSeries operation.
     * @callback module:api/TestApi~testGetAllTestSeriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestSeries>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of all test series for an application
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {String} [query] A query string to filter test series
     * @param {module:api/TestApi~testGetAllTestSeriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestSeries>}
     */
    testGetAllTestSeries(ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testGetAllTestSeries");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testGetAllTestSeries");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'query': opts['query']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TestSeries];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/test_series', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testGetDeviceConfigurations operation.
     * @callback module:api/TestApi~testGetDeviceConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestGetDeviceConfigurations200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of available devices
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Object} opts Optional parameters
     * @param {String} [appUploadId] The ID of the test run
     * @param {module:api/TestApi~testGetDeviceConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestGetDeviceConfigurations200ResponseInner>}
     */
    testGetDeviceConfigurations(ownerName, appName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testGetDeviceConfigurations");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testGetDeviceConfigurations");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
        'app_upload_id': opts['appUploadId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TestGetDeviceConfigurations200ResponseInner];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/device_configurations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testGetDeviceSetOfOwner operation.
     * @callback module:api/TestApi~testGetDeviceSetOfOwnerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a device set belonging to the owner
     * @param {String} id The UUID of the device set
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/TestApi~testGetDeviceSetOfOwnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceSet}
     */
    testGetDeviceSetOfOwner(id, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling testGetDeviceSetOfOwner");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testGetDeviceSetOfOwner");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testGetDeviceSetOfOwner");
      }

      let pathParams = {
        'id': id,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceSet;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testGetDeviceSetOfUser operation.
     * @callback module:api/TestApi~testGetDeviceSetOfUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a device set belonging to the user
     * @param {String} id The UUID of the device set
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/TestApi~testGetDeviceSetOfUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceSet}
     */
    testGetDeviceSetOfUser(id, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling testGetDeviceSetOfUser");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testGetDeviceSetOfUser");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testGetDeviceSetOfUser");
      }

      let pathParams = {
        'id': id,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceSet;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testGetSubscriptions operation.
     * @callback module:api/TestApi~testGetSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscription1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about the currently active subscriptions, if any
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/TestApi~testGetSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscription1}
     */
    testGetSubscriptions(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testGetSubscriptions");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testGetSubscriptions");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Subscription1;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testGetTestReport operation.
     * @callback module:api/TestApi~testGetTestReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestGetTestReport200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single test report
     * @param {String} testRunId The ID of the test run
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/TestApi~testGetTestReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestGetTestReport200Response}
     */
    testGetTestReport(testRunId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'testRunId' is set
      if (testRunId === undefined || testRunId === null) {
        throw new Error("Missing the required parameter 'testRunId' when calling testGetTestReport");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testGetTestReport");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testGetTestReport");
      }

      let pathParams = {
        'test_run_id': testRunId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestGetTestReport200Response;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/report', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testGetTestRun operation.
     * @callback module:api/TestApi~testGetTestRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single test runs
     * @param {String} testRunId The ID of the test run
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/TestApi~testGetTestRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestRun}
     */
    testGetTestRun(testRunId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'testRunId' is set
      if (testRunId === undefined || testRunId === null) {
        throw new Error("Missing the required parameter 'testRunId' when calling testGetTestRun");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testGetTestRun");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testGetTestRun");
      }

      let pathParams = {
        'test_run_id': testRunId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestRun;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testGetTestRunState operation.
     * @callback module:api/TestApi~testGetTestRunStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestRunState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets state of the test run
     * @param {String} testRunId The ID of the test run
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/TestApi~testGetTestRunStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestRunState}
     */
    testGetTestRunState(testRunId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'testRunId' is set
      if (testRunId === undefined || testRunId === null) {
        throw new Error("Missing the required parameter 'testRunId' when calling testGetTestRunState");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testGetTestRunState");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testGetTestRunState");
      }

      let pathParams = {
        'test_run_id': testRunId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestRunState;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testGetTestRuns operation.
     * @callback module:api/TestApi~testGetTestRunsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestRun>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of test runs
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/TestApi~testGetTestRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestRun>}
     */
    testGetTestRuns(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testGetTestRuns");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testGetTestRuns");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TestRun];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/test_runs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testListDeviceSetsOfOwner operation.
     * @callback module:api/TestApi~testListDeviceSetsOfOwnerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeviceSet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists device sets belonging to the owner
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/TestApi~testListDeviceSetsOfOwnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeviceSet>}
     */
    testListDeviceSetsOfOwner(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testListDeviceSetsOfOwner");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testListDeviceSetsOfOwner");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeviceSet];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testListDeviceSetsOfUser operation.
     * @callback module:api/TestApi~testListDeviceSetsOfUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeviceSet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists device sets belonging to the user
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/TestApi~testListDeviceSetsOfUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeviceSet>}
     */
    testListDeviceSetsOfUser(ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testListDeviceSetsOfUser");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testListDeviceSetsOfUser");
      }

      let pathParams = {
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeviceSet];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/user/device_sets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testPatchTestSeries operation.
     * @callback module:api/TestApi~testPatchTestSeriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestSeries} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates name and slug of a test series
     * @param {String} testSeriesSlug The slug of the test series
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/NameOfTheTestSeries} nameOfTheTestSeries 
     * @param {module:api/TestApi~testPatchTestSeriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestSeries}
     */
    testPatchTestSeries(testSeriesSlug, ownerName, appName, nameOfTheTestSeries, callback) {
      let postBody = nameOfTheTestSeries;
      // verify the required parameter 'testSeriesSlug' is set
      if (testSeriesSlug === undefined || testSeriesSlug === null) {
        throw new Error("Missing the required parameter 'testSeriesSlug' when calling testPatchTestSeries");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testPatchTestSeries");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testPatchTestSeries");
      }
      // verify the required parameter 'nameOfTheTestSeries' is set
      if (nameOfTheTestSeries === undefined || nameOfTheTestSeries === null) {
        throw new Error("Missing the required parameter 'nameOfTheTestSeries' when calling testPatchTestSeries");
      }

      let pathParams = {
        'test_series_slug': testSeriesSlug,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TestSeries;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testStartTestRun operation.
     * @callback module:api/TestApi~testStartTestRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestCloudTestRunStartResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts test run
     * @param {String} testRunId The ID of the test run
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/TestCloudStartTestRunOptions} testCloudStartTestRunOptions Option required to start the test run
     * @param {module:api/TestApi~testStartTestRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestCloudTestRunStartResult}
     */
    testStartTestRun(testRunId, ownerName, appName, testCloudStartTestRunOptions, callback) {
      let postBody = testCloudStartTestRunOptions;
      // verify the required parameter 'testRunId' is set
      if (testRunId === undefined || testRunId === null) {
        throw new Error("Missing the required parameter 'testRunId' when calling testStartTestRun");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testStartTestRun");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testStartTestRun");
      }
      // verify the required parameter 'testCloudStartTestRunOptions' is set
      if (testCloudStartTestRunOptions === undefined || testCloudStartTestRunOptions === null) {
        throw new Error("Missing the required parameter 'testCloudStartTestRunOptions' when calling testStartTestRun");
      }

      let pathParams = {
        'test_run_id': testRunId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TestCloudTestRunStartResult;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testStartUploadingFile operation.
     * @callback module:api/TestApi~testStartUploadingFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads file for a test run
     * @param {String} testRunId The ID of the test run
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/TestApi~testStartUploadingFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    testStartUploadingFile(testRunId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'testRunId' is set
      if (testRunId === undefined || testRunId === null) {
        throw new Error("Missing the required parameter 'testRunId' when calling testStartUploadingFile");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testStartUploadingFile");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testStartUploadingFile");
      }

      let pathParams = {
        'test_run_id': testRunId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testStopTestRun operation.
     * @callback module:api/TestApi~testStopTestRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop a test run execution
     * @param {String} testRunId The ID of the test run to be stopped
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:api/TestApi~testStopTestRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestRun}
     */
    testStopTestRun(testRunId, ownerName, appName, callback) {
      let postBody = null;
      // verify the required parameter 'testRunId' is set
      if (testRunId === undefined || testRunId === null) {
        throw new Error("Missing the required parameter 'testRunId' when calling testStopTestRun");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testStopTestRun");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testStopTestRun");
      }

      let pathParams = {
        'test_run_id': testRunId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestRun;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/stop', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testUpdateDeviceSetOfOwner operation.
     * @callback module:api/TestApi~testUpdateDeviceSetOfOwnerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a device set belonging to the owner
     * @param {String} id The UUID of the device set
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/DeviceSetUpdateInformation} deviceSetUpdateInformation 
     * @param {module:api/TestApi~testUpdateDeviceSetOfOwnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceSet}
     */
    testUpdateDeviceSetOfOwner(id, ownerName, appName, deviceSetUpdateInformation, callback) {
      let postBody = deviceSetUpdateInformation;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling testUpdateDeviceSetOfOwner");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testUpdateDeviceSetOfOwner");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testUpdateDeviceSetOfOwner");
      }
      // verify the required parameter 'deviceSetUpdateInformation' is set
      if (deviceSetUpdateInformation === undefined || deviceSetUpdateInformation === null) {
        throw new Error("Missing the required parameter 'deviceSetUpdateInformation' when calling testUpdateDeviceSetOfOwner");
      }

      let pathParams = {
        'id': id,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceSet;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testUpdateDeviceSetOfUser operation.
     * @callback module:api/TestApi~testUpdateDeviceSetOfUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a device set belonging to the user
     * @param {String} id The UUID of the device set
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/DeviceSetUpdateInformation} deviceSetUpdateInformation 
     * @param {module:api/TestApi~testUpdateDeviceSetOfUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceSet}
     */
    testUpdateDeviceSetOfUser(id, ownerName, appName, deviceSetUpdateInformation, callback) {
      let postBody = deviceSetUpdateInformation;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling testUpdateDeviceSetOfUser");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testUpdateDeviceSetOfUser");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testUpdateDeviceSetOfUser");
      }
      // verify the required parameter 'deviceSetUpdateInformation' is set
      if (deviceSetUpdateInformation === undefined || deviceSetUpdateInformation === null) {
        throw new Error("Missing the required parameter 'deviceSetUpdateInformation' when calling testUpdateDeviceSetOfUser");
      }

      let pathParams = {
        'id': id,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceSet;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testUploadHash operation.
     * @callback module:api/TestApi~testUploadHashCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds file with the given hash to a test run
     * @param {String} testRunId The ID of the test run
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {module:model/TestCloudFileHash} testCloudFileHash File hash information
     * @param {module:api/TestApi~testUploadHashCallback} callback The callback function, accepting three arguments: error, data, response
     */
    testUploadHash(testRunId, ownerName, appName, testCloudFileHash, callback) {
      let postBody = testCloudFileHash;
      // verify the required parameter 'testRunId' is set
      if (testRunId === undefined || testRunId === null) {
        throw new Error("Missing the required parameter 'testRunId' when calling testUploadHash");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testUploadHash");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testUploadHash");
      }
      // verify the required parameter 'testCloudFileHash' is set
      if (testCloudFileHash === undefined || testCloudFileHash === null) {
        throw new Error("Missing the required parameter 'testCloudFileHash' when calling testUploadHash");
      }

      let pathParams = {
        'test_run_id': testRunId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testUploadHashesBatch operation.
     * @callback module:api/TestApi~testUploadHashesBatchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestCloudFileHashResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds file with the given hash to a test run
     * @param {String} testRunId The ID of the test run
     * @param {String} ownerName The name of the owner
     * @param {String} appName The name of the application
     * @param {Array.<module:model/TestCloudFileHash1>} testCloudFileHash1 File hash information
     * @param {module:api/TestApi~testUploadHashesBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestCloudFileHashResponse>}
     */
    testUploadHashesBatch(testRunId, ownerName, appName, testCloudFileHash1, callback) {
      let postBody = testCloudFileHash1;
      // verify the required parameter 'testRunId' is set
      if (testRunId === undefined || testRunId === null) {
        throw new Error("Missing the required parameter 'testRunId' when calling testUploadHashesBatch");
      }
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling testUploadHashesBatch");
      }
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling testUploadHashesBatch");
      }
      // verify the required parameter 'testCloudFileHash1' is set
      if (testCloudFileHash1 === undefined || testCloudFileHash1 === null) {
        throw new Error("Missing the required parameter 'testCloudFileHash1' when calling testUploadHashesBatch");
      }

      let pathParams = {
        'test_run_id': testRunId,
        'owner_name': ownerName,
        'app_name': appName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [TestCloudFileHashResponse];
      return this.apiClient.callApi(
        '/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
