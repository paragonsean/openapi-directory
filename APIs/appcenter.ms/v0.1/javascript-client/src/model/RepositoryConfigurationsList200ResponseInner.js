/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RepositoryConfigurationsList200ResponseInner model module.
 * @module model/RepositoryConfigurationsList200ResponseInner
 * @version v0.1
 */
class RepositoryConfigurationsList200ResponseInner {
    /**
     * Constructs a new <code>RepositoryConfigurationsList200ResponseInner</code>.
     * @alias module:model/RepositoryConfigurationsList200ResponseInner
     * @param repoUrl {String} The repository's git url, must be a HTTPS URL
     */
    constructor(repoUrl) { 
        
        RepositoryConfigurationsList200ResponseInner.initialize(this, repoUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, repoUrl) { 
        obj['id'] = id;
        obj['state'] = state;
        obj['type'] = type;
        obj['repo_url'] = repoUrl;
    }

    /**
     * Constructs a <code>RepositoryConfigurationsList200ResponseInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepositoryConfigurationsList200ResponseInner} obj Optional instance to populate.
     * @return {module:model/RepositoryConfigurationsList200ResponseInner} The populated <code>RepositoryConfigurationsList200ResponseInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepositoryConfigurationsList200ResponseInner();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('user_email')) {
                obj['user_email'] = ApiClient.convertToType(data['user_email'], 'String');
            }
            if (data.hasOwnProperty('installation_id')) {
                obj['installation_id'] = ApiClient.convertToType(data['installation_id'], 'String');
            }
            if (data.hasOwnProperty('external_user_id')) {
                obj['external_user_id'] = ApiClient.convertToType(data['external_user_id'], 'String');
            }
            if (data.hasOwnProperty('repo_id')) {
                obj['repo_id'] = ApiClient.convertToType(data['repo_id'], 'String');
            }
            if (data.hasOwnProperty('repo_url')) {
                obj['repo_url'] = ApiClient.convertToType(data['repo_url'], 'String');
            }
            if (data.hasOwnProperty('service_connection_id')) {
                obj['service_connection_id'] = ApiClient.convertToType(data['service_connection_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepositoryConfigurationsList200ResponseInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepositoryConfigurationsList200ResponseInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RepositoryConfigurationsList200ResponseInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['user_email'] && !(typeof data['user_email'] === 'string' || data['user_email'] instanceof String)) {
            throw new Error("Expected the field `user_email` to be a primitive type in the JSON string but got " + data['user_email']);
        }
        // ensure the json data is a string
        if (data['installation_id'] && !(typeof data['installation_id'] === 'string' || data['installation_id'] instanceof String)) {
            throw new Error("Expected the field `installation_id` to be a primitive type in the JSON string but got " + data['installation_id']);
        }
        // ensure the json data is a string
        if (data['external_user_id'] && !(typeof data['external_user_id'] === 'string' || data['external_user_id'] instanceof String)) {
            throw new Error("Expected the field `external_user_id` to be a primitive type in the JSON string but got " + data['external_user_id']);
        }
        // ensure the json data is a string
        if (data['repo_id'] && !(typeof data['repo_id'] === 'string' || data['repo_id'] instanceof String)) {
            throw new Error("Expected the field `repo_id` to be a primitive type in the JSON string but got " + data['repo_id']);
        }
        // ensure the json data is a string
        if (data['repo_url'] && !(typeof data['repo_url'] === 'string' || data['repo_url'] instanceof String)) {
            throw new Error("Expected the field `repo_url` to be a primitive type in the JSON string but got " + data['repo_url']);
        }
        // ensure the json data is a string
        if (data['service_connection_id'] && !(typeof data['service_connection_id'] === 'string' || data['service_connection_id'] instanceof String)) {
            throw new Error("Expected the field `service_connection_id` to be a primitive type in the JSON string but got " + data['service_connection_id']);
        }

        return true;
    }


}

RepositoryConfigurationsList200ResponseInner.RequiredProperties = ["id", "state", "type", "repo_url"];

/**
 * Repository configuration identifier
 * @member {String} id
 */
RepositoryConfigurationsList200ResponseInner.prototype['id'] = undefined;

/**
 * State of the configuration
 * @member {module:model/RepositoryConfigurationsList200ResponseInner.StateEnum} state
 */
RepositoryConfigurationsList200ResponseInner.prototype['state'] = undefined;

/**
 * Type of repository
 * @member {String} type
 */
RepositoryConfigurationsList200ResponseInner.prototype['type'] = undefined;

/**
 * Email of the user who linked the repository
 * @member {String} user_email
 */
RepositoryConfigurationsList200ResponseInner.prototype['user_email'] = undefined;

/**
 * The GitHub App Installation id. Required for repositories connected from GitHub App
 * @member {String} installation_id
 */
RepositoryConfigurationsList200ResponseInner.prototype['installation_id'] = undefined;

/**
 * The external user id from the repository provider. Required for GitLab.com repositories
 * @member {String} external_user_id
 */
RepositoryConfigurationsList200ResponseInner.prototype['external_user_id'] = undefined;

/**
 * The repository id from the repository provider. Required for repositories connected from GitHub App and GitLab.com
 * @member {String} repo_id
 */
RepositoryConfigurationsList200ResponseInner.prototype['repo_id'] = undefined;

/**
 * The repository's git url, must be a HTTPS URL
 * @member {String} repo_url
 */
RepositoryConfigurationsList200ResponseInner.prototype['repo_url'] = undefined;

/**
 * The id of the service connection (private). Required for GitLab self-hosted repositories
 * @member {String} service_connection_id
 */
RepositoryConfigurationsList200ResponseInner.prototype['service_connection_id'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
RepositoryConfigurationsList200ResponseInner['StateEnum'] = {

    /**
     * value: "unauthorized"
     * @const
     */
    "unauthorized": "unauthorized",

    /**
     * value: "inactive"
     * @const
     */
    "inactive": "inactive",

    /**
     * value: "active"
     * @const
     */
    "active": "active"
};



export default RepositoryConfigurationsList200ResponseInner;

