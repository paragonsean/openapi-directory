/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HandledErrorReasonFrame model module.
 * @module model/HandledErrorReasonFrame
 * @version v0.1
 */
class HandledErrorReasonFrame {
    /**
     * Constructs a new <code>HandledErrorReasonFrame</code>.
     * @alias module:model/HandledErrorReasonFrame
     */
    constructor() { 
        
        HandledErrorReasonFrame.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HandledErrorReasonFrame</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HandledErrorReasonFrame} obj Optional instance to populate.
     * @return {module:model/HandledErrorReasonFrame} The populated <code>HandledErrorReasonFrame</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HandledErrorReasonFrame();

            if (data.hasOwnProperty('appCode')) {
                obj['appCode'] = ApiClient.convertToType(data['appCode'], 'Boolean');
            }
            if (data.hasOwnProperty('classMethod')) {
                obj['classMethod'] = ApiClient.convertToType(data['classMethod'], 'Boolean');
            }
            if (data.hasOwnProperty('className')) {
                obj['className'] = ApiClient.convertToType(data['className'], 'String');
            }
            if (data.hasOwnProperty('codeFormatted')) {
                obj['codeFormatted'] = ApiClient.convertToType(data['codeFormatted'], 'String');
            }
            if (data.hasOwnProperty('codeRaw')) {
                obj['codeRaw'] = ApiClient.convertToType(data['codeRaw'], 'String');
            }
            if (data.hasOwnProperty('exceptionType')) {
                obj['exceptionType'] = ApiClient.convertToType(data['exceptionType'], 'String');
            }
            if (data.hasOwnProperty('file')) {
                obj['file'] = ApiClient.convertToType(data['file'], 'String');
            }
            if (data.hasOwnProperty('frameworkName')) {
                obj['frameworkName'] = ApiClient.convertToType(data['frameworkName'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('line')) {
                obj['line'] = ApiClient.convertToType(data['line'], 'Number');
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
            if (data.hasOwnProperty('methodParams')) {
                obj['methodParams'] = ApiClient.convertToType(data['methodParams'], 'String');
            }
            if (data.hasOwnProperty('osExceptionType')) {
                obj['osExceptionType'] = ApiClient.convertToType(data['osExceptionType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HandledErrorReasonFrame</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HandledErrorReasonFrame</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['className'] && !(typeof data['className'] === 'string' || data['className'] instanceof String)) {
            throw new Error("Expected the field `className` to be a primitive type in the JSON string but got " + data['className']);
        }
        // ensure the json data is a string
        if (data['codeFormatted'] && !(typeof data['codeFormatted'] === 'string' || data['codeFormatted'] instanceof String)) {
            throw new Error("Expected the field `codeFormatted` to be a primitive type in the JSON string but got " + data['codeFormatted']);
        }
        // ensure the json data is a string
        if (data['codeRaw'] && !(typeof data['codeRaw'] === 'string' || data['codeRaw'] instanceof String)) {
            throw new Error("Expected the field `codeRaw` to be a primitive type in the JSON string but got " + data['codeRaw']);
        }
        // ensure the json data is a string
        if (data['exceptionType'] && !(typeof data['exceptionType'] === 'string' || data['exceptionType'] instanceof String)) {
            throw new Error("Expected the field `exceptionType` to be a primitive type in the JSON string but got " + data['exceptionType']);
        }
        // ensure the json data is a string
        if (data['file'] && !(typeof data['file'] === 'string' || data['file'] instanceof String)) {
            throw new Error("Expected the field `file` to be a primitive type in the JSON string but got " + data['file']);
        }
        // ensure the json data is a string
        if (data['frameworkName'] && !(typeof data['frameworkName'] === 'string' || data['frameworkName'] instanceof String)) {
            throw new Error("Expected the field `frameworkName` to be a primitive type in the JSON string but got " + data['frameworkName']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['method'] && !(typeof data['method'] === 'string' || data['method'] instanceof String)) {
            throw new Error("Expected the field `method` to be a primitive type in the JSON string but got " + data['method']);
        }
        // ensure the json data is a string
        if (data['methodParams'] && !(typeof data['methodParams'] === 'string' || data['methodParams'] instanceof String)) {
            throw new Error("Expected the field `methodParams` to be a primitive type in the JSON string but got " + data['methodParams']);
        }
        // ensure the json data is a string
        if (data['osExceptionType'] && !(typeof data['osExceptionType'] === 'string' || data['osExceptionType'] instanceof String)) {
            throw new Error("Expected the field `osExceptionType` to be a primitive type in the JSON string but got " + data['osExceptionType']);
        }

        return true;
    }


}



/**
 * this line isn't from any framework
 * @member {Boolean} appCode
 */
HandledErrorReasonFrame.prototype['appCode'] = undefined;

/**
 * is a class method
 * @member {Boolean} classMethod
 */
HandledErrorReasonFrame.prototype['classMethod'] = undefined;

/**
 * name of the class
 * @member {String} className
 */
HandledErrorReasonFrame.prototype['className'] = undefined;

/**
 * Formatted frame string
 * @member {String} codeFormatted
 */
HandledErrorReasonFrame.prototype['codeFormatted'] = undefined;

/**
 * Unformatted Frame string
 * @member {String} codeRaw
 */
HandledErrorReasonFrame.prototype['codeRaw'] = undefined;

/**
 * Exception type.
 * @member {String} exceptionType
 */
HandledErrorReasonFrame.prototype['exceptionType'] = undefined;

/**
 * name of the file
 * @member {String} file
 */
HandledErrorReasonFrame.prototype['file'] = undefined;

/**
 * Name of the framework
 * @member {String} frameworkName
 */
HandledErrorReasonFrame.prototype['frameworkName'] = undefined;

/**
 * programming language of the frame
 * @member {module:model/HandledErrorReasonFrame.LanguageEnum} language
 */
HandledErrorReasonFrame.prototype['language'] = undefined;

/**
 * line number
 * @member {Number} line
 */
HandledErrorReasonFrame.prototype['line'] = undefined;

/**
 * name of the method
 * @member {String} method
 */
HandledErrorReasonFrame.prototype['method'] = undefined;

/**
 * parameters of the frames method
 * @member {String} methodParams
 */
HandledErrorReasonFrame.prototype['methodParams'] = undefined;

/**
 * OS exception type. (aka. SIGNAL)
 * @member {String} osExceptionType
 */
HandledErrorReasonFrame.prototype['osExceptionType'] = undefined;





/**
 * Allowed values for the <code>language</code> property.
 * @enum {String}
 * @readonly
 */
HandledErrorReasonFrame['LanguageEnum'] = {

    /**
     * value: "JavaScript"
     * @const
     */
    "JavaScript": "JavaScript",

    /**
     * value: "CSharp"
     * @const
     */
    "CSharp": "CSharp",

    /**
     * value: "Objective-C"
     * @const
     */
    "Objective-C": "Objective-C",

    /**
     * value: "Objective-Cpp"
     * @const
     */
    "Objective-Cpp": "Objective-Cpp",

    /**
     * value: "Cpp"
     * @const
     */
    "Cpp": "Cpp",

    /**
     * value: "C"
     * @const
     */
    "C": "C",

    /**
     * value: "Swift"
     * @const
     */
    "Swift": "Swift",

    /**
     * value: "Java"
     * @const
     */
    "Java": "Java",

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown"
};



export default HandledErrorReasonFrame;

