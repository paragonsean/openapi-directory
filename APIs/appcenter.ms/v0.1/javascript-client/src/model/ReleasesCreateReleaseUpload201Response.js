/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReleasesCreateReleaseUpload201Response model module.
 * @module model/ReleasesCreateReleaseUpload201Response
 * @version v0.1
 */
class ReleasesCreateReleaseUpload201Response {
    /**
     * Constructs a new <code>ReleasesCreateReleaseUpload201Response</code>.
     * @alias module:model/ReleasesCreateReleaseUpload201Response
     * @param id {String} The ID for the newly created upload. It is going to be required later in the process.
     * @param packageAssetId {String} The associated asset ID in the file management service associated with this uploaded.
     * @param token {String} The access token used for upload permissions.
     * @param uploadDomain {String} The URL domain used to upload the release.
     * @param urlEncodedToken {String} The access token used for upload permissions (URL encoded to use as a single query parameter).
     */
    constructor(id, packageAssetId, token, uploadDomain, urlEncodedToken) { 
        
        ReleasesCreateReleaseUpload201Response.initialize(this, id, packageAssetId, token, uploadDomain, urlEncodedToken);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, packageAssetId, token, uploadDomain, urlEncodedToken) { 
        obj['id'] = id;
        obj['package_asset_id'] = packageAssetId;
        obj['token'] = token;
        obj['upload_domain'] = uploadDomain;
        obj['url_encoded_token'] = urlEncodedToken;
    }

    /**
     * Constructs a <code>ReleasesCreateReleaseUpload201Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReleasesCreateReleaseUpload201Response} obj Optional instance to populate.
     * @return {module:model/ReleasesCreateReleaseUpload201Response} The populated <code>ReleasesCreateReleaseUpload201Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReleasesCreateReleaseUpload201Response();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('package_asset_id')) {
                obj['package_asset_id'] = ApiClient.convertToType(data['package_asset_id'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('upload_domain')) {
                obj['upload_domain'] = ApiClient.convertToType(data['upload_domain'], 'String');
            }
            if (data.hasOwnProperty('url_encoded_token')) {
                obj['url_encoded_token'] = ApiClient.convertToType(data['url_encoded_token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReleasesCreateReleaseUpload201Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReleasesCreateReleaseUpload201Response</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReleasesCreateReleaseUpload201Response.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['package_asset_id'] && !(typeof data['package_asset_id'] === 'string' || data['package_asset_id'] instanceof String)) {
            throw new Error("Expected the field `package_asset_id` to be a primitive type in the JSON string but got " + data['package_asset_id']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['upload_domain'] && !(typeof data['upload_domain'] === 'string' || data['upload_domain'] instanceof String)) {
            throw new Error("Expected the field `upload_domain` to be a primitive type in the JSON string but got " + data['upload_domain']);
        }
        // ensure the json data is a string
        if (data['url_encoded_token'] && !(typeof data['url_encoded_token'] === 'string' || data['url_encoded_token'] instanceof String)) {
            throw new Error("Expected the field `url_encoded_token` to be a primitive type in the JSON string but got " + data['url_encoded_token']);
        }

        return true;
    }


}

ReleasesCreateReleaseUpload201Response.RequiredProperties = ["id", "package_asset_id", "token", "upload_domain", "url_encoded_token"];

/**
 * The ID for the newly created upload. It is going to be required later in the process.
 * @member {String} id
 */
ReleasesCreateReleaseUpload201Response.prototype['id'] = undefined;

/**
 * The associated asset ID in the file management service associated with this uploaded.
 * @member {String} package_asset_id
 */
ReleasesCreateReleaseUpload201Response.prototype['package_asset_id'] = undefined;

/**
 * The access token used for upload permissions.
 * @member {String} token
 */
ReleasesCreateReleaseUpload201Response.prototype['token'] = undefined;

/**
 * The URL domain used to upload the release.
 * @member {String} upload_domain
 */
ReleasesCreateReleaseUpload201Response.prototype['upload_domain'] = undefined;

/**
 * The access token used for upload permissions (URL encoded to use as a single query parameter).
 * @member {String} url_encoded_token
 */
ReleasesCreateReleaseUpload201Response.prototype['url_encoded_token'] = undefined;






export default ReleasesCreateReleaseUpload201Response;

