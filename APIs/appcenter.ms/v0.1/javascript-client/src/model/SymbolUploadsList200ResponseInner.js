/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SymbolUploadsList200ResponseInnerSymbolsUploadedInner from './SymbolUploadsList200ResponseInnerSymbolsUploadedInner';
import SymbolUploadsList200ResponseInnerUser from './SymbolUploadsList200ResponseInnerUser';

/**
 * The SymbolUploadsList200ResponseInner model module.
 * @module model/SymbolUploadsList200ResponseInner
 * @version v0.1
 */
class SymbolUploadsList200ResponseInner {
    /**
     * Constructs a new <code>SymbolUploadsList200ResponseInner</code>.
     * A single symbol upload entity
     * @alias module:model/SymbolUploadsList200ResponseInner
     * @param appId {String} The application that this symbol upload belongs to
     * @param status {module:model/SymbolUploadsList200ResponseInner.StatusEnum} The current status for the symbol upload
     * @param symbolType {module:model/SymbolUploadsList200ResponseInner.SymbolTypeEnum} The type of the symbol for the current symbol upload
     * @param symbolUploadId {String} The id for the current symbol upload
     */
    constructor(appId, status, symbolType, symbolUploadId) { 
        
        SymbolUploadsList200ResponseInner.initialize(this, appId, status, symbolType, symbolUploadId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, appId, status, symbolType, symbolUploadId) { 
        obj['app_id'] = appId;
        obj['status'] = status;
        obj['symbol_type'] = symbolType;
        obj['symbol_upload_id'] = symbolUploadId;
    }

    /**
     * Constructs a <code>SymbolUploadsList200ResponseInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SymbolUploadsList200ResponseInner} obj Optional instance to populate.
     * @return {module:model/SymbolUploadsList200ResponseInner} The populated <code>SymbolUploadsList200ResponseInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SymbolUploadsList200ResponseInner();

            if (data.hasOwnProperty('app_id')) {
                obj['app_id'] = ApiClient.convertToType(data['app_id'], 'String');
            }
            if (data.hasOwnProperty('file_name')) {
                obj['file_name'] = ApiClient.convertToType(data['file_name'], 'String');
            }
            if (data.hasOwnProperty('file_size')) {
                obj['file_size'] = ApiClient.convertToType(data['file_size'], 'Number');
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = ApiClient.convertToType(data['origin'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('symbol_type')) {
                obj['symbol_type'] = ApiClient.convertToType(data['symbol_type'], 'String');
            }
            if (data.hasOwnProperty('symbol_upload_id')) {
                obj['symbol_upload_id'] = ApiClient.convertToType(data['symbol_upload_id'], 'String');
            }
            if (data.hasOwnProperty('symbols_uploaded')) {
                obj['symbols_uploaded'] = ApiClient.convertToType(data['symbols_uploaded'], [SymbolUploadsList200ResponseInnerSymbolsUploadedInner]);
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = SymbolUploadsList200ResponseInnerUser.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SymbolUploadsList200ResponseInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SymbolUploadsList200ResponseInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SymbolUploadsList200ResponseInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['app_id'] && !(typeof data['app_id'] === 'string' || data['app_id'] instanceof String)) {
            throw new Error("Expected the field `app_id` to be a primitive type in the JSON string but got " + data['app_id']);
        }
        // ensure the json data is a string
        if (data['file_name'] && !(typeof data['file_name'] === 'string' || data['file_name'] instanceof String)) {
            throw new Error("Expected the field `file_name` to be a primitive type in the JSON string but got " + data['file_name']);
        }
        // ensure the json data is a string
        if (data['origin'] && !(typeof data['origin'] === 'string' || data['origin'] instanceof String)) {
            throw new Error("Expected the field `origin` to be a primitive type in the JSON string but got " + data['origin']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['symbol_type'] && !(typeof data['symbol_type'] === 'string' || data['symbol_type'] instanceof String)) {
            throw new Error("Expected the field `symbol_type` to be a primitive type in the JSON string but got " + data['symbol_type']);
        }
        // ensure the json data is a string
        if (data['symbol_upload_id'] && !(typeof data['symbol_upload_id'] === 'string' || data['symbol_upload_id'] instanceof String)) {
            throw new Error("Expected the field `symbol_upload_id` to be a primitive type in the JSON string but got " + data['symbol_upload_id']);
        }
        if (data['symbols_uploaded']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['symbols_uploaded'])) {
                throw new Error("Expected the field `symbols_uploaded` to be an array in the JSON data but got " + data['symbols_uploaded']);
            }
            // validate the optional field `symbols_uploaded` (array)
            for (const item of data['symbols_uploaded']) {
                SymbolUploadsList200ResponseInnerSymbolsUploadedInner.validateJSON(item);
            };
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          SymbolUploadsList200ResponseInnerUser.validateJSON(data['user']);
        }

        return true;
    }


}

SymbolUploadsList200ResponseInner.RequiredProperties = ["app_id", "status", "symbol_type", "symbol_upload_id"];

/**
 * The application that this symbol upload belongs to
 * @member {String} app_id
 */
SymbolUploadsList200ResponseInner.prototype['app_id'] = undefined;

/**
 * The file name for the symbol upload
 * @member {String} file_name
 */
SymbolUploadsList200ResponseInner.prototype['file_name'] = undefined;

/**
 * The size of the file in Mebibytes. This may be 0 until the status is indexed
 * @member {Number} file_size
 */
SymbolUploadsList200ResponseInner.prototype['file_size'] = undefined;

/**
 * The origin of the symbol upload
 * @member {module:model/SymbolUploadsList200ResponseInner.OriginEnum} origin
 */
SymbolUploadsList200ResponseInner.prototype['origin'] = undefined;

/**
 * The current status for the symbol upload
 * @member {module:model/SymbolUploadsList200ResponseInner.StatusEnum} status
 */
SymbolUploadsList200ResponseInner.prototype['status'] = undefined;

/**
 * The type of the symbol for the current symbol upload
 * @member {module:model/SymbolUploadsList200ResponseInner.SymbolTypeEnum} symbol_type
 */
SymbolUploadsList200ResponseInner.prototype['symbol_type'] = undefined;

/**
 * The id for the current symbol upload
 * @member {String} symbol_upload_id
 */
SymbolUploadsList200ResponseInner.prototype['symbol_upload_id'] = undefined;

/**
 * The symbols found in the upload. This may be empty until the status is indexed
 * @member {Array.<module:model/SymbolUploadsList200ResponseInnerSymbolsUploadedInner>} symbols_uploaded
 */
SymbolUploadsList200ResponseInner.prototype['symbols_uploaded'] = undefined;

/**
 * When the symbol upload was committed, or last transaction time if not committed
 * @member {Date} timestamp
 */
SymbolUploadsList200ResponseInner.prototype['timestamp'] = undefined;

/**
 * @member {module:model/SymbolUploadsList200ResponseInnerUser} user
 */
SymbolUploadsList200ResponseInner.prototype['user'] = undefined;





/**
 * Allowed values for the <code>origin</code> property.
 * @enum {String}
 * @readonly
 */
SymbolUploadsList200ResponseInner['OriginEnum'] = {

    /**
     * value: "User"
     * @const
     */
    "User": "User",

    /**
     * value: "System"
     * @const
     */
    "System": "System"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
SymbolUploadsList200ResponseInner['StatusEnum'] = {

    /**
     * value: "created"
     * @const
     */
    "created": "created",

    /**
     * value: "committed"
     * @const
     */
    "committed": "committed",

    /**
     * value: "aborted"
     * @const
     */
    "aborted": "aborted",

    /**
     * value: "processing"
     * @const
     */
    "processing": "processing",

    /**
     * value: "indexed"
     * @const
     */
    "indexed": "indexed",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed"
};


/**
 * Allowed values for the <code>symbol_type</code> property.
 * @enum {String}
 * @readonly
 */
SymbolUploadsList200ResponseInner['SymbolTypeEnum'] = {

    /**
     * value: "Apple"
     * @const
     */
    "Apple": "Apple",

    /**
     * value: "JavaScript"
     * @const
     */
    "JavaScript": "JavaScript",

    /**
     * value: "Breakpad"
     * @const
     */
    "Breakpad": "Breakpad",

    /**
     * value: "AndroidProguard"
     * @const
     */
    "AndroidProguard": "AndroidProguard",

    /**
     * value: "UWP"
     * @const
     */
    "UWP": "UWP"
};



export default SymbolUploadsList200ResponseInner;

