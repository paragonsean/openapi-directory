/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BugtrackerGetSettings200ResponseSettings from './BugtrackerGetSettings200ResponseSettings';

/**
 * The BugtrackerGetSettings200Response model module.
 * @module model/BugtrackerGetSettings200Response
 * @version v0.1
 */
class BugtrackerGetSettings200Response {
    /**
     * Constructs a new <code>BugtrackerGetSettings200Response</code>.
     * Alerting bugtracker resource
     * @alias module:model/BugtrackerGetSettings200Response
     */
    constructor() { 
        
        BugtrackerGetSettings200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BugtrackerGetSettings200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BugtrackerGetSettings200Response} obj Optional instance to populate.
     * @return {module:model/BugtrackerGetSettings200Response} The populated <code>BugtrackerGetSettings200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BugtrackerGetSettings200Response();

            if (data.hasOwnProperty('event_types')) {
                obj['event_types'] = ApiClient.convertToType(data['event_types'], ['String']);
            }
            if (data.hasOwnProperty('settings')) {
                obj['settings'] = BugtrackerGetSettings200ResponseSettings.constructFromObject(data['settings']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BugtrackerGetSettings200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BugtrackerGetSettings200Response</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['event_types'])) {
            throw new Error("Expected the field `event_types` to be an array in the JSON data but got " + data['event_types']);
        }
        // validate the optional field `settings`
        if (data['settings']) { // data not null
          BugtrackerGetSettings200ResponseSettings.validateJSON(data['settings']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Event types enabled for bugtracker
 * @member {Array.<module:model/BugtrackerGetSettings200Response.EventTypesEnum>} event_types
 */
BugtrackerGetSettings200Response.prototype['event_types'] = undefined;

/**
 * @member {module:model/BugtrackerGetSettings200ResponseSettings} settings
 */
BugtrackerGetSettings200Response.prototype['settings'] = undefined;

/**
 * bugtracker state
 * @member {module:model/BugtrackerGetSettings200Response.StateEnum} state
 */
BugtrackerGetSettings200Response.prototype['state'] = undefined;

/**
 * ID of OAuth token
 * @member {String} token_id
 */
BugtrackerGetSettings200Response.prototype['token_id'] = undefined;

/**
 * type of bugtracker
 * @member {module:model/BugtrackerGetSettings200Response.TypeEnum} type
 */
BugtrackerGetSettings200Response.prototype['type'] = undefined;





/**
 * Allowed values for the <code>eventTypes</code> property.
 * @enum {String}
 * @readonly
 */
BugtrackerGetSettings200Response['EventTypesEnum'] = {

    /**
     * value: "newCrashGroupCreated"
     * @const
     */
    "newCrashGroupCreated": "newCrashGroupCreated",

    /**
     * value: "newAppReleased"
     * @const
     */
    "newAppReleased": "newAppReleased"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
BugtrackerGetSettings200Response['StateEnum'] = {

    /**
     * value: "enabled"
     * @const
     */
    "enabled": "enabled",

    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled",

    /**
     * value: "unauthorized"
     * @const
     */
    "unauthorized": "unauthorized"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
BugtrackerGetSettings200Response['TypeEnum'] = {

    /**
     * value: "github"
     * @const
     */
    "github": "github",

    /**
     * value: "vsts"
     * @const
     */
    "vsts": "vsts",

    /**
     * value: "jira"
     * @const
     */
    "jira": "jira"
};



export default BugtrackerGetSettings200Response;

