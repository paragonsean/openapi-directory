/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeviceSetOwner model module.
 * @module model/DeviceSetOwner
 * @version v0.1
 */
class DeviceSetOwner {
    /**
     * Constructs a new <code>DeviceSetOwner</code>.
     * The owner of a device set
     * @alias module:model/DeviceSetOwner
     * @param id {String} Account ID
     * @param name {String} Name of the account
     * @param type {String} Type of account
     */
    constructor(id, name, type) { 
        
        DeviceSetOwner.initialize(this, id, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, type) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>DeviceSetOwner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceSetOwner} obj Optional instance to populate.
     * @return {module:model/DeviceSetOwner} The populated <code>DeviceSetOwner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceSetOwner();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceSetOwner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceSetOwner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeviceSetOwner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

DeviceSetOwner.RequiredProperties = ["id", "name", "type"];

/**
 * Display name of the account
 * @member {String} displayName
 */
DeviceSetOwner.prototype['displayName'] = undefined;

/**
 * Account ID
 * @member {String} id
 */
DeviceSetOwner.prototype['id'] = undefined;

/**
 * Name of the account
 * @member {String} name
 */
DeviceSetOwner.prototype['name'] = undefined;

/**
 * Type of account
 * @member {String} type
 */
DeviceSetOwner.prototype['type'] = undefined;






export default DeviceSetOwner;

