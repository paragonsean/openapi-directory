/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BuildsListToolsetProjects200ResponseXamarinXamarinSolutionsInner from './BuildsListToolsetProjects200ResponseXamarinXamarinSolutionsInner';

/**
 * The XamarinToolset model module.
 * @module model/XamarinToolset
 * @version v0.1
 */
class XamarinToolset {
    /**
     * Constructs a new <code>XamarinToolset</code>.
     * @alias module:model/XamarinToolset
     * @param xamarinSolutions {Array.<module:model/BuildsListToolsetProjects200ResponseXamarinXamarinSolutionsInner>} Xamarin solutions for the toolset
     */
    constructor(xamarinSolutions) { 
        
        XamarinToolset.initialize(this, xamarinSolutions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, xamarinSolutions) { 
        obj['xamarinSolutions'] = xamarinSolutions;
    }

    /**
     * Constructs a <code>XamarinToolset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/XamarinToolset} obj Optional instance to populate.
     * @return {module:model/XamarinToolset} The populated <code>XamarinToolset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new XamarinToolset();

            if (data.hasOwnProperty('xamarinSolutions')) {
                obj['xamarinSolutions'] = ApiClient.convertToType(data['xamarinSolutions'], [BuildsListToolsetProjects200ResponseXamarinXamarinSolutionsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>XamarinToolset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>XamarinToolset</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of XamarinToolset.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['xamarinSolutions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['xamarinSolutions'])) {
                throw new Error("Expected the field `xamarinSolutions` to be an array in the JSON data but got " + data['xamarinSolutions']);
            }
            // validate the optional field `xamarinSolutions` (array)
            for (const item of data['xamarinSolutions']) {
                BuildsListToolsetProjects200ResponseXamarinXamarinSolutionsInner.validateJSON(item);
            };
        }

        return true;
    }


}

XamarinToolset.RequiredProperties = ["xamarinSolutions"];

/**
 * Xamarin solutions for the toolset
 * @member {Array.<module:model/BuildsListToolsetProjects200ResponseXamarinXamarinSolutionsInner>} xamarinSolutions
 */
XamarinToolset.prototype['xamarinSolutions'] = undefined;






export default XamarinToolset;

