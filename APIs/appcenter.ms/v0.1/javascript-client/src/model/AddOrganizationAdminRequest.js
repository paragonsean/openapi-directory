/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AddOrganizationAdminRequest model module.
 * @module model/AddOrganizationAdminRequest
 * @version v0.1
 */
class AddOrganizationAdminRequest {
    /**
     * Constructs a new <code>AddOrganizationAdminRequest</code>.
     * @alias module:model/AddOrganizationAdminRequest
     * @param assigningReason {String} The explanation for adding new org admin.
     * @param issueId {String} The id of the related Intercom issue.
     * @param newOrgAdminId {String} The internal unique id (UUID) of the account.
     * @param responsibleAdminId {String} The id of the user who started adding new org admin.
     */
    constructor(assigningReason, issueId, newOrgAdminId, responsibleAdminId) { 
        
        AddOrganizationAdminRequest.initialize(this, assigningReason, issueId, newOrgAdminId, responsibleAdminId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, assigningReason, issueId, newOrgAdminId, responsibleAdminId) { 
        obj['assigning_reason'] = assigningReason;
        obj['issue_id'] = issueId;
        obj['new_org_admin_id'] = newOrgAdminId;
        obj['responsible_admin_id'] = responsibleAdminId;
    }

    /**
     * Constructs a <code>AddOrganizationAdminRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddOrganizationAdminRequest} obj Optional instance to populate.
     * @return {module:model/AddOrganizationAdminRequest} The populated <code>AddOrganizationAdminRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddOrganizationAdminRequest();

            if (data.hasOwnProperty('assigning_reason')) {
                obj['assigning_reason'] = ApiClient.convertToType(data['assigning_reason'], 'String');
            }
            if (data.hasOwnProperty('issue_id')) {
                obj['issue_id'] = ApiClient.convertToType(data['issue_id'], 'String');
            }
            if (data.hasOwnProperty('new_org_admin_id')) {
                obj['new_org_admin_id'] = ApiClient.convertToType(data['new_org_admin_id'], 'String');
            }
            if (data.hasOwnProperty('responsible_admin_id')) {
                obj['responsible_admin_id'] = ApiClient.convertToType(data['responsible_admin_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddOrganizationAdminRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddOrganizationAdminRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AddOrganizationAdminRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['assigning_reason'] && !(typeof data['assigning_reason'] === 'string' || data['assigning_reason'] instanceof String)) {
            throw new Error("Expected the field `assigning_reason` to be a primitive type in the JSON string but got " + data['assigning_reason']);
        }
        // ensure the json data is a string
        if (data['issue_id'] && !(typeof data['issue_id'] === 'string' || data['issue_id'] instanceof String)) {
            throw new Error("Expected the field `issue_id` to be a primitive type in the JSON string but got " + data['issue_id']);
        }
        // ensure the json data is a string
        if (data['new_org_admin_id'] && !(typeof data['new_org_admin_id'] === 'string' || data['new_org_admin_id'] instanceof String)) {
            throw new Error("Expected the field `new_org_admin_id` to be a primitive type in the JSON string but got " + data['new_org_admin_id']);
        }
        // ensure the json data is a string
        if (data['responsible_admin_id'] && !(typeof data['responsible_admin_id'] === 'string' || data['responsible_admin_id'] instanceof String)) {
            throw new Error("Expected the field `responsible_admin_id` to be a primitive type in the JSON string but got " + data['responsible_admin_id']);
        }

        return true;
    }


}

AddOrganizationAdminRequest.RequiredProperties = ["assigning_reason", "issue_id", "new_org_admin_id", "responsible_admin_id"];

/**
 * The explanation for adding new org admin.
 * @member {String} assigning_reason
 */
AddOrganizationAdminRequest.prototype['assigning_reason'] = undefined;

/**
 * The id of the related Intercom issue.
 * @member {String} issue_id
 */
AddOrganizationAdminRequest.prototype['issue_id'] = undefined;

/**
 * The internal unique id (UUID) of the account.
 * @member {String} new_org_admin_id
 */
AddOrganizationAdminRequest.prototype['new_org_admin_id'] = undefined;

/**
 * The id of the user who started adding new org admin.
 * @member {String} responsible_admin_id
 */
AddOrganizationAdminRequest.prototype['responsible_admin_id'] = undefined;






export default AddOrganizationAdminRequest;

