/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TestRunSummary from './TestRunSummary';

/**
 * The TestSeries model module.
 * @module model/TestSeries
 * @version v0.1
 */
class TestSeries {
    /**
     * Constructs a new <code>TestSeries</code>.
     * Summary of a single test series
     * @alias module:model/TestSeries
     * @param name {String} Name of the test series
     * @param slug {String} Unique, human-readable identifier of the test series
     */
    constructor(name, slug) { 
        
        TestSeries.initialize(this, name, slug);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, slug) { 
        obj['name'] = name;
        obj['slug'] = slug;
    }

    /**
     * Constructs a <code>TestSeries</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestSeries} obj Optional instance to populate.
     * @return {module:model/TestSeries} The populated <code>TestSeries</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestSeries();

            if (data.hasOwnProperty('mostRecentActivity')) {
                obj['mostRecentActivity'] = ApiClient.convertToType(data['mostRecentActivity'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('testRuns')) {
                obj['testRuns'] = ApiClient.convertToType(data['testRuns'], [TestRunSummary]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestSeries</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestSeries</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TestSeries.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['mostRecentActivity'] && !(typeof data['mostRecentActivity'] === 'string' || data['mostRecentActivity'] instanceof String)) {
            throw new Error("Expected the field `mostRecentActivity` to be a primitive type in the JSON string but got " + data['mostRecentActivity']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        if (data['testRuns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['testRuns'])) {
                throw new Error("Expected the field `testRuns` to be an array in the JSON data but got " + data['testRuns']);
            }
            // validate the optional field `testRuns` (array)
            for (const item of data['testRuns']) {
                TestRunSummary.validateJSON(item);
            };
        }

        return true;
    }


}

TestSeries.RequiredProperties = ["name", "slug"];

/**
 * Date of the latest test run that used this test series
 * @member {String} mostRecentActivity
 */
TestSeries.prototype['mostRecentActivity'] = undefined;

/**
 * Name of the test series
 * @member {String} name
 */
TestSeries.prototype['name'] = undefined;

/**
 * Unique, human-readable identifier of the test series
 * @member {String} slug
 */
TestSeries.prototype['slug'] = undefined;

/**
 * Most recent test runs
 * @member {Array.<module:model/TestRunSummary>} testRuns
 */
TestSeries.prototype['testRuns'] = undefined;






export default TestSeries;

