/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AddAppTesterResponse model module.
 * @module model/AddAppTesterResponse
 * @version v0.1
 */
class AddAppTesterResponse {
    /**
     * Constructs a new <code>AddAppTesterResponse</code>.
     * @alias module:model/AddAppTesterResponse
     * @param releaseId {Number} The ID of the release the user was added to
     * @param userId {String} The user ID of the tester that needs to be added
     */
    constructor(releaseId, userId) { 
        
        AddAppTesterResponse.initialize(this, releaseId, userId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, releaseId, userId) { 
        obj['release_id'] = releaseId;
        obj['user_id'] = userId;
    }

    /**
     * Constructs a <code>AddAppTesterResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddAppTesterResponse} obj Optional instance to populate.
     * @return {module:model/AddAppTesterResponse} The populated <code>AddAppTesterResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddAppTesterResponse();

            if (data.hasOwnProperty('release_id')) {
                obj['release_id'] = ApiClient.convertToType(data['release_id'], 'Number');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddAppTesterResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddAppTesterResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AddAppTesterResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }

        return true;
    }


}

AddAppTesterResponse.RequiredProperties = ["release_id", "user_id"];

/**
 * The ID of the release the user was added to
 * @member {Number} release_id
 */
AddAppTesterResponse.prototype['release_id'] = undefined;

/**
 * The user ID of the tester that needs to be added
 * @member {String} user_id
 */
AddAppTesterResponse.prototype['user_id'] = undefined;






export default AddAppTesterResponse;

