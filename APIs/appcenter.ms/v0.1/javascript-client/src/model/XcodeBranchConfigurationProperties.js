/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BranchConfigurationsGet200ResponseAllOfToolsetsXcodeAppExtensionProvisioningProfileFilesInner from './BranchConfigurationsGet200ResponseAllOfToolsetsXcodeAppExtensionProvisioningProfileFilesInner';

/**
 * The XcodeBranchConfigurationProperties model module.
 * @module model/XcodeBranchConfigurationProperties
 * @version v0.1
 */
class XcodeBranchConfigurationProperties {
    /**
     * Constructs a new <code>XcodeBranchConfigurationProperties</code>.
     * Build configuration when Xcode is part of the build steps
     * @alias module:model/XcodeBranchConfigurationProperties
     */
    constructor() { 
        
        XcodeBranchConfigurationProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>XcodeBranchConfigurationProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/XcodeBranchConfigurationProperties} obj Optional instance to populate.
     * @return {module:model/XcodeBranchConfigurationProperties} The populated <code>XcodeBranchConfigurationProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new XcodeBranchConfigurationProperties();

            if (data.hasOwnProperty('appExtensionProvisioningProfileFiles')) {
                obj['appExtensionProvisioningProfileFiles'] = ApiClient.convertToType(data['appExtensionProvisioningProfileFiles'], [BranchConfigurationsGet200ResponseAllOfToolsetsXcodeAppExtensionProvisioningProfileFilesInner]);
            }
            if (data.hasOwnProperty('archiveConfiguration')) {
                obj['archiveConfiguration'] = ApiClient.convertToType(data['archiveConfiguration'], 'String');
            }
            if (data.hasOwnProperty('automaticSigning')) {
                obj['automaticSigning'] = ApiClient.convertToType(data['automaticSigning'], 'Boolean');
            }
            if (data.hasOwnProperty('cartfilePath')) {
                obj['cartfilePath'] = ApiClient.convertToType(data['cartfilePath'], 'String');
            }
            if (data.hasOwnProperty('certificateEncoded')) {
                obj['certificateEncoded'] = ApiClient.convertToType(data['certificateEncoded'], 'String');
            }
            if (data.hasOwnProperty('certificateFileId')) {
                obj['certificateFileId'] = ApiClient.convertToType(data['certificateFileId'], 'String');
            }
            if (data.hasOwnProperty('certificateFilename')) {
                obj['certificateFilename'] = ApiClient.convertToType(data['certificateFilename'], 'String');
            }
            if (data.hasOwnProperty('certificatePassword')) {
                obj['certificatePassword'] = ApiClient.convertToType(data['certificatePassword'], 'String');
            }
            if (data.hasOwnProperty('certificateUploadId')) {
                obj['certificateUploadId'] = ApiClient.convertToType(data['certificateUploadId'], 'String');
            }
            if (data.hasOwnProperty('forceLegacyBuildSystem')) {
                obj['forceLegacyBuildSystem'] = ApiClient.convertToType(data['forceLegacyBuildSystem'], 'Boolean');
            }
            if (data.hasOwnProperty('podfilePath')) {
                obj['podfilePath'] = ApiClient.convertToType(data['podfilePath'], 'String');
            }
            if (data.hasOwnProperty('projectOrWorkspacePath')) {
                obj['projectOrWorkspacePath'] = ApiClient.convertToType(data['projectOrWorkspacePath'], 'String');
            }
            if (data.hasOwnProperty('provisioningProfileEncoded')) {
                obj['provisioningProfileEncoded'] = ApiClient.convertToType(data['provisioningProfileEncoded'], 'String');
            }
            if (data.hasOwnProperty('provisioningProfileFileId')) {
                obj['provisioningProfileFileId'] = ApiClient.convertToType(data['provisioningProfileFileId'], 'String');
            }
            if (data.hasOwnProperty('provisioningProfileFilename')) {
                obj['provisioningProfileFilename'] = ApiClient.convertToType(data['provisioningProfileFilename'], 'String');
            }
            if (data.hasOwnProperty('provisioningProfileUploadId')) {
                obj['provisioningProfileUploadId'] = ApiClient.convertToType(data['provisioningProfileUploadId'], 'String');
            }
            if (data.hasOwnProperty('scheme')) {
                obj['scheme'] = ApiClient.convertToType(data['scheme'], 'String');
            }
            if (data.hasOwnProperty('targetToArchive')) {
                obj['targetToArchive'] = ApiClient.convertToType(data['targetToArchive'], 'String');
            }
            if (data.hasOwnProperty('teamId')) {
                obj['teamId'] = ApiClient.convertToType(data['teamId'], 'String');
            }
            if (data.hasOwnProperty('xcodeProjectSha')) {
                obj['xcodeProjectSha'] = ApiClient.convertToType(data['xcodeProjectSha'], 'String');
            }
            if (data.hasOwnProperty('xcodeVersion')) {
                obj['xcodeVersion'] = ApiClient.convertToType(data['xcodeVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>XcodeBranchConfigurationProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>XcodeBranchConfigurationProperties</code>.
     */
    static validateJSON(data) {
        if (data['appExtensionProvisioningProfileFiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['appExtensionProvisioningProfileFiles'])) {
                throw new Error("Expected the field `appExtensionProvisioningProfileFiles` to be an array in the JSON data but got " + data['appExtensionProvisioningProfileFiles']);
            }
            // validate the optional field `appExtensionProvisioningProfileFiles` (array)
            for (const item of data['appExtensionProvisioningProfileFiles']) {
                BranchConfigurationsGet200ResponseAllOfToolsetsXcodeAppExtensionProvisioningProfileFilesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['archiveConfiguration'] && !(typeof data['archiveConfiguration'] === 'string' || data['archiveConfiguration'] instanceof String)) {
            throw new Error("Expected the field `archiveConfiguration` to be a primitive type in the JSON string but got " + data['archiveConfiguration']);
        }
        // ensure the json data is a string
        if (data['cartfilePath'] && !(typeof data['cartfilePath'] === 'string' || data['cartfilePath'] instanceof String)) {
            throw new Error("Expected the field `cartfilePath` to be a primitive type in the JSON string but got " + data['cartfilePath']);
        }
        // ensure the json data is a string
        if (data['certificateEncoded'] && !(typeof data['certificateEncoded'] === 'string' || data['certificateEncoded'] instanceof String)) {
            throw new Error("Expected the field `certificateEncoded` to be a primitive type in the JSON string but got " + data['certificateEncoded']);
        }
        // ensure the json data is a string
        if (data['certificateFileId'] && !(typeof data['certificateFileId'] === 'string' || data['certificateFileId'] instanceof String)) {
            throw new Error("Expected the field `certificateFileId` to be a primitive type in the JSON string but got " + data['certificateFileId']);
        }
        // ensure the json data is a string
        if (data['certificateFilename'] && !(typeof data['certificateFilename'] === 'string' || data['certificateFilename'] instanceof String)) {
            throw new Error("Expected the field `certificateFilename` to be a primitive type in the JSON string but got " + data['certificateFilename']);
        }
        // ensure the json data is a string
        if (data['certificatePassword'] && !(typeof data['certificatePassword'] === 'string' || data['certificatePassword'] instanceof String)) {
            throw new Error("Expected the field `certificatePassword` to be a primitive type in the JSON string but got " + data['certificatePassword']);
        }
        // ensure the json data is a string
        if (data['certificateUploadId'] && !(typeof data['certificateUploadId'] === 'string' || data['certificateUploadId'] instanceof String)) {
            throw new Error("Expected the field `certificateUploadId` to be a primitive type in the JSON string but got " + data['certificateUploadId']);
        }
        // ensure the json data is a string
        if (data['podfilePath'] && !(typeof data['podfilePath'] === 'string' || data['podfilePath'] instanceof String)) {
            throw new Error("Expected the field `podfilePath` to be a primitive type in the JSON string but got " + data['podfilePath']);
        }
        // ensure the json data is a string
        if (data['projectOrWorkspacePath'] && !(typeof data['projectOrWorkspacePath'] === 'string' || data['projectOrWorkspacePath'] instanceof String)) {
            throw new Error("Expected the field `projectOrWorkspacePath` to be a primitive type in the JSON string but got " + data['projectOrWorkspacePath']);
        }
        // ensure the json data is a string
        if (data['provisioningProfileEncoded'] && !(typeof data['provisioningProfileEncoded'] === 'string' || data['provisioningProfileEncoded'] instanceof String)) {
            throw new Error("Expected the field `provisioningProfileEncoded` to be a primitive type in the JSON string but got " + data['provisioningProfileEncoded']);
        }
        // ensure the json data is a string
        if (data['provisioningProfileFileId'] && !(typeof data['provisioningProfileFileId'] === 'string' || data['provisioningProfileFileId'] instanceof String)) {
            throw new Error("Expected the field `provisioningProfileFileId` to be a primitive type in the JSON string but got " + data['provisioningProfileFileId']);
        }
        // ensure the json data is a string
        if (data['provisioningProfileFilename'] && !(typeof data['provisioningProfileFilename'] === 'string' || data['provisioningProfileFilename'] instanceof String)) {
            throw new Error("Expected the field `provisioningProfileFilename` to be a primitive type in the JSON string but got " + data['provisioningProfileFilename']);
        }
        // ensure the json data is a string
        if (data['provisioningProfileUploadId'] && !(typeof data['provisioningProfileUploadId'] === 'string' || data['provisioningProfileUploadId'] instanceof String)) {
            throw new Error("Expected the field `provisioningProfileUploadId` to be a primitive type in the JSON string but got " + data['provisioningProfileUploadId']);
        }
        // ensure the json data is a string
        if (data['scheme'] && !(typeof data['scheme'] === 'string' || data['scheme'] instanceof String)) {
            throw new Error("Expected the field `scheme` to be a primitive type in the JSON string but got " + data['scheme']);
        }
        // ensure the json data is a string
        if (data['targetToArchive'] && !(typeof data['targetToArchive'] === 'string' || data['targetToArchive'] instanceof String)) {
            throw new Error("Expected the field `targetToArchive` to be a primitive type in the JSON string but got " + data['targetToArchive']);
        }
        // ensure the json data is a string
        if (data['teamId'] && !(typeof data['teamId'] === 'string' || data['teamId'] instanceof String)) {
            throw new Error("Expected the field `teamId` to be a primitive type in the JSON string but got " + data['teamId']);
        }
        // ensure the json data is a string
        if (data['xcodeProjectSha'] && !(typeof data['xcodeProjectSha'] === 'string' || data['xcodeProjectSha'] instanceof String)) {
            throw new Error("Expected the field `xcodeProjectSha` to be a primitive type in the JSON string but got " + data['xcodeProjectSha']);
        }
        // ensure the json data is a string
        if (data['xcodeVersion'] && !(typeof data['xcodeVersion'] === 'string' || data['xcodeVersion'] instanceof String)) {
            throw new Error("Expected the field `xcodeVersion` to be a primitive type in the JSON string but got " + data['xcodeVersion']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/BranchConfigurationsGet200ResponseAllOfToolsetsXcodeAppExtensionProvisioningProfileFilesInner>} appExtensionProvisioningProfileFiles
 */
XcodeBranchConfigurationProperties.prototype['appExtensionProvisioningProfileFiles'] = undefined;

/**
 * The build configuration of the target to archive
 * @member {String} archiveConfiguration
 */
XcodeBranchConfigurationProperties.prototype['archiveConfiguration'] = undefined;

/**
 * @member {Boolean} automaticSigning
 */
XcodeBranchConfigurationProperties.prototype['automaticSigning'] = undefined;

/**
 * Path to Carthage file, if present
 * @member {String} cartfilePath
 */
XcodeBranchConfigurationProperties.prototype['cartfilePath'] = undefined;

/**
 * @member {String} certificateEncoded
 */
XcodeBranchConfigurationProperties.prototype['certificateEncoded'] = undefined;

/**
 * @member {String} certificateFileId
 */
XcodeBranchConfigurationProperties.prototype['certificateFileId'] = undefined;

/**
 * @member {String} certificateFilename
 */
XcodeBranchConfigurationProperties.prototype['certificateFilename'] = undefined;

/**
 * @member {String} certificatePassword
 */
XcodeBranchConfigurationProperties.prototype['certificatePassword'] = undefined;

/**
 * @member {String} certificateUploadId
 */
XcodeBranchConfigurationProperties.prototype['certificateUploadId'] = undefined;

/**
 * Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used. By default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10. 
 * @member {Boolean} forceLegacyBuildSystem
 */
XcodeBranchConfigurationProperties.prototype['forceLegacyBuildSystem'] = undefined;

/**
 * Path to CococaPods file, if present
 * @member {String} podfilePath
 */
XcodeBranchConfigurationProperties.prototype['podfilePath'] = undefined;

/**
 * Xcode project/workspace path
 * @member {String} projectOrWorkspacePath
 */
XcodeBranchConfigurationProperties.prototype['projectOrWorkspacePath'] = undefined;

/**
 * @member {String} provisioningProfileEncoded
 */
XcodeBranchConfigurationProperties.prototype['provisioningProfileEncoded'] = undefined;

/**
 * @member {String} provisioningProfileFileId
 */
XcodeBranchConfigurationProperties.prototype['provisioningProfileFileId'] = undefined;

/**
 * @member {String} provisioningProfileFilename
 */
XcodeBranchConfigurationProperties.prototype['provisioningProfileFilename'] = undefined;

/**
 * @member {String} provisioningProfileUploadId
 */
XcodeBranchConfigurationProperties.prototype['provisioningProfileUploadId'] = undefined;

/**
 * @member {String} scheme
 */
XcodeBranchConfigurationProperties.prototype['scheme'] = undefined;

/**
 * The target id of the selected scheme to archive
 * @member {String} targetToArchive
 */
XcodeBranchConfigurationProperties.prototype['targetToArchive'] = undefined;

/**
 * @member {String} teamId
 */
XcodeBranchConfigurationProperties.prototype['teamId'] = undefined;

/**
 * The selected pbxproject hash to the repositroy
 * @member {String} xcodeProjectSha
 */
XcodeBranchConfigurationProperties.prototype['xcodeProjectSha'] = undefined;

/**
 * Xcode version used to build. Available versions can be found in \"/xcode_versions\" API. Default is latest stable version, at the time when the configuration is set.
 * @member {String} xcodeVersion
 */
XcodeBranchConfigurationProperties.prototype['xcodeVersion'] = undefined;






export default XcodeBranchConfigurationProperties;

