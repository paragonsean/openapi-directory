/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TestRunState model module.
 * @module model/TestRunState
 * @version v0.1
 */
class TestRunState {
    /**
     * Constructs a new <code>TestRunState</code>.
     * Current status of a test run
     * @alias module:model/TestRunState
     */
    constructor() { 
        
        TestRunState.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TestRunState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestRunState} obj Optional instance to populate.
     * @return {module:model/TestRunState} The populated <code>TestRunState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestRunState();

            if (data.hasOwnProperty('exit_code')) {
                obj['exit_code'] = ApiClient.convertToType(data['exit_code'], 'Number');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], ['String']);
            }
            if (data.hasOwnProperty('wait_time')) {
                obj['wait_time'] = ApiClient.convertToType(data['wait_time'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestRunState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestRunState</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['message'])) {
            throw new Error("Expected the field `message` to be an array in the JSON data but got " + data['message']);
        }

        return true;
    }


}



/**
 * The exit code that the client should use when exiting. Used for indicating status to the caller of the client. 0: test run completes with no failing tests 1: test run completes with at least one failing test 2: test run failed to complete. Status for test run is unknown 
 * @member {Number} exit_code
 */
TestRunState.prototype['exit_code'] = undefined;

/**
 * Multi-line message that describes the status
 * @member {Array.<String>} message
 */
TestRunState.prototype['message'] = undefined;

/**
 * Time (in seconds) that the client should wait for before checking the status again
 * @member {Number} wait_time
 */
TestRunState.prototype['wait_time'] = undefined;






export default TestRunState;

