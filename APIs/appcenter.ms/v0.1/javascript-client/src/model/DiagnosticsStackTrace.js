/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DiagnosticsException from './DiagnosticsException';
import DiagnosticsThread from './DiagnosticsThread';

/**
 * The DiagnosticsStackTrace model module.
 * @module model/DiagnosticsStackTrace
 * @version v0.1
 */
class DiagnosticsStackTrace {
    /**
     * Constructs a new <code>DiagnosticsStackTrace</code>.
     * a stacktrace in a processed and prettyfied way
     * @alias module:model/DiagnosticsStackTrace
     */
    constructor() { 
        
        DiagnosticsStackTrace.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DiagnosticsStackTrace</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiagnosticsStackTrace} obj Optional instance to populate.
     * @return {module:model/DiagnosticsStackTrace} The populated <code>DiagnosticsStackTrace</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiagnosticsStackTrace();

            if (data.hasOwnProperty('exception')) {
                obj['exception'] = DiagnosticsException.constructFromObject(data['exception']);
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('threads')) {
                obj['threads'] = ApiClient.convertToType(data['threads'], [DiagnosticsThread]);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiagnosticsStackTrace</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiagnosticsStackTrace</code>.
     */
    static validateJSON(data) {
        // validate the optional field `exception`
        if (data['exception']) { // data not null
          DiagnosticsException.validateJSON(data['exception']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        if (data['threads']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['threads'])) {
                throw new Error("Expected the field `threads` to be an array in the JSON data but got " + data['threads']);
            }
            // validate the optional field `threads` (array)
            for (const item of data['threads']) {
                DiagnosticsThread.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {module:model/DiagnosticsException} exception
 */
DiagnosticsStackTrace.prototype['exception'] = undefined;

/**
 * @member {String} reason
 */
DiagnosticsStackTrace.prototype['reason'] = undefined;

/**
 * @member {Array.<module:model/DiagnosticsThread>} threads
 */
DiagnosticsStackTrace.prototype['threads'] = undefined;

/**
 * @member {String} title
 */
DiagnosticsStackTrace.prototype['title'] = undefined;






export default DiagnosticsStackTrace;

