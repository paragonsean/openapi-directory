/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BuildsListToolsetProjects200ResponseUwpUwpSolutionsInner from './BuildsListToolsetProjects200ResponseUwpUwpSolutionsInner';

/**
 * The UWPToolset model module.
 * @module model/UWPToolset
 * @version v0.1
 */
class UWPToolset {
    /**
     * Constructs a new <code>UWPToolset</code>.
     * @alias module:model/UWPToolset
     * @param uwpSolutions {Array.<module:model/BuildsListToolsetProjects200ResponseUwpUwpSolutionsInner>} The UWP solutions detected
     */
    constructor(uwpSolutions) { 
        
        UWPToolset.initialize(this, uwpSolutions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, uwpSolutions) { 
        obj['uwpSolutions'] = uwpSolutions;
    }

    /**
     * Constructs a <code>UWPToolset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UWPToolset} obj Optional instance to populate.
     * @return {module:model/UWPToolset} The populated <code>UWPToolset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UWPToolset();

            if (data.hasOwnProperty('uwpSolutions')) {
                obj['uwpSolutions'] = ApiClient.convertToType(data['uwpSolutions'], [BuildsListToolsetProjects200ResponseUwpUwpSolutionsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UWPToolset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UWPToolset</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UWPToolset.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['uwpSolutions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['uwpSolutions'])) {
                throw new Error("Expected the field `uwpSolutions` to be an array in the JSON data but got " + data['uwpSolutions']);
            }
            // validate the optional field `uwpSolutions` (array)
            for (const item of data['uwpSolutions']) {
                BuildsListToolsetProjects200ResponseUwpUwpSolutionsInner.validateJSON(item);
            };
        }

        return true;
    }


}

UWPToolset.RequiredProperties = ["uwpSolutions"];

/**
 * The UWP solutions detected
 * @member {Array.<module:model/BuildsListToolsetProjects200ResponseUwpUwpSolutionsInner>} uwpSolutions
 */
UWPToolset.prototype['uwpSolutions'] = undefined;






export default UWPToolset;

