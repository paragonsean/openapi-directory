/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DiagnosticsException from './DiagnosticsException';
import DiagnosticsExceptionFramesInner from './DiagnosticsExceptionFramesInner';

/**
 * The DiagnosticsThread model module.
 * @module model/DiagnosticsThread
 * @version v0.1
 */
class DiagnosticsThread {
    /**
     * Constructs a new <code>DiagnosticsThread</code>.
     * a thread representation
     * @alias module:model/DiagnosticsThread
     * @param frames {Array.<module:model/DiagnosticsExceptionFramesInner>} frames of that thread
     * @param title {String} name of the thread
     */
    constructor(frames, title) { 
        
        DiagnosticsThread.initialize(this, frames, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, frames, title) { 
        obj['frames'] = frames;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>DiagnosticsThread</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiagnosticsThread} obj Optional instance to populate.
     * @return {module:model/DiagnosticsThread} The populated <code>DiagnosticsThread</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiagnosticsThread();

            if (data.hasOwnProperty('crashed')) {
                obj['crashed'] = ApiClient.convertToType(data['crashed'], 'Boolean');
            }
            if (data.hasOwnProperty('exception')) {
                obj['exception'] = DiagnosticsException.constructFromObject(data['exception']);
            }
            if (data.hasOwnProperty('frames')) {
                obj['frames'] = ApiClient.convertToType(data['frames'], [DiagnosticsExceptionFramesInner]);
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], 'String');
            }
            if (data.hasOwnProperty('relevant')) {
                obj['relevant'] = ApiClient.convertToType(data['relevant'], 'Boolean');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiagnosticsThread</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiagnosticsThread</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DiagnosticsThread.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `exception`
        if (data['exception']) { // data not null
          DiagnosticsException.validateJSON(data['exception']);
        }
        if (data['frames']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['frames'])) {
                throw new Error("Expected the field `frames` to be an array in the JSON data but got " + data['frames']);
            }
            // validate the optional field `frames` (array)
            for (const item of data['frames']) {
                DiagnosticsExceptionFramesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['platform'] && !(typeof data['platform'] === 'string' || data['platform'] instanceof String)) {
            throw new Error("Expected the field `platform` to be a primitive type in the JSON string but got " + data['platform']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

DiagnosticsThread.RequiredProperties = ["frames", "title"];

/**
 * True if this thread crashed
 * @member {Boolean} crashed
 */
DiagnosticsThread.prototype['crashed'] = undefined;

/**
 * @member {module:model/DiagnosticsException} exception
 */
DiagnosticsThread.prototype['exception'] = undefined;

/**
 * frames of that thread
 * @member {Array.<module:model/DiagnosticsExceptionFramesInner>} frames
 */
DiagnosticsThread.prototype['frames'] = undefined;

/**
 * SDK/Platform this thread is beeing generated from
 * @member {module:model/DiagnosticsThread.PlatformEnum} platform
 */
DiagnosticsThread.prototype['platform'] = undefined;

/**
 * Shows if a thread is relevant or not. Is false if all frames are non relevant, otherwise true
 * @member {Boolean} relevant
 */
DiagnosticsThread.prototype['relevant'] = undefined;

/**
 * name of the thread
 * @member {String} title
 */
DiagnosticsThread.prototype['title'] = undefined;





/**
 * Allowed values for the <code>platform</code> property.
 * @enum {String}
 * @readonly
 */
DiagnosticsThread['PlatformEnum'] = {

    /**
     * value: "ios"
     * @const
     */
    "ios": "ios",

    /**
     * value: "android"
     * @const
     */
    "android": "android",

    /**
     * value: "xamarin"
     * @const
     */
    "xamarin": "xamarin",

    /**
     * value: "react-native"
     * @const
     */
    "react-native": "react-native",

    /**
     * value: "ndk"
     * @const
     */
    "ndk": "ndk",

    /**
     * value: "unity"
     * @const
     */
    "unity": "unity",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};



export default DiagnosticsThread;

