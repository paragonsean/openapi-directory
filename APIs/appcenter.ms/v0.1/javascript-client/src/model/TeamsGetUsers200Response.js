/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TeamsGetUsers200Response model module.
 * @module model/TeamsGetUsers200Response
 * @version v0.1
 */
class TeamsGetUsers200Response {
    /**
     * Constructs a new <code>TeamsGetUsers200Response</code>.
     * @alias module:model/TeamsGetUsers200Response
     * @param displayName {String} The full name of the user. Might for example be first and last name
     * @param email {String} The email address of the user
     * @param name {String} The unique name that is used to identify the user.
     * @param role {module:model/TeamsGetUsers200Response.RoleEnum} The role of the user has within the team
     */
    constructor(displayName, email, name, role) { 
        
        TeamsGetUsers200Response.initialize(this, displayName, email, name, role);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, displayName, email, name, role) { 
        obj['display_name'] = displayName;
        obj['email'] = email;
        obj['name'] = name;
        obj['role'] = role;
    }

    /**
     * Constructs a <code>TeamsGetUsers200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TeamsGetUsers200Response} obj Optional instance to populate.
     * @return {module:model/TeamsGetUsers200Response} The populated <code>TeamsGetUsers200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TeamsGetUsers200Response();

            if (data.hasOwnProperty('display_name')) {
                obj['display_name'] = ApiClient.convertToType(data['display_name'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TeamsGetUsers200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TeamsGetUsers200Response</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TeamsGetUsers200Response.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['display_name'] && !(typeof data['display_name'] === 'string' || data['display_name'] instanceof String)) {
            throw new Error("Expected the field `display_name` to be a primitive type in the JSON string but got " + data['display_name']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }

        return true;
    }


}

TeamsGetUsers200Response.RequiredProperties = ["display_name", "email", "name", "role"];

/**
 * The full name of the user. Might for example be first and last name
 * @member {String} display_name
 */
TeamsGetUsers200Response.prototype['display_name'] = undefined;

/**
 * The email address of the user
 * @member {String} email
 */
TeamsGetUsers200Response.prototype['email'] = undefined;

/**
 * The unique name that is used to identify the user.
 * @member {String} name
 */
TeamsGetUsers200Response.prototype['name'] = undefined;

/**
 * The role of the user has within the team
 * @member {module:model/TeamsGetUsers200Response.RoleEnum} role
 */
TeamsGetUsers200Response.prototype['role'] = undefined;





/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
TeamsGetUsers200Response['RoleEnum'] = {

    /**
     * value: "maintainer"
     * @const
     */
    "maintainer": "maintainer",

    /**
     * value: "collaborator"
     * @const
     */
    "collaborator": "collaborator"
};



export default TeamsGetUsers200Response;

