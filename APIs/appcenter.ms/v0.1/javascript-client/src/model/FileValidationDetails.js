/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FileValidationDetails model module.
 * @module model/FileValidationDetails
 * @version v0.1
 */
class FileValidationDetails {
    /**
     * Constructs a new <code>FileValidationDetails</code>.
     * Additional details required for file validation
     * @alias module:model/FileValidationDetails
     * @param p12password {String} 
     */
    constructor(p12password) { 
        
        FileValidationDetails.initialize(this, p12password);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, p12password) { 
        obj['p12password'] = p12password;
    }

    /**
     * Constructs a <code>FileValidationDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FileValidationDetails} obj Optional instance to populate.
     * @return {module:model/FileValidationDetails} The populated <code>FileValidationDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileValidationDetails();

            if (data.hasOwnProperty('certificateUploadId')) {
                obj['certificateUploadId'] = ApiClient.convertToType(data['certificateUploadId'], 'String');
            }
            if (data.hasOwnProperty('p12password')) {
                obj['p12password'] = ApiClient.convertToType(data['p12password'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FileValidationDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FileValidationDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FileValidationDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['certificateUploadId'] && !(typeof data['certificateUploadId'] === 'string' || data['certificateUploadId'] instanceof String)) {
            throw new Error("Expected the field `certificateUploadId` to be a primitive type in the JSON string but got " + data['certificateUploadId']);
        }
        // ensure the json data is a string
        if (data['p12password'] && !(typeof data['p12password'] === 'string' || data['p12password'] instanceof String)) {
            throw new Error("Expected the field `p12password` to be a primitive type in the JSON string but got " + data['p12password']);
        }

        return true;
    }


}

FileValidationDetails.RequiredProperties = ["p12password"];

/**
 * @member {String} certificateUploadId
 */
FileValidationDetails.prototype['certificateUploadId'] = undefined;

/**
 * @member {String} p12password
 */
FileValidationDetails.prototype['p12password'] = undefined;






export default FileValidationDetails;

