/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BranchConfigurationsGet200ResponseAllOfToolsetsAndroid from './BranchConfigurationsGet200ResponseAllOfToolsetsAndroid';
import BranchConfigurationsGet200ResponseAllOfToolsetsJavascript from './BranchConfigurationsGet200ResponseAllOfToolsetsJavascript';
import BranchConfigurationsGet200ResponseAllOfToolsetsXamarin from './BranchConfigurationsGet200ResponseAllOfToolsetsXamarin';
import BranchConfigurationsGet200ResponseAllOfToolsetsXcode from './BranchConfigurationsGet200ResponseAllOfToolsetsXcode';

/**
 * The BranchConfigurationsGet200ResponseAllOfToolsets model module.
 * @module model/BranchConfigurationsGet200ResponseAllOfToolsets
 * @version v0.1
 */
class BranchConfigurationsGet200ResponseAllOfToolsets {
    /**
     * Constructs a new <code>BranchConfigurationsGet200ResponseAllOfToolsets</code>.
     * The branch build configuration for each toolset
     * @alias module:model/BranchConfigurationsGet200ResponseAllOfToolsets
     */
    constructor() { 
        
        BranchConfigurationsGet200ResponseAllOfToolsets.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BranchConfigurationsGet200ResponseAllOfToolsets</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BranchConfigurationsGet200ResponseAllOfToolsets} obj Optional instance to populate.
     * @return {module:model/BranchConfigurationsGet200ResponseAllOfToolsets} The populated <code>BranchConfigurationsGet200ResponseAllOfToolsets</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BranchConfigurationsGet200ResponseAllOfToolsets();

            if (data.hasOwnProperty('android')) {
                obj['android'] = BranchConfigurationsGet200ResponseAllOfToolsetsAndroid.constructFromObject(data['android']);
            }
            if (data.hasOwnProperty('javascript')) {
                obj['javascript'] = BranchConfigurationsGet200ResponseAllOfToolsetsJavascript.constructFromObject(data['javascript']);
            }
            if (data.hasOwnProperty('xamarin')) {
                obj['xamarin'] = BranchConfigurationsGet200ResponseAllOfToolsetsXamarin.constructFromObject(data['xamarin']);
            }
            if (data.hasOwnProperty('xcode')) {
                obj['xcode'] = BranchConfigurationsGet200ResponseAllOfToolsetsXcode.constructFromObject(data['xcode']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BranchConfigurationsGet200ResponseAllOfToolsets</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BranchConfigurationsGet200ResponseAllOfToolsets</code>.
     */
    static validateJSON(data) {
        // validate the optional field `android`
        if (data['android']) { // data not null
          BranchConfigurationsGet200ResponseAllOfToolsetsAndroid.validateJSON(data['android']);
        }
        // validate the optional field `javascript`
        if (data['javascript']) { // data not null
          BranchConfigurationsGet200ResponseAllOfToolsetsJavascript.validateJSON(data['javascript']);
        }
        // validate the optional field `xamarin`
        if (data['xamarin']) { // data not null
          BranchConfigurationsGet200ResponseAllOfToolsetsXamarin.validateJSON(data['xamarin']);
        }
        // validate the optional field `xcode`
        if (data['xcode']) { // data not null
          BranchConfigurationsGet200ResponseAllOfToolsetsXcode.validateJSON(data['xcode']);
        }

        return true;
    }


}



/**
 * @member {module:model/BranchConfigurationsGet200ResponseAllOfToolsetsAndroid} android
 */
BranchConfigurationsGet200ResponseAllOfToolsets.prototype['android'] = undefined;

/**
 * @member {module:model/BranchConfigurationsGet200ResponseAllOfToolsetsJavascript} javascript
 */
BranchConfigurationsGet200ResponseAllOfToolsets.prototype['javascript'] = undefined;

/**
 * @member {module:model/BranchConfigurationsGet200ResponseAllOfToolsetsXamarin} xamarin
 */
BranchConfigurationsGet200ResponseAllOfToolsets.prototype['xamarin'] = undefined;

/**
 * @member {module:model/BranchConfigurationsGet200ResponseAllOfToolsetsXcode} xcode
 */
BranchConfigurationsGet200ResponseAllOfToolsets.prototype['xcode'] = undefined;






export default BranchConfigurationsGet200ResponseAllOfToolsets;

