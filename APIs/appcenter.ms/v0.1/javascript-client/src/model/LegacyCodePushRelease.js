/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LegacyCodePushRelease model module.
 * @module model/LegacyCodePushRelease
 * @version v0.1
 */
class LegacyCodePushRelease {
    /**
     * Constructs a new <code>LegacyCodePushRelease</code>.
     * @alias module:model/LegacyCodePushRelease
     */
    constructor() { 
        
        LegacyCodePushRelease.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LegacyCodePushRelease</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LegacyCodePushRelease} obj Optional instance to populate.
     * @return {module:model/LegacyCodePushRelease} The populated <code>LegacyCodePushRelease</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LegacyCodePushRelease();

            if (data.hasOwnProperty('appVersion')) {
                obj['appVersion'] = ApiClient.convertToType(data['appVersion'], 'String');
            }
            if (data.hasOwnProperty('blobUrl')) {
                obj['blobUrl'] = ApiClient.convertToType(data['blobUrl'], 'String');
            }
            if (data.hasOwnProperty('diffPackageMap')) {
                obj['diffPackageMap'] = ApiClient.convertToType(data['diffPackageMap'], Object);
            }
            if (data.hasOwnProperty('isDisabled')) {
                obj['isDisabled'] = ApiClient.convertToType(data['isDisabled'], 'Boolean');
            }
            if (data.hasOwnProperty('isMandatory')) {
                obj['isMandatory'] = ApiClient.convertToType(data['isMandatory'], 'Boolean');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('manifestBlobUrl')) {
                obj['manifestBlobUrl'] = ApiClient.convertToType(data['manifestBlobUrl'], 'String');
            }
            if (data.hasOwnProperty('releaseMethod')) {
                obj['releaseMethod'] = ApiClient.convertToType(data['releaseMethod'], 'String');
            }
            if (data.hasOwnProperty('releasedByUserId')) {
                obj['releasedByUserId'] = ApiClient.convertToType(data['releasedByUserId'], 'String');
            }
            if (data.hasOwnProperty('rollout')) {
                obj['rollout'] = ApiClient.convertToType(data['rollout'], 'Number');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('uploadTime')) {
                obj['uploadTime'] = ApiClient.convertToType(data['uploadTime'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LegacyCodePushRelease</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LegacyCodePushRelease</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['appVersion'] && !(typeof data['appVersion'] === 'string' || data['appVersion'] instanceof String)) {
            throw new Error("Expected the field `appVersion` to be a primitive type in the JSON string but got " + data['appVersion']);
        }
        // ensure the json data is a string
        if (data['blobUrl'] && !(typeof data['blobUrl'] === 'string' || data['blobUrl'] instanceof String)) {
            throw new Error("Expected the field `blobUrl` to be a primitive type in the JSON string but got " + data['blobUrl']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['manifestBlobUrl'] && !(typeof data['manifestBlobUrl'] === 'string' || data['manifestBlobUrl'] instanceof String)) {
            throw new Error("Expected the field `manifestBlobUrl` to be a primitive type in the JSON string but got " + data['manifestBlobUrl']);
        }
        // ensure the json data is a string
        if (data['releaseMethod'] && !(typeof data['releaseMethod'] === 'string' || data['releaseMethod'] instanceof String)) {
            throw new Error("Expected the field `releaseMethod` to be a primitive type in the JSON string but got " + data['releaseMethod']);
        }
        // ensure the json data is a string
        if (data['releasedByUserId'] && !(typeof data['releasedByUserId'] === 'string' || data['releasedByUserId'] instanceof String)) {
            throw new Error("Expected the field `releasedByUserId` to be a primitive type in the JSON string but got " + data['releasedByUserId']);
        }

        return true;
    }


}



/**
 * The version of the release
 * @member {String} appVersion
 */
LegacyCodePushRelease.prototype['appVersion'] = undefined;

/**
 * Location (URL) of release package
 * @member {String} blobUrl
 */
LegacyCodePushRelease.prototype['blobUrl'] = undefined;

/**
 * Object containing URL and size of changed package hashes contained in the release
 * @member {Object} diffPackageMap
 */
LegacyCodePushRelease.prototype['diffPackageMap'] = undefined;

/**
 * Flag used to determine if release is disabled
 * @member {Boolean} isDisabled
 */
LegacyCodePushRelease.prototype['isDisabled'] = undefined;

/**
 * Flag used to determine if release is mandatory
 * @member {Boolean} isMandatory
 */
LegacyCodePushRelease.prototype['isMandatory'] = undefined;

/**
 * Release label (aka release name)
 * @member {String} label
 */
LegacyCodePushRelease.prototype['label'] = undefined;

/**
 * The URL location of the package's manifest file.
 * @member {String} manifestBlobUrl
 */
LegacyCodePushRelease.prototype['manifestBlobUrl'] = undefined;

/**
 * Method used to deploy release
 * @member {String} releaseMethod
 */
LegacyCodePushRelease.prototype['releaseMethod'] = undefined;

/**
 * User ID that triggered most recent release
 * @member {String} releasedByUserId
 */
LegacyCodePushRelease.prototype['releasedByUserId'] = undefined;

/**
 * Percentage (out of 100) that release is deployed to
 * @member {Number} rollout
 */
LegacyCodePushRelease.prototype['rollout'] = undefined;

/**
 * Size of release package
 * @member {Number} size
 */
LegacyCodePushRelease.prototype['size'] = undefined;

/**
 * Release upload time as epoch Unix timestamp
 * @member {Number} uploadTime
 */
LegacyCodePushRelease.prototype['uploadTime'] = undefined;






export default LegacyCodePushRelease;

