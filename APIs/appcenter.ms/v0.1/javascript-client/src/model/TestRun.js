/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TestRunStatistics from './TestRunStatistics';

/**
 * The TestRun model module.
 * @module model/TestRun
 * @version v0.1
 */
class TestRun {
    /**
     * Constructs a new <code>TestRun</code>.
     * Summary single test run on Xamarin Test Cloud
     * @alias module:model/TestRun
     */
    constructor() { 
        
        TestRun.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TestRun</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestRun} obj Optional instance to populate.
     * @return {module:model/TestRun} The populated <code>TestRun</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestRun();

            if (data.hasOwnProperty('appVersion')) {
                obj['appVersion'] = ApiClient.convertToType(data['appVersion'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], 'String');
            }
            if (data.hasOwnProperty('resultStatus')) {
                obj['resultStatus'] = ApiClient.convertToType(data['resultStatus'], 'String');
            }
            if (data.hasOwnProperty('runStatus')) {
                obj['runStatus'] = ApiClient.convertToType(data['runStatus'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stats')) {
                obj['stats'] = TestRunStatistics.constructFromObject(data['stats']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('testSeries')) {
                obj['testSeries'] = ApiClient.convertToType(data['testSeries'], 'String');
            }
            if (data.hasOwnProperty('testType')) {
                obj['testType'] = ApiClient.convertToType(data['testType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestRun</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestRun</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['appVersion'] && !(typeof data['appVersion'] === 'string' || data['appVersion'] instanceof String)) {
            throw new Error("Expected the field `appVersion` to be a primitive type in the JSON string but got " + data['appVersion']);
        }
        // ensure the json data is a string
        if (data['date'] && !(typeof data['date'] === 'string' || data['date'] instanceof String)) {
            throw new Error("Expected the field `date` to be a primitive type in the JSON string but got " + data['date']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['platform'] && !(typeof data['platform'] === 'string' || data['platform'] instanceof String)) {
            throw new Error("Expected the field `platform` to be a primitive type in the JSON string but got " + data['platform']);
        }
        // ensure the json data is a string
        if (data['resultStatus'] && !(typeof data['resultStatus'] === 'string' || data['resultStatus'] instanceof String)) {
            throw new Error("Expected the field `resultStatus` to be a primitive type in the JSON string but got " + data['resultStatus']);
        }
        // ensure the json data is a string
        if (data['runStatus'] && !(typeof data['runStatus'] === 'string' || data['runStatus'] instanceof String)) {
            throw new Error("Expected the field `runStatus` to be a primitive type in the JSON string but got " + data['runStatus']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `stats`
        if (data['stats']) { // data not null
          TestRunStatistics.validateJSON(data['stats']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['testSeries'] && !(typeof data['testSeries'] === 'string' || data['testSeries'] instanceof String)) {
            throw new Error("Expected the field `testSeries` to be a primitive type in the JSON string but got " + data['testSeries']);
        }
        // ensure the json data is a string
        if (data['testType'] && !(typeof data['testType'] === 'string' || data['testType'] instanceof String)) {
            throw new Error("Expected the field `testType` to be a primitive type in the JSON string but got " + data['testType']);
        }

        return true;
    }


}



/**
 * The compiled version of the app binary
 * @member {String} appVersion
 */
TestRun.prototype['appVersion'] = undefined;

/**
 * The date and time the test was uploaded
 * @member {String} date
 */
TestRun.prototype['date'] = undefined;

/**
 * Human readable explanation of the current test status
 * @member {String} description
 */
TestRun.prototype['description'] = undefined;

/**
 * The unique id of the test upload
 * @member {String} id
 */
TestRun.prototype['id'] = undefined;

/**
 * The device platform targeted by the test. Possible values are 'ios' or 'android'
 * @member {String} platform
 */
TestRun.prototype['platform'] = undefined;

/**
 * The passed/failed state
 * @member {String} resultStatus
 */
TestRun.prototype['resultStatus'] = undefined;

/**
 * The current status of the test run, in relation to the various phases
 * @member {String} runStatus
 */
TestRun.prototype['runStatus'] = undefined;

/**
 * Deprecated. Use runStatus instead.
 * @member {String} state
 */
TestRun.prototype['state'] = undefined;

/**
 * @member {module:model/TestRunStatistics} stats
 */
TestRun.prototype['stats'] = undefined;

/**
 * Deprecated. Use resultStatus instead.
 * @member {String} status
 */
TestRun.prototype['status'] = undefined;

/**
 * The name of the test series with which this test upload is associated
 * @member {String} testSeries
 */
TestRun.prototype['testSeries'] = undefined;

/**
 * The name of the test framework used to run this test
 * @member {String} testType
 */
TestRun.prototype['testType'] = undefined;






export default TestRun;

