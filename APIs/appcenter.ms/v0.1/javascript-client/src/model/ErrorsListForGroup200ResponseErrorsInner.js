/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ErrorsListForGroup200ResponseErrorsInner model module.
 * @module model/ErrorsListForGroup200ResponseErrorsInner
 * @version v0.1
 */
class ErrorsListForGroup200ResponseErrorsInner {
    /**
     * Constructs a new <code>ErrorsListForGroup200ResponseErrorsInner</code>.
     * @alias module:model/ErrorsListForGroup200ResponseErrorsInner
     */
    constructor() { 
        
        ErrorsListForGroup200ResponseErrorsInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ErrorsListForGroup200ResponseErrorsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ErrorsListForGroup200ResponseErrorsInner} obj Optional instance to populate.
     * @return {module:model/ErrorsListForGroup200ResponseErrorsInner} The populated <code>ErrorsListForGroup200ResponseErrorsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ErrorsListForGroup200ResponseErrorsInner();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('deviceName')) {
                obj['deviceName'] = ApiClient.convertToType(data['deviceName'], 'String');
            }
            if (data.hasOwnProperty('errorId')) {
                obj['errorId'] = ApiClient.convertToType(data['errorId'], 'String');
            }
            if (data.hasOwnProperty('hasAttachments')) {
                obj['hasAttachments'] = ApiClient.convertToType(data['hasAttachments'], 'Boolean');
            }
            if (data.hasOwnProperty('hasBreadcrumbs')) {
                obj['hasBreadcrumbs'] = ApiClient.convertToType(data['hasBreadcrumbs'], 'Boolean');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('osType')) {
                obj['osType'] = ApiClient.convertToType(data['osType'], 'String');
            }
            if (data.hasOwnProperty('osVersion')) {
                obj['osVersion'] = ApiClient.convertToType(data['osVersion'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ErrorsListForGroup200ResponseErrorsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ErrorsListForGroup200ResponseErrorsInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['deviceName'] && !(typeof data['deviceName'] === 'string' || data['deviceName'] instanceof String)) {
            throw new Error("Expected the field `deviceName` to be a primitive type in the JSON string but got " + data['deviceName']);
        }
        // ensure the json data is a string
        if (data['errorId'] && !(typeof data['errorId'] === 'string' || data['errorId'] instanceof String)) {
            throw new Error("Expected the field `errorId` to be a primitive type in the JSON string but got " + data['errorId']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['osType'] && !(typeof data['osType'] === 'string' || data['osType'] instanceof String)) {
            throw new Error("Expected the field `osType` to be a primitive type in the JSON string but got " + data['osType']);
        }
        // ensure the json data is a string
        if (data['osVersion'] && !(typeof data['osVersion'] === 'string' || data['osVersion'] instanceof String)) {
            throw new Error("Expected the field `osVersion` to be a primitive type in the JSON string but got " + data['osVersion']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * @member {String} country
 */
ErrorsListForGroup200ResponseErrorsInner.prototype['country'] = undefined;

/**
 * @member {String} deviceName
 */
ErrorsListForGroup200ResponseErrorsInner.prototype['deviceName'] = undefined;

/**
 * @member {String} errorId
 */
ErrorsListForGroup200ResponseErrorsInner.prototype['errorId'] = undefined;

/**
 * @member {Boolean} hasAttachments
 */
ErrorsListForGroup200ResponseErrorsInner.prototype['hasAttachments'] = undefined;

/**
 * @member {Boolean} hasBreadcrumbs
 */
ErrorsListForGroup200ResponseErrorsInner.prototype['hasBreadcrumbs'] = undefined;

/**
 * @member {String} language
 */
ErrorsListForGroup200ResponseErrorsInner.prototype['language'] = undefined;

/**
 * @member {String} osType
 */
ErrorsListForGroup200ResponseErrorsInner.prototype['osType'] = undefined;

/**
 * @member {String} osVersion
 */
ErrorsListForGroup200ResponseErrorsInner.prototype['osVersion'] = undefined;

/**
 * @member {Date} timestamp
 */
ErrorsListForGroup200ResponseErrorsInner.prototype['timestamp'] = undefined;

/**
 * @member {String} userId
 */
ErrorsListForGroup200ResponseErrorsInner.prototype['userId'] = undefined;






export default ErrorsListForGroup200ResponseErrorsInner;

