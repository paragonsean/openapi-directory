/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NewAppReleaseAlertingEventAllOfAppReleaseProperties model module.
 * @module model/NewAppReleaseAlertingEventAllOfAppReleaseProperties
 * @version v0.1
 */
class NewAppReleaseAlertingEventAllOfAppReleaseProperties {
    /**
     * Constructs a new <code>NewAppReleaseAlertingEventAllOfAppReleaseProperties</code>.
     * Properties of new application release
     * @alias module:model/NewAppReleaseAlertingEventAllOfAppReleaseProperties
     * @param appDisplayName {String} 
     * @param appName {String} 
     * @param bundleIdentifier {String} 
     * @param installLink {String} 
     * @param platform {String} 
     * @param releaseId {String} 
     * @param shortVersion {String} 
     * @param size {Number} 
     * @param uploadedAt {String} Date and time in ISO 8601 format
     * @param version {String} 
     */
    constructor(appDisplayName, appName, bundleIdentifier, installLink, platform, releaseId, shortVersion, size, uploadedAt, version) { 
        
        NewAppReleaseAlertingEventAllOfAppReleaseProperties.initialize(this, appDisplayName, appName, bundleIdentifier, installLink, platform, releaseId, shortVersion, size, uploadedAt, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, appDisplayName, appName, bundleIdentifier, installLink, platform, releaseId, shortVersion, size, uploadedAt, version) { 
        obj['app_display_name'] = appDisplayName;
        obj['app_name'] = appName;
        obj['bundle_identifier'] = bundleIdentifier;
        obj['install_link'] = installLink;
        obj['platform'] = platform;
        obj['release_id'] = releaseId;
        obj['short_version'] = shortVersion;
        obj['size'] = size;
        obj['uploaded_at'] = uploadedAt;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>NewAppReleaseAlertingEventAllOfAppReleaseProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewAppReleaseAlertingEventAllOfAppReleaseProperties} obj Optional instance to populate.
     * @return {module:model/NewAppReleaseAlertingEventAllOfAppReleaseProperties} The populated <code>NewAppReleaseAlertingEventAllOfAppReleaseProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewAppReleaseAlertingEventAllOfAppReleaseProperties();

            if (data.hasOwnProperty('app_display_name')) {
                obj['app_display_name'] = ApiClient.convertToType(data['app_display_name'], 'String');
            }
            if (data.hasOwnProperty('app_name')) {
                obj['app_name'] = ApiClient.convertToType(data['app_name'], 'String');
            }
            if (data.hasOwnProperty('bundle_identifier')) {
                obj['bundle_identifier'] = ApiClient.convertToType(data['bundle_identifier'], 'String');
            }
            if (data.hasOwnProperty('distribution_group_id')) {
                obj['distribution_group_id'] = ApiClient.convertToType(data['distribution_group_id'], 'String');
            }
            if (data.hasOwnProperty('fingerprint')) {
                obj['fingerprint'] = ApiClient.convertToType(data['fingerprint'], 'String');
            }
            if (data.hasOwnProperty('icon_link')) {
                obj['icon_link'] = ApiClient.convertToType(data['icon_link'], 'String');
            }
            if (data.hasOwnProperty('install_link')) {
                obj['install_link'] = ApiClient.convertToType(data['install_link'], 'String');
            }
            if (data.hasOwnProperty('installable')) {
                obj['installable'] = ApiClient.convertToType(data['installable'], 'Boolean');
            }
            if (data.hasOwnProperty('mandatory_update')) {
                obj['mandatory_update'] = ApiClient.convertToType(data['mandatory_update'], 'Boolean');
            }
            if (data.hasOwnProperty('min_os')) {
                obj['min_os'] = ApiClient.convertToType(data['min_os'], 'String');
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], 'String');
            }
            if (data.hasOwnProperty('provisioning_profile_name')) {
                obj['provisioning_profile_name'] = ApiClient.convertToType(data['provisioning_profile_name'], 'String');
            }
            if (data.hasOwnProperty('provisioning_profile_type')) {
                obj['provisioning_profile_type'] = ApiClient.convertToType(data['provisioning_profile_type'], 'String');
            }
            if (data.hasOwnProperty('release_id')) {
                obj['release_id'] = ApiClient.convertToType(data['release_id'], 'String');
            }
            if (data.hasOwnProperty('release_notes')) {
                obj['release_notes'] = ApiClient.convertToType(data['release_notes'], 'String');
            }
            if (data.hasOwnProperty('short_version')) {
                obj['short_version'] = ApiClient.convertToType(data['short_version'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('uploaded_at')) {
                obj['uploaded_at'] = ApiClient.convertToType(data['uploaded_at'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NewAppReleaseAlertingEventAllOfAppReleaseProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NewAppReleaseAlertingEventAllOfAppReleaseProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NewAppReleaseAlertingEventAllOfAppReleaseProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['app_display_name'] && !(typeof data['app_display_name'] === 'string' || data['app_display_name'] instanceof String)) {
            throw new Error("Expected the field `app_display_name` to be a primitive type in the JSON string but got " + data['app_display_name']);
        }
        // ensure the json data is a string
        if (data['app_name'] && !(typeof data['app_name'] === 'string' || data['app_name'] instanceof String)) {
            throw new Error("Expected the field `app_name` to be a primitive type in the JSON string but got " + data['app_name']);
        }
        // ensure the json data is a string
        if (data['bundle_identifier'] && !(typeof data['bundle_identifier'] === 'string' || data['bundle_identifier'] instanceof String)) {
            throw new Error("Expected the field `bundle_identifier` to be a primitive type in the JSON string but got " + data['bundle_identifier']);
        }
        // ensure the json data is a string
        if (data['distribution_group_id'] && !(typeof data['distribution_group_id'] === 'string' || data['distribution_group_id'] instanceof String)) {
            throw new Error("Expected the field `distribution_group_id` to be a primitive type in the JSON string but got " + data['distribution_group_id']);
        }
        // ensure the json data is a string
        if (data['fingerprint'] && !(typeof data['fingerprint'] === 'string' || data['fingerprint'] instanceof String)) {
            throw new Error("Expected the field `fingerprint` to be a primitive type in the JSON string but got " + data['fingerprint']);
        }
        // ensure the json data is a string
        if (data['icon_link'] && !(typeof data['icon_link'] === 'string' || data['icon_link'] instanceof String)) {
            throw new Error("Expected the field `icon_link` to be a primitive type in the JSON string but got " + data['icon_link']);
        }
        // ensure the json data is a string
        if (data['install_link'] && !(typeof data['install_link'] === 'string' || data['install_link'] instanceof String)) {
            throw new Error("Expected the field `install_link` to be a primitive type in the JSON string but got " + data['install_link']);
        }
        // ensure the json data is a string
        if (data['min_os'] && !(typeof data['min_os'] === 'string' || data['min_os'] instanceof String)) {
            throw new Error("Expected the field `min_os` to be a primitive type in the JSON string but got " + data['min_os']);
        }
        // ensure the json data is a string
        if (data['platform'] && !(typeof data['platform'] === 'string' || data['platform'] instanceof String)) {
            throw new Error("Expected the field `platform` to be a primitive type in the JSON string but got " + data['platform']);
        }
        // ensure the json data is a string
        if (data['provisioning_profile_name'] && !(typeof data['provisioning_profile_name'] === 'string' || data['provisioning_profile_name'] instanceof String)) {
            throw new Error("Expected the field `provisioning_profile_name` to be a primitive type in the JSON string but got " + data['provisioning_profile_name']);
        }
        // ensure the json data is a string
        if (data['provisioning_profile_type'] && !(typeof data['provisioning_profile_type'] === 'string' || data['provisioning_profile_type'] instanceof String)) {
            throw new Error("Expected the field `provisioning_profile_type` to be a primitive type in the JSON string but got " + data['provisioning_profile_type']);
        }
        // ensure the json data is a string
        if (data['release_id'] && !(typeof data['release_id'] === 'string' || data['release_id'] instanceof String)) {
            throw new Error("Expected the field `release_id` to be a primitive type in the JSON string but got " + data['release_id']);
        }
        // ensure the json data is a string
        if (data['release_notes'] && !(typeof data['release_notes'] === 'string' || data['release_notes'] instanceof String)) {
            throw new Error("Expected the field `release_notes` to be a primitive type in the JSON string but got " + data['release_notes']);
        }
        // ensure the json data is a string
        if (data['short_version'] && !(typeof data['short_version'] === 'string' || data['short_version'] instanceof String)) {
            throw new Error("Expected the field `short_version` to be a primitive type in the JSON string but got " + data['short_version']);
        }
        // ensure the json data is a string
        if (data['uploaded_at'] && !(typeof data['uploaded_at'] === 'string' || data['uploaded_at'] instanceof String)) {
            throw new Error("Expected the field `uploaded_at` to be a primitive type in the JSON string but got " + data['uploaded_at']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}

NewAppReleaseAlertingEventAllOfAppReleaseProperties.RequiredProperties = ["app_display_name", "app_name", "bundle_identifier", "install_link", "platform", "release_id", "short_version", "size", "uploaded_at", "version"];

/**
 * @member {String} app_display_name
 */
NewAppReleaseAlertingEventAllOfAppReleaseProperties.prototype['app_display_name'] = undefined;

/**
 * @member {String} app_name
 */
NewAppReleaseAlertingEventAllOfAppReleaseProperties.prototype['app_name'] = undefined;

/**
 * @member {String} bundle_identifier
 */
NewAppReleaseAlertingEventAllOfAppReleaseProperties.prototype['bundle_identifier'] = undefined;

/**
 * @member {String} distribution_group_id
 */
NewAppReleaseAlertingEventAllOfAppReleaseProperties.prototype['distribution_group_id'] = undefined;

/**
 * @member {String} fingerprint
 */
NewAppReleaseAlertingEventAllOfAppReleaseProperties.prototype['fingerprint'] = undefined;

/**
 * @member {String} icon_link
 */
NewAppReleaseAlertingEventAllOfAppReleaseProperties.prototype['icon_link'] = undefined;

/**
 * @member {String} install_link
 */
NewAppReleaseAlertingEventAllOfAppReleaseProperties.prototype['install_link'] = undefined;

/**
 * @member {Boolean} installable
 */
NewAppReleaseAlertingEventAllOfAppReleaseProperties.prototype['installable'] = undefined;

/**
 * @member {Boolean} mandatory_update
 */
NewAppReleaseAlertingEventAllOfAppReleaseProperties.prototype['mandatory_update'] = undefined;

/**
 * @member {String} min_os
 */
NewAppReleaseAlertingEventAllOfAppReleaseProperties.prototype['min_os'] = undefined;

/**
 * @member {String} platform
 */
NewAppReleaseAlertingEventAllOfAppReleaseProperties.prototype['platform'] = undefined;

/**
 * @member {String} provisioning_profile_name
 */
NewAppReleaseAlertingEventAllOfAppReleaseProperties.prototype['provisioning_profile_name'] = undefined;

/**
 * @member {String} provisioning_profile_type
 */
NewAppReleaseAlertingEventAllOfAppReleaseProperties.prototype['provisioning_profile_type'] = undefined;

/**
 * @member {String} release_id
 */
NewAppReleaseAlertingEventAllOfAppReleaseProperties.prototype['release_id'] = undefined;

/**
 * @member {String} release_notes
 */
NewAppReleaseAlertingEventAllOfAppReleaseProperties.prototype['release_notes'] = undefined;

/**
 * @member {String} short_version
 */
NewAppReleaseAlertingEventAllOfAppReleaseProperties.prototype['short_version'] = undefined;

/**
 * @member {Number} size
 */
NewAppReleaseAlertingEventAllOfAppReleaseProperties.prototype['size'] = undefined;

/**
 * Date and time in ISO 8601 format
 * @member {String} uploaded_at
 */
NewAppReleaseAlertingEventAllOfAppReleaseProperties.prototype['uploaded_at'] = undefined;

/**
 * @member {String} version
 */
NewAppReleaseAlertingEventAllOfAppReleaseProperties.prototype['version'] = undefined;






export default NewAppReleaseAlertingEventAllOfAppReleaseProperties;

