/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InternalUserRequest model module.
 * @module model/InternalUserRequest
 * @version v0.1
 */
class InternalUserRequest {
    /**
     * Constructs a new <code>InternalUserRequest</code>.
     * @alias module:model/InternalUserRequest
     * @param email {String} The email address of the user
     * @param name {String} The unique name that is used to identify the user.
     * @param password {String} The password of the user. Needs to be at least 8 characters long and contain at least one lower- and one uppercase letter.
     */
    constructor(email, name, password) { 
        
        InternalUserRequest.initialize(this, email, name, password);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, email, name, password) { 
        obj['email'] = email;
        obj['name'] = name;
        obj['password'] = password;
    }

    /**
     * Constructs a <code>InternalUserRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InternalUserRequest} obj Optional instance to populate.
     * @return {module:model/InternalUserRequest} The populated <code>InternalUserRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InternalUserRequest();

            if (data.hasOwnProperty('app_invitation')) {
                obj['app_invitation'] = ApiClient.convertToType(data['app_invitation'], 'String');
            }
            if (data.hasOwnProperty('avatar_url')) {
                obj['avatar_url'] = ApiClient.convertToType(data['avatar_url'], 'String');
            }
            if (data.hasOwnProperty('display_name')) {
                obj['display_name'] = ApiClient.convertToType(data['display_name'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('organization_invitation')) {
                obj['organization_invitation'] = ApiClient.convertToType(data['organization_invitation'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('portal_subdomain')) {
                obj['portal_subdomain'] = ApiClient.convertToType(data['portal_subdomain'], 'String');
            }
            if (data.hasOwnProperty('tester_invitation')) {
                obj['tester_invitation'] = ApiClient.convertToType(data['tester_invitation'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InternalUserRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InternalUserRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InternalUserRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['app_invitation'] && !(typeof data['app_invitation'] === 'string' || data['app_invitation'] instanceof String)) {
            throw new Error("Expected the field `app_invitation` to be a primitive type in the JSON string but got " + data['app_invitation']);
        }
        // ensure the json data is a string
        if (data['avatar_url'] && !(typeof data['avatar_url'] === 'string' || data['avatar_url'] instanceof String)) {
            throw new Error("Expected the field `avatar_url` to be a primitive type in the JSON string but got " + data['avatar_url']);
        }
        // ensure the json data is a string
        if (data['display_name'] && !(typeof data['display_name'] === 'string' || data['display_name'] instanceof String)) {
            throw new Error("Expected the field `display_name` to be a primitive type in the JSON string but got " + data['display_name']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['organization_invitation'] && !(typeof data['organization_invitation'] === 'string' || data['organization_invitation'] instanceof String)) {
            throw new Error("Expected the field `organization_invitation` to be a primitive type in the JSON string but got " + data['organization_invitation']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['portal_subdomain'] && !(typeof data['portal_subdomain'] === 'string' || data['portal_subdomain'] instanceof String)) {
            throw new Error("Expected the field `portal_subdomain` to be a primitive type in the JSON string but got " + data['portal_subdomain']);
        }
        // ensure the json data is a string
        if (data['tester_invitation'] && !(typeof data['tester_invitation'] === 'string' || data['tester_invitation'] instanceof String)) {
            throw new Error("Expected the field `tester_invitation` to be a primitive type in the JSON string but got " + data['tester_invitation']);
        }

        return true;
    }


}

InternalUserRequest.RequiredProperties = ["email", "name", "password"];

/**
 * The token of the app invitation which lead to signup
 * @member {String} app_invitation
 */
InternalUserRequest.prototype['app_invitation'] = undefined;

/**
 * The avatar URL of the user
 * @member {String} avatar_url
 */
InternalUserRequest.prototype['avatar_url'] = undefined;

/**
 * The full name of the user. Might for example be first and last name
 * @member {String} display_name
 */
InternalUserRequest.prototype['display_name'] = undefined;

/**
 * The email address of the user
 * @member {String} email
 */
InternalUserRequest.prototype['email'] = undefined;

/**
 * The unique name that is used to identify the user.
 * @member {String} name
 */
InternalUserRequest.prototype['name'] = undefined;

/**
 * The token of the organization invitation which lead to signup
 * @member {String} organization_invitation
 */
InternalUserRequest.prototype['organization_invitation'] = undefined;

/**
 * The password of the user. Needs to be at least 8 characters long and contain at least one lower- and one uppercase letter.
 * @member {String} password
 */
InternalUserRequest.prototype['password'] = undefined;

/**
 * The sub-domain of the portal from which this request was made. Will be used to build the invitation link.
 * @member {module:model/InternalUserRequest.PortalSubdomainEnum} portal_subdomain
 */
InternalUserRequest.prototype['portal_subdomain'] = undefined;

/**
 * The token of the test invitation which lead to signup
 * @member {String} tester_invitation
 */
InternalUserRequest.prototype['tester_invitation'] = undefined;





/**
 * Allowed values for the <code>portal_subdomain</code> property.
 * @enum {String}
 * @readonly
 */
InternalUserRequest['PortalSubdomainEnum'] = {

    /**
     * value: "install."
     * @const
     */
    "install.": "install."
};



export default InternalUserRequest;

