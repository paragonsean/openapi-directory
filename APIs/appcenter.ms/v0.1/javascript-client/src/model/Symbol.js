/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Symbol model module.
 * @module model/Symbol
 * @version v0.1
 */
class Symbol {
    /**
     * Constructs a new <code>Symbol</code>.
     * @alias module:model/Symbol
     * @param alternateSymbolIds {Array.<String>} The other symbols in the same file
     * @param appId {String} The application that this symbol belongs to
     * @param origin {module:model/Symbol.OriginEnum} The origin of the symbol file
     * @param platform {String} The platform that this symbol is associated with
     * @param status {module:model/Symbol.StatusEnum} Whether the symbol is ignored.
     * @param symbolId {String} The unique id for this symbol (uuid)
     * @param symbolUploadId {String} The id of the symbol upload this symbol belongs to.
     * @param type {module:model/Symbol.TypeEnum} The type of the symbol for the current symbol upload
     * @param url {String} The path name of the symbol file in blob storage
     */
    constructor(alternateSymbolIds, appId, origin, platform, status, symbolId, symbolUploadId, type, url) { 
        
        Symbol.initialize(this, alternateSymbolIds, appId, origin, platform, status, symbolId, symbolUploadId, type, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, alternateSymbolIds, appId, origin, platform, status, symbolId, symbolUploadId, type, url) { 
        obj['alternate_symbol_ids'] = alternateSymbolIds;
        obj['app_id'] = appId;
        obj['origin'] = origin;
        obj['platform'] = platform;
        obj['status'] = status;
        obj['symbol_id'] = symbolId;
        obj['symbol_upload_id'] = symbolUploadId;
        obj['type'] = type;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>Symbol</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Symbol} obj Optional instance to populate.
     * @return {module:model/Symbol} The populated <code>Symbol</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Symbol();

            if (data.hasOwnProperty('alternate_symbol_ids')) {
                obj['alternate_symbol_ids'] = ApiClient.convertToType(data['alternate_symbol_ids'], ['String']);
            }
            if (data.hasOwnProperty('app_id')) {
                obj['app_id'] = ApiClient.convertToType(data['app_id'], 'String');
            }
            if (data.hasOwnProperty('build')) {
                obj['build'] = ApiClient.convertToType(data['build'], 'String');
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = ApiClient.convertToType(data['origin'], 'String');
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('symbol_id')) {
                obj['symbol_id'] = ApiClient.convertToType(data['symbol_id'], 'String');
            }
            if (data.hasOwnProperty('symbol_upload_id')) {
                obj['symbol_upload_id'] = ApiClient.convertToType(data['symbol_upload_id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Symbol</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Symbol</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Symbol.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['alternate_symbol_ids'])) {
            throw new Error("Expected the field `alternate_symbol_ids` to be an array in the JSON data but got " + data['alternate_symbol_ids']);
        }
        // ensure the json data is a string
        if (data['app_id'] && !(typeof data['app_id'] === 'string' || data['app_id'] instanceof String)) {
            throw new Error("Expected the field `app_id` to be a primitive type in the JSON string but got " + data['app_id']);
        }
        // ensure the json data is a string
        if (data['build'] && !(typeof data['build'] === 'string' || data['build'] instanceof String)) {
            throw new Error("Expected the field `build` to be a primitive type in the JSON string but got " + data['build']);
        }
        // ensure the json data is a string
        if (data['origin'] && !(typeof data['origin'] === 'string' || data['origin'] instanceof String)) {
            throw new Error("Expected the field `origin` to be a primitive type in the JSON string but got " + data['origin']);
        }
        // ensure the json data is a string
        if (data['platform'] && !(typeof data['platform'] === 'string' || data['platform'] instanceof String)) {
            throw new Error("Expected the field `platform` to be a primitive type in the JSON string but got " + data['platform']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['symbol_id'] && !(typeof data['symbol_id'] === 'string' || data['symbol_id'] instanceof String)) {
            throw new Error("Expected the field `symbol_id` to be a primitive type in the JSON string but got " + data['symbol_id']);
        }
        // ensure the json data is a string
        if (data['symbol_upload_id'] && !(typeof data['symbol_upload_id'] === 'string' || data['symbol_upload_id'] instanceof String)) {
            throw new Error("Expected the field `symbol_upload_id` to be a primitive type in the JSON string but got " + data['symbol_upload_id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}

Symbol.RequiredProperties = ["alternate_symbol_ids", "app_id", "origin", "platform", "status", "symbol_id", "symbol_upload_id", "type", "url"];

/**
 * The other symbols in the same file
 * @member {Array.<String>} alternate_symbol_ids
 */
Symbol.prototype['alternate_symbol_ids'] = undefined;

/**
 * The application that this symbol belongs to
 * @member {String} app_id
 */
Symbol.prototype['app_id'] = undefined;

/**
 * The build number. Optional for Apple. Required for Android.
 * @member {String} build
 */
Symbol.prototype['build'] = undefined;

/**
 * The origin of the symbol file
 * @member {module:model/Symbol.OriginEnum} origin
 */
Symbol.prototype['origin'] = undefined;

/**
 * The platform that this symbol is associated with
 * @member {String} platform
 */
Symbol.prototype['platform'] = undefined;

/**
 * Whether the symbol is ignored.
 * @member {module:model/Symbol.StatusEnum} status
 */
Symbol.prototype['status'] = undefined;

/**
 * The unique id for this symbol (uuid)
 * @member {String} symbol_id
 */
Symbol.prototype['symbol_id'] = undefined;

/**
 * The id of the symbol upload this symbol belongs to.
 * @member {String} symbol_upload_id
 */
Symbol.prototype['symbol_upload_id'] = undefined;

/**
 * The type of the symbol for the current symbol upload
 * @member {module:model/Symbol.TypeEnum} type
 */
Symbol.prototype['type'] = undefined;

/**
 * The path name of the symbol file in blob storage
 * @member {String} url
 */
Symbol.prototype['url'] = undefined;

/**
 * The version number. Optional for Apple. Required for Android.
 * @member {String} version
 */
Symbol.prototype['version'] = undefined;





/**
 * Allowed values for the <code>origin</code> property.
 * @enum {String}
 * @readonly
 */
Symbol['OriginEnum'] = {

    /**
     * value: "System"
     * @const
     */
    "System": "System",

    /**
     * value: "User"
     * @const
     */
    "User": "User"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Symbol['StatusEnum'] = {

    /**
     * value: "available"
     * @const
     */
    "available": "available",

    /**
     * value: "ignored"
     * @const
     */
    "ignored": "ignored"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Symbol['TypeEnum'] = {

    /**
     * value: "Apple"
     * @const
     */
    "Apple": "Apple",

    /**
     * value: "JavaScript"
     * @const
     */
    "JavaScript": "JavaScript",

    /**
     * value: "Breakpad"
     * @const
     */
    "Breakpad": "Breakpad",

    /**
     * value: "AndroidProguard"
     * @const
     */
    "AndroidProguard": "AndroidProguard",

    /**
     * value: "UWP"
     * @const
     */
    "UWP": "UWP"
};



export default Symbol;

