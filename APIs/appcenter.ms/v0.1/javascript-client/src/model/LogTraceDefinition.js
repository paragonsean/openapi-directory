/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LogTraceDefinition model module.
 * @module model/LogTraceDefinition
 * @version v0.1
 */
class LogTraceDefinition {
    /**
     * Constructs a new <code>LogTraceDefinition</code>.
     * @alias module:model/LogTraceDefinition
     * @param appSecret {String} 
     */
    constructor(appSecret) { 
        
        LogTraceDefinition.initialize(this, appSecret);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, appSecret) { 
        obj['app_secret'] = appSecret;
    }

    /**
     * Constructs a <code>LogTraceDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogTraceDefinition} obj Optional instance to populate.
     * @return {module:model/LogTraceDefinition} The populated <code>LogTraceDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogTraceDefinition();

            if (data.hasOwnProperty('app_secret')) {
                obj['app_secret'] = ApiClient.convertToType(data['app_secret'], 'String');
            }
            if (data.hasOwnProperty('expiration')) {
                obj['expiration'] = ApiClient.convertToType(data['expiration'], 'Date');
            }
            if (data.hasOwnProperty('install_id')) {
                obj['install_id'] = ApiClient.convertToType(data['install_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogTraceDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogTraceDefinition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LogTraceDefinition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['app_secret'] && !(typeof data['app_secret'] === 'string' || data['app_secret'] instanceof String)) {
            throw new Error("Expected the field `app_secret` to be a primitive type in the JSON string but got " + data['app_secret']);
        }
        // ensure the json data is a string
        if (data['install_id'] && !(typeof data['install_id'] === 'string' || data['install_id'] instanceof String)) {
            throw new Error("Expected the field `install_id` to be a primitive type in the JSON string but got " + data['install_id']);
        }

        return true;
    }


}

LogTraceDefinition.RequiredProperties = ["app_secret"];

/**
 * @member {String} app_secret
 */
LogTraceDefinition.prototype['app_secret'] = undefined;

/**
 * @member {Date} expiration
 */
LogTraceDefinition.prototype['expiration'] = undefined;

/**
 * @member {String} install_id
 */
LogTraceDefinition.prototype['install_id'] = undefined;






export default LogTraceDefinition;

