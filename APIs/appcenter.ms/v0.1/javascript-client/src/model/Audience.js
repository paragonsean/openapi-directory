/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Audience model module.
 * @module model/Audience
 * @version v0.1
 */
class Audience {
    /**
     * Constructs a new <code>Audience</code>.
     * Audience with details.
     * @alias module:model/Audience
     */
    constructor() { 
        
        Audience.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['enabled'] = true;
    }

    /**
     * Constructs a <code>Audience</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Audience} obj Optional instance to populate.
     * @return {module:model/Audience} The populated <code>Audience</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Audience();

            if (data.hasOwnProperty('custom_properties')) {
                obj['custom_properties'] = ApiClient.convertToType(data['custom_properties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('estimated_total_count')) {
                obj['estimated_total_count'] = ApiClient.convertToType(data['estimated_total_count'], 'Number');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('definition')) {
                obj['definition'] = ApiClient.convertToType(data['definition'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('estimated_count')) {
                obj['estimated_count'] = ApiClient.convertToType(data['estimated_count'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Audience</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Audience</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['definition'] && !(typeof data['definition'] === 'string' || data['definition'] instanceof String)) {
            throw new Error("Expected the field `definition` to be a primitive type in the JSON string but got " + data['definition']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Custom properties used in the definition.
 * @member {Object.<String, module:model/Audience.InnerEnum>} custom_properties
 */
Audience.prototype['custom_properties'] = undefined;

/**
 * @member {Boolean} enabled
 * @default true
 */
Audience.prototype['enabled'] = true;

/**
 * Estimated total audience size.
 * @member {Number} estimated_total_count
 */
Audience.prototype['estimated_total_count'] = undefined;

/**
 * Date the audience was last refreshed.
 * @member {Date} timestamp
 */
Audience.prototype['timestamp'] = undefined;

/**
 * Audience definition in OData format.
 * @member {String} definition
 */
Audience.prototype['definition'] = undefined;

/**
 * Audience description.
 * @member {String} description
 */
Audience.prototype['description'] = undefined;

/**
 * Estimated audience size.
 * @member {Number} estimated_count
 */
Audience.prototype['estimated_count'] = undefined;

/**
 * Audience name.
 * @member {String} name
 */
Audience.prototype['name'] = undefined;

/**
 * Audience state.
 * @member {module:model/Audience.StateEnum} state
 */
Audience.prototype['state'] = undefined;





/**
 * Allowed values for the <code>inner</code> property.
 * @enum {String}
 * @readonly
 */
Audience['InnerEnum'] = {

    /**
     * value: "string"
     * @const
     */
    "string": "string",

    /**
     * value: "number"
     * @const
     */
    "number": "number",

    /**
     * value: "boolean"
     * @const
     */
    "boolean": "boolean",

    /**
     * value: "date_time"
     * @const
     */
    "date_time": "date_time"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Audience['StateEnum'] = {

    /**
     * value: "Calculating"
     * @const
     */
    "Calculating": "Calculating",

    /**
     * value: "Ready"
     * @const
     */
    "Ready": "Ready",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default Audience;

