/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Device model module.
 * @module model/Device
 * @version v0.1
 */
class Device {
    /**
     * Constructs a new <code>Device</code>.
     * Device characteristics.
     * @alias module:model/Device
     * @param appBuild {String} The app's build number, e.g. 42. 
     * @param appVersion {String} Application version name, e.g. 1.1.0 
     * @param locale {String} Language code (example: en_US). 
     * @param osName {String} OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows. 
     * @param osVersion {String} OS version (example: 9.3.0). 
     * @param sdkName {String} Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\". 
     * @param sdkVersion {String} Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\". 
     * @param timeZoneOffset {Number} The offset in minutes from UTC for the device time zone, including daylight savings time. 
     */
    constructor(appBuild, appVersion, locale, osName, osVersion, sdkName, sdkVersion, timeZoneOffset) { 
        
        Device.initialize(this, appBuild, appVersion, locale, osName, osVersion, sdkName, sdkVersion, timeZoneOffset);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, appBuild, appVersion, locale, osName, osVersion, sdkName, sdkVersion, timeZoneOffset) { 
        obj['app_build'] = appBuild;
        obj['app_version'] = appVersion;
        obj['locale'] = locale;
        obj['os_name'] = osName;
        obj['os_version'] = osVersion;
        obj['sdk_name'] = sdkName;
        obj['sdk_version'] = sdkVersion;
        obj['time_zone_offset'] = timeZoneOffset;
    }

    /**
     * Constructs a <code>Device</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Device} obj Optional instance to populate.
     * @return {module:model/Device} The populated <code>Device</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Device();

            if (data.hasOwnProperty('app_build')) {
                obj['app_build'] = ApiClient.convertToType(data['app_build'], 'String');
            }
            if (data.hasOwnProperty('app_namespace')) {
                obj['app_namespace'] = ApiClient.convertToType(data['app_namespace'], 'String');
            }
            if (data.hasOwnProperty('app_version')) {
                obj['app_version'] = ApiClient.convertToType(data['app_version'], 'String');
            }
            if (data.hasOwnProperty('carrier_code')) {
                obj['carrier_code'] = ApiClient.convertToType(data['carrier_code'], 'String');
            }
            if (data.hasOwnProperty('carrier_country')) {
                obj['carrier_country'] = ApiClient.convertToType(data['carrier_country'], 'String');
            }
            if (data.hasOwnProperty('carrier_name')) {
                obj['carrier_name'] = ApiClient.convertToType(data['carrier_name'], 'String');
            }
            if (data.hasOwnProperty('live_update_deployment_key')) {
                obj['live_update_deployment_key'] = ApiClient.convertToType(data['live_update_deployment_key'], 'String');
            }
            if (data.hasOwnProperty('live_update_package_hash')) {
                obj['live_update_package_hash'] = ApiClient.convertToType(data['live_update_package_hash'], 'String');
            }
            if (data.hasOwnProperty('live_update_release_label')) {
                obj['live_update_release_label'] = ApiClient.convertToType(data['live_update_release_label'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('oem_name')) {
                obj['oem_name'] = ApiClient.convertToType(data['oem_name'], 'String');
            }
            if (data.hasOwnProperty('os_api_level')) {
                obj['os_api_level'] = ApiClient.convertToType(data['os_api_level'], 'Number');
            }
            if (data.hasOwnProperty('os_build')) {
                obj['os_build'] = ApiClient.convertToType(data['os_build'], 'String');
            }
            if (data.hasOwnProperty('os_name')) {
                obj['os_name'] = ApiClient.convertToType(data['os_name'], 'String');
            }
            if (data.hasOwnProperty('os_version')) {
                obj['os_version'] = ApiClient.convertToType(data['os_version'], 'String');
            }
            if (data.hasOwnProperty('screen_size')) {
                obj['screen_size'] = ApiClient.convertToType(data['screen_size'], 'String');
            }
            if (data.hasOwnProperty('sdk_name')) {
                obj['sdk_name'] = ApiClient.convertToType(data['sdk_name'], 'String');
            }
            if (data.hasOwnProperty('sdk_version')) {
                obj['sdk_version'] = ApiClient.convertToType(data['sdk_version'], 'String');
            }
            if (data.hasOwnProperty('time_zone_offset')) {
                obj['time_zone_offset'] = ApiClient.convertToType(data['time_zone_offset'], 'Number');
            }
            if (data.hasOwnProperty('wrapper_runtime_version')) {
                obj['wrapper_runtime_version'] = ApiClient.convertToType(data['wrapper_runtime_version'], 'String');
            }
            if (data.hasOwnProperty('wrapper_sdk_name')) {
                obj['wrapper_sdk_name'] = ApiClient.convertToType(data['wrapper_sdk_name'], 'String');
            }
            if (data.hasOwnProperty('wrapper_sdk_version')) {
                obj['wrapper_sdk_version'] = ApiClient.convertToType(data['wrapper_sdk_version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Device</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Device</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Device.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['app_build'] && !(typeof data['app_build'] === 'string' || data['app_build'] instanceof String)) {
            throw new Error("Expected the field `app_build` to be a primitive type in the JSON string but got " + data['app_build']);
        }
        // ensure the json data is a string
        if (data['app_namespace'] && !(typeof data['app_namespace'] === 'string' || data['app_namespace'] instanceof String)) {
            throw new Error("Expected the field `app_namespace` to be a primitive type in the JSON string but got " + data['app_namespace']);
        }
        // ensure the json data is a string
        if (data['app_version'] && !(typeof data['app_version'] === 'string' || data['app_version'] instanceof String)) {
            throw new Error("Expected the field `app_version` to be a primitive type in the JSON string but got " + data['app_version']);
        }
        // ensure the json data is a string
        if (data['carrier_code'] && !(typeof data['carrier_code'] === 'string' || data['carrier_code'] instanceof String)) {
            throw new Error("Expected the field `carrier_code` to be a primitive type in the JSON string but got " + data['carrier_code']);
        }
        // ensure the json data is a string
        if (data['carrier_country'] && !(typeof data['carrier_country'] === 'string' || data['carrier_country'] instanceof String)) {
            throw new Error("Expected the field `carrier_country` to be a primitive type in the JSON string but got " + data['carrier_country']);
        }
        // ensure the json data is a string
        if (data['carrier_name'] && !(typeof data['carrier_name'] === 'string' || data['carrier_name'] instanceof String)) {
            throw new Error("Expected the field `carrier_name` to be a primitive type in the JSON string but got " + data['carrier_name']);
        }
        // ensure the json data is a string
        if (data['live_update_deployment_key'] && !(typeof data['live_update_deployment_key'] === 'string' || data['live_update_deployment_key'] instanceof String)) {
            throw new Error("Expected the field `live_update_deployment_key` to be a primitive type in the JSON string but got " + data['live_update_deployment_key']);
        }
        // ensure the json data is a string
        if (data['live_update_package_hash'] && !(typeof data['live_update_package_hash'] === 'string' || data['live_update_package_hash'] instanceof String)) {
            throw new Error("Expected the field `live_update_package_hash` to be a primitive type in the JSON string but got " + data['live_update_package_hash']);
        }
        // ensure the json data is a string
        if (data['live_update_release_label'] && !(typeof data['live_update_release_label'] === 'string' || data['live_update_release_label'] instanceof String)) {
            throw new Error("Expected the field `live_update_release_label` to be a primitive type in the JSON string but got " + data['live_update_release_label']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['oem_name'] && !(typeof data['oem_name'] === 'string' || data['oem_name'] instanceof String)) {
            throw new Error("Expected the field `oem_name` to be a primitive type in the JSON string but got " + data['oem_name']);
        }
        // ensure the json data is a string
        if (data['os_build'] && !(typeof data['os_build'] === 'string' || data['os_build'] instanceof String)) {
            throw new Error("Expected the field `os_build` to be a primitive type in the JSON string but got " + data['os_build']);
        }
        // ensure the json data is a string
        if (data['os_name'] && !(typeof data['os_name'] === 'string' || data['os_name'] instanceof String)) {
            throw new Error("Expected the field `os_name` to be a primitive type in the JSON string but got " + data['os_name']);
        }
        // ensure the json data is a string
        if (data['os_version'] && !(typeof data['os_version'] === 'string' || data['os_version'] instanceof String)) {
            throw new Error("Expected the field `os_version` to be a primitive type in the JSON string but got " + data['os_version']);
        }
        // ensure the json data is a string
        if (data['screen_size'] && !(typeof data['screen_size'] === 'string' || data['screen_size'] instanceof String)) {
            throw new Error("Expected the field `screen_size` to be a primitive type in the JSON string but got " + data['screen_size']);
        }
        // ensure the json data is a string
        if (data['sdk_name'] && !(typeof data['sdk_name'] === 'string' || data['sdk_name'] instanceof String)) {
            throw new Error("Expected the field `sdk_name` to be a primitive type in the JSON string but got " + data['sdk_name']);
        }
        // ensure the json data is a string
        if (data['sdk_version'] && !(typeof data['sdk_version'] === 'string' || data['sdk_version'] instanceof String)) {
            throw new Error("Expected the field `sdk_version` to be a primitive type in the JSON string but got " + data['sdk_version']);
        }
        // ensure the json data is a string
        if (data['wrapper_runtime_version'] && !(typeof data['wrapper_runtime_version'] === 'string' || data['wrapper_runtime_version'] instanceof String)) {
            throw new Error("Expected the field `wrapper_runtime_version` to be a primitive type in the JSON string but got " + data['wrapper_runtime_version']);
        }
        // ensure the json data is a string
        if (data['wrapper_sdk_name'] && !(typeof data['wrapper_sdk_name'] === 'string' || data['wrapper_sdk_name'] instanceof String)) {
            throw new Error("Expected the field `wrapper_sdk_name` to be a primitive type in the JSON string but got " + data['wrapper_sdk_name']);
        }
        // ensure the json data is a string
        if (data['wrapper_sdk_version'] && !(typeof data['wrapper_sdk_version'] === 'string' || data['wrapper_sdk_version'] instanceof String)) {
            throw new Error("Expected the field `wrapper_sdk_version` to be a primitive type in the JSON string but got " + data['wrapper_sdk_version']);
        }

        return true;
    }


}

Device.RequiredProperties = ["app_build", "app_version", "locale", "os_name", "os_version", "sdk_name", "sdk_version", "time_zone_offset"];

/**
 * The app's build number, e.g. 42. 
 * @member {String} app_build
 */
Device.prototype['app_build'] = undefined;

/**
 * The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example. 
 * @member {String} app_namespace
 */
Device.prototype['app_namespace'] = undefined;

/**
 * Application version name, e.g. 1.1.0 
 * @member {String} app_version
 */
Device.prototype['app_version'] = undefined;

/**
 * Carrier country code (for mobile devices). 
 * @member {String} carrier_code
 */
Device.prototype['carrier_code'] = undefined;

/**
 * Carrier country. 
 * @member {String} carrier_country
 */
Device.prototype['carrier_country'] = undefined;

/**
 * Carrier name (for mobile devices). 
 * @member {String} carrier_name
 */
Device.prototype['carrier_name'] = undefined;

/**
 * Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging. 
 * @member {String} live_update_deployment_key
 */
Device.prototype['live_update_deployment_key'] = undefined;

/**
 * Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future. 
 * @member {String} live_update_package_hash
 */
Device.prototype['live_update_package_hash'] = undefined;

/**
 * Label that is used to identify application code 'version' released via Live Update beacon running on device 
 * @member {String} live_update_release_label
 */
Device.prototype['live_update_release_label'] = undefined;

/**
 * Language code (example: en_US). 
 * @member {String} locale
 */
Device.prototype['locale'] = undefined;

/**
 * Device model (example: iPad2,3). 
 * @member {String} model
 */
Device.prototype['model'] = undefined;

/**
 * Device manufacturer (example: HTC). 
 * @member {String} oem_name
 */
Device.prototype['oem_name'] = undefined;

/**
 * API level when applicable like in Android (example: 15). 
 * @member {Number} os_api_level
 */
Device.prototype['os_api_level'] = undefined;

/**
 * OS build code (example: LMY47X). 
 * @member {String} os_build
 */
Device.prototype['os_build'] = undefined;

/**
 * OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows. 
 * @member {String} os_name
 */
Device.prototype['os_name'] = undefined;

/**
 * OS version (example: 9.3.0). 
 * @member {String} os_version
 */
Device.prototype['os_version'] = undefined;

/**
 * Screen size of the device in pixels (example: 640x480). 
 * @member {String} screen_size
 */
Device.prototype['screen_size'] = undefined;

/**
 * Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\". 
 * @member {String} sdk_name
 */
Device.prototype['sdk_name'] = undefined;

/**
 * Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\". 
 * @member {String} sdk_version
 */
Device.prototype['sdk_version'] = undefined;

/**
 * The offset in minutes from UTC for the device time zone, including daylight savings time. 
 * @member {Number} time_zone_offset
 */
Device.prototype['time_zone_offset'] = undefined;

/**
 * Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other. 
 * @member {String} wrapper_runtime_version
 */
Device.prototype['wrapper_runtime_version'] = undefined;

/**
 * Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\". 
 * @member {String} wrapper_sdk_name
 */
Device.prototype['wrapper_sdk_name'] = undefined;

/**
 * Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK. 
 * @member {String} wrapper_sdk_version
 */
Device.prototype['wrapper_sdk_version'] = undefined;






export default Device;

