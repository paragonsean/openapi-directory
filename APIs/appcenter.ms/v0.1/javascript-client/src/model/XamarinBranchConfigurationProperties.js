/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The XamarinBranchConfigurationProperties model module.
 * @module model/XamarinBranchConfigurationProperties
 * @version v0.1
 */
class XamarinBranchConfigurationProperties {
    /**
     * Constructs a new <code>XamarinBranchConfigurationProperties</code>.
     * Build configuration for Xamarin projects
     * @alias module:model/XamarinBranchConfigurationProperties
     */
    constructor() { 
        
        XamarinBranchConfigurationProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>XamarinBranchConfigurationProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/XamarinBranchConfigurationProperties} obj Optional instance to populate.
     * @return {module:model/XamarinBranchConfigurationProperties} The populated <code>XamarinBranchConfigurationProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new XamarinBranchConfigurationProperties();

            if (data.hasOwnProperty('args')) {
                obj['args'] = ApiClient.convertToType(data['args'], 'String');
            }
            if (data.hasOwnProperty('configuration')) {
                obj['configuration'] = ApiClient.convertToType(data['configuration'], 'String');
            }
            if (data.hasOwnProperty('isSimBuild')) {
                obj['isSimBuild'] = ApiClient.convertToType(data['isSimBuild'], 'Boolean');
            }
            if (data.hasOwnProperty('monoVersion')) {
                obj['monoVersion'] = ApiClient.convertToType(data['monoVersion'], 'String');
            }
            if (data.hasOwnProperty('p12File')) {
                obj['p12File'] = ApiClient.convertToType(data['p12File'], 'String');
            }
            if (data.hasOwnProperty('p12Pwd')) {
                obj['p12Pwd'] = ApiClient.convertToType(data['p12Pwd'], 'String');
            }
            if (data.hasOwnProperty('provProfile')) {
                obj['provProfile'] = ApiClient.convertToType(data['provProfile'], 'String');
            }
            if (data.hasOwnProperty('sdkBundle')) {
                obj['sdkBundle'] = ApiClient.convertToType(data['sdkBundle'], 'String');
            }
            if (data.hasOwnProperty('slnPath')) {
                obj['slnPath'] = ApiClient.convertToType(data['slnPath'], 'String');
            }
            if (data.hasOwnProperty('symlink')) {
                obj['symlink'] = ApiClient.convertToType(data['symlink'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>XamarinBranchConfigurationProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>XamarinBranchConfigurationProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['args'] && !(typeof data['args'] === 'string' || data['args'] instanceof String)) {
            throw new Error("Expected the field `args` to be a primitive type in the JSON string but got " + data['args']);
        }
        // ensure the json data is a string
        if (data['configuration'] && !(typeof data['configuration'] === 'string' || data['configuration'] instanceof String)) {
            throw new Error("Expected the field `configuration` to be a primitive type in the JSON string but got " + data['configuration']);
        }
        // ensure the json data is a string
        if (data['monoVersion'] && !(typeof data['monoVersion'] === 'string' || data['monoVersion'] instanceof String)) {
            throw new Error("Expected the field `monoVersion` to be a primitive type in the JSON string but got " + data['monoVersion']);
        }
        // ensure the json data is a string
        if (data['p12File'] && !(typeof data['p12File'] === 'string' || data['p12File'] instanceof String)) {
            throw new Error("Expected the field `p12File` to be a primitive type in the JSON string but got " + data['p12File']);
        }
        // ensure the json data is a string
        if (data['p12Pwd'] && !(typeof data['p12Pwd'] === 'string' || data['p12Pwd'] instanceof String)) {
            throw new Error("Expected the field `p12Pwd` to be a primitive type in the JSON string but got " + data['p12Pwd']);
        }
        // ensure the json data is a string
        if (data['provProfile'] && !(typeof data['provProfile'] === 'string' || data['provProfile'] instanceof String)) {
            throw new Error("Expected the field `provProfile` to be a primitive type in the JSON string but got " + data['provProfile']);
        }
        // ensure the json data is a string
        if (data['sdkBundle'] && !(typeof data['sdkBundle'] === 'string' || data['sdkBundle'] instanceof String)) {
            throw new Error("Expected the field `sdkBundle` to be a primitive type in the JSON string but got " + data['sdkBundle']);
        }
        // ensure the json data is a string
        if (data['slnPath'] && !(typeof data['slnPath'] === 'string' || data['slnPath'] instanceof String)) {
            throw new Error("Expected the field `slnPath` to be a primitive type in the JSON string but got " + data['slnPath']);
        }
        // ensure the json data is a string
        if (data['symlink'] && !(typeof data['symlink'] === 'string' || data['symlink'] instanceof String)) {
            throw new Error("Expected the field `symlink` to be a primitive type in the JSON string but got " + data['symlink']);
        }

        return true;
    }


}



/**
 * @member {String} args
 */
XamarinBranchConfigurationProperties.prototype['args'] = undefined;

/**
 * @member {String} configuration
 */
XamarinBranchConfigurationProperties.prototype['configuration'] = undefined;

/**
 * @member {Boolean} isSimBuild
 */
XamarinBranchConfigurationProperties.prototype['isSimBuild'] = undefined;

/**
 * @member {String} monoVersion
 */
XamarinBranchConfigurationProperties.prototype['monoVersion'] = undefined;

/**
 * @member {String} p12File
 */
XamarinBranchConfigurationProperties.prototype['p12File'] = undefined;

/**
 * @member {String} p12Pwd
 */
XamarinBranchConfigurationProperties.prototype['p12Pwd'] = undefined;

/**
 * @member {String} provProfile
 */
XamarinBranchConfigurationProperties.prototype['provProfile'] = undefined;

/**
 * @member {String} sdkBundle
 */
XamarinBranchConfigurationProperties.prototype['sdkBundle'] = undefined;

/**
 * @member {String} slnPath
 */
XamarinBranchConfigurationProperties.prototype['slnPath'] = undefined;

/**
 * Symlink of the SDK Bundle and Mono installation. The build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building. 
 * @member {String} symlink
 */
XamarinBranchConfigurationProperties.prototype['symlink'] = undefined;






export default XamarinBranchConfigurationProperties;

