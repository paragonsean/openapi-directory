/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PrivateAppleCredentialsSecretResponse model module.
 * @module model/PrivateAppleCredentialsSecretResponse
 * @version v0.1
 */
class PrivateAppleCredentialsSecretResponse {
    /**
     * Constructs a new <code>PrivateAppleCredentialsSecretResponse</code>.
     * private Apple connection secrets response
     * @alias module:model/PrivateAppleCredentialsSecretResponse
     * @param id {String} id of the shared connection
     * @param serviceType {module:model/PrivateAppleCredentialsSecretResponse.ServiceTypeEnum} service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate
     */
    constructor(id, serviceType) { 
        
        PrivateAppleCredentialsSecretResponse.initialize(this, id, serviceType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, serviceType) { 
        obj['data'] = data;
        obj['id'] = id;
        obj['serviceType'] = serviceType;
    }

    /**
     * Constructs a <code>PrivateAppleCredentialsSecretResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PrivateAppleCredentialsSecretResponse} obj Optional instance to populate.
     * @return {module:model/PrivateAppleCredentialsSecretResponse} The populated <code>PrivateAppleCredentialsSecretResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PrivateAppleCredentialsSecretResponse();

            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], Object);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('is2FA')) {
                obj['is2FA'] = ApiClient.convertToType(data['is2FA'], 'Boolean');
            }
            if (data.hasOwnProperty('isValid')) {
                obj['isValid'] = ApiClient.convertToType(data['isValid'], 'Boolean');
            }
            if (data.hasOwnProperty('serviceType')) {
                obj['serviceType'] = ApiClient.convertToType(data['serviceType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PrivateAppleCredentialsSecretResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PrivateAppleCredentialsSecretResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PrivateAppleCredentialsSecretResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `data`
        if (data['data']) { // data not null
          Object.validateJSON(data['data']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['serviceType'] && !(typeof data['serviceType'] === 'string' || data['serviceType'] instanceof String)) {
            throw new Error("Expected the field `serviceType` to be a primitive type in the JSON string but got " + data['serviceType']);
        }

        return true;
    }


}

PrivateAppleCredentialsSecretResponse.RequiredProperties = ["data", "id", "serviceType"];

/**
 * apple secret details
 * @member {Object} data
 */
PrivateAppleCredentialsSecretResponse.prototype['data'] = undefined;

/**
 * display name of shared connection
 * @member {String} displayName
 */
PrivateAppleCredentialsSecretResponse.prototype['displayName'] = undefined;

/**
 * id of the shared connection
 * @member {String} id
 */
PrivateAppleCredentialsSecretResponse.prototype['id'] = undefined;

/**
 * if the account is a 2FA account or not
 * @member {Boolean} is2FA
 */
PrivateAppleCredentialsSecretResponse.prototype['is2FA'] = undefined;

/**
 * whether the credentials are valid or not
 * @member {Boolean} isValid
 */
PrivateAppleCredentialsSecretResponse.prototype['isValid'] = undefined;

/**
 * service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate
 * @member {module:model/PrivateAppleCredentialsSecretResponse.ServiceTypeEnum} serviceType
 */
PrivateAppleCredentialsSecretResponse.prototype['serviceType'] = undefined;





/**
 * Allowed values for the <code>serviceType</code> property.
 * @enum {String}
 * @readonly
 */
PrivateAppleCredentialsSecretResponse['ServiceTypeEnum'] = {

    /**
     * value: "apple"
     * @const
     */
    "apple": "apple",

    /**
     * value: "jira"
     * @const
     */
    "jira": "jira",

    /**
     * value: "googleplay"
     * @const
     */
    "googleplay": "googleplay",

    /**
     * value: "gitlab"
     * @const
     */
    "gitlab": "gitlab"
};



export default PrivateAppleCredentialsSecretResponse;

