/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProvisioningProfileFile model module.
 * @module model/ProvisioningProfileFile
 * @version v0.1
 */
class ProvisioningProfileFile {
    /**
     * Constructs a new <code>ProvisioningProfileFile</code>.
     * Provisioning profile fetch and store information
     * @alias module:model/ProvisioningProfileFile
     */
    constructor() { 
        
        ProvisioningProfileFile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProvisioningProfileFile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProvisioningProfileFile} obj Optional instance to populate.
     * @return {module:model/ProvisioningProfileFile} The populated <code>ProvisioningProfileFile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProvisioningProfileFile();

            if (data.hasOwnProperty('fileId')) {
                obj['fileId'] = ApiClient.convertToType(data['fileId'], 'String');
            }
            if (data.hasOwnProperty('fileName')) {
                obj['fileName'] = ApiClient.convertToType(data['fileName'], 'String');
            }
            if (data.hasOwnProperty('targetBundleIdentifier')) {
                obj['targetBundleIdentifier'] = ApiClient.convertToType(data['targetBundleIdentifier'], 'String');
            }
            if (data.hasOwnProperty('uploadId')) {
                obj['uploadId'] = ApiClient.convertToType(data['uploadId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProvisioningProfileFile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProvisioningProfileFile</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fileId'] && !(typeof data['fileId'] === 'string' || data['fileId'] instanceof String)) {
            throw new Error("Expected the field `fileId` to be a primitive type in the JSON string but got " + data['fileId']);
        }
        // ensure the json data is a string
        if (data['fileName'] && !(typeof data['fileName'] === 'string' || data['fileName'] instanceof String)) {
            throw new Error("Expected the field `fileName` to be a primitive type in the JSON string but got " + data['fileName']);
        }
        // ensure the json data is a string
        if (data['targetBundleIdentifier'] && !(typeof data['targetBundleIdentifier'] === 'string' || data['targetBundleIdentifier'] instanceof String)) {
            throw new Error("Expected the field `targetBundleIdentifier` to be a primitive type in the JSON string but got " + data['targetBundleIdentifier']);
        }
        // ensure the json data is a string
        if (data['uploadId'] && !(typeof data['uploadId'] === 'string' || data['uploadId'] instanceof String)) {
            throw new Error("Expected the field `uploadId` to be a primitive type in the JSON string but got " + data['uploadId']);
        }

        return true;
    }


}



/**
 * File id from secure file storage
 * @member {String} fileId
 */
ProvisioningProfileFile.prototype['fileId'] = undefined;

/**
 * Name of uploaded provisioning profile
 * @member {String} fileName
 */
ProvisioningProfileFile.prototype['fileName'] = undefined;

/**
 * Target the provisioning profile is used to sign
 * @member {String} targetBundleIdentifier
 */
ProvisioningProfileFile.prototype['targetBundleIdentifier'] = undefined;

/**
 * Upload id to App Center File Upload Store
 * @member {String} uploadId
 */
ProvisioningProfileFile.prototype['uploadId'] = undefined;






export default ProvisioningProfileFile;

