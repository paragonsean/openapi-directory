/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnalyticsEvents200ResponseEventsInner from './AnalyticsEvents200ResponseEventsInner';

/**
 * The Events model module.
 * @module model/Events
 * @version v0.1
 */
class Events {
    /**
     * Constructs a new <code>Events</code>.
     * @alias module:model/Events
     */
    constructor() { 
        
        Events.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Events</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Events} obj Optional instance to populate.
     * @return {module:model/Events} The populated <code>Events</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Events();

            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], [AnalyticsEvents200ResponseEventsInner]);
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
            if (data.hasOwnProperty('total_devices')) {
                obj['total_devices'] = ApiClient.convertToType(data['total_devices'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Events</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Events</code>.
     */
    static validateJSON(data) {
        if (data['events']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['events'])) {
                throw new Error("Expected the field `events` to be an array in the JSON data but got " + data['events']);
            }
            // validate the optional field `events` (array)
            for (const item of data['events']) {
                AnalyticsEvents200ResponseEventsInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/AnalyticsEvents200ResponseEventsInner>} events
 */
Events.prototype['events'] = undefined;

/**
 * The total count of events.
 * @member {Number} total
 */
Events.prototype['total'] = undefined;

/**
 * The active device over this period.
 * @member {Number} total_devices
 */
Events.prototype['total_devices'] = undefined;






export default Events;

