/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ResignAttemptResponse model module.
 * @module model/ResignAttemptResponse
 * @version v0.1
 */
class ResignAttemptResponse {
    /**
     * Constructs a new <code>ResignAttemptResponse</code>.
     * URL that can be used to check the status of the update devices operation and the updated profiles.
     * @alias module:model/ResignAttemptResponse
     * @param appId {String} App ID that the resign operation is being performed against.
     * @param contextId {String} Context ID for the resigning operation.
     * @param originalReleaseId {Number} ID of the release which is being resigned.
     * @param resignId {String} ID of the resign operation.
     * @param startTime {Number} The time that the resign operation was started.
     * @param status {String} The status of the resigning operation.
     * @param userId {String} ID of the user performing the resign operaiton.
     */
    constructor(appId, contextId, originalReleaseId, resignId, startTime, status, userId) { 
        
        ResignAttemptResponse.initialize(this, appId, contextId, originalReleaseId, resignId, startTime, status, userId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, appId, contextId, originalReleaseId, resignId, startTime, status, userId) { 
        obj['appId'] = appId;
        obj['contextId'] = contextId;
        obj['originalReleaseId'] = originalReleaseId;
        obj['resignId'] = resignId;
        obj['startTime'] = startTime;
        obj['status'] = status;
        obj['userId'] = userId;
    }

    /**
     * Constructs a <code>ResignAttemptResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResignAttemptResponse} obj Optional instance to populate.
     * @return {module:model/ResignAttemptResponse} The populated <code>ResignAttemptResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResignAttemptResponse();

            if (data.hasOwnProperty('appId')) {
                obj['appId'] = ApiClient.convertToType(data['appId'], 'String');
            }
            if (data.hasOwnProperty('contextId')) {
                obj['contextId'] = ApiClient.convertToType(data['contextId'], 'String');
            }
            if (data.hasOwnProperty('destinations')) {
                obj['destinations'] = ApiClient.convertToType(data['destinations'], [Object]);
            }
            if (data.hasOwnProperty('errorCode')) {
                obj['errorCode'] = ApiClient.convertToType(data['errorCode'], 'String');
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('originalReleaseId')) {
                obj['originalReleaseId'] = ApiClient.convertToType(data['originalReleaseId'], 'Number');
            }
            if (data.hasOwnProperty('resignId')) {
                obj['resignId'] = ApiClient.convertToType(data['resignId'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResignAttemptResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResignAttemptResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ResignAttemptResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['appId'] && !(typeof data['appId'] === 'string' || data['appId'] instanceof String)) {
            throw new Error("Expected the field `appId` to be a primitive type in the JSON string but got " + data['appId']);
        }
        // ensure the json data is a string
        if (data['contextId'] && !(typeof data['contextId'] === 'string' || data['contextId'] instanceof String)) {
            throw new Error("Expected the field `contextId` to be a primitive type in the JSON string but got " + data['contextId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['destinations'])) {
            throw new Error("Expected the field `destinations` to be an array in the JSON data but got " + data['destinations']);
        }
        // ensure the json data is a string
        if (data['errorCode'] && !(typeof data['errorCode'] === 'string' || data['errorCode'] instanceof String)) {
            throw new Error("Expected the field `errorCode` to be a primitive type in the JSON string but got " + data['errorCode']);
        }
        // ensure the json data is a string
        if (data['errorMessage'] && !(typeof data['errorMessage'] === 'string' || data['errorMessage'] instanceof String)) {
            throw new Error("Expected the field `errorMessage` to be a primitive type in the JSON string but got " + data['errorMessage']);
        }
        // ensure the json data is a string
        if (data['resignId'] && !(typeof data['resignId'] === 'string' || data['resignId'] instanceof String)) {
            throw new Error("Expected the field `resignId` to be a primitive type in the JSON string but got " + data['resignId']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}

ResignAttemptResponse.RequiredProperties = ["appId", "contextId", "originalReleaseId", "resignId", "startTime", "status", "userId"];

/**
 * App ID that the resign operation is being performed against.
 * @member {String} appId
 */
ResignAttemptResponse.prototype['appId'] = undefined;

/**
 * Context ID for the resigning operation.
 * @member {String} contextId
 */
ResignAttemptResponse.prototype['contextId'] = undefined;

/**
 * List of destinations that the resign operation is being performed against.
 * @member {Array.<Object>} destinations
 */
ResignAttemptResponse.prototype['destinations'] = undefined;

/**
 * Error code associated with the exception.
 * @member {String} errorCode
 */
ResignAttemptResponse.prototype['errorCode'] = undefined;

/**
 * Error message associated with the exception.
 * @member {String} errorMessage
 */
ResignAttemptResponse.prototype['errorMessage'] = undefined;

/**
 * ID of the release which is being resigned.
 * @member {Number} originalReleaseId
 */
ResignAttemptResponse.prototype['originalReleaseId'] = undefined;

/**
 * ID of the resign operation.
 * @member {String} resignId
 */
ResignAttemptResponse.prototype['resignId'] = undefined;

/**
 * The time that the resign operation was started.
 * @member {Number} startTime
 */
ResignAttemptResponse.prototype['startTime'] = undefined;

/**
 * The status of the resigning operation.
 * @member {String} status
 */
ResignAttemptResponse.prototype['status'] = undefined;

/**
 * ID of the user performing the resign operaiton.
 * @member {String} userId
 */
ResignAttemptResponse.prototype['userId'] = undefined;






export default ResignAttemptResponse;

