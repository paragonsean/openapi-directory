/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnalyticsDeviceCounts200ResponseDailyInner from './AnalyticsDeviceCounts200ResponseDailyInner';

/**
 * The ActiveDeviceCounts model module.
 * @module model/ActiveDeviceCounts
 * @version v0.1
 */
class ActiveDeviceCounts {
    /**
     * Constructs a new <code>ActiveDeviceCounts</code>.
     * @alias module:model/ActiveDeviceCounts
     */
    constructor() { 
        
        ActiveDeviceCounts.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ActiveDeviceCounts</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActiveDeviceCounts} obj Optional instance to populate.
     * @return {module:model/ActiveDeviceCounts} The populated <code>ActiveDeviceCounts</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActiveDeviceCounts();

            if (data.hasOwnProperty('daily')) {
                obj['daily'] = ApiClient.convertToType(data['daily'], [AnalyticsDeviceCounts200ResponseDailyInner]);
            }
            if (data.hasOwnProperty('monthly')) {
                obj['monthly'] = ApiClient.convertToType(data['monthly'], [AnalyticsDeviceCounts200ResponseDailyInner]);
            }
            if (data.hasOwnProperty('weekly')) {
                obj['weekly'] = ApiClient.convertToType(data['weekly'], [AnalyticsDeviceCounts200ResponseDailyInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActiveDeviceCounts</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActiveDeviceCounts</code>.
     */
    static validateJSON(data) {
        if (data['daily']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['daily'])) {
                throw new Error("Expected the field `daily` to be an array in the JSON data but got " + data['daily']);
            }
            // validate the optional field `daily` (array)
            for (const item of data['daily']) {
                AnalyticsDeviceCounts200ResponseDailyInner.validateJSON(item);
            };
        }
        if (data['monthly']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['monthly'])) {
                throw new Error("Expected the field `monthly` to be an array in the JSON data but got " + data['monthly']);
            }
            // validate the optional field `monthly` (array)
            for (const item of data['monthly']) {
                AnalyticsDeviceCounts200ResponseDailyInner.validateJSON(item);
            };
        }
        if (data['weekly']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['weekly'])) {
                throw new Error("Expected the field `weekly` to be an array in the JSON data but got " + data['weekly']);
            }
            // validate the optional field `weekly` (array)
            for (const item of data['weekly']) {
                AnalyticsDeviceCounts200ResponseDailyInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The active device count for each interval.
 * @member {Array.<module:model/AnalyticsDeviceCounts200ResponseDailyInner>} daily
 */
ActiveDeviceCounts.prototype['daily'] = undefined;

/**
 * The active device count for each interval with a month's retention.
 * @member {Array.<module:model/AnalyticsDeviceCounts200ResponseDailyInner>} monthly
 */
ActiveDeviceCounts.prototype['monthly'] = undefined;

/**
 * The active device count for each interval with a week's retention.
 * @member {Array.<module:model/AnalyticsDeviceCounts200ResponseDailyInner>} weekly
 */
ActiveDeviceCounts.prototype['weekly'] = undefined;






export default ActiveDeviceCounts;

