/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TestCloudStartTestRunOptions model module.
 * @module model/TestCloudStartTestRunOptions
 * @version v0.1
 */
class TestCloudStartTestRunOptions {
    /**
     * Constructs a new <code>TestCloudStartTestRunOptions</code>.
     * Options required to start the test run
     * @alias module:model/TestCloudStartTestRunOptions
     * @param deviceSelection {String} Device selection string.
     * @param testFramework {String} Test framework used by tests.
     */
    constructor(deviceSelection, testFramework) { 
        
        TestCloudStartTestRunOptions.initialize(this, deviceSelection, testFramework);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, deviceSelection, testFramework) { 
        obj['device_selection'] = deviceSelection;
        obj['test_framework'] = testFramework;
    }

    /**
     * Constructs a <code>TestCloudStartTestRunOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestCloudStartTestRunOptions} obj Optional instance to populate.
     * @return {module:model/TestCloudStartTestRunOptions} The populated <code>TestCloudStartTestRunOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestCloudStartTestRunOptions();

            if (data.hasOwnProperty('device_selection')) {
                obj['device_selection'] = ApiClient.convertToType(data['device_selection'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('test_framework')) {
                obj['test_framework'] = ApiClient.convertToType(data['test_framework'], 'String');
            }
            if (data.hasOwnProperty('test_parameters')) {
                obj['test_parameters'] = ApiClient.convertToType(data['test_parameters'], Object);
            }
            if (data.hasOwnProperty('test_series')) {
                obj['test_series'] = ApiClient.convertToType(data['test_series'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestCloudStartTestRunOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestCloudStartTestRunOptions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TestCloudStartTestRunOptions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['device_selection'] && !(typeof data['device_selection'] === 'string' || data['device_selection'] instanceof String)) {
            throw new Error("Expected the field `device_selection` to be a primitive type in the JSON string but got " + data['device_selection']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // ensure the json data is a string
        if (data['test_framework'] && !(typeof data['test_framework'] === 'string' || data['test_framework'] instanceof String)) {
            throw new Error("Expected the field `test_framework` to be a primitive type in the JSON string but got " + data['test_framework']);
        }
        // ensure the json data is a string
        if (data['test_series'] && !(typeof data['test_series'] === 'string' || data['test_series'] instanceof String)) {
            throw new Error("Expected the field `test_series` to be a primitive type in the JSON string but got " + data['test_series']);
        }

        return true;
    }


}

TestCloudStartTestRunOptions.RequiredProperties = ["device_selection", "test_framework"];

/**
 * Device selection string.
 * @member {String} device_selection
 */
TestCloudStartTestRunOptions.prototype['device_selection'] = undefined;

/**
 * Language that should be used to run tests.
 * @member {String} language
 */
TestCloudStartTestRunOptions.prototype['language'] = undefined;

/**
 * Locale that should be used to run tests.
 * @member {String} locale
 */
TestCloudStartTestRunOptions.prototype['locale'] = undefined;

/**
 * Test framework used by tests.
 * @member {String} test_framework
 */
TestCloudStartTestRunOptions.prototype['test_framework'] = undefined;

/**
 * A JSON dictionary with additional test parameters
 * @member {Object} test_parameters
 */
TestCloudStartTestRunOptions.prototype['test_parameters'] = undefined;

/**
 * Name of the test series.
 * @member {String} test_series
 */
TestCloudStartTestRunOptions.prototype['test_series'] = undefined;






export default TestCloudStartTestRunOptions;

