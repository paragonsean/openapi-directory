/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StoreReleasesList200ResponseInnerDistributionStoresInner from './StoreReleasesList200ResponseInnerDistributionStoresInner';

/**
 * The StoresBasicReleaseDetails model module.
 * @module model/StoresBasicReleaseDetails
 * @version v0.1
 */
class StoresBasicReleaseDetails {
    /**
     * Constructs a new <code>StoresBasicReleaseDetails</code>.
     * Basic information on a release
     * @alias module:model/StoresBasicReleaseDetails
     */
    constructor() { 
        
        StoresBasicReleaseDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StoresBasicReleaseDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StoresBasicReleaseDetails} obj Optional instance to populate.
     * @return {module:model/StoresBasicReleaseDetails} The populated <code>StoresBasicReleaseDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StoresBasicReleaseDetails();

            if (data.hasOwnProperty('destination_type')) {
                obj['destination_type'] = ApiClient.convertToType(data['destination_type'], 'String');
            }
            if (data.hasOwnProperty('distribution_stores')) {
                obj['distribution_stores'] = ApiClient.convertToType(data['distribution_stores'], [StoreReleasesList200ResponseInnerDistributionStoresInner]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('short_version')) {
                obj['short_version'] = ApiClient.convertToType(data['short_version'], 'String');
            }
            if (data.hasOwnProperty('uploaded_at')) {
                obj['uploaded_at'] = ApiClient.convertToType(data['uploaded_at'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StoresBasicReleaseDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StoresBasicReleaseDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['destination_type'] && !(typeof data['destination_type'] === 'string' || data['destination_type'] instanceof String)) {
            throw new Error("Expected the field `destination_type` to be a primitive type in the JSON string but got " + data['destination_type']);
        }
        if (data['distribution_stores']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['distribution_stores'])) {
                throw new Error("Expected the field `distribution_stores` to be an array in the JSON data but got " + data['distribution_stores']);
            }
            // validate the optional field `distribution_stores` (array)
            for (const item of data['distribution_stores']) {
                StoreReleasesList200ResponseInnerDistributionStoresInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['short_version'] && !(typeof data['short_version'] === 'string' || data['short_version'] instanceof String)) {
            throw new Error("Expected the field `short_version` to be a primitive type in the JSON string but got " + data['short_version']);
        }
        // ensure the json data is a string
        if (data['uploaded_at'] && !(typeof data['uploaded_at'] === 'string' || data['uploaded_at'] instanceof String)) {
            throw new Error("Expected the field `uploaded_at` to be a primitive type in the JSON string but got " + data['uploaded_at']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * Destination for this release.
 * @member {module:model/StoresBasicReleaseDetails.DestinationTypeEnum} destination_type
 */
StoresBasicReleaseDetails.prototype['destination_type'] = undefined;

/**
 * a list of distribution stores that are associated with this release.
 * @member {Array.<module:model/StoreReleasesList200ResponseInnerDistributionStoresInner>} distribution_stores
 */
StoresBasicReleaseDetails.prototype['distribution_stores'] = undefined;

/**
 * ID identifying this unique release.
 * @member {Number} id
 */
StoresBasicReleaseDetails.prototype['id'] = undefined;

/**
 * The release's short version. For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml. 
 * @member {String} short_version
 */
StoresBasicReleaseDetails.prototype['short_version'] = undefined;

/**
 * UTC time in ISO 8601 format of the uploaded time.
 * @member {String} uploaded_at
 */
StoresBasicReleaseDetails.prototype['uploaded_at'] = undefined;

/**
 * The release's version. For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml. 
 * @member {String} version
 */
StoresBasicReleaseDetails.prototype['version'] = undefined;





/**
 * Allowed values for the <code>destination_type</code> property.
 * @enum {String}
 * @readonly
 */
StoresBasicReleaseDetails['DestinationTypeEnum'] = {

    /**
     * value: "group"
     * @const
     */
    "group": "group",

    /**
     * value: "store"
     * @const
     */
    "store": "store",

    /**
     * value: "tester"
     * @const
     */
    "tester": "tester"
};



export default StoresBasicReleaseDetails;

