/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceSetDeviceConfigurationsInner from './DeviceSetDeviceConfigurationsInner';
import DeviceSetOwner from './DeviceSetOwner';

/**
 * The DeviceSet model module.
 * @module model/DeviceSet
 * @version v0.1
 */
class DeviceSet {
    /**
     * Constructs a new <code>DeviceSet</code>.
     * The name and devices of the device set
     * @alias module:model/DeviceSet
     * @param deviceConfigurations {Array.<module:model/DeviceSetDeviceConfigurationsInner>} 
     * @param id {String} Identifier of the device set
     * @param name {String} Name of the device set
     * @param owner {module:model/DeviceSetOwner} 
     */
    constructor(deviceConfigurations, id, name, owner) { 
        
        DeviceSet.initialize(this, deviceConfigurations, id, name, owner);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, deviceConfigurations, id, name, owner) { 
        obj['deviceConfigurations'] = deviceConfigurations;
        obj['id'] = id;
        obj['name'] = name;
        obj['owner'] = owner;
    }

    /**
     * Constructs a <code>DeviceSet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceSet} obj Optional instance to populate.
     * @return {module:model/DeviceSet} The populated <code>DeviceSet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceSet();

            if (data.hasOwnProperty('deviceConfigurations')) {
                obj['deviceConfigurations'] = ApiClient.convertToType(data['deviceConfigurations'], [DeviceSetDeviceConfigurationsInner]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('manufacturerCount')) {
                obj['manufacturerCount'] = ApiClient.convertToType(data['manufacturerCount'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('osVersionCount')) {
                obj['osVersionCount'] = ApiClient.convertToType(data['osVersionCount'], 'Number');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = DeviceSetOwner.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceSet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceSet</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeviceSet.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['deviceConfigurations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['deviceConfigurations'])) {
                throw new Error("Expected the field `deviceConfigurations` to be an array in the JSON data but got " + data['deviceConfigurations']);
            }
            // validate the optional field `deviceConfigurations` (array)
            for (const item of data['deviceConfigurations']) {
                DeviceSetDeviceConfigurationsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          DeviceSetOwner.validateJSON(data['owner']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }

        return true;
    }


}

DeviceSet.RequiredProperties = ["deviceConfigurations", "id", "name", "owner"];

/**
 * @member {Array.<module:model/DeviceSetDeviceConfigurationsInner>} deviceConfigurations
 */
DeviceSet.prototype['deviceConfigurations'] = undefined;

/**
 * Identifier of the device set
 * @member {String} id
 */
DeviceSet.prototype['id'] = undefined;

/**
 * The number of manufacturers in the device set's device selection
 * @member {Number} manufacturerCount
 */
DeviceSet.prototype['manufacturerCount'] = undefined;

/**
 * Name of the device set
 * @member {String} name
 */
DeviceSet.prototype['name'] = undefined;

/**
 * The number of os versions in the device set's device selection
 * @member {Number} osVersionCount
 */
DeviceSet.prototype['osVersionCount'] = undefined;

/**
 * @member {module:model/DeviceSetOwner} owner
 */
DeviceSet.prototype['owner'] = undefined;

/**
 * Slug of the device set
 * @member {String} slug
 */
DeviceSet.prototype['slug'] = undefined;






export default DeviceSet;

