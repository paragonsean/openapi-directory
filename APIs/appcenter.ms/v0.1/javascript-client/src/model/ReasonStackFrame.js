/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReasonStackFrame model module.
 * @module model/ReasonStackFrame
 * @version v0.1
 */
class ReasonStackFrame {
    /**
     * Constructs a new <code>ReasonStackFrame</code>.
     * frame belonging to the reason of the crash
     * @alias module:model/ReasonStackFrame
     */
    constructor() { 
        
        ReasonStackFrame.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReasonStackFrame</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReasonStackFrame} obj Optional instance to populate.
     * @return {module:model/ReasonStackFrame} The populated <code>ReasonStackFrame</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReasonStackFrame();

            if (data.hasOwnProperty('app_code')) {
                obj['app_code'] = ApiClient.convertToType(data['app_code'], 'Boolean');
            }
            if (data.hasOwnProperty('class_method')) {
                obj['class_method'] = ApiClient.convertToType(data['class_method'], 'Boolean');
            }
            if (data.hasOwnProperty('class_name')) {
                obj['class_name'] = ApiClient.convertToType(data['class_name'], 'String');
            }
            if (data.hasOwnProperty('code_formatted')) {
                obj['code_formatted'] = ApiClient.convertToType(data['code_formatted'], 'String');
            }
            if (data.hasOwnProperty('code_raw')) {
                obj['code_raw'] = ApiClient.convertToType(data['code_raw'], 'String');
            }
            if (data.hasOwnProperty('exception_type')) {
                obj['exception_type'] = ApiClient.convertToType(data['exception_type'], 'String');
            }
            if (data.hasOwnProperty('file')) {
                obj['file'] = ApiClient.convertToType(data['file'], 'String');
            }
            if (data.hasOwnProperty('framework_name')) {
                obj['framework_name'] = ApiClient.convertToType(data['framework_name'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('line')) {
                obj['line'] = ApiClient.convertToType(data['line'], 'Number');
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
            if (data.hasOwnProperty('method_params')) {
                obj['method_params'] = ApiClient.convertToType(data['method_params'], 'String');
            }
            if (data.hasOwnProperty('os_exception_type')) {
                obj['os_exception_type'] = ApiClient.convertToType(data['os_exception_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReasonStackFrame</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReasonStackFrame</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['class_name'] && !(typeof data['class_name'] === 'string' || data['class_name'] instanceof String)) {
            throw new Error("Expected the field `class_name` to be a primitive type in the JSON string but got " + data['class_name']);
        }
        // ensure the json data is a string
        if (data['code_formatted'] && !(typeof data['code_formatted'] === 'string' || data['code_formatted'] instanceof String)) {
            throw new Error("Expected the field `code_formatted` to be a primitive type in the JSON string but got " + data['code_formatted']);
        }
        // ensure the json data is a string
        if (data['code_raw'] && !(typeof data['code_raw'] === 'string' || data['code_raw'] instanceof String)) {
            throw new Error("Expected the field `code_raw` to be a primitive type in the JSON string but got " + data['code_raw']);
        }
        // ensure the json data is a string
        if (data['exception_type'] && !(typeof data['exception_type'] === 'string' || data['exception_type'] instanceof String)) {
            throw new Error("Expected the field `exception_type` to be a primitive type in the JSON string but got " + data['exception_type']);
        }
        // ensure the json data is a string
        if (data['file'] && !(typeof data['file'] === 'string' || data['file'] instanceof String)) {
            throw new Error("Expected the field `file` to be a primitive type in the JSON string but got " + data['file']);
        }
        // ensure the json data is a string
        if (data['framework_name'] && !(typeof data['framework_name'] === 'string' || data['framework_name'] instanceof String)) {
            throw new Error("Expected the field `framework_name` to be a primitive type in the JSON string but got " + data['framework_name']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['method'] && !(typeof data['method'] === 'string' || data['method'] instanceof String)) {
            throw new Error("Expected the field `method` to be a primitive type in the JSON string but got " + data['method']);
        }
        // ensure the json data is a string
        if (data['method_params'] && !(typeof data['method_params'] === 'string' || data['method_params'] instanceof String)) {
            throw new Error("Expected the field `method_params` to be a primitive type in the JSON string but got " + data['method_params']);
        }
        // ensure the json data is a string
        if (data['os_exception_type'] && !(typeof data['os_exception_type'] === 'string' || data['os_exception_type'] instanceof String)) {
            throw new Error("Expected the field `os_exception_type` to be a primitive type in the JSON string but got " + data['os_exception_type']);
        }

        return true;
    }


}



/**
 * this line isn't from any framework
 * @member {Boolean} app_code
 */
ReasonStackFrame.prototype['app_code'] = undefined;

/**
 * is a class method
 * @member {Boolean} class_method
 */
ReasonStackFrame.prototype['class_method'] = undefined;

/**
 * name of the class
 * @member {String} class_name
 */
ReasonStackFrame.prototype['class_name'] = undefined;

/**
 * Formatted frame string
 * @member {String} code_formatted
 */
ReasonStackFrame.prototype['code_formatted'] = undefined;

/**
 * Unformatted Frame string
 * @member {String} code_raw
 */
ReasonStackFrame.prototype['code_raw'] = undefined;

/**
 * Exception type.
 * @member {String} exception_type
 */
ReasonStackFrame.prototype['exception_type'] = undefined;

/**
 * name of the file
 * @member {String} file
 */
ReasonStackFrame.prototype['file'] = undefined;

/**
 * Name of the framework
 * @member {String} framework_name
 */
ReasonStackFrame.prototype['framework_name'] = undefined;

/**
 * programming language of the frame
 * @member {module:model/ReasonStackFrame.LanguageEnum} language
 */
ReasonStackFrame.prototype['language'] = undefined;

/**
 * line number
 * @member {Number} line
 */
ReasonStackFrame.prototype['line'] = undefined;

/**
 * name of the method
 * @member {String} method
 */
ReasonStackFrame.prototype['method'] = undefined;

/**
 * parameters of the frames method
 * @member {String} method_params
 */
ReasonStackFrame.prototype['method_params'] = undefined;

/**
 * OS exception type. (aka. SIGNAL)
 * @member {String} os_exception_type
 */
ReasonStackFrame.prototype['os_exception_type'] = undefined;





/**
 * Allowed values for the <code>language</code> property.
 * @enum {String}
 * @readonly
 */
ReasonStackFrame['LanguageEnum'] = {

    /**
     * value: "JavaScript"
     * @const
     */
    "JavaScript": "JavaScript",

    /**
     * value: "CSharp"
     * @const
     */
    "CSharp": "CSharp",

    /**
     * value: "Objective-C"
     * @const
     */
    "Objective-C": "Objective-C",

    /**
     * value: "Objective-Cpp"
     * @const
     */
    "Objective-Cpp": "Objective-Cpp",

    /**
     * value: "Cpp"
     * @const
     */
    "Cpp": "Cpp",

    /**
     * value: "C"
     * @const
     */
    "C": "C",

    /**
     * value: "Swift"
     * @const
     */
    "Swift": "Swift",

    /**
     * value: "Java"
     * @const
     */
    "Java": "Java",

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown"
};



export default ReasonStackFrame;

