/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Build model module.
 * @module model/Build
 * @version v0.1
 */
class Build {
    /**
     * Constructs a new <code>Build</code>.
     * @alias module:model/Build
     * @param buildNumber {String} The build number
     * @param id {Number} The build ID
     * @param queueTime {String} The time the build was queued
     * @param result {String} The build result
     * @param sourceBranch {String} The source branch name
     * @param sourceVersion {String} The source SHA
     * @param status {String} The build status
     */
    constructor(buildNumber, id, queueTime, result, sourceBranch, sourceVersion, status) { 
        
        Build.initialize(this, buildNumber, id, queueTime, result, sourceBranch, sourceVersion, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, buildNumber, id, queueTime, result, sourceBranch, sourceVersion, status) { 
        obj['buildNumber'] = buildNumber;
        obj['id'] = id;
        obj['queueTime'] = queueTime;
        obj['result'] = result;
        obj['sourceBranch'] = sourceBranch;
        obj['sourceVersion'] = sourceVersion;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>Build</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Build} obj Optional instance to populate.
     * @return {module:model/Build} The populated <code>Build</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Build();

            if (data.hasOwnProperty('buildNumber')) {
                obj['buildNumber'] = ApiClient.convertToType(data['buildNumber'], 'String');
            }
            if (data.hasOwnProperty('finishTime')) {
                obj['finishTime'] = ApiClient.convertToType(data['finishTime'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lastChangedDate')) {
                obj['lastChangedDate'] = ApiClient.convertToType(data['lastChangedDate'], 'String');
            }
            if (data.hasOwnProperty('queueTime')) {
                obj['queueTime'] = ApiClient.convertToType(data['queueTime'], 'String');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], 'String');
            }
            if (data.hasOwnProperty('sourceBranch')) {
                obj['sourceBranch'] = ApiClient.convertToType(data['sourceBranch'], 'String');
            }
            if (data.hasOwnProperty('sourceVersion')) {
                obj['sourceVersion'] = ApiClient.convertToType(data['sourceVersion'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Build</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Build</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Build.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['buildNumber'] && !(typeof data['buildNumber'] === 'string' || data['buildNumber'] instanceof String)) {
            throw new Error("Expected the field `buildNumber` to be a primitive type in the JSON string but got " + data['buildNumber']);
        }
        // ensure the json data is a string
        if (data['finishTime'] && !(typeof data['finishTime'] === 'string' || data['finishTime'] instanceof String)) {
            throw new Error("Expected the field `finishTime` to be a primitive type in the JSON string but got " + data['finishTime']);
        }
        // ensure the json data is a string
        if (data['lastChangedDate'] && !(typeof data['lastChangedDate'] === 'string' || data['lastChangedDate'] instanceof String)) {
            throw new Error("Expected the field `lastChangedDate` to be a primitive type in the JSON string but got " + data['lastChangedDate']);
        }
        // ensure the json data is a string
        if (data['queueTime'] && !(typeof data['queueTime'] === 'string' || data['queueTime'] instanceof String)) {
            throw new Error("Expected the field `queueTime` to be a primitive type in the JSON string but got " + data['queueTime']);
        }
        // ensure the json data is a string
        if (data['result'] && !(typeof data['result'] === 'string' || data['result'] instanceof String)) {
            throw new Error("Expected the field `result` to be a primitive type in the JSON string but got " + data['result']);
        }
        // ensure the json data is a string
        if (data['sourceBranch'] && !(typeof data['sourceBranch'] === 'string' || data['sourceBranch'] instanceof String)) {
            throw new Error("Expected the field `sourceBranch` to be a primitive type in the JSON string but got " + data['sourceBranch']);
        }
        // ensure the json data is a string
        if (data['sourceVersion'] && !(typeof data['sourceVersion'] === 'string' || data['sourceVersion'] instanceof String)) {
            throw new Error("Expected the field `sourceVersion` to be a primitive type in the JSON string but got " + data['sourceVersion']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

Build.RequiredProperties = ["buildNumber", "id", "queueTime", "result", "sourceBranch", "sourceVersion", "status"];

/**
 * The build number
 * @member {String} buildNumber
 */
Build.prototype['buildNumber'] = undefined;

/**
 * The time the build was finished
 * @member {String} finishTime
 */
Build.prototype['finishTime'] = undefined;

/**
 * The build ID
 * @member {Number} id
 */
Build.prototype['id'] = undefined;

/**
 * The time the build status was last changed
 * @member {String} lastChangedDate
 */
Build.prototype['lastChangedDate'] = undefined;

/**
 * The time the build was queued
 * @member {String} queueTime
 */
Build.prototype['queueTime'] = undefined;

/**
 * The build result
 * @member {String} result
 */
Build.prototype['result'] = undefined;

/**
 * The source branch name
 * @member {String} sourceBranch
 */
Build.prototype['sourceBranch'] = undefined;

/**
 * The source SHA
 * @member {String} sourceVersion
 */
Build.prototype['sourceVersion'] = undefined;

/**
 * The time the build was started
 * @member {String} startTime
 */
Build.prototype['startTime'] = undefined;

/**
 * The build status
 * @member {String} status
 */
Build.prototype['status'] = undefined;






export default Build;

