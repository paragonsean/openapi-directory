/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TesterAppWithReleaseResponseOwner from './TesterAppWithReleaseResponseOwner';
import TesterAppWithReleaseResponseRelease from './TesterAppWithReleaseResponseRelease';

/**
 * The TesterAppWithReleaseResponse model module.
 * @module model/TesterAppWithReleaseResponse
 * @version v0.1
 */
class TesterAppWithReleaseResponse {
    /**
     * Constructs a new <code>TesterAppWithReleaseResponse</code>.
     * @alias module:model/TesterAppWithReleaseResponse
     */
    constructor() { 
        
        TesterAppWithReleaseResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TesterAppWithReleaseResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TesterAppWithReleaseResponse} obj Optional instance to populate.
     * @return {module:model/TesterAppWithReleaseResponse} The populated <code>TesterAppWithReleaseResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TesterAppWithReleaseResponse();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('display_name')) {
                obj['display_name'] = ApiClient.convertToType(data['display_name'], 'String');
            }
            if (data.hasOwnProperty('icon_url')) {
                obj['icon_url'] = ApiClient.convertToType(data['icon_url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('os')) {
                obj['os'] = ApiClient.convertToType(data['os'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = TesterAppWithReleaseResponseOwner.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('release')) {
                obj['release'] = TesterAppWithReleaseResponseRelease.constructFromObject(data['release']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TesterAppWithReleaseResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TesterAppWithReleaseResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['display_name'] && !(typeof data['display_name'] === 'string' || data['display_name'] instanceof String)) {
            throw new Error("Expected the field `display_name` to be a primitive type in the JSON string but got " + data['display_name']);
        }
        // ensure the json data is a string
        if (data['icon_url'] && !(typeof data['icon_url'] === 'string' || data['icon_url'] instanceof String)) {
            throw new Error("Expected the field `icon_url` to be a primitive type in the JSON string but got " + data['icon_url']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['os'] && !(typeof data['os'] === 'string' || data['os'] instanceof String)) {
            throw new Error("Expected the field `os` to be a primitive type in the JSON string but got " + data['os']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          TesterAppWithReleaseResponseOwner.validateJSON(data['owner']);
        }
        // validate the optional field `release`
        if (data['release']) { // data not null
          TesterAppWithReleaseResponseRelease.validateJSON(data['release']);
        }

        return true;
    }


}



/**
 * The description of the app
 * @member {String} description
 */
TesterAppWithReleaseResponse.prototype['description'] = undefined;

/**
 * The app's display name.
 * @member {String} display_name
 */
TesterAppWithReleaseResponse.prototype['display_name'] = undefined;

/**
 * A URL to the app's icon.
 * @member {String} icon_url
 */
TesterAppWithReleaseResponse.prototype['icon_url'] = undefined;

/**
 * The unique ID (UUID) of the app
 * @member {String} id
 */
TesterAppWithReleaseResponse.prototype['id'] = undefined;

/**
 * The app's name.
 * @member {String} name
 */
TesterAppWithReleaseResponse.prototype['name'] = undefined;

/**
 * The app's os.
 * @member {String} os
 */
TesterAppWithReleaseResponse.prototype['os'] = undefined;

/**
 * @member {module:model/TesterAppWithReleaseResponseOwner} owner
 */
TesterAppWithReleaseResponse.prototype['owner'] = undefined;

/**
 * @member {module:model/TesterAppWithReleaseResponseRelease} release
 */
TesterAppWithReleaseResponse.prototype['release'] = undefined;






export default TesterAppWithReleaseResponse;

