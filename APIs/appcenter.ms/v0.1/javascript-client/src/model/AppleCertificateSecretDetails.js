/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AppleCertificateSecretDetails model module.
 * @module model/AppleCertificateSecretDetails
 * @version v0.1
 */
class AppleCertificateSecretDetails {
    /**
     * Constructs a new <code>AppleCertificateSecretDetails</code>.
     * Apple Certificate Secret Details
     * @alias module:model/AppleCertificateSecretDetails
     * @param base64Certificate {String} The certificate contents in base 64 encoded string
     * @param certificateValidityEndDate {String} The date-time till which the certificate is valid
     * @param certificateValidityStartDate {String} The date-time from which the certificate is valid
     * @param displayName {String} The display name (CN) of the certificate
     * @param password {String} The password for the certificate
     */
    constructor(base64Certificate, certificateValidityEndDate, certificateValidityStartDate, displayName, password) { 
        
        AppleCertificateSecretDetails.initialize(this, base64Certificate, certificateValidityEndDate, certificateValidityStartDate, displayName, password);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, base64Certificate, certificateValidityEndDate, certificateValidityStartDate, displayName, password) { 
        obj['base64Certificate'] = base64Certificate;
        obj['certificateValidityEndDate'] = certificateValidityEndDate;
        obj['certificateValidityStartDate'] = certificateValidityStartDate;
        obj['displayName'] = displayName;
        obj['password'] = password;
    }

    /**
     * Constructs a <code>AppleCertificateSecretDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppleCertificateSecretDetails} obj Optional instance to populate.
     * @return {module:model/AppleCertificateSecretDetails} The populated <code>AppleCertificateSecretDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppleCertificateSecretDetails();

            if (data.hasOwnProperty('base64Certificate')) {
                obj['base64Certificate'] = ApiClient.convertToType(data['base64Certificate'], 'String');
            }
            if (data.hasOwnProperty('certificateValidityEndDate')) {
                obj['certificateValidityEndDate'] = ApiClient.convertToType(data['certificateValidityEndDate'], 'String');
            }
            if (data.hasOwnProperty('certificateValidityStartDate')) {
                obj['certificateValidityStartDate'] = ApiClient.convertToType(data['certificateValidityStartDate'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppleCertificateSecretDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppleCertificateSecretDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AppleCertificateSecretDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['base64Certificate'] && !(typeof data['base64Certificate'] === 'string' || data['base64Certificate'] instanceof String)) {
            throw new Error("Expected the field `base64Certificate` to be a primitive type in the JSON string but got " + data['base64Certificate']);
        }
        // ensure the json data is a string
        if (data['certificateValidityEndDate'] && !(typeof data['certificateValidityEndDate'] === 'string' || data['certificateValidityEndDate'] instanceof String)) {
            throw new Error("Expected the field `certificateValidityEndDate` to be a primitive type in the JSON string but got " + data['certificateValidityEndDate']);
        }
        // ensure the json data is a string
        if (data['certificateValidityStartDate'] && !(typeof data['certificateValidityStartDate'] === 'string' || data['certificateValidityStartDate'] instanceof String)) {
            throw new Error("Expected the field `certificateValidityStartDate` to be a primitive type in the JSON string but got " + data['certificateValidityStartDate']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }

        return true;
    }


}

AppleCertificateSecretDetails.RequiredProperties = ["base64Certificate", "certificateValidityEndDate", "certificateValidityStartDate", "displayName", "password"];

/**
 * The certificate contents in base 64 encoded string
 * @member {String} base64Certificate
 */
AppleCertificateSecretDetails.prototype['base64Certificate'] = undefined;

/**
 * The date-time till which the certificate is valid
 * @member {String} certificateValidityEndDate
 */
AppleCertificateSecretDetails.prototype['certificateValidityEndDate'] = undefined;

/**
 * The date-time from which the certificate is valid
 * @member {String} certificateValidityStartDate
 */
AppleCertificateSecretDetails.prototype['certificateValidityStartDate'] = undefined;

/**
 * The display name (CN) of the certificate
 * @member {String} displayName
 */
AppleCertificateSecretDetails.prototype['displayName'] = undefined;

/**
 * The password for the certificate
 * @member {String} password
 */
AppleCertificateSecretDetails.prototype['password'] = undefined;






export default AppleCertificateSecretDetails;

