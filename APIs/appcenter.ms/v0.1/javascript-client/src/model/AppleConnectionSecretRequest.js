/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppleConnectionSecretRequestAllOfData from './AppleConnectionSecretRequestAllOfData';

/**
 * The AppleConnectionSecretRequest model module.
 * @module model/AppleConnectionSecretRequest
 * @version v0.1
 */
class AppleConnectionSecretRequest {
    /**
     * Constructs a new <code>AppleConnectionSecretRequest</code>.
     * Apple connection secrets
     * @alias module:model/AppleConnectionSecretRequest
     * @param serviceType {module:model/AppleConnectionSecretRequest.ServiceTypeEnum} service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate
     */
    constructor(serviceType) { 
        
        AppleConnectionSecretRequest.initialize(this, serviceType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, serviceType) { 
        obj['credentialType'] = 'credentials';
        obj['serviceType'] = serviceType;
    }

    /**
     * Constructs a <code>AppleConnectionSecretRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppleConnectionSecretRequest} obj Optional instance to populate.
     * @return {module:model/AppleConnectionSecretRequest} The populated <code>AppleConnectionSecretRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppleConnectionSecretRequest();

            if (data.hasOwnProperty('credentialType')) {
                obj['credentialType'] = ApiClient.convertToType(data['credentialType'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = AppleConnectionSecretRequestAllOfData.constructFromObject(data['data']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('serviceType')) {
                obj['serviceType'] = ApiClient.convertToType(data['serviceType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppleConnectionSecretRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppleConnectionSecretRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AppleConnectionSecretRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['credentialType'] && !(typeof data['credentialType'] === 'string' || data['credentialType'] instanceof String)) {
            throw new Error("Expected the field `credentialType` to be a primitive type in the JSON string but got " + data['credentialType']);
        }
        // validate the optional field `data`
        if (data['data']) { // data not null
          AppleConnectionSecretRequestAllOfData.validateJSON(data['data']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['serviceType'] && !(typeof data['serviceType'] === 'string' || data['serviceType'] instanceof String)) {
            throw new Error("Expected the field `serviceType` to be a primitive type in the JSON string but got " + data['serviceType']);
        }

        return true;
    }


}

AppleConnectionSecretRequest.RequiredProperties = ["serviceType"];

/**
 * credential type of the shared connection. Values can be credentials|certificate
 * @member {module:model/AppleConnectionSecretRequest.CredentialTypeEnum} credentialType
 * @default 'credentials'
 */
AppleConnectionSecretRequest.prototype['credentialType'] = 'credentials';

/**
 * @member {module:model/AppleConnectionSecretRequestAllOfData} data
 */
AppleConnectionSecretRequest.prototype['data'] = undefined;

/**
 * display name of shared connection
 * @member {String} displayName
 */
AppleConnectionSecretRequest.prototype['displayName'] = undefined;

/**
 * service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate
 * @member {module:model/AppleConnectionSecretRequest.ServiceTypeEnum} serviceType
 */
AppleConnectionSecretRequest.prototype['serviceType'] = undefined;





/**
 * Allowed values for the <code>credentialType</code> property.
 * @enum {String}
 * @readonly
 */
AppleConnectionSecretRequest['CredentialTypeEnum'] = {

    /**
     * value: "credentials"
     * @const
     */
    "credentials": "credentials",

    /**
     * value: "certificate"
     * @const
     */
    "certificate": "certificate",

    /**
     * value: "key"
     * @const
     */
    "key": "key"
};


/**
 * Allowed values for the <code>serviceType</code> property.
 * @enum {String}
 * @readonly
 */
AppleConnectionSecretRequest['ServiceTypeEnum'] = {

    /**
     * value: "apple"
     * @const
     */
    "apple": "apple",

    /**
     * value: "jira"
     * @const
     */
    "jira": "jira",

    /**
     * value: "googleplay"
     * @const
     */
    "googleplay": "googleplay",

    /**
     * value: "gitlab"
     * @const
     */
    "gitlab": "gitlab"
};



export default AppleConnectionSecretRequest;

