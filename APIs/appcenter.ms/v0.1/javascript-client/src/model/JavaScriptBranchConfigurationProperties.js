/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JavaScriptBranchConfigurationProperties model module.
 * @module model/JavaScriptBranchConfigurationProperties
 * @version v0.1
 */
class JavaScriptBranchConfigurationProperties {
    /**
     * Constructs a new <code>JavaScriptBranchConfigurationProperties</code>.
     * Build configuration when React Native, or other JavaScript tech, is part of the build steps
     * @alias module:model/JavaScriptBranchConfigurationProperties
     */
    constructor() { 
        
        JavaScriptBranchConfigurationProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JavaScriptBranchConfigurationProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JavaScriptBranchConfigurationProperties} obj Optional instance to populate.
     * @return {module:model/JavaScriptBranchConfigurationProperties} The populated <code>JavaScriptBranchConfigurationProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JavaScriptBranchConfigurationProperties();

            if (data.hasOwnProperty('packageJsonPath')) {
                obj['packageJsonPath'] = ApiClient.convertToType(data['packageJsonPath'], 'String');
            }
            if (data.hasOwnProperty('reactNativeVersion')) {
                obj['reactNativeVersion'] = ApiClient.convertToType(data['reactNativeVersion'], 'String');
            }
            if (data.hasOwnProperty('runTests')) {
                obj['runTests'] = ApiClient.convertToType(data['runTests'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JavaScriptBranchConfigurationProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JavaScriptBranchConfigurationProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['packageJsonPath'] && !(typeof data['packageJsonPath'] === 'string' || data['packageJsonPath'] instanceof String)) {
            throw new Error("Expected the field `packageJsonPath` to be a primitive type in the JSON string but got " + data['packageJsonPath']);
        }
        // ensure the json data is a string
        if (data['reactNativeVersion'] && !(typeof data['reactNativeVersion'] === 'string' || data['reactNativeVersion'] instanceof String)) {
            throw new Error("Expected the field `reactNativeVersion` to be a primitive type in the JSON string but got " + data['reactNativeVersion']);
        }

        return true;
    }


}



/**
 * Path to package.json file for the main project, e.g. \"package.json\" or \"myapp/package.json\"
 * @member {String} packageJsonPath
 */
JavaScriptBranchConfigurationProperties.prototype['packageJsonPath'] = undefined;

/**
 * Version of React Native from package.json files
 * @member {String} reactNativeVersion
 */
JavaScriptBranchConfigurationProperties.prototype['reactNativeVersion'] = undefined;

/**
 * Whether to run Jest unit tests, via npm test, during the build
 * @member {Boolean} runTests
 */
JavaScriptBranchConfigurationProperties.prototype['runTests'] = undefined;






export default JavaScriptBranchConfigurationProperties;

