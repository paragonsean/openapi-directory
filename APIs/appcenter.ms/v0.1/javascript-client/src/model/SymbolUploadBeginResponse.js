/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SymbolUploadBeginResponse model module.
 * @module model/SymbolUploadBeginResponse
 * @version v0.1
 */
class SymbolUploadBeginResponse {
    /**
     * Constructs a new <code>SymbolUploadBeginResponse</code>.
     * A response containing information pertaining to starting a symbol upload process
     * @alias module:model/SymbolUploadBeginResponse
     * @param expirationDate {Date} Describes how long the upload_url is valid
     * @param symbolUploadId {String} The id for the current upload
     * @param uploadUrl {String} The URL where the client needs to upload the symbol blob to
     */
    constructor(expirationDate, symbolUploadId, uploadUrl) { 
        
        SymbolUploadBeginResponse.initialize(this, expirationDate, symbolUploadId, uploadUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, expirationDate, symbolUploadId, uploadUrl) { 
        obj['expiration_date'] = expirationDate;
        obj['symbol_upload_id'] = symbolUploadId;
        obj['upload_url'] = uploadUrl;
    }

    /**
     * Constructs a <code>SymbolUploadBeginResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SymbolUploadBeginResponse} obj Optional instance to populate.
     * @return {module:model/SymbolUploadBeginResponse} The populated <code>SymbolUploadBeginResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SymbolUploadBeginResponse();

            if (data.hasOwnProperty('expiration_date')) {
                obj['expiration_date'] = ApiClient.convertToType(data['expiration_date'], 'Date');
            }
            if (data.hasOwnProperty('symbol_upload_id')) {
                obj['symbol_upload_id'] = ApiClient.convertToType(data['symbol_upload_id'], 'String');
            }
            if (data.hasOwnProperty('upload_url')) {
                obj['upload_url'] = ApiClient.convertToType(data['upload_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SymbolUploadBeginResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SymbolUploadBeginResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SymbolUploadBeginResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['symbol_upload_id'] && !(typeof data['symbol_upload_id'] === 'string' || data['symbol_upload_id'] instanceof String)) {
            throw new Error("Expected the field `symbol_upload_id` to be a primitive type in the JSON string but got " + data['symbol_upload_id']);
        }
        // ensure the json data is a string
        if (data['upload_url'] && !(typeof data['upload_url'] === 'string' || data['upload_url'] instanceof String)) {
            throw new Error("Expected the field `upload_url` to be a primitive type in the JSON string but got " + data['upload_url']);
        }

        return true;
    }


}

SymbolUploadBeginResponse.RequiredProperties = ["expiration_date", "symbol_upload_id", "upload_url"];

/**
 * Describes how long the upload_url is valid
 * @member {Date} expiration_date
 */
SymbolUploadBeginResponse.prototype['expiration_date'] = undefined;

/**
 * The id for the current upload
 * @member {String} symbol_upload_id
 */
SymbolUploadBeginResponse.prototype['symbol_upload_id'] = undefined;

/**
 * The URL where the client needs to upload the symbol blob to
 * @member {String} upload_url
 */
SymbolUploadBeginResponse.prototype['upload_url'] = undefined;






export default SymbolUploadBeginResponse;

