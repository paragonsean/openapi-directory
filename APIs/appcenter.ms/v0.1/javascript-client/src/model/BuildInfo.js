/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BuildInfo model module.
 * @module model/BuildInfo
 * @version v0.1
 */
class BuildInfo {
    /**
     * Constructs a new <code>BuildInfo</code>.
     * Contains metadata about the build that produced the release being uploaded
     * @alias module:model/BuildInfo
     */
    constructor() { 
        
        BuildInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BuildInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BuildInfo} obj Optional instance to populate.
     * @return {module:model/BuildInfo} The populated <code>BuildInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BuildInfo();

            if (data.hasOwnProperty('branch_name')) {
                obj['branch_name'] = ApiClient.convertToType(data['branch_name'], 'String');
            }
            if (data.hasOwnProperty('commit_hash')) {
                obj['commit_hash'] = ApiClient.convertToType(data['commit_hash'], 'String');
            }
            if (data.hasOwnProperty('commit_message')) {
                obj['commit_message'] = ApiClient.convertToType(data['commit_message'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BuildInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BuildInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['branch_name'] && !(typeof data['branch_name'] === 'string' || data['branch_name'] instanceof String)) {
            throw new Error("Expected the field `branch_name` to be a primitive type in the JSON string but got " + data['branch_name']);
        }
        // ensure the json data is a string
        if (data['commit_hash'] && !(typeof data['commit_hash'] === 'string' || data['commit_hash'] instanceof String)) {
            throw new Error("Expected the field `commit_hash` to be a primitive type in the JSON string but got " + data['commit_hash']);
        }
        // ensure the json data is a string
        if (data['commit_message'] && !(typeof data['commit_message'] === 'string' || data['commit_message'] instanceof String)) {
            throw new Error("Expected the field `commit_message` to be a primitive type in the JSON string but got " + data['commit_message']);
        }

        return true;
    }


}



/**
 * The branch name of the build producing the release
 * @member {String} branch_name
 */
BuildInfo.prototype['branch_name'] = undefined;

/**
 * The commit hash of the build producing the release
 * @member {String} commit_hash
 */
BuildInfo.prototype['commit_hash'] = undefined;

/**
 * The commit message of the build producing the release
 * @member {String} commit_message
 */
BuildInfo.prototype['commit_message'] = undefined;






export default BuildInfo;

