/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AADUser model module.
 * @module model/AADUser
 * @version v0.1
 */
class AADUser {
    /**
     * Constructs a new <code>AADUser</code>.
     * an AAD user&#39;s id and tenant id
     * @alias module:model/AADUser
     * @param objectId {String} the aad user's id
     * @param tenantId {String} the aad user's tenant id
     */
    constructor(objectId, tenantId) { 
        
        AADUser.initialize(this, objectId, tenantId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, objectId, tenantId) { 
        obj['object_id'] = objectId;
        obj['tenant_id'] = tenantId;
    }

    /**
     * Constructs a <code>AADUser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AADUser} obj Optional instance to populate.
     * @return {module:model/AADUser} The populated <code>AADUser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AADUser();

            if (data.hasOwnProperty('object_id')) {
                obj['object_id'] = ApiClient.convertToType(data['object_id'], 'String');
            }
            if (data.hasOwnProperty('tenant_id')) {
                obj['tenant_id'] = ApiClient.convertToType(data['tenant_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AADUser</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AADUser</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AADUser.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['object_id'] && !(typeof data['object_id'] === 'string' || data['object_id'] instanceof String)) {
            throw new Error("Expected the field `object_id` to be a primitive type in the JSON string but got " + data['object_id']);
        }
        // ensure the json data is a string
        if (data['tenant_id'] && !(typeof data['tenant_id'] === 'string' || data['tenant_id'] instanceof String)) {
            throw new Error("Expected the field `tenant_id` to be a primitive type in the JSON string but got " + data['tenant_id']);
        }

        return true;
    }


}

AADUser.RequiredProperties = ["object_id", "tenant_id"];

/**
 * the aad user's id
 * @member {String} object_id
 */
AADUser.prototype['object_id'] = undefined;

/**
 * the aad user's tenant id
 * @member {String} tenant_id
 */
AADUser.prototype['tenant_id'] = undefined;






export default AADUser;

