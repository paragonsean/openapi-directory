/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SymbolStatusResponse model module.
 * @module model/SymbolStatusResponse
 * @version v0.1
 */
class SymbolStatusResponse {
    /**
     * Constructs a new <code>SymbolStatusResponse</code>.
     * A response containing information pertaining to a symbol status
     * @alias module:model/SymbolStatusResponse
     * @param appId {String} The application that this symbol belongs to
     * @param status {module:model/SymbolStatusResponse.StatusEnum} Whether the symbol is ignored.
     * @param symbolId {String} The unique id for this symbol (uuid)
     */
    constructor(appId, status, symbolId) { 
        
        SymbolStatusResponse.initialize(this, appId, status, symbolId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, appId, status, symbolId) { 
        obj['app_id'] = appId;
        obj['status'] = status;
        obj['symbol_id'] = symbolId;
    }

    /**
     * Constructs a <code>SymbolStatusResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SymbolStatusResponse} obj Optional instance to populate.
     * @return {module:model/SymbolStatusResponse} The populated <code>SymbolStatusResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SymbolStatusResponse();

            if (data.hasOwnProperty('app_id')) {
                obj['app_id'] = ApiClient.convertToType(data['app_id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('symbol_id')) {
                obj['symbol_id'] = ApiClient.convertToType(data['symbol_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SymbolStatusResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SymbolStatusResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SymbolStatusResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['app_id'] && !(typeof data['app_id'] === 'string' || data['app_id'] instanceof String)) {
            throw new Error("Expected the field `app_id` to be a primitive type in the JSON string but got " + data['app_id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['symbol_id'] && !(typeof data['symbol_id'] === 'string' || data['symbol_id'] instanceof String)) {
            throw new Error("Expected the field `symbol_id` to be a primitive type in the JSON string but got " + data['symbol_id']);
        }

        return true;
    }


}

SymbolStatusResponse.RequiredProperties = ["app_id", "status", "symbol_id"];

/**
 * The application that this symbol belongs to
 * @member {String} app_id
 */
SymbolStatusResponse.prototype['app_id'] = undefined;

/**
 * Whether the symbol is ignored.
 * @member {module:model/SymbolStatusResponse.StatusEnum} status
 */
SymbolStatusResponse.prototype['status'] = undefined;

/**
 * The unique id for this symbol (uuid)
 * @member {String} symbol_id
 */
SymbolStatusResponse.prototype['symbol_id'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
SymbolStatusResponse['StatusEnum'] = {

    /**
     * value: "available"
     * @const
     */
    "available": "available",

    /**
     * value: "ignored"
     * @const
     */
    "ignored": "ignored",

    /**
     * value: "missing"
     * @const
     */
    "missing": "missing"
};



export default SymbolStatusResponse;

