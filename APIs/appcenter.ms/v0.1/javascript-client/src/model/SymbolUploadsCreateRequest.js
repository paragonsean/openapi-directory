/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SymbolUploadsCreateRequest model module.
 * @module model/SymbolUploadsCreateRequest
 * @version v0.1
 */
class SymbolUploadsCreateRequest {
    /**
     * Constructs a new <code>SymbolUploadsCreateRequest</code>.
     * A request containing information pertaining to starting a symbol upload process
     * @alias module:model/SymbolUploadsCreateRequest
     * @param symbolType {module:model/SymbolUploadsCreateRequest.SymbolTypeEnum} The type of the symbol for the current symbol upload
     */
    constructor(symbolType) { 
        
        SymbolUploadsCreateRequest.initialize(this, symbolType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, symbolType) { 
        obj['symbol_type'] = symbolType;
    }

    /**
     * Constructs a <code>SymbolUploadsCreateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SymbolUploadsCreateRequest} obj Optional instance to populate.
     * @return {module:model/SymbolUploadsCreateRequest} The populated <code>SymbolUploadsCreateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SymbolUploadsCreateRequest();

            if (data.hasOwnProperty('build')) {
                obj['build'] = ApiClient.convertToType(data['build'], 'String');
            }
            if (data.hasOwnProperty('client_callback')) {
                obj['client_callback'] = ApiClient.convertToType(data['client_callback'], 'String');
            }
            if (data.hasOwnProperty('file_name')) {
                obj['file_name'] = ApiClient.convertToType(data['file_name'], 'String');
            }
            if (data.hasOwnProperty('symbol_type')) {
                obj['symbol_type'] = ApiClient.convertToType(data['symbol_type'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SymbolUploadsCreateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SymbolUploadsCreateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SymbolUploadsCreateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['build'] && !(typeof data['build'] === 'string' || data['build'] instanceof String)) {
            throw new Error("Expected the field `build` to be a primitive type in the JSON string but got " + data['build']);
        }
        // ensure the json data is a string
        if (data['client_callback'] && !(typeof data['client_callback'] === 'string' || data['client_callback'] instanceof String)) {
            throw new Error("Expected the field `client_callback` to be a primitive type in the JSON string but got " + data['client_callback']);
        }
        // ensure the json data is a string
        if (data['file_name'] && !(typeof data['file_name'] === 'string' || data['file_name'] instanceof String)) {
            throw new Error("Expected the field `file_name` to be a primitive type in the JSON string but got " + data['file_name']);
        }
        // ensure the json data is a string
        if (data['symbol_type'] && !(typeof data['symbol_type'] === 'string' || data['symbol_type'] instanceof String)) {
            throw new Error("Expected the field `symbol_type` to be a primitive type in the JSON string but got " + data['symbol_type']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}

SymbolUploadsCreateRequest.RequiredProperties = ["symbol_type"];

/**
 * The build number. Optional for Apple. Required for Android.
 * @member {String} build
 */
SymbolUploadsCreateRequest.prototype['build'] = undefined;

/**
 * The callback URL that the client can optionally provide to get status updates for the current symbol upload
 * @member {String} client_callback
 */
SymbolUploadsCreateRequest.prototype['client_callback'] = undefined;

/**
 * The file name for the symbol upload
 * @member {String} file_name
 */
SymbolUploadsCreateRequest.prototype['file_name'] = undefined;

/**
 * The type of the symbol for the current symbol upload
 * @member {module:model/SymbolUploadsCreateRequest.SymbolTypeEnum} symbol_type
 */
SymbolUploadsCreateRequest.prototype['symbol_type'] = undefined;

/**
 * The version number. Optional for Apple. Required for Android.
 * @member {String} version
 */
SymbolUploadsCreateRequest.prototype['version'] = undefined;





/**
 * Allowed values for the <code>symbol_type</code> property.
 * @enum {String}
 * @readonly
 */
SymbolUploadsCreateRequest['SymbolTypeEnum'] = {

    /**
     * value: "Apple"
     * @const
     */
    "Apple": "Apple",

    /**
     * value: "JavaScript"
     * @const
     */
    "JavaScript": "JavaScript",

    /**
     * value: "Breakpad"
     * @const
     */
    "Breakpad": "Breakpad",

    /**
     * value: "AndroidProguard"
     * @const
     */
    "AndroidProguard": "AndroidProguard",

    /**
     * value: "UWP"
     * @const
     */
    "UWP": "UWP"
};



export default SymbolUploadsCreateRequest;

