/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FeatureResponse model module.
 * @module model/FeatureResponse
 * @version v0.1
 */
class FeatureResponse {
    /**
     * Constructs a new <code>FeatureResponse</code>.
     * @alias module:model/FeatureResponse
     * @param displayName {String} The friendly name of the feature
     * @param name {String} The unique name of the feature
     * @param state {Number} The state (unset, enabled, disabled) of the feature
     */
    constructor(displayName, name, state) { 
        
        FeatureResponse.initialize(this, displayName, name, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, displayName, name, state) { 
        obj['display_name'] = displayName;
        obj['name'] = name;
        obj['state'] = state;
    }

    /**
     * Constructs a <code>FeatureResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeatureResponse} obj Optional instance to populate.
     * @return {module:model/FeatureResponse} The populated <code>FeatureResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeatureResponse();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('display_name')) {
                obj['display_name'] = ApiClient.convertToType(data['display_name'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'Number');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeatureResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeatureResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FeatureResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['display_name'] && !(typeof data['display_name'] === 'string' || data['display_name'] instanceof String)) {
            throw new Error("Expected the field `display_name` to be a primitive type in the JSON string but got " + data['display_name']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}

FeatureResponse.RequiredProperties = ["display_name", "name", "state"];

/**
 * The creation date of the feature
 * @member {String} created_at
 */
FeatureResponse.prototype['created_at'] = undefined;

/**
 * The description of the feature
 * @member {String} description
 */
FeatureResponse.prototype['description'] = undefined;

/**
 * The friendly name of the feature
 * @member {String} display_name
 */
FeatureResponse.prototype['display_name'] = undefined;

/**
 * The unique name of the feature
 * @member {String} name
 */
FeatureResponse.prototype['name'] = undefined;

/**
 * The state (unset, enabled, disabled) of the feature
 * @member {Number} state
 */
FeatureResponse.prototype['state'] = undefined;

/**
 * The date the feature was last updated at
 * @member {String} updated_at
 */
FeatureResponse.prototype['updated_at'] = undefined;






export default FeatureResponse;

