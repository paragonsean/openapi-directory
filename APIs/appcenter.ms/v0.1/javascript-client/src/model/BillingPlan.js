/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BillingPlan model module.
 * @module model/BillingPlan
 * @version v0.1
 */
class BillingPlan {
    /**
     * Constructs a new <code>BillingPlan</code>.
     * Billing Plan
     * @alias module:model/BillingPlan
     */
    constructor() { 
        
        BillingPlan.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BillingPlan</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BillingPlan} obj Optional instance to populate.
     * @return {module:model/BillingPlan} The populated <code>BillingPlan</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BillingPlan();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], {'String': Object});
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('limits')) {
                obj['limits'] = ApiClient.convertToType(data['limits'], {'String': 'Number'});
            }
            if (data.hasOwnProperty('parentId')) {
                obj['parentId'] = ApiClient.convertToType(data['parentId'], 'String');
            }
            if (data.hasOwnProperty('paymentSource')) {
                obj['paymentSource'] = ApiClient.convertToType(data['paymentSource'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('service')) {
                obj['service'] = ApiClient.convertToType(data['service'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BillingPlan</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BillingPlan</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['parentId'] && !(typeof data['parentId'] === 'string' || data['parentId'] instanceof String)) {
            throw new Error("Expected the field `parentId` to be a primitive type in the JSON string but got " + data['parentId']);
        }
        // ensure the json data is a string
        if (data['paymentSource'] && !(typeof data['paymentSource'] === 'string' || data['paymentSource'] instanceof String)) {
            throw new Error("Expected the field `paymentSource` to be a primitive type in the JSON string but got " + data['paymentSource']);
        }
        // ensure the json data is a string
        if (data['service'] && !(typeof data['service'] === 'string' || data['service'] instanceof String)) {
            throw new Error("Expected the field `service` to be a primitive type in the JSON string but got " + data['service']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * Collection of attribute values.
 * @member {Object.<String, Object>} attributes
 */
BillingPlan.prototype['attributes'] = undefined;

/**
 * The Billing Plan ID
 * @member {String} id
 */
BillingPlan.prototype['id'] = undefined;

/**
 * A collection of named numeric values
 * @member {Object.<String, Number>} limits
 */
BillingPlan.prototype['limits'] = undefined;

/**
 * @member {String} parentId
 */
BillingPlan.prototype['parentId'] = undefined;

/**
 * Service that receives payments for this billing plan.
 * @member {module:model/BillingPlan.PaymentSourceEnum} paymentSource
 */
BillingPlan.prototype['paymentSource'] = undefined;

/**
 * Price of the Billing Plan
 * @member {Number} price
 */
BillingPlan.prototype['price'] = undefined;

/**
 * Name of the service that the plan applies to.
 * @member {module:model/BillingPlan.ServiceEnum} service
 */
BillingPlan.prototype['service'] = undefined;

/**
 * Version of the Billing Plan schema
 * @member {String} version
 */
BillingPlan.prototype['version'] = undefined;





/**
 * Allowed values for the <code>paymentSource</code> property.
 * @enum {String}
 * @readonly
 */
BillingPlan['PaymentSourceEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "AppCenter"
     * @const
     */
    "AppCenter": "AppCenter",

    /**
     * value: "GitHub"
     * @const
     */
    "GitHub": "GitHub",

    /**
     * value: "Xtc"
     * @const
     */
    "Xtc": "Xtc"
};


/**
 * Allowed values for the <code>service</code> property.
 * @enum {String}
 * @readonly
 */
BillingPlan['ServiceEnum'] = {

    /**
     * value: "Build"
     * @const
     */
    "Build": "Build",

    /**
     * value: "Test"
     * @const
     */
    "Test": "Test"
};



export default BillingPlan;

