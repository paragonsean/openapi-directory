/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TestGetTestReport200ResponseDeviceLogsInner from './TestGetTestReport200ResponseDeviceLogsInner';
import TestGetTestReport200ResponseFeaturesInner from './TestGetTestReport200ResponseFeaturesInner';
import TestGetTestReport200ResponseSnapshotFatalErrorsInner from './TestGetTestReport200ResponseSnapshotFatalErrorsInner';
import TestGetTestReport200ResponseStats from './TestGetTestReport200ResponseStats';

/**
 * The TestReport model module.
 * @module model/TestReport
 * @version v0.1
 */
class TestReport {
    /**
     * Constructs a new <code>TestReport</code>.
     * @alias module:model/TestReport
     * @param appUploadId {String} 
     * @param date {String} 
     * @param dateFinished {String} 
     * @param deviceLogs {Array.<module:model/TestGetTestReport200ResponseDeviceLogsInner>} 
     * @param features {Array.<module:model/TestGetTestReport200ResponseFeaturesInner>} 
     * @param finishedDeviceSnapshots {Array.<String>} 
     * @param id {String} 
     * @param platform {String} 
     * @param revision {Number} 
     * @param schemaVersion {Number} 
     * @param stats {module:model/TestGetTestReport200ResponseStats} 
     * @param testType {String} 
     */
    constructor(appUploadId, date, dateFinished, deviceLogs, features, finishedDeviceSnapshots, id, platform, revision, schemaVersion, stats, testType) { 
        
        TestReport.initialize(this, appUploadId, date, dateFinished, deviceLogs, features, finishedDeviceSnapshots, id, platform, revision, schemaVersion, stats, testType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, appUploadId, date, dateFinished, deviceLogs, features, finishedDeviceSnapshots, id, platform, revision, schemaVersion, stats, testType) { 
        obj['app_upload_id'] = appUploadId;
        obj['date'] = date;
        obj['date_finished'] = dateFinished;
        obj['device_logs'] = deviceLogs;
        obj['features'] = features;
        obj['finished_device_snapshots'] = finishedDeviceSnapshots;
        obj['id'] = id;
        obj['platform'] = platform;
        obj['revision'] = revision;
        obj['schema_version'] = schemaVersion;
        obj['stats'] = stats;
        obj['testType'] = testType;
    }

    /**
     * Constructs a <code>TestReport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestReport} obj Optional instance to populate.
     * @return {module:model/TestReport} The populated <code>TestReport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestReport();

            if (data.hasOwnProperty('app_upload_id')) {
                obj['app_upload_id'] = ApiClient.convertToType(data['app_upload_id'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
            if (data.hasOwnProperty('date_finished')) {
                obj['date_finished'] = ApiClient.convertToType(data['date_finished'], 'String');
            }
            if (data.hasOwnProperty('device_logs')) {
                obj['device_logs'] = ApiClient.convertToType(data['device_logs'], [TestGetTestReport200ResponseDeviceLogsInner]);
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('features')) {
                obj['features'] = ApiClient.convertToType(data['features'], [TestGetTestReport200ResponseFeaturesInner]);
            }
            if (data.hasOwnProperty('finished_device_snapshots')) {
                obj['finished_device_snapshots'] = ApiClient.convertToType(data['finished_device_snapshots'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], 'String');
            }
            if (data.hasOwnProperty('revision')) {
                obj['revision'] = ApiClient.convertToType(data['revision'], 'Number');
            }
            if (data.hasOwnProperty('schema_version')) {
                obj['schema_version'] = ApiClient.convertToType(data['schema_version'], 'Number');
            }
            if (data.hasOwnProperty('snapshot_fatal_errors')) {
                obj['snapshot_fatal_errors'] = ApiClient.convertToType(data['snapshot_fatal_errors'], [TestGetTestReport200ResponseSnapshotFatalErrorsInner]);
            }
            if (data.hasOwnProperty('stats')) {
                obj['stats'] = TestGetTestReport200ResponseStats.constructFromObject(data['stats']);
            }
            if (data.hasOwnProperty('testType')) {
                obj['testType'] = ApiClient.convertToType(data['testType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestReport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestReport</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TestReport.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['app_upload_id'] && !(typeof data['app_upload_id'] === 'string' || data['app_upload_id'] instanceof String)) {
            throw new Error("Expected the field `app_upload_id` to be a primitive type in the JSON string but got " + data['app_upload_id']);
        }
        // ensure the json data is a string
        if (data['date'] && !(typeof data['date'] === 'string' || data['date'] instanceof String)) {
            throw new Error("Expected the field `date` to be a primitive type in the JSON string but got " + data['date']);
        }
        // ensure the json data is a string
        if (data['date_finished'] && !(typeof data['date_finished'] === 'string' || data['date_finished'] instanceof String)) {
            throw new Error("Expected the field `date_finished` to be a primitive type in the JSON string but got " + data['date_finished']);
        }
        if (data['device_logs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['device_logs'])) {
                throw new Error("Expected the field `device_logs` to be an array in the JSON data but got " + data['device_logs']);
            }
            // validate the optional field `device_logs` (array)
            for (const item of data['device_logs']) {
                TestGetTestReport200ResponseDeviceLogsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['errorMessage'] && !(typeof data['errorMessage'] === 'string' || data['errorMessage'] instanceof String)) {
            throw new Error("Expected the field `errorMessage` to be a primitive type in the JSON string but got " + data['errorMessage']);
        }
        if (data['features']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['features'])) {
                throw new Error("Expected the field `features` to be an array in the JSON data but got " + data['features']);
            }
            // validate the optional field `features` (array)
            for (const item of data['features']) {
                TestGetTestReport200ResponseFeaturesInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['finished_device_snapshots'])) {
            throw new Error("Expected the field `finished_device_snapshots` to be an array in the JSON data but got " + data['finished_device_snapshots']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['platform'] && !(typeof data['platform'] === 'string' || data['platform'] instanceof String)) {
            throw new Error("Expected the field `platform` to be a primitive type in the JSON string but got " + data['platform']);
        }
        if (data['snapshot_fatal_errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['snapshot_fatal_errors'])) {
                throw new Error("Expected the field `snapshot_fatal_errors` to be an array in the JSON data but got " + data['snapshot_fatal_errors']);
            }
            // validate the optional field `snapshot_fatal_errors` (array)
            for (const item of data['snapshot_fatal_errors']) {
                TestGetTestReport200ResponseSnapshotFatalErrorsInner.validateJSON(item);
            };
        }
        // validate the optional field `stats`
        if (data['stats']) { // data not null
          TestGetTestReport200ResponseStats.validateJSON(data['stats']);
        }
        // ensure the json data is a string
        if (data['testType'] && !(typeof data['testType'] === 'string' || data['testType'] instanceof String)) {
            throw new Error("Expected the field `testType` to be a primitive type in the JSON string but got " + data['testType']);
        }

        return true;
    }


}

TestReport.RequiredProperties = ["app_upload_id", "date", "date_finished", "device_logs", "features", "finished_device_snapshots", "id", "platform", "revision", "schema_version", "stats", "testType"];

/**
 * @member {String} app_upload_id
 */
TestReport.prototype['app_upload_id'] = undefined;

/**
 * @member {String} date
 */
TestReport.prototype['date'] = undefined;

/**
 * @member {String} date_finished
 */
TestReport.prototype['date_finished'] = undefined;

/**
 * @member {Array.<module:model/TestGetTestReport200ResponseDeviceLogsInner>} device_logs
 */
TestReport.prototype['device_logs'] = undefined;

/**
 * @member {String} errorMessage
 */
TestReport.prototype['errorMessage'] = undefined;

/**
 * @member {Array.<module:model/TestGetTestReport200ResponseFeaturesInner>} features
 */
TestReport.prototype['features'] = undefined;

/**
 * @member {Array.<String>} finished_device_snapshots
 */
TestReport.prototype['finished_device_snapshots'] = undefined;

/**
 * @member {String} id
 */
TestReport.prototype['id'] = undefined;

/**
 * @member {String} platform
 */
TestReport.prototype['platform'] = undefined;

/**
 * @member {Number} revision
 */
TestReport.prototype['revision'] = undefined;

/**
 * @member {Number} schema_version
 */
TestReport.prototype['schema_version'] = undefined;

/**
 * @member {Array.<module:model/TestGetTestReport200ResponseSnapshotFatalErrorsInner>} snapshot_fatal_errors
 */
TestReport.prototype['snapshot_fatal_errors'] = undefined;

/**
 * @member {module:model/TestGetTestReport200ResponseStats} stats
 */
TestReport.prototype['stats'] = undefined;

/**
 * @member {String} testType
 */
TestReport.prototype['testType'] = undefined;






export default TestReport;

