/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerAppExtensionTargetsInner from './BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerAppExtensionTargetsInner';
import BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner from './BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner';

/**
 * The XcodeSchemeContainer model module.
 * @module model/XcodeSchemeContainer
 * @version v0.1
 */
class XcodeSchemeContainer {
    /**
     * Constructs a new <code>XcodeSchemeContainer</code>.
     * @alias module:model/XcodeSchemeContainer
     * @param path {String} Path to project
     * @param sharedSchemes {Array.<module:model/BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner>} Project schemes
     */
    constructor(path, sharedSchemes) { 
        
        XcodeSchemeContainer.initialize(this, path, sharedSchemes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, path, sharedSchemes) { 
        obj['path'] = path;
        obj['sharedSchemes'] = sharedSchemes;
    }

    /**
     * Constructs a <code>XcodeSchemeContainer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/XcodeSchemeContainer} obj Optional instance to populate.
     * @return {module:model/XcodeSchemeContainer} The populated <code>XcodeSchemeContainer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new XcodeSchemeContainer();

            if (data.hasOwnProperty('appExtensionTargets')) {
                obj['appExtensionTargets'] = ApiClient.convertToType(data['appExtensionTargets'], [BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerAppExtensionTargetsInner]);
            }
            if (data.hasOwnProperty('cartfilePath')) {
                obj['cartfilePath'] = ApiClient.convertToType(data['cartfilePath'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('podfilePath')) {
                obj['podfilePath'] = ApiClient.convertToType(data['podfilePath'], 'String');
            }
            if (data.hasOwnProperty('sharedSchemes')) {
                obj['sharedSchemes'] = ApiClient.convertToType(data['sharedSchemes'], [BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner]);
            }
            if (data.hasOwnProperty('workspaceProjectPaths')) {
                obj['workspaceProjectPaths'] = ApiClient.convertToType(data['workspaceProjectPaths'], 'String');
            }
            if (data.hasOwnProperty('xcodeProjectSha')) {
                obj['xcodeProjectSha'] = ApiClient.convertToType(data['xcodeProjectSha'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>XcodeSchemeContainer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>XcodeSchemeContainer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of XcodeSchemeContainer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['appExtensionTargets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['appExtensionTargets'])) {
                throw new Error("Expected the field `appExtensionTargets` to be an array in the JSON data but got " + data['appExtensionTargets']);
            }
            // validate the optional field `appExtensionTargets` (array)
            for (const item of data['appExtensionTargets']) {
                BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerAppExtensionTargetsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['cartfilePath'] && !(typeof data['cartfilePath'] === 'string' || data['cartfilePath'] instanceof String)) {
            throw new Error("Expected the field `cartfilePath` to be a primitive type in the JSON string but got " + data['cartfilePath']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['podfilePath'] && !(typeof data['podfilePath'] === 'string' || data['podfilePath'] instanceof String)) {
            throw new Error("Expected the field `podfilePath` to be a primitive type in the JSON string but got " + data['podfilePath']);
        }
        if (data['sharedSchemes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sharedSchemes'])) {
                throw new Error("Expected the field `sharedSchemes` to be an array in the JSON data but got " + data['sharedSchemes']);
            }
            // validate the optional field `sharedSchemes` (array)
            for (const item of data['sharedSchemes']) {
                BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['workspaceProjectPaths'] && !(typeof data['workspaceProjectPaths'] === 'string' || data['workspaceProjectPaths'] instanceof String)) {
            throw new Error("Expected the field `workspaceProjectPaths` to be a primitive type in the JSON string but got " + data['workspaceProjectPaths']);
        }
        // ensure the json data is a string
        if (data['xcodeProjectSha'] && !(typeof data['xcodeProjectSha'] === 'string' || data['xcodeProjectSha'] instanceof String)) {
            throw new Error("Expected the field `xcodeProjectSha` to be a primitive type in the JSON string but got " + data['xcodeProjectSha']);
        }

        return true;
    }


}

XcodeSchemeContainer.RequiredProperties = ["path", "sharedSchemes"];

/**
 * Information regarding project app extensions, if present
 * @member {Array.<module:model/BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerAppExtensionTargetsInner>} appExtensionTargets
 */
XcodeSchemeContainer.prototype['appExtensionTargets'] = undefined;

/**
 * Path to Carthage file, if present
 * @member {String} cartfilePath
 */
XcodeSchemeContainer.prototype['cartfilePath'] = undefined;

/**
 * Path to project
 * @member {String} path
 */
XcodeSchemeContainer.prototype['path'] = undefined;

/**
 * Path to CocoaPods file, if present
 * @member {String} podfilePath
 */
XcodeSchemeContainer.prototype['podfilePath'] = undefined;

/**
 * Project schemes
 * @member {Array.<module:model/BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner>} sharedSchemes
 */
XcodeSchemeContainer.prototype['sharedSchemes'] = undefined;

/**
 * Related projects paths for xcworkspace
 * @member {String} workspaceProjectPaths
 */
XcodeSchemeContainer.prototype['workspaceProjectPaths'] = undefined;

/**
 * repo object Id of the pbxproject
 * @member {String} xcodeProjectSha
 */
XcodeSchemeContainer.prototype['xcodeProjectSha'] = undefined;






export default XcodeSchemeContainer;

