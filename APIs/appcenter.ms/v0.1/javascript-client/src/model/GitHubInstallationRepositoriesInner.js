/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GitHubInstallationRepositoriesInner model module.
 * @module model/GitHubInstallationRepositoriesInner
 * @version v0.1
 */
class GitHubInstallationRepositoriesInner {
    /**
     * Constructs a new <code>GitHubInstallationRepositoriesInner</code>.
     * The repository which is accessiable by GitHub App Installation
     * @alias module:model/GitHubInstallationRepositoriesInner
     */
    constructor() { 
        
        GitHubInstallationRepositoriesInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GitHubInstallationRepositoriesInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GitHubInstallationRepositoriesInner} obj Optional instance to populate.
     * @return {module:model/GitHubInstallationRepositoriesInner} The populated <code>GitHubInstallationRepositoriesInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GitHubInstallationRepositoriesInner();

            if (data.hasOwnProperty('clone_url')) {
                obj['clone_url'] = ApiClient.convertToType(data['clone_url'], 'String');
            }
            if (data.hasOwnProperty('default_branch')) {
                obj['default_branch'] = ApiClient.convertToType(data['default_branch'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('fork')) {
                obj['fork'] = ApiClient.convertToType(data['fork'], 'Boolean');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GitHubInstallationRepositoriesInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GitHubInstallationRepositoriesInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clone_url'] && !(typeof data['clone_url'] === 'string' || data['clone_url'] instanceof String)) {
            throw new Error("Expected the field `clone_url` to be a primitive type in the JSON string but got " + data['clone_url']);
        }
        // ensure the json data is a string
        if (data['default_branch'] && !(typeof data['default_branch'] === 'string' || data['default_branch'] instanceof String)) {
            throw new Error("Expected the field `default_branch` to be a primitive type in the JSON string but got " + data['default_branch']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}



/**
 * URL used to clone the repository
 * @member {String} clone_url
 */
GitHubInstallationRepositoriesInner.prototype['clone_url'] = undefined;

/**
 * The default branch for the repo
 * @member {String} default_branch
 */
GitHubInstallationRepositoriesInner.prototype['default_branch'] = undefined;

/**
 * The discription of repository
 * @member {String} description
 */
GitHubInstallationRepositoriesInner.prototype['description'] = undefined;

/**
 * Whether the repository is a fork
 * @member {Boolean} fork
 */
GitHubInstallationRepositoriesInner.prototype['fork'] = undefined;

/**
 * The language in the repository
 * @member {String} language
 */
GitHubInstallationRepositoriesInner.prototype['language'] = undefined;

/**
 * The repository name
 * @member {String} name
 */
GitHubInstallationRepositoriesInner.prototype['name'] = undefined;

/**
 * The repository updated time
 * @member {String} updated_at
 */
GitHubInstallationRepositoriesInner.prototype['updated_at'] = undefined;






export default GitHubInstallationRepositoriesInner;

