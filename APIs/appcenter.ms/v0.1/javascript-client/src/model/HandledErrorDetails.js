/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HandledErrorDetails model module.
 * @module model/HandledErrorDetails
 * @version v0.1
 */
class HandledErrorDetails {
    /**
     * Constructs a new <code>HandledErrorDetails</code>.
     * @alias module:model/HandledErrorDetails
     */
    constructor() { 
        
        HandledErrorDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HandledErrorDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HandledErrorDetails} obj Optional instance to populate.
     * @return {module:model/HandledErrorDetails} The populated <code>HandledErrorDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HandledErrorDetails();

            if (data.hasOwnProperty('appLaunchTimestamp')) {
                obj['appLaunchTimestamp'] = ApiClient.convertToType(data['appLaunchTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('carrierName')) {
                obj['carrierName'] = ApiClient.convertToType(data['carrierName'], 'String');
            }
            if (data.hasOwnProperty('jailbreak')) {
                obj['jailbreak'] = ApiClient.convertToType(data['jailbreak'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('reasonFrames')) {
                obj['reasonFrames'] = ApiClient.convertToType(data['reasonFrames'], [Object]);
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('deviceName')) {
                obj['deviceName'] = ApiClient.convertToType(data['deviceName'], 'String');
            }
            if (data.hasOwnProperty('errorId')) {
                obj['errorId'] = ApiClient.convertToType(data['errorId'], 'String');
            }
            if (data.hasOwnProperty('hasAttachments')) {
                obj['hasAttachments'] = ApiClient.convertToType(data['hasAttachments'], 'Boolean');
            }
            if (data.hasOwnProperty('hasBreadcrumbs')) {
                obj['hasBreadcrumbs'] = ApiClient.convertToType(data['hasBreadcrumbs'], 'Boolean');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('osType')) {
                obj['osType'] = ApiClient.convertToType(data['osType'], 'String');
            }
            if (data.hasOwnProperty('osVersion')) {
                obj['osVersion'] = ApiClient.convertToType(data['osVersion'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HandledErrorDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HandledErrorDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['carrierName'] && !(typeof data['carrierName'] === 'string' || data['carrierName'] instanceof String)) {
            throw new Error("Expected the field `carrierName` to be a primitive type in the JSON string but got " + data['carrierName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['reasonFrames']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['reasonFrames'])) {
                throw new Error("Expected the field `reasonFrames` to be an array in the JSON data but got " + data['reasonFrames']);
            }
            // validate the optional field `reasonFrames` (array)
            for (const item of data['reasonFrames']) {
                Object.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['deviceName'] && !(typeof data['deviceName'] === 'string' || data['deviceName'] instanceof String)) {
            throw new Error("Expected the field `deviceName` to be a primitive type in the JSON string but got " + data['deviceName']);
        }
        // ensure the json data is a string
        if (data['errorId'] && !(typeof data['errorId'] === 'string' || data['errorId'] instanceof String)) {
            throw new Error("Expected the field `errorId` to be a primitive type in the JSON string but got " + data['errorId']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['osType'] && !(typeof data['osType'] === 'string' || data['osType'] instanceof String)) {
            throw new Error("Expected the field `osType` to be a primitive type in the JSON string but got " + data['osType']);
        }
        // ensure the json data is a string
        if (data['osVersion'] && !(typeof data['osVersion'] === 'string' || data['osVersion'] instanceof String)) {
            throw new Error("Expected the field `osVersion` to be a primitive type in the JSON string but got " + data['osVersion']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * Timestamp when the app was launched, example: '2017-03-13T18:05:42Z'. 
 * @member {Date} appLaunchTimestamp
 */
HandledErrorDetails.prototype['appLaunchTimestamp'] = undefined;

/**
 * Carrier name (for mobile devices). 
 * @member {String} carrierName
 */
HandledErrorDetails.prototype['carrierName'] = undefined;

/**
 * Flag indicating if device is jailbroken 
 * @member {Boolean} jailbreak
 */
HandledErrorDetails.prototype['jailbreak'] = undefined;

/**
 * @member {String} name
 */
HandledErrorDetails.prototype['name'] = undefined;

/**
 * @member {Object.<String, String>} properties
 */
HandledErrorDetails.prototype['properties'] = undefined;

/**
 * @member {Array.<Object>} reasonFrames
 */
HandledErrorDetails.prototype['reasonFrames'] = undefined;

/**
 * @member {String} country
 */
HandledErrorDetails.prototype['country'] = undefined;

/**
 * @member {String} deviceName
 */
HandledErrorDetails.prototype['deviceName'] = undefined;

/**
 * @member {String} errorId
 */
HandledErrorDetails.prototype['errorId'] = undefined;

/**
 * @member {Boolean} hasAttachments
 */
HandledErrorDetails.prototype['hasAttachments'] = undefined;

/**
 * @member {Boolean} hasBreadcrumbs
 */
HandledErrorDetails.prototype['hasBreadcrumbs'] = undefined;

/**
 * @member {String} language
 */
HandledErrorDetails.prototype['language'] = undefined;

/**
 * @member {String} osType
 */
HandledErrorDetails.prototype['osType'] = undefined;

/**
 * @member {String} osVersion
 */
HandledErrorDetails.prototype['osVersion'] = undefined;

/**
 * @member {Date} timestamp
 */
HandledErrorDetails.prototype['timestamp'] = undefined;

/**
 * @member {String} userId
 */
HandledErrorDetails.prototype['userId'] = undefined;






export default HandledErrorDetails;

