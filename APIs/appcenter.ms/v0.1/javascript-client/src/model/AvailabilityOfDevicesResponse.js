/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AvailabilityOfDevicesResponseIpads from './AvailabilityOfDevicesResponseIpads';

/**
 * The AvailabilityOfDevicesResponse model module.
 * @module model/AvailabilityOfDevicesResponse
 * @version v0.1
 */
class AvailabilityOfDevicesResponse {
    /**
     * Constructs a new <code>AvailabilityOfDevicesResponse</code>.
     * The current device availability (registered, available and maxmimum) for iPhones, iPads, iPods and Watches from Apple Developer Portal
     * @alias module:model/AvailabilityOfDevicesResponse
     * @param ipads {module:model/AvailabilityOfDevicesResponseIpads} 
     * @param iphones {module:model/AvailabilityOfDevicesResponseIpads} 
     * @param ipods {module:model/AvailabilityOfDevicesResponseIpads} 
     * @param watches {module:model/AvailabilityOfDevicesResponseIpads} 
     */
    constructor(ipads, iphones, ipods, watches) { 
        
        AvailabilityOfDevicesResponse.initialize(this, ipads, iphones, ipods, watches);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ipads, iphones, ipods, watches) { 
        obj['ipads'] = ipads;
        obj['iphones'] = iphones;
        obj['ipods'] = ipods;
        obj['watches'] = watches;
    }

    /**
     * Constructs a <code>AvailabilityOfDevicesResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AvailabilityOfDevicesResponse} obj Optional instance to populate.
     * @return {module:model/AvailabilityOfDevicesResponse} The populated <code>AvailabilityOfDevicesResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AvailabilityOfDevicesResponse();

            if (data.hasOwnProperty('ipads')) {
                obj['ipads'] = AvailabilityOfDevicesResponseIpads.constructFromObject(data['ipads']);
            }
            if (data.hasOwnProperty('iphones')) {
                obj['iphones'] = AvailabilityOfDevicesResponseIpads.constructFromObject(data['iphones']);
            }
            if (data.hasOwnProperty('ipods')) {
                obj['ipods'] = AvailabilityOfDevicesResponseIpads.constructFromObject(data['ipods']);
            }
            if (data.hasOwnProperty('watches')) {
                obj['watches'] = AvailabilityOfDevicesResponseIpads.constructFromObject(data['watches']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AvailabilityOfDevicesResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AvailabilityOfDevicesResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AvailabilityOfDevicesResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ipads`
        if (data['ipads']) { // data not null
          AvailabilityOfDevicesResponseIpads.validateJSON(data['ipads']);
        }
        // validate the optional field `iphones`
        if (data['iphones']) { // data not null
          AvailabilityOfDevicesResponseIpads.validateJSON(data['iphones']);
        }
        // validate the optional field `ipods`
        if (data['ipods']) { // data not null
          AvailabilityOfDevicesResponseIpads.validateJSON(data['ipods']);
        }
        // validate the optional field `watches`
        if (data['watches']) { // data not null
          AvailabilityOfDevicesResponseIpads.validateJSON(data['watches']);
        }

        return true;
    }


}

AvailabilityOfDevicesResponse.RequiredProperties = ["ipads", "iphones", "ipods", "watches"];

/**
 * @member {module:model/AvailabilityOfDevicesResponseIpads} ipads
 */
AvailabilityOfDevicesResponse.prototype['ipads'] = undefined;

/**
 * @member {module:model/AvailabilityOfDevicesResponseIpads} iphones
 */
AvailabilityOfDevicesResponse.prototype['iphones'] = undefined;

/**
 * @member {module:model/AvailabilityOfDevicesResponseIpads} ipods
 */
AvailabilityOfDevicesResponse.prototype['ipods'] = undefined;

/**
 * @member {module:model/AvailabilityOfDevicesResponseIpads} watches
 */
AvailabilityOfDevicesResponse.prototype['watches'] = undefined;






export default AvailabilityOfDevicesResponse;

