/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VSTSAccountProjectsInner from './VSTSAccountProjectsInner';
import VSTSAccountUser from './VSTSAccountUser';

/**
 * The VSTSAccount model module.
 * @module model/VSTSAccount
 * @version v0.1
 */
class VSTSAccount {
    /**
     * Constructs a new <code>VSTSAccount</code>.
     * VSTS account with projects list and user info
     * @alias module:model/VSTSAccount
     */
    constructor() { 
        
        VSTSAccount.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VSTSAccount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VSTSAccount} obj Optional instance to populate.
     * @return {module:model/VSTSAccount} The populated <code>VSTSAccount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VSTSAccount();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('accountName')) {
                obj['accountName'] = ApiClient.convertToType(data['accountName'], 'String');
            }
            if (data.hasOwnProperty('accountStatus')) {
                obj['accountStatus'] = ApiClient.convertToType(data['accountStatus'], 'String');
            }
            if (data.hasOwnProperty('accountType')) {
                obj['accountType'] = ApiClient.convertToType(data['accountType'], 'String');
            }
            if (data.hasOwnProperty('accountUri')) {
                obj['accountUri'] = ApiClient.convertToType(data['accountUri'], 'String');
            }
            if (data.hasOwnProperty('projects')) {
                obj['projects'] = ApiClient.convertToType(data['projects'], [VSTSAccountProjectsInner]);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = VSTSAccountUser.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VSTSAccount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VSTSAccount</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['accountName'] && !(typeof data['accountName'] === 'string' || data['accountName'] instanceof String)) {
            throw new Error("Expected the field `accountName` to be a primitive type in the JSON string but got " + data['accountName']);
        }
        // ensure the json data is a string
        if (data['accountStatus'] && !(typeof data['accountStatus'] === 'string' || data['accountStatus'] instanceof String)) {
            throw new Error("Expected the field `accountStatus` to be a primitive type in the JSON string but got " + data['accountStatus']);
        }
        // ensure the json data is a string
        if (data['accountType'] && !(typeof data['accountType'] === 'string' || data['accountType'] instanceof String)) {
            throw new Error("Expected the field `accountType` to be a primitive type in the JSON string but got " + data['accountType']);
        }
        // ensure the json data is a string
        if (data['accountUri'] && !(typeof data['accountUri'] === 'string' || data['accountUri'] instanceof String)) {
            throw new Error("Expected the field `accountUri` to be a primitive type in the JSON string but got " + data['accountUri']);
        }
        if (data['projects']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['projects'])) {
                throw new Error("Expected the field `projects` to be an array in the JSON data but got " + data['projects']);
            }
            // validate the optional field `projects` (array)
            for (const item of data['projects']) {
                VSTSAccountProjectsInner.validateJSON(item);
            };
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          VSTSAccountUser.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * Account id
 * @member {String} accountId
 */
VSTSAccount.prototype['accountId'] = undefined;

/**
 * Account name
 * @member {String} accountName
 */
VSTSAccount.prototype['accountName'] = undefined;

/**
 * Account status
 * @member {String} accountStatus
 */
VSTSAccount.prototype['accountStatus'] = undefined;

/**
 * Account type
 * @member {String} accountType
 */
VSTSAccount.prototype['accountType'] = undefined;

/**
 * Account uri
 * @member {String} accountUri
 */
VSTSAccount.prototype['accountUri'] = undefined;

/**
 * Account projects
 * @member {Array.<module:model/VSTSAccountProjectsInner>} projects
 */
VSTSAccount.prototype['projects'] = undefined;

/**
 * @member {module:model/VSTSAccountUser} user
 */
VSTSAccount.prototype['user'] = undefined;






export default VSTSAccount;

