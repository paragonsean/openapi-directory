/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataSubjectRightOperation model module.
 * @module model/DataSubjectRightOperation
 * @version v0.1
 */
class DataSubjectRightOperation {
    /**
     * Constructs a new <code>DataSubjectRightOperation</code>.
     * @alias module:model/DataSubjectRightOperation
     * @param context {String} JSON object decribing what to delete (TODO - make separate definition?)
     * @param operationId {String} Unique operation identifier
     * @param participant {String} Participant to execute the response
     * @param requestId {String} Unique request identifier
     * @param requestType {module:model/DataSubjectRightOperation.RequestTypeEnum} Request type
     * @param status {module:model/DataSubjectRightOperation.StatusEnum} Operation status
     */
    constructor(context, operationId, participant, requestId, requestType, status) { 
        
        DataSubjectRightOperation.initialize(this, context, operationId, participant, requestId, requestType, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, context, operationId, participant, requestId, requestType, status) { 
        obj['context'] = context;
        obj['operationId'] = operationId;
        obj['participant'] = participant;
        obj['requestId'] = requestId;
        obj['requestType'] = requestType;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>DataSubjectRightOperation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataSubjectRightOperation} obj Optional instance to populate.
     * @return {module:model/DataSubjectRightOperation} The populated <code>DataSubjectRightOperation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataSubjectRightOperation();

            if (data.hasOwnProperty('appId')) {
                obj['appId'] = ApiClient.convertToType(data['appId'], 'String');
            }
            if (data.hasOwnProperty('context')) {
                obj['context'] = ApiClient.convertToType(data['context'], 'String');
            }
            if (data.hasOwnProperty('operationId')) {
                obj['operationId'] = ApiClient.convertToType(data['operationId'], 'String');
            }
            if (data.hasOwnProperty('participant')) {
                obj['participant'] = ApiClient.convertToType(data['participant'], 'String');
            }
            if (data.hasOwnProperty('participantData')) {
                obj['participantData'] = ApiClient.convertToType(data['participantData'], 'String');
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('requestType')) {
                obj['requestType'] = ApiClient.convertToType(data['requestType'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataSubjectRightOperation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataSubjectRightOperation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DataSubjectRightOperation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['appId'] && !(typeof data['appId'] === 'string' || data['appId'] instanceof String)) {
            throw new Error("Expected the field `appId` to be a primitive type in the JSON string but got " + data['appId']);
        }
        // ensure the json data is a string
        if (data['context'] && !(typeof data['context'] === 'string' || data['context'] instanceof String)) {
            throw new Error("Expected the field `context` to be a primitive type in the JSON string but got " + data['context']);
        }
        // ensure the json data is a string
        if (data['operationId'] && !(typeof data['operationId'] === 'string' || data['operationId'] instanceof String)) {
            throw new Error("Expected the field `operationId` to be a primitive type in the JSON string but got " + data['operationId']);
        }
        // ensure the json data is a string
        if (data['participant'] && !(typeof data['participant'] === 'string' || data['participant'] instanceof String)) {
            throw new Error("Expected the field `participant` to be a primitive type in the JSON string but got " + data['participant']);
        }
        // ensure the json data is a string
        if (data['participantData'] && !(typeof data['participantData'] === 'string' || data['participantData'] instanceof String)) {
            throw new Error("Expected the field `participantData` to be a primitive type in the JSON string but got " + data['participantData']);
        }
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }
        // ensure the json data is a string
        if (data['requestType'] && !(typeof data['requestType'] === 'string' || data['requestType'] instanceof String)) {
            throw new Error("Expected the field `requestType` to be a primitive type in the JSON string but got " + data['requestType']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

DataSubjectRightOperation.RequiredProperties = ["context", "operationId", "participant", "requestId", "requestType", "status"];

/**
 * Application identifier if applicable
 * @member {String} appId
 */
DataSubjectRightOperation.prototype['appId'] = undefined;

/**
 * JSON object decribing what to delete (TODO - make separate definition?)
 * @member {String} context
 */
DataSubjectRightOperation.prototype['context'] = undefined;

/**
 * Unique operation identifier
 * @member {String} operationId
 */
DataSubjectRightOperation.prototype['operationId'] = undefined;

/**
 * Participant to execute the response
 * @member {String} participant
 */
DataSubjectRightOperation.prototype['participant'] = undefined;

/**
 * String field to be used by participant for any intermediate statuses or data they need to save
 * @member {String} participantData
 */
DataSubjectRightOperation.prototype['participantData'] = undefined;

/**
 * Unique request identifier
 * @member {String} requestId
 */
DataSubjectRightOperation.prototype['requestId'] = undefined;

/**
 * Request type
 * @member {module:model/DataSubjectRightOperation.RequestTypeEnum} requestType
 */
DataSubjectRightOperation.prototype['requestType'] = undefined;

/**
 * Operation status
 * @member {module:model/DataSubjectRightOperation.StatusEnum} status
 */
DataSubjectRightOperation.prototype['status'] = undefined;





/**
 * Allowed values for the <code>requestType</code> property.
 * @enum {String}
 * @readonly
 */
DataSubjectRightOperation['RequestTypeEnum'] = {

    /**
     * value: "Unsupported"
     * @const
     */
    "Unsupported": "Unsupported",

    /**
     * value: "Delete"
     * @const
     */
    "Delete": "Delete",

    /**
     * value: "Purge"
     * @const
     */
    "Purge": "Purge",

    /**
     * value: "UndoDelete"
     * @const
     */
    "UndoDelete": "UndoDelete",

    /**
     * value: "Scheduled"
     * @const
     */
    "Scheduled": "Scheduled",

    /**
     * value: "AppDelete"
     * @const
     */
    "AppDelete": "AppDelete",

    /**
     * value: "AppPurge"
     * @const
     */
    "AppPurge": "AppPurge",

    /**
     * value: "AppUndoDelete"
     * @const
     */
    "AppUndoDelete": "AppUndoDelete",

    /**
     * value: "Export"
     * @const
     */
    "Export": "Export",

    /**
     * value: "CustomerAccountDelete"
     * @const
     */
    "CustomerAccountDelete": "CustomerAccountDelete",

    /**
     * value: "CustomerAccountExport"
     * @const
     */
    "CustomerAccountExport": "CustomerAccountExport",

    /**
     * value: "CustomerUserDelete"
     * @const
     */
    "CustomerUserDelete": "CustomerUserDelete",

    /**
     * value: "CustomerUserExport"
     * @const
     */
    "CustomerUserExport": "CustomerUserExport"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
DataSubjectRightOperation['StatusEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Created"
     * @const
     */
    "Created": "Created",

    /**
     * value: "Queued"
     * @const
     */
    "Queued": "Queued",

    /**
     * value: "InProgress"
     * @const
     */
    "InProgress": "InProgress",

    /**
     * value: "Completed"
     * @const
     */
    "Completed": "Completed",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};



export default DataSubjectRightOperation;

