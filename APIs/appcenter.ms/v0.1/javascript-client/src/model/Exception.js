/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExceptionFramesInner from './ExceptionFramesInner';

/**
 * The Exception model module.
 * @module model/Exception
 * @version v0.1
 */
class Exception {
    /**
     * Constructs a new <code>Exception</code>.
     * a exception
     * @alias module:model/Exception
     * @param frames {Array.<module:model/ExceptionFramesInner>} frames of the excetpion
     */
    constructor(frames) { 
        
        Exception.initialize(this, frames);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, frames) { 
        obj['frames'] = frames;
    }

    /**
     * Constructs a <code>Exception</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Exception} obj Optional instance to populate.
     * @return {module:model/Exception} The populated <code>Exception</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Exception();

            if (data.hasOwnProperty('frames')) {
                obj['frames'] = ApiClient.convertToType(data['frames'], [ExceptionFramesInner]);
            }
            if (data.hasOwnProperty('inner_exceptions')) {
                obj['inner_exceptions'] = ApiClient.convertToType(data['inner_exceptions'], [Exception]);
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('relevant')) {
                obj['relevant'] = ApiClient.convertToType(data['relevant'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Exception</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Exception</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Exception.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['frames']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['frames'])) {
                throw new Error("Expected the field `frames` to be an array in the JSON data but got " + data['frames']);
            }
            // validate the optional field `frames` (array)
            for (const item of data['frames']) {
                ExceptionFramesInner.validateJSON(item);
            };
        }
        if (data['inner_exceptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inner_exceptions'])) {
                throw new Error("Expected the field `inner_exceptions` to be an array in the JSON data but got " + data['inner_exceptions']);
            }
            // validate the optional field `inner_exceptions` (array)
            for (const item of data['inner_exceptions']) {
                Exception.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['platform'] && !(typeof data['platform'] === 'string' || data['platform'] instanceof String)) {
            throw new Error("Expected the field `platform` to be a primitive type in the JSON string but got " + data['platform']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Exception.RequiredProperties = ["frames"];

/**
 * frames of the excetpion
 * @member {Array.<module:model/ExceptionFramesInner>} frames
 */
Exception.prototype['frames'] = undefined;

/**
 * @member {Array.<module:model/Exception>} inner_exceptions
 */
Exception.prototype['inner_exceptions'] = undefined;

/**
 * SDK/Platform this thread is beeing generated from
 * @member {module:model/Exception.PlatformEnum} platform
 */
Exception.prototype['platform'] = undefined;

/**
 * Reason of the exception
 * @member {String} reason
 */
Exception.prototype['reason'] = undefined;

/**
 * relevant exception (crashed)
 * @member {Boolean} relevant
 */
Exception.prototype['relevant'] = undefined;

/**
 * Type of the exception (NSSomethingException, NullPointerException)
 * @member {String} type
 */
Exception.prototype['type'] = undefined;





/**
 * Allowed values for the <code>platform</code> property.
 * @enum {String}
 * @readonly
 */
Exception['PlatformEnum'] = {

    /**
     * value: "ios"
     * @const
     */
    "ios": "ios",

    /**
     * value: "android"
     * @const
     */
    "android": "android",

    /**
     * value: "xamarin"
     * @const
     */
    "xamarin": "xamarin",

    /**
     * value: "react-native"
     * @const
     */
    "react-native": "react-native",

    /**
     * value: "ndk"
     * @const
     */
    "ndk": "ndk",

    /**
     * value: "unity"
     * @const
     */
    "unity": "unity",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};



export default Exception;

