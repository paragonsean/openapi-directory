/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MalwareScanResultPayload model module.
 * @module model/MalwareScanResultPayload
 * @version v0.1
 */
class MalwareScanResultPayload {
    /**
     * Constructs a new <code>MalwareScanResultPayload</code>.
     * Malware scan result from Malware Scan service
     * @alias module:model/MalwareScanResultPayload
     * @param requestId {String} Scan request identifier
     * @param result {module:model/MalwareScanResultPayload.ResultEnum} Scan result
     */
    constructor(requestId, result) { 
        
        MalwareScanResultPayload.initialize(this, requestId, result);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, requestId, result) { 
        obj['requestId'] = requestId;
        obj['result'] = result;
    }

    /**
     * Constructs a <code>MalwareScanResultPayload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MalwareScanResultPayload} obj Optional instance to populate.
     * @return {module:model/MalwareScanResultPayload} The populated <code>MalwareScanResultPayload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MalwareScanResultPayload();

            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MalwareScanResultPayload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MalwareScanResultPayload</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MalwareScanResultPayload.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }
        // ensure the json data is a string
        if (data['result'] && !(typeof data['result'] === 'string' || data['result'] instanceof String)) {
            throw new Error("Expected the field `result` to be a primitive type in the JSON string but got " + data['result']);
        }

        return true;
    }


}

MalwareScanResultPayload.RequiredProperties = ["requestId", "result"];

/**
 * Scan request identifier
 * @member {String} requestId
 */
MalwareScanResultPayload.prototype['requestId'] = undefined;

/**
 * Scan result
 * @member {module:model/MalwareScanResultPayload.ResultEnum} result
 */
MalwareScanResultPayload.prototype['result'] = undefined;





/**
 * Allowed values for the <code>result</code> property.
 * @enum {String}
 * @readonly
 */
MalwareScanResultPayload['ResultEnum'] = {

    /**
     * value: "clean"
     * @const
     */
    "clean": "clean",

    /**
     * value: "infected"
     * @const
     */
    "infected": "infected",

    /**
     * value: "error"
     * @const
     */
    "error": "error"
};



export default MalwareScanResultPayload;

