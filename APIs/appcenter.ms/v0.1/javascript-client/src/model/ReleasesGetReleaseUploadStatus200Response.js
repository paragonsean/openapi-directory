/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReleasesGetReleaseUploadStatus200Response model module.
 * @module model/ReleasesGetReleaseUploadStatus200Response
 * @version v0.1
 */
class ReleasesGetReleaseUploadStatus200Response {
    /**
     * Constructs a new <code>ReleasesGetReleaseUploadStatus200Response</code>.
     * @alias module:model/ReleasesGetReleaseUploadStatus200Response
     * @param id {String} The ID for the upload.
     * @param uploadStatus {module:model/ReleasesGetReleaseUploadStatus200Response.UploadStatusEnum} The current upload status.
     */
    constructor(id, uploadStatus) { 
        
        ReleasesGetReleaseUploadStatus200Response.initialize(this, id, uploadStatus);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, uploadStatus) { 
        obj['id'] = id;
        obj['upload_status'] = uploadStatus;
    }

    /**
     * Constructs a <code>ReleasesGetReleaseUploadStatus200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReleasesGetReleaseUploadStatus200Response} obj Optional instance to populate.
     * @return {module:model/ReleasesGetReleaseUploadStatus200Response} The populated <code>ReleasesGetReleaseUploadStatus200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReleasesGetReleaseUploadStatus200Response();

            if (data.hasOwnProperty('error_details')) {
                obj['error_details'] = ApiClient.convertToType(data['error_details'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('release_distinct_id')) {
                obj['release_distinct_id'] = ApiClient.convertToType(data['release_distinct_id'], 'Number');
            }
            if (data.hasOwnProperty('release_url')) {
                obj['release_url'] = ApiClient.convertToType(data['release_url'], Object);
            }
            if (data.hasOwnProperty('upload_status')) {
                obj['upload_status'] = ApiClient.convertToType(data['upload_status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReleasesGetReleaseUploadStatus200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReleasesGetReleaseUploadStatus200Response</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReleasesGetReleaseUploadStatus200Response.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['error_details'] && !(typeof data['error_details'] === 'string' || data['error_details'] instanceof String)) {
            throw new Error("Expected the field `error_details` to be a primitive type in the JSON string but got " + data['error_details']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['upload_status'] && !(typeof data['upload_status'] === 'string' || data['upload_status'] instanceof String)) {
            throw new Error("Expected the field `upload_status` to be a primitive type in the JSON string but got " + data['upload_status']);
        }

        return true;
    }


}

ReleasesGetReleaseUploadStatus200Response.RequiredProperties = ["id", "upload_status"];

/**
 * Details describing what went wrong processing the upload. Will only be set if status = 'error'.
 * @member {String} error_details
 */
ReleasesGetReleaseUploadStatus200Response.prototype['error_details'] = undefined;

/**
 * The ID for the upload.
 * @member {String} id
 */
ReleasesGetReleaseUploadStatus200Response.prototype['id'] = undefined;

/**
 * The distinct ID of the release. Will only be set when the status = 'readyToBePublished'.
 * @member {Number} release_distinct_id
 */
ReleasesGetReleaseUploadStatus200Response.prototype['release_distinct_id'] = undefined;

/**
 * The URL of the release. Will only be set when the status = 'readyToBePublished'.
 * @member {Object} release_url
 */
ReleasesGetReleaseUploadStatus200Response.prototype['release_url'] = undefined;

/**
 * The current upload status.
 * @member {module:model/ReleasesGetReleaseUploadStatus200Response.UploadStatusEnum} upload_status
 */
ReleasesGetReleaseUploadStatus200Response.prototype['upload_status'] = undefined;





/**
 * Allowed values for the <code>upload_status</code> property.
 * @enum {String}
 * @readonly
 */
ReleasesGetReleaseUploadStatus200Response['UploadStatusEnum'] = {

    /**
     * value: "uploadStarted"
     * @const
     */
    "uploadStarted": "uploadStarted",

    /**
     * value: "uploadFinished"
     * @const
     */
    "uploadFinished": "uploadFinished",

    /**
     * value: "readyToBePublished"
     * @const
     */
    "readyToBePublished": "readyToBePublished",

    /**
     * value: "malwareDetected"
     * @const
     */
    "malwareDetected": "malwareDetected",

    /**
     * value: "error"
     * @const
     */
    "error": "error"
};



export default ReleasesGetReleaseUploadStatus200Response;

