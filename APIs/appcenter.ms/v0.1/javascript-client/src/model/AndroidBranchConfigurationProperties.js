/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AndroidBranchConfigurationProperties model module.
 * @module model/AndroidBranchConfigurationProperties
 * @version v0.1
 */
class AndroidBranchConfigurationProperties {
    /**
     * Constructs a new <code>AndroidBranchConfigurationProperties</code>.
     * Build configuration for Android projects
     * @alias module:model/AndroidBranchConfigurationProperties
     */
    constructor() { 
        
        AndroidBranchConfigurationProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['runTests'] = true;
    }

    /**
     * Constructs a <code>AndroidBranchConfigurationProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AndroidBranchConfigurationProperties} obj Optional instance to populate.
     * @return {module:model/AndroidBranchConfigurationProperties} The populated <code>AndroidBranchConfigurationProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AndroidBranchConfigurationProperties();

            if (data.hasOwnProperty('automaticSigning')) {
                obj['automaticSigning'] = ApiClient.convertToType(data['automaticSigning'], 'Boolean');
            }
            if (data.hasOwnProperty('buildVariant')) {
                obj['buildVariant'] = ApiClient.convertToType(data['buildVariant'], 'String');
            }
            if (data.hasOwnProperty('gradleWrapperPath')) {
                obj['gradleWrapperPath'] = ApiClient.convertToType(data['gradleWrapperPath'], 'String');
            }
            if (data.hasOwnProperty('isRoot')) {
                obj['isRoot'] = ApiClient.convertToType(data['isRoot'], 'Boolean');
            }
            if (data.hasOwnProperty('keyAlias')) {
                obj['keyAlias'] = ApiClient.convertToType(data['keyAlias'], 'String');
            }
            if (data.hasOwnProperty('keyPassword')) {
                obj['keyPassword'] = ApiClient.convertToType(data['keyPassword'], 'String');
            }
            if (data.hasOwnProperty('keystoreEncoded')) {
                obj['keystoreEncoded'] = ApiClient.convertToType(data['keystoreEncoded'], 'String');
            }
            if (data.hasOwnProperty('keystoreFilename')) {
                obj['keystoreFilename'] = ApiClient.convertToType(data['keystoreFilename'], 'String');
            }
            if (data.hasOwnProperty('keystorePassword')) {
                obj['keystorePassword'] = ApiClient.convertToType(data['keystorePassword'], 'String');
            }
            if (data.hasOwnProperty('module')) {
                obj['module'] = ApiClient.convertToType(data['module'], 'String');
            }
            if (data.hasOwnProperty('runLint')) {
                obj['runLint'] = ApiClient.convertToType(data['runLint'], 'Boolean');
            }
            if (data.hasOwnProperty('runTests')) {
                obj['runTests'] = ApiClient.convertToType(data['runTests'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AndroidBranchConfigurationProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AndroidBranchConfigurationProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['buildVariant'] && !(typeof data['buildVariant'] === 'string' || data['buildVariant'] instanceof String)) {
            throw new Error("Expected the field `buildVariant` to be a primitive type in the JSON string but got " + data['buildVariant']);
        }
        // ensure the json data is a string
        if (data['gradleWrapperPath'] && !(typeof data['gradleWrapperPath'] === 'string' || data['gradleWrapperPath'] instanceof String)) {
            throw new Error("Expected the field `gradleWrapperPath` to be a primitive type in the JSON string but got " + data['gradleWrapperPath']);
        }
        // ensure the json data is a string
        if (data['keyAlias'] && !(typeof data['keyAlias'] === 'string' || data['keyAlias'] instanceof String)) {
            throw new Error("Expected the field `keyAlias` to be a primitive type in the JSON string but got " + data['keyAlias']);
        }
        // ensure the json data is a string
        if (data['keyPassword'] && !(typeof data['keyPassword'] === 'string' || data['keyPassword'] instanceof String)) {
            throw new Error("Expected the field `keyPassword` to be a primitive type in the JSON string but got " + data['keyPassword']);
        }
        // ensure the json data is a string
        if (data['keystoreEncoded'] && !(typeof data['keystoreEncoded'] === 'string' || data['keystoreEncoded'] instanceof String)) {
            throw new Error("Expected the field `keystoreEncoded` to be a primitive type in the JSON string but got " + data['keystoreEncoded']);
        }
        // ensure the json data is a string
        if (data['keystoreFilename'] && !(typeof data['keystoreFilename'] === 'string' || data['keystoreFilename'] instanceof String)) {
            throw new Error("Expected the field `keystoreFilename` to be a primitive type in the JSON string but got " + data['keystoreFilename']);
        }
        // ensure the json data is a string
        if (data['keystorePassword'] && !(typeof data['keystorePassword'] === 'string' || data['keystorePassword'] instanceof String)) {
            throw new Error("Expected the field `keystorePassword` to be a primitive type in the JSON string but got " + data['keystorePassword']);
        }
        // ensure the json data is a string
        if (data['module'] && !(typeof data['module'] === 'string' || data['module'] instanceof String)) {
            throw new Error("Expected the field `module` to be a primitive type in the JSON string but got " + data['module']);
        }

        return true;
    }


}



/**
 * Whether to apply automatic signing or not
 * @member {Boolean} automaticSigning
 */
AndroidBranchConfigurationProperties.prototype['automaticSigning'] = undefined;

/**
 * The Android build variant to build
 * @member {String} buildVariant
 */
AndroidBranchConfigurationProperties.prototype['buildVariant'] = undefined;

/**
 * Path to the Gradle wrapper script
 * @member {String} gradleWrapperPath
 */
AndroidBranchConfigurationProperties.prototype['gradleWrapperPath'] = undefined;

/**
 * Whether it is the root module or not
 * @member {Boolean} isRoot
 */
AndroidBranchConfigurationProperties.prototype['isRoot'] = undefined;

/**
 * The key alias
 * @member {String} keyAlias
 */
AndroidBranchConfigurationProperties.prototype['keyAlias'] = undefined;

/**
 * The key password
 * @member {String} keyPassword
 */
AndroidBranchConfigurationProperties.prototype['keyPassword'] = undefined;

/**
 * The keystore encoded value
 * @member {String} keystoreEncoded
 */
AndroidBranchConfigurationProperties.prototype['keystoreEncoded'] = undefined;

/**
 * The name of the keystore file
 * @member {String} keystoreFilename
 */
AndroidBranchConfigurationProperties.prototype['keystoreFilename'] = undefined;

/**
 * The password of the keystore
 * @member {String} keystorePassword
 */
AndroidBranchConfigurationProperties.prototype['keystorePassword'] = undefined;

/**
 * The Gradle module to build
 * @member {String} module
 */
AndroidBranchConfigurationProperties.prototype['module'] = undefined;

/**
 * Whether to run lint checks during the build (default)
 * @member {Boolean} runLint
 */
AndroidBranchConfigurationProperties.prototype['runLint'] = undefined;

/**
 * Whether to run unit tests during the build (default)
 * @member {Boolean} runTests
 * @default true
 */
AndroidBranchConfigurationProperties.prototype['runTests'] = true;






export default AndroidBranchConfigurationProperties;

