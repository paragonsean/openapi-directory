/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ErrorAttachment model module.
 * @module model/ErrorAttachment
 * @version v0.1
 */
class ErrorAttachment {
    /**
     * Constructs a new <code>ErrorAttachment</code>.
     * @alias module:model/ErrorAttachment
     */
    constructor() { 
        
        ErrorAttachment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ErrorAttachment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ErrorAttachment} obj Optional instance to populate.
     * @return {module:model/ErrorAttachment} The populated <code>ErrorAttachment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ErrorAttachment();

            if (data.hasOwnProperty('appId')) {
                obj['appId'] = ApiClient.convertToType(data['appId'], 'String');
            }
            if (data.hasOwnProperty('attachmentId')) {
                obj['attachmentId'] = ApiClient.convertToType(data['attachmentId'], 'String');
            }
            if (data.hasOwnProperty('blobLocation')) {
                obj['blobLocation'] = ApiClient.convertToType(data['blobLocation'], 'String');
            }
            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
            }
            if (data.hasOwnProperty('crashId')) {
                obj['crashId'] = ApiClient.convertToType(data['crashId'], 'String');
            }
            if (data.hasOwnProperty('createdTime')) {
                obj['createdTime'] = ApiClient.convertToType(data['createdTime'], 'Date');
            }
            if (data.hasOwnProperty('fileName')) {
                obj['fileName'] = ApiClient.convertToType(data['fileName'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ErrorAttachment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ErrorAttachment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['appId'] && !(typeof data['appId'] === 'string' || data['appId'] instanceof String)) {
            throw new Error("Expected the field `appId` to be a primitive type in the JSON string but got " + data['appId']);
        }
        // ensure the json data is a string
        if (data['attachmentId'] && !(typeof data['attachmentId'] === 'string' || data['attachmentId'] instanceof String)) {
            throw new Error("Expected the field `attachmentId` to be a primitive type in the JSON string but got " + data['attachmentId']);
        }
        // ensure the json data is a string
        if (data['blobLocation'] && !(typeof data['blobLocation'] === 'string' || data['blobLocation'] instanceof String)) {
            throw new Error("Expected the field `blobLocation` to be a primitive type in the JSON string but got " + data['blobLocation']);
        }
        // ensure the json data is a string
        if (data['contentType'] && !(typeof data['contentType'] === 'string' || data['contentType'] instanceof String)) {
            throw new Error("Expected the field `contentType` to be a primitive type in the JSON string but got " + data['contentType']);
        }
        // ensure the json data is a string
        if (data['crashId'] && !(typeof data['crashId'] === 'string' || data['crashId'] instanceof String)) {
            throw new Error("Expected the field `crashId` to be a primitive type in the JSON string but got " + data['crashId']);
        }
        // ensure the json data is a string
        if (data['fileName'] && !(typeof data['fileName'] === 'string' || data['fileName'] instanceof String)) {
            throw new Error("Expected the field `fileName` to be a primitive type in the JSON string but got " + data['fileName']);
        }

        return true;
    }


}



/**
 * @member {String} appId
 */
ErrorAttachment.prototype['appId'] = undefined;

/**
 * @member {String} attachmentId
 */
ErrorAttachment.prototype['attachmentId'] = undefined;

/**
 * @member {String} blobLocation
 */
ErrorAttachment.prototype['blobLocation'] = undefined;

/**
 * @member {String} contentType
 */
ErrorAttachment.prototype['contentType'] = undefined;

/**
 * @member {String} crashId
 */
ErrorAttachment.prototype['crashId'] = undefined;

/**
 * @member {Date} createdTime
 */
ErrorAttachment.prototype['createdTime'] = undefined;

/**
 * @member {String} fileName
 */
ErrorAttachment.prototype['fileName'] = undefined;

/**
 * @member {Number} size
 */
ErrorAttachment.prototype['size'] = undefined;






export default ErrorAttachment;

