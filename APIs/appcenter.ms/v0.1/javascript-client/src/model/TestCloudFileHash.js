/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TestCloudFileHash model module.
 * @module model/TestCloudFileHash
 * @version v0.1
 */
class TestCloudFileHash {
    /**
     * Constructs a new <code>TestCloudFileHash</code>.
     * Hash, type, path and byte range of a file that is required in test run
     * @alias module:model/TestCloudFileHash
     * @param checksum {String} SHA256 hash of the file
     * @param fileType {module:model/TestCloudFileHash.FileTypeEnum} Type of the file
     * @param relativePath {String} Relative path of the file
     */
    constructor(checksum, fileType, relativePath) { 
        
        TestCloudFileHash.initialize(this, checksum, fileType, relativePath);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, checksum, fileType, relativePath) { 
        obj['checksum'] = checksum;
        obj['file_type'] = fileType;
        obj['relative_path'] = relativePath;
    }

    /**
     * Constructs a <code>TestCloudFileHash</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestCloudFileHash} obj Optional instance to populate.
     * @return {module:model/TestCloudFileHash} The populated <code>TestCloudFileHash</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestCloudFileHash();

            if (data.hasOwnProperty('byte_range')) {
                obj['byte_range'] = ApiClient.convertToType(data['byte_range'], 'String');
            }
            if (data.hasOwnProperty('checksum')) {
                obj['checksum'] = ApiClient.convertToType(data['checksum'], 'String');
            }
            if (data.hasOwnProperty('file_type')) {
                obj['file_type'] = ApiClient.convertToType(data['file_type'], 'String');
            }
            if (data.hasOwnProperty('relative_path')) {
                obj['relative_path'] = ApiClient.convertToType(data['relative_path'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestCloudFileHash</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestCloudFileHash</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TestCloudFileHash.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['byte_range'] && !(typeof data['byte_range'] === 'string' || data['byte_range'] instanceof String)) {
            throw new Error("Expected the field `byte_range` to be a primitive type in the JSON string but got " + data['byte_range']);
        }
        // ensure the json data is a string
        if (data['checksum'] && !(typeof data['checksum'] === 'string' || data['checksum'] instanceof String)) {
            throw new Error("Expected the field `checksum` to be a primitive type in the JSON string but got " + data['checksum']);
        }
        // ensure the json data is a string
        if (data['file_type'] && !(typeof data['file_type'] === 'string' || data['file_type'] instanceof String)) {
            throw new Error("Expected the field `file_type` to be a primitive type in the JSON string but got " + data['file_type']);
        }
        // ensure the json data is a string
        if (data['relative_path'] && !(typeof data['relative_path'] === 'string' || data['relative_path'] instanceof String)) {
            throw new Error("Expected the field `relative_path` to be a primitive type in the JSON string but got " + data['relative_path']);
        }

        return true;
    }


}

TestCloudFileHash.RequiredProperties = ["checksum", "file_type", "relative_path"];

/**
 * Range of bytes required to verify ownership of the file
 * @member {String} byte_range
 */
TestCloudFileHash.prototype['byte_range'] = undefined;

/**
 * SHA256 hash of the file
 * @member {String} checksum
 */
TestCloudFileHash.prototype['checksum'] = undefined;

/**
 * Type of the file
 * @member {module:model/TestCloudFileHash.FileTypeEnum} file_type
 */
TestCloudFileHash.prototype['file_type'] = undefined;

/**
 * Relative path of the file
 * @member {String} relative_path
 */
TestCloudFileHash.prototype['relative_path'] = undefined;





/**
 * Allowed values for the <code>file_type</code> property.
 * @enum {String}
 * @readonly
 */
TestCloudFileHash['FileTypeEnum'] = {

    /**
     * value: "dsym-file"
     * @const
     */
    "dsym-file": "dsym-file",

    /**
     * value: "app-file"
     * @const
     */
    "app-file": "app-file",

    /**
     * value: "test-file"
     * @const
     */
    "test-file": "test-file"
};



export default TestCloudFileHash;

