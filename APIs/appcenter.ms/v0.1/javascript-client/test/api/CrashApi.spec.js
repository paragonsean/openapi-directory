/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AppCenterClient);
  }
}(this, function(expect, AppCenterClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AppCenterClient.CrashApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CrashApi', function() {
    describe('crashGroupsGet', function() {
      it('should call crashGroupsGet successfully', function(done) {
        //uncomment below and update the code to test crashGroupsGet
        //instance.crashGroupsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('crashGroupsGetStacktrace', function() {
      it('should call crashGroupsGetStacktrace successfully', function(done) {
        //uncomment below and update the code to test crashGroupsGetStacktrace
        //instance.crashGroupsGetStacktrace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('crashGroupsList', function() {
      it('should call crashGroupsList successfully', function(done) {
        //uncomment below and update the code to test crashGroupsList
        //instance.crashGroupsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('crashGroupsUpdate', function() {
      it('should call crashGroupsUpdate successfully', function(done) {
        //uncomment below and update the code to test crashGroupsUpdate
        //instance.crashGroupsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('crashesDelete', function() {
      it('should call crashesDelete successfully', function(done) {
        //uncomment below and update the code to test crashesDelete
        //instance.crashesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('crashesGet', function() {
      it('should call crashesGet successfully', function(done) {
        //uncomment below and update the code to test crashesGet
        //instance.crashesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('crashesGetAppCrashesInfo', function() {
      it('should call crashesGetAppCrashesInfo successfully', function(done) {
        //uncomment below and update the code to test crashesGetAppCrashesInfo
        //instance.crashesGetAppCrashesInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('crashesGetAppVersions', function() {
      it('should call crashesGetAppVersions successfully', function(done) {
        //uncomment below and update the code to test crashesGetAppVersions
        //instance.crashesGetAppVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('crashesGetCrashAttachmentLocation', function() {
      it('should call crashesGetCrashAttachmentLocation successfully', function(done) {
        //uncomment below and update the code to test crashesGetCrashAttachmentLocation
        //instance.crashesGetCrashAttachmentLocation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('crashesGetCrashTextAttachmentContent', function() {
      it('should call crashesGetCrashTextAttachmentContent successfully', function(done) {
        //uncomment below and update the code to test crashesGetCrashTextAttachmentContent
        //instance.crashesGetCrashTextAttachmentContent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('crashesGetNativeCrash', function() {
      it('should call crashesGetNativeCrash successfully', function(done) {
        //uncomment below and update the code to test crashesGetNativeCrash
        //instance.crashesGetNativeCrash(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('crashesGetNativeCrashDownload', function() {
      it('should call crashesGetNativeCrashDownload successfully', function(done) {
        //uncomment below and update the code to test crashesGetNativeCrashDownload
        //instance.crashesGetNativeCrashDownload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('crashesGetRawCrashLocation', function() {
      it('should call crashesGetRawCrashLocation successfully', function(done) {
        //uncomment below and update the code to test crashesGetRawCrashLocation
        //instance.crashesGetRawCrashLocation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('crashesGetStacktrace', function() {
      it('should call crashesGetStacktrace successfully', function(done) {
        //uncomment below and update the code to test crashesGetStacktrace
        //instance.crashesGetStacktrace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('crashesList', function() {
      it('should call crashesList successfully', function(done) {
        //uncomment below and update the code to test crashesList
        //instance.crashesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('crashesListAttachments', function() {
      it('should call crashesListAttachments successfully', function(done) {
        //uncomment below and update the code to test crashesListAttachments
        //instance.crashesListAttachments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('missingSymbolGroupsGet', function() {
      it('should call missingSymbolGroupsGet successfully', function(done) {
        //uncomment below and update the code to test missingSymbolGroupsGet
        //instance.missingSymbolGroupsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('missingSymbolGroupsInfo', function() {
      it('should call missingSymbolGroupsInfo successfully', function(done) {
        //uncomment below and update the code to test missingSymbolGroupsInfo
        //instance.missingSymbolGroupsInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('missingSymbolGroupsList', function() {
      it('should call missingSymbolGroupsList successfully', function(done) {
        //uncomment below and update the code to test missingSymbolGroupsList
        //instance.missingSymbolGroupsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('symbolUploadsComplete', function() {
      it('should call symbolUploadsComplete successfully', function(done) {
        //uncomment below and update the code to test symbolUploadsComplete
        //instance.symbolUploadsComplete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('symbolUploadsCreate', function() {
      it('should call symbolUploadsCreate successfully', function(done) {
        //uncomment below and update the code to test symbolUploadsCreate
        //instance.symbolUploadsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('symbolUploadsDelete', function() {
      it('should call symbolUploadsDelete successfully', function(done) {
        //uncomment below and update the code to test symbolUploadsDelete
        //instance.symbolUploadsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('symbolUploadsGet', function() {
      it('should call symbolUploadsGet successfully', function(done) {
        //uncomment below and update the code to test symbolUploadsGet
        //instance.symbolUploadsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('symbolUploadsGetLocation', function() {
      it('should call symbolUploadsGetLocation successfully', function(done) {
        //uncomment below and update the code to test symbolUploadsGetLocation
        //instance.symbolUploadsGetLocation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('symbolUploadsList', function() {
      it('should call symbolUploadsList successfully', function(done) {
        //uncomment below and update the code to test symbolUploadsList
        //instance.symbolUploadsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('symbolsGet', function() {
      it('should call symbolsGet successfully', function(done) {
        //uncomment below and update the code to test symbolsGet
        //instance.symbolsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('symbolsGetLocation', function() {
      it('should call symbolsGetLocation successfully', function(done) {
        //uncomment below and update the code to test symbolsGetLocation
        //instance.symbolsGetLocation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('symbolsGetStatus', function() {
      it('should call symbolsGetStatus successfully', function(done) {
        //uncomment below and update the code to test symbolsGetStatus
        //instance.symbolsGetStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('symbolsIgnore', function() {
      it('should call symbolsIgnore successfully', function(done) {
        //uncomment below and update the code to test symbolsIgnore
        //instance.symbolsIgnore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('symbolsList', function() {
      it('should call symbolsList successfully', function(done) {
        //uncomment below and update the code to test symbolsList
        //instance.symbolsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
