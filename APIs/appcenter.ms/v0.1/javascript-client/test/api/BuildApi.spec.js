/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AppCenterClient);
  }
}(this, function(expect, AppCenterClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AppCenterClient.BuildApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BuildApi', function() {
    describe('branchConfigurationsCreate', function() {
      it('should call branchConfigurationsCreate successfully', function(done) {
        //uncomment below and update the code to test branchConfigurationsCreate
        //instance.branchConfigurationsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('branchConfigurationsDelete', function() {
      it('should call branchConfigurationsDelete successfully', function(done) {
        //uncomment below and update the code to test branchConfigurationsDelete
        //instance.branchConfigurationsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('branchConfigurationsGet', function() {
      it('should call branchConfigurationsGet successfully', function(done) {
        //uncomment below and update the code to test branchConfigurationsGet
        //instance.branchConfigurationsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('branchConfigurationsUpdate', function() {
      it('should call branchConfigurationsUpdate successfully', function(done) {
        //uncomment below and update the code to test branchConfigurationsUpdate
        //instance.branchConfigurationsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('buildConfigurationsGet', function() {
      it('should call buildConfigurationsGet successfully', function(done) {
        //uncomment below and update the code to test buildConfigurationsGet
        //instance.buildConfigurationsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('buildsCreate', function() {
      it('should call buildsCreate successfully', function(done) {
        //uncomment below and update the code to test buildsCreate
        //instance.buildsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('buildsDistribute', function() {
      it('should call buildsDistribute successfully', function(done) {
        //uncomment below and update the code to test buildsDistribute
        //instance.buildsDistribute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('buildsGet', function() {
      it('should call buildsGet successfully', function(done) {
        //uncomment below and update the code to test buildsGet
        //instance.buildsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('buildsGetDownloadUri', function() {
      it('should call buildsGetDownloadUri successfully', function(done) {
        //uncomment below and update the code to test buildsGetDownloadUri
        //instance.buildsGetDownloadUri(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('buildsGetLog', function() {
      it('should call buildsGetLog successfully', function(done) {
        //uncomment below and update the code to test buildsGetLog
        //instance.buildsGetLog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('buildsGetStatusByAppId', function() {
      it('should call buildsGetStatusByAppId successfully', function(done) {
        //uncomment below and update the code to test buildsGetStatusByAppId
        //instance.buildsGetStatusByAppId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('buildsListBranches', function() {
      it('should call buildsListBranches successfully', function(done) {
        //uncomment below and update the code to test buildsListBranches
        //instance.buildsListBranches(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('buildsListByBranch', function() {
      it('should call buildsListByBranch successfully', function(done) {
        //uncomment below and update the code to test buildsListByBranch
        //instance.buildsListByBranch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('buildsListToolsetProjects', function() {
      it('should call buildsListToolsetProjects successfully', function(done) {
        //uncomment below and update the code to test buildsListToolsetProjects
        //instance.buildsListToolsetProjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('buildsListToolsets', function() {
      it('should call buildsListToolsets successfully', function(done) {
        //uncomment below and update the code to test buildsListToolsets
        //instance.buildsListToolsets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('buildsListXamarinSDKBundles', function() {
      it('should call buildsListXamarinSDKBundles successfully', function(done) {
        //uncomment below and update the code to test buildsListXamarinSDKBundles
        //instance.buildsListXamarinSDKBundles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('buildsListXcodeVersions', function() {
      it('should call buildsListXcodeVersions successfully', function(done) {
        //uncomment below and update the code to test buildsListXcodeVersions
        //instance.buildsListXcodeVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('buildsUpdate', function() {
      it('should call buildsUpdate successfully', function(done) {
        //uncomment below and update the code to test buildsUpdate
        //instance.buildsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('buildsWebhook', function() {
      it('should call buildsWebhook successfully', function(done) {
        //uncomment below and update the code to test buildsWebhook
        //instance.buildsWebhook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('commitsListByShaList', function() {
      it('should call commitsListByShaList successfully', function(done) {
        //uncomment below and update the code to test commitsListByShaList
        //instance.commitsListByShaList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fileAssetsCreate', function() {
      it('should call fileAssetsCreate successfully', function(done) {
        //uncomment below and update the code to test fileAssetsCreate
        //instance.fileAssetsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesList', function() {
      it('should call repositoriesList successfully', function(done) {
        //uncomment below and update the code to test repositoriesList
        //instance.repositoriesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoryConfigurationsCreateOrUpdate', function() {
      it('should call repositoryConfigurationsCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test repositoryConfigurationsCreateOrUpdate
        //instance.repositoryConfigurationsCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoryConfigurationsDelete', function() {
      it('should call repositoryConfigurationsDelete successfully', function(done) {
        //uncomment below and update the code to test repositoryConfigurationsDelete
        //instance.repositoryConfigurationsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoryConfigurationsList', function() {
      it('should call repositoryConfigurationsList successfully', function(done) {
        //uncomment below and update the code to test repositoryConfigurationsList
        //instance.repositoryConfigurationsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
