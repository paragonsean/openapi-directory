# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ignore_ignore_path import IgnoreIgnorePath
from openapi_server import util


class Ignore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ignore_path: IgnoreIgnorePath=None):
        """Ignore - a model defined in OpenAPI

        :param ignore_path: The ignore_path of this Ignore.
        """
        self.openapi_types = {
            'ignore_path': IgnoreIgnorePath
        }

        self.attribute_map = {
            'ignore_path': 'ignorePath'
        }

        self._ignore_path = ignore_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Ignore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Ignore of this Ignore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ignore_path(self):
        """Gets the ignore_path of this Ignore.


        :return: The ignore_path of this Ignore.
        :rtype: IgnoreIgnorePath
        """
        return self._ignore_path

    @ignore_path.setter
    def ignore_path(self, ignore_path):
        """Sets the ignore_path of this Ignore.


        :param ignore_path: The ignore_path of this Ignore.
        :type ignore_path: IgnoreIgnorePath
        """
        if ignore_path is None:
            raise ValueError("Invalid value for `ignore_path`, must not be `None`")

        self._ignore_path = ignore_path
