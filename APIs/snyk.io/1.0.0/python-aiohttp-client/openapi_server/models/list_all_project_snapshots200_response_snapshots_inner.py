# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_all_project_snapshots200_response_snapshots_inner_issue_counts import ListAllProjectSnapshots200ResponseSnapshotsInnerIssueCounts
from openapi_server import util


class ListAllProjectSnapshots200ResponseSnapshotsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: str=None, id: str=None, image_base_image: str=None, image_id: str=None, image_platform: str=None, image_tag: str=None, issue_counts: ListAllProjectSnapshots200ResponseSnapshotsInnerIssueCounts=None, method: str=None, total_dependencies: float=None):
        """ListAllProjectSnapshots200ResponseSnapshotsInner - a model defined in OpenAPI

        :param created: The created of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        :param id: The id of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        :param image_base_image: The image_base_image of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        :param image_id: The image_id of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        :param image_platform: The image_platform of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        :param image_tag: The image_tag of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        :param issue_counts: The issue_counts of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        :param method: The method of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        :param total_dependencies: The total_dependencies of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        """
        self.openapi_types = {
            'created': str,
            'id': str,
            'image_base_image': str,
            'image_id': str,
            'image_platform': str,
            'image_tag': str,
            'issue_counts': ListAllProjectSnapshots200ResponseSnapshotsInnerIssueCounts,
            'method': str,
            'total_dependencies': float
        }

        self.attribute_map = {
            'created': 'created',
            'id': 'id',
            'image_base_image': 'imageBaseImage',
            'image_id': 'imageId',
            'image_platform': 'imagePlatform',
            'image_tag': 'imageTag',
            'issue_counts': 'issueCounts',
            'method': 'method',
            'total_dependencies': 'totalDependencies'
        }

        self._created = created
        self._id = id
        self._image_base_image = image_base_image
        self._image_id = image_id
        self._image_platform = image_platform
        self._image_tag = image_tag
        self._issue_counts = issue_counts
        self._method = method
        self._total_dependencies = total_dependencies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListAllProjectSnapshots200ResponseSnapshotsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The List_all_project_snapshots_200_response_snapshots_inner of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this ListAllProjectSnapshots200ResponseSnapshotsInner.

        The date that the snapshot was taken

        :return: The created of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ListAllProjectSnapshots200ResponseSnapshotsInner.

        The date that the snapshot was taken

        :param created: The created of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        :type created: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def id(self):
        """Gets the id of this ListAllProjectSnapshots200ResponseSnapshotsInner.

        The snapshot identifier

        :return: The id of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ListAllProjectSnapshots200ResponseSnapshotsInner.

        The snapshot identifier

        :param id: The id of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image_base_image(self):
        """Gets the image_base_image of this ListAllProjectSnapshots200ResponseSnapshotsInner.


        :return: The image_base_image of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        :rtype: str
        """
        return self._image_base_image

    @image_base_image.setter
    def image_base_image(self, image_base_image):
        """Sets the image_base_image of this ListAllProjectSnapshots200ResponseSnapshotsInner.


        :param image_base_image: The image_base_image of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        :type image_base_image: str
        """

        self._image_base_image = image_base_image

    @property
    def image_id(self):
        """Gets the image_id of this ListAllProjectSnapshots200ResponseSnapshotsInner.


        :return: The image_id of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this ListAllProjectSnapshots200ResponseSnapshotsInner.


        :param image_id: The image_id of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        :type image_id: str
        """

        self._image_id = image_id

    @property
    def image_platform(self):
        """Gets the image_platform of this ListAllProjectSnapshots200ResponseSnapshotsInner.


        :return: The image_platform of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        :rtype: str
        """
        return self._image_platform

    @image_platform.setter
    def image_platform(self, image_platform):
        """Sets the image_platform of this ListAllProjectSnapshots200ResponseSnapshotsInner.


        :param image_platform: The image_platform of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        :type image_platform: str
        """

        self._image_platform = image_platform

    @property
    def image_tag(self):
        """Gets the image_tag of this ListAllProjectSnapshots200ResponseSnapshotsInner.


        :return: The image_tag of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        :rtype: str
        """
        return self._image_tag

    @image_tag.setter
    def image_tag(self, image_tag):
        """Sets the image_tag of this ListAllProjectSnapshots200ResponseSnapshotsInner.


        :param image_tag: The image_tag of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        :type image_tag: str
        """

        self._image_tag = image_tag

    @property
    def issue_counts(self):
        """Gets the issue_counts of this ListAllProjectSnapshots200ResponseSnapshotsInner.


        :return: The issue_counts of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        :rtype: ListAllProjectSnapshots200ResponseSnapshotsInnerIssueCounts
        """
        return self._issue_counts

    @issue_counts.setter
    def issue_counts(self, issue_counts):
        """Sets the issue_counts of this ListAllProjectSnapshots200ResponseSnapshotsInner.


        :param issue_counts: The issue_counts of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        :type issue_counts: ListAllProjectSnapshots200ResponseSnapshotsInnerIssueCounts
        """
        if issue_counts is None:
            raise ValueError("Invalid value for `issue_counts`, must not be `None`")

        self._issue_counts = issue_counts

    @property
    def method(self):
        """Gets the method of this ListAllProjectSnapshots200ResponseSnapshotsInner.

        The method by which this snapshot was created.

        :return: The method of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this ListAllProjectSnapshots200ResponseSnapshotsInner.

        The method by which this snapshot was created.

        :param method: The method of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        :type method: str
        """
        allowed_values = ["api", "cli", "recurring", "web", "web-test", "wizard"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def total_dependencies(self):
        """Gets the total_dependencies of this ListAllProjectSnapshots200ResponseSnapshotsInner.

        Number of dependencies of the project

        :return: The total_dependencies of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        :rtype: float
        """
        return self._total_dependencies

    @total_dependencies.setter
    def total_dependencies(self, total_dependencies):
        """Sets the total_dependencies of this ListAllProjectSnapshots200ResponseSnapshotsInner.

        Number of dependencies of the project

        :param total_dependencies: The total_dependencies of this ListAllProjectSnapshots200ResponseSnapshotsInner.
        :type total_dependencies: float
        """
        if total_dependencies is None:
            raise ValueError("Invalid value for `total_dependencies`, must not be `None`")

        self._total_dependencies = total_dependencies
