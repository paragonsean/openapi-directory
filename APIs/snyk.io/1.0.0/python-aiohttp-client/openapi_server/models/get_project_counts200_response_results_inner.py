# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetProjectCounts200ResponseResultsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: float=None, day: str=None):
        """GetProjectCounts200ResponseResultsInner - a model defined in OpenAPI

        :param count: The count of this GetProjectCounts200ResponseResultsInner.
        :param day: The day of this GetProjectCounts200ResponseResultsInner.
        """
        self.openapi_types = {
            'count': float,
            'day': str
        }

        self.attribute_map = {
            'count': 'count',
            'day': 'day'
        }

        self._count = count
        self._day = day

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetProjectCounts200ResponseResultsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Get_project_counts_200_response_results_inner of this GetProjectCounts200ResponseResultsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this GetProjectCounts200ResponseResultsInner.

        The number of projects

        :return: The count of this GetProjectCounts200ResponseResultsInner.
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this GetProjectCounts200ResponseResultsInner.

        The number of projects

        :param count: The count of this GetProjectCounts200ResponseResultsInner.
        :type count: float
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def day(self):
        """Gets the day of this GetProjectCounts200ResponseResultsInner.

        The date in the format `YYYY-MM-DD`

        :return: The day of this GetProjectCounts200ResponseResultsInner.
        :rtype: str
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this GetProjectCounts200ResponseResultsInner.

        The date in the format `YYYY-MM-DD`

        :param day: The day of this GetProjectCounts200ResponseResultsInner.
        :type day: str
        """
        if day is None:
            raise ValueError("Invalid value for `day`, must not be `None`")

        self._day = day
