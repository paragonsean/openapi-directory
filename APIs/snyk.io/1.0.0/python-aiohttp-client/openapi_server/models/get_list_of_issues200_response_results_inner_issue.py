# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_list_of_issues200_response_results_inner_issue_identifiers import GetListOfIssues200ResponseResultsInnerIssueIdentifiers
from openapi_server.models.get_list_of_issues200_response_results_inner_issue_semver import GetListOfIssues200ResponseResultsInnerIssueSemver
from openapi_server import util


class GetListOfIssues200ResponseResultsInnerIssue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cvssv3: str=None, credit: List[object]=None, cvss_score: float=None, disclosure_time: str=None, exploit_maturity: str=None, id: str=None, identifiers: GetListOfIssues200ResponseResultsInnerIssueIdentifiers=None, ignored: List[object]=None, is_ignored: bool=None, is_patchable: bool=None, is_patched: bool=None, is_pinnable: bool=None, is_upgradable: bool=None, jira_issue_url: str=None, language: str=None, original_severity: str=None, package: str=None, package_manager: str=None, patches: List[object]=None, priority_score: float=None, publication_time: str=None, semver: GetListOfIssues200ResponseResultsInnerIssueSemver=None, severity: str=None, title: str=None, type: str=None, unique_severities_list: List[object]=None, url: str=None, version: str=None):
        """GetListOfIssues200ResponseResultsInnerIssue - a model defined in OpenAPI

        :param cvssv3: The cvssv3 of this GetListOfIssues200ResponseResultsInnerIssue.
        :param credit: The credit of this GetListOfIssues200ResponseResultsInnerIssue.
        :param cvss_score: The cvss_score of this GetListOfIssues200ResponseResultsInnerIssue.
        :param disclosure_time: The disclosure_time of this GetListOfIssues200ResponseResultsInnerIssue.
        :param exploit_maturity: The exploit_maturity of this GetListOfIssues200ResponseResultsInnerIssue.
        :param id: The id of this GetListOfIssues200ResponseResultsInnerIssue.
        :param identifiers: The identifiers of this GetListOfIssues200ResponseResultsInnerIssue.
        :param ignored: The ignored of this GetListOfIssues200ResponseResultsInnerIssue.
        :param is_ignored: The is_ignored of this GetListOfIssues200ResponseResultsInnerIssue.
        :param is_patchable: The is_patchable of this GetListOfIssues200ResponseResultsInnerIssue.
        :param is_patched: The is_patched of this GetListOfIssues200ResponseResultsInnerIssue.
        :param is_pinnable: The is_pinnable of this GetListOfIssues200ResponseResultsInnerIssue.
        :param is_upgradable: The is_upgradable of this GetListOfIssues200ResponseResultsInnerIssue.
        :param jira_issue_url: The jira_issue_url of this GetListOfIssues200ResponseResultsInnerIssue.
        :param language: The language of this GetListOfIssues200ResponseResultsInnerIssue.
        :param original_severity: The original_severity of this GetListOfIssues200ResponseResultsInnerIssue.
        :param package: The package of this GetListOfIssues200ResponseResultsInnerIssue.
        :param package_manager: The package_manager of this GetListOfIssues200ResponseResultsInnerIssue.
        :param patches: The patches of this GetListOfIssues200ResponseResultsInnerIssue.
        :param priority_score: The priority_score of this GetListOfIssues200ResponseResultsInnerIssue.
        :param publication_time: The publication_time of this GetListOfIssues200ResponseResultsInnerIssue.
        :param semver: The semver of this GetListOfIssues200ResponseResultsInnerIssue.
        :param severity: The severity of this GetListOfIssues200ResponseResultsInnerIssue.
        :param title: The title of this GetListOfIssues200ResponseResultsInnerIssue.
        :param type: The type of this GetListOfIssues200ResponseResultsInnerIssue.
        :param unique_severities_list: The unique_severities_list of this GetListOfIssues200ResponseResultsInnerIssue.
        :param url: The url of this GetListOfIssues200ResponseResultsInnerIssue.
        :param version: The version of this GetListOfIssues200ResponseResultsInnerIssue.
        """
        self.openapi_types = {
            'cvssv3': str,
            'credit': List[object],
            'cvss_score': float,
            'disclosure_time': str,
            'exploit_maturity': str,
            'id': str,
            'identifiers': GetListOfIssues200ResponseResultsInnerIssueIdentifiers,
            'ignored': List[object],
            'is_ignored': bool,
            'is_patchable': bool,
            'is_patched': bool,
            'is_pinnable': bool,
            'is_upgradable': bool,
            'jira_issue_url': str,
            'language': str,
            'original_severity': str,
            'package': str,
            'package_manager': str,
            'patches': List[object],
            'priority_score': float,
            'publication_time': str,
            'semver': GetListOfIssues200ResponseResultsInnerIssueSemver,
            'severity': str,
            'title': str,
            'type': str,
            'unique_severities_list': List[object],
            'url': str,
            'version': str
        }

        self.attribute_map = {
            'cvssv3': 'CVSSv3',
            'credit': 'credit',
            'cvss_score': 'cvssScore',
            'disclosure_time': 'disclosureTime',
            'exploit_maturity': 'exploitMaturity',
            'id': 'id',
            'identifiers': 'identifiers',
            'ignored': 'ignored',
            'is_ignored': 'isIgnored',
            'is_patchable': 'isPatchable',
            'is_patched': 'isPatched',
            'is_pinnable': 'isPinnable',
            'is_upgradable': 'isUpgradable',
            'jira_issue_url': 'jiraIssueUrl',
            'language': 'language',
            'original_severity': 'originalSeverity',
            'package': 'package',
            'package_manager': 'packageManager',
            'patches': 'patches',
            'priority_score': 'priorityScore',
            'publication_time': 'publicationTime',
            'semver': 'semver',
            'severity': 'severity',
            'title': 'title',
            'type': 'type',
            'unique_severities_list': 'uniqueSeveritiesList',
            'url': 'url',
            'version': 'version'
        }

        self._cvssv3 = cvssv3
        self._credit = credit
        self._cvss_score = cvss_score
        self._disclosure_time = disclosure_time
        self._exploit_maturity = exploit_maturity
        self._id = id
        self._identifiers = identifiers
        self._ignored = ignored
        self._is_ignored = is_ignored
        self._is_patchable = is_patchable
        self._is_patched = is_patched
        self._is_pinnable = is_pinnable
        self._is_upgradable = is_upgradable
        self._jira_issue_url = jira_issue_url
        self._language = language
        self._original_severity = original_severity
        self._package = package
        self._package_manager = package_manager
        self._patches = patches
        self._priority_score = priority_score
        self._publication_time = publication_time
        self._semver = semver
        self._severity = severity
        self._title = title
        self._type = type
        self._unique_severities_list = unique_severities_list
        self._url = url
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetListOfIssues200ResponseResultsInnerIssue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Get_list_of_issues_200_response_results_inner_issue of this GetListOfIssues200ResponseResultsInnerIssue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cvssv3(self):
        """Gets the cvssv3 of this GetListOfIssues200ResponseResultsInnerIssue.

        The CVSS v3 string that signifies how the CVSS score was calculated (not applicable to licenses)

        :return: The cvssv3 of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: str
        """
        return self._cvssv3

    @cvssv3.setter
    def cvssv3(self, cvssv3):
        """Sets the cvssv3 of this GetListOfIssues200ResponseResultsInnerIssue.

        The CVSS v3 string that signifies how the CVSS score was calculated (not applicable to licenses)

        :param cvssv3: The cvssv3 of this GetListOfIssues200ResponseResultsInnerIssue.
        :type cvssv3: str
        """

        self._cvssv3 = cvssv3

    @property
    def credit(self):
        """Gets the credit of this GetListOfIssues200ResponseResultsInnerIssue.

        The list of people responsible for first uncovering or reporting the issue (not applicable to licenses)

        :return: The credit of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: List[object]
        """
        return self._credit

    @credit.setter
    def credit(self, credit):
        """Sets the credit of this GetListOfIssues200ResponseResultsInnerIssue.

        The list of people responsible for first uncovering or reporting the issue (not applicable to licenses)

        :param credit: The credit of this GetListOfIssues200ResponseResultsInnerIssue.
        :type credit: List[object]
        """

        self._credit = credit

    @property
    def cvss_score(self):
        """Gets the cvss_score of this GetListOfIssues200ResponseResultsInnerIssue.

        The CVSS score that results from running the CVSSv3 string (not applicable to licenses)

        :return: The cvss_score of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: float
        """
        return self._cvss_score

    @cvss_score.setter
    def cvss_score(self, cvss_score):
        """Sets the cvss_score of this GetListOfIssues200ResponseResultsInnerIssue.

        The CVSS score that results from running the CVSSv3 string (not applicable to licenses)

        :param cvss_score: The cvss_score of this GetListOfIssues200ResponseResultsInnerIssue.
        :type cvss_score: float
        """

        self._cvss_score = cvss_score

    @property
    def disclosure_time(self):
        """Gets the disclosure_time of this GetListOfIssues200ResponseResultsInnerIssue.

        The date that the vulnerability was first disclosed (not applicable to licenses)

        :return: The disclosure_time of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: str
        """
        return self._disclosure_time

    @disclosure_time.setter
    def disclosure_time(self, disclosure_time):
        """Sets the disclosure_time of this GetListOfIssues200ResponseResultsInnerIssue.

        The date that the vulnerability was first disclosed (not applicable to licenses)

        :param disclosure_time: The disclosure_time of this GetListOfIssues200ResponseResultsInnerIssue.
        :type disclosure_time: str
        """

        self._disclosure_time = disclosure_time

    @property
    def exploit_maturity(self):
        """Gets the exploit_maturity of this GetListOfIssues200ResponseResultsInnerIssue.

        The exploit maturity of the issue

        :return: The exploit_maturity of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: str
        """
        return self._exploit_maturity

    @exploit_maturity.setter
    def exploit_maturity(self, exploit_maturity):
        """Sets the exploit_maturity of this GetListOfIssues200ResponseResultsInnerIssue.

        The exploit maturity of the issue

        :param exploit_maturity: The exploit_maturity of this GetListOfIssues200ResponseResultsInnerIssue.
        :type exploit_maturity: str
        """
        if exploit_maturity is None:
            raise ValueError("Invalid value for `exploit_maturity`, must not be `None`")

        self._exploit_maturity = exploit_maturity

    @property
    def id(self):
        """Gets the id of this GetListOfIssues200ResponseResultsInnerIssue.

        The identifier of the issue

        :return: The id of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetListOfIssues200ResponseResultsInnerIssue.

        The identifier of the issue

        :param id: The id of this GetListOfIssues200ResponseResultsInnerIssue.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def identifiers(self):
        """Gets the identifiers of this GetListOfIssues200ResponseResultsInnerIssue.


        :return: The identifiers of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: GetListOfIssues200ResponseResultsInnerIssueIdentifiers
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this GetListOfIssues200ResponseResultsInnerIssue.


        :param identifiers: The identifiers of this GetListOfIssues200ResponseResultsInnerIssue.
        :type identifiers: GetListOfIssues200ResponseResultsInnerIssueIdentifiers
        """

        self._identifiers = identifiers

    @property
    def ignored(self):
        """Gets the ignored of this GetListOfIssues200ResponseResultsInnerIssue.

        The list of ignore rules that were applied to the issue (only present if issue was ignored and no `groupBy` in the API request)

        :return: The ignored of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: List[object]
        """
        return self._ignored

    @ignored.setter
    def ignored(self, ignored):
        """Sets the ignored of this GetListOfIssues200ResponseResultsInnerIssue.

        The list of ignore rules that were applied to the issue (only present if issue was ignored and no `groupBy` in the API request)

        :param ignored: The ignored of this GetListOfIssues200ResponseResultsInnerIssue.
        :type ignored: List[object]
        """

        self._ignored = ignored

    @property
    def is_ignored(self):
        """Gets the is_ignored of this GetListOfIssues200ResponseResultsInnerIssue.

        Whether the issue has been ignored (only present if there is no `groupBy` in the API request)

        :return: The is_ignored of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: bool
        """
        return self._is_ignored

    @is_ignored.setter
    def is_ignored(self, is_ignored):
        """Sets the is_ignored of this GetListOfIssues200ResponseResultsInnerIssue.

        Whether the issue has been ignored (only present if there is no `groupBy` in the API request)

        :param is_ignored: The is_ignored of this GetListOfIssues200ResponseResultsInnerIssue.
        :type is_ignored: bool
        """

        self._is_ignored = is_ignored

    @property
    def is_patchable(self):
        """Gets the is_patchable of this GetListOfIssues200ResponseResultsInnerIssue.

        Whether the issue can be patched

        :return: The is_patchable of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: bool
        """
        return self._is_patchable

    @is_patchable.setter
    def is_patchable(self, is_patchable):
        """Sets the is_patchable of this GetListOfIssues200ResponseResultsInnerIssue.

        Whether the issue can be patched

        :param is_patchable: The is_patchable of this GetListOfIssues200ResponseResultsInnerIssue.
        :type is_patchable: bool
        """

        self._is_patchable = is_patchable

    @property
    def is_patched(self):
        """Gets the is_patched of this GetListOfIssues200ResponseResultsInnerIssue.

        Whether the issue has been patched (not applicable to licenses and only present if there is no `groupBy` in the API request)

        :return: The is_patched of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: bool
        """
        return self._is_patched

    @is_patched.setter
    def is_patched(self, is_patched):
        """Sets the is_patched of this GetListOfIssues200ResponseResultsInnerIssue.

        Whether the issue has been patched (not applicable to licenses and only present if there is no `groupBy` in the API request)

        :param is_patched: The is_patched of this GetListOfIssues200ResponseResultsInnerIssue.
        :type is_patched: bool
        """

        self._is_patched = is_patched

    @property
    def is_pinnable(self):
        """Gets the is_pinnable of this GetListOfIssues200ResponseResultsInnerIssue.

        Whether the issue can be pinned

        :return: The is_pinnable of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: bool
        """
        return self._is_pinnable

    @is_pinnable.setter
    def is_pinnable(self, is_pinnable):
        """Sets the is_pinnable of this GetListOfIssues200ResponseResultsInnerIssue.

        Whether the issue can be pinned

        :param is_pinnable: The is_pinnable of this GetListOfIssues200ResponseResultsInnerIssue.
        :type is_pinnable: bool
        """

        self._is_pinnable = is_pinnable

    @property
    def is_upgradable(self):
        """Gets the is_upgradable of this GetListOfIssues200ResponseResultsInnerIssue.

        Whether the issue can be fixed by upgrading to a later version of the dependency

        :return: The is_upgradable of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: bool
        """
        return self._is_upgradable

    @is_upgradable.setter
    def is_upgradable(self, is_upgradable):
        """Sets the is_upgradable of this GetListOfIssues200ResponseResultsInnerIssue.

        Whether the issue can be fixed by upgrading to a later version of the dependency

        :param is_upgradable: The is_upgradable of this GetListOfIssues200ResponseResultsInnerIssue.
        :type is_upgradable: bool
        """

        self._is_upgradable = is_upgradable

    @property
    def jira_issue_url(self):
        """Gets the jira_issue_url of this GetListOfIssues200ResponseResultsInnerIssue.

        The link to the Jira issue attached to the vulnerability

        :return: The jira_issue_url of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: str
        """
        return self._jira_issue_url

    @jira_issue_url.setter
    def jira_issue_url(self, jira_issue_url):
        """Sets the jira_issue_url of this GetListOfIssues200ResponseResultsInnerIssue.

        The link to the Jira issue attached to the vulnerability

        :param jira_issue_url: The jira_issue_url of this GetListOfIssues200ResponseResultsInnerIssue.
        :type jira_issue_url: str
        """

        self._jira_issue_url = jira_issue_url

    @property
    def language(self):
        """Gets the language of this GetListOfIssues200ResponseResultsInnerIssue.

        The language of the issue

        :return: The language of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this GetListOfIssues200ResponseResultsInnerIssue.

        The language of the issue

        :param language: The language of this GetListOfIssues200ResponseResultsInnerIssue.
        :type language: str
        """

        self._language = language

    @property
    def original_severity(self):
        """Gets the original_severity of this GetListOfIssues200ResponseResultsInnerIssue.

        The original severity status of the issue, as retrieved from Snyk Vulnerability database, before policies are applied

        :return: The original_severity of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: str
        """
        return self._original_severity

    @original_severity.setter
    def original_severity(self, original_severity):
        """Sets the original_severity of this GetListOfIssues200ResponseResultsInnerIssue.

        The original severity status of the issue, as retrieved from Snyk Vulnerability database, before policies are applied

        :param original_severity: The original_severity of this GetListOfIssues200ResponseResultsInnerIssue.
        :type original_severity: str
        """
        if original_severity is None:
            raise ValueError("Invalid value for `original_severity`, must not be `None`")

        self._original_severity = original_severity

    @property
    def package(self):
        """Gets the package of this GetListOfIssues200ResponseResultsInnerIssue.

        The name of the package that the issue relates to

        :return: The package of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: str
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this GetListOfIssues200ResponseResultsInnerIssue.

        The name of the package that the issue relates to

        :param package: The package of this GetListOfIssues200ResponseResultsInnerIssue.
        :type package: str
        """
        if package is None:
            raise ValueError("Invalid value for `package`, must not be `None`")

        self._package = package

    @property
    def package_manager(self):
        """Gets the package_manager of this GetListOfIssues200ResponseResultsInnerIssue.

        The package manager of the issue

        :return: The package_manager of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: str
        """
        return self._package_manager

    @package_manager.setter
    def package_manager(self, package_manager):
        """Sets the package_manager of this GetListOfIssues200ResponseResultsInnerIssue.

        The package manager of the issue

        :param package_manager: The package_manager of this GetListOfIssues200ResponseResultsInnerIssue.
        :type package_manager: str
        """

        self._package_manager = package_manager

    @property
    def patches(self):
        """Gets the patches of this GetListOfIssues200ResponseResultsInnerIssue.

        A list of patches available for the given issue (not applicable to licenses)

        :return: The patches of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: List[object]
        """
        return self._patches

    @patches.setter
    def patches(self, patches):
        """Sets the patches of this GetListOfIssues200ResponseResultsInnerIssue.

        A list of patches available for the given issue (not applicable to licenses)

        :param patches: The patches of this GetListOfIssues200ResponseResultsInnerIssue.
        :type patches: List[object]
        """

        self._patches = patches

    @property
    def priority_score(self):
        """Gets the priority_score of this GetListOfIssues200ResponseResultsInnerIssue.

        The priority score ranging between 0-1000

        :return: The priority_score of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: float
        """
        return self._priority_score

    @priority_score.setter
    def priority_score(self, priority_score):
        """Sets the priority_score of this GetListOfIssues200ResponseResultsInnerIssue.

        The priority score ranging between 0-1000

        :param priority_score: The priority_score of this GetListOfIssues200ResponseResultsInnerIssue.
        :type priority_score: float
        """

        self._priority_score = priority_score

    @property
    def publication_time(self):
        """Gets the publication_time of this GetListOfIssues200ResponseResultsInnerIssue.

        The date that the vulnerability was first published by Snyk (not applicable to licenses)

        :return: The publication_time of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: str
        """
        return self._publication_time

    @publication_time.setter
    def publication_time(self, publication_time):
        """Sets the publication_time of this GetListOfIssues200ResponseResultsInnerIssue.

        The date that the vulnerability was first published by Snyk (not applicable to licenses)

        :param publication_time: The publication_time of this GetListOfIssues200ResponseResultsInnerIssue.
        :type publication_time: str
        """

        self._publication_time = publication_time

    @property
    def semver(self):
        """Gets the semver of this GetListOfIssues200ResponseResultsInnerIssue.


        :return: The semver of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: GetListOfIssues200ResponseResultsInnerIssueSemver
        """
        return self._semver

    @semver.setter
    def semver(self, semver):
        """Sets the semver of this GetListOfIssues200ResponseResultsInnerIssue.


        :param semver: The semver of this GetListOfIssues200ResponseResultsInnerIssue.
        :type semver: GetListOfIssues200ResponseResultsInnerIssueSemver
        """

        self._semver = semver

    @property
    def severity(self):
        """Gets the severity of this GetListOfIssues200ResponseResultsInnerIssue.

        The severity status of the issue, after policies are applied

        :return: The severity of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this GetListOfIssues200ResponseResultsInnerIssue.

        The severity status of the issue, after policies are applied

        :param severity: The severity of this GetListOfIssues200ResponseResultsInnerIssue.
        :type severity: str
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")

        self._severity = severity

    @property
    def title(self):
        """Gets the title of this GetListOfIssues200ResponseResultsInnerIssue.

        The issue title

        :return: The title of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GetListOfIssues200ResponseResultsInnerIssue.

        The issue title

        :param title: The title of this GetListOfIssues200ResponseResultsInnerIssue.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this GetListOfIssues200ResponseResultsInnerIssue.

        The issue type, can be \"vuln\", \"license\"

        :return: The type of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetListOfIssues200ResponseResultsInnerIssue.

        The issue type, can be \"vuln\", \"license\"

        :param type: The type of this GetListOfIssues200ResponseResultsInnerIssue.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def unique_severities_list(self):
        """Gets the unique_severities_list of this GetListOfIssues200ResponseResultsInnerIssue.

        A list of all severities in issue per projects

        :return: The unique_severities_list of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: List[object]
        """
        return self._unique_severities_list

    @unique_severities_list.setter
    def unique_severities_list(self, unique_severities_list):
        """Sets the unique_severities_list of this GetListOfIssues200ResponseResultsInnerIssue.

        A list of all severities in issue per projects

        :param unique_severities_list: The unique_severities_list of this GetListOfIssues200ResponseResultsInnerIssue.
        :type unique_severities_list: List[object]
        """

        self._unique_severities_list = unique_severities_list

    @property
    def url(self):
        """Gets the url of this GetListOfIssues200ResponseResultsInnerIssue.

        URL to a page containing information about the issue

        :return: The url of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GetListOfIssues200ResponseResultsInnerIssue.

        URL to a page containing information about the issue

        :param url: The url of this GetListOfIssues200ResponseResultsInnerIssue.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def version(self):
        """Gets the version of this GetListOfIssues200ResponseResultsInnerIssue.

        The version of the package that the issue relates to

        :return: The version of this GetListOfIssues200ResponseResultsInnerIssue.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GetListOfIssues200ResponseResultsInnerIssue.

        The version of the package that the issue relates to

        :param version: The version of this GetListOfIssues200ResponseResultsInnerIssue.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
