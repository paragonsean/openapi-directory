# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateOrganizationsBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_id: str=None, name: str=None, source_org_id: str=None):
        """CreateOrganizationsBody - a model defined in OpenAPI

        :param group_id: The group_id of this CreateOrganizationsBody.
        :param name: The name of this CreateOrganizationsBody.
        :param source_org_id: The source_org_id of this CreateOrganizationsBody.
        """
        self.openapi_types = {
            'group_id': str,
            'name': str,
            'source_org_id': str
        }

        self.attribute_map = {
            'group_id': 'groupId',
            'name': 'name',
            'source_org_id': 'sourceOrgId'
        }

        self._group_id = group_id
        self._name = name
        self._source_org_id = source_org_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOrganizationsBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Create_organizations_body of this CreateOrganizationsBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_id(self):
        """Gets the group_id of this CreateOrganizationsBody.

        The group ID. The `API_KEY` must have access to this group.

        :return: The group_id of this CreateOrganizationsBody.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this CreateOrganizationsBody.

        The group ID. The `API_KEY` must have access to this group.

        :param group_id: The group_id of this CreateOrganizationsBody.
        :type group_id: str
        """

        self._group_id = group_id

    @property
    def name(self):
        """Gets the name of this CreateOrganizationsBody.

        The name of the new organization

        :return: The name of this CreateOrganizationsBody.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateOrganizationsBody.

        The name of the new organization

        :param name: The name of this CreateOrganizationsBody.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def source_org_id(self):
        """Gets the source_org_id of this CreateOrganizationsBody.

        The id of an organization to copy settings from.  If provided, this organization must be associated with the same group.  The items that will be copied are:  Source control integrations (GitHub, GitLab, BitBucket) \\+ Container registries integrations (ACR, Docker Hub, ECR, GCR) \\+ Container orchestrators integrations (Kubernetes) \\+ PaaS and Serverless Integrations (Heroku, AWS Lambda) \\+ Notification integrations (Slack, Jira) \\+ Policies \\+ Ignore settings \\+ Language settings \\+ Infrastructure as Code settings \\+ Snyk Code settings  The following will not be copied across: Service accounts \\+ Members \\+ Projects \\+ Notification preferences

        :return: The source_org_id of this CreateOrganizationsBody.
        :rtype: str
        """
        return self._source_org_id

    @source_org_id.setter
    def source_org_id(self, source_org_id):
        """Sets the source_org_id of this CreateOrganizationsBody.

        The id of an organization to copy settings from.  If provided, this organization must be associated with the same group.  The items that will be copied are:  Source control integrations (GitHub, GitLab, BitBucket) \\+ Container registries integrations (ACR, Docker Hub, ECR, GCR) \\+ Container orchestrators integrations (Kubernetes) \\+ PaaS and Serverless Integrations (Heroku, AWS Lambda) \\+ Notification integrations (Slack, Jira) \\+ Policies \\+ Ignore settings \\+ Language settings \\+ Infrastructure as Code settings \\+ Snyk Code settings  The following will not be copied across: Service accounts \\+ Members \\+ Projects \\+ Notification preferences

        :param source_org_id: The source_org_id of this CreateOrganizationsBody.
        :type source_org_id: str
        """

        self._source_org_id = source_org_id
