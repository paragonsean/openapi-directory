# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestsFiltersFilters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_private: bool=None, issues_prevented: bool=None, orgs: List[object]=None, projects: List[object]=None):
        """TestsFiltersFilters - a model defined in OpenAPI

        :param is_private: The is_private of this TestsFiltersFilters.
        :param issues_prevented: The issues_prevented of this TestsFiltersFilters.
        :param orgs: The orgs of this TestsFiltersFilters.
        :param projects: The projects of this TestsFiltersFilters.
        """
        self.openapi_types = {
            'is_private': bool,
            'issues_prevented': bool,
            'orgs': List[object],
            'projects': List[object]
        }

        self.attribute_map = {
            'is_private': 'isPrivate',
            'issues_prevented': 'issuesPrevented',
            'orgs': 'orgs',
            'projects': 'projects'
        }

        self._is_private = is_private
        self._issues_prevented = issues_prevented
        self._orgs = orgs
        self._projects = projects

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestsFiltersFilters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tests_Filters_filters of this TestsFiltersFilters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_private(self):
        """Gets the is_private of this TestsFiltersFilters.

        If set to `true`, only include tests which were conducted against private projects, if set to `false` only include tests which were conducted against public projects

        :return: The is_private of this TestsFiltersFilters.
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this TestsFiltersFilters.

        If set to `true`, only include tests which were conducted against private projects, if set to `false` only include tests which were conducted against public projects

        :param is_private: The is_private of this TestsFiltersFilters.
        :type is_private: bool
        """

        self._is_private = is_private

    @property
    def issues_prevented(self):
        """Gets the issues_prevented of this TestsFiltersFilters.

        If set to `true`, only include tests which prevented issues from being introduced, if set to `false` only include tests which did not prevent issues from being introduced

        :return: The issues_prevented of this TestsFiltersFilters.
        :rtype: bool
        """
        return self._issues_prevented

    @issues_prevented.setter
    def issues_prevented(self, issues_prevented):
        """Sets the issues_prevented of this TestsFiltersFilters.

        If set to `true`, only include tests which prevented issues from being introduced, if set to `false` only include tests which did not prevent issues from being introduced

        :param issues_prevented: The issues_prevented of this TestsFiltersFilters.
        :type issues_prevented: bool
        """

        self._issues_prevented = issues_prevented

    @property
    def orgs(self):
        """Gets the orgs of this TestsFiltersFilters.

        The list of org IDs to filter the results by

        :return: The orgs of this TestsFiltersFilters.
        :rtype: List[object]
        """
        return self._orgs

    @orgs.setter
    def orgs(self, orgs):
        """Sets the orgs of this TestsFiltersFilters.

        The list of org IDs to filter the results by

        :param orgs: The orgs of this TestsFiltersFilters.
        :type orgs: List[object]
        """
        if orgs is None:
            raise ValueError("Invalid value for `orgs`, must not be `None`")

        self._orgs = orgs

    @property
    def projects(self):
        """Gets the projects of this TestsFiltersFilters.

        The list of project IDs to filter issues by, max projects allowed is 1000

        :return: The projects of this TestsFiltersFilters.
        :rtype: List[object]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this TestsFiltersFilters.

        The list of project IDs to filter issues by, max projects allowed is 1000

        :param projects: The projects of this TestsFiltersFilters.
        :type projects: List[object]
        """

        self._projects = projects
