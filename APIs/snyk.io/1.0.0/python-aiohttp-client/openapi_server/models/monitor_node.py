# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MonitorNode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deps: List[object]=None, node_id: str=None, pkg_id: str=None):
        """MonitorNode - a model defined in OpenAPI

        :param deps: The deps of this MonitorNode.
        :param node_id: The node_id of this MonitorNode.
        :param pkg_id: The pkg_id of this MonitorNode.
        """
        self.openapi_types = {
            'deps': List[object],
            'node_id': str,
            'pkg_id': str
        }

        self.attribute_map = {
            'deps': 'deps',
            'node_id': 'nodeId',
            'pkg_id': 'pkgId'
        }

        self._deps = deps
        self._node_id = node_id
        self._pkg_id = pkg_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonitorNode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MonitorNode of this MonitorNode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deps(self):
        """Gets the deps of this MonitorNode.

        An array of package ids this package depends on.

        :return: The deps of this MonitorNode.
        :rtype: List[object]
        """
        return self._deps

    @deps.setter
    def deps(self, deps):
        """Sets the deps of this MonitorNode.

        An array of package ids this package depends on.

        :param deps: The deps of this MonitorNode.
        :type deps: List[object]
        """

        self._deps = deps

    @property
    def node_id(self):
        """Gets the node_id of this MonitorNode.

        Node id unique across the graph.

        :return: The node_id of this MonitorNode.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this MonitorNode.

        Node id unique across the graph.

        :param node_id: The node_id of this MonitorNode.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def pkg_id(self):
        """Gets the pkg_id of this MonitorNode.

        Package id reference should match id in pkg array and take the format name@version.

        :return: The pkg_id of this MonitorNode.
        :rtype: str
        """
        return self._pkg_id

    @pkg_id.setter
    def pkg_id(self, pkg_id):
        """Sets the pkg_id of this MonitorNode.

        Package id reference should match id in pkg array and take the format name@version.

        :param pkg_id: The pkg_id of this MonitorNode.
        :type pkg_id: str
        """
        if pkg_id is None:
            raise ValueError("Invalid value for `pkg_id`, must not be `None`")

        self._pkg_id = pkg_id
