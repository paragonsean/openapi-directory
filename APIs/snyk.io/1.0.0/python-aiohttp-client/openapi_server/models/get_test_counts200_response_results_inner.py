# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_test_counts200_response_results_inner_is_private import GetTestCounts200ResponseResultsInnerIsPrivate
from openapi_server.models.get_test_counts200_response_results_inner_issues_prevented import GetTestCounts200ResponseResultsInnerIssuesPrevented
from openapi_server import util


class GetTestCounts200ResponseResultsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: float=None, is_private: GetTestCounts200ResponseResultsInnerIsPrivate=None, issues_prevented: GetTestCounts200ResponseResultsInnerIssuesPrevented=None):
        """GetTestCounts200ResponseResultsInner - a model defined in OpenAPI

        :param count: The count of this GetTestCounts200ResponseResultsInner.
        :param is_private: The is_private of this GetTestCounts200ResponseResultsInner.
        :param issues_prevented: The issues_prevented of this GetTestCounts200ResponseResultsInner.
        """
        self.openapi_types = {
            'count': float,
            'is_private': GetTestCounts200ResponseResultsInnerIsPrivate,
            'issues_prevented': GetTestCounts200ResponseResultsInnerIssuesPrevented
        }

        self.attribute_map = {
            'count': 'count',
            'is_private': 'isPrivate',
            'issues_prevented': 'issuesPrevented'
        }

        self._count = count
        self._is_private = is_private
        self._issues_prevented = issues_prevented

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetTestCounts200ResponseResultsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Get_test_counts_200_response_results_inner of this GetTestCounts200ResponseResultsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this GetTestCounts200ResponseResultsInner.

        The number of tests conducted

        :return: The count of this GetTestCounts200ResponseResultsInner.
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this GetTestCounts200ResponseResultsInner.

        The number of tests conducted

        :param count: The count of this GetTestCounts200ResponseResultsInner.
        :type count: float
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def is_private(self):
        """Gets the is_private of this GetTestCounts200ResponseResultsInner.


        :return: The is_private of this GetTestCounts200ResponseResultsInner.
        :rtype: GetTestCounts200ResponseResultsInnerIsPrivate
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this GetTestCounts200ResponseResultsInner.


        :param is_private: The is_private of this GetTestCounts200ResponseResultsInner.
        :type is_private: GetTestCounts200ResponseResultsInnerIsPrivate
        """

        self._is_private = is_private

    @property
    def issues_prevented(self):
        """Gets the issues_prevented of this GetTestCounts200ResponseResultsInner.


        :return: The issues_prevented of this GetTestCounts200ResponseResultsInner.
        :rtype: GetTestCounts200ResponseResultsInnerIssuesPrevented
        """
        return self._issues_prevented

    @issues_prevented.setter
    def issues_prevented(self, issues_prevented):
        """Sets the issues_prevented of this GetTestCounts200ResponseResultsInner.


        :param issues_prevented: The issues_prevented of this GetTestCounts200ResponseResultsInner.
        :type issues_prevented: GetTestCounts200ResponseResultsInnerIssuesPrevented
        """

        self._issues_prevented = issues_prevented
