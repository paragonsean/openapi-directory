# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MonitorDepGraphRequestDepGraphGraph(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nodes: List[object]=None, root_node_id: str=None):
        """MonitorDepGraphRequestDepGraphGraph - a model defined in OpenAPI

        :param nodes: The nodes of this MonitorDepGraphRequestDepGraphGraph.
        :param root_node_id: The root_node_id of this MonitorDepGraphRequestDepGraphGraph.
        """
        self.openapi_types = {
            'nodes': List[object],
            'root_node_id': str
        }

        self.attribute_map = {
            'nodes': 'nodes',
            'root_node_id': 'rootNodeId'
        }

        self._nodes = nodes
        self._root_node_id = root_node_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonitorDepGraphRequestDepGraphGraph':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Monitor_Dep_Graph_request_depGraph_graph of this MonitorDepGraphRequestDepGraphGraph.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nodes(self):
        """Gets the nodes of this MonitorDepGraphRequestDepGraphGraph.

        Array of node objects.

        :return: The nodes of this MonitorDepGraphRequestDepGraphGraph.
        :rtype: List[object]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this MonitorDepGraphRequestDepGraphGraph.

        Array of node objects.

        :param nodes: The nodes of this MonitorDepGraphRequestDepGraphGraph.
        :type nodes: List[object]
        """
        if nodes is None:
            raise ValueError("Invalid value for `nodes`, must not be `None`")

        self._nodes = nodes

    @property
    def root_node_id(self):
        """Gets the root_node_id of this MonitorDepGraphRequestDepGraphGraph.

        Root node id. Note the root node name is used as your project name.

        :return: The root_node_id of this MonitorDepGraphRequestDepGraphGraph.
        :rtype: str
        """
        return self._root_node_id

    @root_node_id.setter
    def root_node_id(self, root_node_id):
        """Sets the root_node_id of this MonitorDepGraphRequestDepGraphGraph.

        Root node id. Note the root node name is used as your project name.

        :param root_node_id: The root_node_id of this MonitorDepGraphRequestDepGraphGraph.
        :type root_node_id: str
        """
        if root_node_id is None:
            raise ValueError("Invalid value for `root_node_id`, must not be `None`")

        self._root_node_id = root_node_id
