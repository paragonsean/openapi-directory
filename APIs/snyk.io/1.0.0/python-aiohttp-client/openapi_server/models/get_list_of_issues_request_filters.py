# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_issue_counts_request_filters_priority_score import GetIssueCountsRequestFiltersPriorityScore
from openapi_server import util


class GetListOfIssuesRequestFilters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exploit_maturity: List[object]=None, fixable: bool=None, identifier: str=None, ignored: bool=None, is_fixed: bool=None, is_patchable: bool=None, is_pinnable: bool=None, is_upgradable: bool=None, issues: object=None, languages: List[object]=None, orgs: object=None, patched: bool=None, priority_score: GetIssueCountsRequestFiltersPriorityScore=None, projects: object=None, severity: List[object]=None, types: List[object]=None):
        """GetListOfIssuesRequestFilters - a model defined in OpenAPI

        :param exploit_maturity: The exploit_maturity of this GetListOfIssuesRequestFilters.
        :param fixable: The fixable of this GetListOfIssuesRequestFilters.
        :param identifier: The identifier of this GetListOfIssuesRequestFilters.
        :param ignored: The ignored of this GetListOfIssuesRequestFilters.
        :param is_fixed: The is_fixed of this GetListOfIssuesRequestFilters.
        :param is_patchable: The is_patchable of this GetListOfIssuesRequestFilters.
        :param is_pinnable: The is_pinnable of this GetListOfIssuesRequestFilters.
        :param is_upgradable: The is_upgradable of this GetListOfIssuesRequestFilters.
        :param issues: The issues of this GetListOfIssuesRequestFilters.
        :param languages: The languages of this GetListOfIssuesRequestFilters.
        :param orgs: The orgs of this GetListOfIssuesRequestFilters.
        :param patched: The patched of this GetListOfIssuesRequestFilters.
        :param priority_score: The priority_score of this GetListOfIssuesRequestFilters.
        :param projects: The projects of this GetListOfIssuesRequestFilters.
        :param severity: The severity of this GetListOfIssuesRequestFilters.
        :param types: The types of this GetListOfIssuesRequestFilters.
        """
        self.openapi_types = {
            'exploit_maturity': List[object],
            'fixable': bool,
            'identifier': str,
            'ignored': bool,
            'is_fixed': bool,
            'is_patchable': bool,
            'is_pinnable': bool,
            'is_upgradable': bool,
            'issues': object,
            'languages': List[object],
            'orgs': object,
            'patched': bool,
            'priority_score': GetIssueCountsRequestFiltersPriorityScore,
            'projects': object,
            'severity': List[object],
            'types': List[object]
        }

        self.attribute_map = {
            'exploit_maturity': 'exploitMaturity',
            'fixable': 'fixable',
            'identifier': 'identifier',
            'ignored': 'ignored',
            'is_fixed': 'isFixed',
            'is_patchable': 'isPatchable',
            'is_pinnable': 'isPinnable',
            'is_upgradable': 'isUpgradable',
            'issues': 'issues',
            'languages': 'languages',
            'orgs': 'orgs',
            'patched': 'patched',
            'priority_score': 'priorityScore',
            'projects': 'projects',
            'severity': 'severity',
            'types': 'types'
        }

        self._exploit_maturity = exploit_maturity
        self._fixable = fixable
        self._identifier = identifier
        self._ignored = ignored
        self._is_fixed = is_fixed
        self._is_patchable = is_patchable
        self._is_pinnable = is_pinnable
        self._is_upgradable = is_upgradable
        self._issues = issues
        self._languages = languages
        self._orgs = orgs
        self._patched = patched
        self._priority_score = priority_score
        self._projects = projects
        self._severity = severity
        self._types = types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetListOfIssuesRequestFilters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Get_list_of_issues_request_filters of this GetListOfIssuesRequestFilters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exploit_maturity(self):
        """Gets the exploit_maturity of this GetListOfIssuesRequestFilters.

        The exploit maturity levels of issues to filter the results by

        :return: The exploit_maturity of this GetListOfIssuesRequestFilters.
        :rtype: List[object]
        """
        return self._exploit_maturity

    @exploit_maturity.setter
    def exploit_maturity(self, exploit_maturity):
        """Sets the exploit_maturity of this GetListOfIssuesRequestFilters.

        The exploit maturity levels of issues to filter the results by

        :param exploit_maturity: The exploit_maturity of this GetListOfIssuesRequestFilters.
        :type exploit_maturity: List[object]
        """

        self._exploit_maturity = exploit_maturity

    @property
    def fixable(self):
        """Gets the fixable of this GetListOfIssuesRequestFilters.

        If set to `true`, only include issues which are fixable, if set to `false`, only include issues which are not fixable. An issue is fixable if it is either upgradable, patchable or pinnable. Also see isUpgradable, isPatchable and isPinnable filters.

        :return: The fixable of this GetListOfIssuesRequestFilters.
        :rtype: bool
        """
        return self._fixable

    @fixable.setter
    def fixable(self, fixable):
        """Sets the fixable of this GetListOfIssuesRequestFilters.

        If set to `true`, only include issues which are fixable, if set to `false`, only include issues which are not fixable. An issue is fixable if it is either upgradable, patchable or pinnable. Also see isUpgradable, isPatchable and isPinnable filters.

        :param fixable: The fixable of this GetListOfIssuesRequestFilters.
        :type fixable: bool
        """

        self._fixable = fixable

    @property
    def identifier(self):
        """Gets the identifier of this GetListOfIssuesRequestFilters.

        Search term to filter issue name by, or an exact CVE or CWE

        :return: The identifier of this GetListOfIssuesRequestFilters.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this GetListOfIssuesRequestFilters.

        Search term to filter issue name by, or an exact CVE or CWE

        :param identifier: The identifier of this GetListOfIssuesRequestFilters.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def ignored(self):
        """Gets the ignored of this GetListOfIssuesRequestFilters.

        If set to `true`, only include issues which are ignored, if set to `false`, only include issues which are not ignored

        :return: The ignored of this GetListOfIssuesRequestFilters.
        :rtype: bool
        """
        return self._ignored

    @ignored.setter
    def ignored(self, ignored):
        """Sets the ignored of this GetListOfIssuesRequestFilters.

        If set to `true`, only include issues which are ignored, if set to `false`, only include issues which are not ignored

        :param ignored: The ignored of this GetListOfIssuesRequestFilters.
        :type ignored: bool
        """

        self._ignored = ignored

    @property
    def is_fixed(self):
        """Gets the is_fixed of this GetListOfIssuesRequestFilters.

        If set to `true`, only include issues which are fixed, if set to `false`, only include issues which are not fixed

        :return: The is_fixed of this GetListOfIssuesRequestFilters.
        :rtype: bool
        """
        return self._is_fixed

    @is_fixed.setter
    def is_fixed(self, is_fixed):
        """Sets the is_fixed of this GetListOfIssuesRequestFilters.

        If set to `true`, only include issues which are fixed, if set to `false`, only include issues which are not fixed

        :param is_fixed: The is_fixed of this GetListOfIssuesRequestFilters.
        :type is_fixed: bool
        """

        self._is_fixed = is_fixed

    @property
    def is_patchable(self):
        """Gets the is_patchable of this GetListOfIssuesRequestFilters.

        If set to `true`, only include issues which are patchable, if set to `false`, only include issues which are not patchable

        :return: The is_patchable of this GetListOfIssuesRequestFilters.
        :rtype: bool
        """
        return self._is_patchable

    @is_patchable.setter
    def is_patchable(self, is_patchable):
        """Sets the is_patchable of this GetListOfIssuesRequestFilters.

        If set to `true`, only include issues which are patchable, if set to `false`, only include issues which are not patchable

        :param is_patchable: The is_patchable of this GetListOfIssuesRequestFilters.
        :type is_patchable: bool
        """

        self._is_patchable = is_patchable

    @property
    def is_pinnable(self):
        """Gets the is_pinnable of this GetListOfIssuesRequestFilters.

        If set to `true`, only include issues which are pinnable, if set to `false`, only include issues which are not pinnable

        :return: The is_pinnable of this GetListOfIssuesRequestFilters.
        :rtype: bool
        """
        return self._is_pinnable

    @is_pinnable.setter
    def is_pinnable(self, is_pinnable):
        """Sets the is_pinnable of this GetListOfIssuesRequestFilters.

        If set to `true`, only include issues which are pinnable, if set to `false`, only include issues which are not pinnable

        :param is_pinnable: The is_pinnable of this GetListOfIssuesRequestFilters.
        :type is_pinnable: bool
        """

        self._is_pinnable = is_pinnable

    @property
    def is_upgradable(self):
        """Gets the is_upgradable of this GetListOfIssuesRequestFilters.

        If set to `true`, only include issues which are upgradable, if set to `false`, only include issues which are not upgradable

        :return: The is_upgradable of this GetListOfIssuesRequestFilters.
        :rtype: bool
        """
        return self._is_upgradable

    @is_upgradable.setter
    def is_upgradable(self, is_upgradable):
        """Sets the is_upgradable of this GetListOfIssuesRequestFilters.

        If set to `true`, only include issues which are upgradable, if set to `false`, only include issues which are not upgradable

        :param is_upgradable: The is_upgradable of this GetListOfIssuesRequestFilters.
        :type is_upgradable: bool
        """

        self._is_upgradable = is_upgradable

    @property
    def issues(self):
        """Gets the issues of this GetListOfIssuesRequestFilters.

        The list of issue IDs to filter issues by

        :return: The issues of this GetListOfIssuesRequestFilters.
        :rtype: object
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this GetListOfIssuesRequestFilters.

        The list of issue IDs to filter issues by

        :param issues: The issues of this GetListOfIssuesRequestFilters.
        :type issues: object
        """

        self._issues = issues

    @property
    def languages(self):
        """Gets the languages of this GetListOfIssuesRequestFilters.

        The type of languages to filter the results by

        :return: The languages of this GetListOfIssuesRequestFilters.
        :rtype: List[object]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this GetListOfIssuesRequestFilters.

        The type of languages to filter the results by

        :param languages: The languages of this GetListOfIssuesRequestFilters.
        :type languages: List[object]
        """

        self._languages = languages

    @property
    def orgs(self):
        """Gets the orgs of this GetListOfIssuesRequestFilters.

        The list of org IDs to filter the results by

        :return: The orgs of this GetListOfIssuesRequestFilters.
        :rtype: object
        """
        return self._orgs

    @orgs.setter
    def orgs(self, orgs):
        """Sets the orgs of this GetListOfIssuesRequestFilters.

        The list of org IDs to filter the results by

        :param orgs: The orgs of this GetListOfIssuesRequestFilters.
        :type orgs: object
        """
        if orgs is None:
            raise ValueError("Invalid value for `orgs`, must not be `None`")

        self._orgs = orgs

    @property
    def patched(self):
        """Gets the patched of this GetListOfIssuesRequestFilters.

        If set to `true`, only include issues which are patched, if set to `false`, only include issues which are not patched

        :return: The patched of this GetListOfIssuesRequestFilters.
        :rtype: bool
        """
        return self._patched

    @patched.setter
    def patched(self, patched):
        """Sets the patched of this GetListOfIssuesRequestFilters.

        If set to `true`, only include issues which are patched, if set to `false`, only include issues which are not patched

        :param patched: The patched of this GetListOfIssuesRequestFilters.
        :type patched: bool
        """

        self._patched = patched

    @property
    def priority_score(self):
        """Gets the priority_score of this GetListOfIssuesRequestFilters.


        :return: The priority_score of this GetListOfIssuesRequestFilters.
        :rtype: GetIssueCountsRequestFiltersPriorityScore
        """
        return self._priority_score

    @priority_score.setter
    def priority_score(self, priority_score):
        """Sets the priority_score of this GetListOfIssuesRequestFilters.


        :param priority_score: The priority_score of this GetListOfIssuesRequestFilters.
        :type priority_score: GetIssueCountsRequestFiltersPriorityScore
        """

        self._priority_score = priority_score

    @property
    def projects(self):
        """Gets the projects of this GetListOfIssuesRequestFilters.

        The list of project IDs to filter issues by, max projects allowed is 1000

        :return: The projects of this GetListOfIssuesRequestFilters.
        :rtype: object
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this GetListOfIssuesRequestFilters.

        The list of project IDs to filter issues by, max projects allowed is 1000

        :param projects: The projects of this GetListOfIssuesRequestFilters.
        :type projects: object
        """

        self._projects = projects

    @property
    def severity(self):
        """Gets the severity of this GetListOfIssuesRequestFilters.

        The severity levels of issues to filter the results by

        :return: The severity of this GetListOfIssuesRequestFilters.
        :rtype: List[object]
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this GetListOfIssuesRequestFilters.

        The severity levels of issues to filter the results by

        :param severity: The severity of this GetListOfIssuesRequestFilters.
        :type severity: List[object]
        """

        self._severity = severity

    @property
    def types(self):
        """Gets the types of this GetListOfIssuesRequestFilters.

        The type of issues to filter the results by

        :return: The types of this GetListOfIssuesRequestFilters.
        :rtype: List[object]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this GetListOfIssuesRequestFilters.

        The type of issues to filter the results by

        :param types: The types of this GetListOfIssuesRequestFilters.
        :type types: List[object]
        """

        self._types = types
