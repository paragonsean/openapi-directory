# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetProjectCountsRequestFilters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, languages: List[object]=None, orgs: object=None, projects: object=None):
        """GetProjectCountsRequestFilters - a model defined in OpenAPI

        :param languages: The languages of this GetProjectCountsRequestFilters.
        :param orgs: The orgs of this GetProjectCountsRequestFilters.
        :param projects: The projects of this GetProjectCountsRequestFilters.
        """
        self.openapi_types = {
            'languages': List[object],
            'orgs': object,
            'projects': object
        }

        self.attribute_map = {
            'languages': 'languages',
            'orgs': 'orgs',
            'projects': 'projects'
        }

        self._languages = languages
        self._orgs = orgs
        self._projects = projects

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetProjectCountsRequestFilters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Get_project_counts_request_filters of this GetProjectCountsRequestFilters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def languages(self):
        """Gets the languages of this GetProjectCountsRequestFilters.

        The type of languages to filter the results by

        :return: The languages of this GetProjectCountsRequestFilters.
        :rtype: List[object]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this GetProjectCountsRequestFilters.

        The type of languages to filter the results by

        :param languages: The languages of this GetProjectCountsRequestFilters.
        :type languages: List[object]
        """

        self._languages = languages

    @property
    def orgs(self):
        """Gets the orgs of this GetProjectCountsRequestFilters.

        The list of org IDs to filter the results by

        :return: The orgs of this GetProjectCountsRequestFilters.
        :rtype: object
        """
        return self._orgs

    @orgs.setter
    def orgs(self, orgs):
        """Sets the orgs of this GetProjectCountsRequestFilters.

        The list of org IDs to filter the results by

        :param orgs: The orgs of this GetProjectCountsRequestFilters.
        :type orgs: object
        """
        if orgs is None:
            raise ValueError("Invalid value for `orgs`, must not be `None`")

        self._orgs = orgs

    @property
    def projects(self):
        """Gets the projects of this GetProjectCountsRequestFilters.

        The list of project IDs to filter the results by, max projects allowed is 1000

        :return: The projects of this GetProjectCountsRequestFilters.
        :rtype: object
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this GetProjectCountsRequestFilters.

        The list of project IDs to filter the results by, max projects allowed is 1000

        :param projects: The projects of this GetProjectCountsRequestFilters.
        :type projects: object
        """

        self._projects = projects
