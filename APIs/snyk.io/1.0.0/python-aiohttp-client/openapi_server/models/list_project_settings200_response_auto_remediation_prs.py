# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListProjectSettings200ResponseAutoRemediationPrs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backlog_prs_enabled: bool=None, fresh_prs_enabled: bool=None, use_patch_remediation: bool=None):
        """ListProjectSettings200ResponseAutoRemediationPrs - a model defined in OpenAPI

        :param backlog_prs_enabled: The backlog_prs_enabled of this ListProjectSettings200ResponseAutoRemediationPrs.
        :param fresh_prs_enabled: The fresh_prs_enabled of this ListProjectSettings200ResponseAutoRemediationPrs.
        :param use_patch_remediation: The use_patch_remediation of this ListProjectSettings200ResponseAutoRemediationPrs.
        """
        self.openapi_types = {
            'backlog_prs_enabled': bool,
            'fresh_prs_enabled': bool,
            'use_patch_remediation': bool
        }

        self.attribute_map = {
            'backlog_prs_enabled': 'backlogPrsEnabled',
            'fresh_prs_enabled': 'freshPrsEnabled',
            'use_patch_remediation': 'usePatchRemediation'
        }

        self._backlog_prs_enabled = backlog_prs_enabled
        self._fresh_prs_enabled = fresh_prs_enabled
        self._use_patch_remediation = use_patch_remediation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListProjectSettings200ResponseAutoRemediationPrs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The List_project_settings_200_response_autoRemediationPrs of this ListProjectSettings200ResponseAutoRemediationPrs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backlog_prs_enabled(self):
        """Gets the backlog_prs_enabled of this ListProjectSettings200ResponseAutoRemediationPrs.

        If true, allows automatic remediation of newly identified issues, or older issues where a fix has been identified

        :return: The backlog_prs_enabled of this ListProjectSettings200ResponseAutoRemediationPrs.
        :rtype: bool
        """
        return self._backlog_prs_enabled

    @backlog_prs_enabled.setter
    def backlog_prs_enabled(self, backlog_prs_enabled):
        """Sets the backlog_prs_enabled of this ListProjectSettings200ResponseAutoRemediationPrs.

        If true, allows automatic remediation of newly identified issues, or older issues where a fix has been identified

        :param backlog_prs_enabled: The backlog_prs_enabled of this ListProjectSettings200ResponseAutoRemediationPrs.
        :type backlog_prs_enabled: bool
        """

        self._backlog_prs_enabled = backlog_prs_enabled

    @property
    def fresh_prs_enabled(self):
        """Gets the fresh_prs_enabled of this ListProjectSettings200ResponseAutoRemediationPrs.

        If true, allows automatic remediation of prioritized backlog issues

        :return: The fresh_prs_enabled of this ListProjectSettings200ResponseAutoRemediationPrs.
        :rtype: bool
        """
        return self._fresh_prs_enabled

    @fresh_prs_enabled.setter
    def fresh_prs_enabled(self, fresh_prs_enabled):
        """Sets the fresh_prs_enabled of this ListProjectSettings200ResponseAutoRemediationPrs.

        If true, allows automatic remediation of prioritized backlog issues

        :param fresh_prs_enabled: The fresh_prs_enabled of this ListProjectSettings200ResponseAutoRemediationPrs.
        :type fresh_prs_enabled: bool
        """

        self._fresh_prs_enabled = fresh_prs_enabled

    @property
    def use_patch_remediation(self):
        """Gets the use_patch_remediation of this ListProjectSettings200ResponseAutoRemediationPrs.

        If true, allows using patched remediation

        :return: The use_patch_remediation of this ListProjectSettings200ResponseAutoRemediationPrs.
        :rtype: bool
        """
        return self._use_patch_remediation

    @use_patch_remediation.setter
    def use_patch_remediation(self, use_patch_remediation):
        """Sets the use_patch_remediation of this ListProjectSettings200ResponseAutoRemediationPrs.

        If true, allows using patched remediation

        :param use_patch_remediation: The use_patch_remediation of this ListProjectSettings200ResponseAutoRemediationPrs.
        :type use_patch_remediation: bool
        """

        self._use_patch_remediation = use_patch_remediation
