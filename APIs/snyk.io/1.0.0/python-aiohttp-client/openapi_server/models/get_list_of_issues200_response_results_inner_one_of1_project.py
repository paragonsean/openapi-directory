# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetListOfIssues200ResponseResultsInnerOneOf1Project(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, package_manager: str=None, source: str=None, target_file: str=None, url: str=None):
        """GetListOfIssues200ResponseResultsInnerOneOf1Project - a model defined in OpenAPI

        :param id: The id of this GetListOfIssues200ResponseResultsInnerOneOf1Project.
        :param name: The name of this GetListOfIssues200ResponseResultsInnerOneOf1Project.
        :param package_manager: The package_manager of this GetListOfIssues200ResponseResultsInnerOneOf1Project.
        :param source: The source of this GetListOfIssues200ResponseResultsInnerOneOf1Project.
        :param target_file: The target_file of this GetListOfIssues200ResponseResultsInnerOneOf1Project.
        :param url: The url of this GetListOfIssues200ResponseResultsInnerOneOf1Project.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'package_manager': str,
            'source': str,
            'target_file': str,
            'url': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'package_manager': 'packageManager',
            'source': 'source',
            'target_file': 'targetFile',
            'url': 'url'
        }

        self._id = id
        self._name = name
        self._package_manager = package_manager
        self._source = source
        self._target_file = target_file
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetListOfIssues200ResponseResultsInnerOneOf1Project':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Get_list_of_issues_200_response_results_inner_oneOf_1_project of this GetListOfIssues200ResponseResultsInnerOneOf1Project.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this GetListOfIssues200ResponseResultsInnerOneOf1Project.

        The identifier of the project

        :return: The id of this GetListOfIssues200ResponseResultsInnerOneOf1Project.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetListOfIssues200ResponseResultsInnerOneOf1Project.

        The identifier of the project

        :param id: The id of this GetListOfIssues200ResponseResultsInnerOneOf1Project.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this GetListOfIssues200ResponseResultsInnerOneOf1Project.

        The name of the project

        :return: The name of this GetListOfIssues200ResponseResultsInnerOneOf1Project.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetListOfIssues200ResponseResultsInnerOneOf1Project.

        The name of the project

        :param name: The name of this GetListOfIssues200ResponseResultsInnerOneOf1Project.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def package_manager(self):
        """Gets the package_manager of this GetListOfIssues200ResponseResultsInnerOneOf1Project.

        The package manager for the project (e.g. npm, rubygems etc)

        :return: The package_manager of this GetListOfIssues200ResponseResultsInnerOneOf1Project.
        :rtype: str
        """
        return self._package_manager

    @package_manager.setter
    def package_manager(self, package_manager):
        """Sets the package_manager of this GetListOfIssues200ResponseResultsInnerOneOf1Project.

        The package manager for the project (e.g. npm, rubygems etc)

        :param package_manager: The package_manager of this GetListOfIssues200ResponseResultsInnerOneOf1Project.
        :type package_manager: str
        """
        if package_manager is None:
            raise ValueError("Invalid value for `package_manager`, must not be `None`")

        self._package_manager = package_manager

    @property
    def source(self):
        """Gets the source of this GetListOfIssues200ResponseResultsInnerOneOf1Project.

        The source of the project (e.g. github, heroku etc)

        :return: The source of this GetListOfIssues200ResponseResultsInnerOneOf1Project.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this GetListOfIssues200ResponseResultsInnerOneOf1Project.

        The source of the project (e.g. github, heroku etc)

        :param source: The source of this GetListOfIssues200ResponseResultsInnerOneOf1Project.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def target_file(self):
        """Gets the target_file of this GetListOfIssues200ResponseResultsInnerOneOf1Project.

        The file path to the dependency manifest or lock file (e.g. package.json, Gemfile.lock etc)

        :return: The target_file of this GetListOfIssues200ResponseResultsInnerOneOf1Project.
        :rtype: str
        """
        return self._target_file

    @target_file.setter
    def target_file(self, target_file):
        """Sets the target_file of this GetListOfIssues200ResponseResultsInnerOneOf1Project.

        The file path to the dependency manifest or lock file (e.g. package.json, Gemfile.lock etc)

        :param target_file: The target_file of this GetListOfIssues200ResponseResultsInnerOneOf1Project.
        :type target_file: str
        """

        self._target_file = target_file

    @property
    def url(self):
        """Gets the url of this GetListOfIssues200ResponseResultsInnerOneOf1Project.

        URL to a page containing information about the project

        :return: The url of this GetListOfIssues200ResponseResultsInnerOneOf1Project.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GetListOfIssues200ResponseResultsInnerOneOf1Project.

        URL to a page containing information about the project

        :param url: The url of this GetListOfIssues200ResponseResultsInnerOneOf1Project.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
