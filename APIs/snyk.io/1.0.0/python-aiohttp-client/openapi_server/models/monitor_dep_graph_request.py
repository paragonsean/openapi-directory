# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.monitor_dep_graph_request_dep_graph import MonitorDepGraphRequestDepGraph
from openapi_server.models.monitor_dep_graph_request_meta import MonitorDepGraphRequestMeta
from openapi_server import util


class MonitorDepGraphRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dep_graph: MonitorDepGraphRequestDepGraph=None, meta: MonitorDepGraphRequestMeta=None):
        """MonitorDepGraphRequest - a model defined in OpenAPI

        :param dep_graph: The dep_graph of this MonitorDepGraphRequest.
        :param meta: The meta of this MonitorDepGraphRequest.
        """
        self.openapi_types = {
            'dep_graph': MonitorDepGraphRequestDepGraph,
            'meta': MonitorDepGraphRequestMeta
        }

        self.attribute_map = {
            'dep_graph': 'depGraph',
            'meta': 'meta'
        }

        self._dep_graph = dep_graph
        self._meta = meta

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonitorDepGraphRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Monitor_Dep_Graph_request of this MonitorDepGraphRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dep_graph(self):
        """Gets the dep_graph of this MonitorDepGraphRequest.


        :return: The dep_graph of this MonitorDepGraphRequest.
        :rtype: MonitorDepGraphRequestDepGraph
        """
        return self._dep_graph

    @dep_graph.setter
    def dep_graph(self, dep_graph):
        """Sets the dep_graph of this MonitorDepGraphRequest.


        :param dep_graph: The dep_graph of this MonitorDepGraphRequest.
        :type dep_graph: MonitorDepGraphRequestDepGraph
        """
        if dep_graph is None:
            raise ValueError("Invalid value for `dep_graph`, must not be `None`")

        self._dep_graph = dep_graph

    @property
    def meta(self):
        """Gets the meta of this MonitorDepGraphRequest.


        :return: The meta of this MonitorDepGraphRequest.
        :rtype: MonitorDepGraphRequestMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this MonitorDepGraphRequest.


        :param meta: The meta of this MonitorDepGraphRequest.
        :type meta: MonitorDepGraphRequestMeta
        """

        self._meta = meta
