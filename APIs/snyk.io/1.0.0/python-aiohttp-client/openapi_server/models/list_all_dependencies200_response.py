# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_all_dependencies200_response_results_inner import ListAllDependencies200ResponseResultsInner
from openapi_server import util


class ListAllDependencies200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, results: List[ListAllDependencies200ResponseResultsInner]=None, total: float=None):
        """ListAllDependencies200Response - a model defined in OpenAPI

        :param results: The results of this ListAllDependencies200Response.
        :param total: The total of this ListAllDependencies200Response.
        """
        self.openapi_types = {
            'results': List[ListAllDependencies200ResponseResultsInner],
            'total': float
        }

        self.attribute_map = {
            'results': 'results',
            'total': 'total'
        }

        self._results = results
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListAllDependencies200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The List_all_dependencies_200_response of this ListAllDependencies200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def results(self):
        """Gets the results of this ListAllDependencies200Response.

        A list of issues

        :return: The results of this ListAllDependencies200Response.
        :rtype: List[ListAllDependencies200ResponseResultsInner]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this ListAllDependencies200Response.

        A list of issues

        :param results: The results of this ListAllDependencies200Response.
        :type results: List[ListAllDependencies200ResponseResultsInner]
        """
        if results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")

        self._results = results

    @property
    def total(self):
        """Gets the total of this ListAllDependencies200Response.

        The number of results returned

        :return: The total of this ListAllDependencies200Response.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ListAllDependencies200Response.

        The number of results returned

        :param total: The total of this ListAllDependencies200Response.
        :type total: float
        """

        self._total = total
