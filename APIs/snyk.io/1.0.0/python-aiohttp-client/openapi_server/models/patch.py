# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Patch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comments: List[object]=None, id: str=None, modification_time: str=None, urls: List[object]=None, version: str=None):
        """Patch - a model defined in OpenAPI

        :param comments: The comments of this Patch.
        :param id: The id of this Patch.
        :param modification_time: The modification_time of this Patch.
        :param urls: The urls of this Patch.
        :param version: The version of this Patch.
        """
        self.openapi_types = {
            'comments': List[object],
            'id': str,
            'modification_time': str,
            'urls': List[object],
            'version': str
        }

        self.attribute_map = {
            'comments': 'comments',
            'id': 'id',
            'modification_time': 'modificationTime',
            'urls': 'urls',
            'version': 'version'
        }

        self._comments = comments
        self._id = id
        self._modification_time = modification_time
        self._urls = urls
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Patch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Patch of this Patch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comments(self):
        """Gets the comments of this Patch.


        :return: The comments of this Patch.
        :rtype: List[object]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Patch.


        :param comments: The comments of this Patch.
        :type comments: List[object]
        """

        self._comments = comments

    @property
    def id(self):
        """Gets the id of this Patch.


        :return: The id of this Patch.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Patch.


        :param id: The id of this Patch.
        :type id: str
        """

        self._id = id

    @property
    def modification_time(self):
        """Gets the modification_time of this Patch.


        :return: The modification_time of this Patch.
        :rtype: str
        """
        return self._modification_time

    @modification_time.setter
    def modification_time(self, modification_time):
        """Sets the modification_time of this Patch.


        :param modification_time: The modification_time of this Patch.
        :type modification_time: str
        """

        self._modification_time = modification_time

    @property
    def urls(self):
        """Gets the urls of this Patch.

        Links to patch files to fix an issue.

        :return: The urls of this Patch.
        :rtype: List[object]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this Patch.

        Links to patch files to fix an issue.

        :param urls: The urls of this Patch.
        :type urls: List[object]
        """

        self._urls = urls

    @property
    def version(self):
        """Gets the version of this Patch.

        Versions this patch is applicable to, in semver format.

        :return: The version of this Patch.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Patch.

        Versions this patch is applicable to, in semver format.

        :param version: The version of this Patch.
        :type version: str
        """

        self._version = version
