# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetListOfIssues200ResponseResultsInnerOneOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, projects: List[object]=None):
        """GetListOfIssues200ResponseResultsInnerOneOf - a model defined in OpenAPI

        :param projects: The projects of this GetListOfIssues200ResponseResultsInnerOneOf.
        """
        self.openapi_types = {
            'projects': List[object]
        }

        self.attribute_map = {
            'projects': 'projects'
        }

        self._projects = projects

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetListOfIssues200ResponseResultsInnerOneOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Get_list_of_issues_200_response_results_inner_oneOf of this GetListOfIssues200ResponseResultsInnerOneOf.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def projects(self):
        """Gets the projects of this GetListOfIssues200ResponseResultsInnerOneOf.

        When `groupBy` is used, multiple projects may be returned per issue

        :return: The projects of this GetListOfIssues200ResponseResultsInnerOneOf.
        :rtype: List[object]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this GetListOfIssues200ResponseResultsInnerOneOf.

        When `groupBy` is used, multiple projects may be returned per issue

        :param projects: The projects of this GetListOfIssues200ResponseResultsInnerOneOf.
        :type projects: List[object]
        """
        if projects is None:
            raise ValueError("Invalid value for `projects`, must not be `None`")

        self._projects = projects
