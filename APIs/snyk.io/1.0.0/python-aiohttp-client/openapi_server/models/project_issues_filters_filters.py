# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.project_issues_filters_filters_priority_score import ProjectIssuesFiltersFiltersPriorityScore
from openapi_server import util


class ProjectIssuesFiltersFilters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exploit_maturity: List[object]=None, ignored: bool=None, patched: bool=None, priority_score: ProjectIssuesFiltersFiltersPriorityScore=None, severities: List[object]=None, types: List[object]=None):
        """ProjectIssuesFiltersFilters - a model defined in OpenAPI

        :param exploit_maturity: The exploit_maturity of this ProjectIssuesFiltersFilters.
        :param ignored: The ignored of this ProjectIssuesFiltersFilters.
        :param patched: The patched of this ProjectIssuesFiltersFilters.
        :param priority_score: The priority_score of this ProjectIssuesFiltersFilters.
        :param severities: The severities of this ProjectIssuesFiltersFilters.
        :param types: The types of this ProjectIssuesFiltersFilters.
        """
        self.openapi_types = {
            'exploit_maturity': List[object],
            'ignored': bool,
            'patched': bool,
            'priority_score': ProjectIssuesFiltersFiltersPriorityScore,
            'severities': List[object],
            'types': List[object]
        }

        self.attribute_map = {
            'exploit_maturity': 'exploitMaturity',
            'ignored': 'ignored',
            'patched': 'patched',
            'priority_score': 'priorityScore',
            'severities': 'severities',
            'types': 'types'
        }

        self._exploit_maturity = exploit_maturity
        self._ignored = ignored
        self._patched = patched
        self._priority_score = priority_score
        self._severities = severities
        self._types = types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectIssuesFiltersFilters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Project_issues_filters_filters of this ProjectIssuesFiltersFilters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exploit_maturity(self):
        """Gets the exploit_maturity of this ProjectIssuesFiltersFilters.

        The exploit maturity levels of issues to filter the results by

        :return: The exploit_maturity of this ProjectIssuesFiltersFilters.
        :rtype: List[object]
        """
        return self._exploit_maturity

    @exploit_maturity.setter
    def exploit_maturity(self, exploit_maturity):
        """Sets the exploit_maturity of this ProjectIssuesFiltersFilters.

        The exploit maturity levels of issues to filter the results by

        :param exploit_maturity: The exploit_maturity of this ProjectIssuesFiltersFilters.
        :type exploit_maturity: List[object]
        """

        self._exploit_maturity = exploit_maturity

    @property
    def ignored(self):
        """Gets the ignored of this ProjectIssuesFiltersFilters.

        If set to `true`, only include issues which are ignored, if set to `false`, only include issues which are not ignored

        :return: The ignored of this ProjectIssuesFiltersFilters.
        :rtype: bool
        """
        return self._ignored

    @ignored.setter
    def ignored(self, ignored):
        """Sets the ignored of this ProjectIssuesFiltersFilters.

        If set to `true`, only include issues which are ignored, if set to `false`, only include issues which are not ignored

        :param ignored: The ignored of this ProjectIssuesFiltersFilters.
        :type ignored: bool
        """

        self._ignored = ignored

    @property
    def patched(self):
        """Gets the patched of this ProjectIssuesFiltersFilters.

        If set to `true`, only include issues which are patched, if set to `false`, only include issues which are not patched

        :return: The patched of this ProjectIssuesFiltersFilters.
        :rtype: bool
        """
        return self._patched

    @patched.setter
    def patched(self, patched):
        """Sets the patched of this ProjectIssuesFiltersFilters.

        If set to `true`, only include issues which are patched, if set to `false`, only include issues which are not patched

        :param patched: The patched of this ProjectIssuesFiltersFilters.
        :type patched: bool
        """

        self._patched = patched

    @property
    def priority_score(self):
        """Gets the priority_score of this ProjectIssuesFiltersFilters.


        :return: The priority_score of this ProjectIssuesFiltersFilters.
        :rtype: ProjectIssuesFiltersFiltersPriorityScore
        """
        return self._priority_score

    @priority_score.setter
    def priority_score(self, priority_score):
        """Sets the priority_score of this ProjectIssuesFiltersFilters.


        :param priority_score: The priority_score of this ProjectIssuesFiltersFilters.
        :type priority_score: ProjectIssuesFiltersFiltersPriorityScore
        """

        self._priority_score = priority_score

    @property
    def severities(self):
        """Gets the severities of this ProjectIssuesFiltersFilters.

        The severity levels of issues to filter the results by

        :return: The severities of this ProjectIssuesFiltersFilters.
        :rtype: List[object]
        """
        return self._severities

    @severities.setter
    def severities(self, severities):
        """Sets the severities of this ProjectIssuesFiltersFilters.

        The severity levels of issues to filter the results by

        :param severities: The severities of this ProjectIssuesFiltersFilters.
        :type severities: List[object]
        """

        self._severities = severities

    @property
    def types(self):
        """Gets the types of this ProjectIssuesFiltersFilters.

        The type of issues to filter the results by

        :return: The types of this ProjectIssuesFiltersFilters.
        :rtype: List[object]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this ProjectIssuesFiltersFilters.

        The type of issues to filter the results by

        :param types: The types of this ProjectIssuesFiltersFilters.
        :type types: List[object]
        """

        self._types = types
