# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewIssuesNotificationSettingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, issue_severity: str=None, issue_type: str=None):
        """NewIssuesNotificationSettingRequest - a model defined in OpenAPI

        :param enabled: The enabled of this NewIssuesNotificationSettingRequest.
        :param issue_severity: The issue_severity of this NewIssuesNotificationSettingRequest.
        :param issue_type: The issue_type of this NewIssuesNotificationSettingRequest.
        """
        self.openapi_types = {
            'enabled': bool,
            'issue_severity': str,
            'issue_type': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'issue_severity': 'issueSeverity',
            'issue_type': 'issueType'
        }

        self._enabled = enabled
        self._issue_severity = issue_severity
        self._issue_type = issue_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewIssuesNotificationSettingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The New_issues_notification_setting_request of this NewIssuesNotificationSettingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this NewIssuesNotificationSettingRequest.

        Whether notifications should be sent

        :return: The enabled of this NewIssuesNotificationSettingRequest.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this NewIssuesNotificationSettingRequest.

        Whether notifications should be sent

        :param enabled: The enabled of this NewIssuesNotificationSettingRequest.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def issue_severity(self):
        """Gets the issue_severity of this NewIssuesNotificationSettingRequest.

        The severity levels of issues to send notifications for (only applicable for `new-remediations-vulnerabilities` notificationType)

        :return: The issue_severity of this NewIssuesNotificationSettingRequest.
        :rtype: str
        """
        return self._issue_severity

    @issue_severity.setter
    def issue_severity(self, issue_severity):
        """Sets the issue_severity of this NewIssuesNotificationSettingRequest.

        The severity levels of issues to send notifications for (only applicable for `new-remediations-vulnerabilities` notificationType)

        :param issue_severity: The issue_severity of this NewIssuesNotificationSettingRequest.
        :type issue_severity: str
        """
        allowed_values = ["all", "high"]  # noqa: E501
        if issue_severity not in allowed_values:
            raise ValueError(
                "Invalid value for `issue_severity` ({0}), must be one of {1}"
                .format(issue_severity, allowed_values)
            )

        self._issue_severity = issue_severity

    @property
    def issue_type(self):
        """Gets the issue_type of this NewIssuesNotificationSettingRequest.

        Filter the types of issue to include in notifications (only applicable for `new-remediations-vulnerabilities` notificationType)

        :return: The issue_type of this NewIssuesNotificationSettingRequest.
        :rtype: str
        """
        return self._issue_type

    @issue_type.setter
    def issue_type(self, issue_type):
        """Sets the issue_type of this NewIssuesNotificationSettingRequest.

        Filter the types of issue to include in notifications (only applicable for `new-remediations-vulnerabilities` notificationType)

        :param issue_type: The issue_type of this NewIssuesNotificationSettingRequest.
        :type issue_type: str
        """
        allowed_values = ["all", "vuln", "license", "none"]  # noqa: E501
        if issue_type not in allowed_values:
            raise ValueError(
                "Invalid value for `issue_type` ({0}), must be one of {1}"
                .format(issue_type, allowed_values)
            )

        self._issue_type = issue_type
