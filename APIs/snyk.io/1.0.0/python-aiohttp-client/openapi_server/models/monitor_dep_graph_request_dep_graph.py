# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.monitor_dep_graph_request_dep_graph_graph import MonitorDepGraphRequestDepGraphGraph
from openapi_server.models.monitor_dep_graph_request_dep_graph_pkg_manager import MonitorDepGraphRequestDepGraphPkgManager
from openapi_server import util


class MonitorDepGraphRequestDepGraph(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, graph: MonitorDepGraphRequestDepGraphGraph=None, pkg_manager: MonitorDepGraphRequestDepGraphPkgManager=None, pkgs: List[object]=None, schema_version: str=None):
        """MonitorDepGraphRequestDepGraph - a model defined in OpenAPI

        :param graph: The graph of this MonitorDepGraphRequestDepGraph.
        :param pkg_manager: The pkg_manager of this MonitorDepGraphRequestDepGraph.
        :param pkgs: The pkgs of this MonitorDepGraphRequestDepGraph.
        :param schema_version: The schema_version of this MonitorDepGraphRequestDepGraph.
        """
        self.openapi_types = {
            'graph': MonitorDepGraphRequestDepGraphGraph,
            'pkg_manager': MonitorDepGraphRequestDepGraphPkgManager,
            'pkgs': List[object],
            'schema_version': str
        }

        self.attribute_map = {
            'graph': 'graph',
            'pkg_manager': 'pkgManager',
            'pkgs': 'pkgs',
            'schema_version': 'schemaVersion'
        }

        self._graph = graph
        self._pkg_manager = pkg_manager
        self._pkgs = pkgs
        self._schema_version = schema_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonitorDepGraphRequestDepGraph':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Monitor_Dep_Graph_request_depGraph of this MonitorDepGraphRequestDepGraph.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def graph(self):
        """Gets the graph of this MonitorDepGraphRequestDepGraph.


        :return: The graph of this MonitorDepGraphRequestDepGraph.
        :rtype: MonitorDepGraphRequestDepGraphGraph
        """
        return self._graph

    @graph.setter
    def graph(self, graph):
        """Sets the graph of this MonitorDepGraphRequestDepGraph.


        :param graph: The graph of this MonitorDepGraphRequestDepGraph.
        :type graph: MonitorDepGraphRequestDepGraphGraph
        """
        if graph is None:
            raise ValueError("Invalid value for `graph`, must not be `None`")

        self._graph = graph

    @property
    def pkg_manager(self):
        """Gets the pkg_manager of this MonitorDepGraphRequestDepGraph.


        :return: The pkg_manager of this MonitorDepGraphRequestDepGraph.
        :rtype: MonitorDepGraphRequestDepGraphPkgManager
        """
        return self._pkg_manager

    @pkg_manager.setter
    def pkg_manager(self, pkg_manager):
        """Sets the pkg_manager of this MonitorDepGraphRequestDepGraph.


        :param pkg_manager: The pkg_manager of this MonitorDepGraphRequestDepGraph.
        :type pkg_manager: MonitorDepGraphRequestDepGraphPkgManager
        """
        if pkg_manager is None:
            raise ValueError("Invalid value for `pkg_manager`, must not be `None`")

        self._pkg_manager = pkg_manager

    @property
    def pkgs(self):
        """Gets the pkgs of this MonitorDepGraphRequestDepGraph.

        Array of package dependencies.

        :return: The pkgs of this MonitorDepGraphRequestDepGraph.
        :rtype: List[object]
        """
        return self._pkgs

    @pkgs.setter
    def pkgs(self, pkgs):
        """Sets the pkgs of this MonitorDepGraphRequestDepGraph.

        Array of package dependencies.

        :param pkgs: The pkgs of this MonitorDepGraphRequestDepGraph.
        :type pkgs: List[object]
        """
        if pkgs is None:
            raise ValueError("Invalid value for `pkgs`, must not be `None`")

        self._pkgs = pkgs

    @property
    def schema_version(self):
        """Gets the schema_version of this MonitorDepGraphRequestDepGraph.

        Snyk DepGraph library schema version.

        :return: The schema_version of this MonitorDepGraphRequestDepGraph.
        :rtype: str
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this MonitorDepGraphRequestDepGraph.

        Snyk DepGraph library schema version.

        :param schema_version: The schema_version of this MonitorDepGraphRequestDepGraph.
        :type schema_version: str
        """
        if schema_version is None:
            raise ValueError("Invalid value for `schema_version`, must not be `None`")

        self._schema_version = schema_version
