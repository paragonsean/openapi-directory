# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IgnoreRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disregard_if_fixable: bool=None, expires: str=None, ignore_path: str=None, reason: str=None, reason_type: str=None):
        """IgnoreRule - a model defined in OpenAPI

        :param disregard_if_fixable: The disregard_if_fixable of this IgnoreRule.
        :param expires: The expires of this IgnoreRule.
        :param ignore_path: The ignore_path of this IgnoreRule.
        :param reason: The reason of this IgnoreRule.
        :param reason_type: The reason_type of this IgnoreRule.
        """
        self.openapi_types = {
            'disregard_if_fixable': bool,
            'expires': str,
            'ignore_path': str,
            'reason': str,
            'reason_type': str
        }

        self.attribute_map = {
            'disregard_if_fixable': 'disregardIfFixable',
            'expires': 'expires',
            'ignore_path': 'ignorePath',
            'reason': 'reason',
            'reason_type': 'reasonType'
        }

        self._disregard_if_fixable = disregard_if_fixable
        self._expires = expires
        self._ignore_path = ignore_path
        self._reason = reason
        self._reason_type = reason_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IgnoreRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Ignore_rule of this IgnoreRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disregard_if_fixable(self):
        """Gets the disregard_if_fixable of this IgnoreRule.

        Only ignore the issue if no upgrade or patch is available.

        :return: The disregard_if_fixable of this IgnoreRule.
        :rtype: bool
        """
        return self._disregard_if_fixable

    @disregard_if_fixable.setter
    def disregard_if_fixable(self, disregard_if_fixable):
        """Sets the disregard_if_fixable of this IgnoreRule.

        Only ignore the issue if no upgrade or patch is available.

        :param disregard_if_fixable: The disregard_if_fixable of this IgnoreRule.
        :type disregard_if_fixable: bool
        """
        if disregard_if_fixable is None:
            raise ValueError("Invalid value for `disregard_if_fixable`, must not be `None`")

        self._disregard_if_fixable = disregard_if_fixable

    @property
    def expires(self):
        """Gets the expires of this IgnoreRule.

        The timestamp that the issue will no longer be ignored.

        :return: The expires of this IgnoreRule.
        :rtype: str
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this IgnoreRule.

        The timestamp that the issue will no longer be ignored.

        :param expires: The expires of this IgnoreRule.
        :type expires: str
        """

        self._expires = expires

    @property
    def ignore_path(self):
        """Gets the ignore_path of this IgnoreRule.

        The path to ignore (default is `*` which represents all paths).

        :return: The ignore_path of this IgnoreRule.
        :rtype: str
        """
        return self._ignore_path

    @ignore_path.setter
    def ignore_path(self, ignore_path):
        """Sets the ignore_path of this IgnoreRule.

        The path to ignore (default is `*` which represents all paths).

        :param ignore_path: The ignore_path of this IgnoreRule.
        :type ignore_path: str
        """

        self._ignore_path = ignore_path

    @property
    def reason(self):
        """Gets the reason of this IgnoreRule.

        The reason that the issue was ignored.

        :return: The reason of this IgnoreRule.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this IgnoreRule.

        The reason that the issue was ignored.

        :param reason: The reason of this IgnoreRule.
        :type reason: str
        """

        self._reason = reason

    @property
    def reason_type(self):
        """Gets the reason_type of this IgnoreRule.

        The classification of the ignore.

        :return: The reason_type of this IgnoreRule.
        :rtype: str
        """
        return self._reason_type

    @reason_type.setter
    def reason_type(self, reason_type):
        """Sets the reason_type of this IgnoreRule.

        The classification of the ignore.

        :param reason_type: The reason_type of this IgnoreRule.
        :type reason_type: str
        """
        allowed_values = ["not-vulnerable", "wont-fix", "temporary-ignore"]  # noqa: E501
        if reason_type not in allowed_values:
            raise ValueError(
                "Invalid value for `reason_type` ({0}), must be one of {1}"
                .format(reason_type, allowed_values)
            )

        self._reason_type = reason_type
