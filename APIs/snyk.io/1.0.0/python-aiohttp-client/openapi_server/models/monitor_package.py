# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.monitor_package_info import MonitorPackageInfo
from openapi_server import util


class MonitorPackage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, info: MonitorPackageInfo=None):
        """MonitorPackage - a model defined in OpenAPI

        :param id: The id of this MonitorPackage.
        :param info: The info of this MonitorPackage.
        """
        self.openapi_types = {
            'id': str,
            'info': MonitorPackageInfo
        }

        self.attribute_map = {
            'id': 'id',
            'info': 'info'
        }

        self._id = id
        self._info = info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonitorPackage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MonitorPackage of this MonitorPackage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MonitorPackage.

        Unique package identifier, should take the format name@version.

        :return: The id of this MonitorPackage.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MonitorPackage.

        Unique package identifier, should take the format name@version.

        :param id: The id of this MonitorPackage.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def info(self):
        """Gets the info of this MonitorPackage.


        :return: The info of this MonitorPackage.
        :rtype: MonitorPackageInfo
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this MonitorPackage.


        :param info: The info of this MonitorPackage.
        :type info: MonitorPackageInfo
        """
        if info is None:
            raise ValueError("Invalid value for `info`, must not be `None`")

        self._info = info
