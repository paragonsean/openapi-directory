# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListAllLicensesRequestFilters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dependencies: object=None, languages: List[object]=None, licenses: object=None, projects: object=None, severity: List[object]=None):
        """ListAllLicensesRequestFilters - a model defined in OpenAPI

        :param dependencies: The dependencies of this ListAllLicensesRequestFilters.
        :param languages: The languages of this ListAllLicensesRequestFilters.
        :param licenses: The licenses of this ListAllLicensesRequestFilters.
        :param projects: The projects of this ListAllLicensesRequestFilters.
        :param severity: The severity of this ListAllLicensesRequestFilters.
        """
        self.openapi_types = {
            'dependencies': object,
            'languages': List[object],
            'licenses': object,
            'projects': object,
            'severity': List[object]
        }

        self.attribute_map = {
            'dependencies': 'dependencies',
            'languages': 'languages',
            'licenses': 'licenses',
            'projects': 'projects',
            'severity': 'severity'
        }

        self._dependencies = dependencies
        self._languages = languages
        self._licenses = licenses
        self._projects = projects
        self._severity = severity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListAllLicensesRequestFilters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The List_all_licenses_request_filters of this ListAllLicensesRequestFilters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dependencies(self):
        """Gets the dependencies of this ListAllLicensesRequestFilters.

        The list of dependency IDs to filter the results by

        :return: The dependencies of this ListAllLicensesRequestFilters.
        :rtype: object
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this ListAllLicensesRequestFilters.

        The list of dependency IDs to filter the results by

        :param dependencies: The dependencies of this ListAllLicensesRequestFilters.
        :type dependencies: object
        """

        self._dependencies = dependencies

    @property
    def languages(self):
        """Gets the languages of this ListAllLicensesRequestFilters.

        The type of languages to filter the results by

        :return: The languages of this ListAllLicensesRequestFilters.
        :rtype: List[object]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this ListAllLicensesRequestFilters.

        The type of languages to filter the results by

        :param languages: The languages of this ListAllLicensesRequestFilters.
        :type languages: List[object]
        """

        self._languages = languages

    @property
    def licenses(self):
        """Gets the licenses of this ListAllLicensesRequestFilters.

        The list of license IDs to filter the results by

        :return: The licenses of this ListAllLicensesRequestFilters.
        :rtype: object
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses):
        """Sets the licenses of this ListAllLicensesRequestFilters.

        The list of license IDs to filter the results by

        :param licenses: The licenses of this ListAllLicensesRequestFilters.
        :type licenses: object
        """

        self._licenses = licenses

    @property
    def projects(self):
        """Gets the projects of this ListAllLicensesRequestFilters.

        The list of project IDs to filter the results by

        :return: The projects of this ListAllLicensesRequestFilters.
        :rtype: object
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this ListAllLicensesRequestFilters.

        The list of project IDs to filter the results by

        :param projects: The projects of this ListAllLicensesRequestFilters.
        :type projects: object
        """

        self._projects = projects

    @property
    def severity(self):
        """Gets the severity of this ListAllLicensesRequestFilters.

        The severities to filter the results by

        :return: The severity of this ListAllLicensesRequestFilters.
        :rtype: List[object]
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ListAllLicensesRequestFilters.

        The severities to filter the results by

        :param severity: The severity of this ListAllLicensesRequestFilters.
        :type severity: List[object]
        """

        self._severity = severity
