# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_issue_counts200_response_results_inner_fixable import GetIssueCounts200ResponseResultsInnerFixable
from openapi_server.models.get_issue_counts200_response_results_inner_severity import GetIssueCounts200ResponseResultsInnerSeverity
from openapi_server import util


class GetIssueCounts200ResponseResultsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: float=None, day: str=None, fixable: GetIssueCounts200ResponseResultsInnerFixable=None, severity: GetIssueCounts200ResponseResultsInnerSeverity=None):
        """GetIssueCounts200ResponseResultsInner - a model defined in OpenAPI

        :param count: The count of this GetIssueCounts200ResponseResultsInner.
        :param day: The day of this GetIssueCounts200ResponseResultsInner.
        :param fixable: The fixable of this GetIssueCounts200ResponseResultsInner.
        :param severity: The severity of this GetIssueCounts200ResponseResultsInner.
        """
        self.openapi_types = {
            'count': float,
            'day': str,
            'fixable': GetIssueCounts200ResponseResultsInnerFixable,
            'severity': GetIssueCounts200ResponseResultsInnerSeverity
        }

        self.attribute_map = {
            'count': 'count',
            'day': 'day',
            'fixable': 'fixable',
            'severity': 'severity'
        }

        self._count = count
        self._day = day
        self._fixable = fixable
        self._severity = severity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetIssueCounts200ResponseResultsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Get_issue_counts_200_response_results_inner of this GetIssueCounts200ResponseResultsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this GetIssueCounts200ResponseResultsInner.

        The number of issues

        :return: The count of this GetIssueCounts200ResponseResultsInner.
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this GetIssueCounts200ResponseResultsInner.

        The number of issues

        :param count: The count of this GetIssueCounts200ResponseResultsInner.
        :type count: float
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def day(self):
        """Gets the day of this GetIssueCounts200ResponseResultsInner.

        The date in the format `YYYY-MM-DD`

        :return: The day of this GetIssueCounts200ResponseResultsInner.
        :rtype: str
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this GetIssueCounts200ResponseResultsInner.

        The date in the format `YYYY-MM-DD`

        :param day: The day of this GetIssueCounts200ResponseResultsInner.
        :type day: str
        """
        if day is None:
            raise ValueError("Invalid value for `day`, must not be `None`")

        self._day = day

    @property
    def fixable(self):
        """Gets the fixable of this GetIssueCounts200ResponseResultsInner.


        :return: The fixable of this GetIssueCounts200ResponseResultsInner.
        :rtype: GetIssueCounts200ResponseResultsInnerFixable
        """
        return self._fixable

    @fixable.setter
    def fixable(self, fixable):
        """Sets the fixable of this GetIssueCounts200ResponseResultsInner.


        :param fixable: The fixable of this GetIssueCounts200ResponseResultsInner.
        :type fixable: GetIssueCounts200ResponseResultsInnerFixable
        """

        self._fixable = fixable

    @property
    def severity(self):
        """Gets the severity of this GetIssueCounts200ResponseResultsInner.


        :return: The severity of this GetIssueCounts200ResponseResultsInner.
        :rtype: GetIssueCounts200ResponseResultsInnerSeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this GetIssueCounts200ResponseResultsInner.


        :param severity: The severity of this GetIssueCounts200ResponseResultsInner.
        :type severity: GetIssueCounts200ResponseResultsInnerSeverity
        """

        self._severity = severity
