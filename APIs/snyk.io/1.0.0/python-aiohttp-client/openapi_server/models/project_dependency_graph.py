# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_project_dependency_graph200_response_dep_graph import GetProjectDependencyGraph200ResponseDepGraph
from openapi_server import util


class ProjectDependencyGraph(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dep_graph: GetProjectDependencyGraph200ResponseDepGraph=None):
        """ProjectDependencyGraph - a model defined in OpenAPI

        :param dep_graph: The dep_graph of this ProjectDependencyGraph.
        """
        self.openapi_types = {
            'dep_graph': GetProjectDependencyGraph200ResponseDepGraph
        }

        self.attribute_map = {
            'dep_graph': 'depGraph'
        }

        self._dep_graph = dep_graph

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectDependencyGraph':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Project_dependency_graph of this ProjectDependencyGraph.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dep_graph(self):
        """Gets the dep_graph of this ProjectDependencyGraph.


        :return: The dep_graph of this ProjectDependencyGraph.
        :rtype: GetProjectDependencyGraph200ResponseDepGraph
        """
        return self._dep_graph

    @dep_graph.setter
    def dep_graph(self, dep_graph):
        """Sets the dep_graph of this ProjectDependencyGraph.


        :param dep_graph: The dep_graph of this ProjectDependencyGraph.
        :type dep_graph: GetProjectDependencyGraph200ResponseDepGraph
        """
        if dep_graph is None:
            raise ValueError("Invalid value for `dep_graph`, must not be `None`")

        self._dep_graph = dep_graph
