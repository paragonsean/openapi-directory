# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.add_new_integration_request_any_of_credentials import AddNewIntegrationRequestAnyOfCredentials
from openapi_server import util


class UpdateExistingIntegrationRequestAnyOf1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, credentials: AddNewIntegrationRequestAnyOfCredentials=None, type: str=None):
        """UpdateExistingIntegrationRequestAnyOf1 - a model defined in OpenAPI

        :param credentials: The credentials of this UpdateExistingIntegrationRequestAnyOf1.
        :param type: The type of this UpdateExistingIntegrationRequestAnyOf1.
        """
        self.openapi_types = {
            'credentials': AddNewIntegrationRequestAnyOfCredentials,
            'type': str
        }

        self.attribute_map = {
            'credentials': 'credentials',
            'type': 'type'
        }

        self._credentials = credentials
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateExistingIntegrationRequestAnyOf1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Update_existing_integration_request_anyOf_1 of this UpdateExistingIntegrationRequestAnyOf1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def credentials(self):
        """Gets the credentials of this UpdateExistingIntegrationRequestAnyOf1.


        :return: The credentials of this UpdateExistingIntegrationRequestAnyOf1.
        :rtype: AddNewIntegrationRequestAnyOfCredentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this UpdateExistingIntegrationRequestAnyOf1.


        :param credentials: The credentials of this UpdateExistingIntegrationRequestAnyOf1.
        :type credentials: AddNewIntegrationRequestAnyOfCredentials
        """
        if credentials is None:
            raise ValueError("Invalid value for `credentials`, must not be `None`")

        self._credentials = credentials

    @property
    def type(self):
        """Gets the type of this UpdateExistingIntegrationRequestAnyOf1.

        integration type

        :return: The type of this UpdateExistingIntegrationRequestAnyOf1.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpdateExistingIntegrationRequestAnyOf1.

        integration type

        :param type: The type of this UpdateExistingIntegrationRequestAnyOf1.
        :type type: str
        """
        allowed_values = ["acr", "artifactory-cr", "azure-repos", "bitbucket-cloud", "bitbucket-server", "digitalocean-cr", "docker-hub", "ecr", "gcr", "github", "github-cr", "github-enterprise", "gitlab", "gitlab-cr", "google-artifact-cr", "harbor-cr", "nexus-cr", "quay-cr"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
