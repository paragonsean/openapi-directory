# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetGroupLevelAuditLogsRequestFilters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, event: str=None, exclude_event: str=None, project_id: str=None, user_id: str=None):
        """GetGroupLevelAuditLogsRequestFilters - a model defined in OpenAPI

        :param email: The email of this GetGroupLevelAuditLogsRequestFilters.
        :param event: The event of this GetGroupLevelAuditLogsRequestFilters.
        :param exclude_event: The exclude_event of this GetGroupLevelAuditLogsRequestFilters.
        :param project_id: The project_id of this GetGroupLevelAuditLogsRequestFilters.
        :param user_id: The user_id of this GetGroupLevelAuditLogsRequestFilters.
        """
        self.openapi_types = {
            'email': str,
            'event': str,
            'exclude_event': str,
            'project_id': str,
            'user_id': str
        }

        self.attribute_map = {
            'email': 'email',
            'event': 'event',
            'exclude_event': 'excludeEvent',
            'project_id': 'projectId',
            'user_id': 'userId'
        }

        self._email = email
        self._event = event
        self._exclude_event = exclude_event
        self._project_id = project_id
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetGroupLevelAuditLogsRequestFilters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Get_group_level_audit_logs_request_filters of this GetGroupLevelAuditLogsRequestFilters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this GetGroupLevelAuditLogsRequestFilters.

        User email address. Will fetch only audit logs originated from this user's actions. Ignored if the userId filter is set.

        :return: The email of this GetGroupLevelAuditLogsRequestFilters.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this GetGroupLevelAuditLogsRequestFilters.

        User email address. Will fetch only audit logs originated from this user's actions. Ignored if the userId filter is set.

        :param email: The email of this GetGroupLevelAuditLogsRequestFilters.
        :type email: str
        """

        self._email = email

    @property
    def event(self):
        """Gets the event of this GetGroupLevelAuditLogsRequestFilters.

        Will return only logs for this specific event. Only one of event and excludeEvent may be specified in a request.

        :return: The event of this GetGroupLevelAuditLogsRequestFilters.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this GetGroupLevelAuditLogsRequestFilters.

        Will return only logs for this specific event. Only one of event and excludeEvent may be specified in a request.

        :param event: The event of this GetGroupLevelAuditLogsRequestFilters.
        :type event: str
        """
        allowed_values = ["api.access", "group.cloud_config.settings.edit", "group.create", "group.delete", "group.edit", "group.feature_flags.edit", "group.notification_settings.edit", "group.org.add", "group.org.remove", "group.policy.create", "group.policy.delete", "group.policy.edit", "group.request_access_settings.edit", "group.role.create", "group.role.edit", "group.service_account.create", "group.service_account.delete", "group.service_account.edit", "group.settings.edit", "group.settings.feature_flag.edit", "group.sso.auth0_connection.create", "group.sso.auth0_connection.edit", "group.sso.add", "group.sso.create", "group.sso.delete", "group.sso.edit", "group.sso.membership.sync", "group.sso.remove", "group.tag.create", "group.tag.delete", "group.user.add", "group.user.provision.accept", "group.user.provision.create", "group.user.provision.delete", "group.user.remove", "group.user.role.edit"]  # noqa: E501
        if event not in allowed_values:
            raise ValueError(
                "Invalid value for `event` ({0}), must be one of {1}"
                .format(event, allowed_values)
            )

        self._event = event

    @property
    def exclude_event(self):
        """Gets the exclude_event of this GetGroupLevelAuditLogsRequestFilters.

        Will return logs except logs for this event. Only one of event and excludeEvent may be specified in a request.

        :return: The exclude_event of this GetGroupLevelAuditLogsRequestFilters.
        :rtype: str
        """
        return self._exclude_event

    @exclude_event.setter
    def exclude_event(self, exclude_event):
        """Sets the exclude_event of this GetGroupLevelAuditLogsRequestFilters.

        Will return logs except logs for this event. Only one of event and excludeEvent may be specified in a request.

        :param exclude_event: The exclude_event of this GetGroupLevelAuditLogsRequestFilters.
        :type exclude_event: str
        """
        allowed_values = ["api.access", "group.cloud_config.settings.edit", "group.create", "group.delete", "group.edit", "group.feature_flags.edit", "group.notification_settings.edit", "group.org.add", "group.org.remove", "group.policy.create", "group.policy.delete", "group.policy.edit", "group.request_access_settings.edit", "group.role.create", "group.role.edit", "group.service_account.create", "group.service_account.delete", "group.service_account.edit", "group.settings.edit", "group.settings.feature_flag.edit", "group.sso.auth0_connection.create", "group.sso.auth0_connection.edit", "group.sso.add", "group.sso.create", "group.sso.delete", "group.sso.edit", "group.sso.membership.sync", "group.sso.remove", "group.tag.create", "group.tag.delete", "group.user.add", "group.user.provision.accept", "group.user.provision.create", "group.user.provision.delete", "group.user.remove", "group.user.role.edit"]  # noqa: E501
        if exclude_event not in allowed_values:
            raise ValueError(
                "Invalid value for `exclude_event` ({0}), must be one of {1}"
                .format(exclude_event, allowed_values)
            )

        self._exclude_event = exclude_event

    @property
    def project_id(self):
        """Gets the project_id of this GetGroupLevelAuditLogsRequestFilters.

        Will return only logs for this specific project.

        :return: The project_id of this GetGroupLevelAuditLogsRequestFilters.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this GetGroupLevelAuditLogsRequestFilters.

        Will return only logs for this specific project.

        :param project_id: The project_id of this GetGroupLevelAuditLogsRequestFilters.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def user_id(self):
        """Gets the user_id of this GetGroupLevelAuditLogsRequestFilters.

        User public ID. Will fetch only audit logs originated from this user's actions.

        :return: The user_id of this GetGroupLevelAuditLogsRequestFilters.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this GetGroupLevelAuditLogsRequestFilters.

        User public ID. Will fetch only audit logs originated from this user's actions.

        :param user_id: The user_id of this GetGroupLevelAuditLogsRequestFilters.
        :type user_id: str
        """

        self._user_id = user_id
