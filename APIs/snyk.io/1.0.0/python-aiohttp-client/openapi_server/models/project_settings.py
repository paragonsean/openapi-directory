# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_remediation_prs import AutoRemediationPrs
from openapi_server.models.pull_request_assignment import PullRequestAssignment
from openapi_server import util


class ProjectSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_dep_upgrade_enabled: bool=None, auto_dep_upgrade_ignored_dependencies: List[object]=None, auto_dep_upgrade_limit: float=None, auto_dep_upgrade_min_age: float=None, auto_remediation_prs: AutoRemediationPrs=None, pull_request_assignment: PullRequestAssignment=None, pull_request_fail_on_any_vulns: bool=None, pull_request_fail_only_for_high_severity: bool=None, pull_request_test_enabled: bool=None):
        """ProjectSettings - a model defined in OpenAPI

        :param auto_dep_upgrade_enabled: The auto_dep_upgrade_enabled of this ProjectSettings.
        :param auto_dep_upgrade_ignored_dependencies: The auto_dep_upgrade_ignored_dependencies of this ProjectSettings.
        :param auto_dep_upgrade_limit: The auto_dep_upgrade_limit of this ProjectSettings.
        :param auto_dep_upgrade_min_age: The auto_dep_upgrade_min_age of this ProjectSettings.
        :param auto_remediation_prs: The auto_remediation_prs of this ProjectSettings.
        :param pull_request_assignment: The pull_request_assignment of this ProjectSettings.
        :param pull_request_fail_on_any_vulns: The pull_request_fail_on_any_vulns of this ProjectSettings.
        :param pull_request_fail_only_for_high_severity: The pull_request_fail_only_for_high_severity of this ProjectSettings.
        :param pull_request_test_enabled: The pull_request_test_enabled of this ProjectSettings.
        """
        self.openapi_types = {
            'auto_dep_upgrade_enabled': bool,
            'auto_dep_upgrade_ignored_dependencies': List[object],
            'auto_dep_upgrade_limit': float,
            'auto_dep_upgrade_min_age': float,
            'auto_remediation_prs': AutoRemediationPrs,
            'pull_request_assignment': PullRequestAssignment,
            'pull_request_fail_on_any_vulns': bool,
            'pull_request_fail_only_for_high_severity': bool,
            'pull_request_test_enabled': bool
        }

        self.attribute_map = {
            'auto_dep_upgrade_enabled': 'autoDepUpgradeEnabled',
            'auto_dep_upgrade_ignored_dependencies': 'autoDepUpgradeIgnoredDependencies',
            'auto_dep_upgrade_limit': 'autoDepUpgradeLimit',
            'auto_dep_upgrade_min_age': 'autoDepUpgradeMinAge',
            'auto_remediation_prs': 'autoRemediationPrs',
            'pull_request_assignment': 'pullRequestAssignment',
            'pull_request_fail_on_any_vulns': 'pullRequestFailOnAnyVulns',
            'pull_request_fail_only_for_high_severity': 'pullRequestFailOnlyForHighSeverity',
            'pull_request_test_enabled': 'pullRequestTestEnabled'
        }

        self._auto_dep_upgrade_enabled = auto_dep_upgrade_enabled
        self._auto_dep_upgrade_ignored_dependencies = auto_dep_upgrade_ignored_dependencies
        self._auto_dep_upgrade_limit = auto_dep_upgrade_limit
        self._auto_dep_upgrade_min_age = auto_dep_upgrade_min_age
        self._auto_remediation_prs = auto_remediation_prs
        self._pull_request_assignment = pull_request_assignment
        self._pull_request_fail_on_any_vulns = pull_request_fail_on_any_vulns
        self._pull_request_fail_only_for_high_severity = pull_request_fail_only_for_high_severity
        self._pull_request_test_enabled = pull_request_test_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Project_settings of this ProjectSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_dep_upgrade_enabled(self):
        """Gets the auto_dep_upgrade_enabled of this ProjectSettings.

        If set to `true`, Snyk will raise dependency upgrade PRs automatically.

        :return: The auto_dep_upgrade_enabled of this ProjectSettings.
        :rtype: bool
        """
        return self._auto_dep_upgrade_enabled

    @auto_dep_upgrade_enabled.setter
    def auto_dep_upgrade_enabled(self, auto_dep_upgrade_enabled):
        """Sets the auto_dep_upgrade_enabled of this ProjectSettings.

        If set to `true`, Snyk will raise dependency upgrade PRs automatically.

        :param auto_dep_upgrade_enabled: The auto_dep_upgrade_enabled of this ProjectSettings.
        :type auto_dep_upgrade_enabled: bool
        """

        self._auto_dep_upgrade_enabled = auto_dep_upgrade_enabled

    @property
    def auto_dep_upgrade_ignored_dependencies(self):
        """Gets the auto_dep_upgrade_ignored_dependencies of this ProjectSettings.

        An array of comma-separated strings with names of dependencies you wish Snyk to ignore to upgrade.

        :return: The auto_dep_upgrade_ignored_dependencies of this ProjectSettings.
        :rtype: List[object]
        """
        return self._auto_dep_upgrade_ignored_dependencies

    @auto_dep_upgrade_ignored_dependencies.setter
    def auto_dep_upgrade_ignored_dependencies(self, auto_dep_upgrade_ignored_dependencies):
        """Sets the auto_dep_upgrade_ignored_dependencies of this ProjectSettings.

        An array of comma-separated strings with names of dependencies you wish Snyk to ignore to upgrade.

        :param auto_dep_upgrade_ignored_dependencies: The auto_dep_upgrade_ignored_dependencies of this ProjectSettings.
        :type auto_dep_upgrade_ignored_dependencies: List[object]
        """

        self._auto_dep_upgrade_ignored_dependencies = auto_dep_upgrade_ignored_dependencies

    @property
    def auto_dep_upgrade_limit(self):
        """Gets the auto_dep_upgrade_limit of this ProjectSettings.

        The limit on auto dependency upgrade PRs.

        :return: The auto_dep_upgrade_limit of this ProjectSettings.
        :rtype: float
        """
        return self._auto_dep_upgrade_limit

    @auto_dep_upgrade_limit.setter
    def auto_dep_upgrade_limit(self, auto_dep_upgrade_limit):
        """Sets the auto_dep_upgrade_limit of this ProjectSettings.

        The limit on auto dependency upgrade PRs.

        :param auto_dep_upgrade_limit: The auto_dep_upgrade_limit of this ProjectSettings.
        :type auto_dep_upgrade_limit: float
        """

        self._auto_dep_upgrade_limit = auto_dep_upgrade_limit

    @property
    def auto_dep_upgrade_min_age(self):
        """Gets the auto_dep_upgrade_min_age of this ProjectSettings.

        The age (in days) that an automatic dependency check is valid for

        :return: The auto_dep_upgrade_min_age of this ProjectSettings.
        :rtype: float
        """
        return self._auto_dep_upgrade_min_age

    @auto_dep_upgrade_min_age.setter
    def auto_dep_upgrade_min_age(self, auto_dep_upgrade_min_age):
        """Sets the auto_dep_upgrade_min_age of this ProjectSettings.

        The age (in days) that an automatic dependency check is valid for

        :param auto_dep_upgrade_min_age: The auto_dep_upgrade_min_age of this ProjectSettings.
        :type auto_dep_upgrade_min_age: float
        """

        self._auto_dep_upgrade_min_age = auto_dep_upgrade_min_age

    @property
    def auto_remediation_prs(self):
        """Gets the auto_remediation_prs of this ProjectSettings.


        :return: The auto_remediation_prs of this ProjectSettings.
        :rtype: AutoRemediationPrs
        """
        return self._auto_remediation_prs

    @auto_remediation_prs.setter
    def auto_remediation_prs(self, auto_remediation_prs):
        """Sets the auto_remediation_prs of this ProjectSettings.


        :param auto_remediation_prs: The auto_remediation_prs of this ProjectSettings.
        :type auto_remediation_prs: AutoRemediationPrs
        """

        self._auto_remediation_prs = auto_remediation_prs

    @property
    def pull_request_assignment(self):
        """Gets the pull_request_assignment of this ProjectSettings.


        :return: The pull_request_assignment of this ProjectSettings.
        :rtype: PullRequestAssignment
        """
        return self._pull_request_assignment

    @pull_request_assignment.setter
    def pull_request_assignment(self, pull_request_assignment):
        """Sets the pull_request_assignment of this ProjectSettings.


        :param pull_request_assignment: The pull_request_assignment of this ProjectSettings.
        :type pull_request_assignment: PullRequestAssignment
        """

        self._pull_request_assignment = pull_request_assignment

    @property
    def pull_request_fail_on_any_vulns(self):
        """Gets the pull_request_fail_on_any_vulns of this ProjectSettings.

        If set to `true`, fail Snyk Test if the repo has any vulnerabilities. Otherwise, fail only when the PR is adding a vulnerable dependency.

        :return: The pull_request_fail_on_any_vulns of this ProjectSettings.
        :rtype: bool
        """
        return self._pull_request_fail_on_any_vulns

    @pull_request_fail_on_any_vulns.setter
    def pull_request_fail_on_any_vulns(self, pull_request_fail_on_any_vulns):
        """Sets the pull_request_fail_on_any_vulns of this ProjectSettings.

        If set to `true`, fail Snyk Test if the repo has any vulnerabilities. Otherwise, fail only when the PR is adding a vulnerable dependency.

        :param pull_request_fail_on_any_vulns: The pull_request_fail_on_any_vulns of this ProjectSettings.
        :type pull_request_fail_on_any_vulns: bool
        """

        self._pull_request_fail_on_any_vulns = pull_request_fail_on_any_vulns

    @property
    def pull_request_fail_only_for_high_severity(self):
        """Gets the pull_request_fail_only_for_high_severity of this ProjectSettings.

        If set to `true`, fail Snyk Test only for high and critical severity vulnerabilities

        :return: The pull_request_fail_only_for_high_severity of this ProjectSettings.
        :rtype: bool
        """
        return self._pull_request_fail_only_for_high_severity

    @pull_request_fail_only_for_high_severity.setter
    def pull_request_fail_only_for_high_severity(self, pull_request_fail_only_for_high_severity):
        """Sets the pull_request_fail_only_for_high_severity of this ProjectSettings.

        If set to `true`, fail Snyk Test only for high and critical severity vulnerabilities

        :param pull_request_fail_only_for_high_severity: The pull_request_fail_only_for_high_severity of this ProjectSettings.
        :type pull_request_fail_only_for_high_severity: bool
        """

        self._pull_request_fail_only_for_high_severity = pull_request_fail_only_for_high_severity

    @property
    def pull_request_test_enabled(self):
        """Gets the pull_request_test_enabled of this ProjectSettings.

        If set to `true`, Snyk Test checks PRs for vulnerabilities.:cq

        :return: The pull_request_test_enabled of this ProjectSettings.
        :rtype: bool
        """
        return self._pull_request_test_enabled

    @pull_request_test_enabled.setter
    def pull_request_test_enabled(self, pull_request_test_enabled):
        """Sets the pull_request_test_enabled of this ProjectSettings.

        If set to `true`, Snyk Test checks PRs for vulnerabilities.:cq

        :param pull_request_test_enabled: The pull_request_test_enabled of this ProjectSettings.
        :type pull_request_test_enabled: bool
        """

        self._pull_request_test_enabled = pull_request_test_enabled
