# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Retrieve200ResponsePullRequestAssignment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assignees: List[object]=None, enabled: bool=None, type: str=None):
        """Retrieve200ResponsePullRequestAssignment - a model defined in OpenAPI

        :param assignees: The assignees of this Retrieve200ResponsePullRequestAssignment.
        :param enabled: The enabled of this Retrieve200ResponsePullRequestAssignment.
        :param type: The type of this Retrieve200ResponsePullRequestAssignment.
        """
        self.openapi_types = {
            'assignees': List[object],
            'enabled': bool,
            'type': str
        }

        self.attribute_map = {
            'assignees': 'assignees',
            'enabled': 'enabled',
            'type': 'type'
        }

        self._assignees = assignees
        self._enabled = enabled
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Retrieve200ResponsePullRequestAssignment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Retrieve_200_response_pullRequestAssignment of this Retrieve200ResponsePullRequestAssignment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignees(self):
        """Gets the assignees of this Retrieve200ResponsePullRequestAssignment.

        an array of usernames that have contributed to the organization's project(s).

        :return: The assignees of this Retrieve200ResponsePullRequestAssignment.
        :rtype: List[object]
        """
        return self._assignees

    @assignees.setter
    def assignees(self, assignees):
        """Sets the assignees of this Retrieve200ResponsePullRequestAssignment.

        an array of usernames that have contributed to the organization's project(s).

        :param assignees: The assignees of this Retrieve200ResponsePullRequestAssignment.
        :type assignees: List[object]
        """

        self._assignees = assignees

    @property
    def enabled(self):
        """Gets the enabled of this Retrieve200ResponsePullRequestAssignment.

        if the organization's project(s) will assign Snyk pull requests.

        :return: The enabled of this Retrieve200ResponsePullRequestAssignment.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Retrieve200ResponsePullRequestAssignment.

        if the organization's project(s) will assign Snyk pull requests.

        :param enabled: The enabled of this Retrieve200ResponsePullRequestAssignment.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def type(self):
        """Gets the type of this Retrieve200ResponsePullRequestAssignment.

        a string representing the type of assignment your projects require.

        :return: The type of this Retrieve200ResponsePullRequestAssignment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Retrieve200ResponsePullRequestAssignment.

        a string representing the type of assignment your projects require.

        :param type: The type of this Retrieve200ResponsePullRequestAssignment.
        :type type: str
        """
        allowed_values = ["auto", "manual"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
