# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_list_of_issues200_response_results_inner_issue import GetListOfIssues200ResponseResultsInnerIssue
from openapi_server.models.get_list_of_issues200_response_results_inner_one_of import GetListOfIssues200ResponseResultsInnerOneOf
from openapi_server.models.get_list_of_issues200_response_results_inner_one_of1 import GetListOfIssues200ResponseResultsInnerOneOf1
from openapi_server.models.get_list_of_issues200_response_results_inner_one_of1_project import GetListOfIssues200ResponseResultsInnerOneOf1Project
from openapi_server import util


class GetListOfIssues200ResponseResultsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fixed_date: str=None, introduced_date: str=None, is_fixed: bool=None, issue: GetListOfIssues200ResponseResultsInnerIssue=None, patched_date: str=None, projects: List[object]=None, project: GetListOfIssues200ResponseResultsInnerOneOf1Project=None):
        """GetListOfIssues200ResponseResultsInner - a model defined in OpenAPI

        :param fixed_date: The fixed_date of this GetListOfIssues200ResponseResultsInner.
        :param introduced_date: The introduced_date of this GetListOfIssues200ResponseResultsInner.
        :param is_fixed: The is_fixed of this GetListOfIssues200ResponseResultsInner.
        :param issue: The issue of this GetListOfIssues200ResponseResultsInner.
        :param patched_date: The patched_date of this GetListOfIssues200ResponseResultsInner.
        :param projects: The projects of this GetListOfIssues200ResponseResultsInner.
        :param project: The project of this GetListOfIssues200ResponseResultsInner.
        """
        self.openapi_types = {
            'fixed_date': str,
            'introduced_date': str,
            'is_fixed': bool,
            'issue': GetListOfIssues200ResponseResultsInnerIssue,
            'patched_date': str,
            'projects': List[object],
            'project': GetListOfIssues200ResponseResultsInnerOneOf1Project
        }

        self.attribute_map = {
            'fixed_date': 'fixedDate',
            'introduced_date': 'introducedDate',
            'is_fixed': 'isFixed',
            'issue': 'issue',
            'patched_date': 'patchedDate',
            'projects': 'projects',
            'project': 'project'
        }

        self._fixed_date = fixed_date
        self._introduced_date = introduced_date
        self._is_fixed = is_fixed
        self._issue = issue
        self._patched_date = patched_date
        self._projects = projects
        self._project = project

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetListOfIssues200ResponseResultsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Get_list_of_issues_200_response_results_inner of this GetListOfIssues200ResponseResultsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fixed_date(self):
        """Gets the fixed_date of this GetListOfIssues200ResponseResultsInner.

        The date that the issue was fixed

        :return: The fixed_date of this GetListOfIssues200ResponseResultsInner.
        :rtype: str
        """
        return self._fixed_date

    @fixed_date.setter
    def fixed_date(self, fixed_date):
        """Sets the fixed_date of this GetListOfIssues200ResponseResultsInner.

        The date that the issue was fixed

        :param fixed_date: The fixed_date of this GetListOfIssues200ResponseResultsInner.
        :type fixed_date: str
        """

        self._fixed_date = fixed_date

    @property
    def introduced_date(self):
        """Gets the introduced_date of this GetListOfIssues200ResponseResultsInner.

        The date that the issue was introduced into the project

        :return: The introduced_date of this GetListOfIssues200ResponseResultsInner.
        :rtype: str
        """
        return self._introduced_date

    @introduced_date.setter
    def introduced_date(self, introduced_date):
        """Sets the introduced_date of this GetListOfIssues200ResponseResultsInner.

        The date that the issue was introduced into the project

        :param introduced_date: The introduced_date of this GetListOfIssues200ResponseResultsInner.
        :type introduced_date: str
        """
        if introduced_date is None:
            raise ValueError("Invalid value for `introduced_date`, must not be `None`")

        self._introduced_date = introduced_date

    @property
    def is_fixed(self):
        """Gets the is_fixed of this GetListOfIssues200ResponseResultsInner.

        Whether the issue has been fixed

        :return: The is_fixed of this GetListOfIssues200ResponseResultsInner.
        :rtype: bool
        """
        return self._is_fixed

    @is_fixed.setter
    def is_fixed(self, is_fixed):
        """Sets the is_fixed of this GetListOfIssues200ResponseResultsInner.

        Whether the issue has been fixed

        :param is_fixed: The is_fixed of this GetListOfIssues200ResponseResultsInner.
        :type is_fixed: bool
        """
        if is_fixed is None:
            raise ValueError("Invalid value for `is_fixed`, must not be `None`")

        self._is_fixed = is_fixed

    @property
    def issue(self):
        """Gets the issue of this GetListOfIssues200ResponseResultsInner.


        :return: The issue of this GetListOfIssues200ResponseResultsInner.
        :rtype: GetListOfIssues200ResponseResultsInnerIssue
        """
        return self._issue

    @issue.setter
    def issue(self, issue):
        """Sets the issue of this GetListOfIssues200ResponseResultsInner.


        :param issue: The issue of this GetListOfIssues200ResponseResultsInner.
        :type issue: GetListOfIssues200ResponseResultsInnerIssue
        """
        if issue is None:
            raise ValueError("Invalid value for `issue`, must not be `None`")

        self._issue = issue

    @property
    def patched_date(self):
        """Gets the patched_date of this GetListOfIssues200ResponseResultsInner.

        The date that the issue was patched

        :return: The patched_date of this GetListOfIssues200ResponseResultsInner.
        :rtype: str
        """
        return self._patched_date

    @patched_date.setter
    def patched_date(self, patched_date):
        """Sets the patched_date of this GetListOfIssues200ResponseResultsInner.

        The date that the issue was patched

        :param patched_date: The patched_date of this GetListOfIssues200ResponseResultsInner.
        :type patched_date: str
        """

        self._patched_date = patched_date

    @property
    def projects(self):
        """Gets the projects of this GetListOfIssues200ResponseResultsInner.

        When `groupBy` is used, multiple projects may be returned per issue

        :return: The projects of this GetListOfIssues200ResponseResultsInner.
        :rtype: List[object]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this GetListOfIssues200ResponseResultsInner.

        When `groupBy` is used, multiple projects may be returned per issue

        :param projects: The projects of this GetListOfIssues200ResponseResultsInner.
        :type projects: List[object]
        """
        if projects is None:
            raise ValueError("Invalid value for `projects`, must not be `None`")

        self._projects = projects

    @property
    def project(self):
        """Gets the project of this GetListOfIssues200ResponseResultsInner.


        :return: The project of this GetListOfIssues200ResponseResultsInner.
        :rtype: GetListOfIssues200ResponseResultsInnerOneOf1Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this GetListOfIssues200ResponseResultsInner.


        :param project: The project of this GetListOfIssues200ResponseResultsInner.
        :type project: GetListOfIssues200ResponseResultsInnerOneOf1Project
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")

        self._project = project
