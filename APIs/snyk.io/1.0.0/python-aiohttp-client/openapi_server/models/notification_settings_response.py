# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notification_setting_response import NotificationSettingResponse
from openapi_server.models.simple_notification_setting_response import SimpleNotificationSettingResponse
from openapi_server import util


class NotificationSettingsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, new_issues_remediations: NotificationSettingResponse=None, project_imported: SimpleNotificationSettingResponse=None, test_limit: SimpleNotificationSettingResponse=None, weekly_report: SimpleNotificationSettingResponse=None):
        """NotificationSettingsResponse - a model defined in OpenAPI

        :param new_issues_remediations: The new_issues_remediations of this NotificationSettingsResponse.
        :param project_imported: The project_imported of this NotificationSettingsResponse.
        :param test_limit: The test_limit of this NotificationSettingsResponse.
        :param weekly_report: The weekly_report of this NotificationSettingsResponse.
        """
        self.openapi_types = {
            'new_issues_remediations': NotificationSettingResponse,
            'project_imported': SimpleNotificationSettingResponse,
            'test_limit': SimpleNotificationSettingResponse,
            'weekly_report': SimpleNotificationSettingResponse
        }

        self.attribute_map = {
            'new_issues_remediations': 'new-issues-remediations',
            'project_imported': 'project-imported',
            'test_limit': 'test-limit',
            'weekly_report': 'weekly-report'
        }

        self._new_issues_remediations = new_issues_remediations
        self._project_imported = project_imported
        self._test_limit = test_limit
        self._weekly_report = weekly_report

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationSettingsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Notification_settings_response of this NotificationSettingsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def new_issues_remediations(self):
        """Gets the new_issues_remediations of this NotificationSettingsResponse.


        :return: The new_issues_remediations of this NotificationSettingsResponse.
        :rtype: NotificationSettingResponse
        """
        return self._new_issues_remediations

    @new_issues_remediations.setter
    def new_issues_remediations(self, new_issues_remediations):
        """Sets the new_issues_remediations of this NotificationSettingsResponse.


        :param new_issues_remediations: The new_issues_remediations of this NotificationSettingsResponse.
        :type new_issues_remediations: NotificationSettingResponse
        """

        self._new_issues_remediations = new_issues_remediations

    @property
    def project_imported(self):
        """Gets the project_imported of this NotificationSettingsResponse.


        :return: The project_imported of this NotificationSettingsResponse.
        :rtype: SimpleNotificationSettingResponse
        """
        return self._project_imported

    @project_imported.setter
    def project_imported(self, project_imported):
        """Sets the project_imported of this NotificationSettingsResponse.


        :param project_imported: The project_imported of this NotificationSettingsResponse.
        :type project_imported: SimpleNotificationSettingResponse
        """

        self._project_imported = project_imported

    @property
    def test_limit(self):
        """Gets the test_limit of this NotificationSettingsResponse.


        :return: The test_limit of this NotificationSettingsResponse.
        :rtype: SimpleNotificationSettingResponse
        """
        return self._test_limit

    @test_limit.setter
    def test_limit(self, test_limit):
        """Sets the test_limit of this NotificationSettingsResponse.


        :param test_limit: The test_limit of this NotificationSettingsResponse.
        :type test_limit: SimpleNotificationSettingResponse
        """

        self._test_limit = test_limit

    @property
    def weekly_report(self):
        """Gets the weekly_report of this NotificationSettingsResponse.


        :return: The weekly_report of this NotificationSettingsResponse.
        :rtype: SimpleNotificationSettingResponse
        """
        return self._weekly_report

    @weekly_report.setter
    def weekly_report(self, weekly_report):
        """Sets the weekly_report of this NotificationSettingsResponse.


        :param weekly_report: The weekly_report of this NotificationSettingsResponse.
        :type weekly_report: SimpleNotificationSettingResponse
        """

        self._weekly_report = weekly_report
