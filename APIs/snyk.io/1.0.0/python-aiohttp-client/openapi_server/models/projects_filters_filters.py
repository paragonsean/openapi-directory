# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_all_projects_request_filters_tags import ListAllProjectsRequestFiltersTags
from openapi_server.models.project_attributes import ProjectAttributes
from openapi_server import util


class ProjectsFiltersFilters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: ProjectAttributes=None, is_monitored: bool=None, name: str=None, origin: str=None, tags: ListAllProjectsRequestFiltersTags=None, type: str=None):
        """ProjectsFiltersFilters - a model defined in OpenAPI

        :param attributes: The attributes of this ProjectsFiltersFilters.
        :param is_monitored: The is_monitored of this ProjectsFiltersFilters.
        :param name: The name of this ProjectsFiltersFilters.
        :param origin: The origin of this ProjectsFiltersFilters.
        :param tags: The tags of this ProjectsFiltersFilters.
        :param type: The type of this ProjectsFiltersFilters.
        """
        self.openapi_types = {
            'attributes': ProjectAttributes,
            'is_monitored': bool,
            'name': str,
            'origin': str,
            'tags': ListAllProjectsRequestFiltersTags,
            'type': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'is_monitored': 'isMonitored',
            'name': 'name',
            'origin': 'origin',
            'tags': 'tags',
            'type': 'type'
        }

        self._attributes = attributes
        self._is_monitored = is_monitored
        self._name = name
        self._origin = origin
        self._tags = tags
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectsFiltersFilters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Projects_filters_filters of this ProjectsFiltersFilters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this ProjectsFiltersFilters.


        :return: The attributes of this ProjectsFiltersFilters.
        :rtype: ProjectAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ProjectsFiltersFilters.


        :param attributes: The attributes of this ProjectsFiltersFilters.
        :type attributes: ProjectAttributes
        """

        self._attributes = attributes

    @property
    def is_monitored(self):
        """Gets the is_monitored of this ProjectsFiltersFilters.

        If set to `true`, only include projects which are monitored, if set to `false`, only include projects which are not monitored

        :return: The is_monitored of this ProjectsFiltersFilters.
        :rtype: bool
        """
        return self._is_monitored

    @is_monitored.setter
    def is_monitored(self, is_monitored):
        """Sets the is_monitored of this ProjectsFiltersFilters.

        If set to `true`, only include projects which are monitored, if set to `false`, only include projects which are not monitored

        :param is_monitored: The is_monitored of this ProjectsFiltersFilters.
        :type is_monitored: bool
        """

        self._is_monitored = is_monitored

    @property
    def name(self):
        """Gets the name of this ProjectsFiltersFilters.

        If supplied, only projects that have a name that **starts with** this value will be returned

        :return: The name of this ProjectsFiltersFilters.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectsFiltersFilters.

        If supplied, only projects that have a name that **starts with** this value will be returned

        :param name: The name of this ProjectsFiltersFilters.
        :type name: str
        """

        self._name = name

    @property
    def origin(self):
        """Gets the origin of this ProjectsFiltersFilters.

        If supplied, only projects that exactly match this origin will be returned

        :return: The origin of this ProjectsFiltersFilters.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this ProjectsFiltersFilters.

        If supplied, only projects that exactly match this origin will be returned

        :param origin: The origin of this ProjectsFiltersFilters.
        :type origin: str
        """

        self._origin = origin

    @property
    def tags(self):
        """Gets the tags of this ProjectsFiltersFilters.


        :return: The tags of this ProjectsFiltersFilters.
        :rtype: ListAllProjectsRequestFiltersTags
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ProjectsFiltersFilters.


        :param tags: The tags of this ProjectsFiltersFilters.
        :type tags: ListAllProjectsRequestFiltersTags
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this ProjectsFiltersFilters.

        If supplied, only projects that exactly match this type will be returned

        :return: The type of this ProjectsFiltersFilters.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProjectsFiltersFilters.

        If supplied, only projects that exactly match this type will be returned

        :param type: The type of this ProjectsFiltersFilters.
        :type type: str
        """

        self._type = type
