# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportTargetsRequestAnyOf3Target(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch: str=None, name: str=None, project_key: str=None, repo_slug: str=None):
        """ImportTargetsRequestAnyOf3Target - a model defined in OpenAPI

        :param branch: The branch of this ImportTargetsRequestAnyOf3Target.
        :param name: The name of this ImportTargetsRequestAnyOf3Target.
        :param project_key: The project_key of this ImportTargetsRequestAnyOf3Target.
        :param repo_slug: The repo_slug of this ImportTargetsRequestAnyOf3Target.
        """
        self.openapi_types = {
            'branch': str,
            'name': str,
            'project_key': str,
            'repo_slug': str
        }

        self.attribute_map = {
            'branch': 'branch',
            'name': 'name',
            'project_key': 'projectKey',
            'repo_slug': 'repoSlug'
        }

        self._branch = branch
        self._name = name
        self._project_key = project_key
        self._repo_slug = repo_slug

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportTargetsRequestAnyOf3Target':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Import_targets_request_anyOf_3_target of this ImportTargetsRequestAnyOf3Target.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch(self):
        """Gets the branch of this ImportTargetsRequestAnyOf3Target.

        target branch name

        :return: The branch of this ImportTargetsRequestAnyOf3Target.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this ImportTargetsRequestAnyOf3Target.

        target branch name

        :param branch: The branch of this ImportTargetsRequestAnyOf3Target.
        :type branch: str
        """

        self._branch = branch

    @property
    def name(self):
        """Gets the name of this ImportTargetsRequestAnyOf3Target.

        custom name for the project

        :return: The name of this ImportTargetsRequestAnyOf3Target.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportTargetsRequestAnyOf3Target.

        custom name for the project

        :param name: The name of this ImportTargetsRequestAnyOf3Target.
        :type name: str
        """

        self._name = name

    @property
    def project_key(self):
        """Gets the project_key of this ImportTargetsRequestAnyOf3Target.

        project key

        :return: The project_key of this ImportTargetsRequestAnyOf3Target.
        :rtype: str
        """
        return self._project_key

    @project_key.setter
    def project_key(self, project_key):
        """Sets the project_key of this ImportTargetsRequestAnyOf3Target.

        project key

        :param project_key: The project_key of this ImportTargetsRequestAnyOf3Target.
        :type project_key: str
        """
        if project_key is None:
            raise ValueError("Invalid value for `project_key`, must not be `None`")

        self._project_key = project_key

    @property
    def repo_slug(self):
        """Gets the repo_slug of this ImportTargetsRequestAnyOf3Target.

        slug of the repo

        :return: The repo_slug of this ImportTargetsRequestAnyOf3Target.
        :rtype: str
        """
        return self._repo_slug

    @repo_slug.setter
    def repo_slug(self, repo_slug):
        """Sets the repo_slug of this ImportTargetsRequestAnyOf3Target.

        slug of the repo

        :param repo_slug: The repo_slug of this ImportTargetsRequestAnyOf3Target.
        :type repo_slug: str
        """
        if repo_slug is None:
            raise ValueError("Invalid value for `repo_slug`, must not be `None`")

        self._repo_slug = repo_slug
