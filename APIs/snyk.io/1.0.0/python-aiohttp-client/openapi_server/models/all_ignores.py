# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AllIgnores(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, issue_id: List[object]=None):
        """AllIgnores - a model defined in OpenAPI

        :param issue_id: The issue_id of this AllIgnores.
        """
        self.openapi_types = {
            'issue_id': List[object]
        }

        self.attribute_map = {
            'issue_id': 'issueId'
        }

        self._issue_id = issue_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AllIgnores':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The All_ignores of this AllIgnores.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issue_id(self):
        """Gets the issue_id of this AllIgnores.

        The issue ID that should be ignored.

        :return: The issue_id of this AllIgnores.
        :rtype: List[object]
        """
        return self._issue_id

    @issue_id.setter
    def issue_id(self, issue_id):
        """Sets the issue_id of this AllIgnores.

        The issue ID that should be ignored.

        :param issue_id: The issue_id of this AllIgnores.
        :type issue_id: List[object]
        """
        if issue_id is None:
            raise ValueError("Invalid value for `issue_id`, must not be `None`")

        self._issue_id = issue_id
