# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_issue_counts400_response_error import GetIssueCounts400ResponseError
from openapi_server import util


class GetIssueCounts400Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: float=None, error: GetIssueCounts400ResponseError=None, ok: bool=None):
        """GetIssueCounts400Response - a model defined in OpenAPI

        :param code: The code of this GetIssueCounts400Response.
        :param error: The error of this GetIssueCounts400Response.
        :param ok: The ok of this GetIssueCounts400Response.
        """
        self.openapi_types = {
            'code': float,
            'error': GetIssueCounts400ResponseError,
            'ok': bool
        }

        self.attribute_map = {
            'code': 'code',
            'error': 'error',
            'ok': 'ok'
        }

        self._code = code
        self._error = error
        self._ok = ok

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetIssueCounts400Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Get_issue_counts_400_response of this GetIssueCounts400Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this GetIssueCounts400Response.

        The error response code

        :return: The code of this GetIssueCounts400Response.
        :rtype: float
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this GetIssueCounts400Response.

        The error response code

        :param code: The code of this GetIssueCounts400Response.
        :type code: float
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def error(self):
        """Gets the error of this GetIssueCounts400Response.


        :return: The error of this GetIssueCounts400Response.
        :rtype: GetIssueCounts400ResponseError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this GetIssueCounts400Response.


        :param error: The error of this GetIssueCounts400Response.
        :type error: GetIssueCounts400ResponseError
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")

        self._error = error

    @property
    def ok(self):
        """Gets the ok of this GetIssueCounts400Response.


        :return: The ok of this GetIssueCounts400Response.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this GetIssueCounts400Response.


        :param ok: The ok of this GetIssueCounts400Response.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok
