# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_all_aggregated_issues200_response_issues_inner_fix_info import ListAllAggregatedIssues200ResponseIssuesInnerFixInfo
from openapi_server.models.list_all_aggregated_issues200_response_issues_inner_issue_data import ListAllAggregatedIssues200ResponseIssuesInnerIssueData
from openapi_server.models.list_all_aggregated_issues200_response_issues_inner_links import ListAllAggregatedIssues200ResponseIssuesInnerLinks
from openapi_server.models.list_all_aggregated_issues200_response_issues_inner_priority import ListAllAggregatedIssues200ResponseIssuesInnerPriority
from openapi_server import util


class ListAllAggregatedIssues200ResponseIssuesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fix_info: ListAllAggregatedIssues200ResponseIssuesInnerFixInfo=None, id: str=None, ignore_reasons: List[object]=None, introduced_through: List[object]=None, is_ignored: bool=None, is_patched: bool=None, issue_data: ListAllAggregatedIssues200ResponseIssuesInnerIssueData=None, issue_type: str=None, links: ListAllAggregatedIssues200ResponseIssuesInnerLinks=None, pkg_name: str=None, pkg_versions: List[str]=None, priority: ListAllAggregatedIssues200ResponseIssuesInnerPriority=None):
        """ListAllAggregatedIssues200ResponseIssuesInner - a model defined in OpenAPI

        :param fix_info: The fix_info of this ListAllAggregatedIssues200ResponseIssuesInner.
        :param id: The id of this ListAllAggregatedIssues200ResponseIssuesInner.
        :param ignore_reasons: The ignore_reasons of this ListAllAggregatedIssues200ResponseIssuesInner.
        :param introduced_through: The introduced_through of this ListAllAggregatedIssues200ResponseIssuesInner.
        :param is_ignored: The is_ignored of this ListAllAggregatedIssues200ResponseIssuesInner.
        :param is_patched: The is_patched of this ListAllAggregatedIssues200ResponseIssuesInner.
        :param issue_data: The issue_data of this ListAllAggregatedIssues200ResponseIssuesInner.
        :param issue_type: The issue_type of this ListAllAggregatedIssues200ResponseIssuesInner.
        :param links: The links of this ListAllAggregatedIssues200ResponseIssuesInner.
        :param pkg_name: The pkg_name of this ListAllAggregatedIssues200ResponseIssuesInner.
        :param pkg_versions: The pkg_versions of this ListAllAggregatedIssues200ResponseIssuesInner.
        :param priority: The priority of this ListAllAggregatedIssues200ResponseIssuesInner.
        """
        self.openapi_types = {
            'fix_info': ListAllAggregatedIssues200ResponseIssuesInnerFixInfo,
            'id': str,
            'ignore_reasons': List[object],
            'introduced_through': List[object],
            'is_ignored': bool,
            'is_patched': bool,
            'issue_data': ListAllAggregatedIssues200ResponseIssuesInnerIssueData,
            'issue_type': str,
            'links': ListAllAggregatedIssues200ResponseIssuesInnerLinks,
            'pkg_name': str,
            'pkg_versions': List[str],
            'priority': ListAllAggregatedIssues200ResponseIssuesInnerPriority
        }

        self.attribute_map = {
            'fix_info': 'fixInfo',
            'id': 'id',
            'ignore_reasons': 'ignoreReasons',
            'introduced_through': 'introducedThrough',
            'is_ignored': 'isIgnored',
            'is_patched': 'isPatched',
            'issue_data': 'issueData',
            'issue_type': 'issueType',
            'links': 'links',
            'pkg_name': 'pkgName',
            'pkg_versions': 'pkgVersions',
            'priority': 'priority'
        }

        self._fix_info = fix_info
        self._id = id
        self._ignore_reasons = ignore_reasons
        self._introduced_through = introduced_through
        self._is_ignored = is_ignored
        self._is_patched = is_patched
        self._issue_data = issue_data
        self._issue_type = issue_type
        self._links = links
        self._pkg_name = pkg_name
        self._pkg_versions = pkg_versions
        self._priority = priority

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListAllAggregatedIssues200ResponseIssuesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The List_all_Aggregated_issues_200_response_issues_inner of this ListAllAggregatedIssues200ResponseIssuesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fix_info(self):
        """Gets the fix_info of this ListAllAggregatedIssues200ResponseIssuesInner.


        :return: The fix_info of this ListAllAggregatedIssues200ResponseIssuesInner.
        :rtype: ListAllAggregatedIssues200ResponseIssuesInnerFixInfo
        """
        return self._fix_info

    @fix_info.setter
    def fix_info(self, fix_info):
        """Sets the fix_info of this ListAllAggregatedIssues200ResponseIssuesInner.


        :param fix_info: The fix_info of this ListAllAggregatedIssues200ResponseIssuesInner.
        :type fix_info: ListAllAggregatedIssues200ResponseIssuesInnerFixInfo
        """

        self._fix_info = fix_info

    @property
    def id(self):
        """Gets the id of this ListAllAggregatedIssues200ResponseIssuesInner.

        The identifier of the issue

        :return: The id of this ListAllAggregatedIssues200ResponseIssuesInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ListAllAggregatedIssues200ResponseIssuesInner.

        The identifier of the issue

        :param id: The id of this ListAllAggregatedIssues200ResponseIssuesInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def ignore_reasons(self):
        """Gets the ignore_reasons of this ListAllAggregatedIssues200ResponseIssuesInner.

        The list of reasons why the issue was ignored

        :return: The ignore_reasons of this ListAllAggregatedIssues200ResponseIssuesInner.
        :rtype: List[object]
        """
        return self._ignore_reasons

    @ignore_reasons.setter
    def ignore_reasons(self, ignore_reasons):
        """Sets the ignore_reasons of this ListAllAggregatedIssues200ResponseIssuesInner.

        The list of reasons why the issue was ignored

        :param ignore_reasons: The ignore_reasons of this ListAllAggregatedIssues200ResponseIssuesInner.
        :type ignore_reasons: List[object]
        """

        self._ignore_reasons = ignore_reasons

    @property
    def introduced_through(self):
        """Gets the introduced_through of this ListAllAggregatedIssues200ResponseIssuesInner.

        The list of what introduced the issue (it is available only for container project with Dockerfile)

        :return: The introduced_through of this ListAllAggregatedIssues200ResponseIssuesInner.
        :rtype: List[object]
        """
        return self._introduced_through

    @introduced_through.setter
    def introduced_through(self, introduced_through):
        """Sets the introduced_through of this ListAllAggregatedIssues200ResponseIssuesInner.

        The list of what introduced the issue (it is available only for container project with Dockerfile)

        :param introduced_through: The introduced_through of this ListAllAggregatedIssues200ResponseIssuesInner.
        :type introduced_through: List[object]
        """

        self._introduced_through = introduced_through

    @property
    def is_ignored(self):
        """Gets the is_ignored of this ListAllAggregatedIssues200ResponseIssuesInner.

        Whether the issue has been ignored

        :return: The is_ignored of this ListAllAggregatedIssues200ResponseIssuesInner.
        :rtype: bool
        """
        return self._is_ignored

    @is_ignored.setter
    def is_ignored(self, is_ignored):
        """Sets the is_ignored of this ListAllAggregatedIssues200ResponseIssuesInner.

        Whether the issue has been ignored

        :param is_ignored: The is_ignored of this ListAllAggregatedIssues200ResponseIssuesInner.
        :type is_ignored: bool
        """
        if is_ignored is None:
            raise ValueError("Invalid value for `is_ignored`, must not be `None`")

        self._is_ignored = is_ignored

    @property
    def is_patched(self):
        """Gets the is_patched of this ListAllAggregatedIssues200ResponseIssuesInner.

        Whether the issue has been patched (Non-IaC projects only)

        :return: The is_patched of this ListAllAggregatedIssues200ResponseIssuesInner.
        :rtype: bool
        """
        return self._is_patched

    @is_patched.setter
    def is_patched(self, is_patched):
        """Sets the is_patched of this ListAllAggregatedIssues200ResponseIssuesInner.

        Whether the issue has been patched (Non-IaC projects only)

        :param is_patched: The is_patched of this ListAllAggregatedIssues200ResponseIssuesInner.
        :type is_patched: bool
        """
        if is_patched is None:
            raise ValueError("Invalid value for `is_patched`, must not be `None`")

        self._is_patched = is_patched

    @property
    def issue_data(self):
        """Gets the issue_data of this ListAllAggregatedIssues200ResponseIssuesInner.


        :return: The issue_data of this ListAllAggregatedIssues200ResponseIssuesInner.
        :rtype: ListAllAggregatedIssues200ResponseIssuesInnerIssueData
        """
        return self._issue_data

    @issue_data.setter
    def issue_data(self, issue_data):
        """Sets the issue_data of this ListAllAggregatedIssues200ResponseIssuesInner.


        :param issue_data: The issue_data of this ListAllAggregatedIssues200ResponseIssuesInner.
        :type issue_data: ListAllAggregatedIssues200ResponseIssuesInnerIssueData
        """
        if issue_data is None:
            raise ValueError("Invalid value for `issue_data`, must not be `None`")

        self._issue_data = issue_data

    @property
    def issue_type(self):
        """Gets the issue_type of this ListAllAggregatedIssues200ResponseIssuesInner.

        type of the issue ('vuln', 'license' or 'configuration')

        :return: The issue_type of this ListAllAggregatedIssues200ResponseIssuesInner.
        :rtype: str
        """
        return self._issue_type

    @issue_type.setter
    def issue_type(self, issue_type):
        """Sets the issue_type of this ListAllAggregatedIssues200ResponseIssuesInner.

        type of the issue ('vuln', 'license' or 'configuration')

        :param issue_type: The issue_type of this ListAllAggregatedIssues200ResponseIssuesInner.
        :type issue_type: str
        """
        if issue_type is None:
            raise ValueError("Invalid value for `issue_type`, must not be `None`")

        self._issue_type = issue_type

    @property
    def links(self):
        """Gets the links of this ListAllAggregatedIssues200ResponseIssuesInner.


        :return: The links of this ListAllAggregatedIssues200ResponseIssuesInner.
        :rtype: ListAllAggregatedIssues200ResponseIssuesInnerLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ListAllAggregatedIssues200ResponseIssuesInner.


        :param links: The links of this ListAllAggregatedIssues200ResponseIssuesInner.
        :type links: ListAllAggregatedIssues200ResponseIssuesInnerLinks
        """

        self._links = links

    @property
    def pkg_name(self):
        """Gets the pkg_name of this ListAllAggregatedIssues200ResponseIssuesInner.

        The package name (Non-IaC projects only)

        :return: The pkg_name of this ListAllAggregatedIssues200ResponseIssuesInner.
        :rtype: str
        """
        return self._pkg_name

    @pkg_name.setter
    def pkg_name(self, pkg_name):
        """Sets the pkg_name of this ListAllAggregatedIssues200ResponseIssuesInner.

        The package name (Non-IaC projects only)

        :param pkg_name: The pkg_name of this ListAllAggregatedIssues200ResponseIssuesInner.
        :type pkg_name: str
        """
        if pkg_name is None:
            raise ValueError("Invalid value for `pkg_name`, must not be `None`")

        self._pkg_name = pkg_name

    @property
    def pkg_versions(self):
        """Gets the pkg_versions of this ListAllAggregatedIssues200ResponseIssuesInner.

        List of affected package versions (Non-IaC projects only)

        :return: The pkg_versions of this ListAllAggregatedIssues200ResponseIssuesInner.
        :rtype: List[str]
        """
        return self._pkg_versions

    @pkg_versions.setter
    def pkg_versions(self, pkg_versions):
        """Sets the pkg_versions of this ListAllAggregatedIssues200ResponseIssuesInner.

        List of affected package versions (Non-IaC projects only)

        :param pkg_versions: The pkg_versions of this ListAllAggregatedIssues200ResponseIssuesInner.
        :type pkg_versions: List[str]
        """
        if pkg_versions is None:
            raise ValueError("Invalid value for `pkg_versions`, must not be `None`")

        self._pkg_versions = pkg_versions

    @property
    def priority(self):
        """Gets the priority of this ListAllAggregatedIssues200ResponseIssuesInner.


        :return: The priority of this ListAllAggregatedIssues200ResponseIssuesInner.
        :rtype: ListAllAggregatedIssues200ResponseIssuesInnerPriority
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ListAllAggregatedIssues200ResponseIssuesInner.


        :param priority: The priority of this ListAllAggregatedIssues200ResponseIssuesInner.
        :type priority: ListAllAggregatedIssues200ResponseIssuesInnerPriority
        """

        self._priority = priority
