# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportTargetsRequestAnyOf4Target(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, slug_id: str=None):
        """ImportTargetsRequestAnyOf4Target - a model defined in OpenAPI

        :param app_id: The app_id of this ImportTargetsRequestAnyOf4Target.
        :param slug_id: The slug_id of this ImportTargetsRequestAnyOf4Target.
        """
        self.openapi_types = {
            'app_id': str,
            'slug_id': str
        }

        self.attribute_map = {
            'app_id': 'appId',
            'slug_id': 'slugId'
        }

        self._app_id = app_id
        self._slug_id = slug_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportTargetsRequestAnyOf4Target':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Import_targets_request_anyOf_4_target of this ImportTargetsRequestAnyOf4Target.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this ImportTargetsRequestAnyOf4Target.

        ID of the app

        :return: The app_id of this ImportTargetsRequestAnyOf4Target.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this ImportTargetsRequestAnyOf4Target.

        ID of the app

        :param app_id: The app_id of this ImportTargetsRequestAnyOf4Target.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def slug_id(self):
        """Gets the slug_id of this ImportTargetsRequestAnyOf4Target.

        ID of the slug

        :return: The slug_id of this ImportTargetsRequestAnyOf4Target.
        :rtype: str
        """
        return self._slug_id

    @slug_id.setter
    def slug_id(self, slug_id):
        """Sets the slug_id of this ImportTargetsRequestAnyOf4Target.

        ID of the slug

        :param slug_id: The slug_id of this ImportTargetsRequestAnyOf4Target.
        :type slug_id: str
        """
        if slug_id is None:
            raise ValueError("Invalid value for `slug_id`, must not be `None`")

        self._slug_id = slug_id
