# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_all_aggregated_issues200_response_issues_inner_issue_data_identifiers import ListAllAggregatedIssues200ResponseIssuesInnerIssueDataIdentifiers
from openapi_server.models.list_all_aggregated_issues200_response_issues_inner_issue_data_semver import ListAllAggregatedIssues200ResponseIssuesInnerIssueDataSemver
from openapi_server import util


class AggregatedProjectIssuesIssuesInnerIssueData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cvssv3: str=None, credit: List[object]=None, cvss_score: float=None, description: str=None, disclosure_time: str=None, exploit_maturity: str=None, id: str=None, identifiers: ListAllAggregatedIssues200ResponseIssuesInnerIssueDataIdentifiers=None, is_malicious_package: bool=None, language: str=None, nearest_fixed_in_version: str=None, original_severity: str=None, patches: List[object]=None, path: str=None, publication_time: str=None, semver: ListAllAggregatedIssues200ResponseIssuesInnerIssueDataSemver=None, severity: str=None, title: str=None, url: str=None, violated_policy_public_id: str=None):
        """AggregatedProjectIssuesIssuesInnerIssueData - a model defined in OpenAPI

        :param cvssv3: The cvssv3 of this AggregatedProjectIssuesIssuesInnerIssueData.
        :param credit: The credit of this AggregatedProjectIssuesIssuesInnerIssueData.
        :param cvss_score: The cvss_score of this AggregatedProjectIssuesIssuesInnerIssueData.
        :param description: The description of this AggregatedProjectIssuesIssuesInnerIssueData.
        :param disclosure_time: The disclosure_time of this AggregatedProjectIssuesIssuesInnerIssueData.
        :param exploit_maturity: The exploit_maturity of this AggregatedProjectIssuesIssuesInnerIssueData.
        :param id: The id of this AggregatedProjectIssuesIssuesInnerIssueData.
        :param identifiers: The identifiers of this AggregatedProjectIssuesIssuesInnerIssueData.
        :param is_malicious_package: The is_malicious_package of this AggregatedProjectIssuesIssuesInnerIssueData.
        :param language: The language of this AggregatedProjectIssuesIssuesInnerIssueData.
        :param nearest_fixed_in_version: The nearest_fixed_in_version of this AggregatedProjectIssuesIssuesInnerIssueData.
        :param original_severity: The original_severity of this AggregatedProjectIssuesIssuesInnerIssueData.
        :param patches: The patches of this AggregatedProjectIssuesIssuesInnerIssueData.
        :param path: The path of this AggregatedProjectIssuesIssuesInnerIssueData.
        :param publication_time: The publication_time of this AggregatedProjectIssuesIssuesInnerIssueData.
        :param semver: The semver of this AggregatedProjectIssuesIssuesInnerIssueData.
        :param severity: The severity of this AggregatedProjectIssuesIssuesInnerIssueData.
        :param title: The title of this AggregatedProjectIssuesIssuesInnerIssueData.
        :param url: The url of this AggregatedProjectIssuesIssuesInnerIssueData.
        :param violated_policy_public_id: The violated_policy_public_id of this AggregatedProjectIssuesIssuesInnerIssueData.
        """
        self.openapi_types = {
            'cvssv3': str,
            'credit': List[object],
            'cvss_score': float,
            'description': str,
            'disclosure_time': str,
            'exploit_maturity': str,
            'id': str,
            'identifiers': ListAllAggregatedIssues200ResponseIssuesInnerIssueDataIdentifiers,
            'is_malicious_package': bool,
            'language': str,
            'nearest_fixed_in_version': str,
            'original_severity': str,
            'patches': List[object],
            'path': str,
            'publication_time': str,
            'semver': ListAllAggregatedIssues200ResponseIssuesInnerIssueDataSemver,
            'severity': str,
            'title': str,
            'url': str,
            'violated_policy_public_id': str
        }

        self.attribute_map = {
            'cvssv3': 'CVSSv3',
            'credit': 'credit',
            'cvss_score': 'cvssScore',
            'description': 'description',
            'disclosure_time': 'disclosureTime',
            'exploit_maturity': 'exploitMaturity',
            'id': 'id',
            'identifiers': 'identifiers',
            'is_malicious_package': 'isMaliciousPackage',
            'language': 'language',
            'nearest_fixed_in_version': 'nearestFixedInVersion',
            'original_severity': 'originalSeverity',
            'patches': 'patches',
            'path': 'path',
            'publication_time': 'publicationTime',
            'semver': 'semver',
            'severity': 'severity',
            'title': 'title',
            'url': 'url',
            'violated_policy_public_id': 'violatedPolicyPublicId'
        }

        self._cvssv3 = cvssv3
        self._credit = credit
        self._cvss_score = cvss_score
        self._description = description
        self._disclosure_time = disclosure_time
        self._exploit_maturity = exploit_maturity
        self._id = id
        self._identifiers = identifiers
        self._is_malicious_package = is_malicious_package
        self._language = language
        self._nearest_fixed_in_version = nearest_fixed_in_version
        self._original_severity = original_severity
        self._patches = patches
        self._path = path
        self._publication_time = publication_time
        self._semver = semver
        self._severity = severity
        self._title = title
        self._url = url
        self._violated_policy_public_id = violated_policy_public_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AggregatedProjectIssuesIssuesInnerIssueData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Aggregated_project_issues_issues_inner_issueData of this AggregatedProjectIssuesIssuesInnerIssueData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cvssv3(self):
        """Gets the cvssv3 of this AggregatedProjectIssuesIssuesInnerIssueData.

        The CVSS v3 string that signifies how the CVSS score was calculated (Non-IaC projects only)

        :return: The cvssv3 of this AggregatedProjectIssuesIssuesInnerIssueData.
        :rtype: str
        """
        return self._cvssv3

    @cvssv3.setter
    def cvssv3(self, cvssv3):
        """Sets the cvssv3 of this AggregatedProjectIssuesIssuesInnerIssueData.

        The CVSS v3 string that signifies how the CVSS score was calculated (Non-IaC projects only)

        :param cvssv3: The cvssv3 of this AggregatedProjectIssuesIssuesInnerIssueData.
        :type cvssv3: str
        """

        self._cvssv3 = cvssv3

    @property
    def credit(self):
        """Gets the credit of this AggregatedProjectIssuesIssuesInnerIssueData.

        The list of people responsible for first uncovering or reporting the issue (Non-IaC projects only)

        :return: The credit of this AggregatedProjectIssuesIssuesInnerIssueData.
        :rtype: List[object]
        """
        return self._credit

    @credit.setter
    def credit(self, credit):
        """Sets the credit of this AggregatedProjectIssuesIssuesInnerIssueData.

        The list of people responsible for first uncovering or reporting the issue (Non-IaC projects only)

        :param credit: The credit of this AggregatedProjectIssuesIssuesInnerIssueData.
        :type credit: List[object]
        """

        self._credit = credit

    @property
    def cvss_score(self):
        """Gets the cvss_score of this AggregatedProjectIssuesIssuesInnerIssueData.

        The CVSS score that results from running the CVSSv3 string (Non-IaC projects only)

        :return: The cvss_score of this AggregatedProjectIssuesIssuesInnerIssueData.
        :rtype: float
        """
        return self._cvss_score

    @cvss_score.setter
    def cvss_score(self, cvss_score):
        """Sets the cvss_score of this AggregatedProjectIssuesIssuesInnerIssueData.

        The CVSS score that results from running the CVSSv3 string (Non-IaC projects only)

        :param cvss_score: The cvss_score of this AggregatedProjectIssuesIssuesInnerIssueData.
        :type cvss_score: float
        """

        self._cvss_score = cvss_score

    @property
    def description(self):
        """Gets the description of this AggregatedProjectIssuesIssuesInnerIssueData.


        :return: The description of this AggregatedProjectIssuesIssuesInnerIssueData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AggregatedProjectIssuesIssuesInnerIssueData.


        :param description: The description of this AggregatedProjectIssuesIssuesInnerIssueData.
        :type description: str
        """

        self._description = description

    @property
    def disclosure_time(self):
        """Gets the disclosure_time of this AggregatedProjectIssuesIssuesInnerIssueData.

        The date that the vulnerability was first disclosed

        :return: The disclosure_time of this AggregatedProjectIssuesIssuesInnerIssueData.
        :rtype: str
        """
        return self._disclosure_time

    @disclosure_time.setter
    def disclosure_time(self, disclosure_time):
        """Sets the disclosure_time of this AggregatedProjectIssuesIssuesInnerIssueData.

        The date that the vulnerability was first disclosed

        :param disclosure_time: The disclosure_time of this AggregatedProjectIssuesIssuesInnerIssueData.
        :type disclosure_time: str
        """

        self._disclosure_time = disclosure_time

    @property
    def exploit_maturity(self):
        """Gets the exploit_maturity of this AggregatedProjectIssuesIssuesInnerIssueData.

        The exploit maturity of the issue

        :return: The exploit_maturity of this AggregatedProjectIssuesIssuesInnerIssueData.
        :rtype: str
        """
        return self._exploit_maturity

    @exploit_maturity.setter
    def exploit_maturity(self, exploit_maturity):
        """Sets the exploit_maturity of this AggregatedProjectIssuesIssuesInnerIssueData.

        The exploit maturity of the issue

        :param exploit_maturity: The exploit_maturity of this AggregatedProjectIssuesIssuesInnerIssueData.
        :type exploit_maturity: str
        """
        if exploit_maturity is None:
            raise ValueError("Invalid value for `exploit_maturity`, must not be `None`")

        self._exploit_maturity = exploit_maturity

    @property
    def id(self):
        """Gets the id of this AggregatedProjectIssuesIssuesInnerIssueData.

        The identifier of the issue

        :return: The id of this AggregatedProjectIssuesIssuesInnerIssueData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AggregatedProjectIssuesIssuesInnerIssueData.

        The identifier of the issue

        :param id: The id of this AggregatedProjectIssuesIssuesInnerIssueData.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def identifiers(self):
        """Gets the identifiers of this AggregatedProjectIssuesIssuesInnerIssueData.


        :return: The identifiers of this AggregatedProjectIssuesIssuesInnerIssueData.
        :rtype: ListAllAggregatedIssues200ResponseIssuesInnerIssueDataIdentifiers
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this AggregatedProjectIssuesIssuesInnerIssueData.


        :param identifiers: The identifiers of this AggregatedProjectIssuesIssuesInnerIssueData.
        :type identifiers: ListAllAggregatedIssues200ResponseIssuesInnerIssueDataIdentifiers
        """

        self._identifiers = identifiers

    @property
    def is_malicious_package(self):
        """Gets the is_malicious_package of this AggregatedProjectIssuesIssuesInnerIssueData.

        Whether the issue is intentional, indicating a malicious package

        :return: The is_malicious_package of this AggregatedProjectIssuesIssuesInnerIssueData.
        :rtype: bool
        """
        return self._is_malicious_package

    @is_malicious_package.setter
    def is_malicious_package(self, is_malicious_package):
        """Sets the is_malicious_package of this AggregatedProjectIssuesIssuesInnerIssueData.

        Whether the issue is intentional, indicating a malicious package

        :param is_malicious_package: The is_malicious_package of this AggregatedProjectIssuesIssuesInnerIssueData.
        :type is_malicious_package: bool
        """

        self._is_malicious_package = is_malicious_package

    @property
    def language(self):
        """Gets the language of this AggregatedProjectIssuesIssuesInnerIssueData.

        The language of the issue (Non-IaC projects only)

        :return: The language of this AggregatedProjectIssuesIssuesInnerIssueData.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this AggregatedProjectIssuesIssuesInnerIssueData.

        The language of the issue (Non-IaC projects only)

        :param language: The language of this AggregatedProjectIssuesIssuesInnerIssueData.
        :type language: str
        """

        self._language = language

    @property
    def nearest_fixed_in_version(self):
        """Gets the nearest_fixed_in_version of this AggregatedProjectIssuesIssuesInnerIssueData.

        Nearest version which includes a fix for the issue. This is populated for container projects only. (Non-IaC projects only)

        :return: The nearest_fixed_in_version of this AggregatedProjectIssuesIssuesInnerIssueData.
        :rtype: str
        """
        return self._nearest_fixed_in_version

    @nearest_fixed_in_version.setter
    def nearest_fixed_in_version(self, nearest_fixed_in_version):
        """Sets the nearest_fixed_in_version of this AggregatedProjectIssuesIssuesInnerIssueData.

        Nearest version which includes a fix for the issue. This is populated for container projects only. (Non-IaC projects only)

        :param nearest_fixed_in_version: The nearest_fixed_in_version of this AggregatedProjectIssuesIssuesInnerIssueData.
        :type nearest_fixed_in_version: str
        """

        self._nearest_fixed_in_version = nearest_fixed_in_version

    @property
    def original_severity(self):
        """Gets the original_severity of this AggregatedProjectIssuesIssuesInnerIssueData.

        The original severity status of the issue, as retrieved from Snyk Vulnerability database, before policies are applied

        :return: The original_severity of this AggregatedProjectIssuesIssuesInnerIssueData.
        :rtype: str
        """
        return self._original_severity

    @original_severity.setter
    def original_severity(self, original_severity):
        """Sets the original_severity of this AggregatedProjectIssuesIssuesInnerIssueData.

        The original severity status of the issue, as retrieved from Snyk Vulnerability database, before policies are applied

        :param original_severity: The original_severity of this AggregatedProjectIssuesIssuesInnerIssueData.
        :type original_severity: str
        """
        if original_severity is None:
            raise ValueError("Invalid value for `original_severity`, must not be `None`")

        self._original_severity = original_severity

    @property
    def patches(self):
        """Gets the patches of this AggregatedProjectIssuesIssuesInnerIssueData.

        A list of patches available for the given issue (Non-IaC projects only)

        :return: The patches of this AggregatedProjectIssuesIssuesInnerIssueData.
        :rtype: List[object]
        """
        return self._patches

    @patches.setter
    def patches(self, patches):
        """Sets the patches of this AggregatedProjectIssuesIssuesInnerIssueData.

        A list of patches available for the given issue (Non-IaC projects only)

        :param patches: The patches of this AggregatedProjectIssuesIssuesInnerIssueData.
        :type patches: List[object]
        """

        self._patches = patches

    @property
    def path(self):
        """Gets the path of this AggregatedProjectIssuesIssuesInnerIssueData.

        Path to the resource property violating the policy within the scanned project. (IaC projects only)

        :return: The path of this AggregatedProjectIssuesIssuesInnerIssueData.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this AggregatedProjectIssuesIssuesInnerIssueData.

        Path to the resource property violating the policy within the scanned project. (IaC projects only)

        :param path: The path of this AggregatedProjectIssuesIssuesInnerIssueData.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def publication_time(self):
        """Gets the publication_time of this AggregatedProjectIssuesIssuesInnerIssueData.

        The date that the vulnerability was first published by Snyk (Non-IaC projects only)

        :return: The publication_time of this AggregatedProjectIssuesIssuesInnerIssueData.
        :rtype: str
        """
        return self._publication_time

    @publication_time.setter
    def publication_time(self, publication_time):
        """Sets the publication_time of this AggregatedProjectIssuesIssuesInnerIssueData.

        The date that the vulnerability was first published by Snyk (Non-IaC projects only)

        :param publication_time: The publication_time of this AggregatedProjectIssuesIssuesInnerIssueData.
        :type publication_time: str
        """

        self._publication_time = publication_time

    @property
    def semver(self):
        """Gets the semver of this AggregatedProjectIssuesIssuesInnerIssueData.


        :return: The semver of this AggregatedProjectIssuesIssuesInnerIssueData.
        :rtype: ListAllAggregatedIssues200ResponseIssuesInnerIssueDataSemver
        """
        return self._semver

    @semver.setter
    def semver(self, semver):
        """Sets the semver of this AggregatedProjectIssuesIssuesInnerIssueData.


        :param semver: The semver of this AggregatedProjectIssuesIssuesInnerIssueData.
        :type semver: ListAllAggregatedIssues200ResponseIssuesInnerIssueDataSemver
        """

        self._semver = semver

    @property
    def severity(self):
        """Gets the severity of this AggregatedProjectIssuesIssuesInnerIssueData.

        The severity status of the issue, after policies are applied

        :return: The severity of this AggregatedProjectIssuesIssuesInnerIssueData.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this AggregatedProjectIssuesIssuesInnerIssueData.

        The severity status of the issue, after policies are applied

        :param severity: The severity of this AggregatedProjectIssuesIssuesInnerIssueData.
        :type severity: str
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")

        self._severity = severity

    @property
    def title(self):
        """Gets the title of this AggregatedProjectIssuesIssuesInnerIssueData.

        The issue title

        :return: The title of this AggregatedProjectIssuesIssuesInnerIssueData.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AggregatedProjectIssuesIssuesInnerIssueData.

        The issue title

        :param title: The title of this AggregatedProjectIssuesIssuesInnerIssueData.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def url(self):
        """Gets the url of this AggregatedProjectIssuesIssuesInnerIssueData.

        URL to a page containing information about the issue

        :return: The url of this AggregatedProjectIssuesIssuesInnerIssueData.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AggregatedProjectIssuesIssuesInnerIssueData.

        URL to a page containing information about the issue

        :param url: The url of this AggregatedProjectIssuesIssuesInnerIssueData.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def violated_policy_public_id(self):
        """Gets the violated_policy_public_id of this AggregatedProjectIssuesIssuesInnerIssueData.

        The ID of the violated policy in the issue (IaC projects only)

        :return: The violated_policy_public_id of this AggregatedProjectIssuesIssuesInnerIssueData.
        :rtype: str
        """
        return self._violated_policy_public_id

    @violated_policy_public_id.setter
    def violated_policy_public_id(self, violated_policy_public_id):
        """Sets the violated_policy_public_id of this AggregatedProjectIssuesIssuesInnerIssueData.

        The ID of the violated policy in the issue (IaC projects only)

        :param violated_policy_public_id: The violated_policy_public_id of this AggregatedProjectIssuesIssuesInnerIssueData.
        :type violated_policy_public_id: str
        """
        if violated_policy_public_id is None:
            raise ValueError("Invalid value for `violated_policy_public_id`, must not be `None`")

        self._violated_policy_public_id = violated_policy_public_id
