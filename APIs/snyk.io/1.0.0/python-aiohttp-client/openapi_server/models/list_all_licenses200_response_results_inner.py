# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_all_dependencies200_response_results_inner_projects_inner import ListAllDependencies200ResponseResultsInnerProjectsInner
from openapi_server.models.list_all_licenses200_response_results_inner_dependencies_inner import ListAllLicenses200ResponseResultsInnerDependenciesInner
from openapi_server import util


class ListAllLicenses200ResponseResultsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dependencies: List[ListAllLicenses200ResponseResultsInnerDependenciesInner]=None, id: str=None, instructions: str=None, projects: List[ListAllDependencies200ResponseResultsInnerProjectsInner]=None, severity: str=None):
        """ListAllLicenses200ResponseResultsInner - a model defined in OpenAPI

        :param dependencies: The dependencies of this ListAllLicenses200ResponseResultsInner.
        :param id: The id of this ListAllLicenses200ResponseResultsInner.
        :param instructions: The instructions of this ListAllLicenses200ResponseResultsInner.
        :param projects: The projects of this ListAllLicenses200ResponseResultsInner.
        :param severity: The severity of this ListAllLicenses200ResponseResultsInner.
        """
        self.openapi_types = {
            'dependencies': List[ListAllLicenses200ResponseResultsInnerDependenciesInner],
            'id': str,
            'instructions': str,
            'projects': List[ListAllDependencies200ResponseResultsInnerProjectsInner],
            'severity': str
        }

        self.attribute_map = {
            'dependencies': 'dependencies',
            'id': 'id',
            'instructions': 'instructions',
            'projects': 'projects',
            'severity': 'severity'
        }

        self._dependencies = dependencies
        self._id = id
        self._instructions = instructions
        self._projects = projects
        self._severity = severity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListAllLicenses200ResponseResultsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The List_all_licenses_200_response_results_inner of this ListAllLicenses200ResponseResultsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dependencies(self):
        """Gets the dependencies of this ListAllLicenses200ResponseResultsInner.

        The dependencies of projects in the organization which have the license

        :return: The dependencies of this ListAllLicenses200ResponseResultsInner.
        :rtype: List[ListAllLicenses200ResponseResultsInnerDependenciesInner]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this ListAllLicenses200ResponseResultsInner.

        The dependencies of projects in the organization which have the license

        :param dependencies: The dependencies of this ListAllLicenses200ResponseResultsInner.
        :type dependencies: List[ListAllLicenses200ResponseResultsInnerDependenciesInner]
        """
        if dependencies is None:
            raise ValueError("Invalid value for `dependencies`, must not be `None`")

        self._dependencies = dependencies

    @property
    def id(self):
        """Gets the id of this ListAllLicenses200ResponseResultsInner.

        The identifier of the license

        :return: The id of this ListAllLicenses200ResponseResultsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ListAllLicenses200ResponseResultsInner.

        The identifier of the license

        :param id: The id of this ListAllLicenses200ResponseResultsInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def instructions(self):
        """Gets the instructions of this ListAllLicenses200ResponseResultsInner.

        Custom instructions assigned to this license

        :return: The instructions of this ListAllLicenses200ResponseResultsInner.
        :rtype: str
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this ListAllLicenses200ResponseResultsInner.

        Custom instructions assigned to this license

        :param instructions: The instructions of this ListAllLicenses200ResponseResultsInner.
        :type instructions: str
        """

        self._instructions = instructions

    @property
    def projects(self):
        """Gets the projects of this ListAllLicenses200ResponseResultsInner.

        The projects which contain the license

        :return: The projects of this ListAllLicenses200ResponseResultsInner.
        :rtype: List[ListAllDependencies200ResponseResultsInnerProjectsInner]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this ListAllLicenses200ResponseResultsInner.

        The projects which contain the license

        :param projects: The projects of this ListAllLicenses200ResponseResultsInner.
        :type projects: List[ListAllDependencies200ResponseResultsInnerProjectsInner]
        """
        if projects is None:
            raise ValueError("Invalid value for `projects`, must not be `None`")

        self._projects = projects

    @property
    def severity(self):
        """Gets the severity of this ListAllLicenses200ResponseResultsInner.

        The severity assigned to this license

        :return: The severity of this ListAllLicenses200ResponseResultsInner.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ListAllLicenses200ResponseResultsInner.

        The severity assigned to this license

        :param severity: The severity of this ListAllLicenses200ResponseResultsInner.
        :type severity: str
        """
        allowed_values = ["none", "high", "medium", "low"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity
