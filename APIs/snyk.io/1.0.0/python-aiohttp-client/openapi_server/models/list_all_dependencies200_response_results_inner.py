# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_all_dependencies200_response_results_inner_licenses_inner import ListAllDependencies200ResponseResultsInnerLicensesInner
from openapi_server.models.list_all_dependencies200_response_results_inner_projects_inner import ListAllDependencies200ResponseResultsInnerProjectsInner
from openapi_server import util


class ListAllDependencies200ResponseResultsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, copyright: List[object]=None, dependencies_with_issues: List[object]=None, deprecated_versions: List[object]=None, first_published_date: str=None, id: str=None, is_deprecated: bool=None, issues_critical: float=None, issues_high: float=None, issues_low: float=None, issues_medium: float=None, latest_version: str=None, latest_version_published_date: str=None, licenses: List[ListAllDependencies200ResponseResultsInnerLicensesInner]=None, name: str=None, projects: List[ListAllDependencies200ResponseResultsInnerProjectsInner]=None, type: str=None, version: str=None):
        """ListAllDependencies200ResponseResultsInner - a model defined in OpenAPI

        :param copyright: The copyright of this ListAllDependencies200ResponseResultsInner.
        :param dependencies_with_issues: The dependencies_with_issues of this ListAllDependencies200ResponseResultsInner.
        :param deprecated_versions: The deprecated_versions of this ListAllDependencies200ResponseResultsInner.
        :param first_published_date: The first_published_date of this ListAllDependencies200ResponseResultsInner.
        :param id: The id of this ListAllDependencies200ResponseResultsInner.
        :param is_deprecated: The is_deprecated of this ListAllDependencies200ResponseResultsInner.
        :param issues_critical: The issues_critical of this ListAllDependencies200ResponseResultsInner.
        :param issues_high: The issues_high of this ListAllDependencies200ResponseResultsInner.
        :param issues_low: The issues_low of this ListAllDependencies200ResponseResultsInner.
        :param issues_medium: The issues_medium of this ListAllDependencies200ResponseResultsInner.
        :param latest_version: The latest_version of this ListAllDependencies200ResponseResultsInner.
        :param latest_version_published_date: The latest_version_published_date of this ListAllDependencies200ResponseResultsInner.
        :param licenses: The licenses of this ListAllDependencies200ResponseResultsInner.
        :param name: The name of this ListAllDependencies200ResponseResultsInner.
        :param projects: The projects of this ListAllDependencies200ResponseResultsInner.
        :param type: The type of this ListAllDependencies200ResponseResultsInner.
        :param version: The version of this ListAllDependencies200ResponseResultsInner.
        """
        self.openapi_types = {
            'copyright': List[object],
            'dependencies_with_issues': List[object],
            'deprecated_versions': List[object],
            'first_published_date': str,
            'id': str,
            'is_deprecated': bool,
            'issues_critical': float,
            'issues_high': float,
            'issues_low': float,
            'issues_medium': float,
            'latest_version': str,
            'latest_version_published_date': str,
            'licenses': List[ListAllDependencies200ResponseResultsInnerLicensesInner],
            'name': str,
            'projects': List[ListAllDependencies200ResponseResultsInnerProjectsInner],
            'type': str,
            'version': str
        }

        self.attribute_map = {
            'copyright': 'copyright',
            'dependencies_with_issues': 'dependenciesWithIssues',
            'deprecated_versions': 'deprecatedVersions',
            'first_published_date': 'firstPublishedDate',
            'id': 'id',
            'is_deprecated': 'isDeprecated',
            'issues_critical': 'issuesCritical',
            'issues_high': 'issuesHigh',
            'issues_low': 'issuesLow',
            'issues_medium': 'issuesMedium',
            'latest_version': 'latestVersion',
            'latest_version_published_date': 'latestVersionPublishedDate',
            'licenses': 'licenses',
            'name': 'name',
            'projects': 'projects',
            'type': 'type',
            'version': 'version'
        }

        self._copyright = copyright
        self._dependencies_with_issues = dependencies_with_issues
        self._deprecated_versions = deprecated_versions
        self._first_published_date = first_published_date
        self._id = id
        self._is_deprecated = is_deprecated
        self._issues_critical = issues_critical
        self._issues_high = issues_high
        self._issues_low = issues_low
        self._issues_medium = issues_medium
        self._latest_version = latest_version
        self._latest_version_published_date = latest_version_published_date
        self._licenses = licenses
        self._name = name
        self._projects = projects
        self._type = type
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListAllDependencies200ResponseResultsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The List_all_dependencies_200_response_results_inner of this ListAllDependencies200ResponseResultsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def copyright(self):
        """Gets the copyright of this ListAllDependencies200ResponseResultsInner.

        The copyright notices for the package

        :return: The copyright of this ListAllDependencies200ResponseResultsInner.
        :rtype: List[object]
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this ListAllDependencies200ResponseResultsInner.

        The copyright notices for the package

        :param copyright: The copyright of this ListAllDependencies200ResponseResultsInner.
        :type copyright: List[object]
        """

        self._copyright = copyright

    @property
    def dependencies_with_issues(self):
        """Gets the dependencies_with_issues of this ListAllDependencies200ResponseResultsInner.

        The identifiers of dependencies with issues that are depended upon as a result of this dependency

        :return: The dependencies_with_issues of this ListAllDependencies200ResponseResultsInner.
        :rtype: List[object]
        """
        return self._dependencies_with_issues

    @dependencies_with_issues.setter
    def dependencies_with_issues(self, dependencies_with_issues):
        """Sets the dependencies_with_issues of this ListAllDependencies200ResponseResultsInner.

        The identifiers of dependencies with issues that are depended upon as a result of this dependency

        :param dependencies_with_issues: The dependencies_with_issues of this ListAllDependencies200ResponseResultsInner.
        :type dependencies_with_issues: List[object]
        """

        self._dependencies_with_issues = dependencies_with_issues

    @property
    def deprecated_versions(self):
        """Gets the deprecated_versions of this ListAllDependencies200ResponseResultsInner.

        The numbers for those versions that are marked as deprecated

        :return: The deprecated_versions of this ListAllDependencies200ResponseResultsInner.
        :rtype: List[object]
        """
        return self._deprecated_versions

    @deprecated_versions.setter
    def deprecated_versions(self, deprecated_versions):
        """Sets the deprecated_versions of this ListAllDependencies200ResponseResultsInner.

        The numbers for those versions that are marked as deprecated

        :param deprecated_versions: The deprecated_versions of this ListAllDependencies200ResponseResultsInner.
        :type deprecated_versions: List[object]
        """

        self._deprecated_versions = deprecated_versions

    @property
    def first_published_date(self):
        """Gets the first_published_date of this ListAllDependencies200ResponseResultsInner.

        The timestamp for when the specified package was first published.

        :return: The first_published_date of this ListAllDependencies200ResponseResultsInner.
        :rtype: str
        """
        return self._first_published_date

    @first_published_date.setter
    def first_published_date(self, first_published_date):
        """Sets the first_published_date of this ListAllDependencies200ResponseResultsInner.

        The timestamp for when the specified package was first published.

        :param first_published_date: The first_published_date of this ListAllDependencies200ResponseResultsInner.
        :type first_published_date: str
        """

        self._first_published_date = first_published_date

    @property
    def id(self):
        """Gets the id of this ListAllDependencies200ResponseResultsInner.

        The identifier of the package

        :return: The id of this ListAllDependencies200ResponseResultsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ListAllDependencies200ResponseResultsInner.

        The identifier of the package

        :param id: The id of this ListAllDependencies200ResponseResultsInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_deprecated(self):
        """Gets the is_deprecated of this ListAllDependencies200ResponseResultsInner.

        True if the latest version of the package is marked as deprecated; False otherwise.

        :return: The is_deprecated of this ListAllDependencies200ResponseResultsInner.
        :rtype: bool
        """
        return self._is_deprecated

    @is_deprecated.setter
    def is_deprecated(self, is_deprecated):
        """Sets the is_deprecated of this ListAllDependencies200ResponseResultsInner.

        True if the latest version of the package is marked as deprecated; False otherwise.

        :param is_deprecated: The is_deprecated of this ListAllDependencies200ResponseResultsInner.
        :type is_deprecated: bool
        """

        self._is_deprecated = is_deprecated

    @property
    def issues_critical(self):
        """Gets the issues_critical of this ListAllDependencies200ResponseResultsInner.

        The number of critical severity issues in this dependency

        :return: The issues_critical of this ListAllDependencies200ResponseResultsInner.
        :rtype: float
        """
        return self._issues_critical

    @issues_critical.setter
    def issues_critical(self, issues_critical):
        """Sets the issues_critical of this ListAllDependencies200ResponseResultsInner.

        The number of critical severity issues in this dependency

        :param issues_critical: The issues_critical of this ListAllDependencies200ResponseResultsInner.
        :type issues_critical: float
        """

        self._issues_critical = issues_critical

    @property
    def issues_high(self):
        """Gets the issues_high of this ListAllDependencies200ResponseResultsInner.

        The number of high severity issues in this dependency

        :return: The issues_high of this ListAllDependencies200ResponseResultsInner.
        :rtype: float
        """
        return self._issues_high

    @issues_high.setter
    def issues_high(self, issues_high):
        """Sets the issues_high of this ListAllDependencies200ResponseResultsInner.

        The number of high severity issues in this dependency

        :param issues_high: The issues_high of this ListAllDependencies200ResponseResultsInner.
        :type issues_high: float
        """

        self._issues_high = issues_high

    @property
    def issues_low(self):
        """Gets the issues_low of this ListAllDependencies200ResponseResultsInner.

        The number of low severity issues in this dependency

        :return: The issues_low of this ListAllDependencies200ResponseResultsInner.
        :rtype: float
        """
        return self._issues_low

    @issues_low.setter
    def issues_low(self, issues_low):
        """Sets the issues_low of this ListAllDependencies200ResponseResultsInner.

        The number of low severity issues in this dependency

        :param issues_low: The issues_low of this ListAllDependencies200ResponseResultsInner.
        :type issues_low: float
        """

        self._issues_low = issues_low

    @property
    def issues_medium(self):
        """Gets the issues_medium of this ListAllDependencies200ResponseResultsInner.

        The number of medium severity issues in this dependency

        :return: The issues_medium of this ListAllDependencies200ResponseResultsInner.
        :rtype: float
        """
        return self._issues_medium

    @issues_medium.setter
    def issues_medium(self, issues_medium):
        """Sets the issues_medium of this ListAllDependencies200ResponseResultsInner.

        The number of medium severity issues in this dependency

        :param issues_medium: The issues_medium of this ListAllDependencies200ResponseResultsInner.
        :type issues_medium: float
        """

        self._issues_medium = issues_medium

    @property
    def latest_version(self):
        """Gets the latest_version of this ListAllDependencies200ResponseResultsInner.

        The latest version available for the specified package

        :return: The latest_version of this ListAllDependencies200ResponseResultsInner.
        :rtype: str
        """
        return self._latest_version

    @latest_version.setter
    def latest_version(self, latest_version):
        """Sets the latest_version of this ListAllDependencies200ResponseResultsInner.

        The latest version available for the specified package

        :param latest_version: The latest_version of this ListAllDependencies200ResponseResultsInner.
        :type latest_version: str
        """

        self._latest_version = latest_version

    @property
    def latest_version_published_date(self):
        """Gets the latest_version_published_date of this ListAllDependencies200ResponseResultsInner.

        The timestamp for when the latest version of the specified package was published.

        :return: The latest_version_published_date of this ListAllDependencies200ResponseResultsInner.
        :rtype: str
        """
        return self._latest_version_published_date

    @latest_version_published_date.setter
    def latest_version_published_date(self, latest_version_published_date):
        """Sets the latest_version_published_date of this ListAllDependencies200ResponseResultsInner.

        The timestamp for when the latest version of the specified package was published.

        :param latest_version_published_date: The latest_version_published_date of this ListAllDependencies200ResponseResultsInner.
        :type latest_version_published_date: str
        """

        self._latest_version_published_date = latest_version_published_date

    @property
    def licenses(self):
        """Gets the licenses of this ListAllDependencies200ResponseResultsInner.

        The licenses of the dependency

        :return: The licenses of this ListAllDependencies200ResponseResultsInner.
        :rtype: List[ListAllDependencies200ResponseResultsInnerLicensesInner]
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses):
        """Sets the licenses of this ListAllDependencies200ResponseResultsInner.

        The licenses of the dependency

        :param licenses: The licenses of this ListAllDependencies200ResponseResultsInner.
        :type licenses: List[ListAllDependencies200ResponseResultsInnerLicensesInner]
        """
        if licenses is None:
            raise ValueError("Invalid value for `licenses`, must not be `None`")

        self._licenses = licenses

    @property
    def name(self):
        """Gets the name of this ListAllDependencies200ResponseResultsInner.

        The name of the package

        :return: The name of this ListAllDependencies200ResponseResultsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ListAllDependencies200ResponseResultsInner.

        The name of the package

        :param name: The name of this ListAllDependencies200ResponseResultsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def projects(self):
        """Gets the projects of this ListAllDependencies200ResponseResultsInner.

        The projects which depend on the dependency

        :return: The projects of this ListAllDependencies200ResponseResultsInner.
        :rtype: List[ListAllDependencies200ResponseResultsInnerProjectsInner]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this ListAllDependencies200ResponseResultsInner.

        The projects which depend on the dependency

        :param projects: The projects of this ListAllDependencies200ResponseResultsInner.
        :type projects: List[ListAllDependencies200ResponseResultsInnerProjectsInner]
        """
        if projects is None:
            raise ValueError("Invalid value for `projects`, must not be `None`")

        self._projects = projects

    @property
    def type(self):
        """Gets the type of this ListAllDependencies200ResponseResultsInner.

        The package type of the dependency

        :return: The type of this ListAllDependencies200ResponseResultsInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ListAllDependencies200ResponseResultsInner.

        The package type of the dependency

        :param type: The type of this ListAllDependencies200ResponseResultsInner.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def version(self):
        """Gets the version of this ListAllDependencies200ResponseResultsInner.

        The version of the package

        :return: The version of this ListAllDependencies200ResponseResultsInner.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ListAllDependencies200ResponseResultsInner.

        The version of the package

        :param version: The version of this ListAllDependencies200ResponseResultsInner.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
