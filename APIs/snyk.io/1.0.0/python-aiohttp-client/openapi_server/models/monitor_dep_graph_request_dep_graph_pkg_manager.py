# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MonitorDepGraphRequestDepGraphPkgManager(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, repositories: List[object]=None):
        """MonitorDepGraphRequestDepGraphPkgManager - a model defined in OpenAPI

        :param name: The name of this MonitorDepGraphRequestDepGraphPkgManager.
        :param repositories: The repositories of this MonitorDepGraphRequestDepGraphPkgManager.
        """
        self.openapi_types = {
            'name': str,
            'repositories': List[object]
        }

        self.attribute_map = {
            'name': 'name',
            'repositories': 'repositories'
        }

        self._name = name
        self._repositories = repositories

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonitorDepGraphRequestDepGraphPkgManager':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Monitor_Dep_Graph_request_depGraph_pkgManager of this MonitorDepGraphRequestDepGraphPkgManager.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this MonitorDepGraphRequestDepGraphPkgManager.

        Package manager name.

        :return: The name of this MonitorDepGraphRequestDepGraphPkgManager.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MonitorDepGraphRequestDepGraphPkgManager.

        Package manager name.

        :param name: The name of this MonitorDepGraphRequestDepGraphPkgManager.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def repositories(self):
        """Gets the repositories of this MonitorDepGraphRequestDepGraphPkgManager.

        A list of package repositories (i.e. maven-central, or npm) that defaults to the canonical package registry for the given package manager.

        :return: The repositories of this MonitorDepGraphRequestDepGraphPkgManager.
        :rtype: List[object]
        """
        return self._repositories

    @repositories.setter
    def repositories(self, repositories):
        """Sets the repositories of this MonitorDepGraphRequestDepGraphPkgManager.

        A list of package repositories (i.e. maven-central, or npm) that defaults to the canonical package registry for the given package manager.

        :param repositories: The repositories of this MonitorDepGraphRequestDepGraphPkgManager.
        :type repositories: List[object]
        """

        self._repositories = repositories
