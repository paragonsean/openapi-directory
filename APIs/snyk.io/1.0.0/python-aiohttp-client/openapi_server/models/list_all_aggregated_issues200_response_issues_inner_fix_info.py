# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListAllAggregatedIssues200ResponseIssuesInnerFixInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fixed_in: List[object]=None, is_fixable: bool=None, is_partially_fixable: bool=None, is_patchable: bool=None, is_pinnable: bool=None, is_upgradable: bool=None, nearest_fixed_in_version: str=None):
        """ListAllAggregatedIssues200ResponseIssuesInnerFixInfo - a model defined in OpenAPI

        :param fixed_in: The fixed_in of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.
        :param is_fixable: The is_fixable of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.
        :param is_partially_fixable: The is_partially_fixable of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.
        :param is_patchable: The is_patchable of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.
        :param is_pinnable: The is_pinnable of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.
        :param is_upgradable: The is_upgradable of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.
        :param nearest_fixed_in_version: The nearest_fixed_in_version of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.
        """
        self.openapi_types = {
            'fixed_in': List[object],
            'is_fixable': bool,
            'is_partially_fixable': bool,
            'is_patchable': bool,
            'is_pinnable': bool,
            'is_upgradable': bool,
            'nearest_fixed_in_version': str
        }

        self.attribute_map = {
            'fixed_in': 'fixedIn',
            'is_fixable': 'isFixable',
            'is_partially_fixable': 'isPartiallyFixable',
            'is_patchable': 'isPatchable',
            'is_pinnable': 'isPinnable',
            'is_upgradable': 'isUpgradable',
            'nearest_fixed_in_version': 'nearestFixedInVersion'
        }

        self._fixed_in = fixed_in
        self._is_fixable = is_fixable
        self._is_partially_fixable = is_partially_fixable
        self._is_patchable = is_patchable
        self._is_pinnable = is_pinnable
        self._is_upgradable = is_upgradable
        self._nearest_fixed_in_version = nearest_fixed_in_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListAllAggregatedIssues200ResponseIssuesInnerFixInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The List_all_Aggregated_issues_200_response_issues_inner_fixInfo of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fixed_in(self):
        """Gets the fixed_in of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.

        The set of versions in which this issue has been fixed. If the issue spanned multiple versions (i.e. `1.x` and `2.x`) then there will be multiple `fixedIn` entries

        :return: The fixed_in of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.
        :rtype: List[object]
        """
        return self._fixed_in

    @fixed_in.setter
    def fixed_in(self, fixed_in):
        """Sets the fixed_in of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.

        The set of versions in which this issue has been fixed. If the issue spanned multiple versions (i.e. `1.x` and `2.x`) then there will be multiple `fixedIn` entries

        :param fixed_in: The fixed_in of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.
        :type fixed_in: List[object]
        """

        self._fixed_in = fixed_in

    @property
    def is_fixable(self):
        """Gets the is_fixable of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.

        Whether all of the issue's paths are fixable. Paths that are already patched are not considered fixable unless they have an alternative remediation (e.g. pinning or upgrading). An upgrade path where the only changes are in transitive dependencies is only considered fixable if the package manager supports it.

        :return: The is_fixable of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.
        :rtype: bool
        """
        return self._is_fixable

    @is_fixable.setter
    def is_fixable(self, is_fixable):
        """Sets the is_fixable of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.

        Whether all of the issue's paths are fixable. Paths that are already patched are not considered fixable unless they have an alternative remediation (e.g. pinning or upgrading). An upgrade path where the only changes are in transitive dependencies is only considered fixable if the package manager supports it.

        :param is_fixable: The is_fixable of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.
        :type is_fixable: bool
        """

        self._is_fixable = is_fixable

    @property
    def is_partially_fixable(self):
        """Gets the is_partially_fixable of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.

        Whether any of the issue's paths can be fixed. Paths that are already patched are not considered fixable unless they have an alternative remediation (e.g. pinning or upgrading).  An upgrade path where the only changes are in transitive dependencies is only considered fixable if the package manager supports it.

        :return: The is_partially_fixable of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.
        :rtype: bool
        """
        return self._is_partially_fixable

    @is_partially_fixable.setter
    def is_partially_fixable(self, is_partially_fixable):
        """Sets the is_partially_fixable of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.

        Whether any of the issue's paths can be fixed. Paths that are already patched are not considered fixable unless they have an alternative remediation (e.g. pinning or upgrading).  An upgrade path where the only changes are in transitive dependencies is only considered fixable if the package manager supports it.

        :param is_partially_fixable: The is_partially_fixable of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.
        :type is_partially_fixable: bool
        """

        self._is_partially_fixable = is_partially_fixable

    @property
    def is_patchable(self):
        """Gets the is_patchable of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.

        Whether all the of issue's paths are patchable

        :return: The is_patchable of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.
        :rtype: bool
        """
        return self._is_patchable

    @is_patchable.setter
    def is_patchable(self, is_patchable):
        """Sets the is_patchable of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.

        Whether all the of issue's paths are patchable

        :param is_patchable: The is_patchable of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.
        :type is_patchable: bool
        """

        self._is_patchable = is_patchable

    @property
    def is_pinnable(self):
        """Gets the is_pinnable of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.

        Whether the issue can be fixed by pinning a transitive

        :return: The is_pinnable of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.
        :rtype: bool
        """
        return self._is_pinnable

    @is_pinnable.setter
    def is_pinnable(self, is_pinnable):
        """Sets the is_pinnable of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.

        Whether the issue can be fixed by pinning a transitive

        :param is_pinnable: The is_pinnable of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.
        :type is_pinnable: bool
        """

        self._is_pinnable = is_pinnable

    @property
    def is_upgradable(self):
        """Gets the is_upgradable of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.

        Whether all of the issue's paths are upgradable

        :return: The is_upgradable of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.
        :rtype: bool
        """
        return self._is_upgradable

    @is_upgradable.setter
    def is_upgradable(self, is_upgradable):
        """Sets the is_upgradable of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.

        Whether all of the issue's paths are upgradable

        :param is_upgradable: The is_upgradable of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.
        :type is_upgradable: bool
        """

        self._is_upgradable = is_upgradable

    @property
    def nearest_fixed_in_version(self):
        """Gets the nearest_fixed_in_version of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.

        Nearest version which includes a fix for the issue. This is populated for container projects only.

        :return: The nearest_fixed_in_version of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.
        :rtype: str
        """
        return self._nearest_fixed_in_version

    @nearest_fixed_in_version.setter
    def nearest_fixed_in_version(self, nearest_fixed_in_version):
        """Sets the nearest_fixed_in_version of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.

        Nearest version which includes a fix for the issue. This is populated for container projects only.

        :param nearest_fixed_in_version: The nearest_fixed_in_version of this ListAllAggregatedIssues200ResponseIssuesInnerFixInfo.
        :type nearest_fixed_in_version: str
        """

        self._nearest_fixed_in_version = nearest_fixed_in_version
