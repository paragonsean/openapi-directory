# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_all_project_snapshot_issue_paths200_response_links import ListAllProjectSnapshotIssuePaths200ResponseLinks
from openapi_server.models.list_all_project_snapshot_issue_paths200_response_paths_inner_inner import ListAllProjectSnapshotIssuePaths200ResponsePathsInnerInner
from openapi_server import util


class ListAllProjectSnapshotIssuePaths200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: ListAllProjectSnapshotIssuePaths200ResponseLinks=None, paths: List[List[ListAllProjectSnapshotIssuePaths200ResponsePathsInnerInner]]=None, snapshot_id: str=None, total: float=None):
        """ListAllProjectSnapshotIssuePaths200Response - a model defined in OpenAPI

        :param links: The links of this ListAllProjectSnapshotIssuePaths200Response.
        :param paths: The paths of this ListAllProjectSnapshotIssuePaths200Response.
        :param snapshot_id: The snapshot_id of this ListAllProjectSnapshotIssuePaths200Response.
        :param total: The total of this ListAllProjectSnapshotIssuePaths200Response.
        """
        self.openapi_types = {
            'links': ListAllProjectSnapshotIssuePaths200ResponseLinks,
            'paths': List[List[ListAllProjectSnapshotIssuePaths200ResponsePathsInnerInner]],
            'snapshot_id': str,
            'total': float
        }

        self.attribute_map = {
            'links': 'links',
            'paths': 'paths',
            'snapshot_id': 'snapshotId',
            'total': 'total'
        }

        self._links = links
        self._paths = paths
        self._snapshot_id = snapshot_id
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListAllProjectSnapshotIssuePaths200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The List_all_project_snapshot_issue_paths_200_response of this ListAllProjectSnapshotIssuePaths200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this ListAllProjectSnapshotIssuePaths200Response.


        :return: The links of this ListAllProjectSnapshotIssuePaths200Response.
        :rtype: ListAllProjectSnapshotIssuePaths200ResponseLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ListAllProjectSnapshotIssuePaths200Response.


        :param links: The links of this ListAllProjectSnapshotIssuePaths200Response.
        :type links: ListAllProjectSnapshotIssuePaths200ResponseLinks
        """

        self._links = links

    @property
    def paths(self):
        """Gets the paths of this ListAllProjectSnapshotIssuePaths200Response.

        A list of the dependency paths that introduce the issue

        :return: The paths of this ListAllProjectSnapshotIssuePaths200Response.
        :rtype: List[List[ListAllProjectSnapshotIssuePaths200ResponsePathsInnerInner]]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this ListAllProjectSnapshotIssuePaths200Response.

        A list of the dependency paths that introduce the issue

        :param paths: The paths of this ListAllProjectSnapshotIssuePaths200Response.
        :type paths: List[List[ListAllProjectSnapshotIssuePaths200ResponsePathsInnerInner]]
        """

        self._paths = paths

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this ListAllProjectSnapshotIssuePaths200Response.

        The identifier of the snapshot for which the paths have been found

        :return: The snapshot_id of this ListAllProjectSnapshotIssuePaths200Response.
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this ListAllProjectSnapshotIssuePaths200Response.

        The identifier of the snapshot for which the paths have been found

        :param snapshot_id: The snapshot_id of this ListAllProjectSnapshotIssuePaths200Response.
        :type snapshot_id: str
        """

        self._snapshot_id = snapshot_id

    @property
    def total(self):
        """Gets the total of this ListAllProjectSnapshotIssuePaths200Response.

        The total number of results

        :return: The total of this ListAllProjectSnapshotIssuePaths200Response.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ListAllProjectSnapshotIssuePaths200Response.

        The total number of results

        :param total: The total of this ListAllProjectSnapshotIssuePaths200Response.
        :type total: float
        """

        self._total = total
