# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_all_aggregated_issues200_response_issues_inner import ListAllAggregatedIssues200ResponseIssuesInner
from openapi_server import util


class ListAllAggregatedIssues200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, issues: List[ListAllAggregatedIssues200ResponseIssuesInner]=None):
        """ListAllAggregatedIssues200Response - a model defined in OpenAPI

        :param issues: The issues of this ListAllAggregatedIssues200Response.
        """
        self.openapi_types = {
            'issues': List[ListAllAggregatedIssues200ResponseIssuesInner]
        }

        self.attribute_map = {
            'issues': 'issues'
        }

        self._issues = issues

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListAllAggregatedIssues200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The List_all_Aggregated_issues_200_response of this ListAllAggregatedIssues200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issues(self):
        """Gets the issues of this ListAllAggregatedIssues200Response.

        An array of identified issues

        :return: The issues of this ListAllAggregatedIssues200Response.
        :rtype: List[ListAllAggregatedIssues200ResponseIssuesInner]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this ListAllAggregatedIssues200Response.

        An array of identified issues

        :param issues: The issues of this ListAllAggregatedIssues200Response.
        :type issues: List[ListAllAggregatedIssues200ResponseIssuesInner]
        """

        self._issues = issues
