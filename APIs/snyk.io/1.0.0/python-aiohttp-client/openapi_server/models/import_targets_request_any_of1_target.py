# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportTargetsRequestAnyOf1Target(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch: str=None, id: float=None):
        """ImportTargetsRequestAnyOf1Target - a model defined in OpenAPI

        :param branch: The branch of this ImportTargetsRequestAnyOf1Target.
        :param id: The id of this ImportTargetsRequestAnyOf1Target.
        """
        self.openapi_types = {
            'branch': str,
            'id': float
        }

        self.attribute_map = {
            'branch': 'branch',
            'id': 'id'
        }

        self._branch = branch
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportTargetsRequestAnyOf1Target':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Import_targets_request_anyOf_1_target of this ImportTargetsRequestAnyOf1Target.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch(self):
        """Gets the branch of this ImportTargetsRequestAnyOf1Target.

        repo branch

        :return: The branch of this ImportTargetsRequestAnyOf1Target.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this ImportTargetsRequestAnyOf1Target.

        repo branch

        :param branch: The branch of this ImportTargetsRequestAnyOf1Target.
        :type branch: str
        """
        if branch is None:
            raise ValueError("Invalid value for `branch`, must not be `None`")

        self._branch = branch

    @property
    def id(self):
        """Gets the id of this ImportTargetsRequestAnyOf1Target.

        id of the repo

        :return: The id of this ImportTargetsRequestAnyOf1Target.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImportTargetsRequestAnyOf1Target.

        id of the repo

        :param id: The id of this ImportTargetsRequestAnyOf1Target.
        :type id: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id
