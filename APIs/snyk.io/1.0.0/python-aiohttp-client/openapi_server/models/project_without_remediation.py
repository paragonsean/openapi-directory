# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.project_attributes import ProjectAttributes
from openapi_server.models.retrieve_a_single_project200_response_importing_user import RetrieveASingleProject200ResponseImportingUser
from openapi_server.models.retrieve_a_single_project200_response_issue_counts_by_severity import RetrieveASingleProject200ResponseIssueCountsBySeverity
from openapi_server import util


class ProjectWithoutRemediation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: ProjectAttributes=None, branch: str=None, browse_url: str=None, created: str=None, id: str=None, image_base_image: str=None, image_cluster: str=None, image_id: str=None, image_platform: str=None, image_tag: str=None, importing_user: RetrieveASingleProject200ResponseImportingUser=None, is_monitored: bool=None, issue_counts_by_severity: RetrieveASingleProject200ResponseIssueCountsBySeverity=None, last_tested_date: str=None, name: str=None, origin: str=None, owner: object=None, read_only: bool=None, remote_repo_url: str=None, tags: List[object]=None, target_reference: str=None, test_frequency: str=None, total_dependencies: float=None, type: str=None):
        """ProjectWithoutRemediation - a model defined in OpenAPI

        :param attributes: The attributes of this ProjectWithoutRemediation.
        :param branch: The branch of this ProjectWithoutRemediation.
        :param browse_url: The browse_url of this ProjectWithoutRemediation.
        :param created: The created of this ProjectWithoutRemediation.
        :param id: The id of this ProjectWithoutRemediation.
        :param image_base_image: The image_base_image of this ProjectWithoutRemediation.
        :param image_cluster: The image_cluster of this ProjectWithoutRemediation.
        :param image_id: The image_id of this ProjectWithoutRemediation.
        :param image_platform: The image_platform of this ProjectWithoutRemediation.
        :param image_tag: The image_tag of this ProjectWithoutRemediation.
        :param importing_user: The importing_user of this ProjectWithoutRemediation.
        :param is_monitored: The is_monitored of this ProjectWithoutRemediation.
        :param issue_counts_by_severity: The issue_counts_by_severity of this ProjectWithoutRemediation.
        :param last_tested_date: The last_tested_date of this ProjectWithoutRemediation.
        :param name: The name of this ProjectWithoutRemediation.
        :param origin: The origin of this ProjectWithoutRemediation.
        :param owner: The owner of this ProjectWithoutRemediation.
        :param read_only: The read_only of this ProjectWithoutRemediation.
        :param remote_repo_url: The remote_repo_url of this ProjectWithoutRemediation.
        :param tags: The tags of this ProjectWithoutRemediation.
        :param target_reference: The target_reference of this ProjectWithoutRemediation.
        :param test_frequency: The test_frequency of this ProjectWithoutRemediation.
        :param total_dependencies: The total_dependencies of this ProjectWithoutRemediation.
        :param type: The type of this ProjectWithoutRemediation.
        """
        self.openapi_types = {
            'attributes': ProjectAttributes,
            'branch': str,
            'browse_url': str,
            'created': str,
            'id': str,
            'image_base_image': str,
            'image_cluster': str,
            'image_id': str,
            'image_platform': str,
            'image_tag': str,
            'importing_user': RetrieveASingleProject200ResponseImportingUser,
            'is_monitored': bool,
            'issue_counts_by_severity': RetrieveASingleProject200ResponseIssueCountsBySeverity,
            'last_tested_date': str,
            'name': str,
            'origin': str,
            'owner': object,
            'read_only': bool,
            'remote_repo_url': str,
            'tags': List[object],
            'target_reference': str,
            'test_frequency': str,
            'total_dependencies': float,
            'type': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'branch': 'branch',
            'browse_url': 'browseUrl',
            'created': 'created',
            'id': 'id',
            'image_base_image': 'imageBaseImage',
            'image_cluster': 'imageCluster',
            'image_id': 'imageId',
            'image_platform': 'imagePlatform',
            'image_tag': 'imageTag',
            'importing_user': 'importingUser',
            'is_monitored': 'isMonitored',
            'issue_counts_by_severity': 'issueCountsBySeverity',
            'last_tested_date': 'lastTestedDate',
            'name': 'name',
            'origin': 'origin',
            'owner': 'owner',
            'read_only': 'readOnly',
            'remote_repo_url': 'remoteRepoUrl',
            'tags': 'tags',
            'target_reference': 'targetReference',
            'test_frequency': 'testFrequency',
            'total_dependencies': 'totalDependencies',
            'type': 'type'
        }

        self._attributes = attributes
        self._branch = branch
        self._browse_url = browse_url
        self._created = created
        self._id = id
        self._image_base_image = image_base_image
        self._image_cluster = image_cluster
        self._image_id = image_id
        self._image_platform = image_platform
        self._image_tag = image_tag
        self._importing_user = importing_user
        self._is_monitored = is_monitored
        self._issue_counts_by_severity = issue_counts_by_severity
        self._last_tested_date = last_tested_date
        self._name = name
        self._origin = origin
        self._owner = owner
        self._read_only = read_only
        self._remote_repo_url = remote_repo_url
        self._tags = tags
        self._target_reference = target_reference
        self._test_frequency = test_frequency
        self._total_dependencies = total_dependencies
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectWithoutRemediation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Project_without_remediation of this ProjectWithoutRemediation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this ProjectWithoutRemediation.


        :return: The attributes of this ProjectWithoutRemediation.
        :rtype: ProjectAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ProjectWithoutRemediation.


        :param attributes: The attributes of this ProjectWithoutRemediation.
        :type attributes: ProjectAttributes
        """

        self._attributes = attributes

    @property
    def branch(self):
        """Gets the branch of this ProjectWithoutRemediation.

        The monitored branch (if available)

        :return: The branch of this ProjectWithoutRemediation.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this ProjectWithoutRemediation.

        The monitored branch (if available)

        :param branch: The branch of this ProjectWithoutRemediation.
        :type branch: str
        """

        self._branch = branch

    @property
    def browse_url(self):
        """Gets the browse_url of this ProjectWithoutRemediation.

        URL with project overview

        :return: The browse_url of this ProjectWithoutRemediation.
        :rtype: str
        """
        return self._browse_url

    @browse_url.setter
    def browse_url(self, browse_url):
        """Sets the browse_url of this ProjectWithoutRemediation.

        URL with project overview

        :param browse_url: The browse_url of this ProjectWithoutRemediation.
        :type browse_url: str
        """

        self._browse_url = browse_url

    @property
    def created(self):
        """Gets the created of this ProjectWithoutRemediation.

        The date that the project was created on

        :return: The created of this ProjectWithoutRemediation.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ProjectWithoutRemediation.

        The date that the project was created on

        :param created: The created of this ProjectWithoutRemediation.
        :type created: str
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this ProjectWithoutRemediation.

        The project identifier

        :return: The id of this ProjectWithoutRemediation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectWithoutRemediation.

        The project identifier

        :param id: The id of this ProjectWithoutRemediation.
        :type id: str
        """

        self._id = id

    @property
    def image_base_image(self):
        """Gets the image_base_image of this ProjectWithoutRemediation.

        For docker projects shows the base image

        :return: The image_base_image of this ProjectWithoutRemediation.
        :rtype: str
        """
        return self._image_base_image

    @image_base_image.setter
    def image_base_image(self, image_base_image):
        """Sets the image_base_image of this ProjectWithoutRemediation.

        For docker projects shows the base image

        :param image_base_image: The image_base_image of this ProjectWithoutRemediation.
        :type image_base_image: str
        """

        self._image_base_image = image_base_image

    @property
    def image_cluster(self):
        """Gets the image_cluster of this ProjectWithoutRemediation.

        For Kubernetes projects shows the origin cluster name

        :return: The image_cluster of this ProjectWithoutRemediation.
        :rtype: str
        """
        return self._image_cluster

    @image_cluster.setter
    def image_cluster(self, image_cluster):
        """Sets the image_cluster of this ProjectWithoutRemediation.

        For Kubernetes projects shows the origin cluster name

        :param image_cluster: The image_cluster of this ProjectWithoutRemediation.
        :type image_cluster: str
        """

        self._image_cluster = image_cluster

    @property
    def image_id(self):
        """Gets the image_id of this ProjectWithoutRemediation.

        For docker projects shows the ID of the image

        :return: The image_id of this ProjectWithoutRemediation.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this ProjectWithoutRemediation.

        For docker projects shows the ID of the image

        :param image_id: The image_id of this ProjectWithoutRemediation.
        :type image_id: str
        """

        self._image_id = image_id

    @property
    def image_platform(self):
        """Gets the image_platform of this ProjectWithoutRemediation.

        For docker projects shows the platform of the image

        :return: The image_platform of this ProjectWithoutRemediation.
        :rtype: str
        """
        return self._image_platform

    @image_platform.setter
    def image_platform(self, image_platform):
        """Sets the image_platform of this ProjectWithoutRemediation.

        For docker projects shows the platform of the image

        :param image_platform: The image_platform of this ProjectWithoutRemediation.
        :type image_platform: str
        """

        self._image_platform = image_platform

    @property
    def image_tag(self):
        """Gets the image_tag of this ProjectWithoutRemediation.

        For docker projects shows the tag of the image

        :return: The image_tag of this ProjectWithoutRemediation.
        :rtype: str
        """
        return self._image_tag

    @image_tag.setter
    def image_tag(self, image_tag):
        """Sets the image_tag of this ProjectWithoutRemediation.

        For docker projects shows the tag of the image

        :param image_tag: The image_tag of this ProjectWithoutRemediation.
        :type image_tag: str
        """

        self._image_tag = image_tag

    @property
    def importing_user(self):
        """Gets the importing_user of this ProjectWithoutRemediation.


        :return: The importing_user of this ProjectWithoutRemediation.
        :rtype: RetrieveASingleProject200ResponseImportingUser
        """
        return self._importing_user

    @importing_user.setter
    def importing_user(self, importing_user):
        """Sets the importing_user of this ProjectWithoutRemediation.


        :param importing_user: The importing_user of this ProjectWithoutRemediation.
        :type importing_user: RetrieveASingleProject200ResponseImportingUser
        """

        self._importing_user = importing_user

    @property
    def is_monitored(self):
        """Gets the is_monitored of this ProjectWithoutRemediation.

        Describes if a project is currently monitored or it is de-activated

        :return: The is_monitored of this ProjectWithoutRemediation.
        :rtype: bool
        """
        return self._is_monitored

    @is_monitored.setter
    def is_monitored(self, is_monitored):
        """Sets the is_monitored of this ProjectWithoutRemediation.

        Describes if a project is currently monitored or it is de-activated

        :param is_monitored: The is_monitored of this ProjectWithoutRemediation.
        :type is_monitored: bool
        """

        self._is_monitored = is_monitored

    @property
    def issue_counts_by_severity(self):
        """Gets the issue_counts_by_severity of this ProjectWithoutRemediation.


        :return: The issue_counts_by_severity of this ProjectWithoutRemediation.
        :rtype: RetrieveASingleProject200ResponseIssueCountsBySeverity
        """
        return self._issue_counts_by_severity

    @issue_counts_by_severity.setter
    def issue_counts_by_severity(self, issue_counts_by_severity):
        """Sets the issue_counts_by_severity of this ProjectWithoutRemediation.


        :param issue_counts_by_severity: The issue_counts_by_severity of this ProjectWithoutRemediation.
        :type issue_counts_by_severity: RetrieveASingleProject200ResponseIssueCountsBySeverity
        """

        self._issue_counts_by_severity = issue_counts_by_severity

    @property
    def last_tested_date(self):
        """Gets the last_tested_date of this ProjectWithoutRemediation.

        The date on which the most recent test was conducted for this project

        :return: The last_tested_date of this ProjectWithoutRemediation.
        :rtype: str
        """
        return self._last_tested_date

    @last_tested_date.setter
    def last_tested_date(self, last_tested_date):
        """Sets the last_tested_date of this ProjectWithoutRemediation.

        The date on which the most recent test was conducted for this project

        :param last_tested_date: The last_tested_date of this ProjectWithoutRemediation.
        :type last_tested_date: str
        """

        self._last_tested_date = last_tested_date

    @property
    def name(self):
        """Gets the name of this ProjectWithoutRemediation.


        :return: The name of this ProjectWithoutRemediation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectWithoutRemediation.


        :param name: The name of this ProjectWithoutRemediation.
        :type name: str
        """

        self._name = name

    @property
    def origin(self):
        """Gets the origin of this ProjectWithoutRemediation.

        The origin the project was added from

        :return: The origin of this ProjectWithoutRemediation.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this ProjectWithoutRemediation.

        The origin the project was added from

        :param origin: The origin of this ProjectWithoutRemediation.
        :type origin: str
        """

        self._origin = origin

    @property
    def owner(self):
        """Gets the owner of this ProjectWithoutRemediation.

        The user who owns the project, null if not set  {     \"id\": \"e713cf94-bb02-4ea0-89d9-613cce0caed2\",     \"name\": \"example-user@snyk.io\",     \"username\": \"exampleUser\",     \"email\": \"example-user@snyk.io\" }

        :return: The owner of this ProjectWithoutRemediation.
        :rtype: object
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ProjectWithoutRemediation.

        The user who owns the project, null if not set  {     \"id\": \"e713cf94-bb02-4ea0-89d9-613cce0caed2\",     \"name\": \"example-user@snyk.io\",     \"username\": \"exampleUser\",     \"email\": \"example-user@snyk.io\" }

        :param owner: The owner of this ProjectWithoutRemediation.
        :type owner: object
        """

        self._owner = owner

    @property
    def read_only(self):
        """Gets the read_only of this ProjectWithoutRemediation.

        Whether the project is read-only

        :return: The read_only of this ProjectWithoutRemediation.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this ProjectWithoutRemediation.

        Whether the project is read-only

        :param read_only: The read_only of this ProjectWithoutRemediation.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def remote_repo_url(self):
        """Gets the remote_repo_url of this ProjectWithoutRemediation.

        The project remote repository url. Only set for projects imported via the Snyk CLI tool.

        :return: The remote_repo_url of this ProjectWithoutRemediation.
        :rtype: str
        """
        return self._remote_repo_url

    @remote_repo_url.setter
    def remote_repo_url(self, remote_repo_url):
        """Sets the remote_repo_url of this ProjectWithoutRemediation.

        The project remote repository url. Only set for projects imported via the Snyk CLI tool.

        :param remote_repo_url: The remote_repo_url of this ProjectWithoutRemediation.
        :type remote_repo_url: str
        """

        self._remote_repo_url = remote_repo_url

    @property
    def tags(self):
        """Gets the tags of this ProjectWithoutRemediation.

        List of applied tags

        :return: The tags of this ProjectWithoutRemediation.
        :rtype: List[object]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ProjectWithoutRemediation.

        List of applied tags

        :param tags: The tags of this ProjectWithoutRemediation.
        :type tags: List[object]
        """

        self._tags = tags

    @property
    def target_reference(self):
        """Gets the target_reference of this ProjectWithoutRemediation.

        The identifier for which revision of the resource is scanned by Snyk. For example this may be a branch for SCM project, or a tag for a container image

        :return: The target_reference of this ProjectWithoutRemediation.
        :rtype: str
        """
        return self._target_reference

    @target_reference.setter
    def target_reference(self, target_reference):
        """Sets the target_reference of this ProjectWithoutRemediation.

        The identifier for which revision of the resource is scanned by Snyk. For example this may be a branch for SCM project, or a tag for a container image

        :param target_reference: The target_reference of this ProjectWithoutRemediation.
        :type target_reference: str
        """

        self._target_reference = target_reference

    @property
    def test_frequency(self):
        """Gets the test_frequency of this ProjectWithoutRemediation.

        The frequency of automated Snyk re-test. Can be 'daily', 'weekly or 'never'

        :return: The test_frequency of this ProjectWithoutRemediation.
        :rtype: str
        """
        return self._test_frequency

    @test_frequency.setter
    def test_frequency(self, test_frequency):
        """Sets the test_frequency of this ProjectWithoutRemediation.

        The frequency of automated Snyk re-test. Can be 'daily', 'weekly or 'never'

        :param test_frequency: The test_frequency of this ProjectWithoutRemediation.
        :type test_frequency: str
        """

        self._test_frequency = test_frequency

    @property
    def total_dependencies(self):
        """Gets the total_dependencies of this ProjectWithoutRemediation.

        Number of dependencies of the project

        :return: The total_dependencies of this ProjectWithoutRemediation.
        :rtype: float
        """
        return self._total_dependencies

    @total_dependencies.setter
    def total_dependencies(self, total_dependencies):
        """Sets the total_dependencies of this ProjectWithoutRemediation.

        Number of dependencies of the project

        :param total_dependencies: The total_dependencies of this ProjectWithoutRemediation.
        :type total_dependencies: float
        """

        self._total_dependencies = total_dependencies

    @property
    def type(self):
        """Gets the type of this ProjectWithoutRemediation.

        The package manager of the project

        :return: The type of this ProjectWithoutRemediation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProjectWithoutRemediation.

        The package manager of the project

        :param type: The type of this ProjectWithoutRemediation.
        :type type: str
        """

        self._type = type
