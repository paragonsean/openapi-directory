# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.test_gopkg_toml_gopkg_lock_file_request_files import TestGopkgTomlGopkgLockFileRequestFiles
from openapi_server import util


class GolangdepRequestPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encoding: str=None, files: TestGopkgTomlGopkgLockFileRequestFiles=None):
        """GolangdepRequestPayload - a model defined in OpenAPI

        :param encoding: The encoding of this GolangdepRequestPayload.
        :param files: The files of this GolangdepRequestPayload.
        """
        self.openapi_types = {
            'encoding': str,
            'files': TestGopkgTomlGopkgLockFileRequestFiles
        }

        self.attribute_map = {
            'encoding': 'encoding',
            'files': 'files'
        }

        self._encoding = encoding
        self._files = files

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GolangdepRequestPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The golangdep_request_payload of this GolangdepRequestPayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encoding(self):
        """Gets the encoding of this GolangdepRequestPayload.

        the encoding for the manifest files sent.

        :return: The encoding of this GolangdepRequestPayload.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this GolangdepRequestPayload.

        the encoding for the manifest files sent.

        :param encoding: The encoding of this GolangdepRequestPayload.
        :type encoding: str
        """
        allowed_values = ["plain", "base64"]  # noqa: E501
        if encoding not in allowed_values:
            raise ValueError(
                "Invalid value for `encoding` ({0}), must be one of {1}"
                .format(encoding, allowed_values)
            )

        self._encoding = encoding

    @property
    def files(self):
        """Gets the files of this GolangdepRequestPayload.


        :return: The files of this GolangdepRequestPayload.
        :rtype: TestGopkgTomlGopkgLockFileRequestFiles
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this GolangdepRequestPayload.


        :param files: The files of this GolangdepRequestPayload.
        :type files: TestGopkgTomlGopkgLockFileRequestFiles
        """
        if files is None:
            raise ValueError("Invalid value for `files`, must not be `None`")

        self._files = files
