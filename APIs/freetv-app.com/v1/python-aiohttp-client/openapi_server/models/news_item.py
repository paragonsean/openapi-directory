# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewsItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: str=None, ref: str=None, subtitle: str=None, thumbnail: str=None, title: str=None):
        """NewsItem - a model defined in OpenAPI

        :param created: The created of this NewsItem.
        :param ref: The ref of this NewsItem.
        :param subtitle: The subtitle of this NewsItem.
        :param thumbnail: The thumbnail of this NewsItem.
        :param title: The title of this NewsItem.
        """
        self.openapi_types = {
            'created': str,
            'ref': str,
            'subtitle': str,
            'thumbnail': str,
            'title': str
        }

        self.attribute_map = {
            'created': 'created',
            'ref': 'ref',
            'subtitle': 'subtitle',
            'thumbnail': 'thumbnail',
            'title': 'title'
        }

        self._created = created
        self._ref = ref
        self._subtitle = subtitle
        self._thumbnail = thumbnail
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewsItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewsItem of this NewsItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this NewsItem.


        :return: The created of this NewsItem.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this NewsItem.


        :param created: The created of this NewsItem.
        :type created: str
        """

        self._created = created

    @property
    def ref(self):
        """Gets the ref of this NewsItem.


        :return: The ref of this NewsItem.
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this NewsItem.


        :param ref: The ref of this NewsItem.
        :type ref: str
        """

        self._ref = ref

    @property
    def subtitle(self):
        """Gets the subtitle of this NewsItem.


        :return: The subtitle of this NewsItem.
        :rtype: str
        """
        return self._subtitle

    @subtitle.setter
    def subtitle(self, subtitle):
        """Sets the subtitle of this NewsItem.


        :param subtitle: The subtitle of this NewsItem.
        :type subtitle: str
        """

        self._subtitle = subtitle

    @property
    def thumbnail(self):
        """Gets the thumbnail of this NewsItem.


        :return: The thumbnail of this NewsItem.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this NewsItem.


        :param thumbnail: The thumbnail of this NewsItem.
        :type thumbnail: str
        """

        self._thumbnail = thumbnail

    @property
    def title(self):
        """Gets the title of this NewsItem.


        :return: The title of this NewsItem.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this NewsItem.


        :param title: The title of this NewsItem.
        :type title: str
        """

        self._title = title
