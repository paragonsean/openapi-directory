# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.open_badge_class_criteria import OpenBadgeClassCriteria
from openapi_server import util


class OpenBadgeClass(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, criteria: OpenBadgeClassCriteria=None, description: str=None, id: str=None, image: str=None, issuer: str=None, name: str=None, type: str=None):
        """OpenBadgeClass - a model defined in OpenAPI

        :param criteria: The criteria of this OpenBadgeClass.
        :param description: The description of this OpenBadgeClass.
        :param id: The id of this OpenBadgeClass.
        :param image: The image of this OpenBadgeClass.
        :param issuer: The issuer of this OpenBadgeClass.
        :param name: The name of this OpenBadgeClass.
        :param type: The type of this OpenBadgeClass.
        """
        self.openapi_types = {
            'criteria': OpenBadgeClassCriteria,
            'description': str,
            'id': str,
            'image': str,
            'issuer': str,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'criteria': 'criteria',
            'description': 'description',
            'id': 'id',
            'image': 'image',
            'issuer': 'issuer',
            'name': 'name',
            'type': 'type'
        }

        self._criteria = criteria
        self._description = description
        self._id = id
        self._image = image
        self._issuer = issuer
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OpenBadgeClass':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OpenBadgeClass of this OpenBadgeClass.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def criteria(self):
        """Gets the criteria of this OpenBadgeClass.


        :return: The criteria of this OpenBadgeClass.
        :rtype: OpenBadgeClassCriteria
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """Sets the criteria of this OpenBadgeClass.


        :param criteria: The criteria of this OpenBadgeClass.
        :type criteria: OpenBadgeClassCriteria
        """

        self._criteria = criteria

    @property
    def description(self):
        """Gets the description of this OpenBadgeClass.


        :return: The description of this OpenBadgeClass.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OpenBadgeClass.


        :param description: The description of this OpenBadgeClass.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this OpenBadgeClass.


        :return: The id of this OpenBadgeClass.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OpenBadgeClass.


        :param id: The id of this OpenBadgeClass.
        :type id: str
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this OpenBadgeClass.


        :return: The image of this OpenBadgeClass.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this OpenBadgeClass.


        :param image: The image of this OpenBadgeClass.
        :type image: str
        """

        self._image = image

    @property
    def issuer(self):
        """Gets the issuer of this OpenBadgeClass.


        :return: The issuer of this OpenBadgeClass.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this OpenBadgeClass.


        :param issuer: The issuer of this OpenBadgeClass.
        :type issuer: str
        """

        self._issuer = issuer

    @property
    def name(self):
        """Gets the name of this OpenBadgeClass.


        :return: The name of this OpenBadgeClass.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OpenBadgeClass.


        :param name: The name of this OpenBadgeClass.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this OpenBadgeClass.


        :return: The type of this OpenBadgeClass.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OpenBadgeClass.


        :param type: The type of this OpenBadgeClass.
        :type type: str
        """

        self._type = type
