# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.invite import Invite
from openapi_server.models.user_metadata import UserMetadata
from openapi_server.models.user_profile import UserProfile
from openapi_server import util


class UserResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar_url: str=None, email: str=None, first_access_at: datetime=None, first_name: str=None, id: str=None, invite: Invite=None, last_access_at: datetime=None, last_name: str=None, metadata: UserMetadata=None, person_id: str=None, profile: UserProfile=None):
        """UserResponse - a model defined in OpenAPI

        :param avatar_url: The avatar_url of this UserResponse.
        :param email: The email of this UserResponse.
        :param first_access_at: The first_access_at of this UserResponse.
        :param first_name: The first_name of this UserResponse.
        :param id: The id of this UserResponse.
        :param invite: The invite of this UserResponse.
        :param last_access_at: The last_access_at of this UserResponse.
        :param last_name: The last_name of this UserResponse.
        :param metadata: The metadata of this UserResponse.
        :param person_id: The person_id of this UserResponse.
        :param profile: The profile of this UserResponse.
        """
        self.openapi_types = {
            'avatar_url': str,
            'email': str,
            'first_access_at': datetime,
            'first_name': str,
            'id': str,
            'invite': Invite,
            'last_access_at': datetime,
            'last_name': str,
            'metadata': UserMetadata,
            'person_id': str,
            'profile': UserProfile
        }

        self.attribute_map = {
            'avatar_url': 'avatarUrl',
            'email': 'email',
            'first_access_at': 'firstAccessAt',
            'first_name': 'firstName',
            'id': 'id',
            'invite': 'invite',
            'last_access_at': 'lastAccessAt',
            'last_name': 'lastName',
            'metadata': 'metadata',
            'person_id': 'personId',
            'profile': 'profile'
        }

        self._avatar_url = avatar_url
        self._email = email
        self._first_access_at = first_access_at
        self._first_name = first_name
        self._id = id
        self._invite = invite
        self._last_access_at = last_access_at
        self._last_name = last_name
        self._metadata = metadata
        self._person_id = person_id
        self._profile = profile

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserResponse of this UserResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar_url(self):
        """Gets the avatar_url of this UserResponse.


        :return: The avatar_url of this UserResponse.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this UserResponse.


        :param avatar_url: The avatar_url of this UserResponse.
        :type avatar_url: str
        """

        self._avatar_url = avatar_url

    @property
    def email(self):
        """Gets the email of this UserResponse.


        :return: The email of this UserResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserResponse.


        :param email: The email of this UserResponse.
        :type email: str
        """
        if email is not None and len(email) < 1:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")

        self._email = email

    @property
    def first_access_at(self):
        """Gets the first_access_at of this UserResponse.


        :return: The first_access_at of this UserResponse.
        :rtype: datetime
        """
        return self._first_access_at

    @first_access_at.setter
    def first_access_at(self, first_access_at):
        """Sets the first_access_at of this UserResponse.


        :param first_access_at: The first_access_at of this UserResponse.
        :type first_access_at: datetime
        """

        self._first_access_at = first_access_at

    @property
    def first_name(self):
        """Gets the first_name of this UserResponse.


        :return: The first_name of this UserResponse.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserResponse.


        :param first_name: The first_name of this UserResponse.
        :type first_name: str
        """
        if first_name is not None and len(first_name) < 1:
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `1`")

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this UserResponse.


        :return: The id of this UserResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserResponse.


        :param id: The id of this UserResponse.
        :type id: str
        """

        self._id = id

    @property
    def invite(self):
        """Gets the invite of this UserResponse.


        :return: The invite of this UserResponse.
        :rtype: Invite
        """
        return self._invite

    @invite.setter
    def invite(self, invite):
        """Sets the invite of this UserResponse.


        :param invite: The invite of this UserResponse.
        :type invite: Invite
        """

        self._invite = invite

    @property
    def last_access_at(self):
        """Gets the last_access_at of this UserResponse.


        :return: The last_access_at of this UserResponse.
        :rtype: datetime
        """
        return self._last_access_at

    @last_access_at.setter
    def last_access_at(self, last_access_at):
        """Sets the last_access_at of this UserResponse.


        :param last_access_at: The last_access_at of this UserResponse.
        :type last_access_at: datetime
        """

        self._last_access_at = last_access_at

    @property
    def last_name(self):
        """Gets the last_name of this UserResponse.


        :return: The last_name of this UserResponse.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserResponse.


        :param last_name: The last_name of this UserResponse.
        :type last_name: str
        """
        if last_name is not None and len(last_name) < 1:
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `1`")

        self._last_name = last_name

    @property
    def metadata(self):
        """Gets the metadata of this UserResponse.


        :return: The metadata of this UserResponse.
        :rtype: UserMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this UserResponse.


        :param metadata: The metadata of this UserResponse.
        :type metadata: UserMetadata
        """

        self._metadata = metadata

    @property
    def person_id(self):
        """Gets the person_id of this UserResponse.


        :return: The person_id of this UserResponse.
        :rtype: str
        """
        return self._person_id

    @person_id.setter
    def person_id(self, person_id):
        """Sets the person_id of this UserResponse.


        :param person_id: The person_id of this UserResponse.
        :type person_id: str
        """
        if person_id is not None and len(person_id) < 1:
            raise ValueError("Invalid value for `person_id`, length must be greater than or equal to `1`")

        self._person_id = person_id

    @property
    def profile(self):
        """Gets the profile of this UserResponse.


        :return: The profile of this UserResponse.
        :rtype: UserProfile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this UserResponse.


        :param profile: The profile of this UserResponse.
        :type profile: UserProfile
        """

        self._profile = profile
