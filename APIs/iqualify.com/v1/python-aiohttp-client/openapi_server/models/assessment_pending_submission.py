# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document import Document
from openapi_server.models.theme_response import ThemeResponse
from openapi_server.models.user import User
from openapi_server import util


class AssessmentPendingSubmission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, documents: List[Document]=None, due_date: datetime=None, duration_minutes: int=None, filename: str=None, hidden: bool=False, id: str=None, mark_number: str=None, mark_type: str=None, max_attempts: int=None, offering_id: str=None, offering_name: str=None, open_date: datetime=None, pid: str=None, points: str=None, themes: List[ThemeResponse]=None, title: str=None, total_questions: int=None, total_themes: int=None, type: str=None, users: List[User]=None):
        """AssessmentPendingSubmission - a model defined in OpenAPI

        :param content: The content of this AssessmentPendingSubmission.
        :param documents: The documents of this AssessmentPendingSubmission.
        :param due_date: The due_date of this AssessmentPendingSubmission.
        :param duration_minutes: The duration_minutes of this AssessmentPendingSubmission.
        :param filename: The filename of this AssessmentPendingSubmission.
        :param hidden: The hidden of this AssessmentPendingSubmission.
        :param id: The id of this AssessmentPendingSubmission.
        :param mark_number: The mark_number of this AssessmentPendingSubmission.
        :param mark_type: The mark_type of this AssessmentPendingSubmission.
        :param max_attempts: The max_attempts of this AssessmentPendingSubmission.
        :param offering_id: The offering_id of this AssessmentPendingSubmission.
        :param offering_name: The offering_name of this AssessmentPendingSubmission.
        :param open_date: The open_date of this AssessmentPendingSubmission.
        :param pid: The pid of this AssessmentPendingSubmission.
        :param points: The points of this AssessmentPendingSubmission.
        :param themes: The themes of this AssessmentPendingSubmission.
        :param title: The title of this AssessmentPendingSubmission.
        :param total_questions: The total_questions of this AssessmentPendingSubmission.
        :param total_themes: The total_themes of this AssessmentPendingSubmission.
        :param type: The type of this AssessmentPendingSubmission.
        :param users: The users of this AssessmentPendingSubmission.
        """
        self.openapi_types = {
            'content': str,
            'documents': List[Document],
            'due_date': datetime,
            'duration_minutes': int,
            'filename': str,
            'hidden': bool,
            'id': str,
            'mark_number': str,
            'mark_type': str,
            'max_attempts': int,
            'offering_id': str,
            'offering_name': str,
            'open_date': datetime,
            'pid': str,
            'points': str,
            'themes': List[ThemeResponse],
            'title': str,
            'total_questions': int,
            'total_themes': int,
            'type': str,
            'users': List[User]
        }

        self.attribute_map = {
            'content': 'content',
            'documents': 'documents',
            'due_date': 'dueDate',
            'duration_minutes': 'durationMinutes',
            'filename': 'filename',
            'hidden': 'hidden',
            'id': 'id',
            'mark_number': 'markNumber',
            'mark_type': 'markType',
            'max_attempts': 'maxAttempts',
            'offering_id': 'offeringId',
            'offering_name': 'offeringName',
            'open_date': 'openDate',
            'pid': 'pid',
            'points': 'points',
            'themes': 'themes',
            'title': 'title',
            'total_questions': 'totalQuestions',
            'total_themes': 'totalThemes',
            'type': 'type',
            'users': 'users'
        }

        self._content = content
        self._documents = documents
        self._due_date = due_date
        self._duration_minutes = duration_minutes
        self._filename = filename
        self._hidden = hidden
        self._id = id
        self._mark_number = mark_number
        self._mark_type = mark_type
        self._max_attempts = max_attempts
        self._offering_id = offering_id
        self._offering_name = offering_name
        self._open_date = open_date
        self._pid = pid
        self._points = points
        self._themes = themes
        self._title = title
        self._total_questions = total_questions
        self._total_themes = total_themes
        self._type = type
        self._users = users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssessmentPendingSubmission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssessmentPendingSubmission of this AssessmentPendingSubmission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this AssessmentPendingSubmission.


        :return: The content of this AssessmentPendingSubmission.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this AssessmentPendingSubmission.


        :param content: The content of this AssessmentPendingSubmission.
        :type content: str
        """

        self._content = content

    @property
    def documents(self):
        """Gets the documents of this AssessmentPendingSubmission.


        :return: The documents of this AssessmentPendingSubmission.
        :rtype: List[Document]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this AssessmentPendingSubmission.


        :param documents: The documents of this AssessmentPendingSubmission.
        :type documents: List[Document]
        """

        self._documents = documents

    @property
    def due_date(self):
        """Gets the due_date of this AssessmentPendingSubmission.


        :return: The due_date of this AssessmentPendingSubmission.
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this AssessmentPendingSubmission.


        :param due_date: The due_date of this AssessmentPendingSubmission.
        :type due_date: datetime
        """

        self._due_date = due_date

    @property
    def duration_minutes(self):
        """Gets the duration_minutes of this AssessmentPendingSubmission.


        :return: The duration_minutes of this AssessmentPendingSubmission.
        :rtype: int
        """
        return self._duration_minutes

    @duration_minutes.setter
    def duration_minutes(self, duration_minutes):
        """Sets the duration_minutes of this AssessmentPendingSubmission.


        :param duration_minutes: The duration_minutes of this AssessmentPendingSubmission.
        :type duration_minutes: int
        """

        self._duration_minutes = duration_minutes

    @property
    def filename(self):
        """Gets the filename of this AssessmentPendingSubmission.


        :return: The filename of this AssessmentPendingSubmission.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this AssessmentPendingSubmission.


        :param filename: The filename of this AssessmentPendingSubmission.
        :type filename: str
        """

        self._filename = filename

    @property
    def hidden(self):
        """Gets the hidden of this AssessmentPendingSubmission.


        :return: The hidden of this AssessmentPendingSubmission.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this AssessmentPendingSubmission.


        :param hidden: The hidden of this AssessmentPendingSubmission.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def id(self):
        """Gets the id of this AssessmentPendingSubmission.


        :return: The id of this AssessmentPendingSubmission.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssessmentPendingSubmission.


        :param id: The id of this AssessmentPendingSubmission.
        :type id: str
        """

        self._id = id

    @property
    def mark_number(self):
        """Gets the mark_number of this AssessmentPendingSubmission.


        :return: The mark_number of this AssessmentPendingSubmission.
        :rtype: str
        """
        return self._mark_number

    @mark_number.setter
    def mark_number(self, mark_number):
        """Sets the mark_number of this AssessmentPendingSubmission.


        :param mark_number: The mark_number of this AssessmentPendingSubmission.
        :type mark_number: str
        """
        if mark_number is not None and len(mark_number) < 1:
            raise ValueError("Invalid value for `mark_number`, length must be greater than or equal to `1`")

        self._mark_number = mark_number

    @property
    def mark_type(self):
        """Gets the mark_type of this AssessmentPendingSubmission.


        :return: The mark_type of this AssessmentPendingSubmission.
        :rtype: str
        """
        return self._mark_type

    @mark_type.setter
    def mark_type(self, mark_type):
        """Sets the mark_type of this AssessmentPendingSubmission.


        :param mark_type: The mark_type of this AssessmentPendingSubmission.
        :type mark_type: str
        """
        if mark_type is not None and len(mark_type) < 1:
            raise ValueError("Invalid value for `mark_type`, length must be greater than or equal to `1`")

        self._mark_type = mark_type

    @property
    def max_attempts(self):
        """Gets the max_attempts of this AssessmentPendingSubmission.


        :return: The max_attempts of this AssessmentPendingSubmission.
        :rtype: int
        """
        return self._max_attempts

    @max_attempts.setter
    def max_attempts(self, max_attempts):
        """Sets the max_attempts of this AssessmentPendingSubmission.


        :param max_attempts: The max_attempts of this AssessmentPendingSubmission.
        :type max_attempts: int
        """

        self._max_attempts = max_attempts

    @property
    def offering_id(self):
        """Gets the offering_id of this AssessmentPendingSubmission.


        :return: The offering_id of this AssessmentPendingSubmission.
        :rtype: str
        """
        return self._offering_id

    @offering_id.setter
    def offering_id(self, offering_id):
        """Sets the offering_id of this AssessmentPendingSubmission.


        :param offering_id: The offering_id of this AssessmentPendingSubmission.
        :type offering_id: str
        """

        self._offering_id = offering_id

    @property
    def offering_name(self):
        """Gets the offering_name of this AssessmentPendingSubmission.


        :return: The offering_name of this AssessmentPendingSubmission.
        :rtype: str
        """
        return self._offering_name

    @offering_name.setter
    def offering_name(self, offering_name):
        """Sets the offering_name of this AssessmentPendingSubmission.


        :param offering_name: The offering_name of this AssessmentPendingSubmission.
        :type offering_name: str
        """

        self._offering_name = offering_name

    @property
    def open_date(self):
        """Gets the open_date of this AssessmentPendingSubmission.


        :return: The open_date of this AssessmentPendingSubmission.
        :rtype: datetime
        """
        return self._open_date

    @open_date.setter
    def open_date(self, open_date):
        """Sets the open_date of this AssessmentPendingSubmission.


        :param open_date: The open_date of this AssessmentPendingSubmission.
        :type open_date: datetime
        """

        self._open_date = open_date

    @property
    def pid(self):
        """Gets the pid of this AssessmentPendingSubmission.


        :return: The pid of this AssessmentPendingSubmission.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this AssessmentPendingSubmission.


        :param pid: The pid of this AssessmentPendingSubmission.
        :type pid: str
        """

        self._pid = pid

    @property
    def points(self):
        """Gets the points of this AssessmentPendingSubmission.


        :return: The points of this AssessmentPendingSubmission.
        :rtype: str
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this AssessmentPendingSubmission.


        :param points: The points of this AssessmentPendingSubmission.
        :type points: str
        """

        self._points = points

    @property
    def themes(self):
        """Gets the themes of this AssessmentPendingSubmission.


        :return: The themes of this AssessmentPendingSubmission.
        :rtype: List[ThemeResponse]
        """
        return self._themes

    @themes.setter
    def themes(self, themes):
        """Sets the themes of this AssessmentPendingSubmission.


        :param themes: The themes of this AssessmentPendingSubmission.
        :type themes: List[ThemeResponse]
        """

        self._themes = themes

    @property
    def title(self):
        """Gets the title of this AssessmentPendingSubmission.


        :return: The title of this AssessmentPendingSubmission.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AssessmentPendingSubmission.


        :param title: The title of this AssessmentPendingSubmission.
        :type title: str
        """

        self._title = title

    @property
    def total_questions(self):
        """Gets the total_questions of this AssessmentPendingSubmission.


        :return: The total_questions of this AssessmentPendingSubmission.
        :rtype: int
        """
        return self._total_questions

    @total_questions.setter
    def total_questions(self, total_questions):
        """Sets the total_questions of this AssessmentPendingSubmission.


        :param total_questions: The total_questions of this AssessmentPendingSubmission.
        :type total_questions: int
        """

        self._total_questions = total_questions

    @property
    def total_themes(self):
        """Gets the total_themes of this AssessmentPendingSubmission.


        :return: The total_themes of this AssessmentPendingSubmission.
        :rtype: int
        """
        return self._total_themes

    @total_themes.setter
    def total_themes(self, total_themes):
        """Sets the total_themes of this AssessmentPendingSubmission.


        :param total_themes: The total_themes of this AssessmentPendingSubmission.
        :type total_themes: int
        """

        self._total_themes = total_themes

    @property
    def type(self):
        """Gets the type of this AssessmentPendingSubmission.


        :return: The type of this AssessmentPendingSubmission.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AssessmentPendingSubmission.


        :param type: The type of this AssessmentPendingSubmission.
        :type type: str
        """

        self._type = type

    @property
    def users(self):
        """Gets the users of this AssessmentPendingSubmission.


        :return: The users of this AssessmentPendingSubmission.
        :rtype: List[User]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this AssessmentPendingSubmission.


        :param users: The users of this AssessmentPendingSubmission.
        :type users: List[User]
        """

        self._users = users
