# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.activation_response_metadata import ActivationResponseMetadata
from openapi_server import util


class PortfolioActivations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_id: str=None, end: datetime=None, id: str=None, info: str=None, learners_count: float=None, metadata: ActivationResponseMetadata=None, name: str=None, start: datetime=None):
        """PortfolioActivations - a model defined in OpenAPI

        :param content_id: The content_id of this PortfolioActivations.
        :param end: The end of this PortfolioActivations.
        :param id: The id of this PortfolioActivations.
        :param info: The info of this PortfolioActivations.
        :param learners_count: The learners_count of this PortfolioActivations.
        :param metadata: The metadata of this PortfolioActivations.
        :param name: The name of this PortfolioActivations.
        :param start: The start of this PortfolioActivations.
        """
        self.openapi_types = {
            'content_id': str,
            'end': datetime,
            'id': str,
            'info': str,
            'learners_count': float,
            'metadata': ActivationResponseMetadata,
            'name': str,
            'start': datetime
        }

        self.attribute_map = {
            'content_id': 'contentId',
            'end': 'end',
            'id': 'id',
            'info': 'info',
            'learners_count': 'learnersCount',
            'metadata': 'metadata',
            'name': 'name',
            'start': 'start'
        }

        self._content_id = content_id
        self._end = end
        self._id = id
        self._info = info
        self._learners_count = learners_count
        self._metadata = metadata
        self._name = name
        self._start = start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortfolioActivations':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PortfolioActivations of this PortfolioActivations.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_id(self):
        """Gets the content_id of this PortfolioActivations.


        :return: The content_id of this PortfolioActivations.
        :rtype: str
        """
        return self._content_id

    @content_id.setter
    def content_id(self, content_id):
        """Sets the content_id of this PortfolioActivations.


        :param content_id: The content_id of this PortfolioActivations.
        :type content_id: str
        """

        self._content_id = content_id

    @property
    def end(self):
        """Gets the end of this PortfolioActivations.


        :return: The end of this PortfolioActivations.
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this PortfolioActivations.


        :param end: The end of this PortfolioActivations.
        :type end: datetime
        """

        self._end = end

    @property
    def id(self):
        """Gets the id of this PortfolioActivations.


        :return: The id of this PortfolioActivations.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PortfolioActivations.


        :param id: The id of this PortfolioActivations.
        :type id: str
        """

        self._id = id

    @property
    def info(self):
        """Gets the info of this PortfolioActivations.


        :return: The info of this PortfolioActivations.
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this PortfolioActivations.


        :param info: The info of this PortfolioActivations.
        :type info: str
        """

        self._info = info

    @property
    def learners_count(self):
        """Gets the learners_count of this PortfolioActivations.

        number of learners in the offering, excluding facilitators and coaches

        :return: The learners_count of this PortfolioActivations.
        :rtype: float
        """
        return self._learners_count

    @learners_count.setter
    def learners_count(self, learners_count):
        """Sets the learners_count of this PortfolioActivations.

        number of learners in the offering, excluding facilitators and coaches

        :param learners_count: The learners_count of this PortfolioActivations.
        :type learners_count: float
        """

        self._learners_count = learners_count

    @property
    def metadata(self):
        """Gets the metadata of this PortfolioActivations.


        :return: The metadata of this PortfolioActivations.
        :rtype: ActivationResponseMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PortfolioActivations.


        :param metadata: The metadata of this PortfolioActivations.
        :type metadata: ActivationResponseMetadata
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this PortfolioActivations.


        :return: The name of this PortfolioActivations.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PortfolioActivations.


        :param name: The name of this PortfolioActivations.
        :type name: str
        """

        self._name = name

    @property
    def start(self):
        """Gets the start of this PortfolioActivations.


        :return: The start of this PortfolioActivations.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this PortfolioActivations.


        :param start: The start of this PortfolioActivations.
        :type start: datetime
        """

        self._start = start
