# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.offering_badge import OfferingBadge
from openapi_server.models.offering_metadata import OfferingMetadata
from openapi_server import util


class Offering(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, badge: OfferingBadge=None, content_id: str=None, description: str=None, early_close_off_date: datetime=None, end: datetime=None, has_early_close_off: bool=None, identifier: str=None, is_readonly: bool=None, metadata: OfferingMetadata=None, name: str=None, overview: str=None, root_content_id: str=None, start: datetime=None, trailer_video_url: str=None, use_relative_dates: bool=None):
        """Offering - a model defined in OpenAPI

        :param badge: The badge of this Offering.
        :param content_id: The content_id of this Offering.
        :param description: The description of this Offering.
        :param early_close_off_date: The early_close_off_date of this Offering.
        :param end: The end of this Offering.
        :param has_early_close_off: The has_early_close_off of this Offering.
        :param identifier: The identifier of this Offering.
        :param is_readonly: The is_readonly of this Offering.
        :param metadata: The metadata of this Offering.
        :param name: The name of this Offering.
        :param overview: The overview of this Offering.
        :param root_content_id: The root_content_id of this Offering.
        :param start: The start of this Offering.
        :param trailer_video_url: The trailer_video_url of this Offering.
        :param use_relative_dates: The use_relative_dates of this Offering.
        """
        self.openapi_types = {
            'badge': OfferingBadge,
            'content_id': str,
            'description': str,
            'early_close_off_date': datetime,
            'end': datetime,
            'has_early_close_off': bool,
            'identifier': str,
            'is_readonly': bool,
            'metadata': OfferingMetadata,
            'name': str,
            'overview': str,
            'root_content_id': str,
            'start': datetime,
            'trailer_video_url': str,
            'use_relative_dates': bool
        }

        self.attribute_map = {
            'badge': 'badge',
            'content_id': 'contentId',
            'description': 'description',
            'early_close_off_date': 'earlyCloseOffDate',
            'end': 'end',
            'has_early_close_off': 'hasEarlyCloseOff',
            'identifier': 'identifier',
            'is_readonly': 'isReadonly',
            'metadata': 'metadata',
            'name': 'name',
            'overview': 'overview',
            'root_content_id': 'rootContentId',
            'start': 'start',
            'trailer_video_url': 'trailerVideoUrl',
            'use_relative_dates': 'useRelativeDates'
        }

        self._badge = badge
        self._content_id = content_id
        self._description = description
        self._early_close_off_date = early_close_off_date
        self._end = end
        self._has_early_close_off = has_early_close_off
        self._identifier = identifier
        self._is_readonly = is_readonly
        self._metadata = metadata
        self._name = name
        self._overview = overview
        self._root_content_id = root_content_id
        self._start = start
        self._trailer_video_url = trailer_video_url
        self._use_relative_dates = use_relative_dates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Offering':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Offering of this Offering.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def badge(self):
        """Gets the badge of this Offering.


        :return: The badge of this Offering.
        :rtype: OfferingBadge
        """
        return self._badge

    @badge.setter
    def badge(self, badge):
        """Sets the badge of this Offering.


        :param badge: The badge of this Offering.
        :type badge: OfferingBadge
        """

        self._badge = badge

    @property
    def content_id(self):
        """Gets the content_id of this Offering.

        The identifier for a specific version of a course

        :return: The content_id of this Offering.
        :rtype: str
        """
        return self._content_id

    @content_id.setter
    def content_id(self, content_id):
        """Sets the content_id of this Offering.

        The identifier for a specific version of a course

        :param content_id: The content_id of this Offering.
        :type content_id: str
        """
        if content_id is not None and len(content_id) < 1:
            raise ValueError("Invalid value for `content_id`, length must be greater than or equal to `1`")

        self._content_id = content_id

    @property
    def description(self):
        """Gets the description of this Offering.


        :return: The description of this Offering.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Offering.


        :param description: The description of this Offering.
        :type description: str
        """
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def early_close_off_date(self):
        """Gets the early_close_off_date of this Offering.


        :return: The early_close_off_date of this Offering.
        :rtype: datetime
        """
        return self._early_close_off_date

    @early_close_off_date.setter
    def early_close_off_date(self, early_close_off_date):
        """Sets the early_close_off_date of this Offering.


        :param early_close_off_date: The early_close_off_date of this Offering.
        :type early_close_off_date: datetime
        """

        self._early_close_off_date = early_close_off_date

    @property
    def end(self):
        """Gets the end of this Offering.


        :return: The end of this Offering.
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Offering.


        :param end: The end of this Offering.
        :type end: datetime
        """

        self._end = end

    @property
    def has_early_close_off(self):
        """Gets the has_early_close_off of this Offering.


        :return: The has_early_close_off of this Offering.
        :rtype: bool
        """
        return self._has_early_close_off

    @has_early_close_off.setter
    def has_early_close_off(self, has_early_close_off):
        """Sets the has_early_close_off of this Offering.


        :param has_early_close_off: The has_early_close_off of this Offering.
        :type has_early_close_off: bool
        """

        self._has_early_close_off = has_early_close_off

    @property
    def identifier(self):
        """Gets the identifier of this Offering.


        :return: The identifier of this Offering.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Offering.


        :param identifier: The identifier of this Offering.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def is_readonly(self):
        """Gets the is_readonly of this Offering.


        :return: The is_readonly of this Offering.
        :rtype: bool
        """
        return self._is_readonly

    @is_readonly.setter
    def is_readonly(self, is_readonly):
        """Sets the is_readonly of this Offering.


        :param is_readonly: The is_readonly of this Offering.
        :type is_readonly: bool
        """

        self._is_readonly = is_readonly

    @property
    def metadata(self):
        """Gets the metadata of this Offering.


        :return: The metadata of this Offering.
        :rtype: OfferingMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Offering.


        :param metadata: The metadata of this Offering.
        :type metadata: OfferingMetadata
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this Offering.


        :return: The name of this Offering.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Offering.


        :param name: The name of this Offering.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def overview(self):
        """Gets the overview of this Offering.


        :return: The overview of this Offering.
        :rtype: str
        """
        return self._overview

    @overview.setter
    def overview(self, overview):
        """Sets the overview of this Offering.


        :param overview: The overview of this Offering.
        :type overview: str
        """

        self._overview = overview

    @property
    def root_content_id(self):
        """Gets the root_content_id of this Offering.

        Every time a course is republished it is assigned a new contentId. rootContentId is the first original contentId associated with a course.

        :return: The root_content_id of this Offering.
        :rtype: str
        """
        return self._root_content_id

    @root_content_id.setter
    def root_content_id(self, root_content_id):
        """Sets the root_content_id of this Offering.

        Every time a course is republished it is assigned a new contentId. rootContentId is the first original contentId associated with a course.

        :param root_content_id: The root_content_id of this Offering.
        :type root_content_id: str
        """

        self._root_content_id = root_content_id

    @property
    def start(self):
        """Gets the start of this Offering.


        :return: The start of this Offering.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Offering.


        :param start: The start of this Offering.
        :type start: datetime
        """

        self._start = start

    @property
    def trailer_video_url(self):
        """Gets the trailer_video_url of this Offering.


        :return: The trailer_video_url of this Offering.
        :rtype: str
        """
        return self._trailer_video_url

    @trailer_video_url.setter
    def trailer_video_url(self, trailer_video_url):
        """Sets the trailer_video_url of this Offering.


        :param trailer_video_url: The trailer_video_url of this Offering.
        :type trailer_video_url: str
        """
        if trailer_video_url is not None and len(trailer_video_url) < 1:
            raise ValueError("Invalid value for `trailer_video_url`, length must be greater than or equal to `1`")

        self._trailer_video_url = trailer_video_url

    @property
    def use_relative_dates(self):
        """Gets the use_relative_dates of this Offering.


        :return: The use_relative_dates of this Offering.
        :rtype: bool
        """
        return self._use_relative_dates

    @use_relative_dates.setter
    def use_relative_dates(self, use_relative_dates):
        """Sets the use_relative_dates of this Offering.


        :param use_relative_dates: The use_relative_dates of this Offering.
        :type use_relative_dates: bool
        """

        self._use_relative_dates = use_relative_dates
