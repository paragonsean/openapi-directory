# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_metadata import UserMetadata
from openapi_server.models.user_profile_request import UserProfileRequest
from openapi_server import util


class OfferingUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, first_name: str=None, is_facilitator: bool=False, is_marker: bool=False, is_readonly: bool=False, last_name: str=None, metadata: UserMetadata=None, person_id: str=None, profile: UserProfileRequest=None, send_invite: bool=True, send_notification_email: bool=True):
        """OfferingUser - a model defined in OpenAPI

        :param email: The email of this OfferingUser.
        :param first_name: The first_name of this OfferingUser.
        :param is_facilitator: The is_facilitator of this OfferingUser.
        :param is_marker: The is_marker of this OfferingUser.
        :param is_readonly: The is_readonly of this OfferingUser.
        :param last_name: The last_name of this OfferingUser.
        :param metadata: The metadata of this OfferingUser.
        :param person_id: The person_id of this OfferingUser.
        :param profile: The profile of this OfferingUser.
        :param send_invite: The send_invite of this OfferingUser.
        :param send_notification_email: The send_notification_email of this OfferingUser.
        """
        self.openapi_types = {
            'email': str,
            'first_name': str,
            'is_facilitator': bool,
            'is_marker': bool,
            'is_readonly': bool,
            'last_name': str,
            'metadata': UserMetadata,
            'person_id': str,
            'profile': UserProfileRequest,
            'send_invite': bool,
            'send_notification_email': bool
        }

        self.attribute_map = {
            'email': 'email',
            'first_name': 'firstName',
            'is_facilitator': 'isFacilitator',
            'is_marker': 'isMarker',
            'is_readonly': 'isReadonly',
            'last_name': 'lastName',
            'metadata': 'metadata',
            'person_id': 'personId',
            'profile': 'profile',
            'send_invite': 'sendInvite',
            'send_notification_email': 'sendNotificationEmail'
        }

        self._email = email
        self._first_name = first_name
        self._is_facilitator = is_facilitator
        self._is_marker = is_marker
        self._is_readonly = is_readonly
        self._last_name = last_name
        self._metadata = metadata
        self._person_id = person_id
        self._profile = profile
        self._send_invite = send_invite
        self._send_notification_email = send_notification_email

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OfferingUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OfferingUser of this OfferingUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this OfferingUser.


        :return: The email of this OfferingUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this OfferingUser.


        :param email: The email of this OfferingUser.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")
        if email is not None and len(email) < 1:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this OfferingUser.


        :return: The first_name of this OfferingUser.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this OfferingUser.


        :param first_name: The first_name of this OfferingUser.
        :type first_name: str
        """
        if first_name is not None and len(first_name) < 1:
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `1`")

        self._first_name = first_name

    @property
    def is_facilitator(self):
        """Gets the is_facilitator of this OfferingUser.


        :return: The is_facilitator of this OfferingUser.
        :rtype: bool
        """
        return self._is_facilitator

    @is_facilitator.setter
    def is_facilitator(self, is_facilitator):
        """Sets the is_facilitator of this OfferingUser.


        :param is_facilitator: The is_facilitator of this OfferingUser.
        :type is_facilitator: bool
        """

        self._is_facilitator = is_facilitator

    @property
    def is_marker(self):
        """Gets the is_marker of this OfferingUser.


        :return: The is_marker of this OfferingUser.
        :rtype: bool
        """
        return self._is_marker

    @is_marker.setter
    def is_marker(self, is_marker):
        """Sets the is_marker of this OfferingUser.


        :param is_marker: The is_marker of this OfferingUser.
        :type is_marker: bool
        """

        self._is_marker = is_marker

    @property
    def is_readonly(self):
        """Gets the is_readonly of this OfferingUser.


        :return: The is_readonly of this OfferingUser.
        :rtype: bool
        """
        return self._is_readonly

    @is_readonly.setter
    def is_readonly(self, is_readonly):
        """Sets the is_readonly of this OfferingUser.


        :param is_readonly: The is_readonly of this OfferingUser.
        :type is_readonly: bool
        """

        self._is_readonly = is_readonly

    @property
    def last_name(self):
        """Gets the last_name of this OfferingUser.


        :return: The last_name of this OfferingUser.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this OfferingUser.


        :param last_name: The last_name of this OfferingUser.
        :type last_name: str
        """
        if last_name is not None and len(last_name) < 1:
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `1`")

        self._last_name = last_name

    @property
    def metadata(self):
        """Gets the metadata of this OfferingUser.


        :return: The metadata of this OfferingUser.
        :rtype: UserMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this OfferingUser.


        :param metadata: The metadata of this OfferingUser.
        :type metadata: UserMetadata
        """

        self._metadata = metadata

    @property
    def person_id(self):
        """Gets the person_id of this OfferingUser.


        :return: The person_id of this OfferingUser.
        :rtype: str
        """
        return self._person_id

    @person_id.setter
    def person_id(self, person_id):
        """Sets the person_id of this OfferingUser.


        :param person_id: The person_id of this OfferingUser.
        :type person_id: str
        """
        if person_id is not None and len(person_id) < 1:
            raise ValueError("Invalid value for `person_id`, length must be greater than or equal to `1`")

        self._person_id = person_id

    @property
    def profile(self):
        """Gets the profile of this OfferingUser.


        :return: The profile of this OfferingUser.
        :rtype: UserProfileRequest
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this OfferingUser.


        :param profile: The profile of this OfferingUser.
        :type profile: UserProfileRequest
        """

        self._profile = profile

    @property
    def send_invite(self):
        """Gets the send_invite of this OfferingUser.


        :return: The send_invite of this OfferingUser.
        :rtype: bool
        """
        return self._send_invite

    @send_invite.setter
    def send_invite(self, send_invite):
        """Sets the send_invite of this OfferingUser.


        :param send_invite: The send_invite of this OfferingUser.
        :type send_invite: bool
        """

        self._send_invite = send_invite

    @property
    def send_notification_email(self):
        """Gets the send_notification_email of this OfferingUser.


        :return: The send_notification_email of this OfferingUser.
        :rtype: bool
        """
        return self._send_notification_email

    @send_notification_email.setter
    def send_notification_email(self, send_notification_email):
        """Sets the send_notification_email of this OfferingUser.


        :param send_notification_email: The send_notification_email of this OfferingUser.
        :type send_notification_email: bool
        """

        self._send_notification_email = send_notification_email
