# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PortfolioMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, level: str=None, tags: List[str]=None, topic: str=None):
        """PortfolioMetadata - a model defined in OpenAPI

        :param category: The category of this PortfolioMetadata.
        :param level: The level of this PortfolioMetadata.
        :param tags: The tags of this PortfolioMetadata.
        :param topic: The topic of this PortfolioMetadata.
        """
        self.openapi_types = {
            'category': str,
            'level': str,
            'tags': List[str],
            'topic': str
        }

        self.attribute_map = {
            'category': 'category',
            'level': 'level',
            'tags': 'tags',
            'topic': 'topic'
        }

        self._category = category
        self._level = level
        self._tags = tags
        self._topic = topic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortfolioMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PortfolioMetadata of this PortfolioMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this PortfolioMetadata.


        :return: The category of this PortfolioMetadata.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this PortfolioMetadata.


        :param category: The category of this PortfolioMetadata.
        :type category: str
        """

        self._category = category

    @property
    def level(self):
        """Gets the level of this PortfolioMetadata.


        :return: The level of this PortfolioMetadata.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this PortfolioMetadata.


        :param level: The level of this PortfolioMetadata.
        :type level: str
        """

        self._level = level

    @property
    def tags(self):
        """Gets the tags of this PortfolioMetadata.


        :return: The tags of this PortfolioMetadata.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PortfolioMetadata.


        :param tags: The tags of this PortfolioMetadata.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def topic(self):
        """Gets the topic of this PortfolioMetadata.


        :return: The topic of this PortfolioMetadata.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this PortfolioMetadata.


        :param topic: The topic of this PortfolioMetadata.
        :type topic: str
        """

        self._topic = topic
