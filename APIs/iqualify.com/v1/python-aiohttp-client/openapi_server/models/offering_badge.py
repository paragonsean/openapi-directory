# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.badge_expiry import BadgeExpiry
from openapi_server import util


class OfferingBadge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, badge_expiry: BadgeExpiry=None, description: str=None, requires_approval: bool=None, title: str=None):
        """OfferingBadge - a model defined in OpenAPI

        :param badge_expiry: The badge_expiry of this OfferingBadge.
        :param description: The description of this OfferingBadge.
        :param requires_approval: The requires_approval of this OfferingBadge.
        :param title: The title of this OfferingBadge.
        """
        self.openapi_types = {
            'badge_expiry': BadgeExpiry,
            'description': str,
            'requires_approval': bool,
            'title': str
        }

        self.attribute_map = {
            'badge_expiry': 'badgeExpiry',
            'description': 'description',
            'requires_approval': 'requiresApproval',
            'title': 'title'
        }

        self._badge_expiry = badge_expiry
        self._description = description
        self._requires_approval = requires_approval
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OfferingBadge':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Offering_badge of this OfferingBadge.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def badge_expiry(self):
        """Gets the badge_expiry of this OfferingBadge.


        :return: The badge_expiry of this OfferingBadge.
        :rtype: BadgeExpiry
        """
        return self._badge_expiry

    @badge_expiry.setter
    def badge_expiry(self, badge_expiry):
        """Sets the badge_expiry of this OfferingBadge.


        :param badge_expiry: The badge_expiry of this OfferingBadge.
        :type badge_expiry: BadgeExpiry
        """

        self._badge_expiry = badge_expiry

    @property
    def description(self):
        """Gets the description of this OfferingBadge.


        :return: The description of this OfferingBadge.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OfferingBadge.


        :param description: The description of this OfferingBadge.
        :type description: str
        """

        self._description = description

    @property
    def requires_approval(self):
        """Gets the requires_approval of this OfferingBadge.


        :return: The requires_approval of this OfferingBadge.
        :rtype: bool
        """
        return self._requires_approval

    @requires_approval.setter
    def requires_approval(self, requires_approval):
        """Sets the requires_approval of this OfferingBadge.


        :param requires_approval: The requires_approval of this OfferingBadge.
        :type requires_approval: bool
        """

        self._requires_approval = requires_approval

    @property
    def title(self):
        """Gets the title of this OfferingBadge.


        :return: The title of this OfferingBadge.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this OfferingBadge.


        :param title: The title of this OfferingBadge.
        :type title: str
        """

        self._title = title
