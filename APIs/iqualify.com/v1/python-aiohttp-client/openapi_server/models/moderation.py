# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.moderator import Moderator
from openapi_server import util


class Moderation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_muted: bool=None, moderator: Moderator=None, reason: str=None):
        """Moderation - a model defined in OpenAPI

        :param is_muted: The is_muted of this Moderation.
        :param moderator: The moderator of this Moderation.
        :param reason: The reason of this Moderation.
        """
        self.openapi_types = {
            'is_muted': bool,
            'moderator': Moderator,
            'reason': str
        }

        self.attribute_map = {
            'is_muted': 'isMuted',
            'moderator': 'moderator',
            'reason': 'reason'
        }

        self._is_muted = is_muted
        self._moderator = moderator
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Moderation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Moderation of this Moderation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_muted(self):
        """Gets the is_muted of this Moderation.


        :return: The is_muted of this Moderation.
        :rtype: bool
        """
        return self._is_muted

    @is_muted.setter
    def is_muted(self, is_muted):
        """Sets the is_muted of this Moderation.


        :param is_muted: The is_muted of this Moderation.
        :type is_muted: bool
        """

        self._is_muted = is_muted

    @property
    def moderator(self):
        """Gets the moderator of this Moderation.


        :return: The moderator of this Moderation.
        :rtype: Moderator
        """
        return self._moderator

    @moderator.setter
    def moderator(self, moderator):
        """Sets the moderator of this Moderation.


        :param moderator: The moderator of this Moderation.
        :type moderator: Moderator
        """

        self._moderator = moderator

    @property
    def reason(self):
        """Gets the reason of this Moderation.


        :return: The reason of this Moderation.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Moderation.


        :param reason: The reason of this Moderation.
        :type reason: str
        """

        self._reason = reason
