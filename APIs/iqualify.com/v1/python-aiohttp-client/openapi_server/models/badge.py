# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.badge_expiry import BadgeExpiry
from openapi_server.models.criteria import Criteria
from openapi_server.models.open_badge_class import OpenBadgeClass
from openapi_server import util


class Badge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, badge_expiry: BadgeExpiry=None, badge_url: str=None, criterias: Criteria=None, description: str=None, open_badge: OpenBadgeClass=None, title: str=None):
        """Badge - a model defined in OpenAPI

        :param badge_expiry: The badge_expiry of this Badge.
        :param badge_url: The badge_url of this Badge.
        :param criterias: The criterias of this Badge.
        :param description: The description of this Badge.
        :param open_badge: The open_badge of this Badge.
        :param title: The title of this Badge.
        """
        self.openapi_types = {
            'badge_expiry': BadgeExpiry,
            'badge_url': str,
            'criterias': Criteria,
            'description': str,
            'open_badge': OpenBadgeClass,
            'title': str
        }

        self.attribute_map = {
            'badge_expiry': 'badgeExpiry',
            'badge_url': 'badgeUrl',
            'criterias': 'criterias',
            'description': 'description',
            'open_badge': 'openBadge',
            'title': 'title'
        }

        self._badge_expiry = badge_expiry
        self._badge_url = badge_url
        self._criterias = criterias
        self._description = description
        self._open_badge = open_badge
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Badge':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Badge of this Badge.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def badge_expiry(self):
        """Gets the badge_expiry of this Badge.


        :return: The badge_expiry of this Badge.
        :rtype: BadgeExpiry
        """
        return self._badge_expiry

    @badge_expiry.setter
    def badge_expiry(self, badge_expiry):
        """Sets the badge_expiry of this Badge.


        :param badge_expiry: The badge_expiry of this Badge.
        :type badge_expiry: BadgeExpiry
        """

        self._badge_expiry = badge_expiry

    @property
    def badge_url(self):
        """Gets the badge_url of this Badge.


        :return: The badge_url of this Badge.
        :rtype: str
        """
        return self._badge_url

    @badge_url.setter
    def badge_url(self, badge_url):
        """Sets the badge_url of this Badge.


        :param badge_url: The badge_url of this Badge.
        :type badge_url: str
        """

        self._badge_url = badge_url

    @property
    def criterias(self):
        """Gets the criterias of this Badge.


        :return: The criterias of this Badge.
        :rtype: Criteria
        """
        return self._criterias

    @criterias.setter
    def criterias(self, criterias):
        """Sets the criterias of this Badge.


        :param criterias: The criterias of this Badge.
        :type criterias: Criteria
        """

        self._criterias = criterias

    @property
    def description(self):
        """Gets the description of this Badge.


        :return: The description of this Badge.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Badge.


        :param description: The description of this Badge.
        :type description: str
        """

        self._description = description

    @property
    def open_badge(self):
        """Gets the open_badge of this Badge.


        :return: The open_badge of this Badge.
        :rtype: OpenBadgeClass
        """
        return self._open_badge

    @open_badge.setter
    def open_badge(self, open_badge):
        """Sets the open_badge of this Badge.


        :param open_badge: The open_badge of this Badge.
        :type open_badge: OpenBadgeClass
        """

        self._open_badge = open_badge

    @property
    def title(self):
        """Gets the title of this Badge.


        :return: The title of this Badge.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Badge.


        :param title: The title of this Badge.
        :type title: str
        """

        self._title = title
