# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Assessment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, due_date: datetime=None, mark_number: str=None, mark_type: str=None, open_date: datetime=None):
        """Assessment - a model defined in OpenAPI

        :param content: The content of this Assessment.
        :param due_date: The due_date of this Assessment.
        :param mark_number: The mark_number of this Assessment.
        :param mark_type: The mark_type of this Assessment.
        :param open_date: The open_date of this Assessment.
        """
        self.openapi_types = {
            'content': str,
            'due_date': datetime,
            'mark_number': str,
            'mark_type': str,
            'open_date': datetime
        }

        self.attribute_map = {
            'content': 'content',
            'due_date': 'dueDate',
            'mark_number': 'markNumber',
            'mark_type': 'markType',
            'open_date': 'openDate'
        }

        self._content = content
        self._due_date = due_date
        self._mark_number = mark_number
        self._mark_type = mark_type
        self._open_date = open_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Assessment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Assessment of this Assessment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this Assessment.


        :return: The content of this Assessment.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Assessment.


        :param content: The content of this Assessment.
        :type content: str
        """

        self._content = content

    @property
    def due_date(self):
        """Gets the due_date of this Assessment.


        :return: The due_date of this Assessment.
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Assessment.


        :param due_date: The due_date of this Assessment.
        :type due_date: datetime
        """

        self._due_date = due_date

    @property
    def mark_number(self):
        """Gets the mark_number of this Assessment.


        :return: The mark_number of this Assessment.
        :rtype: str
        """
        return self._mark_number

    @mark_number.setter
    def mark_number(self, mark_number):
        """Sets the mark_number of this Assessment.


        :param mark_number: The mark_number of this Assessment.
        :type mark_number: str
        """
        if mark_number is not None and len(mark_number) < 1:
            raise ValueError("Invalid value for `mark_number`, length must be greater than or equal to `1`")

        self._mark_number = mark_number

    @property
    def mark_type(self):
        """Gets the mark_type of this Assessment.


        :return: The mark_type of this Assessment.
        :rtype: str
        """
        return self._mark_type

    @mark_type.setter
    def mark_type(self, mark_type):
        """Sets the mark_type of this Assessment.


        :param mark_type: The mark_type of this Assessment.
        :type mark_type: str
        """
        if mark_type is not None and len(mark_type) < 1:
            raise ValueError("Invalid value for `mark_type`, length must be greater than or equal to `1`")

        self._mark_type = mark_type

    @property
    def open_date(self):
        """Gets the open_date of this Assessment.


        :return: The open_date of this Assessment.
        :rtype: datetime
        """
        return self._open_date

    @open_date.setter
    def open_date(self, open_date):
        """Sets the open_date of this Assessment.


        :param open_date: The open_date of this Assessment.
        :type open_date: datetime
        """

        self._open_date = open_date
