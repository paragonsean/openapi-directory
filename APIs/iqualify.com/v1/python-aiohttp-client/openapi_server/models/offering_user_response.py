# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_profile import UserProfile
from openapi_server import util


class OfferingUserResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar_url: str=None, email: str=None, evaluated_by: List[str]=None, evaluates: List[str]=None, first_name: str=None, id: str=None, is_facilitator: bool=False, is_marker: bool=False, is_readonly: bool=False, last_name: str=None, marked_by: List[str]=None, marks: List[str]=None, person_id: str=None, profile: UserProfile=None):
        """OfferingUserResponse - a model defined in OpenAPI

        :param avatar_url: The avatar_url of this OfferingUserResponse.
        :param email: The email of this OfferingUserResponse.
        :param evaluated_by: The evaluated_by of this OfferingUserResponse.
        :param evaluates: The evaluates of this OfferingUserResponse.
        :param first_name: The first_name of this OfferingUserResponse.
        :param id: The id of this OfferingUserResponse.
        :param is_facilitator: The is_facilitator of this OfferingUserResponse.
        :param is_marker: The is_marker of this OfferingUserResponse.
        :param is_readonly: The is_readonly of this OfferingUserResponse.
        :param last_name: The last_name of this OfferingUserResponse.
        :param marked_by: The marked_by of this OfferingUserResponse.
        :param marks: The marks of this OfferingUserResponse.
        :param person_id: The person_id of this OfferingUserResponse.
        :param profile: The profile of this OfferingUserResponse.
        """
        self.openapi_types = {
            'avatar_url': str,
            'email': str,
            'evaluated_by': List[str],
            'evaluates': List[str],
            'first_name': str,
            'id': str,
            'is_facilitator': bool,
            'is_marker': bool,
            'is_readonly': bool,
            'last_name': str,
            'marked_by': List[str],
            'marks': List[str],
            'person_id': str,
            'profile': UserProfile
        }

        self.attribute_map = {
            'avatar_url': 'avatarUrl',
            'email': 'email',
            'evaluated_by': 'evaluatedBy',
            'evaluates': 'evaluates',
            'first_name': 'firstName',
            'id': 'id',
            'is_facilitator': 'isFacilitator',
            'is_marker': 'isMarker',
            'is_readonly': 'isReadonly',
            'last_name': 'lastName',
            'marked_by': 'markedBy',
            'marks': 'marks',
            'person_id': 'personId',
            'profile': 'profile'
        }

        self._avatar_url = avatar_url
        self._email = email
        self._evaluated_by = evaluated_by
        self._evaluates = evaluates
        self._first_name = first_name
        self._id = id
        self._is_facilitator = is_facilitator
        self._is_marker = is_marker
        self._is_readonly = is_readonly
        self._last_name = last_name
        self._marked_by = marked_by
        self._marks = marks
        self._person_id = person_id
        self._profile = profile

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OfferingUserResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OfferingUserResponse of this OfferingUserResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar_url(self):
        """Gets the avatar_url of this OfferingUserResponse.


        :return: The avatar_url of this OfferingUserResponse.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this OfferingUserResponse.


        :param avatar_url: The avatar_url of this OfferingUserResponse.
        :type avatar_url: str
        """

        self._avatar_url = avatar_url

    @property
    def email(self):
        """Gets the email of this OfferingUserResponse.


        :return: The email of this OfferingUserResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this OfferingUserResponse.


        :param email: The email of this OfferingUserResponse.
        :type email: str
        """
        if email is not None and len(email) < 1:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")

        self._email = email

    @property
    def evaluated_by(self):
        """Gets the evaluated_by of this OfferingUserResponse.


        :return: The evaluated_by of this OfferingUserResponse.
        :rtype: List[str]
        """
        return self._evaluated_by

    @evaluated_by.setter
    def evaluated_by(self, evaluated_by):
        """Sets the evaluated_by of this OfferingUserResponse.


        :param evaluated_by: The evaluated_by of this OfferingUserResponse.
        :type evaluated_by: List[str]
        """

        self._evaluated_by = evaluated_by

    @property
    def evaluates(self):
        """Gets the evaluates of this OfferingUserResponse.


        :return: The evaluates of this OfferingUserResponse.
        :rtype: List[str]
        """
        return self._evaluates

    @evaluates.setter
    def evaluates(self, evaluates):
        """Sets the evaluates of this OfferingUserResponse.


        :param evaluates: The evaluates of this OfferingUserResponse.
        :type evaluates: List[str]
        """

        self._evaluates = evaluates

    @property
    def first_name(self):
        """Gets the first_name of this OfferingUserResponse.


        :return: The first_name of this OfferingUserResponse.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this OfferingUserResponse.


        :param first_name: The first_name of this OfferingUserResponse.
        :type first_name: str
        """
        if first_name is not None and len(first_name) < 1:
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `1`")

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this OfferingUserResponse.


        :return: The id of this OfferingUserResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OfferingUserResponse.


        :param id: The id of this OfferingUserResponse.
        :type id: str
        """

        self._id = id

    @property
    def is_facilitator(self):
        """Gets the is_facilitator of this OfferingUserResponse.


        :return: The is_facilitator of this OfferingUserResponse.
        :rtype: bool
        """
        return self._is_facilitator

    @is_facilitator.setter
    def is_facilitator(self, is_facilitator):
        """Sets the is_facilitator of this OfferingUserResponse.


        :param is_facilitator: The is_facilitator of this OfferingUserResponse.
        :type is_facilitator: bool
        """

        self._is_facilitator = is_facilitator

    @property
    def is_marker(self):
        """Gets the is_marker of this OfferingUserResponse.


        :return: The is_marker of this OfferingUserResponse.
        :rtype: bool
        """
        return self._is_marker

    @is_marker.setter
    def is_marker(self, is_marker):
        """Sets the is_marker of this OfferingUserResponse.


        :param is_marker: The is_marker of this OfferingUserResponse.
        :type is_marker: bool
        """

        self._is_marker = is_marker

    @property
    def is_readonly(self):
        """Gets the is_readonly of this OfferingUserResponse.


        :return: The is_readonly of this OfferingUserResponse.
        :rtype: bool
        """
        return self._is_readonly

    @is_readonly.setter
    def is_readonly(self, is_readonly):
        """Sets the is_readonly of this OfferingUserResponse.


        :param is_readonly: The is_readonly of this OfferingUserResponse.
        :type is_readonly: bool
        """

        self._is_readonly = is_readonly

    @property
    def last_name(self):
        """Gets the last_name of this OfferingUserResponse.


        :return: The last_name of this OfferingUserResponse.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this OfferingUserResponse.


        :param last_name: The last_name of this OfferingUserResponse.
        :type last_name: str
        """
        if last_name is not None and len(last_name) < 1:
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `1`")

        self._last_name = last_name

    @property
    def marked_by(self):
        """Gets the marked_by of this OfferingUserResponse.


        :return: The marked_by of this OfferingUserResponse.
        :rtype: List[str]
        """
        return self._marked_by

    @marked_by.setter
    def marked_by(self, marked_by):
        """Sets the marked_by of this OfferingUserResponse.


        :param marked_by: The marked_by of this OfferingUserResponse.
        :type marked_by: List[str]
        """

        self._marked_by = marked_by

    @property
    def marks(self):
        """Gets the marks of this OfferingUserResponse.


        :return: The marks of this OfferingUserResponse.
        :rtype: List[str]
        """
        return self._marks

    @marks.setter
    def marks(self, marks):
        """Sets the marks of this OfferingUserResponse.


        :param marks: The marks of this OfferingUserResponse.
        :type marks: List[str]
        """

        self._marks = marks

    @property
    def person_id(self):
        """Gets the person_id of this OfferingUserResponse.


        :return: The person_id of this OfferingUserResponse.
        :rtype: str
        """
        return self._person_id

    @person_id.setter
    def person_id(self, person_id):
        """Sets the person_id of this OfferingUserResponse.


        :param person_id: The person_id of this OfferingUserResponse.
        :type person_id: str
        """
        if person_id is not None and len(person_id) < 1:
            raise ValueError("Invalid value for `person_id`, length must be greater than or equal to `1`")

        self._person_id = person_id

    @property
    def profile(self):
        """Gets the profile of this OfferingUserResponse.


        :return: The profile of this OfferingUserResponse.
        :rtype: UserProfile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this OfferingUserResponse.


        :param profile: The profile of this OfferingUserResponse.
        :type profile: UserProfile
        """

        self._profile = profile
