# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BadgeExpiry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiration_date: datetime=None, expires: bool=None, expiry_type: str=None, timeframe_amount: float=None, timeframe_unit: str=None):
        """BadgeExpiry - a model defined in OpenAPI

        :param expiration_date: The expiration_date of this BadgeExpiry.
        :param expires: The expires of this BadgeExpiry.
        :param expiry_type: The expiry_type of this BadgeExpiry.
        :param timeframe_amount: The timeframe_amount of this BadgeExpiry.
        :param timeframe_unit: The timeframe_unit of this BadgeExpiry.
        """
        self.openapi_types = {
            'expiration_date': datetime,
            'expires': bool,
            'expiry_type': str,
            'timeframe_amount': float,
            'timeframe_unit': str
        }

        self.attribute_map = {
            'expiration_date': 'expirationDate',
            'expires': 'expires',
            'expiry_type': 'expiryType',
            'timeframe_amount': 'timeframeAmount',
            'timeframe_unit': 'timeframeUnit'
        }

        self._expiration_date = expiration_date
        self._expires = expires
        self._expiry_type = expiry_type
        self._timeframe_amount = timeframe_amount
        self._timeframe_unit = timeframe_unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BadgeExpiry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BadgeExpiry of this BadgeExpiry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiration_date(self):
        """Gets the expiration_date of this BadgeExpiry.


        :return: The expiration_date of this BadgeExpiry.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this BadgeExpiry.


        :param expiration_date: The expiration_date of this BadgeExpiry.
        :type expiration_date: datetime
        """

        self._expiration_date = expiration_date

    @property
    def expires(self):
        """Gets the expires of this BadgeExpiry.


        :return: The expires of this BadgeExpiry.
        :rtype: bool
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this BadgeExpiry.


        :param expires: The expires of this BadgeExpiry.
        :type expires: bool
        """

        self._expires = expires

    @property
    def expiry_type(self):
        """Gets the expiry_type of this BadgeExpiry.


        :return: The expiry_type of this BadgeExpiry.
        :rtype: str
        """
        return self._expiry_type

    @expiry_type.setter
    def expiry_type(self, expiry_type):
        """Sets the expiry_type of this BadgeExpiry.


        :param expiry_type: The expiry_type of this BadgeExpiry.
        :type expiry_type: str
        """
        allowed_values = ["date", "timeframe"]  # noqa: E501
        if expiry_type not in allowed_values:
            raise ValueError(
                "Invalid value for `expiry_type` ({0}), must be one of {1}"
                .format(expiry_type, allowed_values)
            )

        self._expiry_type = expiry_type

    @property
    def timeframe_amount(self):
        """Gets the timeframe_amount of this BadgeExpiry.


        :return: The timeframe_amount of this BadgeExpiry.
        :rtype: float
        """
        return self._timeframe_amount

    @timeframe_amount.setter
    def timeframe_amount(self, timeframe_amount):
        """Sets the timeframe_amount of this BadgeExpiry.


        :param timeframe_amount: The timeframe_amount of this BadgeExpiry.
        :type timeframe_amount: float
        """

        self._timeframe_amount = timeframe_amount

    @property
    def timeframe_unit(self):
        """Gets the timeframe_unit of this BadgeExpiry.


        :return: The timeframe_unit of this BadgeExpiry.
        :rtype: str
        """
        return self._timeframe_unit

    @timeframe_unit.setter
    def timeframe_unit(self, timeframe_unit):
        """Sets the timeframe_unit of this BadgeExpiry.


        :param timeframe_unit: The timeframe_unit of this BadgeExpiry.
        :type timeframe_unit: str
        """
        allowed_values = ["days", "months", "years"]  # noqa: E501
        if timeframe_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `timeframe_unit` ({0}), must be one of {1}"
                .format(timeframe_unit, allowed_values)
            )

        self._timeframe_unit = timeframe_unit
