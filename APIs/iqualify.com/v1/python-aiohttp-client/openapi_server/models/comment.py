# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.moderation import Moderation
from openapi_server import util


class Comment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, created_at: datetime=None, email: str=None, id: str=None, is_facilitator_post: bool=None, moderation: Moderation=None, parent_comment_id: str=None, post_id: str=None):
        """Comment - a model defined in OpenAPI

        :param content: The content of this Comment.
        :param created_at: The created_at of this Comment.
        :param email: The email of this Comment.
        :param id: The id of this Comment.
        :param is_facilitator_post: The is_facilitator_post of this Comment.
        :param moderation: The moderation of this Comment.
        :param parent_comment_id: The parent_comment_id of this Comment.
        :param post_id: The post_id of this Comment.
        """
        self.openapi_types = {
            'content': str,
            'created_at': datetime,
            'email': str,
            'id': str,
            'is_facilitator_post': bool,
            'moderation': Moderation,
            'parent_comment_id': str,
            'post_id': str
        }

        self.attribute_map = {
            'content': 'content',
            'created_at': 'createdAt',
            'email': 'email',
            'id': 'id',
            'is_facilitator_post': 'isFacilitatorPost',
            'moderation': 'moderation',
            'parent_comment_id': 'parentCommentId',
            'post_id': 'postId'
        }

        self._content = content
        self._created_at = created_at
        self._email = email
        self._id = id
        self._is_facilitator_post = is_facilitator_post
        self._moderation = moderation
        self._parent_comment_id = parent_comment_id
        self._post_id = post_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Comment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Comment of this Comment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this Comment.


        :return: The content of this Comment.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Comment.


        :param content: The content of this Comment.
        :type content: str
        """

        self._content = content

    @property
    def created_at(self):
        """Gets the created_at of this Comment.


        :return: The created_at of this Comment.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Comment.


        :param created_at: The created_at of this Comment.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def email(self):
        """Gets the email of this Comment.


        :return: The email of this Comment.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Comment.


        :param email: The email of this Comment.
        :type email: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this Comment.


        :return: The id of this Comment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Comment.


        :param id: The id of this Comment.
        :type id: str
        """

        self._id = id

    @property
    def is_facilitator_post(self):
        """Gets the is_facilitator_post of this Comment.


        :return: The is_facilitator_post of this Comment.
        :rtype: bool
        """
        return self._is_facilitator_post

    @is_facilitator_post.setter
    def is_facilitator_post(self, is_facilitator_post):
        """Sets the is_facilitator_post of this Comment.


        :param is_facilitator_post: The is_facilitator_post of this Comment.
        :type is_facilitator_post: bool
        """

        self._is_facilitator_post = is_facilitator_post

    @property
    def moderation(self):
        """Gets the moderation of this Comment.


        :return: The moderation of this Comment.
        :rtype: Moderation
        """
        return self._moderation

    @moderation.setter
    def moderation(self, moderation):
        """Sets the moderation of this Comment.


        :param moderation: The moderation of this Comment.
        :type moderation: Moderation
        """

        self._moderation = moderation

    @property
    def parent_comment_id(self):
        """Gets the parent_comment_id of this Comment.


        :return: The parent_comment_id of this Comment.
        :rtype: str
        """
        return self._parent_comment_id

    @parent_comment_id.setter
    def parent_comment_id(self, parent_comment_id):
        """Sets the parent_comment_id of this Comment.


        :param parent_comment_id: The parent_comment_id of this Comment.
        :type parent_comment_id: str
        """

        self._parent_comment_id = parent_comment_id

    @property
    def post_id(self):
        """Gets the post_id of this Comment.


        :return: The post_id of this Comment.
        :rtype: str
        """
        return self._post_id

    @post_id.setter
    def post_id(self, post_id):
        """Sets the post_id of this Comment.


        :param post_id: The post_id of this Comment.
        :type post_id: str
        """

        self._post_id = post_id
