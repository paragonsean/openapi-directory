openapi: 3.0.0
info:
  contact:
    x-twitter: hello_iqualify
  description: |+
    The iQualify API offers management responses for building
    learning experiences using your iQualify instance data.

    Once youâ€™ve registered with iQualify, you can request an API access token by
    navigating to the API access section of the "Account Settings" area.

    Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token)
    on our Knowledge base.

    All endpoints are only accessible via https and are located at
    api.iqualify.com. For instance: you can find your current offerings by
    accessing the following URL:

        https://api.iqualify.com/v1/offerings/current

  title: iQualify Management API
  version: v1
  x-apisguru-categories:
  - education
  x-logo:
    url: https://twitter.com/hello_iqualify/profile_image?size=original
  x-origin:
  - format: openapi
    url: https://api.iqualify.com/v1/management.json
    version: "3.0"
  x-providerName: iqualify.com
servers:
- url: https://api.iqualify.com/v1
security:
- Authorization: []
paths:
  /:
    get:
      description: Responds with all supported endpoints URLs for v2 version.
      operationId: root_get
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Supported endpoints
      summary: List supported endpoints URLs
      tags:
      - API info
      x-openapi-router-controller: openapi_server.controllers.api_info_controller
  /course-mappings:
    get:
      description: Returns all course mappings for course offerings.
      operationId: course_mappings_get
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: string
                title: course mappings
                type: object
          description: Course Mappings
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
      summary: Find course mappings
      tags:
      - Course mappings
      x-openapi-router-controller: openapi_server.controllers.course_mappings_controller
  /course-mappings/externalcourse/{externalCourseId}:
    get:
      description: Responds with course mapping details by externalCourseId.
      operationId: course_mappings_externalcourse_external_course_id_get
      parameters:
      - description: external course's id
        explode: false
        in: path
        name: externalCourseId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Course Mapping
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find course mappings by externalCourseId
      tags:
      - Course mappings
      x-openapi-router-controller: openapi_server.controllers.course_mappings_controller
  /course-mappings/{offeringId}:
    get:
      description: Responds with course mapping details by offeringId.
      operationId: course_mappings_offering_id_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Course Mapping
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find course mappings by offeringId
      tags:
      - Course mappings
      x-openapi-router-controller: openapi_server.controllers.course_mappings_controller
  /course-mappings/{offeringId}/{externalCourseId}:
    delete:
      description: Removes the course mapping between the offering and the externalCourseId.
      operationId: course_mappings_offering_id_external_course_id_delete
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: external course's id
        explode: false
        in: path
        name: externalCourseId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Course Mapping
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Remove course mapping
      tags:
      - Course mappings
      x-openapi-router-controller: openapi_server.controllers.course_mappings_controller
    put:
      description: Creates a mapping between the offering and the externalCourseId.
      operationId: course_mappings_offering_id_external_course_id_put
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: external course's id
        explode: false
        in: path
        name: externalCourseId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Course Mapping
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Add course mapping
      tags:
      - Course mappings
      x-openapi-router-controller: openapi_server.controllers.course_mappings_controller
  /courses:
    get:
      description: Responds with all courses (draft and published.)
      operationId: courses_get
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CourseResponse'
                title: Courses
                type: array
          description: All courses (draft and published) in the organisation.
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
      summary: Find courses
      tags:
      - Courses
      x-openapi-router-controller: openapi_server.controllers.courses_controller
  /courses/{contentId}:
    get:
      description: Responds with a course matching the contentId.
      operationId: courses_content_id_get
      parameters:
      - description: The content Id
        explode: false
        in: path
        name: contentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseMetaResponse'
          description: Course detail
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find course by contentId
      tags:
      - Courses
      x-openapi-router-controller: openapi_server.controllers.courses_controller
  /courses/{contentId}/activations:
    get:
      description: Responds with all activations for the contentId provided.
      operationId: courses_content_id_activations_get
      parameters:
      - description: The content Id
        explode: false
        in: path
        name: contentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivationResponse'
          description: Activation list.
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find activations for a contentId
      tags:
      - Courses
      x-openapi-router-controller: openapi_server.controllers.courses_controller
  /courses/{contentId}/metadata/category:
    put:
      description: Add or update course category in the metadata of a course.
      operationId: courses_content_id_metadata_category_put
      parameters:
      - description: The content Id
        explode: false
        in: path
        name: contentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_courses__contentId__metadata_category_put_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseMetaResponse'
          description: Course detail
        "400":
          content:
            application/json:
              examples:
                SchemaAdditionalPropertiesError:
                  $ref: '#/components/examples/SchemaAdditionalPropertiesError'
                SchemaRequiredError:
                  $ref: '#/components/examples/SchemaRequiredError'
                SchemaTypeError:
                  $ref: '#/components/examples/SchemaTypeError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Update course category
      tags:
      - Course metadata
      x-openapi-router-controller: openapi_server.controllers.course_metadata_controller
      x-codegen-request-body-name: body
  /courses/{contentId}/metadata/level:
    put:
      description: Add or update the course level in the metadata of a course.
      operationId: courses_content_id_metadata_level_put
      parameters:
      - description: The content Id
        explode: false
        in: path
        name: contentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_courses__contentId__metadata_level_put_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseMetaResponse'
          description: Course detail
        "400":
          content:
            application/json:
              examples:
                SchemaAdditionalPropertiesError:
                  $ref: '#/components/examples/SchemaAdditionalPropertiesError'
                SchemaRequiredError:
                  $ref: '#/components/examples/SchemaRequiredError'
                SchemaTypeError:
                  $ref: '#/components/examples/SchemaTypeError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Update course level
      tags:
      - Course metadata
      x-openapi-router-controller: openapi_server.controllers.course_metadata_controller
      x-codegen-request-body-name: body
  /courses/{contentId}/metadata/tags:
    put:
      description: Add or update course tags in the metadata of a course.
      operationId: courses_content_id_metadata_tags_put
      parameters:
      - description: The content Id
        explode: false
        in: path
        name: contentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_courses__contentId__metadata_tags_put_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseMetaResponse'
          description: Course detail
        "400":
          content:
            application/json:
              examples:
                SchemaAdditionalPropertiesError:
                  $ref: '#/components/examples/SchemaAdditionalPropertiesError'
                SchemaRequiredError:
                  $ref: '#/components/examples/SchemaRequiredError'
                SchemaTypeError:
                  $ref: '#/components/examples/SchemaTypeError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Update course tags
      tags:
      - Course metadata
      x-openapi-router-controller: openapi_server.controllers.course_metadata_controller
      x-codegen-request-body-name: body
  /courses/{contentId}/metadata/topic:
    put:
      description: Add or update the course topic in the metadata of a course.
      operationId: courses_content_id_metadata_topic_put
      parameters:
      - description: The content Id
        explode: false
        in: path
        name: contentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_courses__contentId__metadata_topic_put_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseMetaResponse'
          description: Course detail
        "400":
          content:
            application/json:
              examples:
                SchemaAdditionalPropertiesError:
                  $ref: '#/components/examples/SchemaAdditionalPropertiesError'
                SchemaRequiredError:
                  $ref: '#/components/examples/SchemaRequiredError'
                SchemaTypeError:
                  $ref: '#/components/examples/SchemaTypeError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Update course topic
      tags:
      - Course metadata
      x-openapi-router-controller: openapi_server.controllers.course_metadata_controller
      x-codegen-request-body-name: body
  /courses/{contentId}/permissions:
    get:
      description: Responds with users who have access to a specific course by contentId.
      operationId: courses_content_id_permissions_get
      parameters:
      - description: The content Id
        explode: false
        in: path
        name: contentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermission'
          description: List of users who have access to the content ID provided.
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find users who have access to the contentId provided
      tags:
      - Courses
      x-openapi-router-controller: openapi_server.controllers.courses_controller
  /courses/{rootContentId}/permissions/{userEmail}:
    post:
      description: Provide a user with access to a specific course by rootContentId.
      operationId: courses_root_content_id_permissions_user_email_post
      parameters:
      - description: The content Id
        explode: false
        in: path
        name: rootContentId
        required: true
        schema:
          type: string
        style: simple
      - description: The user email
        explode: false
        in: path
        name: userEmail
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/permission_to_be_granted_to_the_user_'
        required: true
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_courses__rootContentId__permissions__userEmail__post_201_response'
          description: user successfully added to the course with the specified permission.
        "400":
          content:
            application/json:
              examples:
                MultipleObjectsError:
                  $ref: '#/components/examples/MultipleObjectsError'
                ObjectIsNotError:
                  $ref: '#/components/examples/ObjectIsNotError'
                SchemaRequiredError:
                  $ref: '#/components/examples/SchemaRequiredError'
                SchemaTypeError:
                  $ref: '#/components/examples/SchemaTypeError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Update course access
      tags:
      - Courses
      x-openapi-router-controller: openapi_server.controllers.courses_controller
      x-codegen-request-body-name: body
  /offerings:
    get:
      description: Responds with all offerings for your organisation.
      operationId: offerings_get
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OfferingMetadataResponse'
                title: Offerings
                type: array
          description: "all offerings (current, past and future ones)"
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
      summary: "Find current, past and future offerings"
      tags:
      - Offerings
      x-openapi-router-controller: openapi_server.controllers.offerings_controller
    post:
      description: Creates a new offering.
      operationId: offerings_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OfferingRequired'
        required: true
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferingMetadataResponse'
          description: offering created
        "400":
          content:
            application/json:
              examples:
                IncompatibleParametersError:
                  $ref: '#/components/examples/IncompatibleParametersError'
                InvalidContentError:
                  $ref: '#/components/examples/InvalidContentError'
                MissingInfoError:
                  $ref: '#/components/examples/MissingInfoError'
                OfferingIncompatibleDatesError:
                  $ref: '#/components/examples/OfferingIncompatibleDatesError'
                SchemaFormatError:
                  $ref: '#/components/examples/SchemaFormatError'
                SchemaRequiredError:
                  $ref: '#/components/examples/SchemaRequiredError'
                SchemaTypeError:
                  $ref: '#/components/examples/SchemaTypeError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Create offering
      tags:
      - Offerings
      x-openapi-router-controller: openapi_server.controllers.offerings_controller
      x-codegen-request-body-name: body
  /offerings/current:
    get:
      description: Responds with active offerings for your organisation.
      operationId: offerings_current_get
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OfferingMetadataResponse'
                title: Offerings
                type: array
          description: current offerings
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
      summary: Find active offerings
      tags:
      - Offerings
      x-openapi-router-controller: openapi_server.controllers.offerings_controller
  /offerings/future:
    get:
      description: Responds with scheduled offerings for your organisation. Scheduled
        offerings have a start date after today's date (inclusive).
      operationId: offerings_future_get
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OfferingMetadataResponse'
                title: Offerings
                type: array
          description: future offerings
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
      summary: Find scheduled offerings
      tags:
      - Offerings
      x-openapi-router-controller: openapi_server.controllers.offerings_controller
  /offerings/info/{textPattern}:
    get:
      description: Find offerings where info field matches the specified text pattern.
      operationId: offerings_info_text_pattern_get
      parameters:
      - description: Text pattern to search for (minimum of 3 characters length).
        explode: false
        in: path
        name: textPattern
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PortfolioActivations'
                title: Offerings
                type: array
          description: Offerings
        "400":
          content:
            application/json:
              examples:
                TextPatternError:
                  $ref: '#/components/examples/TextPatternError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find offerings where info field matches the specified textPattern
      tags:
      - Offerings
      x-openapi-router-controller: openapi_server.controllers.offerings_controller
  /offerings/past:
    get:
      description: Responds with past offerings for your organisation.
      operationId: offerings_past_get
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OfferingMetadataResponse'
                title: Offerings
                type: array
          description: past offerings
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
      summary: Find past offerings
      tags:
      - Offerings
      x-openapi-router-controller: openapi_server.controllers.offerings_controller
  /offerings/summary:
    get:
      description: Responds with a summary of all offerings for your organisation.
      operationId: offerings_summary_get
      parameters:
      - description: Returns only the first n results.
        explode: true
        in: query
        name: $top
        required: false
        schema:
          default: "50"
          type: string
        style: form
      - description: Sorts the results.
        explode: true
        in: query
        name: $orderby
        required: false
        schema:
          type: string
        style: form
      - allowReserved: true
        description: "Filters the results, based on a Boolean condition."
        explode: true
        in: query
        name: $filter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PortfolioActivations'
                title: Offerings
                type: array
          description: all offerings.
        "400":
          content:
            application/json:
              examples:
                ApiValidationError:
                  $ref: '#/components/examples/ApiValidationError'
                SchemaQueryError:
                  $ref: '#/components/examples/SchemaQueryError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
      summary: Offerings summary
      tags:
      - Offerings
      x-openapi-router-controller: openapi_server.controllers.offerings_controller
  /offerings/{offeringId}:
    get:
      description: Responds with an offering matching the offeringId.
      operationId: offerings_offering_id_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferingMetadataResponse'
          description: offering
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find offering by ID
      tags:
      - Offerings
      x-openapi-router-controller: openapi_server.controllers.offerings_controller
    patch:
      description: Updates the offering.
      operationId: offerings_offering_id_patch
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Offering'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferingMetadataResponse'
          description: offering updated
        "400":
          content:
            application/json:
              examples:
                IncompatibleParametersError:
                  $ref: '#/components/examples/IncompatibleParametersError'
                MissingInfoError:
                  $ref: '#/components/examples/MissingInfoError'
                ObjectExistsError:
                  $ref: '#/components/examples/ObjectExistsError'
                OfferingIncompatibleDatesError:
                  $ref: '#/components/examples/OfferingIncompatibleDatesError'
                SchemaFormatError:
                  $ref: '#/components/examples/SchemaFormatError'
                SchemaTypeError:
                  $ref: '#/components/examples/SchemaTypeError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Update offering
      tags:
      - Offerings
      x-openapi-router-controller: openapi_server.controllers.offerings_controller
      x-codegen-request-body-name: body
  /offerings/{offeringId}/activities/openresponse:
    get:
      description: Responds with the activities in a specific offering.
      operationId: offerings_offering_id_activities_openresponse_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OfferingActivitiesResponse'
                title: Activities
                type: array
          description: offering's learners
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find offering's activities
      tags:
      - Assessment management
      x-openapi-router-controller: openapi_server.controllers.assessment_management_controller
  /offerings/{offeringId}/analytics/activities/responses:
    get:
      description: Responds with all learner activity attempts for open response activities
        in an offering matching the offeringId.
      operationId: offerings_offering_id_analytics_activities_responses_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ActivityAttemptOpenResponse'
                title: OfferingActivityAttemptOpenResponses
                type: array
          description: Offering activity attempt open responses
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find open response activity attempts
      tags:
      - Assessment data
      x-openapi-router-controller: openapi_server.controllers.assessment_data_controller
  /offerings/{offeringId}/analytics/channels/{channelId}/comments:
    get:
      description: "Responds with a list of comments made in any posts in a specified\
        \ channel, within an offering."
      operationId: offerings_offering_id_analytics_channels_channel_id_comments_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: channel's id
        explode: false
        in: path
        name: channelId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Comment'
                title: Comments
                type: array
          description: Successful response
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find comments
      tags:
      - Channels
      x-openapi-router-controller: openapi_server.controllers.channels_controller
  /offerings/{offeringId}/analytics/channels/{channelId}/posts:
    get:
      description: "Responds with a list of posts made in a specified channel, within\
        \ an offering."
      operationId: offerings_offering_id_analytics_channels_channel_id_posts_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: channel's id
        explode: false
        in: path
        name: channelId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/httpPost'
                title: Posts
                type: array
          description: Successful response
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find posts
      tags:
      - Channels
      x-openapi-router-controller: openapi_server.controllers.channels_controller
  /offerings/{offeringId}/analytics/channels/{channelId}/replies:
    get:
      description: "Responds with a list of replies to comments in any posts in a\
        \ specified channel, within an offering."
      operationId: offerings_offering_id_analytics_channels_channel_id_replies_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: channel's id
        explode: false
        in: path
        name: channelId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Comment'
                title: Comments
                type: array
          description: Successful response
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find replies
      tags:
      - Channels
      x-openapi-router-controller: openapi_server.controllers.channels_controller
  /offerings/{offeringId}/analytics/learners-progress:
    get:
      description: Responds with all learner progress in the offering.
      operationId: offerings_offering_id_analytics_learners_progress_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LearnerProgressResponse'
                title: LearnersProgress
                type: array
          description: Learners progress
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find learner progress in a specified offering
      tags:
      - Learner activity
      x-openapi-router-controller: openapi_server.controllers.learner_activity_controller
  /offerings/{offeringId}/analytics/marks/assignments:
    get:
      description: Responds with all learner assessment marks in an offering matching
        the offeringId.
      operationId: offerings_offering_id_analytics_marks_assignments_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AssignmentMarkResponse'
                title: AssignmentsMarks
                type: array
          description: Assignments marks
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find assessment marks
      tags:
      - Assessment data
      x-openapi-router-controller: openapi_server.controllers.assessment_data_controller
  /offerings/{offeringId}/analytics/marks/quizzes:
    get:
      description: Responds with all learner quiz marks in an offering matching the
        offeringId.
      operationId: offerings_offering_id_analytics_marks_quizzes_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/QuizMarkResponse'
                title: QuizzesMarks
                type: array
          description: Quizzes marks
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find quiz marks
      tags:
      - Assessment data
      x-openapi-router-controller: openapi_server.controllers.assessment_data_controller
  /offerings/{offeringId}/analytics/pulses:
    get:
      description: Responds with the IDs of all pulses that learners have responded
        to in a specified offering.
      operationId: offerings_offering_id_analytics_pulses_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Pulses' ids
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find all pulse IDs in the specified offering
      tags:
      - Pulses
      x-openapi-router-controller: openapi_server.controllers.pulses_controller
  /offerings/{offeringId}/analytics/pulses/responses:
    get:
      description: Responds with pulse's responses in an offering matching the offeringId.
      operationId: offerings_offering_id_analytics_pulses_responses_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: Filter pulse responses by type.
        explode: true
        in: query
        name: pulseType
        required: false
        schema:
          enum:
          - submit_text
          - MCQ
          - spatial_triangular
          - spatial_planar
          - spatial_linear
          type: string
        style: form
      - allowReserved: true
        description: "Filter pulse responses by responseTime. Lower then (`lt`), lower\
          \ then or equal (`lte`), greater then (`gt`) and greater then or equal (`gte`)\
          \ operators are available. Example of filtering by time range __gte__2017-03-14T07:30:00Z__"
        explode: true
        in: query
        name: responseTime
        required: false
        schema:
          $ref: '#/components/schemas/_offerings__offeringId__analytics_pulses_responses_get_responseTime_parameter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PulseResponse'
                title: Pulses
                type: array
          description: All pulses' responses
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find pulses by offeringId
      tags:
      - Pulses
      x-openapi-router-controller: openapi_server.controllers.pulses_controller
  /offerings/{offeringId}/analytics/pulses/{pulseId}/responses:
    get:
      description: "Responds with pulse's responses, matching the pulseId, in an offering\
        \ matching the offeringId."
      operationId: offerings_offering_id_analytics_pulses_pulse_id_responses_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: pulse's base id
        explode: false
        in: path
        name: pulseId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PulseResponse'
                title: Pulses
                type: array
          description: Pulse data matching pulseId
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find pulses by offeringId and pulseId
      tags:
      - Pulses
      x-openapi-router-controller: openapi_server.controllers.pulses_controller
  /offerings/{offeringId}/analytics/social-notes:
    get:
      description: Responds with all shared social notes in a specified offering.
      operationId: offerings_offering_id_analytics_social_notes_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SocialNotesResponse'
                title: OfferingSocialNotes
                type: array
          description: Offering social notes
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find shared social notes in an offering
      tags:
      - Learner activity
      x-openapi-router-controller: openapi_server.controllers.learner_activity_controller
  /offerings/{offeringId}/analytics/submissions/assignments:
    get:
      description: "Responds with all learner assessment submissions and marks, if\
        \ any, in an offering matching the offeringId."
      operationId: offerings_offering_id_analytics_submissions_assignments_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AssignmentMarkResponse'
                title: AssignmentsSubmissions
                type: array
          description: Assignments submissions
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: "Find submissions to assessments, including marks if any"
      tags:
      - Assessment data
      x-openapi-router-controller: openapi_server.controllers.assessment_data_controller
  /offerings/{offeringId}/analytics/submissions/open-response/{assessmentId}:
    get:
      description: "Responds with all learner assessment submissions and marks, if\
        \ any, in a specified open response assessment."
      operationId: offerings_offering_id_analytics_submissions_open_response_assessment_id_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: assessment's id
        explode: false
        in: path
        name: assessmentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SubmissionMarkResponse'
                title: SubmissionMarkResponse
                type: array
          description: Responds with assignment submissions for the specified assignment.
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: "Find submissions to a specified open response assessment, including\
        \ marks if any"
      tags:
      - Assessment data
      x-openapi-router-controller: openapi_server.controllers.assessment_data_controller
  /offerings/{offeringId}/analytics/submissions/{userEmail}/assignments/{assessmentId}:
    get:
      description: Responds with the learner's assessment submission and any marks
        for the submission.
      operationId: offerings_offering_id_analytics_submissions_user_email_assignments_assessment_id_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: user's email
        explode: false
        in: path
        name: userEmail
        required: true
        schema:
          format: email
          type: string
        style: simple
      - description: assessment's id
        explode: false
        in: path
        name: assessmentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SubmissionMarkResponse'
                title: SubmissionMarkResponse
                type: array
          description: Responds with the learner's assessment submission and any marks
            for the submission.
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: "Find a learner's submission to a specified assessment, including marks\
        \ if any"
      tags:
      - Assessment data
      x-openapi-router-controller: openapi_server.controllers.assessment_data_controller
  /offerings/{offeringId}/analytics/unit-reactions:
    get:
      description: Responds with user reactions to units in a specified offering.
      operationId: offerings_offering_id_analytics_unit_reactions_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UnitReactionsAnalyticsResponse'
                title: UnitReactiosAnalytics
                type: array
          description: Unit Reactions
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find unit reactions
      tags:
      - Learner activity
      x-openapi-router-controller: openapi_server.controllers.learner_activity_controller
  /offerings/{offeringId}/assessments:
    get:
      description: Responds with all assessments in an offering matching the offeringId.
      operationId: offerings_offering_id_assessments_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AssessmentResponse'
                title: Assessments
                type: array
          description: offering's assessments
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find offering's assessments
      tags:
      - Assessment management
      x-openapi-router-controller: openapi_server.controllers.assessment_management_controller
  /offerings/{offeringId}/assessments/{assessmentId}:
    patch:
      description: Updates the assessment details for a specified assessment in an
        offering.
      operationId: offerings_offering_id_assessments_assessment_id_patch
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: assessment's id
        explode: false
        in: path
        name: assessmentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assessment'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssessmentResponse'
          description: assessment successfully updated
        "400":
          content:
            application/json:
              examples:
                SchemaFormatError:
                  $ref: '#/components/examples/SchemaFormatError'
                SchemaMinLengthError:
                  $ref: '#/components/examples/SchemaMinLengthError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Update assessment details
      tags:
      - Assessment management
      x-openapi-router-controller: openapi_server.controllers.assessment_management_controller
      x-codegen-request-body-name: body
  /offerings/{offeringId}/assessments/{assessmentId}/documents: {}
  /offerings/{offeringId}/assessments/{assessmentId}/documents/{documentId}:
    delete:
      description: Removes the assessment document file for a specified assessment
        in an offering.
      operationId: offerings_offering_id_assessments_assessment_id_documents_document_id_delete
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: assessment's id
        explode: false
        in: path
        name: assessmentId
        required: true
        schema:
          type: string
        style: simple
      - description: documents's id
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: assessment document successfully removed
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Remove assessment document
      tags:
      - Assessment management
      x-openapi-router-controller: openapi_server.controllers.assessment_management_controller
  /offerings/{offeringId}/assessments/{assessmentId}/{userEmail}:
    patch:
      description: Updates the due dates for a learner's quiz attempt specified by
        the assessmentId.
      operationId: offerings_offering_id_assessments_assessment_id_user_email_patch
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: assessment's id
        explode: false
        in: path
        name: assessmentId
        required: true
        schema:
          type: string
        style: simple
      - description: user's email
        explode: false
        in: path
        name: userEmail
        required: true
        schema:
          format: email
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_offerings__offeringId__assessments__assessmentId___userEmail__patch_request'
        required: true
        x-body-name: body
      responses:
        "204":
          description: Successfully updated assessment due date.
        "400":
          content:
            application/json:
              examples:
                InvalidParameterError:
                  $ref: '#/components/examples/InvalidParameterError'
                ObjectInvalidPropertyError:
                  $ref: '#/components/examples/ObjectInvalidPropertyError'
                SchemaFormatError:
                  $ref: '#/components/examples/SchemaFormatError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Update the due dates for a learner's quiz attempt
      tags:
      - Assessment management
      x-openapi-router-controller: openapi_server.controllers.assessment_management_controller
      x-codegen-request-body-name: body
  /offerings/{offeringId}/badges:
    get:
      description: Responds with the badge for an offering matching the offeringId.
      operationId: offerings_offering_id_badges_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Badge'
          description: badges
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find offering badges
      tags:
      - Badges
      x-openapi-router-controller: openapi_server.controllers.badges_controller
  /offerings/{offeringId}/channels:
    get:
      description: Responds with a list of channels in an offering.
      operationId: offerings_offering_id_channels_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ChannelResponse'
                title: List of channels in a offering
                type: array
          description: Succesful response
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find channels
      tags:
      - Channels
      x-openapi-router-controller: openapi_server.controllers.channels_controller
    post:
      description: Adds new channel to the specified offering.
      operationId: offerings_offering_id_channels_post
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelRequired'
        required: true
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelResponse'
          description: channel successfully added
        "400":
          content:
            application/json:
              examples:
                SchemaMinLengthError:
                  $ref: '#/components/examples/SchemaMinLengthError'
                SchemaRequiredError:
                  $ref: '#/components/examples/SchemaRequiredError'
                SchemaTypeError:
                  $ref: '#/components/examples/SchemaTypeError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Add channel
      tags:
      - Channels
      x-openapi-router-controller: openapi_server.controllers.channels_controller
      x-codegen-request-body-name: body
  /offerings/{offeringId}/channels/{channelId}:
    patch:
      description: Updates a channel in an offering.
      operationId: offerings_offering_id_channels_channel_id_patch
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: channel's id
        explode: false
        in: path
        name: channelId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelResponse'
          description: channel successfully updated
        "400":
          content:
            application/json:
              examples:
                SchemaMinLengthError:
                  $ref: '#/components/examples/SchemaMinLengthError'
                SchemaRequiredError:
                  $ref: '#/components/examples/SchemaRequiredError'
                SchemaTypeError:
                  $ref: '#/components/examples/SchemaTypeError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Update channel
      tags:
      - Channels
      x-openapi-router-controller: openapi_server.controllers.channels_controller
      x-codegen-request-body-name: body
  /offerings/{offeringId}/channels/{channelId}/learners:
    delete:
      description: Removes a learner from the specified group channel.
      operationId: offerings_offering_id_channels_channel_id_learners_delete
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: channel's id
        explode: false
        in: path
        name: channelId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_offerings__offeringId__channels__channelId__learners_post_request'
        required: true
        x-body-name: body
      responses:
        "204":
          description: Learner successfully removed from the channel.
        "400":
          content:
            application/json:
              examples:
                InvalidGroupChannelError:
                  $ref: '#/components/examples/InvalidGroupChannelError'
                UserNotInOfferingError:
                  $ref: '#/components/examples/UserNotInOfferingError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Remove learners from a group channel
      tags:
      - Channels
      x-openapi-router-controller: openapi_server.controllers.channels_controller
      x-codegen-request-body-name: body
    get:
      description: Finds all learners in a specified group channel.
      operationId: offerings_offering_id_channels_channel_id_learners_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: channel's id
        explode: false
        in: path
        name: channelId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelResponse'
          description: channel data
        "400":
          content:
            application/json:
              examples:
                InvalidGroupChannelError:
                  $ref: '#/components/examples/InvalidGroupChannelError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find learners in a group channel
      tags:
      - Channels
      x-openapi-router-controller: openapi_server.controllers.channels_controller
    post:
      description: Adds a learner to a specified group channel.
      operationId: offerings_offering_id_channels_channel_id_learners_post
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: channel's id
        explode: false
        in: path
        name: channelId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_offerings__offeringId__channels__channelId__learners_post_request'
        required: true
        x-body-name: body
      responses:
        "204":
          description: Learner successfully added to the channel.
        "400":
          content:
            application/json:
              examples:
                InvalidGroupChannelError:
                  $ref: '#/components/examples/InvalidGroupChannelError'
                ObjectExistsError:
                  $ref: '#/components/examples/ObjectExistsError'
                SchemaMinLengthError:
                  $ref: '#/components/examples/SchemaMinLengthError'
                SchemaRequiredError:
                  $ref: '#/components/examples/SchemaRequiredError'
                SchemaTypeError:
                  $ref: '#/components/examples/SchemaTypeError'
                UserNotInOfferingError:
                  $ref: '#/components/examples/UserNotInOfferingError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Add learners to a group channel
      tags:
      - Channels
      x-openapi-router-controller: openapi_server.controllers.channels_controller
      x-codegen-request-body-name: body
  /offerings/{offeringId}/cover-image: {}
  /offerings/{offeringId}/groups:
    get:
      description: Responds with a list of assessment groups in an offering.
      operationId: offerings_offering_id_groups_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AssessmentGroupResponse'
                title: List of assessment groups in an offering
                type: array
          description: Succesful response
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find assessment groups
      tags:
      - Assessment groups
      x-openapi-router-controller: openapi_server.controllers.assessment_groups_controller
    post:
      description: Creates a new assessment group in an offering.
      operationId: offerings_offering_id_groups_post
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssessmentGroupRequired'
        required: true
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssessmentGroupResponse'
          description: assessment group successfully added
        "400":
          content:
            application/json:
              examples:
                SchemaMinLengthError:
                  $ref: '#/components/examples/SchemaMinLengthError'
                SchemaRequiredError:
                  $ref: '#/components/examples/SchemaRequiredError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Add an assessment group
      tags:
      - Assessment groups
      x-openapi-router-controller: openapi_server.controllers.assessment_groups_controller
      x-codegen-request-body-name: body
  /offerings/{offeringId}/groups/{groupId}/learners:
    get:
      description: Responds with a list of learners in a specified assessment group.
      operationId: offerings_offering_id_groups_group_id_learners_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: Assessment group id
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          pattern: "^[0-9a-fA-F]{24}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserResponse'
                title: List of learners
                type: array
          description: Succesful response
        "400":
          content:
            application/json:
              examples:
                SchemaMinLengthError:
                  $ref: '#/components/examples/SchemaMinLengthError'
                SchemaRequiredError:
                  $ref: '#/components/examples/SchemaRequiredError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find learners in an assessment group
      tags:
      - Assessment groups
      x-openapi-router-controller: openapi_server.controllers.assessment_groups_controller
    post:
      description: Adds a learner into the specified assessment group.
      operationId: offerings_offering_id_groups_group_id_learners_post
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: Assessment group id
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          pattern: "^[0-9a-fA-F]{24}$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_offerings__offeringId__groups__groupId__learners_post_request'
        required: true
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: Succesful response
        "400":
          content:
            application/json:
              examples:
                ApiValidationError:
                  $ref: '#/components/examples/ApiValidationError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Add a learner to an assessment group
      tags:
      - Assessment groups
      x-openapi-router-controller: openapi_server.controllers.assessment_groups_controller
      x-codegen-request-body-name: body
  /offerings/{offeringId}/groups/{groupId}/learners/{userEmail}:
    delete:
      description: Removes a learner from the specified assessment group.
      operationId: offerings_offering_id_groups_group_id_learners_user_email_delete
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: Assessment group id
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          pattern: "^[0-9a-fA-F]{24}$"
          type: string
        style: simple
      - description: user's email
        explode: false
        in: path
        name: userEmail
        required: true
        schema:
          format: email
          type: string
        style: simple
      responses:
        "204":
          description: user successfully removed from the assessment group
        "400":
          content:
            application/json:
              examples:
                ApiValidationError:
                  $ref: '#/components/examples/ApiValidationError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Remove a learner from an assessment group
      tags:
      - Assessment groups
      x-openapi-router-controller: openapi_server.controllers.assessment_groups_controller
  /offerings/{offeringId}/learners/pending-submission:
    get:
      description: "Responds with learners who have one or more assessments due x\
        \ days before the due date, with each assessment that is due, where x = the\
        \ number of days specified in the request. The default is 3 days."
      operationId: offerings_offering_id_learners_pending_submission_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: days to assessment due date. Default is 3 days
        explode: true
        in: query
        name: days
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AssessmentPendingSubmission'
                title: Assessments
                type: array
          description: offering's learners
        "400":
          content:
            application/json:
              examples:
                SchemaTypeError:
                  $ref: '#/components/examples/SchemaTypeError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find learners with assessments pending x days before due date within
        the specified offeringId
      tags:
      - Assessment management
      x-openapi-router-controller: openapi_server.controllers.assessment_management_controller
  /offerings/{offeringId}/metadata/category:
    put:
      description: Updates the offering category metadata.
      operationId: offerings_offering_id_metadata_category_put
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_courses__contentId__metadata_category_put_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferingMetadataResponse'
          description: offering updated
        "400":
          content:
            application/json:
              examples:
                SchemaTypeError:
                  $ref: '#/components/examples/SchemaTypeError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Update offering category metadata
      tags:
      - Offering metadata
      x-openapi-router-controller: openapi_server.controllers.offering_metadata_controller
      x-codegen-request-body-name: body
  /offerings/{offeringId}/metadata/level:
    put:
      description: Updates the offering level metadata.
      operationId: offerings_offering_id_metadata_level_put
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_courses__contentId__metadata_level_put_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferingMetadataResponse'
          description: offering updated
        "400":
          content:
            application/json:
              examples:
                SchemaTypeError:
                  $ref: '#/components/examples/SchemaTypeError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Update offering level metadata
      tags:
      - Offering metadata
      x-openapi-router-controller: openapi_server.controllers.offering_metadata_controller
      x-codegen-request-body-name: body
  /offerings/{offeringId}/metadata/tags:
    put:
      description: Updates the offering tags metadata.
      operationId: offerings_offering_id_metadata_tags_put
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_courses__contentId__metadata_tags_put_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferingMetadataResponse'
          description: offering updated
        "400":
          content:
            application/json:
              examples:
                SchemaTypeError:
                  $ref: '#/components/examples/SchemaTypeError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Update offering tags metadata
      tags:
      - Offering metadata
      x-openapi-router-controller: openapi_server.controllers.offering_metadata_controller
      x-codegen-request-body-name: body
  /offerings/{offeringId}/metadata/topic:
    put:
      description: Updates the offering topic metadata.
      operationId: offerings_offering_id_metadata_topic_put
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_courses__contentId__metadata_topic_put_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferingMetadataResponse'
          description: offering updated
        "400":
          content:
            application/json:
              examples:
                SchemaTypeError:
                  $ref: '#/components/examples/SchemaTypeError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Update offering topic metadata
      tags:
      - Offering metadata
      x-openapi-router-controller: openapi_server.controllers.offering_metadata_controller
      x-codegen-request-body-name: body
  /offerings/{offeringId}/study-plan: {}
  /offerings/{offeringId}/users:
    get:
      description: "Responds with a list of users in the offering (facilitators, learners\
        \ and markers.)."
      operationId: offerings_offering_id_users_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: "If true, facilitators are included in the results."
        explode: true
        in: query
        name: facilitators
        required: false
        schema:
          default: "true"
          enum:
          - "true"
          - "false"
          type: string
        style: form
      - description: "If true, learners are included in the results."
        explode: true
        in: query
        name: learners
        required: false
        schema:
          default: "true"
          enum:
          - "true"
          - "false"
          type: string
        style: form
      - description: "If true, markers are included in the results."
        explode: true
        in: query
        name: markers
        required: false
        schema:
          default: "true"
          enum:
          - "true"
          - "false"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OfferingUserResponse'
                title: offering's users
                type: array
          description: offering's users
        "400":
          content:
            application/json:
              examples:
                SchemaAllowedValuesError:
                  $ref: '#/components/examples/SchemaAllowedValuesError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find offering's users
      tags:
      - Offering learners
      x-openapi-router-controller: openapi_server.controllers.offering_learners_controller
    post:
      description: Adds one or more users to the offering.
      operationId: offerings_offering_id_users_post
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/OfferingUser'
              title: users to be added to the offering.
              type: array
        required: true
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OfferingUserAddResponse'
                type: array
          description: user successfully added to the offering
        "207":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/_offerings__offeringId__users_post_207_response_inner'
                type: array
          description: Partially successful response
        "400":
          content:
            application/json:
              examples:
                ApiValidationError:
                  $ref: '#/components/examples/ApiValidationError'
                ObjectExistsError:
                  $ref: '#/components/examples/ObjectExistsError'
                SchemaEmailError:
                  $ref: '#/components/examples/SchemaEmailError'
                SchemaRequiredError:
                  $ref: '#/components/examples/SchemaRequiredError'
                SchemaTypeError:
                  $ref: '#/components/examples/SchemaTypeError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Adds user to the offering
      tags:
      - Offering learners
      x-openapi-router-controller: openapi_server.controllers.offering_learners_controller
      x-codegen-request-body-name: body
  /offerings/{offeringId}/users/{markerEmail}/marks:
    delete:
      description: Removes an array of learners from coach's marking list.
      operationId: offerings_offering_id_users_marker_email_marks_delete
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: marker's email
        explode: false
        in: path
        name: markerEmail
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: array of learners e-mails
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OfferingUser'
                title: learners marked by the marker
                type: array
          description: learners marked by the marker
        "400":
          content:
            application/json:
              examples:
                ObjectIsNotError:
                  $ref: '#/components/examples/ObjectIsNotError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Remove learners from coach's marking list
      tags:
      - Offering learners
      x-openapi-router-controller: openapi_server.controllers.offering_learners_controller
      x-codegen-request-body-name: body
    get:
      description: Responds with all learners marked by the specified coach.
      operationId: offerings_offering_id_users_marker_email_marks_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: marker's email
        explode: false
        in: path
        name: markerEmail
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OfferingUser'
                title: learners marked by the marker
                type: array
          description: learners marked by the marker
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find Learners marked by a coach
      tags:
      - Offering learners
      x-openapi-router-controller: openapi_server.controllers.offering_learners_controller
    post:
      description: Adds an array of learners to be marked by the specified coach.
      operationId: offerings_offering_id_users_marker_email_marks_post
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: marker's email
        explode: false
        in: path
        name: markerEmail
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: array of learners e-mails
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OfferingUser'
                title: learners marked by the marker
                type: array
          description: learners marked by the marker
        "400":
          content:
            application/json:
              examples:
                ObjectIsNotError:
                  $ref: '#/components/examples/ObjectIsNotError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Add learners to be marked by a coach
      tags:
      - Offering learners
      x-openapi-router-controller: openapi_server.controllers.offering_learners_controller
      x-codegen-request-body-name: body
  /offerings/{offeringId}/users/{userEmail}:
    delete:
      description: Removes a user from the offering.
      operationId: offerings_offering_id_users_user_email_delete
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: user's email
        explode: false
        in: path
        name: userEmail
        required: true
        schema:
          format: email
          type: string
        style: simple
      responses:
        "204":
          description: user successfully removed from the offering
        "400":
          content:
            application/json:
              examples:
                ApiValidationError:
                  $ref: '#/components/examples/ApiValidationError'
                SchemaEmailError:
                  $ref: '#/components/examples/SchemaEmailError'
                SchemaTypeError:
                  $ref: '#/components/examples/SchemaTypeError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Removes user from the offering
      tags:
      - Offering learners
      x-openapi-router-controller: openapi_server.controllers.offering_learners_controller
  /offerings/{offeringId}/users/{userEmail}/assessments/{assessmentId}:
    delete:
      description: Resets the user's submitted assessment to a draft state.
      operationId: offerings_offering_id_users_user_email_assessments_assessment_id_delete
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: user's email
        explode: false
        in: path
        name: userEmail
        required: true
        schema:
          format: email
          type: string
        style: simple
      - description: assessment's id
        explode: false
        in: path
        name: assessmentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: User's assessment successfully moved to draft state.
        "400":
          content:
            application/json:
              examples:
                AssessmentNotSubmittedError:
                  $ref: '#/components/examples/AssessmentNotSubmittedError'
                ObjectInvalidPropertyError:
                  $ref: '#/components/examples/ObjectInvalidPropertyError'
                SchemaEmailError:
                  $ref: '#/components/examples/SchemaEmailError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Reset user's assessment to draft state
      tags:
      - Assessment management
      x-openapi-router-controller: openapi_server.controllers.assessment_management_controller
  /offerings/{offeringId}/users/{userEmail}/badges/award:
    post:
      description: Awards a badge to a user in the offering.
      operationId: offerings_offering_id_users_user_email_badges_award_post
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: user's email
        explode: false
        in: path
        name: userEmail
        required: true
        schema:
          format: email
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AwardedResponse'
          description: Awarded badge response
        "400":
          content:
            application/json:
              examples:
                MissingInfoError:
                  $ref: '#/components/examples/MissingInfoError'
                UserNotInOfferingError:
                  $ref: '#/components/examples/UserNotInOfferingError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Award badge
      tags:
      - Badges
      x-openapi-router-controller: openapi_server.controllers.badges_controller
  /offerings/{offeringId}/users/{userEmail}/submissions/open-response:
    get:
      description: Responds with open response assessment submissions by a learner
        in an offering.
      operationId: offerings_offering_id_users_user_email_submissions_open_response_get
      parameters:
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      - description: user's email
        explode: false
        in: path
        name: userEmail
        required: true
        schema:
          format: email
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Assignments'
                title: user's assignments
                type: array
          description: user open response submission and mark details
        "400":
          content:
            application/json:
              examples:
                SchemaEmailError:
                  $ref: '#/components/examples/SchemaEmailError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find learner's open response assessment submissions
      tags:
      - Assessment management
      x-openapi-router-controller: openapi_server.controllers.assessment_management_controller
  /org:
    get:
      description: Returns the current organisation info.
      operationId: org_get
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgResponse'
          description: organisation summary data
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Gets the current organisation
      tags:
      - Organisation
      x-openapi-router-controller: openapi_server.controllers.organisation_controller
  /users:
    post:
      description: Creates a new user.
      operationId: users_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: user
        required: true
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: user added
        "400":
          content:
            application/json:
              examples:
                ObjectExistsError:
                  $ref: '#/components/examples/ObjectExistsError'
                SchemaEmailError:
                  $ref: '#/components/examples/SchemaEmailError'
                SchemaFormatError:
                  $ref: '#/components/examples/SchemaFormatError'
                SchemaMinLengthError:
                  $ref: '#/components/examples/SchemaMinLengthError'
                SchemaTypeError:
                  $ref: '#/components/examples/SchemaTypeError'
                UserSuspendedError:
                  $ref: '#/components/examples/UserSuspendedError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Add new user
      tags:
      - Users in iQualify
      x-openapi-router-controller: openapi_server.controllers.users_in_i_qualify_controller
      x-codegen-request-body-name: body
  /users/all/progress:
    get:
      description: Responds with all learners' progress in all offerings.
      operationId: users_all_progress_get
      parameters:
      - description: Returns only the first n results.
        explode: true
        in: query
        name: $top
        required: false
        schema:
          default: "50"
          type: string
        style: form
      - description: Sorts the results.
        explode: true
        in: query
        name: $orderby
        required: false
        schema:
          type: string
        style: form
      - allowReserved: true
        description: "Filters the results, based on a Boolean condition."
        explode: true
        in: query
        name: $filter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_users_all_progress_get_200_response'
          description: Learners progress
        "400":
          content:
            application/json:
              examples:
                ApiValidationError:
                  $ref: '#/components/examples/ApiValidationError'
                SchemaQueryError:
                  $ref: '#/components/examples/SchemaQueryError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
      summary: Find learner progress in all offerings
      tags:
      - Learner activity
      x-openapi-router-controller: openapi_server.controllers.learner_activity_controller
  /users/{userEmail}:
    get:
      description: Responds with a user matching the specified email.
      operationId: users_user_email_get
      parameters:
      - description: user's email
        explode: false
        in: path
        name: userEmail
        required: true
        schema:
          format: email
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: user data
        "400":
          content:
            application/json:
              examples:
                SchemaEmailError:
                  $ref: '#/components/examples/SchemaEmailError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find user by email
      tags:
      - Users in iQualify
      x-openapi-router-controller: openapi_server.controllers.users_in_i_qualify_controller
    patch:
      description: Updates the specified user by email.
      operationId: users_user_email_patch
      parameters:
      - description: user's email
        explode: false
        in: path
        name: userEmail
        required: true
        schema:
          format: email
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: false
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: user updated
        "400":
          content:
            application/json:
              examples:
                ObjectExistsError:
                  $ref: '#/components/examples/ObjectExistsError'
                SchemaEmailError:
                  $ref: '#/components/examples/SchemaEmailError'
                SchemaFormatError:
                  $ref: '#/components/examples/SchemaFormatError'
                SchemaMinLengthError:
                  $ref: '#/components/examples/SchemaMinLengthError'
                SchemaTypeError:
                  $ref: '#/components/examples/SchemaTypeError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Update user
      tags:
      - Users in iQualify
      x-openapi-router-controller: openapi_server.controllers.users_in_i_qualify_controller
      x-codegen-request-body-name: body
  /users/{userEmail}/badges:
    get:
      description: Responds with all badges that the specified user has been awarded.
      operationId: users_user_email_badges_get
      parameters:
      - description: user's email
        explode: false
        in: path
        name: userEmail
        required: true
        schema:
          format: email
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserBadge'
                title: Badges
                type: array
          description: user's badges
        "400":
          content:
            application/json:
              examples:
                SchemaEmailError:
                  $ref: '#/components/examples/SchemaEmailError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find user's badges
      tags:
      - Badges
      x-openapi-router-controller: openapi_server.controllers.badges_controller
  /users/{userEmail}/invite-email:
    post:
      description: Re-sends an invitation e-mail to the specified user.
      operationId: users_user_email_invite_email_post
      parameters:
      - description: user's email
        explode: false
        in: path
        name: userEmail
        required: true
        schema:
          format: email
          type: string
        style: simple
      responses:
        "204":
          description: successfully requested invitation e-mail sending
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Resend invitation email
      tags:
      - Users in iQualify
      x-openapi-router-controller: openapi_server.controllers.users_in_i_qualify_controller
  /users/{userEmail}/offerings:
    get:
      description: Responds with all offerings that the user in.
      operationId: users_user_email_offerings_get
      parameters:
      - description: user's email
        explode: false
        in: path
        name: userEmail
        required: true
        schema:
          format: email
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OfferingMetadataResponse'
                title: Offerings
                type: array
          description: user's offerings
        "400":
          content:
            application/json:
              examples:
                SchemaEmailError:
                  $ref: '#/components/examples/SchemaEmailError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find user's offerings
      tags:
      - Users in iQualify
      x-openapi-router-controller: openapi_server.controllers.users_in_i_qualify_controller
    post:
      description: Adds a user to an array of offerings by offeringId.
      operationId: users_user_email_offerings_post
      parameters:
      - description: user's email
        explode: false
        in: path
        name: userEmail
        required: true
        schema:
          format: email
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: offering ids
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OfferingMetadataResponse'
                title: Offerings
                type: array
          description: user's offerings
        "400":
          content:
            application/json:
              examples:
                MissingInfoError:
                  $ref: '#/components/examples/MissingInfoError'
                SchemaEmailError:
                  $ref: '#/components/examples/SchemaEmailError'
                SchemaTypeError:
                  $ref: '#/components/examples/SchemaTypeError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Adds the user to the specified offerings as a learner
      tags:
      - Users in iQualify
      x-openapi-router-controller: openapi_server.controllers.users_in_i_qualify_controller
      x-codegen-request-body-name: body
  /users/{userEmail}/offerings/{offeringId}/progress:
    get:
      description: Responds with the learner's progress in a specified offering.
      operationId: users_user_email_offerings_offering_id_progress_get
      parameters:
      - description: user's email
        explode: false
        in: path
        name: userEmail
        required: true
        schema:
          format: email
          type: string
        style: simple
      - description: offering's id
        explode: false
        in: path
        name: offeringId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_users__userEmail__offerings__offeringId__progress_get_200_response'
          description: user's offerings
        "400":
          content:
            application/json:
              examples:
                SchemaEmailError:
                  $ref: '#/components/examples/SchemaEmailError'
                UserNotInOfferingError:
                  $ref: '#/components/examples/UserNotInOfferingError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find learner's progress in a specified offering
      tags:
      - Learner activity
      x-openapi-router-controller: openapi_server.controllers.learner_activity_controller
  /users/{userEmail}/permissions/{permissionName}:
    post:
      description: Adds additional permissions to the specified user.
      operationId: users_user_email_permissions_permission_name_post
      parameters:
      - description: user's email
        explode: false
        in: path
        name: userEmail
        required: true
        schema:
          format: email
          type: string
        style: simple
      - description: permission name
        explode: false
        in: path
        name: permissionName
        required: true
        schema:
          enum:
          - builder
          - manager
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: permission successfully added to user
        "400":
          content:
            application/json:
              examples:
                MissingInfoError:
                  $ref: '#/components/examples/MissingInfoError'
                ObjectAlreadyIsError:
                  $ref: '#/components/examples/ObjectAlreadyIsError'
                SchemaAllowedValuesError:
                  $ref: '#/components/examples/SchemaAllowedValuesError'
                SchemaEmailError:
                  $ref: '#/components/examples/SchemaEmailError'
                SchemaTypeError:
                  $ref: '#/components/examples/SchemaTypeError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Add permission to user
      tags:
      - Users in iQualify
      x-openapi-router-controller: openapi_server.controllers.users_in_i_qualify_controller
  /users/{userEmail}/progress:
    get:
      description: Responds with the specified learner's progress in all offerings.
      operationId: users_user_email_progress_get
      parameters:
      - description: user's email
        explode: false
        in: path
        name: userEmail
        required: true
        schema:
          format: email
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearnerResponse'
          description: Learner Progress
        "400":
          content:
            application/json:
              examples:
                SchemaEmailError:
                  $ref: '#/components/examples/SchemaEmailError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Find learner's progress in offerings
      tags:
      - Learner activity
      x-openapi-router-controller: openapi_server.controllers.learner_activity_controller
  /users/{userEmail}/suspend:
    put:
      description: Suspends the specified user's account.
      operationId: users_user_email_suspend_put
      parameters:
      - description: user's email
        explode: false
        in: path
        name: userEmail
        required: true
        schema:
          format: email
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuspendedRequest'
        required: true
        x-body-name: body
      responses:
        "204":
          description: User suspended.
        "400":
          content:
            application/json:
              examples:
                InvalidParameterError:
                  $ref: '#/components/examples/InvalidParameterError'
                ObjectExistsError:
                  $ref: '#/components/examples/ObjectExistsError'
                SchemaEmailError:
                  $ref: '#/components/examples/SchemaEmailError'
                SchemaFormatError:
                  $ref: '#/components/examples/SchemaFormatError'
                SchemaTypeError:
                  $ref: '#/components/examples/SchemaTypeError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Suspend user
      tags:
      - Users in iQualify
      x-openapi-router-controller: openapi_server.controllers.users_in_i_qualify_controller
      x-codegen-request-body-name: body
  /users/{userEmail}/transfer:
    patch:
      description: Moves the user's access and progress from one offering to another.
      operationId: users_user_email_transfer_patch
      parameters:
      - description: user's email
        explode: false
        in: path
        name: userEmail
        required: true
        schema:
          format: email
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
        description: transfer_data
        required: true
        x-body-name: body
      responses:
        "200":
          description: Updated user information
        "400":
          content:
            application/json:
              examples:
                ContentDoNotMatchError:
                  $ref: '#/components/examples/ContentDoNotMatchError'
                InvalidSourceAndTargetError:
                  $ref: '#/components/examples/InvalidSourceAndTargetError'
                SchemaEmailError:
                  $ref: '#/components/examples/SchemaEmailError'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                details: No authorization token was found.
                name: NotAuthorizedError
              schema:
                $ref: '#/components/schemas/Error'
          description: No authorization token was found.
        "403":
          content:
            application/json:
              example:
                details: You are not allowed to access this resource
                name: AccessDeniedError
              schema:
                $ref: '#/components/schemas/Error'
          description: You are not allowed to access this resource.
        "404":
          content:
            application/json:
              example:
                details: The content badcontentId was not found.
                name: ObjectNotFoundError
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: Transfer a user between offerings
      tags:
      - Offering learners
      x-openapi-router-controller: openapi_server.controllers.offering_learners_controller
      x-codegen-request-body-name: body
components:
  examples:
    ApiValidationError:
      summary: API validation error
      value:
        details: invalid $filter parameter.
        name: ApiValidationError
    AssessmentNotSubmittedError:
      summary: the specified user has not submitted an assessment
      value:
        details: The user alex.doe@test.te has not submitted assessment as1.
        name: AssessmentNotSubmittedError
    ContentDoNotMatchError:
      summary: The specified content needs to be the same in order to perform the
        requested operation.
      value:
        details: contentId needs to be the same in order to perform the requested
          operation.
        name: ContentDoNotMatchError
    IncompatibleParametersError:
      summary: Two properties in the request contains incompatible values with each
        other
      value:
        details: A cannot be B when C is D
        name: IncompatibleParametersError
    InvalidChannelPropertiesError:
      summary: "A channel can only have one of these properties set as true: groupDiscussion,\
        \ isBroadcastOnly or privateSupport"
      value:
        details: "A channel can only have one of these properties set as true: groupDiscussion,\
          \ isBroadcastOnly or privateSupport"
        name: InvalidChannelPropertiesError
    InvalidContentError:
      summary: You need to specify content_id or rootContentId.
      value:
        details: You need to specify content_id or rootContentId.
        name: InvalidContentError
    InvalidGroupChannelError:
      summary: Specified channel is not a group discussion channel.
      value:
        details: Channel channel1 is not a group discussion channel.
        name: InvalidGroupChannelError
    InvalidObjectIdError:
      summary: The user has been suspended.
      value:
        details: The specified task id has an invalid value '1111'.
        name: InvalidObjectIdError
    InvalidParameterError:
      summary: the specified source object already exists in the target object
      value:
        details: The specified parameter file.mimetype (image mimetype) has an invalid
          value \'text/plain\'.
        name: InvalidParameterError
    InvalidSourceAndTargetError:
      summary: Source and target offerings cannot be the same.
      value:
        details: Source and target offerings cannot be the same.
        name: InvalidSourceAndTargetError
    MissingInfoError:
      summary: Specified info is missing.
      value:
        details: The field 'Offering Badge' is missing or invalid.
        name: MissingInfoError
    MultipleObjectsError:
      summary: The specified object has multiple properties of which should have only
        one
      value:
        details: There are multiple permission with value true (isBuilder | isReviewer).
        name: ObjectIsNotError
    ObjectAlreadyIsError:
      summary: The specified object already has a property
      value:
        details: The user john.doe@test.te is already a manager.
        name: ObjectAlreadyIsError
    ObjectExistsError:
      summary: the specified source object already exists in the target object
      value:
        details: The badge already exists in the offering OFFERING ID.
        name: ObjectExistsError
    ObjectInvalidPropertyError:
      summary: the specified source object already exists in the target object
      value:
        details: "The A property B is invalid. Expected value: C"
        name: ObjectInvalidPropertyError
    ObjectIsNotError:
      summary: the specified object is not of the specified type
      value:
        details: The user john.doe@test.te is not a builder.
        name: ObjectIsNotError
    ObjectNotFoundError:
      summary: a referenced object is not found
      value:
        details: The content badcontentId was not found.
        name: ObjectNotFoundError
    OfferingIncompatibleDatesError:
      summary: The specified offering has relative dates enabled. Absolute task dates
        can not be set.
      value:
        details: The specified offering has relative dates enabled. Absolute task
          dates can not be set.
        name: OfferingIncompatibleDatesError
    SchemaAdditionalPropertiesError:
      summary: The request body should not have extra properties
      value:
        details: should NOT have additional properties
        name: SchemaValidationError
    SchemaAllowedValuesError:
      summary: should be equal to one of the allowed values
      value:
        details: "[PARAMETER_NAME] PARAMETER_VALUE should be equal to one of the allowed\
          \ values a, b"
        name: SchemaValidationError
    SchemaEmailError:
      summary: Parameter should be a valid e-mail
      value:
        details: PARAMETER_NAME PARAMETER_VALUE should match format "email".
        name: SchemaValidationError
    SchemaFormatError:
      summary: should match specific format
      value:
        details: PARAMETER_NAME PARAMETER_VALUE should match format "example"
        name: SchemaValidationError
    SchemaMediaError:
      summary: unsupported media type in the content-type header
      value:
        details: unsupported media type application/json
        name: SchemaValidationError
    SchemaMinLengthError:
      summary: should be longer than the minimum required
      value:
        details: "[PARAMETER_NAME] PARAMETER_VALUE should NOT be shorter than 3 characters"
        name: SchemaValidationError
    SchemaQueryError:
      summary: Unknown query parameter
      value:
        details: "[PARAMETER_NAME] PARAMETER_VALUE Unknown query parameter 'example'"
        name: SchemaValidationError
    SchemaRequiredError:
      summary: should have a specific required property
      value:
        details: should have required property 'example'
        name: SchemaValidationError
    SchemaTypeError:
      summary: should be of a specific type
      value:
        details: "[PARAMETER_NAME] PARAMETER_VALUE should be string"
        name: SchemaValidationError
    TextPatternError:
      summary: Text pattern must be a minimum of n characters in length.
      value:
        details: Text pattern must be a minimum of 3 characters in length.
        name: TextPatternError
    UserDoesNotHaveBadgeError:
      summary: The specified user does not have a badge in the specified offering
      value:
        details: The user A has not been awarded a badge in the offering B.
        name: UserDoesNotHaveBadgeError
    UserNotInChannelError:
      summary: Specified user is not in the channel.
      value:
        details: The user john.doe@test.te is not a learner in the channel -MEF8kFyURUr6_CZ4IXD.
        name: UserNotInChannelError
    UserNotInOfferingError:
      summary: Specified user is not in the offering.
      value:
        details: The user john.doe@test.te is not a learner in the offering -MEF8kFyURUr6_CZ4IXD.
        name: UserNotInOfferingError
    UserSuspendedError:
      summary: The user has been suspended.
      value:
        details: The user (john.doe@test.te) has been suspended.
        name: UserSuspendedError
    ValidationAllowTasksError:
      summary: The specified parameter offeringId does not have tasks enabled
      value:
        details: The specified parameter offeringId has an invalid value 'The specified
          parameter offeringId does not have tasks enabled'.
        name: ValidationError
    ValidationError:
      summary: The specified parameter dueDate has an invalid value
      value:
        details: The specified parameter dueDate has an invalid value "Thu Apr 16
          2020 19:15:00 GMT-0300 is before the openDate".
        name: ValidationError
    ValidationTaskNotInOfferingError:
      summary: The specified parameter taskId is not in the offering
      value:
        details: The specified parameter taskId has an invalid value 'The specified
          parameter taskId is not in the offering'.
        name: ValidationError
  parameters:
    assessmentId:
      description: assessment's id
      explode: false
      in: path
      name: assessmentId
      required: true
      schema:
        type: string
      style: simple
    badgeId:
      description: badge's id
      explode: false
      in: path
      name: badgeId
      required: true
      schema:
        type: string
      style: simple
    channelId:
      description: channel's id
      explode: false
      in: path
      name: channelId
      required: true
      schema:
        type: string
      style: simple
    evaluatorEmail:
      description: Evaluator's email
      explode: false
      in: path
      name: evaluatorEmail
      required: true
      schema:
        format: email
        type: string
      style: simple
    externalCourseId:
      description: external course's id
      explode: false
      in: path
      name: externalCourseId
      required: true
      schema:
        type: string
      style: simple
    groupId:
      description: Assessment group id
      explode: false
      in: path
      name: groupId
      required: true
      schema:
        pattern: "^[0-9a-fA-F]{24}$"
        type: string
      style: simple
    offeringId:
      description: offering's id
      explode: false
      in: path
      name: offeringId
      required: true
      schema:
        type: string
      style: simple
    permissionName:
      description: permission name
      explode: false
      in: path
      name: permissionName
      required: true
      schema:
        enum:
        - builder
        - manager
        type: string
      style: simple
    rootContentId:
      description: Protfolio root content id
      explode: false
      in: path
      name: rootContentId
      required: true
      schema:
        type: string
      style: simple
    sectionId:
      description: section's id
      explode: false
      in: path
      name: sectionId
      required: true
      schema:
        type: string
      style: simple
    submissionId:
      description: submission id
      explode: false
      in: path
      name: submissionId
      required: true
      schema:
        type: string
      style: simple
    taskId:
      description: task id
      explode: false
      in: path
      name: taskId
      required: true
      schema:
        type: string
      style: simple
    userEmail:
      description: user's email
      explode: false
      in: path
      name: userEmail
      required: true
      schema:
        format: email
        type: string
      style: simple
  responses:
    AccessDeniedError:
      content:
        application/json:
          example:
            details: You are not allowed to access this resource
            name: AccessDeniedError
          schema:
            $ref: '#/components/schemas/Error'
      description: You are not allowed to access this resource.
    InvalidContentError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: You need to specify content_id or rootContentId.
    NotAuthorizedError:
      content:
        application/json:
          example:
            details: No authorization token was found.
            name: NotAuthorizedError
          schema:
            $ref: '#/components/schemas/Error'
      description: No authorization token was found.
    NotImplementedError:
      content:
        application/json:
          example:
            details: The endpoint is not implemented.
            name: NotImplementedError
          schema:
            $ref: '#/components/schemas/Error'
      description: Endpoint Not Implemented
    ObjectNotFoundError:
      content:
        application/json:
          example:
            details: The content badcontentId was not found.
            name: ObjectNotFoundError
          schema:
            $ref: '#/components/schemas/Error'
      description: Not Found
    RouteNotFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Invalid path.
    ServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: "We're sorry, but something went wrong."
    TooManyRequestsError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Request rate is too large.
  schemas:
    ActivationResponse:
      example:
        learnersCount: learnersCount
        metadata:
          rootContentId: rootContentId
        name: name
        start: start
        end: end
        id: id
        info: info
      properties:
        end:
          title: end
          type: string
        id:
          title: id
          type: string
        info:
          title: info
          type: string
        learnersCount:
          description: "number of learners in the offering, excluding facilitators\
            \ and coaches"
          title: learnersCount
          type: string
        metadata:
          $ref: '#/components/schemas/ActivationResponse_metadata'
        name:
          title: name
          type: string
        start:
          title: start
          type: string
      title: ActivationResponse
      type: object
    ActivityAttemptOpenResponse:
      example:
        feedback:
          text: text
          facilitatorEmail: facilitatorEmail
        uploadedFiles:
          filename: filename
          size: size
          mimetype: mimetype
          url: url
        activityId: activityId
        learnerEmail: learnerEmail
        responseText: responseText
        activityType: activityType
        offeringId: offeringId
      properties:
        activityId:
          title: activityId
          type: string
        activityType:
          title: activityType
          type: string
        feedback:
          $ref: '#/components/schemas/ActivityAttemptOpenResponseFeedback'
        learnerEmail:
          title: learnerEmail
          type: string
        offeringId:
          title: offeringId
          type: string
        responseText:
          title: responseText
          type: string
        uploadedFiles:
          $ref: '#/components/schemas/ActivityAttemptOpenResponseFiles'
      title: ActivityAttemptOpenResponse
      type: object
    ActivityAttemptOpenResponseFeedback:
      example:
        text: text
        facilitatorEmail: facilitatorEmail
      properties:
        facilitatorEmail:
          title: facilitatorEmail
          type: string
        text:
          title: text
          type: string
      title: ActivityAttemptOpenResponseFeedback
      type: object
    ActivityAttemptOpenResponseFiles:
      example:
        filename: filename
        size: size
        mimetype: mimetype
        url: url
      properties:
        filename:
          title: filename
          type: string
        mimetype:
          title: mimetype
          type: string
        size:
          title: size
          type: string
        url:
          title: url
          type: string
      title: ActivityAttemptOpenResponseFiles
      type: object
    Assessment:
      example:
        dueDate: 2000-01-23T04:56:07.000+00:00
        markNumber: markNumber
        markType: markType
        openDate: 2000-01-23T04:56:07.000+00:00
        content: content
      properties:
        content:
          title: content
          type: string
        dueDate:
          format: date-time
          title: dueDate
          type: string
        markNumber:
          minLength: 1
          title: markNumber
          type: string
        markType:
          minLength: 1
          title: markType
          type: string
        openDate:
          format: date-time
          title: openDate
          type: string
      title: Assessment
      type: object
    AssessmentGroupRequired:
      example:
        title: title
      properties:
        title:
          minLength: 1
          title: title
          type: string
      required:
      - title
      title: AssessmentGroupRequired
      type: object
    AssessmentGroupResponse:
      example:
        createdAt: createdAt
        id: id
        title: title
      properties:
        createdAt:
          title: createdAt
          type: string
        id:
          title: id
          type: string
        title:
          minLength: 1
          title: title
          type: string
      title: AssessmentGroupResponse
      type: object
    AssessmentPendingSubmission:
      example:
        totalThemes: 5
        totalQuestions: 1
        hidden: false
        documents:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          filename: filename
          size: 0
          mimetype: mimetype
          id: id
          url: url
        - createdAt: 2000-01-23T04:56:07.000+00:00
          filename: filename
          size: 0
          mimetype: mimetype
          id: id
          url: url
        dueDate: 2000-01-23T04:56:07.000+00:00
        markNumber: markNumber
        pid: pid
        offeringId: offeringId
        title: title
        type: type
        content: content
        users:
        - firstName: firstName
          lastName: lastName
          metadata:
            tags:
            - tags
            - tags
          sendInvite: true
          profile:
            displayName: displayName
          personId: personId
          email: email
        - firstName: firstName
          lastName: lastName
          metadata:
            tags:
            - tags
            - tags
          sendInvite: true
          profile:
            displayName: displayName
          personId: personId
          email: email
        points: points
        durationMinutes: 0
        maxAttempts: 6
        themes:
        - filter: filter
          numberOfQuestions: numberOfQuestions
        - filter: filter
          numberOfQuestions: numberOfQuestions
        filename: filename
        offeringName: offeringName
        markType: markType
        id: id
        openDate: 2000-01-23T04:56:07.000+00:00
      properties:
        content:
          title: content
          type: string
        documents:
          items:
            $ref: '#/components/schemas/Document'
          title: documents
          type: array
        dueDate:
          format: date-time
          title: dueDate
          type: string
        durationMinutes:
          format: int32
          title: durationMinutes
          type: integer
        filename:
          title: filename
          type: string
        hidden:
          default: false
          title: hidden
          type: boolean
        id:
          title: id
          type: string
        markNumber:
          minLength: 1
          title: markNumber
          type: string
        markType:
          minLength: 1
          title: markType
          type: string
        maxAttempts:
          format: int32
          title: maxAttempts
          type: integer
        offeringId:
          title: offeringId
          type: string
        offeringName:
          title: offeringName
          type: string
        openDate:
          format: date-time
          title: openDate
          type: string
        pid:
          title: pid
          type: string
        points:
          title: points
          type: string
        themes:
          items:
            $ref: '#/components/schemas/ThemeResponse'
          title: themes
          type: array
        title:
          title: title
          type: string
        totalQuestions:
          format: int32
          title: totalQuestions
          type: integer
        totalThemes:
          format: int32
          title: totalThemes
          type: integer
        type:
          title: type
          type: string
        users:
          items:
            $ref: '#/components/schemas/User'
          title: users
          type: array
      title: AssessmentPendingSubmission
      type: object
    AssessmentResponse:
      example:
        totalThemes: 5
        totalQuestions: 1
        hidden: false
        documents:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          filename: filename
          size: 0
          mimetype: mimetype
          id: id
          url: url
        - createdAt: 2000-01-23T04:56:07.000+00:00
          filename: filename
          size: 0
          mimetype: mimetype
          id: id
          url: url
        dueDate: 2000-01-23T04:56:07.000+00:00
        markNumber: markNumber
        pid: pid
        title: title
        type: type
        content: content
        points: points
        durationMinutes: 0
        maxAttempts: 6
        themes:
        - filter: filter
          numberOfQuestions: numberOfQuestions
        - filter: filter
          numberOfQuestions: numberOfQuestions
        filename: filename
        markType: markType
        id: id
        openDate: 2000-01-23T04:56:07.000+00:00
      properties:
        content:
          title: content
          type: string
        documents:
          items:
            $ref: '#/components/schemas/Document'
          title: documents
          type: array
        dueDate:
          format: date-time
          title: dueDate
          type: string
        durationMinutes:
          format: int32
          title: durationMinutes
          type: integer
        filename:
          title: filename
          type: string
        hidden:
          default: false
          title: hidden
          type: boolean
        id:
          title: id
          type: string
        markNumber:
          minLength: 1
          title: markNumber
          type: string
        markType:
          minLength: 1
          title: markType
          type: string
        maxAttempts:
          format: int32
          title: maxAttempts
          type: integer
        openDate:
          format: date-time
          title: openDate
          type: string
        pid:
          title: pid
          type: string
        points:
          title: points
          type: string
        themes:
          items:
            $ref: '#/components/schemas/ThemeResponse'
          title: themes
          type: array
        title:
          title: title
          type: string
        totalQuestions:
          format: int32
          title: totalQuestions
          type: integer
        totalThemes:
          format: int32
          title: totalThemes
          type: integer
        type:
          title: type
          type: string
      title: AssessmentResponse
      type: object
    AssignmentMarkResponse:
      example:
        assessmentItemName: assessmentItemName
        markedByFacilitator: true
        markedByEvaluator: true
        learnerPersonId: learnerPersonId
        markedByMarker: true
        courseName: courseName
        assessmentItemDetails: assessmentItemDetails
        learnerEmail: learnerEmail
        markedDateTime: 2000-01-23T04:56:07.000+00:00
        submissionDateTime: 2000-01-23T04:56:07.000+00:00
        learnerFirstName: learnerFirstName
        learnerLastName: learnerLastName
        markFeedback: markFeedback
        markedBy: markedBy
        assessmentId: assessmentId
        mark: mark
      properties:
        assessmentId:
          title: assessmentId
          type: string
        assessmentItemDetails:
          title: assessmentItemDetails
          type: string
        assessmentItemName:
          title: assessmentItemName
          type: string
        courseName:
          title: courseName
          type: string
        learnerEmail:
          title: learnerEmail
          type: string
        learnerFirstName:
          title: learnerFirstName
          type: string
        learnerLastName:
          title: learnerLastName
          type: string
        learnerPersonId:
          title: learnerPersonId
          type: string
        mark:
          title: mark
          type: string
        markFeedback:
          title: markFeedback
          type: string
        markedBy:
          title: markedBy
          type: string
        markedByEvaluator:
          title: markedByEvaluator
          type: boolean
        markedByFacilitator:
          title: markedByFacilitator
          type: boolean
        markedByMarker:
          title: markedByMarker
          type: boolean
        markedDateTime:
          format: date-time
          title: markedDateTime
          type: string
        submissionDateTime:
          format: date-time
          title: submissionDateTime
          type: string
      title: AssignmentMark
      type: object
    Assignments:
      example:
        files:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          filename: filename
          size: 0
          mimetype: mimetype
          id: id
          url: url
        - createdAt: 2000-01-23T04:56:07.000+00:00
          filename: filename
          size: 0
          mimetype: mimetype
          id: id
          url: url
        marks:
        - feedback: feedback
          createdAt: 2000-01-23T04:56:07.000+00:00
          markFeedback:
          - feedback: feedback
            createdAt: 2000-01-23T04:56:07.000+00:00
            feedbackBy: feedbackBy
            id: id
            markerId: markerId
            mark: mark
          - feedback: feedback
            createdAt: 2000-01-23T04:56:07.000+00:00
            feedbackBy: feedbackBy
            id: id
            markerId: markerId
            mark: mark
          id: id
          markedBy: markedBy
          markerId: markerId
          mark: mark
        - feedback: feedback
          createdAt: 2000-01-23T04:56:07.000+00:00
          markFeedback:
          - feedback: feedback
            createdAt: 2000-01-23T04:56:07.000+00:00
            feedbackBy: feedbackBy
            id: id
            markerId: markerId
            mark: mark
          - feedback: feedback
            createdAt: 2000-01-23T04:56:07.000+00:00
            feedbackBy: feedbackBy
            id: id
            markerId: markerId
            mark: mark
          id: id
          markedBy: markedBy
          markerId: markerId
          mark: mark
        submittedAt: 2000-01-23T04:56:07.000+00:00
        status: status
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        files:
          items:
            $ref: '#/components/schemas/Document'
          title: files
          type: array
        marks:
          items:
            $ref: '#/components/schemas/Mark'
          title: marks
          type: array
        status:
          title: status
          type: string
        submittedAt:
          format: date-time
          title: submittedAt
          type: string
        updatedAt:
          format: date-time
          title: updatedAt
          type: string
      title: Assignments
      type: object
    AwardedResponse:
      example:
        badgeUrl: badgeUrl
        badgeId: badgeId
        awarded: true
      properties:
        awarded:
          title: awarded
          type: boolean
        badgeId:
          title: badgeId
          type: string
        badgeUrl:
          title: badgeUrl
          type: string
      title: AwardedResponse
      type: object
    Badge:
      example:
        openBadge: ""
        badgeExpiry:
          expires: true
          timeframeAmount: 0.8008281904610115
          expiryType: date
          timeframeUnit: days
          expirationDate: 2000-01-23T04:56:07.000+00:00
        badgeUrl: badgeUrl
        criterias: ""
        description: description
        title: title
      properties:
        badgeExpiry:
          $ref: '#/components/schemas/BadgeExpiry'
        badgeUrl:
          title: badgeUrl
          type: string
        criterias:
          allOf:
          - $ref: '#/components/schemas/Criteria'
          title: criterias
        description:
          title: description
          type: string
        openBadge:
          allOf:
          - $ref: '#/components/schemas/OpenBadgeClass'
          title: openBadge
        title:
          title: title
          type: string
      title: Badge
      type: object
    BadgeExpiry:
      example:
        expires: true
        timeframeAmount: 0.8008281904610115
        expiryType: date
        timeframeUnit: days
        expirationDate: 2000-01-23T04:56:07.000+00:00
      properties:
        expirationDate:
          format: date-time
          title: expirationDate
          type: string
        expires:
          title: expires
          type: boolean
        expiryType:
          enum:
          - date
          - timeframe
          title: expiryType
          type: string
        timeframeAmount:
          title: timeframeAmount
          type: number
        timeframeUnit:
          enum:
          - days
          - months
          - years
          title: timeframeUnit
          type: string
      title: BadgeExpiry
      type: object
    Channel:
      example:
        isBroadcastOnly: true
        groupDiscussion: true
        privateSupport: true
        title: title
        group:
          autoAssign: true
      properties:
        group:
          $ref: '#/components/schemas/Channel_group'
        groupDiscussion:
          title: groupDiscussion
          type: boolean
        isBroadcastOnly:
          title: isBroadcastOnly
          type: boolean
        privateSupport:
          title: privateSupport
          type: boolean
        title:
          minLength: 1
          title: title
          type: string
      title: Channel
      type: object
    ChannelRequired:
      example:
        isBroadcastOnly: false
        title: title
      properties:
        isBroadcastOnly:
          default: false
          title: isBroadcastOnly
          type: boolean
        title:
          minLength: 1
          title: title
          type: string
      required:
      - title
      title: ChannelRequired
      type: object
    ChannelResponse:
      example:
        isBroadcastOnly: false
        id: id
        title: title
      properties:
        id:
          title: id
          type: string
        isBroadcastOnly:
          default: false
          title: isBroadcastOnly
          type: boolean
        title:
          minLength: 1
          title: title
          type: string
      title: ChannelResponse
      type: object
    Comment:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        moderation:
          reason: reason
          moderator:
            firstName: firstName
            lastName: lastName
            avatarUrl: avatarUrl
            id: id
          isMuted: true
        isFacilitatorPost: true
        parentCommentId: parentCommentId
        id: id
        postId: postId
        content: content
        email: email
      properties:
        content:
          title: content
          type: string
        createdAt:
          format: date-time
          title: createdAt
          type: string
        email:
          title: email
          type: string
        id:
          title: id
          type: string
        isFacilitatorPost:
          title: isFacilitatorPost
          type: boolean
        moderation:
          $ref: '#/components/schemas/Moderation'
        parentCommentId:
          title: parentCommentId
          type: string
        postId:
          title: postId
          type: string
      title: Comment
      type: object
    CourseMetaResponse:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        metadata:
          learning_outcomes:
          - description: description
            id: id
          - description: description
            id: id
          level: level
          topic: topic
          category: category
          rootContentId: rootContentId
          tags:
          - tags
          - tags
        coverImageUrl: coverImageUrl
        name: name
        id: id
        tasksEnabled: true
      properties:
        coverImageUrl:
          title: coverImageUrl
          type: string
        createdAt:
          format: date-time
          title: createdAt
          type: string
        id:
          title: id
          type: string
        metadata:
          $ref: '#/components/schemas/CourseMetaResponse_metadata'
        name:
          title: name
          type: string
        tasksEnabled:
          title: tasksEnabled
          type: boolean
      title: Course
      type: object
    CourseResponse:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        metadata:
          learning_outcomes:
          - description: description
            id: id
          - description: description
            id: id
        coverImageUrl: coverImageUrl
        name: name
        id: id
      properties:
        coverImageUrl:
          title: coverImageUrl
          type: string
        createdAt:
          format: date-time
          title: createdAt
          type: string
        id:
          title: id
          type: string
        metadata:
          $ref: '#/components/schemas/CourseResponse_metadata'
        name:
          title: name
          type: string
      title: Course
      type: object
    Criteria:
      properties:
        hasCompletedCourse:
          default: true
          title: hasCompletedCourse
          type: boolean
        hasPassedMandatoryAssessedQuizzes:
          default: true
          title: hasPassedMandatoryAssessedQuizzes
          type: boolean
      title: Criteria
      type: object
    Document:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        filename: filename
        size: 0
        mimetype: mimetype
        id: id
        url: url
      properties:
        createdAt:
          format: date-time
          title: createdAt
          type: string
        filename:
          title: filename
          type: string
        id:
          title: id
          type: string
        mimetype:
          title: mimetype
          type: string
        size:
          format: int64
          title: size
          type: integer
        url:
          title: url
          type: string
      title: Document
      type: object
    DocumentResponse:
      example:
        size: 0
        mimetype: mimetype
        id: id
        url: url
      properties:
        id:
          title: id
          type: string
        mimetype:
          title: mimetype
          type: string
        size:
          format: int64
          title: size
          type: integer
        url:
          title: url
          type: string
      title: DocumentResponse
      type: object
    Error:
      example:
        error:
          name: name
          details: details
      properties:
        error:
          $ref: '#/components/schemas/Error_error'
      title: Error
      type: object
    Invite:
      example:
        url: url
      properties:
        url:
          description: if sendInvite in request is false
          title: url
          type: string
      title: Invite
      type: object
    LearnerOfferingDates:
      properties:
        start:
          format: date-time
          type: string
      type: object
    LearnerProgressResponse:
      example:
        completion: completion
        firstName: firstName
        lastName: lastName
        lastLoggedInAt: 2000-01-23T04:56:07.000+00:00
        personId: personId
        courseId: courseId
        email: email
      properties:
        completion:
          title: completion
          type: string
        courseId:
          title: courseId
          type: string
        email:
          title: email
          type: string
        firstName:
          title: firstName
          type: string
        lastLoggedInAt:
          format: date-time
          title: lastLoggedInAt
          type: string
        lastName:
          title: lastName
          type: string
        personId:
          title: personId
          type: string
      title: LearnerProgress
      type: object
    LearnerResponse:
      example:
        firstName: firstName
        lastName: lastName
        personId: personId
        id: id
        offerings:
        - completion: completion
          id: id
        - completion: completion
          id: id
        email: email
      properties:
        email:
          title: email
          type: string
        firstName:
          title: firstName
          type: string
        id:
          title: id
          type: string
        lastName:
          title: lastName
          type: string
        offerings:
          items:
            $ref: '#/components/schemas/OfferingProgressRow'
          title: offerings
          type: array
        personId:
          title: personId
          type: string
      title: LearnerResponse
      type: object
    LearningOutcomes:
      example:
        description: description
        id: id
      properties:
        description:
          title: description
          type: string
        id:
          title: id
          type: string
      title: LearningOutcomes
      type: object
    Mark:
      example:
        feedback: feedback
        createdAt: 2000-01-23T04:56:07.000+00:00
        markFeedback:
        - feedback: feedback
          createdAt: 2000-01-23T04:56:07.000+00:00
          feedbackBy: feedbackBy
          id: id
          markerId: markerId
          mark: mark
        - feedback: feedback
          createdAt: 2000-01-23T04:56:07.000+00:00
          feedbackBy: feedbackBy
          id: id
          markerId: markerId
          mark: mark
        id: id
        markedBy: markedBy
        markerId: markerId
        mark: mark
      properties:
        createdAt:
          format: date-time
          title: createdAt
          type: string
        feedback:
          title: feedback
          type: string
        id:
          title: id
          type: string
        mark:
          title: mark
          type: string
        markFeedback:
          items:
            $ref: '#/components/schemas/MarkFeedback'
          title: markFeedback
          type: array
        markedBy:
          title: markedBy
          type: string
        markerId:
          title: markerId
          type: string
      title: Mark
    MarkFeedback:
      example:
        feedback: feedback
        createdAt: 2000-01-23T04:56:07.000+00:00
        feedbackBy: feedbackBy
        id: id
        markerId: markerId
        mark: mark
      properties:
        createdAt:
          format: date-time
          title: createdAt
          type: string
        feedback:
          title: feedback
          type: string
        feedbackBy:
          title: feedbackBy
          type: string
        id:
          title: id
          type: string
        mark:
          title: mark
          type: string
        markerId:
          title: markerId
          type: string
      title: MarkFeedback
    Moderation:
      example:
        reason: reason
        moderator:
          firstName: firstName
          lastName: lastName
          avatarUrl: avatarUrl
          id: id
        isMuted: true
      properties:
        isMuted:
          title: isMuted
          type: boolean
        moderator:
          $ref: '#/components/schemas/Moderator'
        reason:
          title: reason
          type: string
      title: Moderation
      type: object
    Moderator:
      example:
        firstName: firstName
        lastName: lastName
        avatarUrl: avatarUrl
        id: id
      properties:
        avatarUrl:
          title: avatarUrl
          type: string
        firstName:
          title: firstName
          type: string
        id:
          title: id
          type: string
        lastName:
          title: lastName
          type: string
      title: Moderator
      type: object
    Offering:
      example:
        identifier: identifier
        overview: overview
        isReadonly: true
        metadata:
          level: level
          topic: topic
          category: category
          tags:
          - tags
          - tags
        contentId: contentId
        start: 2000-01-23T04:56:07.000+00:00
        description: description
        useRelativeDates: true
        rootContentId: rootContentId
        hasEarlyCloseOff: true
        badge:
          badgeExpiry:
            expires: true
            timeframeAmount: 0.8008281904610115
            expiryType: date
            timeframeUnit: days
            expirationDate: 2000-01-23T04:56:07.000+00:00
          requiresApproval: true
          description: description
          title: title
        earlyCloseOffDate: 2000-01-23T04:56:07.000+00:00
        name: name
        end: 2000-01-23T04:56:07.000+00:00
        trailerVideoUrl: trailerVideoUrl
      properties:
        badge:
          $ref: '#/components/schemas/Offering_badge'
        contentId:
          description: The identifier for a specific version of a course
          minLength: 1
          title: contentId
          type: string
        description:
          minLength: 1
          title: description
          type: string
        earlyCloseOffDate:
          format: date-time
          title: earlyCloseOffDate
          type: string
        end:
          format: date-time
          title: end
          type: string
        hasEarlyCloseOff:
          title: hasEarlyCloseOff
          type: boolean
        identifier:
          title: identifier
          type: string
        isReadonly:
          title: isReadonly
          type: boolean
        metadata:
          $ref: '#/components/schemas/Offering_metadata'
        name:
          minLength: 1
          title: name
          type: string
        overview:
          title: overview
          type: string
        rootContentId:
          description: Every time a course is republished it is assigned a new contentId.
            rootContentId is the first original contentId associated with a course.
          title: rootContentId
          type: string
        start:
          format: date-time
          title: start
          type: string
        trailerVideoUrl:
          minLength: 1
          title: trailerVideoUrl
          type: string
        useRelativeDates:
          title: useRelativeDates
          type: boolean
      title: Offering
      type: object
    OfferingActivitiesResponse:
      example:
        activityId: activityId
        time: 0.8008281904610115
        title: title
      properties:
        activityId:
          title: activityId
          type: string
        time:
          description: expected minutes to complete
          title: time
          type: number
        title:
          title: title
          type: string
      title: OfferingActivitiesResponse
      type: object
    OfferingMetadata:
      additionalProperties: false
      example:
        level: level
        topic: topic
        category: category
        rootContentId: rootContentId
        tags:
        - tags
        - tags
      properties:
        category:
          title: category
          type: string
        level:
          title: level
          type: string
        rootContentId:
          title: rootContentId
          type: string
        tags:
          items:
            type: string
          title: tags
          type: array
        topic:
          title: topic
          type: string
      title: OfferingMetadata
      type: object
    OfferingMetadataResponse:
      example:
        identifier: identifier
        overview: overview
        isReadonly: true
        metadata:
          level: level
          topic: topic
          category: category
          rootContentId: rootContentId
          tags:
          - tags
          - tags
        coverImageUrl: coverImageUrl
        contentId: contentId
        start: 2000-01-23T04:56:07.000+00:00
        description: description
        useRelativeDates: false
        hasEarlyCloseOff: true
        earlyCloseOffDate: 2000-01-23T04:56:07.000+00:00
        price: 6.027456183070403
        name: name
        enrollmentLimit: 0.8008281904610115
        currency: currency
        end: 2000-01-23T04:56:07.000+00:00
        id: id
        trailerVideoUrl: trailerVideoUrl
        tasksEnabled: true
      properties:
        contentId:
          minLength: 1
          title: contentId
          type: string
        coverImageUrl:
          minLength: 1
          title: coverImageUrl
          type: string
        currency:
          title: currency
          type: string
        description:
          minLength: 1
          title: description
          type: string
        earlyCloseOffDate:
          format: date-time
          title: earlyCloseOffDate
          type: string
        end:
          format: date-time
          title: end
          type: string
        enrollmentLimit:
          title: enrollmentLimit
          type: number
        hasEarlyCloseOff:
          title: hasEarlyCloseOff
          type: boolean
        id:
          title: id
          type: string
        identifier:
          title: identifier
          type: string
        isReadonly:
          title: isReadonly
          type: boolean
        metadata:
          $ref: '#/components/schemas/OfferingMetadata'
        name:
          minLength: 1
          title: name
          type: string
        overview:
          description: content can contain html
          minLength: 1
          title: overview
          type: string
        price:
          title: price
          type: number
        start:
          format: date-time
          title: start
          type: string
        tasksEnabled:
          title: tasksEnabled
          type: boolean
        trailerVideoUrl:
          minLength: 1
          title: trailerVideoUrl
          type: string
        useRelativeDates:
          default: false
          title: useRelativeDates
          type: boolean
      title: OfferingMetadataResponse
      type: object
    OfferingProgressRow:
      example:
        completion: completion
        id: id
      properties:
        completion:
          title: completion
          type: string
        id:
          title: id
          type: string
      title: OfferingProgressRow
      type: object
    OfferingRequired:
      example:
        identifier: identifier
        isReadonly: true
        metadata:
          level: level
          topic: topic
          category: category
          tags:
          - tags
          - tags
        contentId: contentId
        start: 2000-01-23T04:56:07.000+00:00
        description: description
        useRelativeDates: false
        rootContentId: rootContentId
        hasEarlyCloseOff: true
        badge:
          badgeExpiry:
            expires: true
            timeframeAmount: 0.8008281904610115
            expiryType: date
            timeframeUnit: days
            expirationDate: 2000-01-23T04:56:07.000+00:00
          requiresApproval: true
          description: description
          title: title
        earlyCloseOffDate: 2000-01-23T04:56:07.000+00:00
        name: name
        createDefaultChannels: false
        end: 2000-01-23T04:56:07.000+00:00
        trailerVideoUrl: trailerVideoUrl
      properties:
        badge:
          $ref: '#/components/schemas/Offering_badge'
        contentId:
          description: The identifier for a specific version of a course
          minLength: 1
          title: contentId
          type: string
        createDefaultChannels:
          default: false
          title: createDefaultChannels
          type: boolean
        description:
          minLength: 1
          title: description
          type: string
        earlyCloseOffDate:
          format: date-time
          title: earlyCloseOffDate
          type: string
        end:
          format: date-time
          title: end
          type: string
        hasEarlyCloseOff:
          title: hasEarlyCloseOff
          type: boolean
        identifier:
          title: identifier
          type: string
        isReadonly:
          title: isReadonly
          type: boolean
        metadata:
          $ref: '#/components/schemas/Offering_metadata'
        name:
          minLength: 1
          title: name
          type: string
        rootContentId:
          description: Every time a course is republished it's assigned a new contentId.
            rootContentId is the first original contentId associated with a course.
          title: rootContentId
          type: string
        start:
          format: date-time
          title: start
          type: string
        trailerVideoUrl:
          minLength: 1
          title: trailerVideoUrl
          type: string
        useRelativeDates:
          default: false
          title: useRelativeDates
          type: boolean
      required:
      - start
      title: OfferingRequired
      type: object
    OfferingResponse:
      properties:
        contentId:
          minLength: 1
          type: string
        coverImageUrl:
          minLength: 1
          type: string
        currency:
          type: string
        description:
          minLength: 1
          type: string
        earlyCloseOffDate:
          format: date-time
          type: string
        end:
          format: date-time
          type: string
        enrollmentLimit:
          type: number
        hasEarlyCloseOff:
          type: boolean
        id:
          type: string
        identifier:
          type: string
        isReadonly:
          type: boolean
        name:
          minLength: 1
          type: string
        price:
          type: number
        start:
          format: date-time
          type: string
        tasksEnabled:
          type: boolean
        trailerVideoUrl:
          minLength: 1
          type: string
      type: object
    OfferingUser:
      additionalProperties: false
      example:
        firstName: firstName
        lastName: lastName
        isReadonly: false
        metadata:
          tags:
          - tags
          - tags
        sendInvite: true
        profile:
          displayName: displayName
        isFacilitator: false
        personId: personId
        sendNotificationEmail: true
        isMarker: false
        email: email
      properties:
        email:
          minLength: 1
          title: email
          type: string
        firstName:
          minLength: 1
          title: firstName
          type: string
        isFacilitator:
          default: false
          title: isFacilitator
          type: boolean
        isMarker:
          default: false
          title: isMarker
          type: boolean
        isReadonly:
          default: false
          title: isReadonly
          type: boolean
        lastName:
          minLength: 1
          title: lastName
          type: string
        metadata:
          $ref: '#/components/schemas/UserMetadata'
        personId:
          minLength: 1
          title: personId
          type: string
        profile:
          $ref: '#/components/schemas/UserProfileRequest'
        sendInvite:
          default: true
          title: sendInvite
          type: boolean
        sendNotificationEmail:
          default: true
          title: sendNotificationEmail
          type: boolean
      required:
      - email
      title: OfferingUser
      type: object
    OfferingUserAddResponse:
      example:
        firstName: firstName
        lastName: lastName
        isReadonly: false
        metadata:
          tags:
          - tags
          - tags
        sendInvite: true
        profile:
          displayName: displayName
        isFacilitator: false
        personId: personId
        sendNotificationEmail: true
        invite:
          url: url
        isMarker: false
        email: email
      properties:
        email:
          minLength: 1
          title: email
          type: string
        firstName:
          minLength: 1
          title: firstName
          type: string
        invite:
          $ref: '#/components/schemas/Invite'
        isFacilitator:
          default: false
          title: isFacilitator
          type: boolean
        isMarker:
          default: false
          title: isMarker
          type: boolean
        isReadonly:
          default: false
          title: isReadonly
          type: boolean
        lastName:
          minLength: 1
          title: lastName
          type: string
        metadata:
          $ref: '#/components/schemas/UserMetadata'
        personId:
          minLength: 1
          title: personId
          type: string
        profile:
          $ref: '#/components/schemas/UserProfileRequest'
        sendInvite:
          default: true
          title: sendInvite
          type: boolean
        sendNotificationEmail:
          default: true
          title: sendNotificationEmail
          type: boolean
      title: OfferingUserAddResponse
      type: object
    OfferingUserResponse:
      example:
        lastName: lastName
        isReadonly: false
        avatarUrl: avatarUrl
        profile:
          displayName: displayName
          mobile: mobile
        evaluates:
        - evaluates
        - evaluates
        marks:
        - marks
        - marks
        evaluatedBy:
        - evaluatedBy
        - evaluatedBy
        firstName: firstName
        isFacilitator: false
        personId: personId
        id: id
        markedBy:
        - markedBy
        - markedBy
        isMarker: false
        email: email
      properties:
        avatarUrl:
          title: avatarUrl
          type: string
        email:
          format: email
          minLength: 1
          title: email
          type: string
        evaluatedBy:
          items:
            type: string
          title: evaluatedBy
          type: array
        evaluates:
          items:
            type: string
          title: evaluates
          type: array
        firstName:
          minLength: 1
          title: firstName
          type: string
        id:
          title: id
          type: string
        isFacilitator:
          default: false
          title: isFacilitator
          type: boolean
        isMarker:
          default: false
          title: isMarker
          type: boolean
        isReadonly:
          default: false
          title: isReadonly
          type: boolean
        lastName:
          minLength: 1
          title: lastName
          type: string
        markedBy:
          items:
            type: string
          title: markedBy
          type: array
        marks:
          items:
            type: string
          title: marks
          type: array
        personId:
          minLength: 1
          title: personId
          type: string
        profile:
          $ref: '#/components/schemas/UserProfile'
      title: OfferingUserResponse
      type: object
    OpenBadgeClass:
      properties:
        criteria:
          $ref: '#/components/schemas/OpenBadgeClass_criteria'
        description:
          title: description
          type: string
        id:
          title: id
          type: string
        image:
          title: image
          type: string
        issuer:
          title: issuer
          type: string
        name:
          title: name
          type: string
        type:
          title: type
          type: string
      title: OpenBadgeClass
      type: object
    OrgRequest:
      properties:
        id:
          type: string
        name:
          type: string
      required:
      - name
      type: object
    OrgResponse:
      example:
        name: name
        id: id
      properties:
        id:
          title: id
          type: string
        name:
          title: name
          type: string
      title: OrgResponse
      type: object
    PortfolioActivations:
      example:
        learnersCount: 0.8008281904610115
        metadata:
          rootContentId: rootContentId
        contentId: contentId
        name: name
        start: 2000-01-23T04:56:07.000+00:00
        end: 2000-01-23T04:56:07.000+00:00
        id: id
        info: info
      properties:
        contentId:
          title: contentId
          type: string
        end:
          format: date-time
          title: end
          type: string
        id:
          title: id
          type: string
        info:
          title: info
          type: string
        learnersCount:
          description: "number of learners in the offering, excluding facilitators\
            \ and coaches"
          title: learnersCount
          type: number
        metadata:
          $ref: '#/components/schemas/ActivationResponse_metadata'
        name:
          title: name
          type: string
        start:
          format: date-time
          title: start
          type: string
      title: PortfolioActivations
      type: object
    PortfolioLicenseResponse:
      properties:
        licenses:
          items:
            type: string
          type: array
        owner:
          type: string
      type: object
    PortfolioMetadata:
      additionalProperties: false
      properties:
        category:
          type: string
        level:
          type: string
        tags:
          items:
            type: string
          type: array
        topic:
          type: string
      type: object
    PulseAnswer:
      example:
        spatialAnswer:
        - value: 6.0274563
          option: option
        - value: 6.0274563
          option: option
        multiChoiceAnswer:
        - value: true
          option: option
        - value: true
          option: option
        textAnswer: textAnswer
      properties:
        multiChoiceAnswer:
          items:
            $ref: '#/components/schemas/PulseMCQOption'
          title: multiChoiceAnswer
          type: array
        spatialAnswer:
          items:
            $ref: '#/components/schemas/PulseSpatialOption'
          title: spatialAnswer
          type: array
        textAnswer:
          title: textAnswer
          type: string
      title: Answer
      type: object
    PulseMCQOption:
      example:
        value: true
        option: option
      properties:
        option:
          title: option
          type: string
        value:
          title: value
          type: boolean
      title: MultiChoiceOption
      type: object
    PulseResponse:
      example:
        pulseRunStart: 2000-01-23T04:56:07.000+00:00
        pulseBaseId: pulseBaseId
        learnerId: learnerId
        pulseRunDurationMinutes: 0
        pulseInstanceId: pulseInstanceId
        pulseQuestion: pulseQuestion
        response:
          spatialAnswer:
          - value: 6.0274563
            option: option
          - value: 6.0274563
            option: option
          multiChoiceAnswer:
          - value: true
            option: option
          - value: true
            option: option
          textAnswer: textAnswer
        responseTime: 2000-01-23T04:56:07.000+00:00
        learnerFirstName: learnerFirstName
        learnerLastName: learnerLastName
        pulseType: pulseType
      properties:
        learnerFirstName:
          title: learnerFirstName
          type: string
        learnerId:
          title: learnerId
          type: string
        learnerLastName:
          title: learnerLastName
          type: string
        pulseBaseId:
          title: pulseBaseId
          type: string
        pulseInstanceId:
          title: pulseInstanceId
          type: string
        pulseQuestion:
          title: pulseQuestion
          type: string
        pulseRunDurationMinutes:
          title: pulseRunDurationMinutes
          type: integer
        pulseRunStart:
          format: date-time
          title: pulseRunStart
          type: string
        pulseType:
          title: pulseType
          type: string
        response:
          $ref: '#/components/schemas/PulseAnswer'
        responseTime:
          format: date-time
          title: responseTime
          type: string
      title: Pulse
      type: object
    PulseSpatialOption:
      example:
        value: 6.0274563
        option: option
      properties:
        option:
          title: option
          type: string
        value:
          format: float
          title: value
          type: number
      title: SpatialOption
      type: object
    QuizMarkResponse:
      example:
        learnerEmail: learnerEmail
        quizId: quizId
        lastAttemptAt: 2000-01-23T04:56:07.000+00:00
        learnerFullname: learnerFullname
        mark: mark
        quizTitle: quizTitle
        attempts: 0
        learnerPersonId: learnerPersonId
      properties:
        attempts:
          format: int32
          title: attempts
          type: integer
        lastAttemptAt:
          format: date-time
          title: lastAttemptAt
          type: string
        learnerEmail:
          title: learnerEmail
          type: string
        learnerFullname:
          title: learnerFullname
          type: string
        learnerPersonId:
          title: learnerPersonId
          type: string
        mark:
          title: mark
          type: string
        quizId:
          title: quizId
          type: string
        quizTitle:
          title: quizTitle
          type: string
      title: QuizMark
      type: object
    RevokedResponse:
      properties:
        badgeId:
          type: string
        badgeUrl:
          type: string
        revocationReason:
          type: string
        revoked:
          type: boolean
      type: object
    SocialNotesResponse:
      example:
        firstName: firstName
        lastName: lastName
        social-note-content: social-note-content
        personId: personId
        pageId: pageId
        userId: userId
        email: email
        social-note-paragraphId: social-note-paragraphId
      properties:
        email:
          title: email
          type: string
        firstName:
          title: firstName
          type: string
        lastName:
          title: lastName
          type: string
        pageId:
          title: pageId
          type: string
        personId:
          title: personId
          type: string
        social-note-content:
          title: social-note-content
          type: string
        social-note-paragraphId:
          title: social-note-paragraphId
          type: string
        userId:
          title: userId
          type: string
      title: SocialNotesResponse
      type: object
    SubmissionMarkResponse:
      example:
        assessmentItemName: assessmentItemName
        marks:
        - feedback: feedback
          createdAt: 2000-01-23T04:56:07.000+00:00
          markFeedback:
          - feedback: feedback
            createdAt: 2000-01-23T04:56:07.000+00:00
            feedbackBy: feedbackBy
            id: id
            markerId: markerId
            mark: mark
          - feedback: feedback
            createdAt: 2000-01-23T04:56:07.000+00:00
            feedbackBy: feedbackBy
            id: id
            markerId: markerId
            mark: mark
          id: id
          markedBy: markedBy
          markerId: markerId
          mark: mark
        - feedback: feedback
          createdAt: 2000-01-23T04:56:07.000+00:00
          markFeedback:
          - feedback: feedback
            createdAt: 2000-01-23T04:56:07.000+00:00
            feedbackBy: feedbackBy
            id: id
            markerId: markerId
            mark: mark
          - feedback: feedback
            createdAt: 2000-01-23T04:56:07.000+00:00
            feedbackBy: feedbackBy
            id: id
            markerId: markerId
            mark: mark
          id: id
          markedBy: markedBy
          markerId: markerId
          mark: mark
        learnerPersonId: learnerPersonId
        courseName: courseName
        assessmentItemDetails: assessmentItemDetails
        learnerEmail: learnerEmail
        submissionDateTime: 2000-01-23T04:56:07.000+00:00
        learnerFirstName: learnerFirstName
        learnerLastName: learnerLastName
        files:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          filename: filename
          size: 0
          mimetype: mimetype
          id: id
          url: url
        - createdAt: 2000-01-23T04:56:07.000+00:00
          filename: filename
          size: 0
          mimetype: mimetype
          id: id
          url: url
        html: html
        assessmentId: assessmentId
        status: status
      properties:
        assessmentId:
          title: assessmentId
          type: string
        assessmentItemDetails:
          title: assessmentItemDetails
          type: string
        assessmentItemName:
          title: assessmentItemName
          type: string
        courseName:
          title: courseName
          type: string
        files:
          items:
            $ref: '#/components/schemas/Document'
          title: files
          type: array
        html:
          title: html
          type: string
        learnerEmail:
          title: learnerEmail
          type: string
        learnerFirstName:
          title: learnerFirstName
          type: string
        learnerLastName:
          title: learnerLastName
          type: string
        learnerPersonId:
          title: learnerPersonId
          type: string
        marks:
          items:
            $ref: '#/components/schemas/Mark'
          title: marks
          type: array
        status:
          title: status
          type: string
        submissionDateTime:
          format: date-time
          title: submissionDateTime
          type: string
      title: SubmissionMark
    SuspendedRequest:
      example:
        suspended: true
      properties:
        suspended:
          title: suspended
          type: boolean
      title: SuspendedRequest
      type: object
    ThemeResponse:
      example:
        filter: filter
        numberOfQuestions: numberOfQuestions
      properties:
        filter:
          title: filter
          type: string
        numberOfQuestions:
          title: numberOfQuestions
          type: string
      title: ThemeResponse
      type: object
    TransferRequest:
      example:
        sendInvite: true
        fromOfferingId: fromOfferingId
        toOfferingId: toOfferingId
      properties:
        fromOfferingId:
          title: fromOfferingId
          type: string
        sendInvite:
          title: sendInvite
          type: boolean
        toOfferingId:
          title: toOfferingId
          type: string
      title: TransferRequest
      type: object
    UnitReactionsAnalyticsResponse:
      example:
        feedback:
          thumbs-up: 6.027456183070403
          thumbs-down: 0.8008281904610115
        pageId: true
      properties:
        feedback:
          $ref: '#/components/schemas/UnitReactionsFeedback'
        pageId:
          title: pageId
          type: boolean
      title: UnitReactionsAnalyticsResponse
      type: object
    UnitReactionsFeedback:
      example:
        thumbs-up: 6.027456183070403
        thumbs-down: 0.8008281904610115
      properties:
        thumbs-down:
          title: thumbs-down
          type: number
        thumbs-up:
          title: thumbs-up
          type: number
      title: UnitReactionsFeedback
      type: object
    User:
      additionalProperties: false
      example:
        firstName: firstName
        lastName: lastName
        metadata:
          tags:
          - tags
          - tags
        sendInvite: true
        profile:
          displayName: displayName
        personId: personId
        email: email
      properties:
        email:
          format: email
          minLength: 1
          title: email
          type: string
        firstName:
          minLength: 1
          title: firstName
          type: string
        lastName:
          minLength: 1
          title: lastName
          type: string
        metadata:
          $ref: '#/components/schemas/UserMetadata'
        personId:
          minLength: 1
          title: personId
          type: string
        profile:
          $ref: '#/components/schemas/UserProfileRequest'
        sendInvite:
          default: true
          title: sendInvite
          type: boolean
      title: User
      type: object
    UserBadge:
      example:
        awardedAt: 2000-01-23T04:56:07.000+00:00
        openBadge: ""
        badgeExpiry:
          expires: true
          expirationDate: 2000-01-23T04:56:07.000+00:00
        badgeUrl: badgeUrl
        criterias: ""
        description: description
        offeringId: offeringId
        title: title
      properties:
        awardedAt:
          format: date-time
          title: awardedAt
          type: string
        badgeExpiry:
          $ref: '#/components/schemas/UserBadge_badgeExpiry'
        badgeUrl:
          title: badgeUrl
          type: string
        criterias:
          allOf:
          - $ref: '#/components/schemas/Criteria'
          title: criterias
        description:
          title: description
          type: string
        offeringId:
          title: offeringId
          type: string
        openBadge:
          allOf:
          - $ref: '#/components/schemas/OpenBadgeClass'
          title: openBadge
        title:
          title: title
          type: string
      title: UserBadge
      type: object
    UserMetadata:
      additionalProperties: false
      example:
        tags:
        - tags
        - tags
      properties:
        tags:
          items:
            type: string
          title: tags
          type: array
      title: UserMetadata
      type: object
    UserPermission:
      example:
        isBuilder: true
        name: name
        isReviewer: true
        email: email
      properties:
        email:
          title: email
          type: string
        isBuilder:
          title: isBuilder
          type: boolean
        isReviewer:
          title: isReviewer
          type: boolean
        name:
          title: name
          type: string
      title: User
    UserProfile:
      example:
        displayName: displayName
        mobile: mobile
      properties:
        displayName:
          title: displayName
          type: string
        mobile:
          title: mobile
          type: string
      title: UserProfile
      type: object
    UserProfileRequest:
      example:
        displayName: displayName
      properties:
        displayName:
          title: displayName
          type: string
      title: UserProfileRequest
      type: object
    UserResponse:
      example:
        firstName: firstName
        lastName: lastName
        metadata:
          tags:
          - tags
          - tags
        firstAccessAt: 2000-01-23T04:56:07.000+00:00
        avatarUrl: avatarUrl
        profile:
          displayName: displayName
          mobile: mobile
        personId: personId
        id: id
        invite:
          url: url
        email: email
        lastAccessAt: 2000-01-23T04:56:07.000+00:00
      properties:
        avatarUrl:
          title: avatarUrl
          type: string
        email:
          format: email
          minLength: 1
          title: email
          type: string
        firstAccessAt:
          format: date-time
          title: firstAccessAt
          type: string
        firstName:
          minLength: 1
          title: firstName
          type: string
        id:
          title: id
          type: string
        invite:
          $ref: '#/components/schemas/Invite'
        lastAccessAt:
          format: date-time
          title: lastAccessAt
          type: string
        lastName:
          minLength: 1
          title: lastName
          type: string
        metadata:
          $ref: '#/components/schemas/UserMetadata'
        personId:
          minLength: 1
          title: personId
          type: string
        profile:
          $ref: '#/components/schemas/UserProfile'
      title: UserResponse
      type: object
    httpPost:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        attachments:
        - size: 0
          mimetype: mimetype
          id: id
          url: url
        - size: 0
          mimetype: mimetype
          id: id
          url: url
        moderation:
          reason: reason
          moderator:
            firstName: firstName
            lastName: lastName
            avatarUrl: avatarUrl
            id: id
          isMuted: true
        isFacilitatorPost: true
        id: id
        title: title
        content: content
        email: email
      properties:
        attachments:
          items:
            $ref: '#/components/schemas/DocumentResponse'
          title: attachments
          type: array
        content:
          title: content
          type: string
        createdAt:
          format: date-time
          title: createdAt
          type: string
        email:
          title: email
          type: string
        id:
          title: id
          type: string
        isFacilitatorPost:
          title: isFacilitatorPost
          type: boolean
        moderation:
          $ref: '#/components/schemas/Moderation'
        title:
          title: title
          type: string
      title: httpPost
      type: object
    _courses__contentId__metadata_category_put_request:
      additionalProperties: false
      properties:
        category:
          title: category
          type: string
      title: _courses__contentId__metadata_category_put_request
      type: object
    _courses__contentId__metadata_level_put_request:
      additionalProperties: false
      properties:
        level:
          title: level
          type: string
      title: _courses__contentId__metadata_level_put_request
      type: object
    _courses__contentId__metadata_tags_put_request:
      additionalProperties: false
      properties:
        tags:
          items:
            type: string
          title: tags
          type: array
      title: _courses__contentId__metadata_tags_put_request
      type: object
    _courses__contentId__metadata_topic_put_request:
      additionalProperties: false
      properties:
        topic:
          title: topic
          type: string
      title: _courses__contentId__metadata_topic_put_request
      type: object
    permission_to_be_granted_to_the_user_:
      properties:
        isBuilder:
          default: true
          title: isBuilder
          type: boolean
        isReviewer:
          default: false
          title: isReviewer
          type: boolean
      title: permission to be granted to the user.
      type: object
    _courses__rootContentId__permissions__userEmail__post_201_response:
      example:
        contentId: contentId
      properties:
        contentId:
          title: contentId
          type: string
      title: _courses__rootContentId__permissions__userEmail__post_201_response
      type: object
    _offerings__offeringId__analytics_pulses_responses_get_responseTime_parameter:
      oneOf:
      - minLength: 1
        type: string
      - items:
          type: string
        type: array
    _offerings__offeringId__assessments__assessmentId___userEmail__patch_request:
      additionalProperties: false
      properties:
        dueDate:
          format: date-time
          title: dueDate
          type: string
      title: _offerings__offeringId__assessments__assessmentId___userEmail__patch_request
      type: object
    _offerings__offeringId__channels__channelId__learners_post_request:
      additionalProperties: false
      properties:
        email:
          title: email
          type: string
      title: _offerings__offeringId__channels__channelId__learners_post_request
      type: object
    _offerings__offeringId__groups__groupId__learners_post_request:
      properties:
        email:
          title: email
          type: string
      title: _offerings__offeringId__groups__groupId__learners_post_request
      type: object
    _offerings__offeringId__users_post_207_response_inner:
      oneOf:
      - $ref: '#/components/schemas/OfferingUserAddResponse'
      - $ref: '#/components/schemas/Error'
      title: _offerings__offeringId__users_post_207_response_inner
    _users_all_progress_get_200_response_data:
      example:
        progress:
        - firstName: firstName
          lastName: lastName
          personId: personId
          id: id
          offerings:
          - completion: completion
            id: id
          - completion: completion
            id: id
          email: email
        - firstName: firstName
          lastName: lastName
          personId: personId
          id: id
          offerings:
          - completion: completion
            id: id
          - completion: completion
            id: id
          email: email
      properties:
        progress:
          items:
            $ref: '#/components/schemas/LearnerResponse'
          title: Learners
          type: array
      title: _users_all_progress_get_200_response_data
    _users_all_progress_get_200_response:
      example:
        data:
          progress:
          - firstName: firstName
            lastName: lastName
            personId: personId
            id: id
            offerings:
            - completion: completion
              id: id
            - completion: completion
              id: id
            email: email
          - firstName: firstName
            lastName: lastName
            personId: personId
            id: id
            offerings:
            - completion: completion
              id: id
            - completion: completion
              id: id
            email: email
        top: 0
      properties:
        data:
          $ref: '#/components/schemas/_users_all_progress_get_200_response_data'
        top:
          title: top
          type: integer
      title: _users_all_progress_get_200_response
    _users__userEmail__offerings__offeringId__progress_get_200_response:
      example:
        completion: completion
        firstName: firstName
        lastName: lastName
        id: id
        email: email
      properties:
        completion:
          title: completion
          type: string
        email:
          title: email
          type: string
        firstName:
          title: firstName
          type: string
        id:
          title: id
          type: string
        lastName:
          title: lastName
          type: string
      title: _users__userEmail__offerings__offeringId__progress_get_200_response
      type: object
    ActivationResponse_metadata:
      example:
        rootContentId: rootContentId
      properties:
        rootContentId:
          title: rootContentId
          type: string
      title: ActivationResponse_metadata
      type: object
    Channel_group:
      example:
        autoAssign: true
      properties:
        autoAssign:
          title: autoAssign
          type: boolean
      title: Channel_group
      type: object
    CourseMetaResponse_metadata:
      example:
        learning_outcomes:
        - description: description
          id: id
        - description: description
          id: id
        level: level
        topic: topic
        category: category
        rootContentId: rootContentId
        tags:
        - tags
        - tags
      properties:
        category:
          title: category
          type: string
        learning_outcomes:
          items:
            $ref: '#/components/schemas/LearningOutcomes'
          title: learning_outcomes
          type: array
        level:
          title: level
          type: string
        rootContentId:
          title: rootContentId
          type: string
        tags:
          items:
            type: string
          title: tags
          type: array
        topic:
          title: topic
          type: string
      title: CourseMetaResponse_metadata
    CourseResponse_metadata:
      example:
        learning_outcomes:
        - description: description
          id: id
        - description: description
          id: id
      properties:
        learning_outcomes:
          items:
            $ref: '#/components/schemas/LearningOutcomes'
          title: learning_outcomes
          type: array
      title: CourseResponse_metadata
    Error_error:
      example:
        name: name
        details: details
      properties:
        details:
          title: details
          type: string
        name:
          title: name
          type: string
      title: Error_error
      type: object
    Offering_badge:
      additionalProperties: false
      example:
        badgeExpiry:
          expires: true
          timeframeAmount: 0.8008281904610115
          expiryType: date
          timeframeUnit: days
          expirationDate: 2000-01-23T04:56:07.000+00:00
        requiresApproval: true
        description: description
        title: title
      properties:
        badgeExpiry:
          $ref: '#/components/schemas/BadgeExpiry'
        description:
          title: description
          type: string
        requiresApproval:
          title: requiresApproval
          type: boolean
        title:
          title: title
          type: string
      title: Offering_badge
      type: object
    Offering_metadata:
      additionalProperties: false
      example:
        level: level
        topic: topic
        category: category
        tags:
        - tags
        - tags
      properties:
        category:
          title: category
          type: string
        level:
          title: level
          type: string
        tags:
          items:
            type: string
          title: tags
          type: array
        topic:
          title: topic
          type: string
      title: Offering_metadata
      type: object
    OpenBadgeClass_criteria:
      additionalProperties: false
      properties:
        narrative:
          title: narrative
          type: string
      title: OpenBadgeClass_criteria
      type: object
    UserBadge_badgeExpiry:
      example:
        expires: true
        expirationDate: 2000-01-23T04:56:07.000+00:00
      properties:
        expirationDate:
          format: date-time
          title: expirationDate
          type: string
        expires:
          title: expires
          type: boolean
      title: UserBadge_badgeExpiry
      type: object
  securitySchemes:
    Authorization:
      in: header
      name: Authorization
      type: apiKey
      x-apikeyInfoFunc: openapi_server.controllers.security_controller.info_from_Authorization
