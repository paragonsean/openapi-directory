/*
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BadgeExpiry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:36.016710-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BadgeExpiry {
  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private OffsetDateTime expirationDate;

  public static final String SERIALIZED_NAME_EXPIRES = "expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  private Boolean expires;

  /**
   * Gets or Sets expiryType
   */
  @JsonAdapter(ExpiryTypeEnum.Adapter.class)
  public enum ExpiryTypeEnum {
    DATE("date"),
    
    TIMEFRAME("timeframe");

    private String value;

    ExpiryTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExpiryTypeEnum fromValue(String value) {
      for (ExpiryTypeEnum b : ExpiryTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExpiryTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExpiryTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExpiryTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExpiryTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExpiryTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPIRY_TYPE = "expiryType";
  @SerializedName(SERIALIZED_NAME_EXPIRY_TYPE)
  private ExpiryTypeEnum expiryType;

  public static final String SERIALIZED_NAME_TIMEFRAME_AMOUNT = "timeframeAmount";
  @SerializedName(SERIALIZED_NAME_TIMEFRAME_AMOUNT)
  private BigDecimal timeframeAmount;

  /**
   * Gets or Sets timeframeUnit
   */
  @JsonAdapter(TimeframeUnitEnum.Adapter.class)
  public enum TimeframeUnitEnum {
    DAYS("days"),
    
    MONTHS("months"),
    
    YEARS("years");

    private String value;

    TimeframeUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TimeframeUnitEnum fromValue(String value) {
      for (TimeframeUnitEnum b : TimeframeUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TimeframeUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TimeframeUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TimeframeUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TimeframeUnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TimeframeUnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIMEFRAME_UNIT = "timeframeUnit";
  @SerializedName(SERIALIZED_NAME_TIMEFRAME_UNIT)
  private TimeframeUnitEnum timeframeUnit;

  public BadgeExpiry() {
  }

  public BadgeExpiry expirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * Get expirationDate
   * @return expirationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
  }


  public BadgeExpiry expires(Boolean expires) {
    this.expires = expires;
    return this;
  }

  /**
   * Get expires
   * @return expires
   */
  @javax.annotation.Nullable
  public Boolean getExpires() {
    return expires;
  }

  public void setExpires(Boolean expires) {
    this.expires = expires;
  }


  public BadgeExpiry expiryType(ExpiryTypeEnum expiryType) {
    this.expiryType = expiryType;
    return this;
  }

  /**
   * Get expiryType
   * @return expiryType
   */
  @javax.annotation.Nullable
  public ExpiryTypeEnum getExpiryType() {
    return expiryType;
  }

  public void setExpiryType(ExpiryTypeEnum expiryType) {
    this.expiryType = expiryType;
  }


  public BadgeExpiry timeframeAmount(BigDecimal timeframeAmount) {
    this.timeframeAmount = timeframeAmount;
    return this;
  }

  /**
   * Get timeframeAmount
   * @return timeframeAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getTimeframeAmount() {
    return timeframeAmount;
  }

  public void setTimeframeAmount(BigDecimal timeframeAmount) {
    this.timeframeAmount = timeframeAmount;
  }


  public BadgeExpiry timeframeUnit(TimeframeUnitEnum timeframeUnit) {
    this.timeframeUnit = timeframeUnit;
    return this;
  }

  /**
   * Get timeframeUnit
   * @return timeframeUnit
   */
  @javax.annotation.Nullable
  public TimeframeUnitEnum getTimeframeUnit() {
    return timeframeUnit;
  }

  public void setTimeframeUnit(TimeframeUnitEnum timeframeUnit) {
    this.timeframeUnit = timeframeUnit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BadgeExpiry badgeExpiry = (BadgeExpiry) o;
    return Objects.equals(this.expirationDate, badgeExpiry.expirationDate) &&
        Objects.equals(this.expires, badgeExpiry.expires) &&
        Objects.equals(this.expiryType, badgeExpiry.expiryType) &&
        Objects.equals(this.timeframeAmount, badgeExpiry.timeframeAmount) &&
        Objects.equals(this.timeframeUnit, badgeExpiry.timeframeUnit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expirationDate, expires, expiryType, timeframeAmount, timeframeUnit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BadgeExpiry {\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    expiryType: ").append(toIndentedString(expiryType)).append("\n");
    sb.append("    timeframeAmount: ").append(toIndentedString(timeframeAmount)).append("\n");
    sb.append("    timeframeUnit: ").append(toIndentedString(timeframeUnit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expirationDate");
    openapiFields.add("expires");
    openapiFields.add("expiryType");
    openapiFields.add("timeframeAmount");
    openapiFields.add("timeframeUnit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BadgeExpiry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BadgeExpiry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BadgeExpiry is not found in the empty JSON string", BadgeExpiry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BadgeExpiry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BadgeExpiry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("expiryType") != null && !jsonObj.get("expiryType").isJsonNull()) && !jsonObj.get("expiryType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiryType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiryType").toString()));
      }
      // validate the optional field `expiryType`
      if (jsonObj.get("expiryType") != null && !jsonObj.get("expiryType").isJsonNull()) {
        ExpiryTypeEnum.validateJsonElement(jsonObj.get("expiryType"));
      }
      if ((jsonObj.get("timeframeUnit") != null && !jsonObj.get("timeframeUnit").isJsonNull()) && !jsonObj.get("timeframeUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeframeUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeframeUnit").toString()));
      }
      // validate the optional field `timeframeUnit`
      if (jsonObj.get("timeframeUnit") != null && !jsonObj.get("timeframeUnit").isJsonNull()) {
        TimeframeUnitEnum.validateJsonElement(jsonObj.get("timeframeUnit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BadgeExpiry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BadgeExpiry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BadgeExpiry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BadgeExpiry.class));

       return (TypeAdapter<T>) new TypeAdapter<BadgeExpiry>() {
           @Override
           public void write(JsonWriter out, BadgeExpiry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BadgeExpiry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BadgeExpiry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BadgeExpiry
   * @throws IOException if the JSON string is invalid with respect to BadgeExpiry
   */
  public static BadgeExpiry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BadgeExpiry.class);
  }

  /**
   * Convert an instance of BadgeExpiry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

