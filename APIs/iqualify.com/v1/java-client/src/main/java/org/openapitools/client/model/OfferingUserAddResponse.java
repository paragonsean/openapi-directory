/*
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Invite;
import org.openapitools.client.model.UserMetadata;
import org.openapitools.client.model.UserProfileRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OfferingUserAddResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:36.016710-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OfferingUserAddResponse {
  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_INVITE = "invite";
  @SerializedName(SERIALIZED_NAME_INVITE)
  private Invite invite;

  public static final String SERIALIZED_NAME_IS_FACILITATOR = "isFacilitator";
  @SerializedName(SERIALIZED_NAME_IS_FACILITATOR)
  private Boolean isFacilitator = false;

  public static final String SERIALIZED_NAME_IS_MARKER = "isMarker";
  @SerializedName(SERIALIZED_NAME_IS_MARKER)
  private Boolean isMarker = false;

  public static final String SERIALIZED_NAME_IS_READONLY = "isReadonly";
  @SerializedName(SERIALIZED_NAME_IS_READONLY)
  private Boolean isReadonly = false;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private UserMetadata metadata;

  public static final String SERIALIZED_NAME_PERSON_ID = "personId";
  @SerializedName(SERIALIZED_NAME_PERSON_ID)
  private String personId;

  public static final String SERIALIZED_NAME_PROFILE = "profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  private UserProfileRequest profile;

  public static final String SERIALIZED_NAME_SEND_INVITE = "sendInvite";
  @SerializedName(SERIALIZED_NAME_SEND_INVITE)
  private Boolean sendInvite = true;

  public static final String SERIALIZED_NAME_SEND_NOTIFICATION_EMAIL = "sendNotificationEmail";
  @SerializedName(SERIALIZED_NAME_SEND_NOTIFICATION_EMAIL)
  private Boolean sendNotificationEmail = true;

  public OfferingUserAddResponse() {
  }

  public OfferingUserAddResponse email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public OfferingUserAddResponse firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public OfferingUserAddResponse invite(Invite invite) {
    this.invite = invite;
    return this;
  }

  /**
   * Get invite
   * @return invite
   */
  @javax.annotation.Nullable
  public Invite getInvite() {
    return invite;
  }

  public void setInvite(Invite invite) {
    this.invite = invite;
  }


  public OfferingUserAddResponse isFacilitator(Boolean isFacilitator) {
    this.isFacilitator = isFacilitator;
    return this;
  }

  /**
   * Get isFacilitator
   * @return isFacilitator
   */
  @javax.annotation.Nullable
  public Boolean getIsFacilitator() {
    return isFacilitator;
  }

  public void setIsFacilitator(Boolean isFacilitator) {
    this.isFacilitator = isFacilitator;
  }


  public OfferingUserAddResponse isMarker(Boolean isMarker) {
    this.isMarker = isMarker;
    return this;
  }

  /**
   * Get isMarker
   * @return isMarker
   */
  @javax.annotation.Nullable
  public Boolean getIsMarker() {
    return isMarker;
  }

  public void setIsMarker(Boolean isMarker) {
    this.isMarker = isMarker;
  }


  public OfferingUserAddResponse isReadonly(Boolean isReadonly) {
    this.isReadonly = isReadonly;
    return this;
  }

  /**
   * Get isReadonly
   * @return isReadonly
   */
  @javax.annotation.Nullable
  public Boolean getIsReadonly() {
    return isReadonly;
  }

  public void setIsReadonly(Boolean isReadonly) {
    this.isReadonly = isReadonly;
  }


  public OfferingUserAddResponse lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Get lastName
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public OfferingUserAddResponse metadata(UserMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public UserMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(UserMetadata metadata) {
    this.metadata = metadata;
  }


  public OfferingUserAddResponse personId(String personId) {
    this.personId = personId;
    return this;
  }

  /**
   * Get personId
   * @return personId
   */
  @javax.annotation.Nullable
  public String getPersonId() {
    return personId;
  }

  public void setPersonId(String personId) {
    this.personId = personId;
  }


  public OfferingUserAddResponse profile(UserProfileRequest profile) {
    this.profile = profile;
    return this;
  }

  /**
   * Get profile
   * @return profile
   */
  @javax.annotation.Nullable
  public UserProfileRequest getProfile() {
    return profile;
  }

  public void setProfile(UserProfileRequest profile) {
    this.profile = profile;
  }


  public OfferingUserAddResponse sendInvite(Boolean sendInvite) {
    this.sendInvite = sendInvite;
    return this;
  }

  /**
   * Get sendInvite
   * @return sendInvite
   */
  @javax.annotation.Nullable
  public Boolean getSendInvite() {
    return sendInvite;
  }

  public void setSendInvite(Boolean sendInvite) {
    this.sendInvite = sendInvite;
  }


  public OfferingUserAddResponse sendNotificationEmail(Boolean sendNotificationEmail) {
    this.sendNotificationEmail = sendNotificationEmail;
    return this;
  }

  /**
   * Get sendNotificationEmail
   * @return sendNotificationEmail
   */
  @javax.annotation.Nullable
  public Boolean getSendNotificationEmail() {
    return sendNotificationEmail;
  }

  public void setSendNotificationEmail(Boolean sendNotificationEmail) {
    this.sendNotificationEmail = sendNotificationEmail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OfferingUserAddResponse offeringUserAddResponse = (OfferingUserAddResponse) o;
    return Objects.equals(this.email, offeringUserAddResponse.email) &&
        Objects.equals(this.firstName, offeringUserAddResponse.firstName) &&
        Objects.equals(this.invite, offeringUserAddResponse.invite) &&
        Objects.equals(this.isFacilitator, offeringUserAddResponse.isFacilitator) &&
        Objects.equals(this.isMarker, offeringUserAddResponse.isMarker) &&
        Objects.equals(this.isReadonly, offeringUserAddResponse.isReadonly) &&
        Objects.equals(this.lastName, offeringUserAddResponse.lastName) &&
        Objects.equals(this.metadata, offeringUserAddResponse.metadata) &&
        Objects.equals(this.personId, offeringUserAddResponse.personId) &&
        Objects.equals(this.profile, offeringUserAddResponse.profile) &&
        Objects.equals(this.sendInvite, offeringUserAddResponse.sendInvite) &&
        Objects.equals(this.sendNotificationEmail, offeringUserAddResponse.sendNotificationEmail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, firstName, invite, isFacilitator, isMarker, isReadonly, lastName, metadata, personId, profile, sendInvite, sendNotificationEmail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OfferingUserAddResponse {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    invite: ").append(toIndentedString(invite)).append("\n");
    sb.append("    isFacilitator: ").append(toIndentedString(isFacilitator)).append("\n");
    sb.append("    isMarker: ").append(toIndentedString(isMarker)).append("\n");
    sb.append("    isReadonly: ").append(toIndentedString(isReadonly)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    personId: ").append(toIndentedString(personId)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    sendInvite: ").append(toIndentedString(sendInvite)).append("\n");
    sb.append("    sendNotificationEmail: ").append(toIndentedString(sendNotificationEmail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email");
    openapiFields.add("firstName");
    openapiFields.add("invite");
    openapiFields.add("isFacilitator");
    openapiFields.add("isMarker");
    openapiFields.add("isReadonly");
    openapiFields.add("lastName");
    openapiFields.add("metadata");
    openapiFields.add("personId");
    openapiFields.add("profile");
    openapiFields.add("sendInvite");
    openapiFields.add("sendNotificationEmail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OfferingUserAddResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OfferingUserAddResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OfferingUserAddResponse is not found in the empty JSON string", OfferingUserAddResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OfferingUserAddResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OfferingUserAddResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      // validate the optional field `invite`
      if (jsonObj.get("invite") != null && !jsonObj.get("invite").isJsonNull()) {
        Invite.validateJsonElement(jsonObj.get("invite"));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        UserMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
      if ((jsonObj.get("personId") != null && !jsonObj.get("personId").isJsonNull()) && !jsonObj.get("personId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personId").toString()));
      }
      // validate the optional field `profile`
      if (jsonObj.get("profile") != null && !jsonObj.get("profile").isJsonNull()) {
        UserProfileRequest.validateJsonElement(jsonObj.get("profile"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OfferingUserAddResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OfferingUserAddResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OfferingUserAddResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OfferingUserAddResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<OfferingUserAddResponse>() {
           @Override
           public void write(JsonWriter out, OfferingUserAddResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OfferingUserAddResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OfferingUserAddResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OfferingUserAddResponse
   * @throws IOException if the JSON string is invalid with respect to OfferingUserAddResponse
   */
  public static OfferingUserAddResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OfferingUserAddResponse.class);
  }

  /**
   * Convert an instance of OfferingUserAddResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

