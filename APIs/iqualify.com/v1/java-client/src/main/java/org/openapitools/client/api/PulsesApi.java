/*
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.OfferingsOfferingIdAnalyticsPulsesResponsesGetResponseTimeParameter;
import org.openapitools.client.model.PulseResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PulsesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PulsesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PulsesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for offeringsOfferingIdAnalyticsPulsesGet
     * @param offeringId offering&#39;s id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pulses&#39; ids </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdAnalyticsPulsesGetCall(String offeringId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/analytics/pulses"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdAnalyticsPulsesGetValidateBeforeCall(String offeringId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAnalyticsPulsesGet(Async)");
        }

        return offeringsOfferingIdAnalyticsPulsesGetCall(offeringId, _callback);

    }

    /**
     * Find all pulse IDs in the specified offering
     * Responds with the IDs of all pulses that learners have responded to in a specified offering.
     * @param offeringId offering&#39;s id (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pulses&#39; ids </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<String> offeringsOfferingIdAnalyticsPulsesGet(String offeringId) throws ApiException {
        ApiResponse<List<String>> localVarResp = offeringsOfferingIdAnalyticsPulsesGetWithHttpInfo(offeringId);
        return localVarResp.getData();
    }

    /**
     * Find all pulse IDs in the specified offering
     * Responds with the IDs of all pulses that learners have responded to in a specified offering.
     * @param offeringId offering&#39;s id (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pulses&#39; ids </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> offeringsOfferingIdAnalyticsPulsesGetWithHttpInfo(String offeringId) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdAnalyticsPulsesGetValidateBeforeCall(offeringId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find all pulse IDs in the specified offering (asynchronously)
     * Responds with the IDs of all pulses that learners have responded to in a specified offering.
     * @param offeringId offering&#39;s id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pulses&#39; ids </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdAnalyticsPulsesGetAsync(String offeringId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdAnalyticsPulsesGetValidateBeforeCall(offeringId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for offeringsOfferingIdAnalyticsPulsesPulseIdResponsesGet
     * @param offeringId offering&#39;s id (required)
     * @param pulseId pulse&#39;s base id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pulse data matching pulseId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdAnalyticsPulsesPulseIdResponsesGetCall(String offeringId, String pulseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/analytics/pulses/{pulseId}/responses"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()))
            .replace("{" + "pulseId" + "}", localVarApiClient.escapeString(pulseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdAnalyticsPulsesPulseIdResponsesGetValidateBeforeCall(String offeringId, String pulseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAnalyticsPulsesPulseIdResponsesGet(Async)");
        }

        // verify the required parameter 'pulseId' is set
        if (pulseId == null) {
            throw new ApiException("Missing the required parameter 'pulseId' when calling offeringsOfferingIdAnalyticsPulsesPulseIdResponsesGet(Async)");
        }

        return offeringsOfferingIdAnalyticsPulsesPulseIdResponsesGetCall(offeringId, pulseId, _callback);

    }

    /**
     * Find pulses by offeringId and pulseId
     * Responds with pulse&#39;s responses, matching the pulseId, in an offering matching the offeringId.
     * @param offeringId offering&#39;s id (required)
     * @param pulseId pulse&#39;s base id (required)
     * @return List&lt;PulseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pulse data matching pulseId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<PulseResponse> offeringsOfferingIdAnalyticsPulsesPulseIdResponsesGet(String offeringId, String pulseId) throws ApiException {
        ApiResponse<List<PulseResponse>> localVarResp = offeringsOfferingIdAnalyticsPulsesPulseIdResponsesGetWithHttpInfo(offeringId, pulseId);
        return localVarResp.getData();
    }

    /**
     * Find pulses by offeringId and pulseId
     * Responds with pulse&#39;s responses, matching the pulseId, in an offering matching the offeringId.
     * @param offeringId offering&#39;s id (required)
     * @param pulseId pulse&#39;s base id (required)
     * @return ApiResponse&lt;List&lt;PulseResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pulse data matching pulseId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PulseResponse>> offeringsOfferingIdAnalyticsPulsesPulseIdResponsesGetWithHttpInfo(String offeringId, String pulseId) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdAnalyticsPulsesPulseIdResponsesGetValidateBeforeCall(offeringId, pulseId, null);
        Type localVarReturnType = new TypeToken<List<PulseResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find pulses by offeringId and pulseId (asynchronously)
     * Responds with pulse&#39;s responses, matching the pulseId, in an offering matching the offeringId.
     * @param offeringId offering&#39;s id (required)
     * @param pulseId pulse&#39;s base id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pulse data matching pulseId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdAnalyticsPulsesPulseIdResponsesGetAsync(String offeringId, String pulseId, final ApiCallback<List<PulseResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdAnalyticsPulsesPulseIdResponsesGetValidateBeforeCall(offeringId, pulseId, _callback);
        Type localVarReturnType = new TypeToken<List<PulseResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for offeringsOfferingIdAnalyticsPulsesResponsesGet
     * @param offeringId offering&#39;s id (required)
     * @param pulseType Filter pulse responses by type. (optional)
     * @param responseTime Filter pulse responses by responseTime. Lower then (&#x60;lt&#x60;), lower then or equal (&#x60;lte&#x60;), greater then (&#x60;gt&#x60;) and greater then or equal (&#x60;gte&#x60;) operators are available. Example of filtering by time range __gte__2017-03-14T07:30:00Z__ (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All pulses&#39; responses </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdAnalyticsPulsesResponsesGetCall(String offeringId, String pulseType, OfferingsOfferingIdAnalyticsPulsesResponsesGetResponseTimeParameter responseTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/analytics/pulses/responses"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pulseType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pulseType", pulseType));
        }

        if (responseTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseTime", responseTime));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdAnalyticsPulsesResponsesGetValidateBeforeCall(String offeringId, String pulseType, OfferingsOfferingIdAnalyticsPulsesResponsesGetResponseTimeParameter responseTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAnalyticsPulsesResponsesGet(Async)");
        }

        return offeringsOfferingIdAnalyticsPulsesResponsesGetCall(offeringId, pulseType, responseTime, _callback);

    }

    /**
     * Find pulses by offeringId
     * Responds with pulse&#39;s responses in an offering matching the offeringId.
     * @param offeringId offering&#39;s id (required)
     * @param pulseType Filter pulse responses by type. (optional)
     * @param responseTime Filter pulse responses by responseTime. Lower then (&#x60;lt&#x60;), lower then or equal (&#x60;lte&#x60;), greater then (&#x60;gt&#x60;) and greater then or equal (&#x60;gte&#x60;) operators are available. Example of filtering by time range __gte__2017-03-14T07:30:00Z__ (optional)
     * @return List&lt;PulseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All pulses&#39; responses </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<PulseResponse> offeringsOfferingIdAnalyticsPulsesResponsesGet(String offeringId, String pulseType, OfferingsOfferingIdAnalyticsPulsesResponsesGetResponseTimeParameter responseTime) throws ApiException {
        ApiResponse<List<PulseResponse>> localVarResp = offeringsOfferingIdAnalyticsPulsesResponsesGetWithHttpInfo(offeringId, pulseType, responseTime);
        return localVarResp.getData();
    }

    /**
     * Find pulses by offeringId
     * Responds with pulse&#39;s responses in an offering matching the offeringId.
     * @param offeringId offering&#39;s id (required)
     * @param pulseType Filter pulse responses by type. (optional)
     * @param responseTime Filter pulse responses by responseTime. Lower then (&#x60;lt&#x60;), lower then or equal (&#x60;lte&#x60;), greater then (&#x60;gt&#x60;) and greater then or equal (&#x60;gte&#x60;) operators are available. Example of filtering by time range __gte__2017-03-14T07:30:00Z__ (optional)
     * @return ApiResponse&lt;List&lt;PulseResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All pulses&#39; responses </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PulseResponse>> offeringsOfferingIdAnalyticsPulsesResponsesGetWithHttpInfo(String offeringId, String pulseType, OfferingsOfferingIdAnalyticsPulsesResponsesGetResponseTimeParameter responseTime) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdAnalyticsPulsesResponsesGetValidateBeforeCall(offeringId, pulseType, responseTime, null);
        Type localVarReturnType = new TypeToken<List<PulseResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find pulses by offeringId (asynchronously)
     * Responds with pulse&#39;s responses in an offering matching the offeringId.
     * @param offeringId offering&#39;s id (required)
     * @param pulseType Filter pulse responses by type. (optional)
     * @param responseTime Filter pulse responses by responseTime. Lower then (&#x60;lt&#x60;), lower then or equal (&#x60;lte&#x60;), greater then (&#x60;gt&#x60;) and greater then or equal (&#x60;gte&#x60;) operators are available. Example of filtering by time range __gte__2017-03-14T07:30:00Z__ (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All pulses&#39; responses </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdAnalyticsPulsesResponsesGetAsync(String offeringId, String pulseType, OfferingsOfferingIdAnalyticsPulsesResponsesGetResponseTimeParameter responseTime, final ApiCallback<List<PulseResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdAnalyticsPulsesResponsesGetValidateBeforeCall(offeringId, pulseType, responseTime, _callback);
        Type localVarReturnType = new TypeToken<List<PulseResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
