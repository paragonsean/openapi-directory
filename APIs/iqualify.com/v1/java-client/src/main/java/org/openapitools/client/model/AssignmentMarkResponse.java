/*
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssignmentMarkResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:36.016710-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssignmentMarkResponse {
  public static final String SERIALIZED_NAME_ASSESSMENT_ID = "assessmentId";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_ID)
  private String assessmentId;

  public static final String SERIALIZED_NAME_ASSESSMENT_ITEM_DETAILS = "assessmentItemDetails";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_ITEM_DETAILS)
  private String assessmentItemDetails;

  public static final String SERIALIZED_NAME_ASSESSMENT_ITEM_NAME = "assessmentItemName";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_ITEM_NAME)
  private String assessmentItemName;

  public static final String SERIALIZED_NAME_COURSE_NAME = "courseName";
  @SerializedName(SERIALIZED_NAME_COURSE_NAME)
  private String courseName;

  public static final String SERIALIZED_NAME_LEARNER_EMAIL = "learnerEmail";
  @SerializedName(SERIALIZED_NAME_LEARNER_EMAIL)
  private String learnerEmail;

  public static final String SERIALIZED_NAME_LEARNER_FIRST_NAME = "learnerFirstName";
  @SerializedName(SERIALIZED_NAME_LEARNER_FIRST_NAME)
  private String learnerFirstName;

  public static final String SERIALIZED_NAME_LEARNER_LAST_NAME = "learnerLastName";
  @SerializedName(SERIALIZED_NAME_LEARNER_LAST_NAME)
  private String learnerLastName;

  public static final String SERIALIZED_NAME_LEARNER_PERSON_ID = "learnerPersonId";
  @SerializedName(SERIALIZED_NAME_LEARNER_PERSON_ID)
  private String learnerPersonId;

  public static final String SERIALIZED_NAME_MARK = "mark";
  @SerializedName(SERIALIZED_NAME_MARK)
  private String mark;

  public static final String SERIALIZED_NAME_MARK_FEEDBACK = "markFeedback";
  @SerializedName(SERIALIZED_NAME_MARK_FEEDBACK)
  private String markFeedback;

  public static final String SERIALIZED_NAME_MARKED_BY = "markedBy";
  @SerializedName(SERIALIZED_NAME_MARKED_BY)
  private String markedBy;

  public static final String SERIALIZED_NAME_MARKED_BY_EVALUATOR = "markedByEvaluator";
  @SerializedName(SERIALIZED_NAME_MARKED_BY_EVALUATOR)
  private Boolean markedByEvaluator;

  public static final String SERIALIZED_NAME_MARKED_BY_FACILITATOR = "markedByFacilitator";
  @SerializedName(SERIALIZED_NAME_MARKED_BY_FACILITATOR)
  private Boolean markedByFacilitator;

  public static final String SERIALIZED_NAME_MARKED_BY_MARKER = "markedByMarker";
  @SerializedName(SERIALIZED_NAME_MARKED_BY_MARKER)
  private Boolean markedByMarker;

  public static final String SERIALIZED_NAME_MARKED_DATE_TIME = "markedDateTime";
  @SerializedName(SERIALIZED_NAME_MARKED_DATE_TIME)
  private OffsetDateTime markedDateTime;

  public static final String SERIALIZED_NAME_SUBMISSION_DATE_TIME = "submissionDateTime";
  @SerializedName(SERIALIZED_NAME_SUBMISSION_DATE_TIME)
  private OffsetDateTime submissionDateTime;

  public AssignmentMarkResponse() {
  }

  public AssignmentMarkResponse assessmentId(String assessmentId) {
    this.assessmentId = assessmentId;
    return this;
  }

  /**
   * Get assessmentId
   * @return assessmentId
   */
  @javax.annotation.Nullable
  public String getAssessmentId() {
    return assessmentId;
  }

  public void setAssessmentId(String assessmentId) {
    this.assessmentId = assessmentId;
  }


  public AssignmentMarkResponse assessmentItemDetails(String assessmentItemDetails) {
    this.assessmentItemDetails = assessmentItemDetails;
    return this;
  }

  /**
   * Get assessmentItemDetails
   * @return assessmentItemDetails
   */
  @javax.annotation.Nullable
  public String getAssessmentItemDetails() {
    return assessmentItemDetails;
  }

  public void setAssessmentItemDetails(String assessmentItemDetails) {
    this.assessmentItemDetails = assessmentItemDetails;
  }


  public AssignmentMarkResponse assessmentItemName(String assessmentItemName) {
    this.assessmentItemName = assessmentItemName;
    return this;
  }

  /**
   * Get assessmentItemName
   * @return assessmentItemName
   */
  @javax.annotation.Nullable
  public String getAssessmentItemName() {
    return assessmentItemName;
  }

  public void setAssessmentItemName(String assessmentItemName) {
    this.assessmentItemName = assessmentItemName;
  }


  public AssignmentMarkResponse courseName(String courseName) {
    this.courseName = courseName;
    return this;
  }

  /**
   * Get courseName
   * @return courseName
   */
  @javax.annotation.Nullable
  public String getCourseName() {
    return courseName;
  }

  public void setCourseName(String courseName) {
    this.courseName = courseName;
  }


  public AssignmentMarkResponse learnerEmail(String learnerEmail) {
    this.learnerEmail = learnerEmail;
    return this;
  }

  /**
   * Get learnerEmail
   * @return learnerEmail
   */
  @javax.annotation.Nullable
  public String getLearnerEmail() {
    return learnerEmail;
  }

  public void setLearnerEmail(String learnerEmail) {
    this.learnerEmail = learnerEmail;
  }


  public AssignmentMarkResponse learnerFirstName(String learnerFirstName) {
    this.learnerFirstName = learnerFirstName;
    return this;
  }

  /**
   * Get learnerFirstName
   * @return learnerFirstName
   */
  @javax.annotation.Nullable
  public String getLearnerFirstName() {
    return learnerFirstName;
  }

  public void setLearnerFirstName(String learnerFirstName) {
    this.learnerFirstName = learnerFirstName;
  }


  public AssignmentMarkResponse learnerLastName(String learnerLastName) {
    this.learnerLastName = learnerLastName;
    return this;
  }

  /**
   * Get learnerLastName
   * @return learnerLastName
   */
  @javax.annotation.Nullable
  public String getLearnerLastName() {
    return learnerLastName;
  }

  public void setLearnerLastName(String learnerLastName) {
    this.learnerLastName = learnerLastName;
  }


  public AssignmentMarkResponse learnerPersonId(String learnerPersonId) {
    this.learnerPersonId = learnerPersonId;
    return this;
  }

  /**
   * Get learnerPersonId
   * @return learnerPersonId
   */
  @javax.annotation.Nullable
  public String getLearnerPersonId() {
    return learnerPersonId;
  }

  public void setLearnerPersonId(String learnerPersonId) {
    this.learnerPersonId = learnerPersonId;
  }


  public AssignmentMarkResponse mark(String mark) {
    this.mark = mark;
    return this;
  }

  /**
   * Get mark
   * @return mark
   */
  @javax.annotation.Nullable
  public String getMark() {
    return mark;
  }

  public void setMark(String mark) {
    this.mark = mark;
  }


  public AssignmentMarkResponse markFeedback(String markFeedback) {
    this.markFeedback = markFeedback;
    return this;
  }

  /**
   * Get markFeedback
   * @return markFeedback
   */
  @javax.annotation.Nullable
  public String getMarkFeedback() {
    return markFeedback;
  }

  public void setMarkFeedback(String markFeedback) {
    this.markFeedback = markFeedback;
  }


  public AssignmentMarkResponse markedBy(String markedBy) {
    this.markedBy = markedBy;
    return this;
  }

  /**
   * Get markedBy
   * @return markedBy
   */
  @javax.annotation.Nullable
  public String getMarkedBy() {
    return markedBy;
  }

  public void setMarkedBy(String markedBy) {
    this.markedBy = markedBy;
  }


  public AssignmentMarkResponse markedByEvaluator(Boolean markedByEvaluator) {
    this.markedByEvaluator = markedByEvaluator;
    return this;
  }

  /**
   * Get markedByEvaluator
   * @return markedByEvaluator
   */
  @javax.annotation.Nullable
  public Boolean getMarkedByEvaluator() {
    return markedByEvaluator;
  }

  public void setMarkedByEvaluator(Boolean markedByEvaluator) {
    this.markedByEvaluator = markedByEvaluator;
  }


  public AssignmentMarkResponse markedByFacilitator(Boolean markedByFacilitator) {
    this.markedByFacilitator = markedByFacilitator;
    return this;
  }

  /**
   * Get markedByFacilitator
   * @return markedByFacilitator
   */
  @javax.annotation.Nullable
  public Boolean getMarkedByFacilitator() {
    return markedByFacilitator;
  }

  public void setMarkedByFacilitator(Boolean markedByFacilitator) {
    this.markedByFacilitator = markedByFacilitator;
  }


  public AssignmentMarkResponse markedByMarker(Boolean markedByMarker) {
    this.markedByMarker = markedByMarker;
    return this;
  }

  /**
   * Get markedByMarker
   * @return markedByMarker
   */
  @javax.annotation.Nullable
  public Boolean getMarkedByMarker() {
    return markedByMarker;
  }

  public void setMarkedByMarker(Boolean markedByMarker) {
    this.markedByMarker = markedByMarker;
  }


  public AssignmentMarkResponse markedDateTime(OffsetDateTime markedDateTime) {
    this.markedDateTime = markedDateTime;
    return this;
  }

  /**
   * Get markedDateTime
   * @return markedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getMarkedDateTime() {
    return markedDateTime;
  }

  public void setMarkedDateTime(OffsetDateTime markedDateTime) {
    this.markedDateTime = markedDateTime;
  }


  public AssignmentMarkResponse submissionDateTime(OffsetDateTime submissionDateTime) {
    this.submissionDateTime = submissionDateTime;
    return this;
  }

  /**
   * Get submissionDateTime
   * @return submissionDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSubmissionDateTime() {
    return submissionDateTime;
  }

  public void setSubmissionDateTime(OffsetDateTime submissionDateTime) {
    this.submissionDateTime = submissionDateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssignmentMarkResponse assignmentMarkResponse = (AssignmentMarkResponse) o;
    return Objects.equals(this.assessmentId, assignmentMarkResponse.assessmentId) &&
        Objects.equals(this.assessmentItemDetails, assignmentMarkResponse.assessmentItemDetails) &&
        Objects.equals(this.assessmentItemName, assignmentMarkResponse.assessmentItemName) &&
        Objects.equals(this.courseName, assignmentMarkResponse.courseName) &&
        Objects.equals(this.learnerEmail, assignmentMarkResponse.learnerEmail) &&
        Objects.equals(this.learnerFirstName, assignmentMarkResponse.learnerFirstName) &&
        Objects.equals(this.learnerLastName, assignmentMarkResponse.learnerLastName) &&
        Objects.equals(this.learnerPersonId, assignmentMarkResponse.learnerPersonId) &&
        Objects.equals(this.mark, assignmentMarkResponse.mark) &&
        Objects.equals(this.markFeedback, assignmentMarkResponse.markFeedback) &&
        Objects.equals(this.markedBy, assignmentMarkResponse.markedBy) &&
        Objects.equals(this.markedByEvaluator, assignmentMarkResponse.markedByEvaluator) &&
        Objects.equals(this.markedByFacilitator, assignmentMarkResponse.markedByFacilitator) &&
        Objects.equals(this.markedByMarker, assignmentMarkResponse.markedByMarker) &&
        Objects.equals(this.markedDateTime, assignmentMarkResponse.markedDateTime) &&
        Objects.equals(this.submissionDateTime, assignmentMarkResponse.submissionDateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assessmentId, assessmentItemDetails, assessmentItemName, courseName, learnerEmail, learnerFirstName, learnerLastName, learnerPersonId, mark, markFeedback, markedBy, markedByEvaluator, markedByFacilitator, markedByMarker, markedDateTime, submissionDateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssignmentMarkResponse {\n");
    sb.append("    assessmentId: ").append(toIndentedString(assessmentId)).append("\n");
    sb.append("    assessmentItemDetails: ").append(toIndentedString(assessmentItemDetails)).append("\n");
    sb.append("    assessmentItemName: ").append(toIndentedString(assessmentItemName)).append("\n");
    sb.append("    courseName: ").append(toIndentedString(courseName)).append("\n");
    sb.append("    learnerEmail: ").append(toIndentedString(learnerEmail)).append("\n");
    sb.append("    learnerFirstName: ").append(toIndentedString(learnerFirstName)).append("\n");
    sb.append("    learnerLastName: ").append(toIndentedString(learnerLastName)).append("\n");
    sb.append("    learnerPersonId: ").append(toIndentedString(learnerPersonId)).append("\n");
    sb.append("    mark: ").append(toIndentedString(mark)).append("\n");
    sb.append("    markFeedback: ").append(toIndentedString(markFeedback)).append("\n");
    sb.append("    markedBy: ").append(toIndentedString(markedBy)).append("\n");
    sb.append("    markedByEvaluator: ").append(toIndentedString(markedByEvaluator)).append("\n");
    sb.append("    markedByFacilitator: ").append(toIndentedString(markedByFacilitator)).append("\n");
    sb.append("    markedByMarker: ").append(toIndentedString(markedByMarker)).append("\n");
    sb.append("    markedDateTime: ").append(toIndentedString(markedDateTime)).append("\n");
    sb.append("    submissionDateTime: ").append(toIndentedString(submissionDateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assessmentId");
    openapiFields.add("assessmentItemDetails");
    openapiFields.add("assessmentItemName");
    openapiFields.add("courseName");
    openapiFields.add("learnerEmail");
    openapiFields.add("learnerFirstName");
    openapiFields.add("learnerLastName");
    openapiFields.add("learnerPersonId");
    openapiFields.add("mark");
    openapiFields.add("markFeedback");
    openapiFields.add("markedBy");
    openapiFields.add("markedByEvaluator");
    openapiFields.add("markedByFacilitator");
    openapiFields.add("markedByMarker");
    openapiFields.add("markedDateTime");
    openapiFields.add("submissionDateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssignmentMarkResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssignmentMarkResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssignmentMarkResponse is not found in the empty JSON string", AssignmentMarkResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssignmentMarkResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssignmentMarkResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("assessmentId") != null && !jsonObj.get("assessmentId").isJsonNull()) && !jsonObj.get("assessmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assessmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assessmentId").toString()));
      }
      if ((jsonObj.get("assessmentItemDetails") != null && !jsonObj.get("assessmentItemDetails").isJsonNull()) && !jsonObj.get("assessmentItemDetails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assessmentItemDetails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assessmentItemDetails").toString()));
      }
      if ((jsonObj.get("assessmentItemName") != null && !jsonObj.get("assessmentItemName").isJsonNull()) && !jsonObj.get("assessmentItemName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assessmentItemName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assessmentItemName").toString()));
      }
      if ((jsonObj.get("courseName") != null && !jsonObj.get("courseName").isJsonNull()) && !jsonObj.get("courseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `courseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("courseName").toString()));
      }
      if ((jsonObj.get("learnerEmail") != null && !jsonObj.get("learnerEmail").isJsonNull()) && !jsonObj.get("learnerEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `learnerEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("learnerEmail").toString()));
      }
      if ((jsonObj.get("learnerFirstName") != null && !jsonObj.get("learnerFirstName").isJsonNull()) && !jsonObj.get("learnerFirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `learnerFirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("learnerFirstName").toString()));
      }
      if ((jsonObj.get("learnerLastName") != null && !jsonObj.get("learnerLastName").isJsonNull()) && !jsonObj.get("learnerLastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `learnerLastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("learnerLastName").toString()));
      }
      if ((jsonObj.get("learnerPersonId") != null && !jsonObj.get("learnerPersonId").isJsonNull()) && !jsonObj.get("learnerPersonId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `learnerPersonId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("learnerPersonId").toString()));
      }
      if ((jsonObj.get("mark") != null && !jsonObj.get("mark").isJsonNull()) && !jsonObj.get("mark").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mark` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mark").toString()));
      }
      if ((jsonObj.get("markFeedback") != null && !jsonObj.get("markFeedback").isJsonNull()) && !jsonObj.get("markFeedback").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `markFeedback` to be a primitive type in the JSON string but got `%s`", jsonObj.get("markFeedback").toString()));
      }
      if ((jsonObj.get("markedBy") != null && !jsonObj.get("markedBy").isJsonNull()) && !jsonObj.get("markedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `markedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("markedBy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssignmentMarkResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssignmentMarkResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssignmentMarkResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssignmentMarkResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AssignmentMarkResponse>() {
           @Override
           public void write(JsonWriter out, AssignmentMarkResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssignmentMarkResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssignmentMarkResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssignmentMarkResponse
   * @throws IOException if the JSON string is invalid with respect to AssignmentMarkResponse
   */
  public static AssignmentMarkResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssignmentMarkResponse.class);
  }

  /**
   * Convert an instance of AssignmentMarkResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

