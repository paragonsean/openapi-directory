/*
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BadgeExpiry;
import org.openapitools.client.model.Criteria;
import org.openapitools.client.model.OpenBadgeClass;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Badge
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:36.016710-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Badge {
  public static final String SERIALIZED_NAME_BADGE_EXPIRY = "badgeExpiry";
  @SerializedName(SERIALIZED_NAME_BADGE_EXPIRY)
  private BadgeExpiry badgeExpiry;

  public static final String SERIALIZED_NAME_BADGE_URL = "badgeUrl";
  @SerializedName(SERIALIZED_NAME_BADGE_URL)
  private String badgeUrl;

  public static final String SERIALIZED_NAME_CRITERIAS = "criterias";
  @SerializedName(SERIALIZED_NAME_CRITERIAS)
  private Criteria criterias;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_OPEN_BADGE = "openBadge";
  @SerializedName(SERIALIZED_NAME_OPEN_BADGE)
  private OpenBadgeClass openBadge;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public Badge() {
  }

  public Badge badgeExpiry(BadgeExpiry badgeExpiry) {
    this.badgeExpiry = badgeExpiry;
    return this;
  }

  /**
   * Get badgeExpiry
   * @return badgeExpiry
   */
  @javax.annotation.Nullable
  public BadgeExpiry getBadgeExpiry() {
    return badgeExpiry;
  }

  public void setBadgeExpiry(BadgeExpiry badgeExpiry) {
    this.badgeExpiry = badgeExpiry;
  }


  public Badge badgeUrl(String badgeUrl) {
    this.badgeUrl = badgeUrl;
    return this;
  }

  /**
   * Get badgeUrl
   * @return badgeUrl
   */
  @javax.annotation.Nullable
  public String getBadgeUrl() {
    return badgeUrl;
  }

  public void setBadgeUrl(String badgeUrl) {
    this.badgeUrl = badgeUrl;
  }


  public Badge criterias(Criteria criterias) {
    this.criterias = criterias;
    return this;
  }

  /**
   * Get criterias
   * @return criterias
   */
  @javax.annotation.Nullable
  public Criteria getCriterias() {
    return criterias;
  }

  public void setCriterias(Criteria criterias) {
    this.criterias = criterias;
  }


  public Badge description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Badge openBadge(OpenBadgeClass openBadge) {
    this.openBadge = openBadge;
    return this;
  }

  /**
   * Get openBadge
   * @return openBadge
   */
  @javax.annotation.Nullable
  public OpenBadgeClass getOpenBadge() {
    return openBadge;
  }

  public void setOpenBadge(OpenBadgeClass openBadge) {
    this.openBadge = openBadge;
  }


  public Badge title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Badge badge = (Badge) o;
    return Objects.equals(this.badgeExpiry, badge.badgeExpiry) &&
        Objects.equals(this.badgeUrl, badge.badgeUrl) &&
        Objects.equals(this.criterias, badge.criterias) &&
        Objects.equals(this.description, badge.description) &&
        Objects.equals(this.openBadge, badge.openBadge) &&
        Objects.equals(this.title, badge.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(badgeExpiry, badgeUrl, criterias, description, openBadge, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Badge {\n");
    sb.append("    badgeExpiry: ").append(toIndentedString(badgeExpiry)).append("\n");
    sb.append("    badgeUrl: ").append(toIndentedString(badgeUrl)).append("\n");
    sb.append("    criterias: ").append(toIndentedString(criterias)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    openBadge: ").append(toIndentedString(openBadge)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("badgeExpiry");
    openapiFields.add("badgeUrl");
    openapiFields.add("criterias");
    openapiFields.add("description");
    openapiFields.add("openBadge");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Badge
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Badge.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Badge is not found in the empty JSON string", Badge.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Badge.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Badge` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `badgeExpiry`
      if (jsonObj.get("badgeExpiry") != null && !jsonObj.get("badgeExpiry").isJsonNull()) {
        BadgeExpiry.validateJsonElement(jsonObj.get("badgeExpiry"));
      }
      if ((jsonObj.get("badgeUrl") != null && !jsonObj.get("badgeUrl").isJsonNull()) && !jsonObj.get("badgeUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `badgeUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("badgeUrl").toString()));
      }
      // validate the optional field `criterias`
      if (jsonObj.get("criterias") != null && !jsonObj.get("criterias").isJsonNull()) {
        Criteria.validateJsonElement(jsonObj.get("criterias"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `openBadge`
      if (jsonObj.get("openBadge") != null && !jsonObj.get("openBadge").isJsonNull()) {
        OpenBadgeClass.validateJsonElement(jsonObj.get("openBadge"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Badge.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Badge' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Badge> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Badge.class));

       return (TypeAdapter<T>) new TypeAdapter<Badge>() {
           @Override
           public void write(JsonWriter out, Badge value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Badge read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Badge given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Badge
   * @throws IOException if the JSON string is invalid with respect to Badge
   */
  public static Badge fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Badge.class);
  }

  /**
   * Convert an instance of Badge to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

