/*
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Document;
import org.openapitools.client.model.ThemeResponse;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssessmentPendingSubmission
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:36.016710-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssessmentPendingSubmission {
  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  private List<Document> documents = new ArrayList<>();

  public static final String SERIALIZED_NAME_DUE_DATE = "dueDate";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private OffsetDateTime dueDate;

  public static final String SERIALIZED_NAME_DURATION_MINUTES = "durationMinutes";
  @SerializedName(SERIALIZED_NAME_DURATION_MINUTES)
  private Integer durationMinutes;

  public static final String SERIALIZED_NAME_FILENAME = "filename";
  @SerializedName(SERIALIZED_NAME_FILENAME)
  private String filename;

  public static final String SERIALIZED_NAME_HIDDEN = "hidden";
  @SerializedName(SERIALIZED_NAME_HIDDEN)
  private Boolean hidden = false;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MARK_NUMBER = "markNumber";
  @SerializedName(SERIALIZED_NAME_MARK_NUMBER)
  private String markNumber;

  public static final String SERIALIZED_NAME_MARK_TYPE = "markType";
  @SerializedName(SERIALIZED_NAME_MARK_TYPE)
  private String markType;

  public static final String SERIALIZED_NAME_MAX_ATTEMPTS = "maxAttempts";
  @SerializedName(SERIALIZED_NAME_MAX_ATTEMPTS)
  private Integer maxAttempts;

  public static final String SERIALIZED_NAME_OFFERING_ID = "offeringId";
  @SerializedName(SERIALIZED_NAME_OFFERING_ID)
  private String offeringId;

  public static final String SERIALIZED_NAME_OFFERING_NAME = "offeringName";
  @SerializedName(SERIALIZED_NAME_OFFERING_NAME)
  private String offeringName;

  public static final String SERIALIZED_NAME_OPEN_DATE = "openDate";
  @SerializedName(SERIALIZED_NAME_OPEN_DATE)
  private OffsetDateTime openDate;

  public static final String SERIALIZED_NAME_PID = "pid";
  @SerializedName(SERIALIZED_NAME_PID)
  private String pid;

  public static final String SERIALIZED_NAME_POINTS = "points";
  @SerializedName(SERIALIZED_NAME_POINTS)
  private String points;

  public static final String SERIALIZED_NAME_THEMES = "themes";
  @SerializedName(SERIALIZED_NAME_THEMES)
  private List<ThemeResponse> themes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TOTAL_QUESTIONS = "totalQuestions";
  @SerializedName(SERIALIZED_NAME_TOTAL_QUESTIONS)
  private Integer totalQuestions;

  public static final String SERIALIZED_NAME_TOTAL_THEMES = "totalThemes";
  @SerializedName(SERIALIZED_NAME_TOTAL_THEMES)
  private Integer totalThemes;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private List<User> users = new ArrayList<>();

  public AssessmentPendingSubmission() {
  }

  public AssessmentPendingSubmission content(String content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public AssessmentPendingSubmission documents(List<Document> documents) {
    this.documents = documents;
    return this;
  }

  public AssessmentPendingSubmission addDocumentsItem(Document documentsItem) {
    if (this.documents == null) {
      this.documents = new ArrayList<>();
    }
    this.documents.add(documentsItem);
    return this;
  }

  /**
   * Get documents
   * @return documents
   */
  @javax.annotation.Nullable
  public List<Document> getDocuments() {
    return documents;
  }

  public void setDocuments(List<Document> documents) {
    this.documents = documents;
  }


  public AssessmentPendingSubmission dueDate(OffsetDateTime dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * Get dueDate
   * @return dueDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDueDate() {
    return dueDate;
  }

  public void setDueDate(OffsetDateTime dueDate) {
    this.dueDate = dueDate;
  }


  public AssessmentPendingSubmission durationMinutes(Integer durationMinutes) {
    this.durationMinutes = durationMinutes;
    return this;
  }

  /**
   * Get durationMinutes
   * @return durationMinutes
   */
  @javax.annotation.Nullable
  public Integer getDurationMinutes() {
    return durationMinutes;
  }

  public void setDurationMinutes(Integer durationMinutes) {
    this.durationMinutes = durationMinutes;
  }


  public AssessmentPendingSubmission filename(String filename) {
    this.filename = filename;
    return this;
  }

  /**
   * Get filename
   * @return filename
   */
  @javax.annotation.Nullable
  public String getFilename() {
    return filename;
  }

  public void setFilename(String filename) {
    this.filename = filename;
  }


  public AssessmentPendingSubmission hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

  /**
   * Get hidden
   * @return hidden
   */
  @javax.annotation.Nullable
  public Boolean getHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }


  public AssessmentPendingSubmission id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AssessmentPendingSubmission markNumber(String markNumber) {
    this.markNumber = markNumber;
    return this;
  }

  /**
   * Get markNumber
   * @return markNumber
   */
  @javax.annotation.Nullable
  public String getMarkNumber() {
    return markNumber;
  }

  public void setMarkNumber(String markNumber) {
    this.markNumber = markNumber;
  }


  public AssessmentPendingSubmission markType(String markType) {
    this.markType = markType;
    return this;
  }

  /**
   * Get markType
   * @return markType
   */
  @javax.annotation.Nullable
  public String getMarkType() {
    return markType;
  }

  public void setMarkType(String markType) {
    this.markType = markType;
  }


  public AssessmentPendingSubmission maxAttempts(Integer maxAttempts) {
    this.maxAttempts = maxAttempts;
    return this;
  }

  /**
   * Get maxAttempts
   * @return maxAttempts
   */
  @javax.annotation.Nullable
  public Integer getMaxAttempts() {
    return maxAttempts;
  }

  public void setMaxAttempts(Integer maxAttempts) {
    this.maxAttempts = maxAttempts;
  }


  public AssessmentPendingSubmission offeringId(String offeringId) {
    this.offeringId = offeringId;
    return this;
  }

  /**
   * Get offeringId
   * @return offeringId
   */
  @javax.annotation.Nullable
  public String getOfferingId() {
    return offeringId;
  }

  public void setOfferingId(String offeringId) {
    this.offeringId = offeringId;
  }


  public AssessmentPendingSubmission offeringName(String offeringName) {
    this.offeringName = offeringName;
    return this;
  }

  /**
   * Get offeringName
   * @return offeringName
   */
  @javax.annotation.Nullable
  public String getOfferingName() {
    return offeringName;
  }

  public void setOfferingName(String offeringName) {
    this.offeringName = offeringName;
  }


  public AssessmentPendingSubmission openDate(OffsetDateTime openDate) {
    this.openDate = openDate;
    return this;
  }

  /**
   * Get openDate
   * @return openDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getOpenDate() {
    return openDate;
  }

  public void setOpenDate(OffsetDateTime openDate) {
    this.openDate = openDate;
  }


  public AssessmentPendingSubmission pid(String pid) {
    this.pid = pid;
    return this;
  }

  /**
   * Get pid
   * @return pid
   */
  @javax.annotation.Nullable
  public String getPid() {
    return pid;
  }

  public void setPid(String pid) {
    this.pid = pid;
  }


  public AssessmentPendingSubmission points(String points) {
    this.points = points;
    return this;
  }

  /**
   * Get points
   * @return points
   */
  @javax.annotation.Nullable
  public String getPoints() {
    return points;
  }

  public void setPoints(String points) {
    this.points = points;
  }


  public AssessmentPendingSubmission themes(List<ThemeResponse> themes) {
    this.themes = themes;
    return this;
  }

  public AssessmentPendingSubmission addThemesItem(ThemeResponse themesItem) {
    if (this.themes == null) {
      this.themes = new ArrayList<>();
    }
    this.themes.add(themesItem);
    return this;
  }

  /**
   * Get themes
   * @return themes
   */
  @javax.annotation.Nullable
  public List<ThemeResponse> getThemes() {
    return themes;
  }

  public void setThemes(List<ThemeResponse> themes) {
    this.themes = themes;
  }


  public AssessmentPendingSubmission title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public AssessmentPendingSubmission totalQuestions(Integer totalQuestions) {
    this.totalQuestions = totalQuestions;
    return this;
  }

  /**
   * Get totalQuestions
   * @return totalQuestions
   */
  @javax.annotation.Nullable
  public Integer getTotalQuestions() {
    return totalQuestions;
  }

  public void setTotalQuestions(Integer totalQuestions) {
    this.totalQuestions = totalQuestions;
  }


  public AssessmentPendingSubmission totalThemes(Integer totalThemes) {
    this.totalThemes = totalThemes;
    return this;
  }

  /**
   * Get totalThemes
   * @return totalThemes
   */
  @javax.annotation.Nullable
  public Integer getTotalThemes() {
    return totalThemes;
  }

  public void setTotalThemes(Integer totalThemes) {
    this.totalThemes = totalThemes;
  }


  public AssessmentPendingSubmission type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public AssessmentPendingSubmission users(List<User> users) {
    this.users = users;
    return this;
  }

  public AssessmentPendingSubmission addUsersItem(User usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

  /**
   * Get users
   * @return users
   */
  @javax.annotation.Nullable
  public List<User> getUsers() {
    return users;
  }

  public void setUsers(List<User> users) {
    this.users = users;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssessmentPendingSubmission assessmentPendingSubmission = (AssessmentPendingSubmission) o;
    return Objects.equals(this.content, assessmentPendingSubmission.content) &&
        Objects.equals(this.documents, assessmentPendingSubmission.documents) &&
        Objects.equals(this.dueDate, assessmentPendingSubmission.dueDate) &&
        Objects.equals(this.durationMinutes, assessmentPendingSubmission.durationMinutes) &&
        Objects.equals(this.filename, assessmentPendingSubmission.filename) &&
        Objects.equals(this.hidden, assessmentPendingSubmission.hidden) &&
        Objects.equals(this.id, assessmentPendingSubmission.id) &&
        Objects.equals(this.markNumber, assessmentPendingSubmission.markNumber) &&
        Objects.equals(this.markType, assessmentPendingSubmission.markType) &&
        Objects.equals(this.maxAttempts, assessmentPendingSubmission.maxAttempts) &&
        Objects.equals(this.offeringId, assessmentPendingSubmission.offeringId) &&
        Objects.equals(this.offeringName, assessmentPendingSubmission.offeringName) &&
        Objects.equals(this.openDate, assessmentPendingSubmission.openDate) &&
        Objects.equals(this.pid, assessmentPendingSubmission.pid) &&
        Objects.equals(this.points, assessmentPendingSubmission.points) &&
        Objects.equals(this.themes, assessmentPendingSubmission.themes) &&
        Objects.equals(this.title, assessmentPendingSubmission.title) &&
        Objects.equals(this.totalQuestions, assessmentPendingSubmission.totalQuestions) &&
        Objects.equals(this.totalThemes, assessmentPendingSubmission.totalThemes) &&
        Objects.equals(this.type, assessmentPendingSubmission.type) &&
        Objects.equals(this.users, assessmentPendingSubmission.users);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, documents, dueDate, durationMinutes, filename, hidden, id, markNumber, markType, maxAttempts, offeringId, offeringName, openDate, pid, points, themes, title, totalQuestions, totalThemes, type, users);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssessmentPendingSubmission {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    durationMinutes: ").append(toIndentedString(durationMinutes)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    markNumber: ").append(toIndentedString(markNumber)).append("\n");
    sb.append("    markType: ").append(toIndentedString(markType)).append("\n");
    sb.append("    maxAttempts: ").append(toIndentedString(maxAttempts)).append("\n");
    sb.append("    offeringId: ").append(toIndentedString(offeringId)).append("\n");
    sb.append("    offeringName: ").append(toIndentedString(offeringName)).append("\n");
    sb.append("    openDate: ").append(toIndentedString(openDate)).append("\n");
    sb.append("    pid: ").append(toIndentedString(pid)).append("\n");
    sb.append("    points: ").append(toIndentedString(points)).append("\n");
    sb.append("    themes: ").append(toIndentedString(themes)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    totalQuestions: ").append(toIndentedString(totalQuestions)).append("\n");
    sb.append("    totalThemes: ").append(toIndentedString(totalThemes)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content");
    openapiFields.add("documents");
    openapiFields.add("dueDate");
    openapiFields.add("durationMinutes");
    openapiFields.add("filename");
    openapiFields.add("hidden");
    openapiFields.add("id");
    openapiFields.add("markNumber");
    openapiFields.add("markType");
    openapiFields.add("maxAttempts");
    openapiFields.add("offeringId");
    openapiFields.add("offeringName");
    openapiFields.add("openDate");
    openapiFields.add("pid");
    openapiFields.add("points");
    openapiFields.add("themes");
    openapiFields.add("title");
    openapiFields.add("totalQuestions");
    openapiFields.add("totalThemes");
    openapiFields.add("type");
    openapiFields.add("users");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssessmentPendingSubmission
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssessmentPendingSubmission.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssessmentPendingSubmission is not found in the empty JSON string", AssessmentPendingSubmission.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssessmentPendingSubmission.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssessmentPendingSubmission` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if (jsonObj.get("documents") != null && !jsonObj.get("documents").isJsonNull()) {
        JsonArray jsonArraydocuments = jsonObj.getAsJsonArray("documents");
        if (jsonArraydocuments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("documents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `documents` to be an array in the JSON string but got `%s`", jsonObj.get("documents").toString()));
          }

          // validate the optional field `documents` (array)
          for (int i = 0; i < jsonArraydocuments.size(); i++) {
            Document.validateJsonElement(jsonArraydocuments.get(i));
          };
        }
      }
      if ((jsonObj.get("filename") != null && !jsonObj.get("filename").isJsonNull()) && !jsonObj.get("filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filename").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("markNumber") != null && !jsonObj.get("markNumber").isJsonNull()) && !jsonObj.get("markNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `markNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("markNumber").toString()));
      }
      if ((jsonObj.get("markType") != null && !jsonObj.get("markType").isJsonNull()) && !jsonObj.get("markType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `markType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("markType").toString()));
      }
      if ((jsonObj.get("offeringId") != null && !jsonObj.get("offeringId").isJsonNull()) && !jsonObj.get("offeringId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offeringId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offeringId").toString()));
      }
      if ((jsonObj.get("offeringName") != null && !jsonObj.get("offeringName").isJsonNull()) && !jsonObj.get("offeringName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offeringName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offeringName").toString()));
      }
      if ((jsonObj.get("pid") != null && !jsonObj.get("pid").isJsonNull()) && !jsonObj.get("pid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pid").toString()));
      }
      if ((jsonObj.get("points") != null && !jsonObj.get("points").isJsonNull()) && !jsonObj.get("points").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `points` to be a primitive type in the JSON string but got `%s`", jsonObj.get("points").toString()));
      }
      if (jsonObj.get("themes") != null && !jsonObj.get("themes").isJsonNull()) {
        JsonArray jsonArraythemes = jsonObj.getAsJsonArray("themes");
        if (jsonArraythemes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("themes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `themes` to be an array in the JSON string but got `%s`", jsonObj.get("themes").toString()));
          }

          // validate the optional field `themes` (array)
          for (int i = 0; i < jsonArraythemes.size(); i++) {
            ThemeResponse.validateJsonElement(jsonArraythemes.get(i));
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (jsonObj.get("users") != null && !jsonObj.get("users").isJsonNull()) {
        JsonArray jsonArrayusers = jsonObj.getAsJsonArray("users");
        if (jsonArrayusers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("users").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `users` to be an array in the JSON string but got `%s`", jsonObj.get("users").toString()));
          }

          // validate the optional field `users` (array)
          for (int i = 0; i < jsonArrayusers.size(); i++) {
            User.validateJsonElement(jsonArrayusers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssessmentPendingSubmission.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssessmentPendingSubmission' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssessmentPendingSubmission> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssessmentPendingSubmission.class));

       return (TypeAdapter<T>) new TypeAdapter<AssessmentPendingSubmission>() {
           @Override
           public void write(JsonWriter out, AssessmentPendingSubmission value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssessmentPendingSubmission read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssessmentPendingSubmission given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssessmentPendingSubmission
   * @throws IOException if the JSON string is invalid with respect to AssessmentPendingSubmission
   */
  public static AssessmentPendingSubmission fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssessmentPendingSubmission.class);
  }

  /**
   * Convert an instance of AssessmentPendingSubmission to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

