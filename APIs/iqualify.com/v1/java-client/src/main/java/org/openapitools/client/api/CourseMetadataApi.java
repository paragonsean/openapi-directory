/*
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CourseMetaResponse;
import org.openapitools.client.model.CoursesContentIdMetadataCategoryPutRequest;
import org.openapitools.client.model.CoursesContentIdMetadataLevelPutRequest;
import org.openapitools.client.model.CoursesContentIdMetadataTagsPutRequest;
import org.openapitools.client.model.CoursesContentIdMetadataTopicPutRequest;
import org.openapitools.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CourseMetadataApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CourseMetadataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CourseMetadataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for coursesContentIdMetadataCategoryPut
     * @param contentId The content Id (required)
     * @param coursesContentIdMetadataCategoryPutRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Course detail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coursesContentIdMetadataCategoryPutCall(String contentId, CoursesContentIdMetadataCategoryPutRequest coursesContentIdMetadataCategoryPutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coursesContentIdMetadataCategoryPutRequest;

        // create path and map variables
        String localVarPath = "/courses/{contentId}/metadata/category"
            .replace("{" + "contentId" + "}", localVarApiClient.escapeString(contentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coursesContentIdMetadataCategoryPutValidateBeforeCall(String contentId, CoursesContentIdMetadataCategoryPutRequest coursesContentIdMetadataCategoryPutRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling coursesContentIdMetadataCategoryPut(Async)");
        }

        // verify the required parameter 'coursesContentIdMetadataCategoryPutRequest' is set
        if (coursesContentIdMetadataCategoryPutRequest == null) {
            throw new ApiException("Missing the required parameter 'coursesContentIdMetadataCategoryPutRequest' when calling coursesContentIdMetadataCategoryPut(Async)");
        }

        return coursesContentIdMetadataCategoryPutCall(contentId, coursesContentIdMetadataCategoryPutRequest, _callback);

    }

    /**
     * Update course category
     * Add or update course category in the metadata of a course.
     * @param contentId The content Id (required)
     * @param coursesContentIdMetadataCategoryPutRequest  (required)
     * @return CourseMetaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Course detail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public CourseMetaResponse coursesContentIdMetadataCategoryPut(String contentId, CoursesContentIdMetadataCategoryPutRequest coursesContentIdMetadataCategoryPutRequest) throws ApiException {
        ApiResponse<CourseMetaResponse> localVarResp = coursesContentIdMetadataCategoryPutWithHttpInfo(contentId, coursesContentIdMetadataCategoryPutRequest);
        return localVarResp.getData();
    }

    /**
     * Update course category
     * Add or update course category in the metadata of a course.
     * @param contentId The content Id (required)
     * @param coursesContentIdMetadataCategoryPutRequest  (required)
     * @return ApiResponse&lt;CourseMetaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Course detail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CourseMetaResponse> coursesContentIdMetadataCategoryPutWithHttpInfo(String contentId, CoursesContentIdMetadataCategoryPutRequest coursesContentIdMetadataCategoryPutRequest) throws ApiException {
        okhttp3.Call localVarCall = coursesContentIdMetadataCategoryPutValidateBeforeCall(contentId, coursesContentIdMetadataCategoryPutRequest, null);
        Type localVarReturnType = new TypeToken<CourseMetaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update course category (asynchronously)
     * Add or update course category in the metadata of a course.
     * @param contentId The content Id (required)
     * @param coursesContentIdMetadataCategoryPutRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Course detail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coursesContentIdMetadataCategoryPutAsync(String contentId, CoursesContentIdMetadataCategoryPutRequest coursesContentIdMetadataCategoryPutRequest, final ApiCallback<CourseMetaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = coursesContentIdMetadataCategoryPutValidateBeforeCall(contentId, coursesContentIdMetadataCategoryPutRequest, _callback);
        Type localVarReturnType = new TypeToken<CourseMetaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coursesContentIdMetadataLevelPut
     * @param contentId The content Id (required)
     * @param coursesContentIdMetadataLevelPutRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Course detail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coursesContentIdMetadataLevelPutCall(String contentId, CoursesContentIdMetadataLevelPutRequest coursesContentIdMetadataLevelPutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coursesContentIdMetadataLevelPutRequest;

        // create path and map variables
        String localVarPath = "/courses/{contentId}/metadata/level"
            .replace("{" + "contentId" + "}", localVarApiClient.escapeString(contentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coursesContentIdMetadataLevelPutValidateBeforeCall(String contentId, CoursesContentIdMetadataLevelPutRequest coursesContentIdMetadataLevelPutRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling coursesContentIdMetadataLevelPut(Async)");
        }

        // verify the required parameter 'coursesContentIdMetadataLevelPutRequest' is set
        if (coursesContentIdMetadataLevelPutRequest == null) {
            throw new ApiException("Missing the required parameter 'coursesContentIdMetadataLevelPutRequest' when calling coursesContentIdMetadataLevelPut(Async)");
        }

        return coursesContentIdMetadataLevelPutCall(contentId, coursesContentIdMetadataLevelPutRequest, _callback);

    }

    /**
     * Update course level
     * Add or update the course level in the metadata of a course.
     * @param contentId The content Id (required)
     * @param coursesContentIdMetadataLevelPutRequest  (required)
     * @return CourseMetaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Course detail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public CourseMetaResponse coursesContentIdMetadataLevelPut(String contentId, CoursesContentIdMetadataLevelPutRequest coursesContentIdMetadataLevelPutRequest) throws ApiException {
        ApiResponse<CourseMetaResponse> localVarResp = coursesContentIdMetadataLevelPutWithHttpInfo(contentId, coursesContentIdMetadataLevelPutRequest);
        return localVarResp.getData();
    }

    /**
     * Update course level
     * Add or update the course level in the metadata of a course.
     * @param contentId The content Id (required)
     * @param coursesContentIdMetadataLevelPutRequest  (required)
     * @return ApiResponse&lt;CourseMetaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Course detail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CourseMetaResponse> coursesContentIdMetadataLevelPutWithHttpInfo(String contentId, CoursesContentIdMetadataLevelPutRequest coursesContentIdMetadataLevelPutRequest) throws ApiException {
        okhttp3.Call localVarCall = coursesContentIdMetadataLevelPutValidateBeforeCall(contentId, coursesContentIdMetadataLevelPutRequest, null);
        Type localVarReturnType = new TypeToken<CourseMetaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update course level (asynchronously)
     * Add or update the course level in the metadata of a course.
     * @param contentId The content Id (required)
     * @param coursesContentIdMetadataLevelPutRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Course detail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coursesContentIdMetadataLevelPutAsync(String contentId, CoursesContentIdMetadataLevelPutRequest coursesContentIdMetadataLevelPutRequest, final ApiCallback<CourseMetaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = coursesContentIdMetadataLevelPutValidateBeforeCall(contentId, coursesContentIdMetadataLevelPutRequest, _callback);
        Type localVarReturnType = new TypeToken<CourseMetaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coursesContentIdMetadataTagsPut
     * @param contentId The content Id (required)
     * @param coursesContentIdMetadataTagsPutRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Course detail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coursesContentIdMetadataTagsPutCall(String contentId, CoursesContentIdMetadataTagsPutRequest coursesContentIdMetadataTagsPutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coursesContentIdMetadataTagsPutRequest;

        // create path and map variables
        String localVarPath = "/courses/{contentId}/metadata/tags"
            .replace("{" + "contentId" + "}", localVarApiClient.escapeString(contentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coursesContentIdMetadataTagsPutValidateBeforeCall(String contentId, CoursesContentIdMetadataTagsPutRequest coursesContentIdMetadataTagsPutRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling coursesContentIdMetadataTagsPut(Async)");
        }

        // verify the required parameter 'coursesContentIdMetadataTagsPutRequest' is set
        if (coursesContentIdMetadataTagsPutRequest == null) {
            throw new ApiException("Missing the required parameter 'coursesContentIdMetadataTagsPutRequest' when calling coursesContentIdMetadataTagsPut(Async)");
        }

        return coursesContentIdMetadataTagsPutCall(contentId, coursesContentIdMetadataTagsPutRequest, _callback);

    }

    /**
     * Update course tags
     * Add or update course tags in the metadata of a course.
     * @param contentId The content Id (required)
     * @param coursesContentIdMetadataTagsPutRequest  (required)
     * @return CourseMetaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Course detail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public CourseMetaResponse coursesContentIdMetadataTagsPut(String contentId, CoursesContentIdMetadataTagsPutRequest coursesContentIdMetadataTagsPutRequest) throws ApiException {
        ApiResponse<CourseMetaResponse> localVarResp = coursesContentIdMetadataTagsPutWithHttpInfo(contentId, coursesContentIdMetadataTagsPutRequest);
        return localVarResp.getData();
    }

    /**
     * Update course tags
     * Add or update course tags in the metadata of a course.
     * @param contentId The content Id (required)
     * @param coursesContentIdMetadataTagsPutRequest  (required)
     * @return ApiResponse&lt;CourseMetaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Course detail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CourseMetaResponse> coursesContentIdMetadataTagsPutWithHttpInfo(String contentId, CoursesContentIdMetadataTagsPutRequest coursesContentIdMetadataTagsPutRequest) throws ApiException {
        okhttp3.Call localVarCall = coursesContentIdMetadataTagsPutValidateBeforeCall(contentId, coursesContentIdMetadataTagsPutRequest, null);
        Type localVarReturnType = new TypeToken<CourseMetaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update course tags (asynchronously)
     * Add or update course tags in the metadata of a course.
     * @param contentId The content Id (required)
     * @param coursesContentIdMetadataTagsPutRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Course detail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coursesContentIdMetadataTagsPutAsync(String contentId, CoursesContentIdMetadataTagsPutRequest coursesContentIdMetadataTagsPutRequest, final ApiCallback<CourseMetaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = coursesContentIdMetadataTagsPutValidateBeforeCall(contentId, coursesContentIdMetadataTagsPutRequest, _callback);
        Type localVarReturnType = new TypeToken<CourseMetaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for coursesContentIdMetadataTopicPut
     * @param contentId The content Id (required)
     * @param coursesContentIdMetadataTopicPutRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Course detail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coursesContentIdMetadataTopicPutCall(String contentId, CoursesContentIdMetadataTopicPutRequest coursesContentIdMetadataTopicPutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coursesContentIdMetadataTopicPutRequest;

        // create path and map variables
        String localVarPath = "/courses/{contentId}/metadata/topic"
            .replace("{" + "contentId" + "}", localVarApiClient.escapeString(contentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call coursesContentIdMetadataTopicPutValidateBeforeCall(String contentId, CoursesContentIdMetadataTopicPutRequest coursesContentIdMetadataTopicPutRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling coursesContentIdMetadataTopicPut(Async)");
        }

        // verify the required parameter 'coursesContentIdMetadataTopicPutRequest' is set
        if (coursesContentIdMetadataTopicPutRequest == null) {
            throw new ApiException("Missing the required parameter 'coursesContentIdMetadataTopicPutRequest' when calling coursesContentIdMetadataTopicPut(Async)");
        }

        return coursesContentIdMetadataTopicPutCall(contentId, coursesContentIdMetadataTopicPutRequest, _callback);

    }

    /**
     * Update course topic
     * Add or update the course topic in the metadata of a course.
     * @param contentId The content Id (required)
     * @param coursesContentIdMetadataTopicPutRequest  (required)
     * @return CourseMetaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Course detail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public CourseMetaResponse coursesContentIdMetadataTopicPut(String contentId, CoursesContentIdMetadataTopicPutRequest coursesContentIdMetadataTopicPutRequest) throws ApiException {
        ApiResponse<CourseMetaResponse> localVarResp = coursesContentIdMetadataTopicPutWithHttpInfo(contentId, coursesContentIdMetadataTopicPutRequest);
        return localVarResp.getData();
    }

    /**
     * Update course topic
     * Add or update the course topic in the metadata of a course.
     * @param contentId The content Id (required)
     * @param coursesContentIdMetadataTopicPutRequest  (required)
     * @return ApiResponse&lt;CourseMetaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Course detail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CourseMetaResponse> coursesContentIdMetadataTopicPutWithHttpInfo(String contentId, CoursesContentIdMetadataTopicPutRequest coursesContentIdMetadataTopicPutRequest) throws ApiException {
        okhttp3.Call localVarCall = coursesContentIdMetadataTopicPutValidateBeforeCall(contentId, coursesContentIdMetadataTopicPutRequest, null);
        Type localVarReturnType = new TypeToken<CourseMetaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update course topic (asynchronously)
     * Add or update the course topic in the metadata of a course.
     * @param contentId The content Id (required)
     * @param coursesContentIdMetadataTopicPutRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Course detail </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call coursesContentIdMetadataTopicPutAsync(String contentId, CoursesContentIdMetadataTopicPutRequest coursesContentIdMetadataTopicPutRequest, final ApiCallback<CourseMetaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = coursesContentIdMetadataTopicPutValidateBeforeCall(contentId, coursesContentIdMetadataTopicPutRequest, _callback);
        Type localVarReturnType = new TypeToken<CourseMetaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
