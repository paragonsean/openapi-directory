/*
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.PulseAnswer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PulseResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:36.016710-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PulseResponse {
  public static final String SERIALIZED_NAME_LEARNER_FIRST_NAME = "learnerFirstName";
  @SerializedName(SERIALIZED_NAME_LEARNER_FIRST_NAME)
  private String learnerFirstName;

  public static final String SERIALIZED_NAME_LEARNER_ID = "learnerId";
  @SerializedName(SERIALIZED_NAME_LEARNER_ID)
  private String learnerId;

  public static final String SERIALIZED_NAME_LEARNER_LAST_NAME = "learnerLastName";
  @SerializedName(SERIALIZED_NAME_LEARNER_LAST_NAME)
  private String learnerLastName;

  public static final String SERIALIZED_NAME_PULSE_BASE_ID = "pulseBaseId";
  @SerializedName(SERIALIZED_NAME_PULSE_BASE_ID)
  private String pulseBaseId;

  public static final String SERIALIZED_NAME_PULSE_INSTANCE_ID = "pulseInstanceId";
  @SerializedName(SERIALIZED_NAME_PULSE_INSTANCE_ID)
  private String pulseInstanceId;

  public static final String SERIALIZED_NAME_PULSE_QUESTION = "pulseQuestion";
  @SerializedName(SERIALIZED_NAME_PULSE_QUESTION)
  private String pulseQuestion;

  public static final String SERIALIZED_NAME_PULSE_RUN_DURATION_MINUTES = "pulseRunDurationMinutes";
  @SerializedName(SERIALIZED_NAME_PULSE_RUN_DURATION_MINUTES)
  private Integer pulseRunDurationMinutes;

  public static final String SERIALIZED_NAME_PULSE_RUN_START = "pulseRunStart";
  @SerializedName(SERIALIZED_NAME_PULSE_RUN_START)
  private OffsetDateTime pulseRunStart;

  public static final String SERIALIZED_NAME_PULSE_TYPE = "pulseType";
  @SerializedName(SERIALIZED_NAME_PULSE_TYPE)
  private String pulseType;

  public static final String SERIALIZED_NAME_RESPONSE = "response";
  @SerializedName(SERIALIZED_NAME_RESPONSE)
  private PulseAnswer response;

  public static final String SERIALIZED_NAME_RESPONSE_TIME = "responseTime";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TIME)
  private OffsetDateTime responseTime;

  public PulseResponse() {
  }

  public PulseResponse learnerFirstName(String learnerFirstName) {
    this.learnerFirstName = learnerFirstName;
    return this;
  }

  /**
   * Get learnerFirstName
   * @return learnerFirstName
   */
  @javax.annotation.Nullable
  public String getLearnerFirstName() {
    return learnerFirstName;
  }

  public void setLearnerFirstName(String learnerFirstName) {
    this.learnerFirstName = learnerFirstName;
  }


  public PulseResponse learnerId(String learnerId) {
    this.learnerId = learnerId;
    return this;
  }

  /**
   * Get learnerId
   * @return learnerId
   */
  @javax.annotation.Nullable
  public String getLearnerId() {
    return learnerId;
  }

  public void setLearnerId(String learnerId) {
    this.learnerId = learnerId;
  }


  public PulseResponse learnerLastName(String learnerLastName) {
    this.learnerLastName = learnerLastName;
    return this;
  }

  /**
   * Get learnerLastName
   * @return learnerLastName
   */
  @javax.annotation.Nullable
  public String getLearnerLastName() {
    return learnerLastName;
  }

  public void setLearnerLastName(String learnerLastName) {
    this.learnerLastName = learnerLastName;
  }


  public PulseResponse pulseBaseId(String pulseBaseId) {
    this.pulseBaseId = pulseBaseId;
    return this;
  }

  /**
   * Get pulseBaseId
   * @return pulseBaseId
   */
  @javax.annotation.Nullable
  public String getPulseBaseId() {
    return pulseBaseId;
  }

  public void setPulseBaseId(String pulseBaseId) {
    this.pulseBaseId = pulseBaseId;
  }


  public PulseResponse pulseInstanceId(String pulseInstanceId) {
    this.pulseInstanceId = pulseInstanceId;
    return this;
  }

  /**
   * Get pulseInstanceId
   * @return pulseInstanceId
   */
  @javax.annotation.Nullable
  public String getPulseInstanceId() {
    return pulseInstanceId;
  }

  public void setPulseInstanceId(String pulseInstanceId) {
    this.pulseInstanceId = pulseInstanceId;
  }


  public PulseResponse pulseQuestion(String pulseQuestion) {
    this.pulseQuestion = pulseQuestion;
    return this;
  }

  /**
   * Get pulseQuestion
   * @return pulseQuestion
   */
  @javax.annotation.Nullable
  public String getPulseQuestion() {
    return pulseQuestion;
  }

  public void setPulseQuestion(String pulseQuestion) {
    this.pulseQuestion = pulseQuestion;
  }


  public PulseResponse pulseRunDurationMinutes(Integer pulseRunDurationMinutes) {
    this.pulseRunDurationMinutes = pulseRunDurationMinutes;
    return this;
  }

  /**
   * Get pulseRunDurationMinutes
   * @return pulseRunDurationMinutes
   */
  @javax.annotation.Nullable
  public Integer getPulseRunDurationMinutes() {
    return pulseRunDurationMinutes;
  }

  public void setPulseRunDurationMinutes(Integer pulseRunDurationMinutes) {
    this.pulseRunDurationMinutes = pulseRunDurationMinutes;
  }


  public PulseResponse pulseRunStart(OffsetDateTime pulseRunStart) {
    this.pulseRunStart = pulseRunStart;
    return this;
  }

  /**
   * Get pulseRunStart
   * @return pulseRunStart
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPulseRunStart() {
    return pulseRunStart;
  }

  public void setPulseRunStart(OffsetDateTime pulseRunStart) {
    this.pulseRunStart = pulseRunStart;
  }


  public PulseResponse pulseType(String pulseType) {
    this.pulseType = pulseType;
    return this;
  }

  /**
   * Get pulseType
   * @return pulseType
   */
  @javax.annotation.Nullable
  public String getPulseType() {
    return pulseType;
  }

  public void setPulseType(String pulseType) {
    this.pulseType = pulseType;
  }


  public PulseResponse response(PulseAnswer response) {
    this.response = response;
    return this;
  }

  /**
   * Get response
   * @return response
   */
  @javax.annotation.Nullable
  public PulseAnswer getResponse() {
    return response;
  }

  public void setResponse(PulseAnswer response) {
    this.response = response;
  }


  public PulseResponse responseTime(OffsetDateTime responseTime) {
    this.responseTime = responseTime;
    return this;
  }

  /**
   * Get responseTime
   * @return responseTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getResponseTime() {
    return responseTime;
  }

  public void setResponseTime(OffsetDateTime responseTime) {
    this.responseTime = responseTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PulseResponse pulseResponse = (PulseResponse) o;
    return Objects.equals(this.learnerFirstName, pulseResponse.learnerFirstName) &&
        Objects.equals(this.learnerId, pulseResponse.learnerId) &&
        Objects.equals(this.learnerLastName, pulseResponse.learnerLastName) &&
        Objects.equals(this.pulseBaseId, pulseResponse.pulseBaseId) &&
        Objects.equals(this.pulseInstanceId, pulseResponse.pulseInstanceId) &&
        Objects.equals(this.pulseQuestion, pulseResponse.pulseQuestion) &&
        Objects.equals(this.pulseRunDurationMinutes, pulseResponse.pulseRunDurationMinutes) &&
        Objects.equals(this.pulseRunStart, pulseResponse.pulseRunStart) &&
        Objects.equals(this.pulseType, pulseResponse.pulseType) &&
        Objects.equals(this.response, pulseResponse.response) &&
        Objects.equals(this.responseTime, pulseResponse.responseTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(learnerFirstName, learnerId, learnerLastName, pulseBaseId, pulseInstanceId, pulseQuestion, pulseRunDurationMinutes, pulseRunStart, pulseType, response, responseTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PulseResponse {\n");
    sb.append("    learnerFirstName: ").append(toIndentedString(learnerFirstName)).append("\n");
    sb.append("    learnerId: ").append(toIndentedString(learnerId)).append("\n");
    sb.append("    learnerLastName: ").append(toIndentedString(learnerLastName)).append("\n");
    sb.append("    pulseBaseId: ").append(toIndentedString(pulseBaseId)).append("\n");
    sb.append("    pulseInstanceId: ").append(toIndentedString(pulseInstanceId)).append("\n");
    sb.append("    pulseQuestion: ").append(toIndentedString(pulseQuestion)).append("\n");
    sb.append("    pulseRunDurationMinutes: ").append(toIndentedString(pulseRunDurationMinutes)).append("\n");
    sb.append("    pulseRunStart: ").append(toIndentedString(pulseRunStart)).append("\n");
    sb.append("    pulseType: ").append(toIndentedString(pulseType)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    responseTime: ").append(toIndentedString(responseTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("learnerFirstName");
    openapiFields.add("learnerId");
    openapiFields.add("learnerLastName");
    openapiFields.add("pulseBaseId");
    openapiFields.add("pulseInstanceId");
    openapiFields.add("pulseQuestion");
    openapiFields.add("pulseRunDurationMinutes");
    openapiFields.add("pulseRunStart");
    openapiFields.add("pulseType");
    openapiFields.add("response");
    openapiFields.add("responseTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PulseResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PulseResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PulseResponse is not found in the empty JSON string", PulseResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PulseResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PulseResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("learnerFirstName") != null && !jsonObj.get("learnerFirstName").isJsonNull()) && !jsonObj.get("learnerFirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `learnerFirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("learnerFirstName").toString()));
      }
      if ((jsonObj.get("learnerId") != null && !jsonObj.get("learnerId").isJsonNull()) && !jsonObj.get("learnerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `learnerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("learnerId").toString()));
      }
      if ((jsonObj.get("learnerLastName") != null && !jsonObj.get("learnerLastName").isJsonNull()) && !jsonObj.get("learnerLastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `learnerLastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("learnerLastName").toString()));
      }
      if ((jsonObj.get("pulseBaseId") != null && !jsonObj.get("pulseBaseId").isJsonNull()) && !jsonObj.get("pulseBaseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pulseBaseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pulseBaseId").toString()));
      }
      if ((jsonObj.get("pulseInstanceId") != null && !jsonObj.get("pulseInstanceId").isJsonNull()) && !jsonObj.get("pulseInstanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pulseInstanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pulseInstanceId").toString()));
      }
      if ((jsonObj.get("pulseQuestion") != null && !jsonObj.get("pulseQuestion").isJsonNull()) && !jsonObj.get("pulseQuestion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pulseQuestion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pulseQuestion").toString()));
      }
      if ((jsonObj.get("pulseType") != null && !jsonObj.get("pulseType").isJsonNull()) && !jsonObj.get("pulseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pulseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pulseType").toString()));
      }
      // validate the optional field `response`
      if (jsonObj.get("response") != null && !jsonObj.get("response").isJsonNull()) {
        PulseAnswer.validateJsonElement(jsonObj.get("response"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PulseResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PulseResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PulseResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PulseResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PulseResponse>() {
           @Override
           public void write(JsonWriter out, PulseResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PulseResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PulseResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PulseResponse
   * @throws IOException if the JSON string is invalid with respect to PulseResponse
   */
  public static PulseResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PulseResponse.class);
  }

  /**
   * Convert an instance of PulseResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

