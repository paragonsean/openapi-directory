/*
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ChannelGroup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Channel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:36.016710-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Channel {
  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private ChannelGroup group;

  public static final String SERIALIZED_NAME_GROUP_DISCUSSION = "groupDiscussion";
  @SerializedName(SERIALIZED_NAME_GROUP_DISCUSSION)
  private Boolean groupDiscussion;

  public static final String SERIALIZED_NAME_IS_BROADCAST_ONLY = "isBroadcastOnly";
  @SerializedName(SERIALIZED_NAME_IS_BROADCAST_ONLY)
  private Boolean isBroadcastOnly;

  public static final String SERIALIZED_NAME_PRIVATE_SUPPORT = "privateSupport";
  @SerializedName(SERIALIZED_NAME_PRIVATE_SUPPORT)
  private Boolean privateSupport;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public Channel() {
  }

  public Channel group(ChannelGroup group) {
    this.group = group;
    return this;
  }

  /**
   * Get group
   * @return group
   */
  @javax.annotation.Nullable
  public ChannelGroup getGroup() {
    return group;
  }

  public void setGroup(ChannelGroup group) {
    this.group = group;
  }


  public Channel groupDiscussion(Boolean groupDiscussion) {
    this.groupDiscussion = groupDiscussion;
    return this;
  }

  /**
   * Get groupDiscussion
   * @return groupDiscussion
   */
  @javax.annotation.Nullable
  public Boolean getGroupDiscussion() {
    return groupDiscussion;
  }

  public void setGroupDiscussion(Boolean groupDiscussion) {
    this.groupDiscussion = groupDiscussion;
  }


  public Channel isBroadcastOnly(Boolean isBroadcastOnly) {
    this.isBroadcastOnly = isBroadcastOnly;
    return this;
  }

  /**
   * Get isBroadcastOnly
   * @return isBroadcastOnly
   */
  @javax.annotation.Nullable
  public Boolean getIsBroadcastOnly() {
    return isBroadcastOnly;
  }

  public void setIsBroadcastOnly(Boolean isBroadcastOnly) {
    this.isBroadcastOnly = isBroadcastOnly;
  }


  public Channel privateSupport(Boolean privateSupport) {
    this.privateSupport = privateSupport;
    return this;
  }

  /**
   * Get privateSupport
   * @return privateSupport
   */
  @javax.annotation.Nullable
  public Boolean getPrivateSupport() {
    return privateSupport;
  }

  public void setPrivateSupport(Boolean privateSupport) {
    this.privateSupport = privateSupport;
  }


  public Channel title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Channel channel = (Channel) o;
    return Objects.equals(this.group, channel.group) &&
        Objects.equals(this.groupDiscussion, channel.groupDiscussion) &&
        Objects.equals(this.isBroadcastOnly, channel.isBroadcastOnly) &&
        Objects.equals(this.privateSupport, channel.privateSupport) &&
        Objects.equals(this.title, channel.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(group, groupDiscussion, isBroadcastOnly, privateSupport, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Channel {\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    groupDiscussion: ").append(toIndentedString(groupDiscussion)).append("\n");
    sb.append("    isBroadcastOnly: ").append(toIndentedString(isBroadcastOnly)).append("\n");
    sb.append("    privateSupport: ").append(toIndentedString(privateSupport)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("group");
    openapiFields.add("groupDiscussion");
    openapiFields.add("isBroadcastOnly");
    openapiFields.add("privateSupport");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Channel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Channel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Channel is not found in the empty JSON string", Channel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Channel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Channel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `group`
      if (jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) {
        ChannelGroup.validateJsonElement(jsonObj.get("group"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Channel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Channel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Channel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Channel.class));

       return (TypeAdapter<T>) new TypeAdapter<Channel>() {
           @Override
           public void write(JsonWriter out, Channel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Channel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Channel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Channel
   * @throws IOException if the JSON string is invalid with respect to Channel
   */
  public static Channel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Channel.class);
  }

  /**
   * Convert an instance of Channel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

