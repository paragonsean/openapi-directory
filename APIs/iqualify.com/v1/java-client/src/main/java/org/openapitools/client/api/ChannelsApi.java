/*
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Channel;
import org.openapitools.client.model.ChannelRequired;
import org.openapitools.client.model.ChannelResponse;
import org.openapitools.client.model.Comment;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.HttpPost;
import org.openapitools.client.model.OfferingsOfferingIdChannelsChannelIdLearnersPostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChannelsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChannelsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChannelsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGet
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetCall(String offeringId, String channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/analytics/channels/{channelId}/comments"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()))
            .replace("{" + "channelId" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetValidateBeforeCall(String offeringId, String channelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGet(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGet(Async)");
        }

        return offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetCall(offeringId, channelId, _callback);

    }

    /**
     * Find comments
     * Responds with a list of comments made in any posts in a specified channel, within an offering.
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @return List&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Comment> offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGet(String offeringId, String channelId) throws ApiException {
        ApiResponse<List<Comment>> localVarResp = offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetWithHttpInfo(offeringId, channelId);
        return localVarResp.getData();
    }

    /**
     * Find comments
     * Responds with a list of comments made in any posts in a specified channel, within an offering.
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @return ApiResponse&lt;List&lt;Comment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Comment>> offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetWithHttpInfo(String offeringId, String channelId) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetValidateBeforeCall(offeringId, channelId, null);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find comments (asynchronously)
     * Responds with a list of comments made in any posts in a specified channel, within an offering.
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetAsync(String offeringId, String channelId, final ApiCallback<List<Comment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetValidateBeforeCall(offeringId, channelId, _callback);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for offeringsOfferingIdAnalyticsChannelsChannelIdPostsGet
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetCall(String offeringId, String channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/analytics/channels/{channelId}/posts"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()))
            .replace("{" + "channelId" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetValidateBeforeCall(String offeringId, String channelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAnalyticsChannelsChannelIdPostsGet(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling offeringsOfferingIdAnalyticsChannelsChannelIdPostsGet(Async)");
        }

        return offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetCall(offeringId, channelId, _callback);

    }

    /**
     * Find posts
     * Responds with a list of posts made in a specified channel, within an offering.
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @return List&lt;HttpPost&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<HttpPost> offeringsOfferingIdAnalyticsChannelsChannelIdPostsGet(String offeringId, String channelId) throws ApiException {
        ApiResponse<List<HttpPost>> localVarResp = offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetWithHttpInfo(offeringId, channelId);
        return localVarResp.getData();
    }

    /**
     * Find posts
     * Responds with a list of posts made in a specified channel, within an offering.
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @return ApiResponse&lt;List&lt;HttpPost&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<HttpPost>> offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetWithHttpInfo(String offeringId, String channelId) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetValidateBeforeCall(offeringId, channelId, null);
        Type localVarReturnType = new TypeToken<List<HttpPost>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find posts (asynchronously)
     * Responds with a list of posts made in a specified channel, within an offering.
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetAsync(String offeringId, String channelId, final ApiCallback<List<HttpPost>> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetValidateBeforeCall(offeringId, channelId, _callback);
        Type localVarReturnType = new TypeToken<List<HttpPost>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGet
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetCall(String offeringId, String channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/analytics/channels/{channelId}/replies"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()))
            .replace("{" + "channelId" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetValidateBeforeCall(String offeringId, String channelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGet(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGet(Async)");
        }

        return offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetCall(offeringId, channelId, _callback);

    }

    /**
     * Find replies
     * Responds with a list of replies to comments in any posts in a specified channel, within an offering.
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @return List&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Comment> offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGet(String offeringId, String channelId) throws ApiException {
        ApiResponse<List<Comment>> localVarResp = offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetWithHttpInfo(offeringId, channelId);
        return localVarResp.getData();
    }

    /**
     * Find replies
     * Responds with a list of replies to comments in any posts in a specified channel, within an offering.
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @return ApiResponse&lt;List&lt;Comment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Comment>> offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetWithHttpInfo(String offeringId, String channelId) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetValidateBeforeCall(offeringId, channelId, null);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find replies (asynchronously)
     * Responds with a list of replies to comments in any posts in a specified channel, within an offering.
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetAsync(String offeringId, String channelId, final ApiCallback<List<Comment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetValidateBeforeCall(offeringId, channelId, _callback);
        Type localVarReturnType = new TypeToken<List<Comment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for offeringsOfferingIdChannelsChannelIdLearnersDelete
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @param offeringsOfferingIdChannelsChannelIdLearnersPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Learner successfully removed from the channel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdChannelsChannelIdLearnersDeleteCall(String offeringId, String channelId, OfferingsOfferingIdChannelsChannelIdLearnersPostRequest offeringsOfferingIdChannelsChannelIdLearnersPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = offeringsOfferingIdChannelsChannelIdLearnersPostRequest;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/channels/{channelId}/learners"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()))
            .replace("{" + "channelId" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdChannelsChannelIdLearnersDeleteValidateBeforeCall(String offeringId, String channelId, OfferingsOfferingIdChannelsChannelIdLearnersPostRequest offeringsOfferingIdChannelsChannelIdLearnersPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdChannelsChannelIdLearnersDelete(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling offeringsOfferingIdChannelsChannelIdLearnersDelete(Async)");
        }

        // verify the required parameter 'offeringsOfferingIdChannelsChannelIdLearnersPostRequest' is set
        if (offeringsOfferingIdChannelsChannelIdLearnersPostRequest == null) {
            throw new ApiException("Missing the required parameter 'offeringsOfferingIdChannelsChannelIdLearnersPostRequest' when calling offeringsOfferingIdChannelsChannelIdLearnersDelete(Async)");
        }

        return offeringsOfferingIdChannelsChannelIdLearnersDeleteCall(offeringId, channelId, offeringsOfferingIdChannelsChannelIdLearnersPostRequest, _callback);

    }

    /**
     * Remove learners from a group channel
     * Removes a learner from the specified group channel.
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @param offeringsOfferingIdChannelsChannelIdLearnersPostRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Learner successfully removed from the channel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void offeringsOfferingIdChannelsChannelIdLearnersDelete(String offeringId, String channelId, OfferingsOfferingIdChannelsChannelIdLearnersPostRequest offeringsOfferingIdChannelsChannelIdLearnersPostRequest) throws ApiException {
        offeringsOfferingIdChannelsChannelIdLearnersDeleteWithHttpInfo(offeringId, channelId, offeringsOfferingIdChannelsChannelIdLearnersPostRequest);
    }

    /**
     * Remove learners from a group channel
     * Removes a learner from the specified group channel.
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @param offeringsOfferingIdChannelsChannelIdLearnersPostRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Learner successfully removed from the channel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> offeringsOfferingIdChannelsChannelIdLearnersDeleteWithHttpInfo(String offeringId, String channelId, OfferingsOfferingIdChannelsChannelIdLearnersPostRequest offeringsOfferingIdChannelsChannelIdLearnersPostRequest) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdChannelsChannelIdLearnersDeleteValidateBeforeCall(offeringId, channelId, offeringsOfferingIdChannelsChannelIdLearnersPostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove learners from a group channel (asynchronously)
     * Removes a learner from the specified group channel.
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @param offeringsOfferingIdChannelsChannelIdLearnersPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Learner successfully removed from the channel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdChannelsChannelIdLearnersDeleteAsync(String offeringId, String channelId, OfferingsOfferingIdChannelsChannelIdLearnersPostRequest offeringsOfferingIdChannelsChannelIdLearnersPostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdChannelsChannelIdLearnersDeleteValidateBeforeCall(offeringId, channelId, offeringsOfferingIdChannelsChannelIdLearnersPostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for offeringsOfferingIdChannelsChannelIdLearnersGet
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> channel data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdChannelsChannelIdLearnersGetCall(String offeringId, String channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/channels/{channelId}/learners"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()))
            .replace("{" + "channelId" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdChannelsChannelIdLearnersGetValidateBeforeCall(String offeringId, String channelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdChannelsChannelIdLearnersGet(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling offeringsOfferingIdChannelsChannelIdLearnersGet(Async)");
        }

        return offeringsOfferingIdChannelsChannelIdLearnersGetCall(offeringId, channelId, _callback);

    }

    /**
     * Find learners in a group channel
     * Finds all learners in a specified group channel.
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @return ChannelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> channel data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ChannelResponse offeringsOfferingIdChannelsChannelIdLearnersGet(String offeringId, String channelId) throws ApiException {
        ApiResponse<ChannelResponse> localVarResp = offeringsOfferingIdChannelsChannelIdLearnersGetWithHttpInfo(offeringId, channelId);
        return localVarResp.getData();
    }

    /**
     * Find learners in a group channel
     * Finds all learners in a specified group channel.
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @return ApiResponse&lt;ChannelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> channel data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChannelResponse> offeringsOfferingIdChannelsChannelIdLearnersGetWithHttpInfo(String offeringId, String channelId) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdChannelsChannelIdLearnersGetValidateBeforeCall(offeringId, channelId, null);
        Type localVarReturnType = new TypeToken<ChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find learners in a group channel (asynchronously)
     * Finds all learners in a specified group channel.
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> channel data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdChannelsChannelIdLearnersGetAsync(String offeringId, String channelId, final ApiCallback<ChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdChannelsChannelIdLearnersGetValidateBeforeCall(offeringId, channelId, _callback);
        Type localVarReturnType = new TypeToken<ChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for offeringsOfferingIdChannelsChannelIdLearnersPost
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @param offeringsOfferingIdChannelsChannelIdLearnersPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Learner successfully added to the channel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdChannelsChannelIdLearnersPostCall(String offeringId, String channelId, OfferingsOfferingIdChannelsChannelIdLearnersPostRequest offeringsOfferingIdChannelsChannelIdLearnersPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = offeringsOfferingIdChannelsChannelIdLearnersPostRequest;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/channels/{channelId}/learners"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()))
            .replace("{" + "channelId" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdChannelsChannelIdLearnersPostValidateBeforeCall(String offeringId, String channelId, OfferingsOfferingIdChannelsChannelIdLearnersPostRequest offeringsOfferingIdChannelsChannelIdLearnersPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdChannelsChannelIdLearnersPost(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling offeringsOfferingIdChannelsChannelIdLearnersPost(Async)");
        }

        // verify the required parameter 'offeringsOfferingIdChannelsChannelIdLearnersPostRequest' is set
        if (offeringsOfferingIdChannelsChannelIdLearnersPostRequest == null) {
            throw new ApiException("Missing the required parameter 'offeringsOfferingIdChannelsChannelIdLearnersPostRequest' when calling offeringsOfferingIdChannelsChannelIdLearnersPost(Async)");
        }

        return offeringsOfferingIdChannelsChannelIdLearnersPostCall(offeringId, channelId, offeringsOfferingIdChannelsChannelIdLearnersPostRequest, _callback);

    }

    /**
     * Add learners to a group channel
     * Adds a learner to a specified group channel.
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @param offeringsOfferingIdChannelsChannelIdLearnersPostRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Learner successfully added to the channel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void offeringsOfferingIdChannelsChannelIdLearnersPost(String offeringId, String channelId, OfferingsOfferingIdChannelsChannelIdLearnersPostRequest offeringsOfferingIdChannelsChannelIdLearnersPostRequest) throws ApiException {
        offeringsOfferingIdChannelsChannelIdLearnersPostWithHttpInfo(offeringId, channelId, offeringsOfferingIdChannelsChannelIdLearnersPostRequest);
    }

    /**
     * Add learners to a group channel
     * Adds a learner to a specified group channel.
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @param offeringsOfferingIdChannelsChannelIdLearnersPostRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Learner successfully added to the channel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> offeringsOfferingIdChannelsChannelIdLearnersPostWithHttpInfo(String offeringId, String channelId, OfferingsOfferingIdChannelsChannelIdLearnersPostRequest offeringsOfferingIdChannelsChannelIdLearnersPostRequest) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdChannelsChannelIdLearnersPostValidateBeforeCall(offeringId, channelId, offeringsOfferingIdChannelsChannelIdLearnersPostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add learners to a group channel (asynchronously)
     * Adds a learner to a specified group channel.
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @param offeringsOfferingIdChannelsChannelIdLearnersPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Learner successfully added to the channel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdChannelsChannelIdLearnersPostAsync(String offeringId, String channelId, OfferingsOfferingIdChannelsChannelIdLearnersPostRequest offeringsOfferingIdChannelsChannelIdLearnersPostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdChannelsChannelIdLearnersPostValidateBeforeCall(offeringId, channelId, offeringsOfferingIdChannelsChannelIdLearnersPostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for offeringsOfferingIdChannelsChannelIdPatch
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @param channel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> channel successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdChannelsChannelIdPatchCall(String offeringId, String channelId, Channel channel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = channel;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/channels/{channelId}"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()))
            .replace("{" + "channelId" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdChannelsChannelIdPatchValidateBeforeCall(String offeringId, String channelId, Channel channel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdChannelsChannelIdPatch(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling offeringsOfferingIdChannelsChannelIdPatch(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling offeringsOfferingIdChannelsChannelIdPatch(Async)");
        }

        return offeringsOfferingIdChannelsChannelIdPatchCall(offeringId, channelId, channel, _callback);

    }

    /**
     * Update channel
     * Updates a channel in an offering.
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @param channel  (required)
     * @return ChannelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> channel successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ChannelResponse offeringsOfferingIdChannelsChannelIdPatch(String offeringId, String channelId, Channel channel) throws ApiException {
        ApiResponse<ChannelResponse> localVarResp = offeringsOfferingIdChannelsChannelIdPatchWithHttpInfo(offeringId, channelId, channel);
        return localVarResp.getData();
    }

    /**
     * Update channel
     * Updates a channel in an offering.
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @param channel  (required)
     * @return ApiResponse&lt;ChannelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> channel successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChannelResponse> offeringsOfferingIdChannelsChannelIdPatchWithHttpInfo(String offeringId, String channelId, Channel channel) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdChannelsChannelIdPatchValidateBeforeCall(offeringId, channelId, channel, null);
        Type localVarReturnType = new TypeToken<ChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update channel (asynchronously)
     * Updates a channel in an offering.
     * @param offeringId offering&#39;s id (required)
     * @param channelId channel&#39;s id (required)
     * @param channel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> channel successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdChannelsChannelIdPatchAsync(String offeringId, String channelId, Channel channel, final ApiCallback<ChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdChannelsChannelIdPatchValidateBeforeCall(offeringId, channelId, channel, _callback);
        Type localVarReturnType = new TypeToken<ChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for offeringsOfferingIdChannelsGet
     * @param offeringId offering&#39;s id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdChannelsGetCall(String offeringId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/channels"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdChannelsGetValidateBeforeCall(String offeringId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdChannelsGet(Async)");
        }

        return offeringsOfferingIdChannelsGetCall(offeringId, _callback);

    }

    /**
     * Find channels
     * Responds with a list of channels in an offering.
     * @param offeringId offering&#39;s id (required)
     * @return List&lt;ChannelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ChannelResponse> offeringsOfferingIdChannelsGet(String offeringId) throws ApiException {
        ApiResponse<List<ChannelResponse>> localVarResp = offeringsOfferingIdChannelsGetWithHttpInfo(offeringId);
        return localVarResp.getData();
    }

    /**
     * Find channels
     * Responds with a list of channels in an offering.
     * @param offeringId offering&#39;s id (required)
     * @return ApiResponse&lt;List&lt;ChannelResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ChannelResponse>> offeringsOfferingIdChannelsGetWithHttpInfo(String offeringId) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdChannelsGetValidateBeforeCall(offeringId, null);
        Type localVarReturnType = new TypeToken<List<ChannelResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find channels (asynchronously)
     * Responds with a list of channels in an offering.
     * @param offeringId offering&#39;s id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdChannelsGetAsync(String offeringId, final ApiCallback<List<ChannelResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdChannelsGetValidateBeforeCall(offeringId, _callback);
        Type localVarReturnType = new TypeToken<List<ChannelResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for offeringsOfferingIdChannelsPost
     * @param offeringId offering&#39;s id (required)
     * @param channelRequired  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> channel successfully added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdChannelsPostCall(String offeringId, ChannelRequired channelRequired, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = channelRequired;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/channels"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdChannelsPostValidateBeforeCall(String offeringId, ChannelRequired channelRequired, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdChannelsPost(Async)");
        }

        // verify the required parameter 'channelRequired' is set
        if (channelRequired == null) {
            throw new ApiException("Missing the required parameter 'channelRequired' when calling offeringsOfferingIdChannelsPost(Async)");
        }

        return offeringsOfferingIdChannelsPostCall(offeringId, channelRequired, _callback);

    }

    /**
     * Add channel
     * Adds new channel to the specified offering.
     * @param offeringId offering&#39;s id (required)
     * @param channelRequired  (required)
     * @return ChannelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> channel successfully added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ChannelResponse offeringsOfferingIdChannelsPost(String offeringId, ChannelRequired channelRequired) throws ApiException {
        ApiResponse<ChannelResponse> localVarResp = offeringsOfferingIdChannelsPostWithHttpInfo(offeringId, channelRequired);
        return localVarResp.getData();
    }

    /**
     * Add channel
     * Adds new channel to the specified offering.
     * @param offeringId offering&#39;s id (required)
     * @param channelRequired  (required)
     * @return ApiResponse&lt;ChannelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> channel successfully added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChannelResponse> offeringsOfferingIdChannelsPostWithHttpInfo(String offeringId, ChannelRequired channelRequired) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdChannelsPostValidateBeforeCall(offeringId, channelRequired, null);
        Type localVarReturnType = new TypeToken<ChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add channel (asynchronously)
     * Adds new channel to the specified offering.
     * @param offeringId offering&#39;s id (required)
     * @param channelRequired  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> channel successfully added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdChannelsPostAsync(String offeringId, ChannelRequired channelRequired, final ApiCallback<ChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdChannelsPostValidateBeforeCall(offeringId, channelRequired, _callback);
        Type localVarReturnType = new TypeToken<ChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
