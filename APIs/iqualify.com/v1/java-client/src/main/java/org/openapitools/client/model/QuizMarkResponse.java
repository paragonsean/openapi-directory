/*
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QuizMarkResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:36.016710-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QuizMarkResponse {
  public static final String SERIALIZED_NAME_ATTEMPTS = "attempts";
  @SerializedName(SERIALIZED_NAME_ATTEMPTS)
  private Integer attempts;

  public static final String SERIALIZED_NAME_LAST_ATTEMPT_AT = "lastAttemptAt";
  @SerializedName(SERIALIZED_NAME_LAST_ATTEMPT_AT)
  private OffsetDateTime lastAttemptAt;

  public static final String SERIALIZED_NAME_LEARNER_EMAIL = "learnerEmail";
  @SerializedName(SERIALIZED_NAME_LEARNER_EMAIL)
  private String learnerEmail;

  public static final String SERIALIZED_NAME_LEARNER_FULLNAME = "learnerFullname";
  @SerializedName(SERIALIZED_NAME_LEARNER_FULLNAME)
  private String learnerFullname;

  public static final String SERIALIZED_NAME_LEARNER_PERSON_ID = "learnerPersonId";
  @SerializedName(SERIALIZED_NAME_LEARNER_PERSON_ID)
  private String learnerPersonId;

  public static final String SERIALIZED_NAME_MARK = "mark";
  @SerializedName(SERIALIZED_NAME_MARK)
  private String mark;

  public static final String SERIALIZED_NAME_QUIZ_ID = "quizId";
  @SerializedName(SERIALIZED_NAME_QUIZ_ID)
  private String quizId;

  public static final String SERIALIZED_NAME_QUIZ_TITLE = "quizTitle";
  @SerializedName(SERIALIZED_NAME_QUIZ_TITLE)
  private String quizTitle;

  public QuizMarkResponse() {
  }

  public QuizMarkResponse attempts(Integer attempts) {
    this.attempts = attempts;
    return this;
  }

  /**
   * Get attempts
   * @return attempts
   */
  @javax.annotation.Nullable
  public Integer getAttempts() {
    return attempts;
  }

  public void setAttempts(Integer attempts) {
    this.attempts = attempts;
  }


  public QuizMarkResponse lastAttemptAt(OffsetDateTime lastAttemptAt) {
    this.lastAttemptAt = lastAttemptAt;
    return this;
  }

  /**
   * Get lastAttemptAt
   * @return lastAttemptAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastAttemptAt() {
    return lastAttemptAt;
  }

  public void setLastAttemptAt(OffsetDateTime lastAttemptAt) {
    this.lastAttemptAt = lastAttemptAt;
  }


  public QuizMarkResponse learnerEmail(String learnerEmail) {
    this.learnerEmail = learnerEmail;
    return this;
  }

  /**
   * Get learnerEmail
   * @return learnerEmail
   */
  @javax.annotation.Nullable
  public String getLearnerEmail() {
    return learnerEmail;
  }

  public void setLearnerEmail(String learnerEmail) {
    this.learnerEmail = learnerEmail;
  }


  public QuizMarkResponse learnerFullname(String learnerFullname) {
    this.learnerFullname = learnerFullname;
    return this;
  }

  /**
   * Get learnerFullname
   * @return learnerFullname
   */
  @javax.annotation.Nullable
  public String getLearnerFullname() {
    return learnerFullname;
  }

  public void setLearnerFullname(String learnerFullname) {
    this.learnerFullname = learnerFullname;
  }


  public QuizMarkResponse learnerPersonId(String learnerPersonId) {
    this.learnerPersonId = learnerPersonId;
    return this;
  }

  /**
   * Get learnerPersonId
   * @return learnerPersonId
   */
  @javax.annotation.Nullable
  public String getLearnerPersonId() {
    return learnerPersonId;
  }

  public void setLearnerPersonId(String learnerPersonId) {
    this.learnerPersonId = learnerPersonId;
  }


  public QuizMarkResponse mark(String mark) {
    this.mark = mark;
    return this;
  }

  /**
   * Get mark
   * @return mark
   */
  @javax.annotation.Nullable
  public String getMark() {
    return mark;
  }

  public void setMark(String mark) {
    this.mark = mark;
  }


  public QuizMarkResponse quizId(String quizId) {
    this.quizId = quizId;
    return this;
  }

  /**
   * Get quizId
   * @return quizId
   */
  @javax.annotation.Nullable
  public String getQuizId() {
    return quizId;
  }

  public void setQuizId(String quizId) {
    this.quizId = quizId;
  }


  public QuizMarkResponse quizTitle(String quizTitle) {
    this.quizTitle = quizTitle;
    return this;
  }

  /**
   * Get quizTitle
   * @return quizTitle
   */
  @javax.annotation.Nullable
  public String getQuizTitle() {
    return quizTitle;
  }

  public void setQuizTitle(String quizTitle) {
    this.quizTitle = quizTitle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuizMarkResponse quizMarkResponse = (QuizMarkResponse) o;
    return Objects.equals(this.attempts, quizMarkResponse.attempts) &&
        Objects.equals(this.lastAttemptAt, quizMarkResponse.lastAttemptAt) &&
        Objects.equals(this.learnerEmail, quizMarkResponse.learnerEmail) &&
        Objects.equals(this.learnerFullname, quizMarkResponse.learnerFullname) &&
        Objects.equals(this.learnerPersonId, quizMarkResponse.learnerPersonId) &&
        Objects.equals(this.mark, quizMarkResponse.mark) &&
        Objects.equals(this.quizId, quizMarkResponse.quizId) &&
        Objects.equals(this.quizTitle, quizMarkResponse.quizTitle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attempts, lastAttemptAt, learnerEmail, learnerFullname, learnerPersonId, mark, quizId, quizTitle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuizMarkResponse {\n");
    sb.append("    attempts: ").append(toIndentedString(attempts)).append("\n");
    sb.append("    lastAttemptAt: ").append(toIndentedString(lastAttemptAt)).append("\n");
    sb.append("    learnerEmail: ").append(toIndentedString(learnerEmail)).append("\n");
    sb.append("    learnerFullname: ").append(toIndentedString(learnerFullname)).append("\n");
    sb.append("    learnerPersonId: ").append(toIndentedString(learnerPersonId)).append("\n");
    sb.append("    mark: ").append(toIndentedString(mark)).append("\n");
    sb.append("    quizId: ").append(toIndentedString(quizId)).append("\n");
    sb.append("    quizTitle: ").append(toIndentedString(quizTitle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attempts");
    openapiFields.add("lastAttemptAt");
    openapiFields.add("learnerEmail");
    openapiFields.add("learnerFullname");
    openapiFields.add("learnerPersonId");
    openapiFields.add("mark");
    openapiFields.add("quizId");
    openapiFields.add("quizTitle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QuizMarkResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QuizMarkResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuizMarkResponse is not found in the empty JSON string", QuizMarkResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QuizMarkResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QuizMarkResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("learnerEmail") != null && !jsonObj.get("learnerEmail").isJsonNull()) && !jsonObj.get("learnerEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `learnerEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("learnerEmail").toString()));
      }
      if ((jsonObj.get("learnerFullname") != null && !jsonObj.get("learnerFullname").isJsonNull()) && !jsonObj.get("learnerFullname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `learnerFullname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("learnerFullname").toString()));
      }
      if ((jsonObj.get("learnerPersonId") != null && !jsonObj.get("learnerPersonId").isJsonNull()) && !jsonObj.get("learnerPersonId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `learnerPersonId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("learnerPersonId").toString()));
      }
      if ((jsonObj.get("mark") != null && !jsonObj.get("mark").isJsonNull()) && !jsonObj.get("mark").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mark` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mark").toString()));
      }
      if ((jsonObj.get("quizId") != null && !jsonObj.get("quizId").isJsonNull()) && !jsonObj.get("quizId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quizId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quizId").toString()));
      }
      if ((jsonObj.get("quizTitle") != null && !jsonObj.get("quizTitle").isJsonNull()) && !jsonObj.get("quizTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quizTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quizTitle").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuizMarkResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuizMarkResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuizMarkResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuizMarkResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<QuizMarkResponse>() {
           @Override
           public void write(JsonWriter out, QuizMarkResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QuizMarkResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QuizMarkResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QuizMarkResponse
   * @throws IOException if the JSON string is invalid with respect to QuizMarkResponse
   */
  public static QuizMarkResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuizMarkResponse.class);
  }

  /**
   * Convert an instance of QuizMarkResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

