/*
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UserProfile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OfferingUserResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:36.016710-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OfferingUserResponse {
  public static final String SERIALIZED_NAME_AVATAR_URL = "avatarUrl";
  @SerializedName(SERIALIZED_NAME_AVATAR_URL)
  private String avatarUrl;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EVALUATED_BY = "evaluatedBy";
  @SerializedName(SERIALIZED_NAME_EVALUATED_BY)
  private List<String> evaluatedBy = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVALUATES = "evaluates";
  @SerializedName(SERIALIZED_NAME_EVALUATES)
  private List<String> evaluates = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_FACILITATOR = "isFacilitator";
  @SerializedName(SERIALIZED_NAME_IS_FACILITATOR)
  private Boolean isFacilitator = false;

  public static final String SERIALIZED_NAME_IS_MARKER = "isMarker";
  @SerializedName(SERIALIZED_NAME_IS_MARKER)
  private Boolean isMarker = false;

  public static final String SERIALIZED_NAME_IS_READONLY = "isReadonly";
  @SerializedName(SERIALIZED_NAME_IS_READONLY)
  private Boolean isReadonly = false;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_MARKED_BY = "markedBy";
  @SerializedName(SERIALIZED_NAME_MARKED_BY)
  private List<String> markedBy = new ArrayList<>();

  public static final String SERIALIZED_NAME_MARKS = "marks";
  @SerializedName(SERIALIZED_NAME_MARKS)
  private List<String> marks = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERSON_ID = "personId";
  @SerializedName(SERIALIZED_NAME_PERSON_ID)
  private String personId;

  public static final String SERIALIZED_NAME_PROFILE = "profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  private UserProfile profile;

  public OfferingUserResponse() {
  }

  public OfferingUserResponse avatarUrl(String avatarUrl) {
    this.avatarUrl = avatarUrl;
    return this;
  }

  /**
   * Get avatarUrl
   * @return avatarUrl
   */
  @javax.annotation.Nullable
  public String getAvatarUrl() {
    return avatarUrl;
  }

  public void setAvatarUrl(String avatarUrl) {
    this.avatarUrl = avatarUrl;
  }


  public OfferingUserResponse email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public OfferingUserResponse evaluatedBy(List<String> evaluatedBy) {
    this.evaluatedBy = evaluatedBy;
    return this;
  }

  public OfferingUserResponse addEvaluatedByItem(String evaluatedByItem) {
    if (this.evaluatedBy == null) {
      this.evaluatedBy = new ArrayList<>();
    }
    this.evaluatedBy.add(evaluatedByItem);
    return this;
  }

  /**
   * Get evaluatedBy
   * @return evaluatedBy
   */
  @javax.annotation.Nullable
  public List<String> getEvaluatedBy() {
    return evaluatedBy;
  }

  public void setEvaluatedBy(List<String> evaluatedBy) {
    this.evaluatedBy = evaluatedBy;
  }


  public OfferingUserResponse evaluates(List<String> evaluates) {
    this.evaluates = evaluates;
    return this;
  }

  public OfferingUserResponse addEvaluatesItem(String evaluatesItem) {
    if (this.evaluates == null) {
      this.evaluates = new ArrayList<>();
    }
    this.evaluates.add(evaluatesItem);
    return this;
  }

  /**
   * Get evaluates
   * @return evaluates
   */
  @javax.annotation.Nullable
  public List<String> getEvaluates() {
    return evaluates;
  }

  public void setEvaluates(List<String> evaluates) {
    this.evaluates = evaluates;
  }


  public OfferingUserResponse firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public OfferingUserResponse id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public OfferingUserResponse isFacilitator(Boolean isFacilitator) {
    this.isFacilitator = isFacilitator;
    return this;
  }

  /**
   * Get isFacilitator
   * @return isFacilitator
   */
  @javax.annotation.Nullable
  public Boolean getIsFacilitator() {
    return isFacilitator;
  }

  public void setIsFacilitator(Boolean isFacilitator) {
    this.isFacilitator = isFacilitator;
  }


  public OfferingUserResponse isMarker(Boolean isMarker) {
    this.isMarker = isMarker;
    return this;
  }

  /**
   * Get isMarker
   * @return isMarker
   */
  @javax.annotation.Nullable
  public Boolean getIsMarker() {
    return isMarker;
  }

  public void setIsMarker(Boolean isMarker) {
    this.isMarker = isMarker;
  }


  public OfferingUserResponse isReadonly(Boolean isReadonly) {
    this.isReadonly = isReadonly;
    return this;
  }

  /**
   * Get isReadonly
   * @return isReadonly
   */
  @javax.annotation.Nullable
  public Boolean getIsReadonly() {
    return isReadonly;
  }

  public void setIsReadonly(Boolean isReadonly) {
    this.isReadonly = isReadonly;
  }


  public OfferingUserResponse lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Get lastName
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public OfferingUserResponse markedBy(List<String> markedBy) {
    this.markedBy = markedBy;
    return this;
  }

  public OfferingUserResponse addMarkedByItem(String markedByItem) {
    if (this.markedBy == null) {
      this.markedBy = new ArrayList<>();
    }
    this.markedBy.add(markedByItem);
    return this;
  }

  /**
   * Get markedBy
   * @return markedBy
   */
  @javax.annotation.Nullable
  public List<String> getMarkedBy() {
    return markedBy;
  }

  public void setMarkedBy(List<String> markedBy) {
    this.markedBy = markedBy;
  }


  public OfferingUserResponse marks(List<String> marks) {
    this.marks = marks;
    return this;
  }

  public OfferingUserResponse addMarksItem(String marksItem) {
    if (this.marks == null) {
      this.marks = new ArrayList<>();
    }
    this.marks.add(marksItem);
    return this;
  }

  /**
   * Get marks
   * @return marks
   */
  @javax.annotation.Nullable
  public List<String> getMarks() {
    return marks;
  }

  public void setMarks(List<String> marks) {
    this.marks = marks;
  }


  public OfferingUserResponse personId(String personId) {
    this.personId = personId;
    return this;
  }

  /**
   * Get personId
   * @return personId
   */
  @javax.annotation.Nullable
  public String getPersonId() {
    return personId;
  }

  public void setPersonId(String personId) {
    this.personId = personId;
  }


  public OfferingUserResponse profile(UserProfile profile) {
    this.profile = profile;
    return this;
  }

  /**
   * Get profile
   * @return profile
   */
  @javax.annotation.Nullable
  public UserProfile getProfile() {
    return profile;
  }

  public void setProfile(UserProfile profile) {
    this.profile = profile;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OfferingUserResponse offeringUserResponse = (OfferingUserResponse) o;
    return Objects.equals(this.avatarUrl, offeringUserResponse.avatarUrl) &&
        Objects.equals(this.email, offeringUserResponse.email) &&
        Objects.equals(this.evaluatedBy, offeringUserResponse.evaluatedBy) &&
        Objects.equals(this.evaluates, offeringUserResponse.evaluates) &&
        Objects.equals(this.firstName, offeringUserResponse.firstName) &&
        Objects.equals(this.id, offeringUserResponse.id) &&
        Objects.equals(this.isFacilitator, offeringUserResponse.isFacilitator) &&
        Objects.equals(this.isMarker, offeringUserResponse.isMarker) &&
        Objects.equals(this.isReadonly, offeringUserResponse.isReadonly) &&
        Objects.equals(this.lastName, offeringUserResponse.lastName) &&
        Objects.equals(this.markedBy, offeringUserResponse.markedBy) &&
        Objects.equals(this.marks, offeringUserResponse.marks) &&
        Objects.equals(this.personId, offeringUserResponse.personId) &&
        Objects.equals(this.profile, offeringUserResponse.profile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avatarUrl, email, evaluatedBy, evaluates, firstName, id, isFacilitator, isMarker, isReadonly, lastName, markedBy, marks, personId, profile);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OfferingUserResponse {\n");
    sb.append("    avatarUrl: ").append(toIndentedString(avatarUrl)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    evaluatedBy: ").append(toIndentedString(evaluatedBy)).append("\n");
    sb.append("    evaluates: ").append(toIndentedString(evaluates)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isFacilitator: ").append(toIndentedString(isFacilitator)).append("\n");
    sb.append("    isMarker: ").append(toIndentedString(isMarker)).append("\n");
    sb.append("    isReadonly: ").append(toIndentedString(isReadonly)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    markedBy: ").append(toIndentedString(markedBy)).append("\n");
    sb.append("    marks: ").append(toIndentedString(marks)).append("\n");
    sb.append("    personId: ").append(toIndentedString(personId)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avatarUrl");
    openapiFields.add("email");
    openapiFields.add("evaluatedBy");
    openapiFields.add("evaluates");
    openapiFields.add("firstName");
    openapiFields.add("id");
    openapiFields.add("isFacilitator");
    openapiFields.add("isMarker");
    openapiFields.add("isReadonly");
    openapiFields.add("lastName");
    openapiFields.add("markedBy");
    openapiFields.add("marks");
    openapiFields.add("personId");
    openapiFields.add("profile");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OfferingUserResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OfferingUserResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OfferingUserResponse is not found in the empty JSON string", OfferingUserResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OfferingUserResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OfferingUserResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("avatarUrl") != null && !jsonObj.get("avatarUrl").isJsonNull()) && !jsonObj.get("avatarUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatarUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatarUrl").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("evaluatedBy") != null && !jsonObj.get("evaluatedBy").isJsonNull() && !jsonObj.get("evaluatedBy").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluatedBy` to be an array in the JSON string but got `%s`", jsonObj.get("evaluatedBy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("evaluates") != null && !jsonObj.get("evaluates").isJsonNull() && !jsonObj.get("evaluates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluates` to be an array in the JSON string but got `%s`", jsonObj.get("evaluates").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("markedBy") != null && !jsonObj.get("markedBy").isJsonNull() && !jsonObj.get("markedBy").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `markedBy` to be an array in the JSON string but got `%s`", jsonObj.get("markedBy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("marks") != null && !jsonObj.get("marks").isJsonNull() && !jsonObj.get("marks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `marks` to be an array in the JSON string but got `%s`", jsonObj.get("marks").toString()));
      }
      if ((jsonObj.get("personId") != null && !jsonObj.get("personId").isJsonNull()) && !jsonObj.get("personId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personId").toString()));
      }
      // validate the optional field `profile`
      if (jsonObj.get("profile") != null && !jsonObj.get("profile").isJsonNull()) {
        UserProfile.validateJsonElement(jsonObj.get("profile"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OfferingUserResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OfferingUserResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OfferingUserResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OfferingUserResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<OfferingUserResponse>() {
           @Override
           public void write(JsonWriter out, OfferingUserResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OfferingUserResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OfferingUserResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OfferingUserResponse
   * @throws IOException if the JSON string is invalid with respect to OfferingUserResponse
   */
  public static OfferingUserResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OfferingUserResponse.class);
  }

  /**
   * Convert an instance of OfferingUserResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

