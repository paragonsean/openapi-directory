/*
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AssessmentGroupRequired;
import org.openapitools.client.model.AssessmentGroupResponse;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.OfferingsOfferingIdGroupsGroupIdLearnersPostRequest;
import org.openapitools.client.model.UserResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AssessmentGroupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AssessmentGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AssessmentGroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for offeringsOfferingIdGroupsGet
     * @param offeringId offering&#39;s id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdGroupsGetCall(String offeringId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/groups"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdGroupsGetValidateBeforeCall(String offeringId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdGroupsGet(Async)");
        }

        return offeringsOfferingIdGroupsGetCall(offeringId, _callback);

    }

    /**
     * Find assessment groups
     * Responds with a list of assessment groups in an offering.
     * @param offeringId offering&#39;s id (required)
     * @return List&lt;AssessmentGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<AssessmentGroupResponse> offeringsOfferingIdGroupsGet(String offeringId) throws ApiException {
        ApiResponse<List<AssessmentGroupResponse>> localVarResp = offeringsOfferingIdGroupsGetWithHttpInfo(offeringId);
        return localVarResp.getData();
    }

    /**
     * Find assessment groups
     * Responds with a list of assessment groups in an offering.
     * @param offeringId offering&#39;s id (required)
     * @return ApiResponse&lt;List&lt;AssessmentGroupResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AssessmentGroupResponse>> offeringsOfferingIdGroupsGetWithHttpInfo(String offeringId) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdGroupsGetValidateBeforeCall(offeringId, null);
        Type localVarReturnType = new TypeToken<List<AssessmentGroupResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find assessment groups (asynchronously)
     * Responds with a list of assessment groups in an offering.
     * @param offeringId offering&#39;s id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdGroupsGetAsync(String offeringId, final ApiCallback<List<AssessmentGroupResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdGroupsGetValidateBeforeCall(offeringId, _callback);
        Type localVarReturnType = new TypeToken<List<AssessmentGroupResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for offeringsOfferingIdGroupsGroupIdLearnersGet
     * @param offeringId offering&#39;s id (required)
     * @param groupId Assessment group id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdGroupsGroupIdLearnersGetCall(String offeringId, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/groups/{groupId}/learners"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdGroupsGroupIdLearnersGetValidateBeforeCall(String offeringId, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdGroupsGroupIdLearnersGet(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling offeringsOfferingIdGroupsGroupIdLearnersGet(Async)");
        }

        return offeringsOfferingIdGroupsGroupIdLearnersGetCall(offeringId, groupId, _callback);

    }

    /**
     * Find learners in an assessment group
     * Responds with a list of learners in a specified assessment group.
     * @param offeringId offering&#39;s id (required)
     * @param groupId Assessment group id (required)
     * @return List&lt;UserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<UserResponse> offeringsOfferingIdGroupsGroupIdLearnersGet(String offeringId, String groupId) throws ApiException {
        ApiResponse<List<UserResponse>> localVarResp = offeringsOfferingIdGroupsGroupIdLearnersGetWithHttpInfo(offeringId, groupId);
        return localVarResp.getData();
    }

    /**
     * Find learners in an assessment group
     * Responds with a list of learners in a specified assessment group.
     * @param offeringId offering&#39;s id (required)
     * @param groupId Assessment group id (required)
     * @return ApiResponse&lt;List&lt;UserResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserResponse>> offeringsOfferingIdGroupsGroupIdLearnersGetWithHttpInfo(String offeringId, String groupId) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdGroupsGroupIdLearnersGetValidateBeforeCall(offeringId, groupId, null);
        Type localVarReturnType = new TypeToken<List<UserResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find learners in an assessment group (asynchronously)
     * Responds with a list of learners in a specified assessment group.
     * @param offeringId offering&#39;s id (required)
     * @param groupId Assessment group id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdGroupsGroupIdLearnersGetAsync(String offeringId, String groupId, final ApiCallback<List<UserResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdGroupsGroupIdLearnersGetValidateBeforeCall(offeringId, groupId, _callback);
        Type localVarReturnType = new TypeToken<List<UserResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for offeringsOfferingIdGroupsGroupIdLearnersPost
     * @param offeringId offering&#39;s id (required)
     * @param groupId Assessment group id (required)
     * @param offeringsOfferingIdGroupsGroupIdLearnersPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Succesful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdGroupsGroupIdLearnersPostCall(String offeringId, String groupId, OfferingsOfferingIdGroupsGroupIdLearnersPostRequest offeringsOfferingIdGroupsGroupIdLearnersPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = offeringsOfferingIdGroupsGroupIdLearnersPostRequest;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/groups/{groupId}/learners"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdGroupsGroupIdLearnersPostValidateBeforeCall(String offeringId, String groupId, OfferingsOfferingIdGroupsGroupIdLearnersPostRequest offeringsOfferingIdGroupsGroupIdLearnersPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdGroupsGroupIdLearnersPost(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling offeringsOfferingIdGroupsGroupIdLearnersPost(Async)");
        }

        // verify the required parameter 'offeringsOfferingIdGroupsGroupIdLearnersPostRequest' is set
        if (offeringsOfferingIdGroupsGroupIdLearnersPostRequest == null) {
            throw new ApiException("Missing the required parameter 'offeringsOfferingIdGroupsGroupIdLearnersPostRequest' when calling offeringsOfferingIdGroupsGroupIdLearnersPost(Async)");
        }

        return offeringsOfferingIdGroupsGroupIdLearnersPostCall(offeringId, groupId, offeringsOfferingIdGroupsGroupIdLearnersPostRequest, _callback);

    }

    /**
     * Add a learner to an assessment group
     * Adds a learner into the specified assessment group.
     * @param offeringId offering&#39;s id (required)
     * @param groupId Assessment group id (required)
     * @param offeringsOfferingIdGroupsGroupIdLearnersPostRequest  (required)
     * @return UserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Succesful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public UserResponse offeringsOfferingIdGroupsGroupIdLearnersPost(String offeringId, String groupId, OfferingsOfferingIdGroupsGroupIdLearnersPostRequest offeringsOfferingIdGroupsGroupIdLearnersPostRequest) throws ApiException {
        ApiResponse<UserResponse> localVarResp = offeringsOfferingIdGroupsGroupIdLearnersPostWithHttpInfo(offeringId, groupId, offeringsOfferingIdGroupsGroupIdLearnersPostRequest);
        return localVarResp.getData();
    }

    /**
     * Add a learner to an assessment group
     * Adds a learner into the specified assessment group.
     * @param offeringId offering&#39;s id (required)
     * @param groupId Assessment group id (required)
     * @param offeringsOfferingIdGroupsGroupIdLearnersPostRequest  (required)
     * @return ApiResponse&lt;UserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Succesful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserResponse> offeringsOfferingIdGroupsGroupIdLearnersPostWithHttpInfo(String offeringId, String groupId, OfferingsOfferingIdGroupsGroupIdLearnersPostRequest offeringsOfferingIdGroupsGroupIdLearnersPostRequest) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdGroupsGroupIdLearnersPostValidateBeforeCall(offeringId, groupId, offeringsOfferingIdGroupsGroupIdLearnersPostRequest, null);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a learner to an assessment group (asynchronously)
     * Adds a learner into the specified assessment group.
     * @param offeringId offering&#39;s id (required)
     * @param groupId Assessment group id (required)
     * @param offeringsOfferingIdGroupsGroupIdLearnersPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Succesful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdGroupsGroupIdLearnersPostAsync(String offeringId, String groupId, OfferingsOfferingIdGroupsGroupIdLearnersPostRequest offeringsOfferingIdGroupsGroupIdLearnersPostRequest, final ApiCallback<UserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdGroupsGroupIdLearnersPostValidateBeforeCall(offeringId, groupId, offeringsOfferingIdGroupsGroupIdLearnersPostRequest, _callback);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for offeringsOfferingIdGroupsGroupIdLearnersUserEmailDelete
     * @param offeringId offering&#39;s id (required)
     * @param groupId Assessment group id (required)
     * @param userEmail user&#39;s email (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> user successfully removed from the assessment group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdGroupsGroupIdLearnersUserEmailDeleteCall(String offeringId, String groupId, String userEmail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/groups/{groupId}/learners/{userEmail}"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "userEmail" + "}", localVarApiClient.escapeString(userEmail.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdGroupsGroupIdLearnersUserEmailDeleteValidateBeforeCall(String offeringId, String groupId, String userEmail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdGroupsGroupIdLearnersUserEmailDelete(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling offeringsOfferingIdGroupsGroupIdLearnersUserEmailDelete(Async)");
        }

        // verify the required parameter 'userEmail' is set
        if (userEmail == null) {
            throw new ApiException("Missing the required parameter 'userEmail' when calling offeringsOfferingIdGroupsGroupIdLearnersUserEmailDelete(Async)");
        }

        return offeringsOfferingIdGroupsGroupIdLearnersUserEmailDeleteCall(offeringId, groupId, userEmail, _callback);

    }

    /**
     * Remove a learner from an assessment group
     * Removes a learner from the specified assessment group.
     * @param offeringId offering&#39;s id (required)
     * @param groupId Assessment group id (required)
     * @param userEmail user&#39;s email (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> user successfully removed from the assessment group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void offeringsOfferingIdGroupsGroupIdLearnersUserEmailDelete(String offeringId, String groupId, String userEmail) throws ApiException {
        offeringsOfferingIdGroupsGroupIdLearnersUserEmailDeleteWithHttpInfo(offeringId, groupId, userEmail);
    }

    /**
     * Remove a learner from an assessment group
     * Removes a learner from the specified assessment group.
     * @param offeringId offering&#39;s id (required)
     * @param groupId Assessment group id (required)
     * @param userEmail user&#39;s email (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> user successfully removed from the assessment group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> offeringsOfferingIdGroupsGroupIdLearnersUserEmailDeleteWithHttpInfo(String offeringId, String groupId, String userEmail) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdGroupsGroupIdLearnersUserEmailDeleteValidateBeforeCall(offeringId, groupId, userEmail, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a learner from an assessment group (asynchronously)
     * Removes a learner from the specified assessment group.
     * @param offeringId offering&#39;s id (required)
     * @param groupId Assessment group id (required)
     * @param userEmail user&#39;s email (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> user successfully removed from the assessment group </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdGroupsGroupIdLearnersUserEmailDeleteAsync(String offeringId, String groupId, String userEmail, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdGroupsGroupIdLearnersUserEmailDeleteValidateBeforeCall(offeringId, groupId, userEmail, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for offeringsOfferingIdGroupsPost
     * @param offeringId offering&#39;s id (required)
     * @param assessmentGroupRequired  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> assessment group successfully added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdGroupsPostCall(String offeringId, AssessmentGroupRequired assessmentGroupRequired, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assessmentGroupRequired;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/groups"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdGroupsPostValidateBeforeCall(String offeringId, AssessmentGroupRequired assessmentGroupRequired, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdGroupsPost(Async)");
        }

        // verify the required parameter 'assessmentGroupRequired' is set
        if (assessmentGroupRequired == null) {
            throw new ApiException("Missing the required parameter 'assessmentGroupRequired' when calling offeringsOfferingIdGroupsPost(Async)");
        }

        return offeringsOfferingIdGroupsPostCall(offeringId, assessmentGroupRequired, _callback);

    }

    /**
     * Add an assessment group
     * Creates a new assessment group in an offering.
     * @param offeringId offering&#39;s id (required)
     * @param assessmentGroupRequired  (required)
     * @return AssessmentGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> assessment group successfully added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public AssessmentGroupResponse offeringsOfferingIdGroupsPost(String offeringId, AssessmentGroupRequired assessmentGroupRequired) throws ApiException {
        ApiResponse<AssessmentGroupResponse> localVarResp = offeringsOfferingIdGroupsPostWithHttpInfo(offeringId, assessmentGroupRequired);
        return localVarResp.getData();
    }

    /**
     * Add an assessment group
     * Creates a new assessment group in an offering.
     * @param offeringId offering&#39;s id (required)
     * @param assessmentGroupRequired  (required)
     * @return ApiResponse&lt;AssessmentGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> assessment group successfully added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssessmentGroupResponse> offeringsOfferingIdGroupsPostWithHttpInfo(String offeringId, AssessmentGroupRequired assessmentGroupRequired) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdGroupsPostValidateBeforeCall(offeringId, assessmentGroupRequired, null);
        Type localVarReturnType = new TypeToken<AssessmentGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an assessment group (asynchronously)
     * Creates a new assessment group in an offering.
     * @param offeringId offering&#39;s id (required)
     * @param assessmentGroupRequired  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> assessment group successfully added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdGroupsPostAsync(String offeringId, AssessmentGroupRequired assessmentGroupRequired, final ApiCallback<AssessmentGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdGroupsPostValidateBeforeCall(offeringId, assessmentGroupRequired, _callback);
        Type localVarReturnType = new TypeToken<AssessmentGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
