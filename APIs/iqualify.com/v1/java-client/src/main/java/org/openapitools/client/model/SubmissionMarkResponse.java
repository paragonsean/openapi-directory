/*
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Document;
import org.openapitools.client.model.Mark;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SubmissionMarkResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:36.016710-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubmissionMarkResponse {
  public static final String SERIALIZED_NAME_ASSESSMENT_ID = "assessmentId";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_ID)
  private String assessmentId;

  public static final String SERIALIZED_NAME_ASSESSMENT_ITEM_DETAILS = "assessmentItemDetails";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_ITEM_DETAILS)
  private String assessmentItemDetails;

  public static final String SERIALIZED_NAME_ASSESSMENT_ITEM_NAME = "assessmentItemName";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_ITEM_NAME)
  private String assessmentItemName;

  public static final String SERIALIZED_NAME_COURSE_NAME = "courseName";
  @SerializedName(SERIALIZED_NAME_COURSE_NAME)
  private String courseName;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<Document> files = new ArrayList<>();

  public static final String SERIALIZED_NAME_HTML = "html";
  @SerializedName(SERIALIZED_NAME_HTML)
  private String html;

  public static final String SERIALIZED_NAME_LEARNER_EMAIL = "learnerEmail";
  @SerializedName(SERIALIZED_NAME_LEARNER_EMAIL)
  private String learnerEmail;

  public static final String SERIALIZED_NAME_LEARNER_FIRST_NAME = "learnerFirstName";
  @SerializedName(SERIALIZED_NAME_LEARNER_FIRST_NAME)
  private String learnerFirstName;

  public static final String SERIALIZED_NAME_LEARNER_LAST_NAME = "learnerLastName";
  @SerializedName(SERIALIZED_NAME_LEARNER_LAST_NAME)
  private String learnerLastName;

  public static final String SERIALIZED_NAME_LEARNER_PERSON_ID = "learnerPersonId";
  @SerializedName(SERIALIZED_NAME_LEARNER_PERSON_ID)
  private String learnerPersonId;

  public static final String SERIALIZED_NAME_MARKS = "marks";
  @SerializedName(SERIALIZED_NAME_MARKS)
  private List<Mark> marks = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUBMISSION_DATE_TIME = "submissionDateTime";
  @SerializedName(SERIALIZED_NAME_SUBMISSION_DATE_TIME)
  private OffsetDateTime submissionDateTime;

  public SubmissionMarkResponse() {
  }

  public SubmissionMarkResponse assessmentId(String assessmentId) {
    this.assessmentId = assessmentId;
    return this;
  }

  /**
   * Get assessmentId
   * @return assessmentId
   */
  @javax.annotation.Nullable
  public String getAssessmentId() {
    return assessmentId;
  }

  public void setAssessmentId(String assessmentId) {
    this.assessmentId = assessmentId;
  }


  public SubmissionMarkResponse assessmentItemDetails(String assessmentItemDetails) {
    this.assessmentItemDetails = assessmentItemDetails;
    return this;
  }

  /**
   * Get assessmentItemDetails
   * @return assessmentItemDetails
   */
  @javax.annotation.Nullable
  public String getAssessmentItemDetails() {
    return assessmentItemDetails;
  }

  public void setAssessmentItemDetails(String assessmentItemDetails) {
    this.assessmentItemDetails = assessmentItemDetails;
  }


  public SubmissionMarkResponse assessmentItemName(String assessmentItemName) {
    this.assessmentItemName = assessmentItemName;
    return this;
  }

  /**
   * Get assessmentItemName
   * @return assessmentItemName
   */
  @javax.annotation.Nullable
  public String getAssessmentItemName() {
    return assessmentItemName;
  }

  public void setAssessmentItemName(String assessmentItemName) {
    this.assessmentItemName = assessmentItemName;
  }


  public SubmissionMarkResponse courseName(String courseName) {
    this.courseName = courseName;
    return this;
  }

  /**
   * Get courseName
   * @return courseName
   */
  @javax.annotation.Nullable
  public String getCourseName() {
    return courseName;
  }

  public void setCourseName(String courseName) {
    this.courseName = courseName;
  }


  public SubmissionMarkResponse files(List<Document> files) {
    this.files = files;
    return this;
  }

  public SubmissionMarkResponse addFilesItem(Document filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

  /**
   * Get files
   * @return files
   */
  @javax.annotation.Nullable
  public List<Document> getFiles() {
    return files;
  }

  public void setFiles(List<Document> files) {
    this.files = files;
  }


  public SubmissionMarkResponse html(String html) {
    this.html = html;
    return this;
  }

  /**
   * Get html
   * @return html
   */
  @javax.annotation.Nullable
  public String getHtml() {
    return html;
  }

  public void setHtml(String html) {
    this.html = html;
  }


  public SubmissionMarkResponse learnerEmail(String learnerEmail) {
    this.learnerEmail = learnerEmail;
    return this;
  }

  /**
   * Get learnerEmail
   * @return learnerEmail
   */
  @javax.annotation.Nullable
  public String getLearnerEmail() {
    return learnerEmail;
  }

  public void setLearnerEmail(String learnerEmail) {
    this.learnerEmail = learnerEmail;
  }


  public SubmissionMarkResponse learnerFirstName(String learnerFirstName) {
    this.learnerFirstName = learnerFirstName;
    return this;
  }

  /**
   * Get learnerFirstName
   * @return learnerFirstName
   */
  @javax.annotation.Nullable
  public String getLearnerFirstName() {
    return learnerFirstName;
  }

  public void setLearnerFirstName(String learnerFirstName) {
    this.learnerFirstName = learnerFirstName;
  }


  public SubmissionMarkResponse learnerLastName(String learnerLastName) {
    this.learnerLastName = learnerLastName;
    return this;
  }

  /**
   * Get learnerLastName
   * @return learnerLastName
   */
  @javax.annotation.Nullable
  public String getLearnerLastName() {
    return learnerLastName;
  }

  public void setLearnerLastName(String learnerLastName) {
    this.learnerLastName = learnerLastName;
  }


  public SubmissionMarkResponse learnerPersonId(String learnerPersonId) {
    this.learnerPersonId = learnerPersonId;
    return this;
  }

  /**
   * Get learnerPersonId
   * @return learnerPersonId
   */
  @javax.annotation.Nullable
  public String getLearnerPersonId() {
    return learnerPersonId;
  }

  public void setLearnerPersonId(String learnerPersonId) {
    this.learnerPersonId = learnerPersonId;
  }


  public SubmissionMarkResponse marks(List<Mark> marks) {
    this.marks = marks;
    return this;
  }

  public SubmissionMarkResponse addMarksItem(Mark marksItem) {
    if (this.marks == null) {
      this.marks = new ArrayList<>();
    }
    this.marks.add(marksItem);
    return this;
  }

  /**
   * Get marks
   * @return marks
   */
  @javax.annotation.Nullable
  public List<Mark> getMarks() {
    return marks;
  }

  public void setMarks(List<Mark> marks) {
    this.marks = marks;
  }


  public SubmissionMarkResponse status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public SubmissionMarkResponse submissionDateTime(OffsetDateTime submissionDateTime) {
    this.submissionDateTime = submissionDateTime;
    return this;
  }

  /**
   * Get submissionDateTime
   * @return submissionDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSubmissionDateTime() {
    return submissionDateTime;
  }

  public void setSubmissionDateTime(OffsetDateTime submissionDateTime) {
    this.submissionDateTime = submissionDateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubmissionMarkResponse submissionMarkResponse = (SubmissionMarkResponse) o;
    return Objects.equals(this.assessmentId, submissionMarkResponse.assessmentId) &&
        Objects.equals(this.assessmentItemDetails, submissionMarkResponse.assessmentItemDetails) &&
        Objects.equals(this.assessmentItemName, submissionMarkResponse.assessmentItemName) &&
        Objects.equals(this.courseName, submissionMarkResponse.courseName) &&
        Objects.equals(this.files, submissionMarkResponse.files) &&
        Objects.equals(this.html, submissionMarkResponse.html) &&
        Objects.equals(this.learnerEmail, submissionMarkResponse.learnerEmail) &&
        Objects.equals(this.learnerFirstName, submissionMarkResponse.learnerFirstName) &&
        Objects.equals(this.learnerLastName, submissionMarkResponse.learnerLastName) &&
        Objects.equals(this.learnerPersonId, submissionMarkResponse.learnerPersonId) &&
        Objects.equals(this.marks, submissionMarkResponse.marks) &&
        Objects.equals(this.status, submissionMarkResponse.status) &&
        Objects.equals(this.submissionDateTime, submissionMarkResponse.submissionDateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assessmentId, assessmentItemDetails, assessmentItemName, courseName, files, html, learnerEmail, learnerFirstName, learnerLastName, learnerPersonId, marks, status, submissionDateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubmissionMarkResponse {\n");
    sb.append("    assessmentId: ").append(toIndentedString(assessmentId)).append("\n");
    sb.append("    assessmentItemDetails: ").append(toIndentedString(assessmentItemDetails)).append("\n");
    sb.append("    assessmentItemName: ").append(toIndentedString(assessmentItemName)).append("\n");
    sb.append("    courseName: ").append(toIndentedString(courseName)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    learnerEmail: ").append(toIndentedString(learnerEmail)).append("\n");
    sb.append("    learnerFirstName: ").append(toIndentedString(learnerFirstName)).append("\n");
    sb.append("    learnerLastName: ").append(toIndentedString(learnerLastName)).append("\n");
    sb.append("    learnerPersonId: ").append(toIndentedString(learnerPersonId)).append("\n");
    sb.append("    marks: ").append(toIndentedString(marks)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    submissionDateTime: ").append(toIndentedString(submissionDateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assessmentId");
    openapiFields.add("assessmentItemDetails");
    openapiFields.add("assessmentItemName");
    openapiFields.add("courseName");
    openapiFields.add("files");
    openapiFields.add("html");
    openapiFields.add("learnerEmail");
    openapiFields.add("learnerFirstName");
    openapiFields.add("learnerLastName");
    openapiFields.add("learnerPersonId");
    openapiFields.add("marks");
    openapiFields.add("status");
    openapiFields.add("submissionDateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubmissionMarkResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubmissionMarkResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubmissionMarkResponse is not found in the empty JSON string", SubmissionMarkResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubmissionMarkResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubmissionMarkResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("assessmentId") != null && !jsonObj.get("assessmentId").isJsonNull()) && !jsonObj.get("assessmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assessmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assessmentId").toString()));
      }
      if ((jsonObj.get("assessmentItemDetails") != null && !jsonObj.get("assessmentItemDetails").isJsonNull()) && !jsonObj.get("assessmentItemDetails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assessmentItemDetails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assessmentItemDetails").toString()));
      }
      if ((jsonObj.get("assessmentItemName") != null && !jsonObj.get("assessmentItemName").isJsonNull()) && !jsonObj.get("assessmentItemName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assessmentItemName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assessmentItemName").toString()));
      }
      if ((jsonObj.get("courseName") != null && !jsonObj.get("courseName").isJsonNull()) && !jsonObj.get("courseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `courseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("courseName").toString()));
      }
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull()) {
        JsonArray jsonArrayfiles = jsonObj.getAsJsonArray("files");
        if (jsonArrayfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("files").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
          }

          // validate the optional field `files` (array)
          for (int i = 0; i < jsonArrayfiles.size(); i++) {
            Document.validateJsonElement(jsonArrayfiles.get(i));
          };
        }
      }
      if ((jsonObj.get("html") != null && !jsonObj.get("html").isJsonNull()) && !jsonObj.get("html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html").toString()));
      }
      if ((jsonObj.get("learnerEmail") != null && !jsonObj.get("learnerEmail").isJsonNull()) && !jsonObj.get("learnerEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `learnerEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("learnerEmail").toString()));
      }
      if ((jsonObj.get("learnerFirstName") != null && !jsonObj.get("learnerFirstName").isJsonNull()) && !jsonObj.get("learnerFirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `learnerFirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("learnerFirstName").toString()));
      }
      if ((jsonObj.get("learnerLastName") != null && !jsonObj.get("learnerLastName").isJsonNull()) && !jsonObj.get("learnerLastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `learnerLastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("learnerLastName").toString()));
      }
      if ((jsonObj.get("learnerPersonId") != null && !jsonObj.get("learnerPersonId").isJsonNull()) && !jsonObj.get("learnerPersonId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `learnerPersonId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("learnerPersonId").toString()));
      }
      if (jsonObj.get("marks") != null && !jsonObj.get("marks").isJsonNull()) {
        JsonArray jsonArraymarks = jsonObj.getAsJsonArray("marks");
        if (jsonArraymarks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("marks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `marks` to be an array in the JSON string but got `%s`", jsonObj.get("marks").toString()));
          }

          // validate the optional field `marks` (array)
          for (int i = 0; i < jsonArraymarks.size(); i++) {
            Mark.validateJsonElement(jsonArraymarks.get(i));
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubmissionMarkResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubmissionMarkResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubmissionMarkResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubmissionMarkResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SubmissionMarkResponse>() {
           @Override
           public void write(JsonWriter out, SubmissionMarkResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubmissionMarkResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubmissionMarkResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubmissionMarkResponse
   * @throws IOException if the JSON string is invalid with respect to SubmissionMarkResponse
   */
  public static SubmissionMarkResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubmissionMarkResponse.class);
  }

  /**
   * Convert an instance of SubmissionMarkResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

