/*
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Assessment;
import org.openapitools.client.model.AssessmentPendingSubmission;
import org.openapitools.client.model.AssessmentResponse;
import org.openapitools.client.model.Assignments;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.OfferingActivitiesResponse;
import org.openapitools.client.model.OfferingsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AssessmentManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AssessmentManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AssessmentManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for offeringsOfferingIdActivitiesOpenresponseGet
     * @param offeringId offering&#39;s id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> offering&#39;s learners </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdActivitiesOpenresponseGetCall(String offeringId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/activities/openresponse"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdActivitiesOpenresponseGetValidateBeforeCall(String offeringId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdActivitiesOpenresponseGet(Async)");
        }

        return offeringsOfferingIdActivitiesOpenresponseGetCall(offeringId, _callback);

    }

    /**
     * Find offering&#39;s activities
     * Responds with the activities in a specific offering.
     * @param offeringId offering&#39;s id (required)
     * @return List&lt;OfferingActivitiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> offering&#39;s learners </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<OfferingActivitiesResponse> offeringsOfferingIdActivitiesOpenresponseGet(String offeringId) throws ApiException {
        ApiResponse<List<OfferingActivitiesResponse>> localVarResp = offeringsOfferingIdActivitiesOpenresponseGetWithHttpInfo(offeringId);
        return localVarResp.getData();
    }

    /**
     * Find offering&#39;s activities
     * Responds with the activities in a specific offering.
     * @param offeringId offering&#39;s id (required)
     * @return ApiResponse&lt;List&lt;OfferingActivitiesResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> offering&#39;s learners </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OfferingActivitiesResponse>> offeringsOfferingIdActivitiesOpenresponseGetWithHttpInfo(String offeringId) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdActivitiesOpenresponseGetValidateBeforeCall(offeringId, null);
        Type localVarReturnType = new TypeToken<List<OfferingActivitiesResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find offering&#39;s activities (asynchronously)
     * Responds with the activities in a specific offering.
     * @param offeringId offering&#39;s id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> offering&#39;s learners </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdActivitiesOpenresponseGetAsync(String offeringId, final ApiCallback<List<OfferingActivitiesResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdActivitiesOpenresponseGetValidateBeforeCall(offeringId, _callback);
        Type localVarReturnType = new TypeToken<List<OfferingActivitiesResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDelete
     * @param offeringId offering&#39;s id (required)
     * @param assessmentId assessment&#39;s id (required)
     * @param documentId documents&#39;s id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> assessment document successfully removed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDeleteCall(String offeringId, String assessmentId, String documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/assessments/{assessmentId}/documents/{documentId}"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()))
            .replace("{" + "assessmentId" + "}", localVarApiClient.escapeString(assessmentId.toString()))
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDeleteValidateBeforeCall(String offeringId, String assessmentId, String documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDelete(Async)");
        }

        // verify the required parameter 'assessmentId' is set
        if (assessmentId == null) {
            throw new ApiException("Missing the required parameter 'assessmentId' when calling offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDelete(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDelete(Async)");
        }

        return offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDeleteCall(offeringId, assessmentId, documentId, _callback);

    }

    /**
     * Remove assessment document
     * Removes the assessment document file for a specified assessment in an offering.
     * @param offeringId offering&#39;s id (required)
     * @param assessmentId assessment&#39;s id (required)
     * @param documentId documents&#39;s id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> assessment document successfully removed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDelete(String offeringId, String assessmentId, String documentId) throws ApiException {
        offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDeleteWithHttpInfo(offeringId, assessmentId, documentId);
    }

    /**
     * Remove assessment document
     * Removes the assessment document file for a specified assessment in an offering.
     * @param offeringId offering&#39;s id (required)
     * @param assessmentId assessment&#39;s id (required)
     * @param documentId documents&#39;s id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> assessment document successfully removed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDeleteWithHttpInfo(String offeringId, String assessmentId, String documentId) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDeleteValidateBeforeCall(offeringId, assessmentId, documentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove assessment document (asynchronously)
     * Removes the assessment document file for a specified assessment in an offering.
     * @param offeringId offering&#39;s id (required)
     * @param assessmentId assessment&#39;s id (required)
     * @param documentId documents&#39;s id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> assessment document successfully removed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDeleteAsync(String offeringId, String assessmentId, String documentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDeleteValidateBeforeCall(offeringId, assessmentId, documentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for offeringsOfferingIdAssessmentsAssessmentIdPatch
     * @param offeringId offering&#39;s id (required)
     * @param assessmentId assessment&#39;s id (required)
     * @param assessment  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> assessment successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdAssessmentsAssessmentIdPatchCall(String offeringId, String assessmentId, Assessment assessment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assessment;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/assessments/{assessmentId}"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()))
            .replace("{" + "assessmentId" + "}", localVarApiClient.escapeString(assessmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdAssessmentsAssessmentIdPatchValidateBeforeCall(String offeringId, String assessmentId, Assessment assessment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAssessmentsAssessmentIdPatch(Async)");
        }

        // verify the required parameter 'assessmentId' is set
        if (assessmentId == null) {
            throw new ApiException("Missing the required parameter 'assessmentId' when calling offeringsOfferingIdAssessmentsAssessmentIdPatch(Async)");
        }

        // verify the required parameter 'assessment' is set
        if (assessment == null) {
            throw new ApiException("Missing the required parameter 'assessment' when calling offeringsOfferingIdAssessmentsAssessmentIdPatch(Async)");
        }

        return offeringsOfferingIdAssessmentsAssessmentIdPatchCall(offeringId, assessmentId, assessment, _callback);

    }

    /**
     * Update assessment details
     * Updates the assessment details for a specified assessment in an offering.
     * @param offeringId offering&#39;s id (required)
     * @param assessmentId assessment&#39;s id (required)
     * @param assessment  (required)
     * @return AssessmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> assessment successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public AssessmentResponse offeringsOfferingIdAssessmentsAssessmentIdPatch(String offeringId, String assessmentId, Assessment assessment) throws ApiException {
        ApiResponse<AssessmentResponse> localVarResp = offeringsOfferingIdAssessmentsAssessmentIdPatchWithHttpInfo(offeringId, assessmentId, assessment);
        return localVarResp.getData();
    }

    /**
     * Update assessment details
     * Updates the assessment details for a specified assessment in an offering.
     * @param offeringId offering&#39;s id (required)
     * @param assessmentId assessment&#39;s id (required)
     * @param assessment  (required)
     * @return ApiResponse&lt;AssessmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> assessment successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssessmentResponse> offeringsOfferingIdAssessmentsAssessmentIdPatchWithHttpInfo(String offeringId, String assessmentId, Assessment assessment) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdAssessmentsAssessmentIdPatchValidateBeforeCall(offeringId, assessmentId, assessment, null);
        Type localVarReturnType = new TypeToken<AssessmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update assessment details (asynchronously)
     * Updates the assessment details for a specified assessment in an offering.
     * @param offeringId offering&#39;s id (required)
     * @param assessmentId assessment&#39;s id (required)
     * @param assessment  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> assessment successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdAssessmentsAssessmentIdPatchAsync(String offeringId, String assessmentId, Assessment assessment, final ApiCallback<AssessmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdAssessmentsAssessmentIdPatchValidateBeforeCall(offeringId, assessmentId, assessment, _callback);
        Type localVarReturnType = new TypeToken<AssessmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatch
     * @param offeringId offering&#39;s id (required)
     * @param assessmentId assessment&#39;s id (required)
     * @param userEmail user&#39;s email (required)
     * @param offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated assessment due date. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchCall(String offeringId, String assessmentId, String userEmail, OfferingsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/assessments/{assessmentId}/{userEmail}"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()))
            .replace("{" + "assessmentId" + "}", localVarApiClient.escapeString(assessmentId.toString()))
            .replace("{" + "userEmail" + "}", localVarApiClient.escapeString(userEmail.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchValidateBeforeCall(String offeringId, String assessmentId, String userEmail, OfferingsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatch(Async)");
        }

        // verify the required parameter 'assessmentId' is set
        if (assessmentId == null) {
            throw new ApiException("Missing the required parameter 'assessmentId' when calling offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatch(Async)");
        }

        // verify the required parameter 'userEmail' is set
        if (userEmail == null) {
            throw new ApiException("Missing the required parameter 'userEmail' when calling offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatch(Async)");
        }

        // verify the required parameter 'offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest' is set
        if (offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest == null) {
            throw new ApiException("Missing the required parameter 'offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest' when calling offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatch(Async)");
        }

        return offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchCall(offeringId, assessmentId, userEmail, offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest, _callback);

    }

    /**
     * Update the due dates for a learner&#39;s quiz attempt
     * Updates the due dates for a learner&#39;s quiz attempt specified by the assessmentId.
     * @param offeringId offering&#39;s id (required)
     * @param assessmentId assessment&#39;s id (required)
     * @param userEmail user&#39;s email (required)
     * @param offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated assessment due date. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatch(String offeringId, String assessmentId, String userEmail, OfferingsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest) throws ApiException {
        offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchWithHttpInfo(offeringId, assessmentId, userEmail, offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest);
    }

    /**
     * Update the due dates for a learner&#39;s quiz attempt
     * Updates the due dates for a learner&#39;s quiz attempt specified by the assessmentId.
     * @param offeringId offering&#39;s id (required)
     * @param assessmentId assessment&#39;s id (required)
     * @param userEmail user&#39;s email (required)
     * @param offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated assessment due date. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchWithHttpInfo(String offeringId, String assessmentId, String userEmail, OfferingsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchValidateBeforeCall(offeringId, assessmentId, userEmail, offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update the due dates for a learner&#39;s quiz attempt (asynchronously)
     * Updates the due dates for a learner&#39;s quiz attempt specified by the assessmentId.
     * @param offeringId offering&#39;s id (required)
     * @param assessmentId assessment&#39;s id (required)
     * @param userEmail user&#39;s email (required)
     * @param offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated assessment due date. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchAsync(String offeringId, String assessmentId, String userEmail, OfferingsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchValidateBeforeCall(offeringId, assessmentId, userEmail, offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for offeringsOfferingIdAssessmentsGet
     * @param offeringId offering&#39;s id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> offering&#39;s assessments </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdAssessmentsGetCall(String offeringId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/assessments"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdAssessmentsGetValidateBeforeCall(String offeringId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAssessmentsGet(Async)");
        }

        return offeringsOfferingIdAssessmentsGetCall(offeringId, _callback);

    }

    /**
     * Find offering&#39;s assessments
     * Responds with all assessments in an offering matching the offeringId.
     * @param offeringId offering&#39;s id (required)
     * @return List&lt;AssessmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> offering&#39;s assessments </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<AssessmentResponse> offeringsOfferingIdAssessmentsGet(String offeringId) throws ApiException {
        ApiResponse<List<AssessmentResponse>> localVarResp = offeringsOfferingIdAssessmentsGetWithHttpInfo(offeringId);
        return localVarResp.getData();
    }

    /**
     * Find offering&#39;s assessments
     * Responds with all assessments in an offering matching the offeringId.
     * @param offeringId offering&#39;s id (required)
     * @return ApiResponse&lt;List&lt;AssessmentResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> offering&#39;s assessments </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AssessmentResponse>> offeringsOfferingIdAssessmentsGetWithHttpInfo(String offeringId) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdAssessmentsGetValidateBeforeCall(offeringId, null);
        Type localVarReturnType = new TypeToken<List<AssessmentResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find offering&#39;s assessments (asynchronously)
     * Responds with all assessments in an offering matching the offeringId.
     * @param offeringId offering&#39;s id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> offering&#39;s assessments </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdAssessmentsGetAsync(String offeringId, final ApiCallback<List<AssessmentResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdAssessmentsGetValidateBeforeCall(offeringId, _callback);
        Type localVarReturnType = new TypeToken<List<AssessmentResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for offeringsOfferingIdLearnersPendingSubmissionGet
     * @param offeringId offering&#39;s id (required)
     * @param days days to assessment due date. Default is 3 days (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> offering&#39;s learners </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdLearnersPendingSubmissionGetCall(String offeringId, String days, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/learners/pending-submission"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (days != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("days", days));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdLearnersPendingSubmissionGetValidateBeforeCall(String offeringId, String days, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdLearnersPendingSubmissionGet(Async)");
        }

        return offeringsOfferingIdLearnersPendingSubmissionGetCall(offeringId, days, _callback);

    }

    /**
     * Find learners with assessments pending x days before due date within the specified offeringId
     * Responds with learners who have one or more assessments due x days before the due date, with each assessment that is due, where x &#x3D; the number of days specified in the request. The default is 3 days.
     * @param offeringId offering&#39;s id (required)
     * @param days days to assessment due date. Default is 3 days (optional)
     * @return List&lt;AssessmentPendingSubmission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> offering&#39;s learners </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<AssessmentPendingSubmission> offeringsOfferingIdLearnersPendingSubmissionGet(String offeringId, String days) throws ApiException {
        ApiResponse<List<AssessmentPendingSubmission>> localVarResp = offeringsOfferingIdLearnersPendingSubmissionGetWithHttpInfo(offeringId, days);
        return localVarResp.getData();
    }

    /**
     * Find learners with assessments pending x days before due date within the specified offeringId
     * Responds with learners who have one or more assessments due x days before the due date, with each assessment that is due, where x &#x3D; the number of days specified in the request. The default is 3 days.
     * @param offeringId offering&#39;s id (required)
     * @param days days to assessment due date. Default is 3 days (optional)
     * @return ApiResponse&lt;List&lt;AssessmentPendingSubmission&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> offering&#39;s learners </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AssessmentPendingSubmission>> offeringsOfferingIdLearnersPendingSubmissionGetWithHttpInfo(String offeringId, String days) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdLearnersPendingSubmissionGetValidateBeforeCall(offeringId, days, null);
        Type localVarReturnType = new TypeToken<List<AssessmentPendingSubmission>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find learners with assessments pending x days before due date within the specified offeringId (asynchronously)
     * Responds with learners who have one or more assessments due x days before the due date, with each assessment that is due, where x &#x3D; the number of days specified in the request. The default is 3 days.
     * @param offeringId offering&#39;s id (required)
     * @param days days to assessment due date. Default is 3 days (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> offering&#39;s learners </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdLearnersPendingSubmissionGetAsync(String offeringId, String days, final ApiCallback<List<AssessmentPendingSubmission>> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdLearnersPendingSubmissionGetValidateBeforeCall(offeringId, days, _callback);
        Type localVarReturnType = new TypeToken<List<AssessmentPendingSubmission>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDelete
     * @param offeringId offering&#39;s id (required)
     * @param userEmail user&#39;s email (required)
     * @param assessmentId assessment&#39;s id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User&#39;s assessment successfully moved to draft state. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDeleteCall(String offeringId, String userEmail, String assessmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/users/{userEmail}/assessments/{assessmentId}"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()))
            .replace("{" + "userEmail" + "}", localVarApiClient.escapeString(userEmail.toString()))
            .replace("{" + "assessmentId" + "}", localVarApiClient.escapeString(assessmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDeleteValidateBeforeCall(String offeringId, String userEmail, String assessmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDelete(Async)");
        }

        // verify the required parameter 'userEmail' is set
        if (userEmail == null) {
            throw new ApiException("Missing the required parameter 'userEmail' when calling offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDelete(Async)");
        }

        // verify the required parameter 'assessmentId' is set
        if (assessmentId == null) {
            throw new ApiException("Missing the required parameter 'assessmentId' when calling offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDelete(Async)");
        }

        return offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDeleteCall(offeringId, userEmail, assessmentId, _callback);

    }

    /**
     * Reset user&#39;s assessment to draft state
     * Resets the user&#39;s submitted assessment to a draft state.
     * @param offeringId offering&#39;s id (required)
     * @param userEmail user&#39;s email (required)
     * @param assessmentId assessment&#39;s id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User&#39;s assessment successfully moved to draft state. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDelete(String offeringId, String userEmail, String assessmentId) throws ApiException {
        offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDeleteWithHttpInfo(offeringId, userEmail, assessmentId);
    }

    /**
     * Reset user&#39;s assessment to draft state
     * Resets the user&#39;s submitted assessment to a draft state.
     * @param offeringId offering&#39;s id (required)
     * @param userEmail user&#39;s email (required)
     * @param assessmentId assessment&#39;s id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User&#39;s assessment successfully moved to draft state. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDeleteWithHttpInfo(String offeringId, String userEmail, String assessmentId) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDeleteValidateBeforeCall(offeringId, userEmail, assessmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reset user&#39;s assessment to draft state (asynchronously)
     * Resets the user&#39;s submitted assessment to a draft state.
     * @param offeringId offering&#39;s id (required)
     * @param userEmail user&#39;s email (required)
     * @param assessmentId assessment&#39;s id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User&#39;s assessment successfully moved to draft state. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDeleteAsync(String offeringId, String userEmail, String assessmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDeleteValidateBeforeCall(offeringId, userEmail, assessmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGet
     * @param offeringId offering&#39;s id (required)
     * @param userEmail user&#39;s email (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user open response submission and mark details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGetCall(String offeringId, String userEmail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/users/{userEmail}/submissions/open-response"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()))
            .replace("{" + "userEmail" + "}", localVarApiClient.escapeString(userEmail.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGetValidateBeforeCall(String offeringId, String userEmail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGet(Async)");
        }

        // verify the required parameter 'userEmail' is set
        if (userEmail == null) {
            throw new ApiException("Missing the required parameter 'userEmail' when calling offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGet(Async)");
        }

        return offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGetCall(offeringId, userEmail, _callback);

    }

    /**
     * Find learner&#39;s open response assessment submissions
     * Responds with open response assessment submissions by a learner in an offering.
     * @param offeringId offering&#39;s id (required)
     * @param userEmail user&#39;s email (required)
     * @return List&lt;Assignments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user open response submission and mark details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Assignments> offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGet(String offeringId, String userEmail) throws ApiException {
        ApiResponse<List<Assignments>> localVarResp = offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGetWithHttpInfo(offeringId, userEmail);
        return localVarResp.getData();
    }

    /**
     * Find learner&#39;s open response assessment submissions
     * Responds with open response assessment submissions by a learner in an offering.
     * @param offeringId offering&#39;s id (required)
     * @param userEmail user&#39;s email (required)
     * @return ApiResponse&lt;List&lt;Assignments&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user open response submission and mark details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Assignments>> offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGetWithHttpInfo(String offeringId, String userEmail) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGetValidateBeforeCall(offeringId, userEmail, null);
        Type localVarReturnType = new TypeToken<List<Assignments>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find learner&#39;s open response assessment submissions (asynchronously)
     * Responds with open response assessment submissions by a learner in an offering.
     * @param offeringId offering&#39;s id (required)
     * @param userEmail user&#39;s email (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user open response submission and mark details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGetAsync(String offeringId, String userEmail, final ApiCallback<List<Assignments>> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGetValidateBeforeCall(offeringId, userEmail, _callback);
        Type localVarReturnType = new TypeToken<List<Assignments>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
