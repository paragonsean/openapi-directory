/*
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ActivityAttemptOpenResponseFeedback;
import org.openapitools.client.model.ActivityAttemptOpenResponseFiles;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ActivityAttemptOpenResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:36.016710-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActivityAttemptOpenResponse {
  public static final String SERIALIZED_NAME_ACTIVITY_ID = "activityId";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_ID)
  private String activityId;

  public static final String SERIALIZED_NAME_ACTIVITY_TYPE = "activityType";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_TYPE)
  private String activityType;

  public static final String SERIALIZED_NAME_FEEDBACK = "feedback";
  @SerializedName(SERIALIZED_NAME_FEEDBACK)
  private ActivityAttemptOpenResponseFeedback feedback;

  public static final String SERIALIZED_NAME_LEARNER_EMAIL = "learnerEmail";
  @SerializedName(SERIALIZED_NAME_LEARNER_EMAIL)
  private String learnerEmail;

  public static final String SERIALIZED_NAME_OFFERING_ID = "offeringId";
  @SerializedName(SERIALIZED_NAME_OFFERING_ID)
  private String offeringId;

  public static final String SERIALIZED_NAME_RESPONSE_TEXT = "responseText";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TEXT)
  private String responseText;

  public static final String SERIALIZED_NAME_UPLOADED_FILES = "uploadedFiles";
  @SerializedName(SERIALIZED_NAME_UPLOADED_FILES)
  private ActivityAttemptOpenResponseFiles uploadedFiles;

  public ActivityAttemptOpenResponse() {
  }

  public ActivityAttemptOpenResponse activityId(String activityId) {
    this.activityId = activityId;
    return this;
  }

  /**
   * Get activityId
   * @return activityId
   */
  @javax.annotation.Nullable
  public String getActivityId() {
    return activityId;
  }

  public void setActivityId(String activityId) {
    this.activityId = activityId;
  }


  public ActivityAttemptOpenResponse activityType(String activityType) {
    this.activityType = activityType;
    return this;
  }

  /**
   * Get activityType
   * @return activityType
   */
  @javax.annotation.Nullable
  public String getActivityType() {
    return activityType;
  }

  public void setActivityType(String activityType) {
    this.activityType = activityType;
  }


  public ActivityAttemptOpenResponse feedback(ActivityAttemptOpenResponseFeedback feedback) {
    this.feedback = feedback;
    return this;
  }

  /**
   * Get feedback
   * @return feedback
   */
  @javax.annotation.Nullable
  public ActivityAttemptOpenResponseFeedback getFeedback() {
    return feedback;
  }

  public void setFeedback(ActivityAttemptOpenResponseFeedback feedback) {
    this.feedback = feedback;
  }


  public ActivityAttemptOpenResponse learnerEmail(String learnerEmail) {
    this.learnerEmail = learnerEmail;
    return this;
  }

  /**
   * Get learnerEmail
   * @return learnerEmail
   */
  @javax.annotation.Nullable
  public String getLearnerEmail() {
    return learnerEmail;
  }

  public void setLearnerEmail(String learnerEmail) {
    this.learnerEmail = learnerEmail;
  }


  public ActivityAttemptOpenResponse offeringId(String offeringId) {
    this.offeringId = offeringId;
    return this;
  }

  /**
   * Get offeringId
   * @return offeringId
   */
  @javax.annotation.Nullable
  public String getOfferingId() {
    return offeringId;
  }

  public void setOfferingId(String offeringId) {
    this.offeringId = offeringId;
  }


  public ActivityAttemptOpenResponse responseText(String responseText) {
    this.responseText = responseText;
    return this;
  }

  /**
   * Get responseText
   * @return responseText
   */
  @javax.annotation.Nullable
  public String getResponseText() {
    return responseText;
  }

  public void setResponseText(String responseText) {
    this.responseText = responseText;
  }


  public ActivityAttemptOpenResponse uploadedFiles(ActivityAttemptOpenResponseFiles uploadedFiles) {
    this.uploadedFiles = uploadedFiles;
    return this;
  }

  /**
   * Get uploadedFiles
   * @return uploadedFiles
   */
  @javax.annotation.Nullable
  public ActivityAttemptOpenResponseFiles getUploadedFiles() {
    return uploadedFiles;
  }

  public void setUploadedFiles(ActivityAttemptOpenResponseFiles uploadedFiles) {
    this.uploadedFiles = uploadedFiles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivityAttemptOpenResponse activityAttemptOpenResponse = (ActivityAttemptOpenResponse) o;
    return Objects.equals(this.activityId, activityAttemptOpenResponse.activityId) &&
        Objects.equals(this.activityType, activityAttemptOpenResponse.activityType) &&
        Objects.equals(this.feedback, activityAttemptOpenResponse.feedback) &&
        Objects.equals(this.learnerEmail, activityAttemptOpenResponse.learnerEmail) &&
        Objects.equals(this.offeringId, activityAttemptOpenResponse.offeringId) &&
        Objects.equals(this.responseText, activityAttemptOpenResponse.responseText) &&
        Objects.equals(this.uploadedFiles, activityAttemptOpenResponse.uploadedFiles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityId, activityType, feedback, learnerEmail, offeringId, responseText, uploadedFiles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivityAttemptOpenResponse {\n");
    sb.append("    activityId: ").append(toIndentedString(activityId)).append("\n");
    sb.append("    activityType: ").append(toIndentedString(activityType)).append("\n");
    sb.append("    feedback: ").append(toIndentedString(feedback)).append("\n");
    sb.append("    learnerEmail: ").append(toIndentedString(learnerEmail)).append("\n");
    sb.append("    offeringId: ").append(toIndentedString(offeringId)).append("\n");
    sb.append("    responseText: ").append(toIndentedString(responseText)).append("\n");
    sb.append("    uploadedFiles: ").append(toIndentedString(uploadedFiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityId");
    openapiFields.add("activityType");
    openapiFields.add("feedback");
    openapiFields.add("learnerEmail");
    openapiFields.add("offeringId");
    openapiFields.add("responseText");
    openapiFields.add("uploadedFiles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActivityAttemptOpenResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActivityAttemptOpenResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActivityAttemptOpenResponse is not found in the empty JSON string", ActivityAttemptOpenResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActivityAttemptOpenResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActivityAttemptOpenResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("activityId") != null && !jsonObj.get("activityId").isJsonNull()) && !jsonObj.get("activityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activityId").toString()));
      }
      if ((jsonObj.get("activityType") != null && !jsonObj.get("activityType").isJsonNull()) && !jsonObj.get("activityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activityType").toString()));
      }
      // validate the optional field `feedback`
      if (jsonObj.get("feedback") != null && !jsonObj.get("feedback").isJsonNull()) {
        ActivityAttemptOpenResponseFeedback.validateJsonElement(jsonObj.get("feedback"));
      }
      if ((jsonObj.get("learnerEmail") != null && !jsonObj.get("learnerEmail").isJsonNull()) && !jsonObj.get("learnerEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `learnerEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("learnerEmail").toString()));
      }
      if ((jsonObj.get("offeringId") != null && !jsonObj.get("offeringId").isJsonNull()) && !jsonObj.get("offeringId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offeringId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offeringId").toString()));
      }
      if ((jsonObj.get("responseText") != null && !jsonObj.get("responseText").isJsonNull()) && !jsonObj.get("responseText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseText").toString()));
      }
      // validate the optional field `uploadedFiles`
      if (jsonObj.get("uploadedFiles") != null && !jsonObj.get("uploadedFiles").isJsonNull()) {
        ActivityAttemptOpenResponseFiles.validateJsonElement(jsonObj.get("uploadedFiles"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActivityAttemptOpenResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActivityAttemptOpenResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActivityAttemptOpenResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActivityAttemptOpenResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ActivityAttemptOpenResponse>() {
           @Override
           public void write(JsonWriter out, ActivityAttemptOpenResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActivityAttemptOpenResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActivityAttemptOpenResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActivityAttemptOpenResponse
   * @throws IOException if the JSON string is invalid with respect to ActivityAttemptOpenResponse
   */
  public static ActivityAttemptOpenResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActivityAttemptOpenResponse.class);
  }

  /**
   * Convert an instance of ActivityAttemptOpenResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

