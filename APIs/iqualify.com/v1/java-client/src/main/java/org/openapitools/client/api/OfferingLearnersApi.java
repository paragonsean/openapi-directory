/*
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.OfferingUser;
import org.openapitools.client.model.OfferingUserAddResponse;
import org.openapitools.client.model.OfferingUserResponse;
import org.openapitools.client.model.OfferingsOfferingIdUsersPost207ResponseInner;
import org.openapitools.client.model.TransferRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OfferingLearnersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OfferingLearnersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OfferingLearnersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for offeringsOfferingIdUsersGet
     * @param offeringId offering&#39;s id (required)
     * @param facilitators If true, facilitators are included in the results. (optional, default to true)
     * @param learners If true, learners are included in the results. (optional, default to true)
     * @param markers If true, markers are included in the results. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> offering&#39;s users </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdUsersGetCall(String offeringId, String facilitators, String learners, String markers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/users"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (facilitators != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facilitators", facilitators));
        }

        if (learners != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("learners", learners));
        }

        if (markers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("markers", markers));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdUsersGetValidateBeforeCall(String offeringId, String facilitators, String learners, String markers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdUsersGet(Async)");
        }

        return offeringsOfferingIdUsersGetCall(offeringId, facilitators, learners, markers, _callback);

    }

    /**
     * Find offering&#39;s users
     * Responds with a list of users in the offering (facilitators, learners and markers.).
     * @param offeringId offering&#39;s id (required)
     * @param facilitators If true, facilitators are included in the results. (optional, default to true)
     * @param learners If true, learners are included in the results. (optional, default to true)
     * @param markers If true, markers are included in the results. (optional, default to true)
     * @return List&lt;OfferingUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> offering&#39;s users </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<OfferingUserResponse> offeringsOfferingIdUsersGet(String offeringId, String facilitators, String learners, String markers) throws ApiException {
        ApiResponse<List<OfferingUserResponse>> localVarResp = offeringsOfferingIdUsersGetWithHttpInfo(offeringId, facilitators, learners, markers);
        return localVarResp.getData();
    }

    /**
     * Find offering&#39;s users
     * Responds with a list of users in the offering (facilitators, learners and markers.).
     * @param offeringId offering&#39;s id (required)
     * @param facilitators If true, facilitators are included in the results. (optional, default to true)
     * @param learners If true, learners are included in the results. (optional, default to true)
     * @param markers If true, markers are included in the results. (optional, default to true)
     * @return ApiResponse&lt;List&lt;OfferingUserResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> offering&#39;s users </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OfferingUserResponse>> offeringsOfferingIdUsersGetWithHttpInfo(String offeringId, String facilitators, String learners, String markers) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdUsersGetValidateBeforeCall(offeringId, facilitators, learners, markers, null);
        Type localVarReturnType = new TypeToken<List<OfferingUserResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find offering&#39;s users (asynchronously)
     * Responds with a list of users in the offering (facilitators, learners and markers.).
     * @param offeringId offering&#39;s id (required)
     * @param facilitators If true, facilitators are included in the results. (optional, default to true)
     * @param learners If true, learners are included in the results. (optional, default to true)
     * @param markers If true, markers are included in the results. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> offering&#39;s users </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdUsersGetAsync(String offeringId, String facilitators, String learners, String markers, final ApiCallback<List<OfferingUserResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdUsersGetValidateBeforeCall(offeringId, facilitators, learners, markers, _callback);
        Type localVarReturnType = new TypeToken<List<OfferingUserResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for offeringsOfferingIdUsersMarkerEmailMarksDelete
     * @param offeringId offering&#39;s id (required)
     * @param markerEmail marker&#39;s email (required)
     * @param requestBody array of learners e-mails (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> learners marked by the marker </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdUsersMarkerEmailMarksDeleteCall(String offeringId, String markerEmail, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/users/{markerEmail}/marks"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()))
            .replace("{" + "markerEmail" + "}", localVarApiClient.escapeString(markerEmail.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdUsersMarkerEmailMarksDeleteValidateBeforeCall(String offeringId, String markerEmail, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdUsersMarkerEmailMarksDelete(Async)");
        }

        // verify the required parameter 'markerEmail' is set
        if (markerEmail == null) {
            throw new ApiException("Missing the required parameter 'markerEmail' when calling offeringsOfferingIdUsersMarkerEmailMarksDelete(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling offeringsOfferingIdUsersMarkerEmailMarksDelete(Async)");
        }

        return offeringsOfferingIdUsersMarkerEmailMarksDeleteCall(offeringId, markerEmail, requestBody, _callback);

    }

    /**
     * Remove learners from coach&#39;s marking list
     * Removes an array of learners from coach&#39;s marking list.
     * @param offeringId offering&#39;s id (required)
     * @param markerEmail marker&#39;s email (required)
     * @param requestBody array of learners e-mails (required)
     * @return List&lt;OfferingUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> learners marked by the marker </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<OfferingUser> offeringsOfferingIdUsersMarkerEmailMarksDelete(String offeringId, String markerEmail, List<String> requestBody) throws ApiException {
        ApiResponse<List<OfferingUser>> localVarResp = offeringsOfferingIdUsersMarkerEmailMarksDeleteWithHttpInfo(offeringId, markerEmail, requestBody);
        return localVarResp.getData();
    }

    /**
     * Remove learners from coach&#39;s marking list
     * Removes an array of learners from coach&#39;s marking list.
     * @param offeringId offering&#39;s id (required)
     * @param markerEmail marker&#39;s email (required)
     * @param requestBody array of learners e-mails (required)
     * @return ApiResponse&lt;List&lt;OfferingUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> learners marked by the marker </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OfferingUser>> offeringsOfferingIdUsersMarkerEmailMarksDeleteWithHttpInfo(String offeringId, String markerEmail, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdUsersMarkerEmailMarksDeleteValidateBeforeCall(offeringId, markerEmail, requestBody, null);
        Type localVarReturnType = new TypeToken<List<OfferingUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove learners from coach&#39;s marking list (asynchronously)
     * Removes an array of learners from coach&#39;s marking list.
     * @param offeringId offering&#39;s id (required)
     * @param markerEmail marker&#39;s email (required)
     * @param requestBody array of learners e-mails (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> learners marked by the marker </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdUsersMarkerEmailMarksDeleteAsync(String offeringId, String markerEmail, List<String> requestBody, final ApiCallback<List<OfferingUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdUsersMarkerEmailMarksDeleteValidateBeforeCall(offeringId, markerEmail, requestBody, _callback);
        Type localVarReturnType = new TypeToken<List<OfferingUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for offeringsOfferingIdUsersMarkerEmailMarksGet
     * @param offeringId offering&#39;s id (required)
     * @param markerEmail marker&#39;s email (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> learners marked by the marker </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdUsersMarkerEmailMarksGetCall(String offeringId, String markerEmail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/users/{markerEmail}/marks"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()))
            .replace("{" + "markerEmail" + "}", localVarApiClient.escapeString(markerEmail.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdUsersMarkerEmailMarksGetValidateBeforeCall(String offeringId, String markerEmail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdUsersMarkerEmailMarksGet(Async)");
        }

        // verify the required parameter 'markerEmail' is set
        if (markerEmail == null) {
            throw new ApiException("Missing the required parameter 'markerEmail' when calling offeringsOfferingIdUsersMarkerEmailMarksGet(Async)");
        }

        return offeringsOfferingIdUsersMarkerEmailMarksGetCall(offeringId, markerEmail, _callback);

    }

    /**
     * Find Learners marked by a coach
     * Responds with all learners marked by the specified coach.
     * @param offeringId offering&#39;s id (required)
     * @param markerEmail marker&#39;s email (required)
     * @return List&lt;OfferingUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> learners marked by the marker </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<OfferingUser> offeringsOfferingIdUsersMarkerEmailMarksGet(String offeringId, String markerEmail) throws ApiException {
        ApiResponse<List<OfferingUser>> localVarResp = offeringsOfferingIdUsersMarkerEmailMarksGetWithHttpInfo(offeringId, markerEmail);
        return localVarResp.getData();
    }

    /**
     * Find Learners marked by a coach
     * Responds with all learners marked by the specified coach.
     * @param offeringId offering&#39;s id (required)
     * @param markerEmail marker&#39;s email (required)
     * @return ApiResponse&lt;List&lt;OfferingUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> learners marked by the marker </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OfferingUser>> offeringsOfferingIdUsersMarkerEmailMarksGetWithHttpInfo(String offeringId, String markerEmail) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdUsersMarkerEmailMarksGetValidateBeforeCall(offeringId, markerEmail, null);
        Type localVarReturnType = new TypeToken<List<OfferingUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find Learners marked by a coach (asynchronously)
     * Responds with all learners marked by the specified coach.
     * @param offeringId offering&#39;s id (required)
     * @param markerEmail marker&#39;s email (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> learners marked by the marker </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdUsersMarkerEmailMarksGetAsync(String offeringId, String markerEmail, final ApiCallback<List<OfferingUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdUsersMarkerEmailMarksGetValidateBeforeCall(offeringId, markerEmail, _callback);
        Type localVarReturnType = new TypeToken<List<OfferingUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for offeringsOfferingIdUsersMarkerEmailMarksPost
     * @param offeringId offering&#39;s id (required)
     * @param markerEmail marker&#39;s email (required)
     * @param requestBody array of learners e-mails (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> learners marked by the marker </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdUsersMarkerEmailMarksPostCall(String offeringId, String markerEmail, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/users/{markerEmail}/marks"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()))
            .replace("{" + "markerEmail" + "}", localVarApiClient.escapeString(markerEmail.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdUsersMarkerEmailMarksPostValidateBeforeCall(String offeringId, String markerEmail, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdUsersMarkerEmailMarksPost(Async)");
        }

        // verify the required parameter 'markerEmail' is set
        if (markerEmail == null) {
            throw new ApiException("Missing the required parameter 'markerEmail' when calling offeringsOfferingIdUsersMarkerEmailMarksPost(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling offeringsOfferingIdUsersMarkerEmailMarksPost(Async)");
        }

        return offeringsOfferingIdUsersMarkerEmailMarksPostCall(offeringId, markerEmail, requestBody, _callback);

    }

    /**
     * Add learners to be marked by a coach
     * Adds an array of learners to be marked by the specified coach.
     * @param offeringId offering&#39;s id (required)
     * @param markerEmail marker&#39;s email (required)
     * @param requestBody array of learners e-mails (required)
     * @return List&lt;OfferingUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> learners marked by the marker </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<OfferingUser> offeringsOfferingIdUsersMarkerEmailMarksPost(String offeringId, String markerEmail, List<String> requestBody) throws ApiException {
        ApiResponse<List<OfferingUser>> localVarResp = offeringsOfferingIdUsersMarkerEmailMarksPostWithHttpInfo(offeringId, markerEmail, requestBody);
        return localVarResp.getData();
    }

    /**
     * Add learners to be marked by a coach
     * Adds an array of learners to be marked by the specified coach.
     * @param offeringId offering&#39;s id (required)
     * @param markerEmail marker&#39;s email (required)
     * @param requestBody array of learners e-mails (required)
     * @return ApiResponse&lt;List&lt;OfferingUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> learners marked by the marker </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OfferingUser>> offeringsOfferingIdUsersMarkerEmailMarksPostWithHttpInfo(String offeringId, String markerEmail, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdUsersMarkerEmailMarksPostValidateBeforeCall(offeringId, markerEmail, requestBody, null);
        Type localVarReturnType = new TypeToken<List<OfferingUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add learners to be marked by a coach (asynchronously)
     * Adds an array of learners to be marked by the specified coach.
     * @param offeringId offering&#39;s id (required)
     * @param markerEmail marker&#39;s email (required)
     * @param requestBody array of learners e-mails (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> learners marked by the marker </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdUsersMarkerEmailMarksPostAsync(String offeringId, String markerEmail, List<String> requestBody, final ApiCallback<List<OfferingUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdUsersMarkerEmailMarksPostValidateBeforeCall(offeringId, markerEmail, requestBody, _callback);
        Type localVarReturnType = new TypeToken<List<OfferingUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for offeringsOfferingIdUsersPost
     * @param offeringId offering&#39;s id (required)
     * @param offeringUser  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> user successfully added to the offering </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Partially successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdUsersPostCall(String offeringId, List<OfferingUser> offeringUser, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = offeringUser;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/users"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdUsersPostValidateBeforeCall(String offeringId, List<OfferingUser> offeringUser, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdUsersPost(Async)");
        }

        // verify the required parameter 'offeringUser' is set
        if (offeringUser == null) {
            throw new ApiException("Missing the required parameter 'offeringUser' when calling offeringsOfferingIdUsersPost(Async)");
        }

        return offeringsOfferingIdUsersPostCall(offeringId, offeringUser, _callback);

    }

    /**
     * Adds user to the offering
     * Adds one or more users to the offering.
     * @param offeringId offering&#39;s id (required)
     * @param offeringUser  (required)
     * @return List&lt;OfferingUserAddResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> user successfully added to the offering </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Partially successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<OfferingUserAddResponse> offeringsOfferingIdUsersPost(String offeringId, List<OfferingUser> offeringUser) throws ApiException {
        ApiResponse<List<OfferingUserAddResponse>> localVarResp = offeringsOfferingIdUsersPostWithHttpInfo(offeringId, offeringUser);
        return localVarResp.getData();
    }

    /**
     * Adds user to the offering
     * Adds one or more users to the offering.
     * @param offeringId offering&#39;s id (required)
     * @param offeringUser  (required)
     * @return ApiResponse&lt;List&lt;OfferingUserAddResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> user successfully added to the offering </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Partially successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OfferingUserAddResponse>> offeringsOfferingIdUsersPostWithHttpInfo(String offeringId, List<OfferingUser> offeringUser) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdUsersPostValidateBeforeCall(offeringId, offeringUser, null);
        Type localVarReturnType = new TypeToken<List<OfferingUserAddResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds user to the offering (asynchronously)
     * Adds one or more users to the offering.
     * @param offeringId offering&#39;s id (required)
     * @param offeringUser  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> user successfully added to the offering </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Partially successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdUsersPostAsync(String offeringId, List<OfferingUser> offeringUser, final ApiCallback<List<OfferingUserAddResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdUsersPostValidateBeforeCall(offeringId, offeringUser, _callback);
        Type localVarReturnType = new TypeToken<List<OfferingUserAddResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for offeringsOfferingIdUsersUserEmailDelete
     * @param offeringId offering&#39;s id (required)
     * @param userEmail user&#39;s email (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> user successfully removed from the offering </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdUsersUserEmailDeleteCall(String offeringId, String userEmail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offerings/{offeringId}/users/{userEmail}"
            .replace("{" + "offeringId" + "}", localVarApiClient.escapeString(offeringId.toString()))
            .replace("{" + "userEmail" + "}", localVarApiClient.escapeString(userEmail.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offeringsOfferingIdUsersUserEmailDeleteValidateBeforeCall(String offeringId, String userEmail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offeringId' is set
        if (offeringId == null) {
            throw new ApiException("Missing the required parameter 'offeringId' when calling offeringsOfferingIdUsersUserEmailDelete(Async)");
        }

        // verify the required parameter 'userEmail' is set
        if (userEmail == null) {
            throw new ApiException("Missing the required parameter 'userEmail' when calling offeringsOfferingIdUsersUserEmailDelete(Async)");
        }

        return offeringsOfferingIdUsersUserEmailDeleteCall(offeringId, userEmail, _callback);

    }

    /**
     * Removes user from the offering
     * Removes a user from the offering.
     * @param offeringId offering&#39;s id (required)
     * @param userEmail user&#39;s email (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> user successfully removed from the offering </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void offeringsOfferingIdUsersUserEmailDelete(String offeringId, String userEmail) throws ApiException {
        offeringsOfferingIdUsersUserEmailDeleteWithHttpInfo(offeringId, userEmail);
    }

    /**
     * Removes user from the offering
     * Removes a user from the offering.
     * @param offeringId offering&#39;s id (required)
     * @param userEmail user&#39;s email (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> user successfully removed from the offering </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> offeringsOfferingIdUsersUserEmailDeleteWithHttpInfo(String offeringId, String userEmail) throws ApiException {
        okhttp3.Call localVarCall = offeringsOfferingIdUsersUserEmailDeleteValidateBeforeCall(offeringId, userEmail, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes user from the offering (asynchronously)
     * Removes a user from the offering.
     * @param offeringId offering&#39;s id (required)
     * @param userEmail user&#39;s email (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> user successfully removed from the offering </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offeringsOfferingIdUsersUserEmailDeleteAsync(String offeringId, String userEmail, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = offeringsOfferingIdUsersUserEmailDeleteValidateBeforeCall(offeringId, userEmail, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserEmailTransferPatch
     * @param userEmail user&#39;s email (required)
     * @param transferRequest transfer_data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated user information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserEmailTransferPatchCall(String userEmail, TransferRequest transferRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferRequest;

        // create path and map variables
        String localVarPath = "/users/{userEmail}/transfer"
            .replace("{" + "userEmail" + "}", localVarApiClient.escapeString(userEmail.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserEmailTransferPatchValidateBeforeCall(String userEmail, TransferRequest transferRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userEmail' is set
        if (userEmail == null) {
            throw new ApiException("Missing the required parameter 'userEmail' when calling usersUserEmailTransferPatch(Async)");
        }

        // verify the required parameter 'transferRequest' is set
        if (transferRequest == null) {
            throw new ApiException("Missing the required parameter 'transferRequest' when calling usersUserEmailTransferPatch(Async)");
        }

        return usersUserEmailTransferPatchCall(userEmail, transferRequest, _callback);

    }

    /**
     * Transfer a user between offerings
     * Moves the user&#39;s access and progress from one offering to another.
     * @param userEmail user&#39;s email (required)
     * @param transferRequest transfer_data (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated user information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void usersUserEmailTransferPatch(String userEmail, TransferRequest transferRequest) throws ApiException {
        usersUserEmailTransferPatchWithHttpInfo(userEmail, transferRequest);
    }

    /**
     * Transfer a user between offerings
     * Moves the user&#39;s access and progress from one offering to another.
     * @param userEmail user&#39;s email (required)
     * @param transferRequest transfer_data (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated user information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersUserEmailTransferPatchWithHttpInfo(String userEmail, TransferRequest transferRequest) throws ApiException {
        okhttp3.Call localVarCall = usersUserEmailTransferPatchValidateBeforeCall(userEmail, transferRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Transfer a user between offerings (asynchronously)
     * Moves the user&#39;s access and progress from one offering to another.
     * @param userEmail user&#39;s email (required)
     * @param transferRequest transfer_data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated user information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization token was found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not allowed to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserEmailTransferPatchAsync(String userEmail, TransferRequest transferRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserEmailTransferPatchValidateBeforeCall(userEmail, transferRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
