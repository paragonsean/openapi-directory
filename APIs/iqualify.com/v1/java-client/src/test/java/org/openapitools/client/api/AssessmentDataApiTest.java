/*
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ActivityAttemptOpenResponse;
import org.openapitools.client.model.AssignmentMarkResponse;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.QuizMarkResponse;
import org.openapitools.client.model.SubmissionMarkResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AssessmentDataApi
 */
@Disabled
public class AssessmentDataApiTest {

    private final AssessmentDataApi api = new AssessmentDataApi();

    /**
     * Find open response activity attempts
     *
     * Responds with all learner activity attempts for open response activities in an offering matching the offeringId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdAnalyticsActivitiesResponsesGetTest() throws ApiException {
        String offeringId = null;
        List<ActivityAttemptOpenResponse> response = api.offeringsOfferingIdAnalyticsActivitiesResponsesGet(offeringId);
        // TODO: test validations
    }

    /**
     * Find assessment marks
     *
     * Responds with all learner assessment marks in an offering matching the offeringId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdAnalyticsMarksAssignmentsGetTest() throws ApiException {
        String offeringId = null;
        List<AssignmentMarkResponse> response = api.offeringsOfferingIdAnalyticsMarksAssignmentsGet(offeringId);
        // TODO: test validations
    }

    /**
     * Find quiz marks
     *
     * Responds with all learner quiz marks in an offering matching the offeringId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdAnalyticsMarksQuizzesGetTest() throws ApiException {
        String offeringId = null;
        List<QuizMarkResponse> response = api.offeringsOfferingIdAnalyticsMarksQuizzesGet(offeringId);
        // TODO: test validations
    }

    /**
     * Find submissions to assessments, including marks if any
     *
     * Responds with all learner assessment submissions and marks, if any, in an offering matching the offeringId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdAnalyticsSubmissionsAssignmentsGetTest() throws ApiException {
        String offeringId = null;
        List<AssignmentMarkResponse> response = api.offeringsOfferingIdAnalyticsSubmissionsAssignmentsGet(offeringId);
        // TODO: test validations
    }

    /**
     * Find submissions to a specified open response assessment, including marks if any
     *
     * Responds with all learner assessment submissions and marks, if any, in a specified open response assessment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdAnalyticsSubmissionsOpenResponseAssessmentIdGetTest() throws ApiException {
        String offeringId = null;
        String assessmentId = null;
        List<SubmissionMarkResponse> response = api.offeringsOfferingIdAnalyticsSubmissionsOpenResponseAssessmentIdGet(offeringId, assessmentId);
        // TODO: test validations
    }

    /**
     * Find a learner&#39;s submission to a specified assessment, including marks if any
     *
     * Responds with the learner&#39;s assessment submission and any marks for the submission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdAnalyticsSubmissionsUserEmailAssignmentsAssessmentIdGetTest() throws ApiException {
        String offeringId = null;
        String userEmail = null;
        String assessmentId = null;
        List<SubmissionMarkResponse> response = api.offeringsOfferingIdAnalyticsSubmissionsUserEmailAssignmentsAssessmentIdGet(offeringId, userEmail, assessmentId);
        // TODO: test validations
    }

}
