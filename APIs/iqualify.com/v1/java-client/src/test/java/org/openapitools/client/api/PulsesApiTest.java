/*
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.OfferingsOfferingIdAnalyticsPulsesResponsesGetResponseTimeParameter;
import org.openapitools.client.model.PulseResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PulsesApi
 */
@Disabled
public class PulsesApiTest {

    private final PulsesApi api = new PulsesApi();

    /**
     * Find all pulse IDs in the specified offering
     *
     * Responds with the IDs of all pulses that learners have responded to in a specified offering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdAnalyticsPulsesGetTest() throws ApiException {
        String offeringId = null;
        List<String> response = api.offeringsOfferingIdAnalyticsPulsesGet(offeringId);
        // TODO: test validations
    }

    /**
     * Find pulses by offeringId and pulseId
     *
     * Responds with pulse&#39;s responses, matching the pulseId, in an offering matching the offeringId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdAnalyticsPulsesPulseIdResponsesGetTest() throws ApiException {
        String offeringId = null;
        String pulseId = null;
        List<PulseResponse> response = api.offeringsOfferingIdAnalyticsPulsesPulseIdResponsesGet(offeringId, pulseId);
        // TODO: test validations
    }

    /**
     * Find pulses by offeringId
     *
     * Responds with pulse&#39;s responses in an offering matching the offeringId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdAnalyticsPulsesResponsesGetTest() throws ApiException {
        String offeringId = null;
        String pulseType = null;
        OfferingsOfferingIdAnalyticsPulsesResponsesGetResponseTimeParameter responseTime = null;
        List<PulseResponse> response = api.offeringsOfferingIdAnalyticsPulsesResponsesGet(offeringId, pulseType, responseTime);
        // TODO: test validations
    }

}
