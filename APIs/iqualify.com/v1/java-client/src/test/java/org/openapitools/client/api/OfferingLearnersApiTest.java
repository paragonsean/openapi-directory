/*
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.OfferingUser;
import org.openapitools.client.model.OfferingUserAddResponse;
import org.openapitools.client.model.OfferingUserResponse;
import org.openapitools.client.model.OfferingsOfferingIdUsersPost207ResponseInner;
import org.openapitools.client.model.TransferRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OfferingLearnersApi
 */
@Disabled
public class OfferingLearnersApiTest {

    private final OfferingLearnersApi api = new OfferingLearnersApi();

    /**
     * Find offering&#39;s users
     *
     * Responds with a list of users in the offering (facilitators, learners and markers.).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdUsersGetTest() throws ApiException {
        String offeringId = null;
        String facilitators = null;
        String learners = null;
        String markers = null;
        List<OfferingUserResponse> response = api.offeringsOfferingIdUsersGet(offeringId, facilitators, learners, markers);
        // TODO: test validations
    }

    /**
     * Remove learners from coach&#39;s marking list
     *
     * Removes an array of learners from coach&#39;s marking list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdUsersMarkerEmailMarksDeleteTest() throws ApiException {
        String offeringId = null;
        String markerEmail = null;
        List<String> requestBody = null;
        List<OfferingUser> response = api.offeringsOfferingIdUsersMarkerEmailMarksDelete(offeringId, markerEmail, requestBody);
        // TODO: test validations
    }

    /**
     * Find Learners marked by a coach
     *
     * Responds with all learners marked by the specified coach.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdUsersMarkerEmailMarksGetTest() throws ApiException {
        String offeringId = null;
        String markerEmail = null;
        List<OfferingUser> response = api.offeringsOfferingIdUsersMarkerEmailMarksGet(offeringId, markerEmail);
        // TODO: test validations
    }

    /**
     * Add learners to be marked by a coach
     *
     * Adds an array of learners to be marked by the specified coach.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdUsersMarkerEmailMarksPostTest() throws ApiException {
        String offeringId = null;
        String markerEmail = null;
        List<String> requestBody = null;
        List<OfferingUser> response = api.offeringsOfferingIdUsersMarkerEmailMarksPost(offeringId, markerEmail, requestBody);
        // TODO: test validations
    }

    /**
     * Adds user to the offering
     *
     * Adds one or more users to the offering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdUsersPostTest() throws ApiException {
        String offeringId = null;
        List<OfferingUser> offeringUser = null;
        List<OfferingUserAddResponse> response = api.offeringsOfferingIdUsersPost(offeringId, offeringUser);
        // TODO: test validations
    }

    /**
     * Removes user from the offering
     *
     * Removes a user from the offering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdUsersUserEmailDeleteTest() throws ApiException {
        String offeringId = null;
        String userEmail = null;
        api.offeringsOfferingIdUsersUserEmailDelete(offeringId, userEmail);
        // TODO: test validations
    }

    /**
     * Transfer a user between offerings
     *
     * Moves the user&#39;s access and progress from one offering to another.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserEmailTransferPatchTest() throws ApiException {
        String userEmail = null;
        TransferRequest transferRequest = null;
        api.usersUserEmailTransferPatch(userEmail, transferRequest);
        // TODO: test validations
    }

}
