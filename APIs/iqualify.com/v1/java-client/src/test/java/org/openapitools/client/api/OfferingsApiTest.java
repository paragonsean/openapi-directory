/*
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Offering;
import org.openapitools.client.model.OfferingMetadataResponse;
import org.openapitools.client.model.OfferingRequired;
import org.openapitools.client.model.PortfolioActivations;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OfferingsApi
 */
@Disabled
public class OfferingsApiTest {

    private final OfferingsApi api = new OfferingsApi();

    /**
     * Find active offerings
     *
     * Responds with active offerings for your organisation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsCurrentGetTest() throws ApiException {
        List<OfferingMetadataResponse> response = api.offeringsCurrentGet();
        // TODO: test validations
    }

    /**
     * Find scheduled offerings
     *
     * Responds with scheduled offerings for your organisation. Scheduled offerings have a start date after today&#39;s date (inclusive).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsFutureGetTest() throws ApiException {
        List<OfferingMetadataResponse> response = api.offeringsFutureGet();
        // TODO: test validations
    }

    /**
     * Find current, past and future offerings
     *
     * Responds with all offerings for your organisation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsGetTest() throws ApiException {
        List<OfferingMetadataResponse> response = api.offeringsGet();
        // TODO: test validations
    }

    /**
     * Find offerings where info field matches the specified textPattern
     *
     * Find offerings where info field matches the specified text pattern.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsInfoTextPatternGetTest() throws ApiException {
        String textPattern = null;
        List<PortfolioActivations> response = api.offeringsInfoTextPatternGet(textPattern);
        // TODO: test validations
    }

    /**
     * Find offering by ID
     *
     * Responds with an offering matching the offeringId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdGetTest() throws ApiException {
        String offeringId = null;
        OfferingMetadataResponse response = api.offeringsOfferingIdGet(offeringId);
        // TODO: test validations
    }

    /**
     * Update offering
     *
     * Updates the offering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdPatchTest() throws ApiException {
        String offeringId = null;
        Offering offering = null;
        OfferingMetadataResponse response = api.offeringsOfferingIdPatch(offeringId, offering);
        // TODO: test validations
    }

    /**
     * Find past offerings
     *
     * Responds with past offerings for your organisation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsPastGetTest() throws ApiException {
        List<OfferingMetadataResponse> response = api.offeringsPastGet();
        // TODO: test validations
    }

    /**
     * Create offering
     *
     * Creates a new offering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsPostTest() throws ApiException {
        OfferingRequired offeringRequired = null;
        OfferingMetadataResponse response = api.offeringsPost(offeringRequired);
        // TODO: test validations
    }

    /**
     * Offerings summary
     *
     * Responds with a summary of all offerings for your organisation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsSummaryGetTest() throws ApiException {
        String $top = null;
        String $orderby = null;
        String $filter = null;
        List<PortfolioActivations> response = api.offeringsSummaryGet($top, $orderby, $filter);
        // TODO: test validations
    }

}
