/*
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CoursesContentIdMetadataCategoryPutRequest;
import org.openapitools.client.model.CoursesContentIdMetadataLevelPutRequest;
import org.openapitools.client.model.CoursesContentIdMetadataTagsPutRequest;
import org.openapitools.client.model.CoursesContentIdMetadataTopicPutRequest;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.OfferingMetadataResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OfferingMetadataApi
 */
@Disabled
public class OfferingMetadataApiTest {

    private final OfferingMetadataApi api = new OfferingMetadataApi();

    /**
     * Update offering category metadata
     *
     * Updates the offering category metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdMetadataCategoryPutTest() throws ApiException {
        String offeringId = null;
        CoursesContentIdMetadataCategoryPutRequest coursesContentIdMetadataCategoryPutRequest = null;
        OfferingMetadataResponse response = api.offeringsOfferingIdMetadataCategoryPut(offeringId, coursesContentIdMetadataCategoryPutRequest);
        // TODO: test validations
    }

    /**
     * Update offering level metadata
     *
     * Updates the offering level metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdMetadataLevelPutTest() throws ApiException {
        String offeringId = null;
        CoursesContentIdMetadataLevelPutRequest coursesContentIdMetadataLevelPutRequest = null;
        OfferingMetadataResponse response = api.offeringsOfferingIdMetadataLevelPut(offeringId, coursesContentIdMetadataLevelPutRequest);
        // TODO: test validations
    }

    /**
     * Update offering tags metadata
     *
     * Updates the offering tags metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdMetadataTagsPutTest() throws ApiException {
        String offeringId = null;
        CoursesContentIdMetadataTagsPutRequest coursesContentIdMetadataTagsPutRequest = null;
        OfferingMetadataResponse response = api.offeringsOfferingIdMetadataTagsPut(offeringId, coursesContentIdMetadataTagsPutRequest);
        // TODO: test validations
    }

    /**
     * Update offering topic metadata
     *
     * Updates the offering topic metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdMetadataTopicPutTest() throws ApiException {
        String offeringId = null;
        CoursesContentIdMetadataTopicPutRequest coursesContentIdMetadataTopicPutRequest = null;
        OfferingMetadataResponse response = api.offeringsOfferingIdMetadataTopicPut(offeringId, coursesContentIdMetadataTopicPutRequest);
        // TODO: test validations
    }

}
