/*
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Assessment;
import org.openapitools.client.model.AssessmentPendingSubmission;
import org.openapitools.client.model.AssessmentResponse;
import org.openapitools.client.model.Assignments;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.OfferingActivitiesResponse;
import org.openapitools.client.model.OfferingsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AssessmentManagementApi
 */
@Disabled
public class AssessmentManagementApiTest {

    private final AssessmentManagementApi api = new AssessmentManagementApi();

    /**
     * Find offering&#39;s activities
     *
     * Responds with the activities in a specific offering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdActivitiesOpenresponseGetTest() throws ApiException {
        String offeringId = null;
        List<OfferingActivitiesResponse> response = api.offeringsOfferingIdActivitiesOpenresponseGet(offeringId);
        // TODO: test validations
    }

    /**
     * Remove assessment document
     *
     * Removes the assessment document file for a specified assessment in an offering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDeleteTest() throws ApiException {
        String offeringId = null;
        String assessmentId = null;
        String documentId = null;
        api.offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDelete(offeringId, assessmentId, documentId);
        // TODO: test validations
    }

    /**
     * Update assessment details
     *
     * Updates the assessment details for a specified assessment in an offering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdAssessmentsAssessmentIdPatchTest() throws ApiException {
        String offeringId = null;
        String assessmentId = null;
        Assessment assessment = null;
        AssessmentResponse response = api.offeringsOfferingIdAssessmentsAssessmentIdPatch(offeringId, assessmentId, assessment);
        // TODO: test validations
    }

    /**
     * Update the due dates for a learner&#39;s quiz attempt
     *
     * Updates the due dates for a learner&#39;s quiz attempt specified by the assessmentId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchTest() throws ApiException {
        String offeringId = null;
        String assessmentId = null;
        String userEmail = null;
        OfferingsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest = null;
        api.offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatch(offeringId, assessmentId, userEmail, offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest);
        // TODO: test validations
    }

    /**
     * Find offering&#39;s assessments
     *
     * Responds with all assessments in an offering matching the offeringId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdAssessmentsGetTest() throws ApiException {
        String offeringId = null;
        List<AssessmentResponse> response = api.offeringsOfferingIdAssessmentsGet(offeringId);
        // TODO: test validations
    }

    /**
     * Find learners with assessments pending x days before due date within the specified offeringId
     *
     * Responds with learners who have one or more assessments due x days before the due date, with each assessment that is due, where x &#x3D; the number of days specified in the request. The default is 3 days.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdLearnersPendingSubmissionGetTest() throws ApiException {
        String offeringId = null;
        String days = null;
        List<AssessmentPendingSubmission> response = api.offeringsOfferingIdLearnersPendingSubmissionGet(offeringId, days);
        // TODO: test validations
    }

    /**
     * Reset user&#39;s assessment to draft state
     *
     * Resets the user&#39;s submitted assessment to a draft state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDeleteTest() throws ApiException {
        String offeringId = null;
        String userEmail = null;
        String assessmentId = null;
        api.offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDelete(offeringId, userEmail, assessmentId);
        // TODO: test validations
    }

    /**
     * Find learner&#39;s open response assessment submissions
     *
     * Responds with open response assessment submissions by a learner in an offering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGetTest() throws ApiException {
        String offeringId = null;
        String userEmail = null;
        List<Assignments> response = api.offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGet(offeringId, userEmail);
        // TODO: test validations
    }

}
