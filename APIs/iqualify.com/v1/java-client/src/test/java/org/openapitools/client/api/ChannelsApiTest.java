/*
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Channel;
import org.openapitools.client.model.ChannelRequired;
import org.openapitools.client.model.ChannelResponse;
import org.openapitools.client.model.Comment;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.HttpPost;
import org.openapitools.client.model.OfferingsOfferingIdChannelsChannelIdLearnersPostRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChannelsApi
 */
@Disabled
public class ChannelsApiTest {

    private final ChannelsApi api = new ChannelsApi();

    /**
     * Find comments
     *
     * Responds with a list of comments made in any posts in a specified channel, within an offering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetTest() throws ApiException {
        String offeringId = null;
        String channelId = null;
        List<Comment> response = api.offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGet(offeringId, channelId);
        // TODO: test validations
    }

    /**
     * Find posts
     *
     * Responds with a list of posts made in a specified channel, within an offering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetTest() throws ApiException {
        String offeringId = null;
        String channelId = null;
        List<HttpPost> response = api.offeringsOfferingIdAnalyticsChannelsChannelIdPostsGet(offeringId, channelId);
        // TODO: test validations
    }

    /**
     * Find replies
     *
     * Responds with a list of replies to comments in any posts in a specified channel, within an offering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetTest() throws ApiException {
        String offeringId = null;
        String channelId = null;
        List<Comment> response = api.offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGet(offeringId, channelId);
        // TODO: test validations
    }

    /**
     * Remove learners from a group channel
     *
     * Removes a learner from the specified group channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdChannelsChannelIdLearnersDeleteTest() throws ApiException {
        String offeringId = null;
        String channelId = null;
        OfferingsOfferingIdChannelsChannelIdLearnersPostRequest offeringsOfferingIdChannelsChannelIdLearnersPostRequest = null;
        api.offeringsOfferingIdChannelsChannelIdLearnersDelete(offeringId, channelId, offeringsOfferingIdChannelsChannelIdLearnersPostRequest);
        // TODO: test validations
    }

    /**
     * Find learners in a group channel
     *
     * Finds all learners in a specified group channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdChannelsChannelIdLearnersGetTest() throws ApiException {
        String offeringId = null;
        String channelId = null;
        ChannelResponse response = api.offeringsOfferingIdChannelsChannelIdLearnersGet(offeringId, channelId);
        // TODO: test validations
    }

    /**
     * Add learners to a group channel
     *
     * Adds a learner to a specified group channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdChannelsChannelIdLearnersPostTest() throws ApiException {
        String offeringId = null;
        String channelId = null;
        OfferingsOfferingIdChannelsChannelIdLearnersPostRequest offeringsOfferingIdChannelsChannelIdLearnersPostRequest = null;
        api.offeringsOfferingIdChannelsChannelIdLearnersPost(offeringId, channelId, offeringsOfferingIdChannelsChannelIdLearnersPostRequest);
        // TODO: test validations
    }

    /**
     * Update channel
     *
     * Updates a channel in an offering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdChannelsChannelIdPatchTest() throws ApiException {
        String offeringId = null;
        String channelId = null;
        Channel channel = null;
        ChannelResponse response = api.offeringsOfferingIdChannelsChannelIdPatch(offeringId, channelId, channel);
        // TODO: test validations
    }

    /**
     * Find channels
     *
     * Responds with a list of channels in an offering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdChannelsGetTest() throws ApiException {
        String offeringId = null;
        List<ChannelResponse> response = api.offeringsOfferingIdChannelsGet(offeringId);
        // TODO: test validations
    }

    /**
     * Add channel
     *
     * Adds new channel to the specified offering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offeringsOfferingIdChannelsPostTest() throws ApiException {
        String offeringId = null;
        ChannelRequired channelRequired = null;
        ChannelResponse response = api.offeringsOfferingIdChannelsPost(offeringId, channelRequired);
        // TODO: test validations
    }

}
