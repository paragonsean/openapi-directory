/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssessmentGroupsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIAssessmentGroupsApi::OAIAssessmentGroupsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIAssessmentGroupsApi::~OAIAssessmentGroupsApi() {
}

void OAIAssessmentGroupsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.iqualify.com/v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("offeringsOfferingIdGroupsGet", defaultConf);
    _serverIndices.insert("offeringsOfferingIdGroupsGet", 0);
    _serverConfigs.insert("offeringsOfferingIdGroupsGroupIdLearnersGet", defaultConf);
    _serverIndices.insert("offeringsOfferingIdGroupsGroupIdLearnersGet", 0);
    _serverConfigs.insert("offeringsOfferingIdGroupsGroupIdLearnersPost", defaultConf);
    _serverIndices.insert("offeringsOfferingIdGroupsGroupIdLearnersPost", 0);
    _serverConfigs.insert("offeringsOfferingIdGroupsGroupIdLearnersUserEmailDelete", defaultConf);
    _serverIndices.insert("offeringsOfferingIdGroupsGroupIdLearnersUserEmailDelete", 0);
    _serverConfigs.insert("offeringsOfferingIdGroupsPost", defaultConf);
    _serverIndices.insert("offeringsOfferingIdGroupsPost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIAssessmentGroupsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIAssessmentGroupsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIAssessmentGroupsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIAssessmentGroupsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIAssessmentGroupsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIAssessmentGroupsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIAssessmentGroupsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIAssessmentGroupsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIAssessmentGroupsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIAssessmentGroupsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAssessmentGroupsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAssessmentGroupsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIAssessmentGroupsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIAssessmentGroupsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIAssessmentGroupsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIAssessmentGroupsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIAssessmentGroupsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIAssessmentGroupsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIAssessmentGroupsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIAssessmentGroupsApi::offeringsOfferingIdGroupsGet(const QString &offering_id) {
    QString fullPath = QString(_serverConfigs["offeringsOfferingIdGroupsGet"][_serverIndices.value("offeringsOfferingIdGroupsGet")].URL()+"/offerings/{offeringId}/groups");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    
    {
        QString offering_idPathParam("{");
        offering_idPathParam.append("offeringId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "offeringId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"offeringId"+pathSuffix : pathPrefix;
        fullPath.replace(offering_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(offering_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAssessmentGroupsApi::offeringsOfferingIdGroupsGetCallback);
    connect(this, &OAIAssessmentGroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAssessmentGroupsApi::offeringsOfferingIdGroupsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIAssessmentGroupResponse> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIAssessmentGroupResponse val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT offeringsOfferingIdGroupsGetSignal(output);
        Q_EMIT offeringsOfferingIdGroupsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT offeringsOfferingIdGroupsGetSignalE(output, error_type, error_str);
        Q_EMIT offeringsOfferingIdGroupsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT offeringsOfferingIdGroupsGetSignalError(output, error_type, error_str);
        Q_EMIT offeringsOfferingIdGroupsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAssessmentGroupsApi::offeringsOfferingIdGroupsGroupIdLearnersGet(const QString &offering_id, const QString &group_id) {
    QString fullPath = QString(_serverConfigs["offeringsOfferingIdGroupsGroupIdLearnersGet"][_serverIndices.value("offeringsOfferingIdGroupsGroupIdLearnersGet")].URL()+"/offerings/{offeringId}/groups/{groupId}/learners");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    
    {
        QString offering_idPathParam("{");
        offering_idPathParam.append("offeringId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "offeringId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"offeringId"+pathSuffix : pathPrefix;
        fullPath.replace(offering_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(offering_id)));
    }
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAssessmentGroupsApi::offeringsOfferingIdGroupsGroupIdLearnersGetCallback);
    connect(this, &OAIAssessmentGroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAssessmentGroupsApi::offeringsOfferingIdGroupsGroupIdLearnersGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIUserResponse> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIUserResponse val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT offeringsOfferingIdGroupsGroupIdLearnersGetSignal(output);
        Q_EMIT offeringsOfferingIdGroupsGroupIdLearnersGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT offeringsOfferingIdGroupsGroupIdLearnersGetSignalE(output, error_type, error_str);
        Q_EMIT offeringsOfferingIdGroupsGroupIdLearnersGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT offeringsOfferingIdGroupsGroupIdLearnersGetSignalError(output, error_type, error_str);
        Q_EMIT offeringsOfferingIdGroupsGroupIdLearnersGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAssessmentGroupsApi::offeringsOfferingIdGroupsGroupIdLearnersPost(const QString &offering_id, const QString &group_id, const OAI_offerings__offeringId__groups__groupId__learners_post_request &oai_offerings__offering_id__groups__group_id__learners_post_request) {
    QString fullPath = QString(_serverConfigs["offeringsOfferingIdGroupsGroupIdLearnersPost"][_serverIndices.value("offeringsOfferingIdGroupsGroupIdLearnersPost")].URL()+"/offerings/{offeringId}/groups/{groupId}/learners");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    
    {
        QString offering_idPathParam("{");
        offering_idPathParam.append("offeringId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "offeringId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"offeringId"+pathSuffix : pathPrefix;
        fullPath.replace(offering_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(offering_id)));
    }
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_offerings__offering_id__groups__group_id__learners_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAssessmentGroupsApi::offeringsOfferingIdGroupsGroupIdLearnersPostCallback);
    connect(this, &OAIAssessmentGroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAssessmentGroupsApi::offeringsOfferingIdGroupsGroupIdLearnersPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUserResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT offeringsOfferingIdGroupsGroupIdLearnersPostSignal(output);
        Q_EMIT offeringsOfferingIdGroupsGroupIdLearnersPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT offeringsOfferingIdGroupsGroupIdLearnersPostSignalE(output, error_type, error_str);
        Q_EMIT offeringsOfferingIdGroupsGroupIdLearnersPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT offeringsOfferingIdGroupsGroupIdLearnersPostSignalError(output, error_type, error_str);
        Q_EMIT offeringsOfferingIdGroupsGroupIdLearnersPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAssessmentGroupsApi::offeringsOfferingIdGroupsGroupIdLearnersUserEmailDelete(const QString &offering_id, const QString &group_id, const QString &user_email) {
    QString fullPath = QString(_serverConfigs["offeringsOfferingIdGroupsGroupIdLearnersUserEmailDelete"][_serverIndices.value("offeringsOfferingIdGroupsGroupIdLearnersUserEmailDelete")].URL()+"/offerings/{offeringId}/groups/{groupId}/learners/{userEmail}");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    
    {
        QString offering_idPathParam("{");
        offering_idPathParam.append("offeringId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "offeringId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"offeringId"+pathSuffix : pathPrefix;
        fullPath.replace(offering_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(offering_id)));
    }
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("groupId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "groupId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"groupId"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    
    {
        QString user_emailPathParam("{");
        user_emailPathParam.append("userEmail").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "userEmail", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"userEmail"+pathSuffix : pathPrefix;
        fullPath.replace(user_emailPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_email)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAssessmentGroupsApi::offeringsOfferingIdGroupsGroupIdLearnersUserEmailDeleteCallback);
    connect(this, &OAIAssessmentGroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAssessmentGroupsApi::offeringsOfferingIdGroupsGroupIdLearnersUserEmailDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT offeringsOfferingIdGroupsGroupIdLearnersUserEmailDeleteSignal();
        Q_EMIT offeringsOfferingIdGroupsGroupIdLearnersUserEmailDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT offeringsOfferingIdGroupsGroupIdLearnersUserEmailDeleteSignalE(error_type, error_str);
        Q_EMIT offeringsOfferingIdGroupsGroupIdLearnersUserEmailDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT offeringsOfferingIdGroupsGroupIdLearnersUserEmailDeleteSignalError(error_type, error_str);
        Q_EMIT offeringsOfferingIdGroupsGroupIdLearnersUserEmailDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAssessmentGroupsApi::offeringsOfferingIdGroupsPost(const QString &offering_id, const OAIAssessmentGroupRequired &oai_assessment_group_required) {
    QString fullPath = QString(_serverConfigs["offeringsOfferingIdGroupsPost"][_serverIndices.value("offeringsOfferingIdGroupsPost")].URL()+"/offerings/{offeringId}/groups");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    
    {
        QString offering_idPathParam("{");
        offering_idPathParam.append("offeringId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "offeringId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"offeringId"+pathSuffix : pathPrefix;
        fullPath.replace(offering_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(offering_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_assessment_group_required.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAssessmentGroupsApi::offeringsOfferingIdGroupsPostCallback);
    connect(this, &OAIAssessmentGroupsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAssessmentGroupsApi::offeringsOfferingIdGroupsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAssessmentGroupResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT offeringsOfferingIdGroupsPostSignal(output);
        Q_EMIT offeringsOfferingIdGroupsPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT offeringsOfferingIdGroupsPostSignalE(output, error_type, error_str);
        Q_EMIT offeringsOfferingIdGroupsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT offeringsOfferingIdGroupsPostSignalError(output, error_type, error_str);
        Q_EMIT offeringsOfferingIdGroupsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAssessmentGroupsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
