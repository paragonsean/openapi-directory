/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPulseSpatialOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPulseSpatialOption::OAIPulseSpatialOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPulseSpatialOption::OAIPulseSpatialOption() {
    this->initializeModel();
}

OAIPulseSpatialOption::~OAIPulseSpatialOption() {}

void OAIPulseSpatialOption::initializeModel() {

    m_option_isSet = false;
    m_option_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIPulseSpatialOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPulseSpatialOption::fromJsonObject(QJsonObject json) {

    m_option_isValid = ::OpenAPI::fromJsonValue(m_option, json[QString("option")]);
    m_option_isSet = !json[QString("option")].isNull() && m_option_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIPulseSpatialOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPulseSpatialOption::asJsonObject() const {
    QJsonObject obj;
    if (m_option_isSet) {
        obj.insert(QString("option"), ::OpenAPI::toJsonValue(m_option));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIPulseSpatialOption::getOption() const {
    return m_option;
}
void OAIPulseSpatialOption::setOption(const QString &option) {
    m_option = option;
    m_option_isSet = true;
}

bool OAIPulseSpatialOption::is_option_Set() const{
    return m_option_isSet;
}

bool OAIPulseSpatialOption::is_option_Valid() const{
    return m_option_isValid;
}

float OAIPulseSpatialOption::getValue() const {
    return m_value;
}
void OAIPulseSpatialOption::setValue(const float &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIPulseSpatialOption::is_value_Set() const{
    return m_value_isSet;
}

bool OAIPulseSpatialOption::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIPulseSpatialOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPulseSpatialOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
