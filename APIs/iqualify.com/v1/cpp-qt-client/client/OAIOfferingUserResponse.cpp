/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferingUserResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferingUserResponse::OAIOfferingUserResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferingUserResponse::OAIOfferingUserResponse() {
    this->initializeModel();
}

OAIOfferingUserResponse::~OAIOfferingUserResponse() {}

void OAIOfferingUserResponse::initializeModel() {

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_evaluated_by_isSet = false;
    m_evaluated_by_isValid = false;

    m_evaluates_isSet = false;
    m_evaluates_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_facilitator_isSet = false;
    m_is_facilitator_isValid = false;

    m_is_marker_isSet = false;
    m_is_marker_isValid = false;

    m_is_readonly_isSet = false;
    m_is_readonly_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_marked_by_isSet = false;
    m_marked_by_isValid = false;

    m_marks_isSet = false;
    m_marks_isValid = false;

    m_person_id_isSet = false;
    m_person_id_isValid = false;

    m_profile_isSet = false;
    m_profile_isValid = false;
}

void OAIOfferingUserResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOfferingUserResponse::fromJsonObject(QJsonObject json) {

    m_avatar_url_isValid = ::OpenAPI::fromJsonValue(m_avatar_url, json[QString("avatarUrl")]);
    m_avatar_url_isSet = !json[QString("avatarUrl")].isNull() && m_avatar_url_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_evaluated_by_isValid = ::OpenAPI::fromJsonValue(m_evaluated_by, json[QString("evaluatedBy")]);
    m_evaluated_by_isSet = !json[QString("evaluatedBy")].isNull() && m_evaluated_by_isValid;

    m_evaluates_isValid = ::OpenAPI::fromJsonValue(m_evaluates, json[QString("evaluates")]);
    m_evaluates_isSet = !json[QString("evaluates")].isNull() && m_evaluates_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_facilitator_isValid = ::OpenAPI::fromJsonValue(m_is_facilitator, json[QString("isFacilitator")]);
    m_is_facilitator_isSet = !json[QString("isFacilitator")].isNull() && m_is_facilitator_isValid;

    m_is_marker_isValid = ::OpenAPI::fromJsonValue(m_is_marker, json[QString("isMarker")]);
    m_is_marker_isSet = !json[QString("isMarker")].isNull() && m_is_marker_isValid;

    m_is_readonly_isValid = ::OpenAPI::fromJsonValue(m_is_readonly, json[QString("isReadonly")]);
    m_is_readonly_isSet = !json[QString("isReadonly")].isNull() && m_is_readonly_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_marked_by_isValid = ::OpenAPI::fromJsonValue(m_marked_by, json[QString("markedBy")]);
    m_marked_by_isSet = !json[QString("markedBy")].isNull() && m_marked_by_isValid;

    m_marks_isValid = ::OpenAPI::fromJsonValue(m_marks, json[QString("marks")]);
    m_marks_isSet = !json[QString("marks")].isNull() && m_marks_isValid;

    m_person_id_isValid = ::OpenAPI::fromJsonValue(m_person_id, json[QString("personId")]);
    m_person_id_isSet = !json[QString("personId")].isNull() && m_person_id_isValid;

    m_profile_isValid = ::OpenAPI::fromJsonValue(m_profile, json[QString("profile")]);
    m_profile_isSet = !json[QString("profile")].isNull() && m_profile_isValid;
}

QString OAIOfferingUserResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOfferingUserResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatarUrl"), ::OpenAPI::toJsonValue(m_avatar_url));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_evaluated_by.size() > 0) {
        obj.insert(QString("evaluatedBy"), ::OpenAPI::toJsonValue(m_evaluated_by));
    }
    if (m_evaluates.size() > 0) {
        obj.insert(QString("evaluates"), ::OpenAPI::toJsonValue(m_evaluates));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_facilitator_isSet) {
        obj.insert(QString("isFacilitator"), ::OpenAPI::toJsonValue(m_is_facilitator));
    }
    if (m_is_marker_isSet) {
        obj.insert(QString("isMarker"), ::OpenAPI::toJsonValue(m_is_marker));
    }
    if (m_is_readonly_isSet) {
        obj.insert(QString("isReadonly"), ::OpenAPI::toJsonValue(m_is_readonly));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_marked_by.size() > 0) {
        obj.insert(QString("markedBy"), ::OpenAPI::toJsonValue(m_marked_by));
    }
    if (m_marks.size() > 0) {
        obj.insert(QString("marks"), ::OpenAPI::toJsonValue(m_marks));
    }
    if (m_person_id_isSet) {
        obj.insert(QString("personId"), ::OpenAPI::toJsonValue(m_person_id));
    }
    if (m_profile.isSet()) {
        obj.insert(QString("profile"), ::OpenAPI::toJsonValue(m_profile));
    }
    return obj;
}

QString OAIOfferingUserResponse::getAvatarUrl() const {
    return m_avatar_url;
}
void OAIOfferingUserResponse::setAvatarUrl(const QString &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool OAIOfferingUserResponse::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool OAIOfferingUserResponse::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

QString OAIOfferingUserResponse::getEmail() const {
    return m_email;
}
void OAIOfferingUserResponse::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIOfferingUserResponse::is_email_Set() const{
    return m_email_isSet;
}

bool OAIOfferingUserResponse::is_email_Valid() const{
    return m_email_isValid;
}

QList<QString> OAIOfferingUserResponse::getEvaluatedBy() const {
    return m_evaluated_by;
}
void OAIOfferingUserResponse::setEvaluatedBy(const QList<QString> &evaluated_by) {
    m_evaluated_by = evaluated_by;
    m_evaluated_by_isSet = true;
}

bool OAIOfferingUserResponse::is_evaluated_by_Set() const{
    return m_evaluated_by_isSet;
}

bool OAIOfferingUserResponse::is_evaluated_by_Valid() const{
    return m_evaluated_by_isValid;
}

QList<QString> OAIOfferingUserResponse::getEvaluates() const {
    return m_evaluates;
}
void OAIOfferingUserResponse::setEvaluates(const QList<QString> &evaluates) {
    m_evaluates = evaluates;
    m_evaluates_isSet = true;
}

bool OAIOfferingUserResponse::is_evaluates_Set() const{
    return m_evaluates_isSet;
}

bool OAIOfferingUserResponse::is_evaluates_Valid() const{
    return m_evaluates_isValid;
}

QString OAIOfferingUserResponse::getFirstName() const {
    return m_first_name;
}
void OAIOfferingUserResponse::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIOfferingUserResponse::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIOfferingUserResponse::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIOfferingUserResponse::getId() const {
    return m_id;
}
void OAIOfferingUserResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOfferingUserResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOfferingUserResponse::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIOfferingUserResponse::isIsFacilitator() const {
    return m_is_facilitator;
}
void OAIOfferingUserResponse::setIsFacilitator(const bool &is_facilitator) {
    m_is_facilitator = is_facilitator;
    m_is_facilitator_isSet = true;
}

bool OAIOfferingUserResponse::is_is_facilitator_Set() const{
    return m_is_facilitator_isSet;
}

bool OAIOfferingUserResponse::is_is_facilitator_Valid() const{
    return m_is_facilitator_isValid;
}

bool OAIOfferingUserResponse::isIsMarker() const {
    return m_is_marker;
}
void OAIOfferingUserResponse::setIsMarker(const bool &is_marker) {
    m_is_marker = is_marker;
    m_is_marker_isSet = true;
}

bool OAIOfferingUserResponse::is_is_marker_Set() const{
    return m_is_marker_isSet;
}

bool OAIOfferingUserResponse::is_is_marker_Valid() const{
    return m_is_marker_isValid;
}

bool OAIOfferingUserResponse::isIsReadonly() const {
    return m_is_readonly;
}
void OAIOfferingUserResponse::setIsReadonly(const bool &is_readonly) {
    m_is_readonly = is_readonly;
    m_is_readonly_isSet = true;
}

bool OAIOfferingUserResponse::is_is_readonly_Set() const{
    return m_is_readonly_isSet;
}

bool OAIOfferingUserResponse::is_is_readonly_Valid() const{
    return m_is_readonly_isValid;
}

QString OAIOfferingUserResponse::getLastName() const {
    return m_last_name;
}
void OAIOfferingUserResponse::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIOfferingUserResponse::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIOfferingUserResponse::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QList<QString> OAIOfferingUserResponse::getMarkedBy() const {
    return m_marked_by;
}
void OAIOfferingUserResponse::setMarkedBy(const QList<QString> &marked_by) {
    m_marked_by = marked_by;
    m_marked_by_isSet = true;
}

bool OAIOfferingUserResponse::is_marked_by_Set() const{
    return m_marked_by_isSet;
}

bool OAIOfferingUserResponse::is_marked_by_Valid() const{
    return m_marked_by_isValid;
}

QList<QString> OAIOfferingUserResponse::getMarks() const {
    return m_marks;
}
void OAIOfferingUserResponse::setMarks(const QList<QString> &marks) {
    m_marks = marks;
    m_marks_isSet = true;
}

bool OAIOfferingUserResponse::is_marks_Set() const{
    return m_marks_isSet;
}

bool OAIOfferingUserResponse::is_marks_Valid() const{
    return m_marks_isValid;
}

QString OAIOfferingUserResponse::getPersonId() const {
    return m_person_id;
}
void OAIOfferingUserResponse::setPersonId(const QString &person_id) {
    m_person_id = person_id;
    m_person_id_isSet = true;
}

bool OAIOfferingUserResponse::is_person_id_Set() const{
    return m_person_id_isSet;
}

bool OAIOfferingUserResponse::is_person_id_Valid() const{
    return m_person_id_isValid;
}

OAIUserProfile OAIOfferingUserResponse::getProfile() const {
    return m_profile;
}
void OAIOfferingUserResponse::setProfile(const OAIUserProfile &profile) {
    m_profile = profile;
    m_profile_isSet = true;
}

bool OAIOfferingUserResponse::is_profile_Set() const{
    return m_profile_isSet;
}

bool OAIOfferingUserResponse::is_profile_Valid() const{
    return m_profile_isValid;
}

bool OAIOfferingUserResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluated_by.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_facilitator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_marker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_readonly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marked_by.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_marks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOfferingUserResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
