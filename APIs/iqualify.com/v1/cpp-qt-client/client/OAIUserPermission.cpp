/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserPermission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserPermission::OAIUserPermission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserPermission::OAIUserPermission() {
    this->initializeModel();
}

OAIUserPermission::~OAIUserPermission() {}

void OAIUserPermission::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_is_builder_isSet = false;
    m_is_builder_isValid = false;

    m_is_reviewer_isSet = false;
    m_is_reviewer_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIUserPermission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserPermission::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_is_builder_isValid = ::OpenAPI::fromJsonValue(m_is_builder, json[QString("isBuilder")]);
    m_is_builder_isSet = !json[QString("isBuilder")].isNull() && m_is_builder_isValid;

    m_is_reviewer_isValid = ::OpenAPI::fromJsonValue(m_is_reviewer, json[QString("isReviewer")]);
    m_is_reviewer_isSet = !json[QString("isReviewer")].isNull() && m_is_reviewer_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIUserPermission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserPermission::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_is_builder_isSet) {
        obj.insert(QString("isBuilder"), ::OpenAPI::toJsonValue(m_is_builder));
    }
    if (m_is_reviewer_isSet) {
        obj.insert(QString("isReviewer"), ::OpenAPI::toJsonValue(m_is_reviewer));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIUserPermission::getEmail() const {
    return m_email;
}
void OAIUserPermission::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUserPermission::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUserPermission::is_email_Valid() const{
    return m_email_isValid;
}

bool OAIUserPermission::isIsBuilder() const {
    return m_is_builder;
}
void OAIUserPermission::setIsBuilder(const bool &is_builder) {
    m_is_builder = is_builder;
    m_is_builder_isSet = true;
}

bool OAIUserPermission::is_is_builder_Set() const{
    return m_is_builder_isSet;
}

bool OAIUserPermission::is_is_builder_Valid() const{
    return m_is_builder_isValid;
}

bool OAIUserPermission::isIsReviewer() const {
    return m_is_reviewer;
}
void OAIUserPermission::setIsReviewer(const bool &is_reviewer) {
    m_is_reviewer = is_reviewer;
    m_is_reviewer_isSet = true;
}

bool OAIUserPermission::is_is_reviewer_Set() const{
    return m_is_reviewer_isSet;
}

bool OAIUserPermission::is_is_reviewer_Valid() const{
    return m_is_reviewer_isValid;
}

QString OAIUserPermission::getName() const {
    return m_name;
}
void OAIUserPermission::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUserPermission::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUserPermission::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIUserPermission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_builder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_reviewer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserPermission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
