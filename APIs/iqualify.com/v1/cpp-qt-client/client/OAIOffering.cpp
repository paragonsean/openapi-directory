/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOffering.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOffering::OAIOffering(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOffering::OAIOffering() {
    this->initializeModel();
}

OAIOffering::~OAIOffering() {}

void OAIOffering::initializeModel() {

    m_badge_isSet = false;
    m_badge_isValid = false;

    m_content_id_isSet = false;
    m_content_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_early_close_off_date_isSet = false;
    m_early_close_off_date_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_has_early_close_off_isSet = false;
    m_has_early_close_off_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_is_readonly_isSet = false;
    m_is_readonly_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_overview_isSet = false;
    m_overview_isValid = false;

    m_root_content_id_isSet = false;
    m_root_content_id_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_trailer_video_url_isSet = false;
    m_trailer_video_url_isValid = false;

    m_use_relative_dates_isSet = false;
    m_use_relative_dates_isValid = false;
}

void OAIOffering::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOffering::fromJsonObject(QJsonObject json) {

    m_badge_isValid = ::OpenAPI::fromJsonValue(m_badge, json[QString("badge")]);
    m_badge_isSet = !json[QString("badge")].isNull() && m_badge_isValid;

    m_content_id_isValid = ::OpenAPI::fromJsonValue(m_content_id, json[QString("contentId")]);
    m_content_id_isSet = !json[QString("contentId")].isNull() && m_content_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_early_close_off_date_isValid = ::OpenAPI::fromJsonValue(m_early_close_off_date, json[QString("earlyCloseOffDate")]);
    m_early_close_off_date_isSet = !json[QString("earlyCloseOffDate")].isNull() && m_early_close_off_date_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_has_early_close_off_isValid = ::OpenAPI::fromJsonValue(m_has_early_close_off, json[QString("hasEarlyCloseOff")]);
    m_has_early_close_off_isSet = !json[QString("hasEarlyCloseOff")].isNull() && m_has_early_close_off_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_is_readonly_isValid = ::OpenAPI::fromJsonValue(m_is_readonly, json[QString("isReadonly")]);
    m_is_readonly_isSet = !json[QString("isReadonly")].isNull() && m_is_readonly_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_overview_isValid = ::OpenAPI::fromJsonValue(m_overview, json[QString("overview")]);
    m_overview_isSet = !json[QString("overview")].isNull() && m_overview_isValid;

    m_root_content_id_isValid = ::OpenAPI::fromJsonValue(m_root_content_id, json[QString("rootContentId")]);
    m_root_content_id_isSet = !json[QString("rootContentId")].isNull() && m_root_content_id_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_trailer_video_url_isValid = ::OpenAPI::fromJsonValue(m_trailer_video_url, json[QString("trailerVideoUrl")]);
    m_trailer_video_url_isSet = !json[QString("trailerVideoUrl")].isNull() && m_trailer_video_url_isValid;

    m_use_relative_dates_isValid = ::OpenAPI::fromJsonValue(m_use_relative_dates, json[QString("useRelativeDates")]);
    m_use_relative_dates_isSet = !json[QString("useRelativeDates")].isNull() && m_use_relative_dates_isValid;
}

QString OAIOffering::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOffering::asJsonObject() const {
    QJsonObject obj;
    if (m_badge.isSet()) {
        obj.insert(QString("badge"), ::OpenAPI::toJsonValue(m_badge));
    }
    if (m_content_id_isSet) {
        obj.insert(QString("contentId"), ::OpenAPI::toJsonValue(m_content_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_early_close_off_date_isSet) {
        obj.insert(QString("earlyCloseOffDate"), ::OpenAPI::toJsonValue(m_early_close_off_date));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_has_early_close_off_isSet) {
        obj.insert(QString("hasEarlyCloseOff"), ::OpenAPI::toJsonValue(m_has_early_close_off));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_is_readonly_isSet) {
        obj.insert(QString("isReadonly"), ::OpenAPI::toJsonValue(m_is_readonly));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_overview_isSet) {
        obj.insert(QString("overview"), ::OpenAPI::toJsonValue(m_overview));
    }
    if (m_root_content_id_isSet) {
        obj.insert(QString("rootContentId"), ::OpenAPI::toJsonValue(m_root_content_id));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_trailer_video_url_isSet) {
        obj.insert(QString("trailerVideoUrl"), ::OpenAPI::toJsonValue(m_trailer_video_url));
    }
    if (m_use_relative_dates_isSet) {
        obj.insert(QString("useRelativeDates"), ::OpenAPI::toJsonValue(m_use_relative_dates));
    }
    return obj;
}

OAIOffering_badge OAIOffering::getBadge() const {
    return m_badge;
}
void OAIOffering::setBadge(const OAIOffering_badge &badge) {
    m_badge = badge;
    m_badge_isSet = true;
}

bool OAIOffering::is_badge_Set() const{
    return m_badge_isSet;
}

bool OAIOffering::is_badge_Valid() const{
    return m_badge_isValid;
}

QString OAIOffering::getContentId() const {
    return m_content_id;
}
void OAIOffering::setContentId(const QString &content_id) {
    m_content_id = content_id;
    m_content_id_isSet = true;
}

bool OAIOffering::is_content_id_Set() const{
    return m_content_id_isSet;
}

bool OAIOffering::is_content_id_Valid() const{
    return m_content_id_isValid;
}

QString OAIOffering::getDescription() const {
    return m_description;
}
void OAIOffering::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOffering::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOffering::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIOffering::getEarlyCloseOffDate() const {
    return m_early_close_off_date;
}
void OAIOffering::setEarlyCloseOffDate(const QDateTime &early_close_off_date) {
    m_early_close_off_date = early_close_off_date;
    m_early_close_off_date_isSet = true;
}

bool OAIOffering::is_early_close_off_date_Set() const{
    return m_early_close_off_date_isSet;
}

bool OAIOffering::is_early_close_off_date_Valid() const{
    return m_early_close_off_date_isValid;
}

QDateTime OAIOffering::getEnd() const {
    return m_end;
}
void OAIOffering::setEnd(const QDateTime &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIOffering::is_end_Set() const{
    return m_end_isSet;
}

bool OAIOffering::is_end_Valid() const{
    return m_end_isValid;
}

bool OAIOffering::isHasEarlyCloseOff() const {
    return m_has_early_close_off;
}
void OAIOffering::setHasEarlyCloseOff(const bool &has_early_close_off) {
    m_has_early_close_off = has_early_close_off;
    m_has_early_close_off_isSet = true;
}

bool OAIOffering::is_has_early_close_off_Set() const{
    return m_has_early_close_off_isSet;
}

bool OAIOffering::is_has_early_close_off_Valid() const{
    return m_has_early_close_off_isValid;
}

QString OAIOffering::getIdentifier() const {
    return m_identifier;
}
void OAIOffering::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIOffering::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIOffering::is_identifier_Valid() const{
    return m_identifier_isValid;
}

bool OAIOffering::isIsReadonly() const {
    return m_is_readonly;
}
void OAIOffering::setIsReadonly(const bool &is_readonly) {
    m_is_readonly = is_readonly;
    m_is_readonly_isSet = true;
}

bool OAIOffering::is_is_readonly_Set() const{
    return m_is_readonly_isSet;
}

bool OAIOffering::is_is_readonly_Valid() const{
    return m_is_readonly_isValid;
}

OAIOffering_metadata OAIOffering::getMetadata() const {
    return m_metadata;
}
void OAIOffering::setMetadata(const OAIOffering_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIOffering::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIOffering::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIOffering::getName() const {
    return m_name;
}
void OAIOffering::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOffering::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOffering::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOffering::getOverview() const {
    return m_overview;
}
void OAIOffering::setOverview(const QString &overview) {
    m_overview = overview;
    m_overview_isSet = true;
}

bool OAIOffering::is_overview_Set() const{
    return m_overview_isSet;
}

bool OAIOffering::is_overview_Valid() const{
    return m_overview_isValid;
}

QString OAIOffering::getRootContentId() const {
    return m_root_content_id;
}
void OAIOffering::setRootContentId(const QString &root_content_id) {
    m_root_content_id = root_content_id;
    m_root_content_id_isSet = true;
}

bool OAIOffering::is_root_content_id_Set() const{
    return m_root_content_id_isSet;
}

bool OAIOffering::is_root_content_id_Valid() const{
    return m_root_content_id_isValid;
}

QDateTime OAIOffering::getStart() const {
    return m_start;
}
void OAIOffering::setStart(const QDateTime &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIOffering::is_start_Set() const{
    return m_start_isSet;
}

bool OAIOffering::is_start_Valid() const{
    return m_start_isValid;
}

QString OAIOffering::getTrailerVideoUrl() const {
    return m_trailer_video_url;
}
void OAIOffering::setTrailerVideoUrl(const QString &trailer_video_url) {
    m_trailer_video_url = trailer_video_url;
    m_trailer_video_url_isSet = true;
}

bool OAIOffering::is_trailer_video_url_Set() const{
    return m_trailer_video_url_isSet;
}

bool OAIOffering::is_trailer_video_url_Valid() const{
    return m_trailer_video_url_isValid;
}

bool OAIOffering::isUseRelativeDates() const {
    return m_use_relative_dates;
}
void OAIOffering::setUseRelativeDates(const bool &use_relative_dates) {
    m_use_relative_dates = use_relative_dates;
    m_use_relative_dates_isSet = true;
}

bool OAIOffering::is_use_relative_dates_Set() const{
    return m_use_relative_dates_isSet;
}

bool OAIOffering::is_use_relative_dates_Valid() const{
    return m_use_relative_dates_isValid;
}

bool OAIOffering::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_badge.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_early_close_off_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_early_close_off_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_readonly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overview_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_content_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trailer_video_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_relative_dates_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOffering::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
