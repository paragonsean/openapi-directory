/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUserBadge.h
 *
 * 
 */

#ifndef OAIUserBadge_H
#define OAIUserBadge_H

#include <QJsonObject>

#include "OAICriteria.h"
#include "OAIOpenBadgeClass.h"
#include "OAIUserBadge_badgeExpiry.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUserBadge_badgeExpiry;
class OAICriteria;
class OAIOpenBadgeClass;

class OAIUserBadge : public OAIObject {
public:
    OAIUserBadge();
    OAIUserBadge(QString json);
    ~OAIUserBadge() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getAwardedAt() const;
    void setAwardedAt(const QDateTime &awarded_at);
    bool is_awarded_at_Set() const;
    bool is_awarded_at_Valid() const;

    OAIUserBadge_badgeExpiry getBadgeExpiry() const;
    void setBadgeExpiry(const OAIUserBadge_badgeExpiry &badge_expiry);
    bool is_badge_expiry_Set() const;
    bool is_badge_expiry_Valid() const;

    QString getBadgeUrl() const;
    void setBadgeUrl(const QString &badge_url);
    bool is_badge_url_Set() const;
    bool is_badge_url_Valid() const;

    OAICriteria getCriterias() const;
    void setCriterias(const OAICriteria &criterias);
    bool is_criterias_Set() const;
    bool is_criterias_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getOfferingId() const;
    void setOfferingId(const QString &offering_id);
    bool is_offering_id_Set() const;
    bool is_offering_id_Valid() const;

    OAIOpenBadgeClass getOpenBadge() const;
    void setOpenBadge(const OAIOpenBadgeClass &open_badge);
    bool is_open_badge_Set() const;
    bool is_open_badge_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_awarded_at;
    bool m_awarded_at_isSet;
    bool m_awarded_at_isValid;

    OAIUserBadge_badgeExpiry m_badge_expiry;
    bool m_badge_expiry_isSet;
    bool m_badge_expiry_isValid;

    QString m_badge_url;
    bool m_badge_url_isSet;
    bool m_badge_url_isValid;

    OAICriteria m_criterias;
    bool m_criterias_isSet;
    bool m_criterias_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_offering_id;
    bool m_offering_id_isSet;
    bool m_offering_id_isValid;

    OAIOpenBadgeClass m_open_badge;
    bool m_open_badge_isSet;
    bool m_open_badge_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUserBadge)

#endif // OAIUserBadge_H
