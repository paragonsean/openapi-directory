/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssignments.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssignments::OAIAssignments(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssignments::OAIAssignments() {
    this->initializeModel();
}

OAIAssignments::~OAIAssignments() {}

void OAIAssignments::initializeModel() {

    m_files_isSet = false;
    m_files_isValid = false;

    m_marks_isSet = false;
    m_marks_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_submitted_at_isSet = false;
    m_submitted_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIAssignments::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssignments::fromJsonObject(QJsonObject json) {

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_marks_isValid = ::OpenAPI::fromJsonValue(m_marks, json[QString("marks")]);
    m_marks_isSet = !json[QString("marks")].isNull() && m_marks_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_submitted_at_isValid = ::OpenAPI::fromJsonValue(m_submitted_at, json[QString("submittedAt")]);
    m_submitted_at_isSet = !json[QString("submittedAt")].isNull() && m_submitted_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIAssignments::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssignments::asJsonObject() const {
    QJsonObject obj;
    if (m_files.size() > 0) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_marks.size() > 0) {
        obj.insert(QString("marks"), ::OpenAPI::toJsonValue(m_marks));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_submitted_at_isSet) {
        obj.insert(QString("submittedAt"), ::OpenAPI::toJsonValue(m_submitted_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QList<OAIDocument> OAIAssignments::getFiles() const {
    return m_files;
}
void OAIAssignments::setFiles(const QList<OAIDocument> &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAIAssignments::is_files_Set() const{
    return m_files_isSet;
}

bool OAIAssignments::is_files_Valid() const{
    return m_files_isValid;
}

QList<OAIMark> OAIAssignments::getMarks() const {
    return m_marks;
}
void OAIAssignments::setMarks(const QList<OAIMark> &marks) {
    m_marks = marks;
    m_marks_isSet = true;
}

bool OAIAssignments::is_marks_Set() const{
    return m_marks_isSet;
}

bool OAIAssignments::is_marks_Valid() const{
    return m_marks_isValid;
}

QString OAIAssignments::getStatus() const {
    return m_status;
}
void OAIAssignments::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAssignments::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAssignments::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIAssignments::getSubmittedAt() const {
    return m_submitted_at;
}
void OAIAssignments::setSubmittedAt(const QDateTime &submitted_at) {
    m_submitted_at = submitted_at;
    m_submitted_at_isSet = true;
}

bool OAIAssignments::is_submitted_at_Set() const{
    return m_submitted_at_isSet;
}

bool OAIAssignments::is_submitted_at_Valid() const{
    return m_submitted_at_isValid;
}

QDateTime OAIAssignments::getUpdatedAt() const {
    return m_updated_at;
}
void OAIAssignments::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIAssignments::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIAssignments::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIAssignments::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_marks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submitted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssignments::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
