/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOffering_badge.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOffering_badge::OAIOffering_badge(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOffering_badge::OAIOffering_badge() {
    this->initializeModel();
}

OAIOffering_badge::~OAIOffering_badge() {}

void OAIOffering_badge::initializeModel() {

    m_badge_expiry_isSet = false;
    m_badge_expiry_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_requires_approval_isSet = false;
    m_requires_approval_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIOffering_badge::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOffering_badge::fromJsonObject(QJsonObject json) {

    m_badge_expiry_isValid = ::OpenAPI::fromJsonValue(m_badge_expiry, json[QString("badgeExpiry")]);
    m_badge_expiry_isSet = !json[QString("badgeExpiry")].isNull() && m_badge_expiry_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_requires_approval_isValid = ::OpenAPI::fromJsonValue(m_requires_approval, json[QString("requiresApproval")]);
    m_requires_approval_isSet = !json[QString("requiresApproval")].isNull() && m_requires_approval_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIOffering_badge::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOffering_badge::asJsonObject() const {
    QJsonObject obj;
    if (m_badge_expiry.isSet()) {
        obj.insert(QString("badgeExpiry"), ::OpenAPI::toJsonValue(m_badge_expiry));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_requires_approval_isSet) {
        obj.insert(QString("requiresApproval"), ::OpenAPI::toJsonValue(m_requires_approval));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

OAIBadgeExpiry OAIOffering_badge::getBadgeExpiry() const {
    return m_badge_expiry;
}
void OAIOffering_badge::setBadgeExpiry(const OAIBadgeExpiry &badge_expiry) {
    m_badge_expiry = badge_expiry;
    m_badge_expiry_isSet = true;
}

bool OAIOffering_badge::is_badge_expiry_Set() const{
    return m_badge_expiry_isSet;
}

bool OAIOffering_badge::is_badge_expiry_Valid() const{
    return m_badge_expiry_isValid;
}

QString OAIOffering_badge::getDescription() const {
    return m_description;
}
void OAIOffering_badge::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOffering_badge::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOffering_badge::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIOffering_badge::isRequiresApproval() const {
    return m_requires_approval;
}
void OAIOffering_badge::setRequiresApproval(const bool &requires_approval) {
    m_requires_approval = requires_approval;
    m_requires_approval_isSet = true;
}

bool OAIOffering_badge::is_requires_approval_Set() const{
    return m_requires_approval_isSet;
}

bool OAIOffering_badge::is_requires_approval_Valid() const{
    return m_requires_approval_isValid;
}

QString OAIOffering_badge::getTitle() const {
    return m_title;
}
void OAIOffering_badge::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIOffering_badge::is_title_Set() const{
    return m_title_isSet;
}

bool OAIOffering_badge::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIOffering_badge::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_badge_expiry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_approval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOffering_badge::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
