/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICriteria::OAICriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICriteria::OAICriteria() {
    this->initializeModel();
}

OAICriteria::~OAICriteria() {}

void OAICriteria::initializeModel() {

    m_has_completed_course_isSet = false;
    m_has_completed_course_isValid = false;

    m_has_passed_mandatory_assessed_quizzes_isSet = false;
    m_has_passed_mandatory_assessed_quizzes_isValid = false;
}

void OAICriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICriteria::fromJsonObject(QJsonObject json) {

    m_has_completed_course_isValid = ::OpenAPI::fromJsonValue(m_has_completed_course, json[QString("hasCompletedCourse")]);
    m_has_completed_course_isSet = !json[QString("hasCompletedCourse")].isNull() && m_has_completed_course_isValid;

    m_has_passed_mandatory_assessed_quizzes_isValid = ::OpenAPI::fromJsonValue(m_has_passed_mandatory_assessed_quizzes, json[QString("hasPassedMandatoryAssessedQuizzes")]);
    m_has_passed_mandatory_assessed_quizzes_isSet = !json[QString("hasPassedMandatoryAssessedQuizzes")].isNull() && m_has_passed_mandatory_assessed_quizzes_isValid;
}

QString OAICriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_has_completed_course_isSet) {
        obj.insert(QString("hasCompletedCourse"), ::OpenAPI::toJsonValue(m_has_completed_course));
    }
    if (m_has_passed_mandatory_assessed_quizzes_isSet) {
        obj.insert(QString("hasPassedMandatoryAssessedQuizzes"), ::OpenAPI::toJsonValue(m_has_passed_mandatory_assessed_quizzes));
    }
    return obj;
}

bool OAICriteria::isHasCompletedCourse() const {
    return m_has_completed_course;
}
void OAICriteria::setHasCompletedCourse(const bool &has_completed_course) {
    m_has_completed_course = has_completed_course;
    m_has_completed_course_isSet = true;
}

bool OAICriteria::is_has_completed_course_Set() const{
    return m_has_completed_course_isSet;
}

bool OAICriteria::is_has_completed_course_Valid() const{
    return m_has_completed_course_isValid;
}

bool OAICriteria::isHasPassedMandatoryAssessedQuizzes() const {
    return m_has_passed_mandatory_assessed_quizzes;
}
void OAICriteria::setHasPassedMandatoryAssessedQuizzes(const bool &has_passed_mandatory_assessed_quizzes) {
    m_has_passed_mandatory_assessed_quizzes = has_passed_mandatory_assessed_quizzes;
    m_has_passed_mandatory_assessed_quizzes_isSet = true;
}

bool OAICriteria::is_has_passed_mandatory_assessed_quizzes_Set() const{
    return m_has_passed_mandatory_assessed_quizzes_isSet;
}

bool OAICriteria::is_has_passed_mandatory_assessed_quizzes_Valid() const{
    return m_has_passed_mandatory_assessed_quizzes_isValid;
}

bool OAICriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_has_completed_course_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_passed_mandatory_assessed_quizzes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
