/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRevokedResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRevokedResponse::OAIRevokedResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRevokedResponse::OAIRevokedResponse() {
    this->initializeModel();
}

OAIRevokedResponse::~OAIRevokedResponse() {}

void OAIRevokedResponse::initializeModel() {

    m_badge_id_isSet = false;
    m_badge_id_isValid = false;

    m_badge_url_isSet = false;
    m_badge_url_isValid = false;

    m_revocation_reason_isSet = false;
    m_revocation_reason_isValid = false;

    m_revoked_isSet = false;
    m_revoked_isValid = false;
}

void OAIRevokedResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRevokedResponse::fromJsonObject(QJsonObject json) {

    m_badge_id_isValid = ::OpenAPI::fromJsonValue(m_badge_id, json[QString("badgeId")]);
    m_badge_id_isSet = !json[QString("badgeId")].isNull() && m_badge_id_isValid;

    m_badge_url_isValid = ::OpenAPI::fromJsonValue(m_badge_url, json[QString("badgeUrl")]);
    m_badge_url_isSet = !json[QString("badgeUrl")].isNull() && m_badge_url_isValid;

    m_revocation_reason_isValid = ::OpenAPI::fromJsonValue(m_revocation_reason, json[QString("revocationReason")]);
    m_revocation_reason_isSet = !json[QString("revocationReason")].isNull() && m_revocation_reason_isValid;

    m_revoked_isValid = ::OpenAPI::fromJsonValue(m_revoked, json[QString("revoked")]);
    m_revoked_isSet = !json[QString("revoked")].isNull() && m_revoked_isValid;
}

QString OAIRevokedResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRevokedResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_badge_id_isSet) {
        obj.insert(QString("badgeId"), ::OpenAPI::toJsonValue(m_badge_id));
    }
    if (m_badge_url_isSet) {
        obj.insert(QString("badgeUrl"), ::OpenAPI::toJsonValue(m_badge_url));
    }
    if (m_revocation_reason_isSet) {
        obj.insert(QString("revocationReason"), ::OpenAPI::toJsonValue(m_revocation_reason));
    }
    if (m_revoked_isSet) {
        obj.insert(QString("revoked"), ::OpenAPI::toJsonValue(m_revoked));
    }
    return obj;
}

QString OAIRevokedResponse::getBadgeId() const {
    return m_badge_id;
}
void OAIRevokedResponse::setBadgeId(const QString &badge_id) {
    m_badge_id = badge_id;
    m_badge_id_isSet = true;
}

bool OAIRevokedResponse::is_badge_id_Set() const{
    return m_badge_id_isSet;
}

bool OAIRevokedResponse::is_badge_id_Valid() const{
    return m_badge_id_isValid;
}

QString OAIRevokedResponse::getBadgeUrl() const {
    return m_badge_url;
}
void OAIRevokedResponse::setBadgeUrl(const QString &badge_url) {
    m_badge_url = badge_url;
    m_badge_url_isSet = true;
}

bool OAIRevokedResponse::is_badge_url_Set() const{
    return m_badge_url_isSet;
}

bool OAIRevokedResponse::is_badge_url_Valid() const{
    return m_badge_url_isValid;
}

QString OAIRevokedResponse::getRevocationReason() const {
    return m_revocation_reason;
}
void OAIRevokedResponse::setRevocationReason(const QString &revocation_reason) {
    m_revocation_reason = revocation_reason;
    m_revocation_reason_isSet = true;
}

bool OAIRevokedResponse::is_revocation_reason_Set() const{
    return m_revocation_reason_isSet;
}

bool OAIRevokedResponse::is_revocation_reason_Valid() const{
    return m_revocation_reason_isValid;
}

bool OAIRevokedResponse::isRevoked() const {
    return m_revoked;
}
void OAIRevokedResponse::setRevoked(const bool &revoked) {
    m_revoked = revoked;
    m_revoked_isSet = true;
}

bool OAIRevokedResponse::is_revoked_Set() const{
    return m_revoked_isSet;
}

bool OAIRevokedResponse::is_revoked_Valid() const{
    return m_revoked_isValid;
}

bool OAIRevokedResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_badge_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_badge_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revocation_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revoked_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRevokedResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
