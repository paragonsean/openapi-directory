/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferRequest::OAITransferRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferRequest::OAITransferRequest() {
    this->initializeModel();
}

OAITransferRequest::~OAITransferRequest() {}

void OAITransferRequest::initializeModel() {

    m_from_offering_id_isSet = false;
    m_from_offering_id_isValid = false;

    m_send_invite_isSet = false;
    m_send_invite_isValid = false;

    m_to_offering_id_isSet = false;
    m_to_offering_id_isValid = false;
}

void OAITransferRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferRequest::fromJsonObject(QJsonObject json) {

    m_from_offering_id_isValid = ::OpenAPI::fromJsonValue(m_from_offering_id, json[QString("fromOfferingId")]);
    m_from_offering_id_isSet = !json[QString("fromOfferingId")].isNull() && m_from_offering_id_isValid;

    m_send_invite_isValid = ::OpenAPI::fromJsonValue(m_send_invite, json[QString("sendInvite")]);
    m_send_invite_isSet = !json[QString("sendInvite")].isNull() && m_send_invite_isValid;

    m_to_offering_id_isValid = ::OpenAPI::fromJsonValue(m_to_offering_id, json[QString("toOfferingId")]);
    m_to_offering_id_isSet = !json[QString("toOfferingId")].isNull() && m_to_offering_id_isValid;
}

QString OAITransferRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_from_offering_id_isSet) {
        obj.insert(QString("fromOfferingId"), ::OpenAPI::toJsonValue(m_from_offering_id));
    }
    if (m_send_invite_isSet) {
        obj.insert(QString("sendInvite"), ::OpenAPI::toJsonValue(m_send_invite));
    }
    if (m_to_offering_id_isSet) {
        obj.insert(QString("toOfferingId"), ::OpenAPI::toJsonValue(m_to_offering_id));
    }
    return obj;
}

QString OAITransferRequest::getFromOfferingId() const {
    return m_from_offering_id;
}
void OAITransferRequest::setFromOfferingId(const QString &from_offering_id) {
    m_from_offering_id = from_offering_id;
    m_from_offering_id_isSet = true;
}

bool OAITransferRequest::is_from_offering_id_Set() const{
    return m_from_offering_id_isSet;
}

bool OAITransferRequest::is_from_offering_id_Valid() const{
    return m_from_offering_id_isValid;
}

bool OAITransferRequest::isSendInvite() const {
    return m_send_invite;
}
void OAITransferRequest::setSendInvite(const bool &send_invite) {
    m_send_invite = send_invite;
    m_send_invite_isSet = true;
}

bool OAITransferRequest::is_send_invite_Set() const{
    return m_send_invite_isSet;
}

bool OAITransferRequest::is_send_invite_Valid() const{
    return m_send_invite_isValid;
}

QString OAITransferRequest::getToOfferingId() const {
    return m_to_offering_id;
}
void OAITransferRequest::setToOfferingId(const QString &to_offering_id) {
    m_to_offering_id = to_offering_id;
    m_to_offering_id_isSet = true;
}

bool OAITransferRequest::is_to_offering_id_Set() const{
    return m_to_offering_id_isSet;
}

bool OAITransferRequest::is_to_offering_id_Valid() const{
    return m_to_offering_id_isValid;
}

bool OAITransferRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_offering_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_invite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_offering_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
