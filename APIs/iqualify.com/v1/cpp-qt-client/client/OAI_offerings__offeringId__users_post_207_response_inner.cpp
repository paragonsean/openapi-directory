/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_offerings__offeringId__users_post_207_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_offerings__offeringId__users_post_207_response_inner::OAI_offerings__offeringId__users_post_207_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_offerings__offeringId__users_post_207_response_inner::OAI_offerings__offeringId__users_post_207_response_inner() {
    this->initializeModel();
}

OAI_offerings__offeringId__users_post_207_response_inner::~OAI_offerings__offeringId__users_post_207_response_inner() {}

void OAI_offerings__offeringId__users_post_207_response_inner::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_invite_isSet = false;
    m_invite_isValid = false;

    m_is_facilitator_isSet = false;
    m_is_facilitator_isValid = false;

    m_is_marker_isSet = false;
    m_is_marker_isValid = false;

    m_is_readonly_isSet = false;
    m_is_readonly_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_person_id_isSet = false;
    m_person_id_isValid = false;

    m_profile_isSet = false;
    m_profile_isValid = false;

    m_send_invite_isSet = false;
    m_send_invite_isValid = false;

    m_send_notification_email_isSet = false;
    m_send_notification_email_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;
}

void OAI_offerings__offeringId__users_post_207_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_offerings__offeringId__users_post_207_response_inner::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_invite_isValid = ::OpenAPI::fromJsonValue(m_invite, json[QString("invite")]);
    m_invite_isSet = !json[QString("invite")].isNull() && m_invite_isValid;

    m_is_facilitator_isValid = ::OpenAPI::fromJsonValue(m_is_facilitator, json[QString("isFacilitator")]);
    m_is_facilitator_isSet = !json[QString("isFacilitator")].isNull() && m_is_facilitator_isValid;

    m_is_marker_isValid = ::OpenAPI::fromJsonValue(m_is_marker, json[QString("isMarker")]);
    m_is_marker_isSet = !json[QString("isMarker")].isNull() && m_is_marker_isValid;

    m_is_readonly_isValid = ::OpenAPI::fromJsonValue(m_is_readonly, json[QString("isReadonly")]);
    m_is_readonly_isSet = !json[QString("isReadonly")].isNull() && m_is_readonly_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_person_id_isValid = ::OpenAPI::fromJsonValue(m_person_id, json[QString("personId")]);
    m_person_id_isSet = !json[QString("personId")].isNull() && m_person_id_isValid;

    m_profile_isValid = ::OpenAPI::fromJsonValue(m_profile, json[QString("profile")]);
    m_profile_isSet = !json[QString("profile")].isNull() && m_profile_isValid;

    m_send_invite_isValid = ::OpenAPI::fromJsonValue(m_send_invite, json[QString("sendInvite")]);
    m_send_invite_isSet = !json[QString("sendInvite")].isNull() && m_send_invite_isValid;

    m_send_notification_email_isValid = ::OpenAPI::fromJsonValue(m_send_notification_email, json[QString("sendNotificationEmail")]);
    m_send_notification_email_isSet = !json[QString("sendNotificationEmail")].isNull() && m_send_notification_email_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;
}

QString OAI_offerings__offeringId__users_post_207_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_offerings__offeringId__users_post_207_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_invite.isSet()) {
        obj.insert(QString("invite"), ::OpenAPI::toJsonValue(m_invite));
    }
    if (m_is_facilitator_isSet) {
        obj.insert(QString("isFacilitator"), ::OpenAPI::toJsonValue(m_is_facilitator));
    }
    if (m_is_marker_isSet) {
        obj.insert(QString("isMarker"), ::OpenAPI::toJsonValue(m_is_marker));
    }
    if (m_is_readonly_isSet) {
        obj.insert(QString("isReadonly"), ::OpenAPI::toJsonValue(m_is_readonly));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_person_id_isSet) {
        obj.insert(QString("personId"), ::OpenAPI::toJsonValue(m_person_id));
    }
    if (m_profile.isSet()) {
        obj.insert(QString("profile"), ::OpenAPI::toJsonValue(m_profile));
    }
    if (m_send_invite_isSet) {
        obj.insert(QString("sendInvite"), ::OpenAPI::toJsonValue(m_send_invite));
    }
    if (m_send_notification_email_isSet) {
        obj.insert(QString("sendNotificationEmail"), ::OpenAPI::toJsonValue(m_send_notification_email));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    return obj;
}

QString OAI_offerings__offeringId__users_post_207_response_inner::getEmail() const {
    return m_email;
}
void OAI_offerings__offeringId__users_post_207_response_inner::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::is_email_Set() const{
    return m_email_isSet;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::is_email_Valid() const{
    return m_email_isValid;
}

QString OAI_offerings__offeringId__users_post_207_response_inner::getFirstName() const {
    return m_first_name;
}
void OAI_offerings__offeringId__users_post_207_response_inner::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::is_first_name_Valid() const{
    return m_first_name_isValid;
}

OAIInvite OAI_offerings__offeringId__users_post_207_response_inner::getInvite() const {
    return m_invite;
}
void OAI_offerings__offeringId__users_post_207_response_inner::setInvite(const OAIInvite &invite) {
    m_invite = invite;
    m_invite_isSet = true;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::is_invite_Set() const{
    return m_invite_isSet;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::is_invite_Valid() const{
    return m_invite_isValid;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::isIsFacilitator() const {
    return m_is_facilitator;
}
void OAI_offerings__offeringId__users_post_207_response_inner::setIsFacilitator(const bool &is_facilitator) {
    m_is_facilitator = is_facilitator;
    m_is_facilitator_isSet = true;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::is_is_facilitator_Set() const{
    return m_is_facilitator_isSet;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::is_is_facilitator_Valid() const{
    return m_is_facilitator_isValid;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::isIsMarker() const {
    return m_is_marker;
}
void OAI_offerings__offeringId__users_post_207_response_inner::setIsMarker(const bool &is_marker) {
    m_is_marker = is_marker;
    m_is_marker_isSet = true;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::is_is_marker_Set() const{
    return m_is_marker_isSet;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::is_is_marker_Valid() const{
    return m_is_marker_isValid;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::isIsReadonly() const {
    return m_is_readonly;
}
void OAI_offerings__offeringId__users_post_207_response_inner::setIsReadonly(const bool &is_readonly) {
    m_is_readonly = is_readonly;
    m_is_readonly_isSet = true;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::is_is_readonly_Set() const{
    return m_is_readonly_isSet;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::is_is_readonly_Valid() const{
    return m_is_readonly_isValid;
}

QString OAI_offerings__offeringId__users_post_207_response_inner::getLastName() const {
    return m_last_name;
}
void OAI_offerings__offeringId__users_post_207_response_inner::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::is_last_name_Valid() const{
    return m_last_name_isValid;
}

OAIUserMetadata OAI_offerings__offeringId__users_post_207_response_inner::getMetadata() const {
    return m_metadata;
}
void OAI_offerings__offeringId__users_post_207_response_inner::setMetadata(const OAIUserMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAI_offerings__offeringId__users_post_207_response_inner::getPersonId() const {
    return m_person_id;
}
void OAI_offerings__offeringId__users_post_207_response_inner::setPersonId(const QString &person_id) {
    m_person_id = person_id;
    m_person_id_isSet = true;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::is_person_id_Set() const{
    return m_person_id_isSet;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::is_person_id_Valid() const{
    return m_person_id_isValid;
}

OAIUserProfileRequest OAI_offerings__offeringId__users_post_207_response_inner::getProfile() const {
    return m_profile;
}
void OAI_offerings__offeringId__users_post_207_response_inner::setProfile(const OAIUserProfileRequest &profile) {
    m_profile = profile;
    m_profile_isSet = true;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::is_profile_Set() const{
    return m_profile_isSet;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::is_profile_Valid() const{
    return m_profile_isValid;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::isSendInvite() const {
    return m_send_invite;
}
void OAI_offerings__offeringId__users_post_207_response_inner::setSendInvite(const bool &send_invite) {
    m_send_invite = send_invite;
    m_send_invite_isSet = true;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::is_send_invite_Set() const{
    return m_send_invite_isSet;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::is_send_invite_Valid() const{
    return m_send_invite_isValid;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::isSendNotificationEmail() const {
    return m_send_notification_email;
}
void OAI_offerings__offeringId__users_post_207_response_inner::setSendNotificationEmail(const bool &send_notification_email) {
    m_send_notification_email = send_notification_email;
    m_send_notification_email_isSet = true;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::is_send_notification_email_Set() const{
    return m_send_notification_email_isSet;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::is_send_notification_email_Valid() const{
    return m_send_notification_email_isValid;
}

OAIError_error OAI_offerings__offeringId__users_post_207_response_inner::getError() const {
    return m_error;
}
void OAI_offerings__offeringId__users_post_207_response_inner::setError(const OAIError_error &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::is_error_Set() const{
    return m_error_isSet;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::is_error_Valid() const{
    return m_error_isValid;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invite.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_facilitator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_marker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_readonly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_invite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_notification_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_offerings__offeringId__users_post_207_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
