/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOfferingLearnersApi_H
#define OAI_OAIOfferingLearnersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIOfferingUser.h"
#include "OAIOfferingUserAddResponse.h"
#include "OAIOfferingUserResponse.h"
#include "OAITransferRequest.h"
#include "OAI_offerings__offeringId__users_post_207_response_inner.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOfferingLearnersApi : public QObject {
    Q_OBJECT

public:
    OAIOfferingLearnersApi(const int timeOut = 0);
    ~OAIOfferingLearnersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  offering_id QString [required]
    * @param[in]  facilitators QString [optional]
    * @param[in]  learners QString [optional]
    * @param[in]  markers QString [optional]
    */
    virtual void offeringsOfferingIdUsersGet(const QString &offering_id, const ::OpenAPI::OptionalParam<QString> &facilitators = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &learners = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &markers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  offering_id QString [required]
    * @param[in]  marker_email QString [required]
    * @param[in]  request_body QList<QString> [required]
    */
    virtual void offeringsOfferingIdUsersMarkerEmailMarksDelete(const QString &offering_id, const QString &marker_email, const QList<QString> &request_body);

    /**
    * @param[in]  offering_id QString [required]
    * @param[in]  marker_email QString [required]
    */
    virtual void offeringsOfferingIdUsersMarkerEmailMarksGet(const QString &offering_id, const QString &marker_email);

    /**
    * @param[in]  offering_id QString [required]
    * @param[in]  marker_email QString [required]
    * @param[in]  request_body QList<QString> [required]
    */
    virtual void offeringsOfferingIdUsersMarkerEmailMarksPost(const QString &offering_id, const QString &marker_email, const QList<QString> &request_body);

    /**
    * @param[in]  offering_id QString [required]
    * @param[in]  oai_offering_user QList<OAIOfferingUser> [required]
    */
    virtual void offeringsOfferingIdUsersPost(const QString &offering_id, const QList<OAIOfferingUser> &oai_offering_user);

    /**
    * @param[in]  offering_id QString [required]
    * @param[in]  user_email QString [required]
    */
    virtual void offeringsOfferingIdUsersUserEmailDelete(const QString &offering_id, const QString &user_email);

    /**
    * @param[in]  user_email QString [required]
    * @param[in]  oai_transfer_request OAITransferRequest [required]
    */
    virtual void usersUserEmailTransferPatch(const QString &user_email, const OAITransferRequest &oai_transfer_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void offeringsOfferingIdUsersGetCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdUsersMarkerEmailMarksDeleteCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdUsersMarkerEmailMarksGetCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdUsersMarkerEmailMarksPostCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdUsersPostCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdUsersUserEmailDeleteCallback(OAIHttpRequestWorker *worker);
    void usersUserEmailTransferPatchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void offeringsOfferingIdUsersGetSignal(QList<OAIOfferingUserResponse> summary);
    void offeringsOfferingIdUsersMarkerEmailMarksDeleteSignal(QList<OAIOfferingUser> summary);
    void offeringsOfferingIdUsersMarkerEmailMarksGetSignal(QList<OAIOfferingUser> summary);
    void offeringsOfferingIdUsersMarkerEmailMarksPostSignal(QList<OAIOfferingUser> summary);
    void offeringsOfferingIdUsersPostSignal(QList<OAIOfferingUserAddResponse> summary);
    void offeringsOfferingIdUsersUserEmailDeleteSignal();
    void usersUserEmailTransferPatchSignal();


    void offeringsOfferingIdUsersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIOfferingUserResponse> summary);
    void offeringsOfferingIdUsersMarkerEmailMarksDeleteSignalFull(OAIHttpRequestWorker *worker, QList<OAIOfferingUser> summary);
    void offeringsOfferingIdUsersMarkerEmailMarksGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIOfferingUser> summary);
    void offeringsOfferingIdUsersMarkerEmailMarksPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIOfferingUser> summary);
    void offeringsOfferingIdUsersPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIOfferingUserAddResponse> summary);
    void offeringsOfferingIdUsersUserEmailDeleteSignalFull(OAIHttpRequestWorker *worker);
    void usersUserEmailTransferPatchSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdUsersGetSignalError() instead")
    void offeringsOfferingIdUsersGetSignalE(QList<OAIOfferingUserResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdUsersGetSignalError(QList<OAIOfferingUserResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdUsersMarkerEmailMarksDeleteSignalError() instead")
    void offeringsOfferingIdUsersMarkerEmailMarksDeleteSignalE(QList<OAIOfferingUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdUsersMarkerEmailMarksDeleteSignalError(QList<OAIOfferingUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdUsersMarkerEmailMarksGetSignalError() instead")
    void offeringsOfferingIdUsersMarkerEmailMarksGetSignalE(QList<OAIOfferingUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdUsersMarkerEmailMarksGetSignalError(QList<OAIOfferingUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdUsersMarkerEmailMarksPostSignalError() instead")
    void offeringsOfferingIdUsersMarkerEmailMarksPostSignalE(QList<OAIOfferingUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdUsersMarkerEmailMarksPostSignalError(QList<OAIOfferingUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdUsersPostSignalError() instead")
    void offeringsOfferingIdUsersPostSignalE(QList<OAIOfferingUserAddResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdUsersPostSignalError(QList<OAIOfferingUserAddResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdUsersUserEmailDeleteSignalError() instead")
    void offeringsOfferingIdUsersUserEmailDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdUsersUserEmailDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserEmailTransferPatchSignalError() instead")
    void usersUserEmailTransferPatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserEmailTransferPatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdUsersGetSignalErrorFull() instead")
    void offeringsOfferingIdUsersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdUsersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdUsersMarkerEmailMarksDeleteSignalErrorFull() instead")
    void offeringsOfferingIdUsersMarkerEmailMarksDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdUsersMarkerEmailMarksDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdUsersMarkerEmailMarksGetSignalErrorFull() instead")
    void offeringsOfferingIdUsersMarkerEmailMarksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdUsersMarkerEmailMarksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdUsersMarkerEmailMarksPostSignalErrorFull() instead")
    void offeringsOfferingIdUsersMarkerEmailMarksPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdUsersMarkerEmailMarksPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdUsersPostSignalErrorFull() instead")
    void offeringsOfferingIdUsersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdUsersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdUsersUserEmailDeleteSignalErrorFull() instead")
    void offeringsOfferingIdUsersUserEmailDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdUsersUserEmailDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserEmailTransferPatchSignalErrorFull() instead")
    void usersUserEmailTransferPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserEmailTransferPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
