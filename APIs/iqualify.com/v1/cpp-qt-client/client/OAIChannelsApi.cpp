/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIChannelsApi::OAIChannelsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIChannelsApi::~OAIChannelsApi() {
}

void OAIChannelsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.iqualify.com/v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGet", defaultConf);
    _serverIndices.insert("offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGet", 0);
    _serverConfigs.insert("offeringsOfferingIdAnalyticsChannelsChannelIdPostsGet", defaultConf);
    _serverIndices.insert("offeringsOfferingIdAnalyticsChannelsChannelIdPostsGet", 0);
    _serverConfigs.insert("offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGet", defaultConf);
    _serverIndices.insert("offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGet", 0);
    _serverConfigs.insert("offeringsOfferingIdChannelsChannelIdLearnersDelete", defaultConf);
    _serverIndices.insert("offeringsOfferingIdChannelsChannelIdLearnersDelete", 0);
    _serverConfigs.insert("offeringsOfferingIdChannelsChannelIdLearnersGet", defaultConf);
    _serverIndices.insert("offeringsOfferingIdChannelsChannelIdLearnersGet", 0);
    _serverConfigs.insert("offeringsOfferingIdChannelsChannelIdLearnersPost", defaultConf);
    _serverIndices.insert("offeringsOfferingIdChannelsChannelIdLearnersPost", 0);
    _serverConfigs.insert("offeringsOfferingIdChannelsChannelIdPatch", defaultConf);
    _serverIndices.insert("offeringsOfferingIdChannelsChannelIdPatch", 0);
    _serverConfigs.insert("offeringsOfferingIdChannelsGet", defaultConf);
    _serverIndices.insert("offeringsOfferingIdChannelsGet", 0);
    _serverConfigs.insert("offeringsOfferingIdChannelsPost", defaultConf);
    _serverIndices.insert("offeringsOfferingIdChannelsPost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIChannelsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIChannelsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIChannelsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIChannelsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIChannelsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIChannelsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIChannelsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIChannelsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIChannelsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIChannelsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIChannelsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIChannelsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIChannelsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIChannelsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIChannelsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIChannelsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIChannelsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIChannelsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIChannelsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIChannelsApi::offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGet(const QString &offering_id, const QString &channel_id) {
    QString fullPath = QString(_serverConfigs["offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGet"][_serverIndices.value("offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGet")].URL()+"/offerings/{offeringId}/analytics/channels/{channelId}/comments");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    
    {
        QString offering_idPathParam("{");
        offering_idPathParam.append("offeringId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "offeringId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"offeringId"+pathSuffix : pathPrefix;
        fullPath.replace(offering_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(offering_id)));
    }
    
    {
        QString channel_idPathParam("{");
        channel_idPathParam.append("channelId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "channelId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"channelId"+pathSuffix : pathPrefix;
        fullPath.replace(channel_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(channel_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChannelsApi::offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetCallback);
    connect(this, &OAIChannelsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChannelsApi::offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIComment> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIComment val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetSignal(output);
        Q_EMIT offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetSignalE(output, error_type, error_str);
        Q_EMIT offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetSignalError(output, error_type, error_str);
        Q_EMIT offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChannelsApi::offeringsOfferingIdAnalyticsChannelsChannelIdPostsGet(const QString &offering_id, const QString &channel_id) {
    QString fullPath = QString(_serverConfigs["offeringsOfferingIdAnalyticsChannelsChannelIdPostsGet"][_serverIndices.value("offeringsOfferingIdAnalyticsChannelsChannelIdPostsGet")].URL()+"/offerings/{offeringId}/analytics/channels/{channelId}/posts");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    
    {
        QString offering_idPathParam("{");
        offering_idPathParam.append("offeringId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "offeringId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"offeringId"+pathSuffix : pathPrefix;
        fullPath.replace(offering_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(offering_id)));
    }
    
    {
        QString channel_idPathParam("{");
        channel_idPathParam.append("channelId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "channelId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"channelId"+pathSuffix : pathPrefix;
        fullPath.replace(channel_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(channel_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChannelsApi::offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetCallback);
    connect(this, &OAIChannelsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChannelsApi::offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIHttpPost> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIHttpPost val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetSignal(output);
        Q_EMIT offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetSignalE(output, error_type, error_str);
        Q_EMIT offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetSignalError(output, error_type, error_str);
        Q_EMIT offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChannelsApi::offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGet(const QString &offering_id, const QString &channel_id) {
    QString fullPath = QString(_serverConfigs["offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGet"][_serverIndices.value("offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGet")].URL()+"/offerings/{offeringId}/analytics/channels/{channelId}/replies");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    
    {
        QString offering_idPathParam("{");
        offering_idPathParam.append("offeringId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "offeringId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"offeringId"+pathSuffix : pathPrefix;
        fullPath.replace(offering_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(offering_id)));
    }
    
    {
        QString channel_idPathParam("{");
        channel_idPathParam.append("channelId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "channelId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"channelId"+pathSuffix : pathPrefix;
        fullPath.replace(channel_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(channel_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChannelsApi::offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetCallback);
    connect(this, &OAIChannelsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChannelsApi::offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIComment> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIComment val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetSignal(output);
        Q_EMIT offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetSignalE(output, error_type, error_str);
        Q_EMIT offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetSignalError(output, error_type, error_str);
        Q_EMIT offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChannelsApi::offeringsOfferingIdChannelsChannelIdLearnersDelete(const QString &offering_id, const QString &channel_id, const OAI_offerings__offeringId__channels__channelId__learners_post_request &oai_offerings__offering_id__channels__channel_id__learners_post_request) {
    QString fullPath = QString(_serverConfigs["offeringsOfferingIdChannelsChannelIdLearnersDelete"][_serverIndices.value("offeringsOfferingIdChannelsChannelIdLearnersDelete")].URL()+"/offerings/{offeringId}/channels/{channelId}/learners");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    
    {
        QString offering_idPathParam("{");
        offering_idPathParam.append("offeringId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "offeringId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"offeringId"+pathSuffix : pathPrefix;
        fullPath.replace(offering_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(offering_id)));
    }
    
    {
        QString channel_idPathParam("{");
        channel_idPathParam.append("channelId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "channelId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"channelId"+pathSuffix : pathPrefix;
        fullPath.replace(channel_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(channel_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    {

        
        QByteArray output = oai_offerings__offering_id__channels__channel_id__learners_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChannelsApi::offeringsOfferingIdChannelsChannelIdLearnersDeleteCallback);
    connect(this, &OAIChannelsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChannelsApi::offeringsOfferingIdChannelsChannelIdLearnersDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT offeringsOfferingIdChannelsChannelIdLearnersDeleteSignal();
        Q_EMIT offeringsOfferingIdChannelsChannelIdLearnersDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT offeringsOfferingIdChannelsChannelIdLearnersDeleteSignalE(error_type, error_str);
        Q_EMIT offeringsOfferingIdChannelsChannelIdLearnersDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT offeringsOfferingIdChannelsChannelIdLearnersDeleteSignalError(error_type, error_str);
        Q_EMIT offeringsOfferingIdChannelsChannelIdLearnersDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChannelsApi::offeringsOfferingIdChannelsChannelIdLearnersGet(const QString &offering_id, const QString &channel_id) {
    QString fullPath = QString(_serverConfigs["offeringsOfferingIdChannelsChannelIdLearnersGet"][_serverIndices.value("offeringsOfferingIdChannelsChannelIdLearnersGet")].URL()+"/offerings/{offeringId}/channels/{channelId}/learners");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    
    {
        QString offering_idPathParam("{");
        offering_idPathParam.append("offeringId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "offeringId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"offeringId"+pathSuffix : pathPrefix;
        fullPath.replace(offering_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(offering_id)));
    }
    
    {
        QString channel_idPathParam("{");
        channel_idPathParam.append("channelId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "channelId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"channelId"+pathSuffix : pathPrefix;
        fullPath.replace(channel_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(channel_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChannelsApi::offeringsOfferingIdChannelsChannelIdLearnersGetCallback);
    connect(this, &OAIChannelsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChannelsApi::offeringsOfferingIdChannelsChannelIdLearnersGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIChannelResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT offeringsOfferingIdChannelsChannelIdLearnersGetSignal(output);
        Q_EMIT offeringsOfferingIdChannelsChannelIdLearnersGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT offeringsOfferingIdChannelsChannelIdLearnersGetSignalE(output, error_type, error_str);
        Q_EMIT offeringsOfferingIdChannelsChannelIdLearnersGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT offeringsOfferingIdChannelsChannelIdLearnersGetSignalError(output, error_type, error_str);
        Q_EMIT offeringsOfferingIdChannelsChannelIdLearnersGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChannelsApi::offeringsOfferingIdChannelsChannelIdLearnersPost(const QString &offering_id, const QString &channel_id, const OAI_offerings__offeringId__channels__channelId__learners_post_request &oai_offerings__offering_id__channels__channel_id__learners_post_request) {
    QString fullPath = QString(_serverConfigs["offeringsOfferingIdChannelsChannelIdLearnersPost"][_serverIndices.value("offeringsOfferingIdChannelsChannelIdLearnersPost")].URL()+"/offerings/{offeringId}/channels/{channelId}/learners");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    
    {
        QString offering_idPathParam("{");
        offering_idPathParam.append("offeringId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "offeringId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"offeringId"+pathSuffix : pathPrefix;
        fullPath.replace(offering_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(offering_id)));
    }
    
    {
        QString channel_idPathParam("{");
        channel_idPathParam.append("channelId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "channelId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"channelId"+pathSuffix : pathPrefix;
        fullPath.replace(channel_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(channel_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_offerings__offering_id__channels__channel_id__learners_post_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChannelsApi::offeringsOfferingIdChannelsChannelIdLearnersPostCallback);
    connect(this, &OAIChannelsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChannelsApi::offeringsOfferingIdChannelsChannelIdLearnersPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT offeringsOfferingIdChannelsChannelIdLearnersPostSignal();
        Q_EMIT offeringsOfferingIdChannelsChannelIdLearnersPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT offeringsOfferingIdChannelsChannelIdLearnersPostSignalE(error_type, error_str);
        Q_EMIT offeringsOfferingIdChannelsChannelIdLearnersPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT offeringsOfferingIdChannelsChannelIdLearnersPostSignalError(error_type, error_str);
        Q_EMIT offeringsOfferingIdChannelsChannelIdLearnersPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChannelsApi::offeringsOfferingIdChannelsChannelIdPatch(const QString &offering_id, const QString &channel_id, const OAIChannel &oai_channel) {
    QString fullPath = QString(_serverConfigs["offeringsOfferingIdChannelsChannelIdPatch"][_serverIndices.value("offeringsOfferingIdChannelsChannelIdPatch")].URL()+"/offerings/{offeringId}/channels/{channelId}");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    
    {
        QString offering_idPathParam("{");
        offering_idPathParam.append("offeringId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "offeringId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"offeringId"+pathSuffix : pathPrefix;
        fullPath.replace(offering_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(offering_id)));
    }
    
    {
        QString channel_idPathParam("{");
        channel_idPathParam.append("channelId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "channelId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"channelId"+pathSuffix : pathPrefix;
        fullPath.replace(channel_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(channel_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = oai_channel.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChannelsApi::offeringsOfferingIdChannelsChannelIdPatchCallback);
    connect(this, &OAIChannelsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChannelsApi::offeringsOfferingIdChannelsChannelIdPatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIChannelResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT offeringsOfferingIdChannelsChannelIdPatchSignal(output);
        Q_EMIT offeringsOfferingIdChannelsChannelIdPatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT offeringsOfferingIdChannelsChannelIdPatchSignalE(output, error_type, error_str);
        Q_EMIT offeringsOfferingIdChannelsChannelIdPatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT offeringsOfferingIdChannelsChannelIdPatchSignalError(output, error_type, error_str);
        Q_EMIT offeringsOfferingIdChannelsChannelIdPatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChannelsApi::offeringsOfferingIdChannelsGet(const QString &offering_id) {
    QString fullPath = QString(_serverConfigs["offeringsOfferingIdChannelsGet"][_serverIndices.value("offeringsOfferingIdChannelsGet")].URL()+"/offerings/{offeringId}/channels");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    
    {
        QString offering_idPathParam("{");
        offering_idPathParam.append("offeringId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "offeringId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"offeringId"+pathSuffix : pathPrefix;
        fullPath.replace(offering_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(offering_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChannelsApi::offeringsOfferingIdChannelsGetCallback);
    connect(this, &OAIChannelsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChannelsApi::offeringsOfferingIdChannelsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIChannelResponse> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIChannelResponse val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT offeringsOfferingIdChannelsGetSignal(output);
        Q_EMIT offeringsOfferingIdChannelsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT offeringsOfferingIdChannelsGetSignalE(output, error_type, error_str);
        Q_EMIT offeringsOfferingIdChannelsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT offeringsOfferingIdChannelsGetSignalError(output, error_type, error_str);
        Q_EMIT offeringsOfferingIdChannelsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChannelsApi::offeringsOfferingIdChannelsPost(const QString &offering_id, const OAIChannelRequired &oai_channel_required) {
    QString fullPath = QString(_serverConfigs["offeringsOfferingIdChannelsPost"][_serverIndices.value("offeringsOfferingIdChannelsPost")].URL()+"/offerings/{offeringId}/channels");
    
    if (_apiKeys.contains("Authorization")) {
        addHeaders("Authorization",_apiKeys.find("Authorization").value());
    }
    
    
    {
        QString offering_idPathParam("{");
        offering_idPathParam.append("offeringId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "offeringId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"offeringId"+pathSuffix : pathPrefix;
        fullPath.replace(offering_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(offering_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_channel_required.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChannelsApi::offeringsOfferingIdChannelsPostCallback);
    connect(this, &OAIChannelsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIChannelsApi::offeringsOfferingIdChannelsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIChannelResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT offeringsOfferingIdChannelsPostSignal(output);
        Q_EMIT offeringsOfferingIdChannelsPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT offeringsOfferingIdChannelsPostSignalE(output, error_type, error_str);
        Q_EMIT offeringsOfferingIdChannelsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT offeringsOfferingIdChannelsPostSignalError(output, error_type, error_str);
        Q_EMIT offeringsOfferingIdChannelsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChannelsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
