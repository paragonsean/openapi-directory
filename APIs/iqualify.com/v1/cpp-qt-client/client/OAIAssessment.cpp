/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssessment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssessment::OAIAssessment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssessment::OAIAssessment() {
    this->initializeModel();
}

OAIAssessment::~OAIAssessment() {}

void OAIAssessment::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_mark_number_isSet = false;
    m_mark_number_isValid = false;

    m_mark_type_isSet = false;
    m_mark_type_isValid = false;

    m_open_date_isSet = false;
    m_open_date_isValid = false;
}

void OAIAssessment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssessment::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("dueDate")]);
    m_due_date_isSet = !json[QString("dueDate")].isNull() && m_due_date_isValid;

    m_mark_number_isValid = ::OpenAPI::fromJsonValue(m_mark_number, json[QString("markNumber")]);
    m_mark_number_isSet = !json[QString("markNumber")].isNull() && m_mark_number_isValid;

    m_mark_type_isValid = ::OpenAPI::fromJsonValue(m_mark_type, json[QString("markType")]);
    m_mark_type_isSet = !json[QString("markType")].isNull() && m_mark_type_isValid;

    m_open_date_isValid = ::OpenAPI::fromJsonValue(m_open_date, json[QString("openDate")]);
    m_open_date_isSet = !json[QString("openDate")].isNull() && m_open_date_isValid;
}

QString OAIAssessment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssessment::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("dueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_mark_number_isSet) {
        obj.insert(QString("markNumber"), ::OpenAPI::toJsonValue(m_mark_number));
    }
    if (m_mark_type_isSet) {
        obj.insert(QString("markType"), ::OpenAPI::toJsonValue(m_mark_type));
    }
    if (m_open_date_isSet) {
        obj.insert(QString("openDate"), ::OpenAPI::toJsonValue(m_open_date));
    }
    return obj;
}

QString OAIAssessment::getContent() const {
    return m_content;
}
void OAIAssessment::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIAssessment::is_content_Set() const{
    return m_content_isSet;
}

bool OAIAssessment::is_content_Valid() const{
    return m_content_isValid;
}

QDateTime OAIAssessment::getDueDate() const {
    return m_due_date;
}
void OAIAssessment::setDueDate(const QDateTime &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIAssessment::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIAssessment::is_due_date_Valid() const{
    return m_due_date_isValid;
}

QString OAIAssessment::getMarkNumber() const {
    return m_mark_number;
}
void OAIAssessment::setMarkNumber(const QString &mark_number) {
    m_mark_number = mark_number;
    m_mark_number_isSet = true;
}

bool OAIAssessment::is_mark_number_Set() const{
    return m_mark_number_isSet;
}

bool OAIAssessment::is_mark_number_Valid() const{
    return m_mark_number_isValid;
}

QString OAIAssessment::getMarkType() const {
    return m_mark_type;
}
void OAIAssessment::setMarkType(const QString &mark_type) {
    m_mark_type = mark_type;
    m_mark_type_isSet = true;
}

bool OAIAssessment::is_mark_type_Set() const{
    return m_mark_type_isSet;
}

bool OAIAssessment::is_mark_type_Valid() const{
    return m_mark_type_isValid;
}

QDateTime OAIAssessment::getOpenDate() const {
    return m_open_date;
}
void OAIAssessment::setOpenDate(const QDateTime &open_date) {
    m_open_date = open_date;
    m_open_date_isSet = true;
}

bool OAIAssessment::is_open_date_Set() const{
    return m_open_date_isSet;
}

bool OAIAssessment::is_open_date_Valid() const{
    return m_open_date_isValid;
}

bool OAIAssessment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mark_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mark_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssessment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
