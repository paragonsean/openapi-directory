/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAssessmentManagementApi_H
#define OAI_OAIAssessmentManagementApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssessment.h"
#include "OAIAssessmentPendingSubmission.h"
#include "OAIAssessmentResponse.h"
#include "OAIAssignments.h"
#include "OAIError.h"
#include "OAIOfferingActivitiesResponse.h"
#include "OAI_offerings__offeringId__assessments__assessmentId___userEmail__patch_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAssessmentManagementApi : public QObject {
    Q_OBJECT

public:
    OAIAssessmentManagementApi(const int timeOut = 0);
    ~OAIAssessmentManagementApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  offering_id QString [required]
    */
    virtual void offeringsOfferingIdActivitiesOpenresponseGet(const QString &offering_id);

    /**
    * @param[in]  offering_id QString [required]
    * @param[in]  assessment_id QString [required]
    * @param[in]  document_id QString [required]
    */
    virtual void offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDelete(const QString &offering_id, const QString &assessment_id, const QString &document_id);

    /**
    * @param[in]  offering_id QString [required]
    * @param[in]  assessment_id QString [required]
    * @param[in]  oai_assessment OAIAssessment [required]
    */
    virtual void offeringsOfferingIdAssessmentsAssessmentIdPatch(const QString &offering_id, const QString &assessment_id, const OAIAssessment &oai_assessment);

    /**
    * @param[in]  offering_id QString [required]
    * @param[in]  assessment_id QString [required]
    * @param[in]  user_email QString [required]
    * @param[in]  oai_offerings__offering_id__assessments__assessment_id___user_email__patch_request OAI_offerings__offeringId__assessments__assessmentId___userEmail__patch_request [required]
    */
    virtual void offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatch(const QString &offering_id, const QString &assessment_id, const QString &user_email, const OAI_offerings__offeringId__assessments__assessmentId___userEmail__patch_request &oai_offerings__offering_id__assessments__assessment_id___user_email__patch_request);

    /**
    * @param[in]  offering_id QString [required]
    */
    virtual void offeringsOfferingIdAssessmentsGet(const QString &offering_id);

    /**
    * @param[in]  offering_id QString [required]
    * @param[in]  days QString [optional]
    */
    virtual void offeringsOfferingIdLearnersPendingSubmissionGet(const QString &offering_id, const ::OpenAPI::OptionalParam<QString> &days = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  offering_id QString [required]
    * @param[in]  user_email QString [required]
    * @param[in]  assessment_id QString [required]
    */
    virtual void offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDelete(const QString &offering_id, const QString &user_email, const QString &assessment_id);

    /**
    * @param[in]  offering_id QString [required]
    * @param[in]  user_email QString [required]
    */
    virtual void offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGet(const QString &offering_id, const QString &user_email);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void offeringsOfferingIdActivitiesOpenresponseGetCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDeleteCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdAssessmentsAssessmentIdPatchCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdAssessmentsGetCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdLearnersPendingSubmissionGetCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDeleteCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void offeringsOfferingIdActivitiesOpenresponseGetSignal(QList<OAIOfferingActivitiesResponse> summary);
    void offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDeleteSignal();
    void offeringsOfferingIdAssessmentsAssessmentIdPatchSignal(OAIAssessmentResponse summary);
    void offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchSignal();
    void offeringsOfferingIdAssessmentsGetSignal(QList<OAIAssessmentResponse> summary);
    void offeringsOfferingIdLearnersPendingSubmissionGetSignal(QList<OAIAssessmentPendingSubmission> summary);
    void offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDeleteSignal();
    void offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGetSignal(QList<OAIAssignments> summary);


    void offeringsOfferingIdActivitiesOpenresponseGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIOfferingActivitiesResponse> summary);
    void offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdAssessmentsAssessmentIdPatchSignalFull(OAIHttpRequestWorker *worker, OAIAssessmentResponse summary);
    void offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchSignalFull(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdAssessmentsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssessmentResponse> summary);
    void offeringsOfferingIdLearnersPendingSubmissionGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssessmentPendingSubmission> summary);
    void offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssignments> summary);

    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdActivitiesOpenresponseGetSignalError() instead")
    void offeringsOfferingIdActivitiesOpenresponseGetSignalE(QList<OAIOfferingActivitiesResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdActivitiesOpenresponseGetSignalError(QList<OAIOfferingActivitiesResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDeleteSignalError() instead")
    void offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAssessmentsAssessmentIdPatchSignalError() instead")
    void offeringsOfferingIdAssessmentsAssessmentIdPatchSignalE(OAIAssessmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAssessmentsAssessmentIdPatchSignalError(OAIAssessmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchSignalError() instead")
    void offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAssessmentsGetSignalError() instead")
    void offeringsOfferingIdAssessmentsGetSignalE(QList<OAIAssessmentResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAssessmentsGetSignalError(QList<OAIAssessmentResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdLearnersPendingSubmissionGetSignalError() instead")
    void offeringsOfferingIdLearnersPendingSubmissionGetSignalE(QList<OAIAssessmentPendingSubmission> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdLearnersPendingSubmissionGetSignalError(QList<OAIAssessmentPendingSubmission> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDeleteSignalError() instead")
    void offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGetSignalError() instead")
    void offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGetSignalE(QList<OAIAssignments> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGetSignalError(QList<OAIAssignments> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdActivitiesOpenresponseGetSignalErrorFull() instead")
    void offeringsOfferingIdActivitiesOpenresponseGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdActivitiesOpenresponseGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDeleteSignalErrorFull() instead")
    void offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAssessmentsAssessmentIdPatchSignalErrorFull() instead")
    void offeringsOfferingIdAssessmentsAssessmentIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAssessmentsAssessmentIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchSignalErrorFull() instead")
    void offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAssessmentsGetSignalErrorFull() instead")
    void offeringsOfferingIdAssessmentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAssessmentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdLearnersPendingSubmissionGetSignalErrorFull() instead")
    void offeringsOfferingIdLearnersPendingSubmissionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdLearnersPendingSubmissionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDeleteSignalErrorFull() instead")
    void offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGetSignalErrorFull() instead")
    void offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
