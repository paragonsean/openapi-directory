/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIChannelsApi_H
#define OAI_OAIChannelsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChannel.h"
#include "OAIChannelRequired.h"
#include "OAIChannelResponse.h"
#include "OAIComment.h"
#include "OAIError.h"
#include "OAIHttpPost.h"
#include "OAI_offerings__offeringId__channels__channelId__learners_post_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIChannelsApi : public QObject {
    Q_OBJECT

public:
    OAIChannelsApi(const int timeOut = 0);
    ~OAIChannelsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  offering_id QString [required]
    * @param[in]  channel_id QString [required]
    */
    virtual void offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGet(const QString &offering_id, const QString &channel_id);

    /**
    * @param[in]  offering_id QString [required]
    * @param[in]  channel_id QString [required]
    */
    virtual void offeringsOfferingIdAnalyticsChannelsChannelIdPostsGet(const QString &offering_id, const QString &channel_id);

    /**
    * @param[in]  offering_id QString [required]
    * @param[in]  channel_id QString [required]
    */
    virtual void offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGet(const QString &offering_id, const QString &channel_id);

    /**
    * @param[in]  offering_id QString [required]
    * @param[in]  channel_id QString [required]
    * @param[in]  oai_offerings__offering_id__channels__channel_id__learners_post_request OAI_offerings__offeringId__channels__channelId__learners_post_request [required]
    */
    virtual void offeringsOfferingIdChannelsChannelIdLearnersDelete(const QString &offering_id, const QString &channel_id, const OAI_offerings__offeringId__channels__channelId__learners_post_request &oai_offerings__offering_id__channels__channel_id__learners_post_request);

    /**
    * @param[in]  offering_id QString [required]
    * @param[in]  channel_id QString [required]
    */
    virtual void offeringsOfferingIdChannelsChannelIdLearnersGet(const QString &offering_id, const QString &channel_id);

    /**
    * @param[in]  offering_id QString [required]
    * @param[in]  channel_id QString [required]
    * @param[in]  oai_offerings__offering_id__channels__channel_id__learners_post_request OAI_offerings__offeringId__channels__channelId__learners_post_request [required]
    */
    virtual void offeringsOfferingIdChannelsChannelIdLearnersPost(const QString &offering_id, const QString &channel_id, const OAI_offerings__offeringId__channels__channelId__learners_post_request &oai_offerings__offering_id__channels__channel_id__learners_post_request);

    /**
    * @param[in]  offering_id QString [required]
    * @param[in]  channel_id QString [required]
    * @param[in]  oai_channel OAIChannel [required]
    */
    virtual void offeringsOfferingIdChannelsChannelIdPatch(const QString &offering_id, const QString &channel_id, const OAIChannel &oai_channel);

    /**
    * @param[in]  offering_id QString [required]
    */
    virtual void offeringsOfferingIdChannelsGet(const QString &offering_id);

    /**
    * @param[in]  offering_id QString [required]
    * @param[in]  oai_channel_required OAIChannelRequired [required]
    */
    virtual void offeringsOfferingIdChannelsPost(const QString &offering_id, const OAIChannelRequired &oai_channel_required);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdChannelsChannelIdLearnersDeleteCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdChannelsChannelIdLearnersGetCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdChannelsChannelIdLearnersPostCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdChannelsChannelIdPatchCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdChannelsGetCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdChannelsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetSignal(QList<OAIComment> summary);
    void offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetSignal(QList<OAIHttpPost> summary);
    void offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetSignal(QList<OAIComment> summary);
    void offeringsOfferingIdChannelsChannelIdLearnersDeleteSignal();
    void offeringsOfferingIdChannelsChannelIdLearnersGetSignal(OAIChannelResponse summary);
    void offeringsOfferingIdChannelsChannelIdLearnersPostSignal();
    void offeringsOfferingIdChannelsChannelIdPatchSignal(OAIChannelResponse summary);
    void offeringsOfferingIdChannelsGetSignal(QList<OAIChannelResponse> summary);
    void offeringsOfferingIdChannelsPostSignal(OAIChannelResponse summary);


    void offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIComment> summary);
    void offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIHttpPost> summary);
    void offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIComment> summary);
    void offeringsOfferingIdChannelsChannelIdLearnersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdChannelsChannelIdLearnersGetSignalFull(OAIHttpRequestWorker *worker, OAIChannelResponse summary);
    void offeringsOfferingIdChannelsChannelIdLearnersPostSignalFull(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdChannelsChannelIdPatchSignalFull(OAIHttpRequestWorker *worker, OAIChannelResponse summary);
    void offeringsOfferingIdChannelsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIChannelResponse> summary);
    void offeringsOfferingIdChannelsPostSignalFull(OAIHttpRequestWorker *worker, OAIChannelResponse summary);

    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetSignalError() instead")
    void offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetSignalE(QList<OAIComment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetSignalError(QList<OAIComment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetSignalError() instead")
    void offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetSignalE(QList<OAIHttpPost> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetSignalError(QList<OAIHttpPost> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetSignalError() instead")
    void offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetSignalE(QList<OAIComment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetSignalError(QList<OAIComment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdChannelsChannelIdLearnersDeleteSignalError() instead")
    void offeringsOfferingIdChannelsChannelIdLearnersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdChannelsChannelIdLearnersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdChannelsChannelIdLearnersGetSignalError() instead")
    void offeringsOfferingIdChannelsChannelIdLearnersGetSignalE(OAIChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdChannelsChannelIdLearnersGetSignalError(OAIChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdChannelsChannelIdLearnersPostSignalError() instead")
    void offeringsOfferingIdChannelsChannelIdLearnersPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdChannelsChannelIdLearnersPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdChannelsChannelIdPatchSignalError() instead")
    void offeringsOfferingIdChannelsChannelIdPatchSignalE(OAIChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdChannelsChannelIdPatchSignalError(OAIChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdChannelsGetSignalError() instead")
    void offeringsOfferingIdChannelsGetSignalE(QList<OAIChannelResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdChannelsGetSignalError(QList<OAIChannelResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdChannelsPostSignalError() instead")
    void offeringsOfferingIdChannelsPostSignalE(OAIChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdChannelsPostSignalError(OAIChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetSignalErrorFull() instead")
    void offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetSignalErrorFull() instead")
    void offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetSignalErrorFull() instead")
    void offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdChannelsChannelIdLearnersDeleteSignalErrorFull() instead")
    void offeringsOfferingIdChannelsChannelIdLearnersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdChannelsChannelIdLearnersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdChannelsChannelIdLearnersGetSignalErrorFull() instead")
    void offeringsOfferingIdChannelsChannelIdLearnersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdChannelsChannelIdLearnersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdChannelsChannelIdLearnersPostSignalErrorFull() instead")
    void offeringsOfferingIdChannelsChannelIdLearnersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdChannelsChannelIdLearnersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdChannelsChannelIdPatchSignalErrorFull() instead")
    void offeringsOfferingIdChannelsChannelIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdChannelsChannelIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdChannelsGetSignalErrorFull() instead")
    void offeringsOfferingIdChannelsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdChannelsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdChannelsPostSignalErrorFull() instead")
    void offeringsOfferingIdChannelsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdChannelsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
