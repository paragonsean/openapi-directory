/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserBadge.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserBadge::OAIUserBadge(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserBadge::OAIUserBadge() {
    this->initializeModel();
}

OAIUserBadge::~OAIUserBadge() {}

void OAIUserBadge::initializeModel() {

    m_awarded_at_isSet = false;
    m_awarded_at_isValid = false;

    m_badge_expiry_isSet = false;
    m_badge_expiry_isValid = false;

    m_badge_url_isSet = false;
    m_badge_url_isValid = false;

    m_criterias_isSet = false;
    m_criterias_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_offering_id_isSet = false;
    m_offering_id_isValid = false;

    m_open_badge_isSet = false;
    m_open_badge_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIUserBadge::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserBadge::fromJsonObject(QJsonObject json) {

    m_awarded_at_isValid = ::OpenAPI::fromJsonValue(m_awarded_at, json[QString("awardedAt")]);
    m_awarded_at_isSet = !json[QString("awardedAt")].isNull() && m_awarded_at_isValid;

    m_badge_expiry_isValid = ::OpenAPI::fromJsonValue(m_badge_expiry, json[QString("badgeExpiry")]);
    m_badge_expiry_isSet = !json[QString("badgeExpiry")].isNull() && m_badge_expiry_isValid;

    m_badge_url_isValid = ::OpenAPI::fromJsonValue(m_badge_url, json[QString("badgeUrl")]);
    m_badge_url_isSet = !json[QString("badgeUrl")].isNull() && m_badge_url_isValid;

    m_criterias_isValid = ::OpenAPI::fromJsonValue(m_criterias, json[QString("criterias")]);
    m_criterias_isSet = !json[QString("criterias")].isNull() && m_criterias_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_offering_id_isValid = ::OpenAPI::fromJsonValue(m_offering_id, json[QString("offeringId")]);
    m_offering_id_isSet = !json[QString("offeringId")].isNull() && m_offering_id_isValid;

    m_open_badge_isValid = ::OpenAPI::fromJsonValue(m_open_badge, json[QString("openBadge")]);
    m_open_badge_isSet = !json[QString("openBadge")].isNull() && m_open_badge_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIUserBadge::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserBadge::asJsonObject() const {
    QJsonObject obj;
    if (m_awarded_at_isSet) {
        obj.insert(QString("awardedAt"), ::OpenAPI::toJsonValue(m_awarded_at));
    }
    if (m_badge_expiry.isSet()) {
        obj.insert(QString("badgeExpiry"), ::OpenAPI::toJsonValue(m_badge_expiry));
    }
    if (m_badge_url_isSet) {
        obj.insert(QString("badgeUrl"), ::OpenAPI::toJsonValue(m_badge_url));
    }
    if (m_criterias.isSet()) {
        obj.insert(QString("criterias"), ::OpenAPI::toJsonValue(m_criterias));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_offering_id_isSet) {
        obj.insert(QString("offeringId"), ::OpenAPI::toJsonValue(m_offering_id));
    }
    if (m_open_badge.isSet()) {
        obj.insert(QString("openBadge"), ::OpenAPI::toJsonValue(m_open_badge));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QDateTime OAIUserBadge::getAwardedAt() const {
    return m_awarded_at;
}
void OAIUserBadge::setAwardedAt(const QDateTime &awarded_at) {
    m_awarded_at = awarded_at;
    m_awarded_at_isSet = true;
}

bool OAIUserBadge::is_awarded_at_Set() const{
    return m_awarded_at_isSet;
}

bool OAIUserBadge::is_awarded_at_Valid() const{
    return m_awarded_at_isValid;
}

OAIUserBadge_badgeExpiry OAIUserBadge::getBadgeExpiry() const {
    return m_badge_expiry;
}
void OAIUserBadge::setBadgeExpiry(const OAIUserBadge_badgeExpiry &badge_expiry) {
    m_badge_expiry = badge_expiry;
    m_badge_expiry_isSet = true;
}

bool OAIUserBadge::is_badge_expiry_Set() const{
    return m_badge_expiry_isSet;
}

bool OAIUserBadge::is_badge_expiry_Valid() const{
    return m_badge_expiry_isValid;
}

QString OAIUserBadge::getBadgeUrl() const {
    return m_badge_url;
}
void OAIUserBadge::setBadgeUrl(const QString &badge_url) {
    m_badge_url = badge_url;
    m_badge_url_isSet = true;
}

bool OAIUserBadge::is_badge_url_Set() const{
    return m_badge_url_isSet;
}

bool OAIUserBadge::is_badge_url_Valid() const{
    return m_badge_url_isValid;
}

OAICriteria OAIUserBadge::getCriterias() const {
    return m_criterias;
}
void OAIUserBadge::setCriterias(const OAICriteria &criterias) {
    m_criterias = criterias;
    m_criterias_isSet = true;
}

bool OAIUserBadge::is_criterias_Set() const{
    return m_criterias_isSet;
}

bool OAIUserBadge::is_criterias_Valid() const{
    return m_criterias_isValid;
}

QString OAIUserBadge::getDescription() const {
    return m_description;
}
void OAIUserBadge::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUserBadge::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUserBadge::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUserBadge::getOfferingId() const {
    return m_offering_id;
}
void OAIUserBadge::setOfferingId(const QString &offering_id) {
    m_offering_id = offering_id;
    m_offering_id_isSet = true;
}

bool OAIUserBadge::is_offering_id_Set() const{
    return m_offering_id_isSet;
}

bool OAIUserBadge::is_offering_id_Valid() const{
    return m_offering_id_isValid;
}

OAIOpenBadgeClass OAIUserBadge::getOpenBadge() const {
    return m_open_badge;
}
void OAIUserBadge::setOpenBadge(const OAIOpenBadgeClass &open_badge) {
    m_open_badge = open_badge;
    m_open_badge_isSet = true;
}

bool OAIUserBadge::is_open_badge_Set() const{
    return m_open_badge_isSet;
}

bool OAIUserBadge::is_open_badge_Valid() const{
    return m_open_badge_isValid;
}

QString OAIUserBadge::getTitle() const {
    return m_title;
}
void OAIUserBadge::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIUserBadge::is_title_Set() const{
    return m_title_isSet;
}

bool OAIUserBadge::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIUserBadge::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_awarded_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_badge_expiry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_badge_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_criterias.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offering_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_badge.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserBadge::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
