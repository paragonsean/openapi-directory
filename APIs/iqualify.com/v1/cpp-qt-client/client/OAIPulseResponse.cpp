/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPulseResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPulseResponse::OAIPulseResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPulseResponse::OAIPulseResponse() {
    this->initializeModel();
}

OAIPulseResponse::~OAIPulseResponse() {}

void OAIPulseResponse::initializeModel() {

    m_learner_first_name_isSet = false;
    m_learner_first_name_isValid = false;

    m_learner_id_isSet = false;
    m_learner_id_isValid = false;

    m_learner_last_name_isSet = false;
    m_learner_last_name_isValid = false;

    m_pulse_base_id_isSet = false;
    m_pulse_base_id_isValid = false;

    m_pulse_instance_id_isSet = false;
    m_pulse_instance_id_isValid = false;

    m_pulse_question_isSet = false;
    m_pulse_question_isValid = false;

    m_pulse_run_duration_minutes_isSet = false;
    m_pulse_run_duration_minutes_isValid = false;

    m_pulse_run_start_isSet = false;
    m_pulse_run_start_isValid = false;

    m_pulse_type_isSet = false;
    m_pulse_type_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;

    m_response_time_isSet = false;
    m_response_time_isValid = false;
}

void OAIPulseResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPulseResponse::fromJsonObject(QJsonObject json) {

    m_learner_first_name_isValid = ::OpenAPI::fromJsonValue(m_learner_first_name, json[QString("learnerFirstName")]);
    m_learner_first_name_isSet = !json[QString("learnerFirstName")].isNull() && m_learner_first_name_isValid;

    m_learner_id_isValid = ::OpenAPI::fromJsonValue(m_learner_id, json[QString("learnerId")]);
    m_learner_id_isSet = !json[QString("learnerId")].isNull() && m_learner_id_isValid;

    m_learner_last_name_isValid = ::OpenAPI::fromJsonValue(m_learner_last_name, json[QString("learnerLastName")]);
    m_learner_last_name_isSet = !json[QString("learnerLastName")].isNull() && m_learner_last_name_isValid;

    m_pulse_base_id_isValid = ::OpenAPI::fromJsonValue(m_pulse_base_id, json[QString("pulseBaseId")]);
    m_pulse_base_id_isSet = !json[QString("pulseBaseId")].isNull() && m_pulse_base_id_isValid;

    m_pulse_instance_id_isValid = ::OpenAPI::fromJsonValue(m_pulse_instance_id, json[QString("pulseInstanceId")]);
    m_pulse_instance_id_isSet = !json[QString("pulseInstanceId")].isNull() && m_pulse_instance_id_isValid;

    m_pulse_question_isValid = ::OpenAPI::fromJsonValue(m_pulse_question, json[QString("pulseQuestion")]);
    m_pulse_question_isSet = !json[QString("pulseQuestion")].isNull() && m_pulse_question_isValid;

    m_pulse_run_duration_minutes_isValid = ::OpenAPI::fromJsonValue(m_pulse_run_duration_minutes, json[QString("pulseRunDurationMinutes")]);
    m_pulse_run_duration_minutes_isSet = !json[QString("pulseRunDurationMinutes")].isNull() && m_pulse_run_duration_minutes_isValid;

    m_pulse_run_start_isValid = ::OpenAPI::fromJsonValue(m_pulse_run_start, json[QString("pulseRunStart")]);
    m_pulse_run_start_isSet = !json[QString("pulseRunStart")].isNull() && m_pulse_run_start_isValid;

    m_pulse_type_isValid = ::OpenAPI::fromJsonValue(m_pulse_type, json[QString("pulseType")]);
    m_pulse_type_isSet = !json[QString("pulseType")].isNull() && m_pulse_type_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("response")]);
    m_response_isSet = !json[QString("response")].isNull() && m_response_isValid;

    m_response_time_isValid = ::OpenAPI::fromJsonValue(m_response_time, json[QString("responseTime")]);
    m_response_time_isSet = !json[QString("responseTime")].isNull() && m_response_time_isValid;
}

QString OAIPulseResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPulseResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_learner_first_name_isSet) {
        obj.insert(QString("learnerFirstName"), ::OpenAPI::toJsonValue(m_learner_first_name));
    }
    if (m_learner_id_isSet) {
        obj.insert(QString("learnerId"), ::OpenAPI::toJsonValue(m_learner_id));
    }
    if (m_learner_last_name_isSet) {
        obj.insert(QString("learnerLastName"), ::OpenAPI::toJsonValue(m_learner_last_name));
    }
    if (m_pulse_base_id_isSet) {
        obj.insert(QString("pulseBaseId"), ::OpenAPI::toJsonValue(m_pulse_base_id));
    }
    if (m_pulse_instance_id_isSet) {
        obj.insert(QString("pulseInstanceId"), ::OpenAPI::toJsonValue(m_pulse_instance_id));
    }
    if (m_pulse_question_isSet) {
        obj.insert(QString("pulseQuestion"), ::OpenAPI::toJsonValue(m_pulse_question));
    }
    if (m_pulse_run_duration_minutes_isSet) {
        obj.insert(QString("pulseRunDurationMinutes"), ::OpenAPI::toJsonValue(m_pulse_run_duration_minutes));
    }
    if (m_pulse_run_start_isSet) {
        obj.insert(QString("pulseRunStart"), ::OpenAPI::toJsonValue(m_pulse_run_start));
    }
    if (m_pulse_type_isSet) {
        obj.insert(QString("pulseType"), ::OpenAPI::toJsonValue(m_pulse_type));
    }
    if (m_response.isSet()) {
        obj.insert(QString("response"), ::OpenAPI::toJsonValue(m_response));
    }
    if (m_response_time_isSet) {
        obj.insert(QString("responseTime"), ::OpenAPI::toJsonValue(m_response_time));
    }
    return obj;
}

QString OAIPulseResponse::getLearnerFirstName() const {
    return m_learner_first_name;
}
void OAIPulseResponse::setLearnerFirstName(const QString &learner_first_name) {
    m_learner_first_name = learner_first_name;
    m_learner_first_name_isSet = true;
}

bool OAIPulseResponse::is_learner_first_name_Set() const{
    return m_learner_first_name_isSet;
}

bool OAIPulseResponse::is_learner_first_name_Valid() const{
    return m_learner_first_name_isValid;
}

QString OAIPulseResponse::getLearnerId() const {
    return m_learner_id;
}
void OAIPulseResponse::setLearnerId(const QString &learner_id) {
    m_learner_id = learner_id;
    m_learner_id_isSet = true;
}

bool OAIPulseResponse::is_learner_id_Set() const{
    return m_learner_id_isSet;
}

bool OAIPulseResponse::is_learner_id_Valid() const{
    return m_learner_id_isValid;
}

QString OAIPulseResponse::getLearnerLastName() const {
    return m_learner_last_name;
}
void OAIPulseResponse::setLearnerLastName(const QString &learner_last_name) {
    m_learner_last_name = learner_last_name;
    m_learner_last_name_isSet = true;
}

bool OAIPulseResponse::is_learner_last_name_Set() const{
    return m_learner_last_name_isSet;
}

bool OAIPulseResponse::is_learner_last_name_Valid() const{
    return m_learner_last_name_isValid;
}

QString OAIPulseResponse::getPulseBaseId() const {
    return m_pulse_base_id;
}
void OAIPulseResponse::setPulseBaseId(const QString &pulse_base_id) {
    m_pulse_base_id = pulse_base_id;
    m_pulse_base_id_isSet = true;
}

bool OAIPulseResponse::is_pulse_base_id_Set() const{
    return m_pulse_base_id_isSet;
}

bool OAIPulseResponse::is_pulse_base_id_Valid() const{
    return m_pulse_base_id_isValid;
}

QString OAIPulseResponse::getPulseInstanceId() const {
    return m_pulse_instance_id;
}
void OAIPulseResponse::setPulseInstanceId(const QString &pulse_instance_id) {
    m_pulse_instance_id = pulse_instance_id;
    m_pulse_instance_id_isSet = true;
}

bool OAIPulseResponse::is_pulse_instance_id_Set() const{
    return m_pulse_instance_id_isSet;
}

bool OAIPulseResponse::is_pulse_instance_id_Valid() const{
    return m_pulse_instance_id_isValid;
}

QString OAIPulseResponse::getPulseQuestion() const {
    return m_pulse_question;
}
void OAIPulseResponse::setPulseQuestion(const QString &pulse_question) {
    m_pulse_question = pulse_question;
    m_pulse_question_isSet = true;
}

bool OAIPulseResponse::is_pulse_question_Set() const{
    return m_pulse_question_isSet;
}

bool OAIPulseResponse::is_pulse_question_Valid() const{
    return m_pulse_question_isValid;
}

qint32 OAIPulseResponse::getPulseRunDurationMinutes() const {
    return m_pulse_run_duration_minutes;
}
void OAIPulseResponse::setPulseRunDurationMinutes(const qint32 &pulse_run_duration_minutes) {
    m_pulse_run_duration_minutes = pulse_run_duration_minutes;
    m_pulse_run_duration_minutes_isSet = true;
}

bool OAIPulseResponse::is_pulse_run_duration_minutes_Set() const{
    return m_pulse_run_duration_minutes_isSet;
}

bool OAIPulseResponse::is_pulse_run_duration_minutes_Valid() const{
    return m_pulse_run_duration_minutes_isValid;
}

QDateTime OAIPulseResponse::getPulseRunStart() const {
    return m_pulse_run_start;
}
void OAIPulseResponse::setPulseRunStart(const QDateTime &pulse_run_start) {
    m_pulse_run_start = pulse_run_start;
    m_pulse_run_start_isSet = true;
}

bool OAIPulseResponse::is_pulse_run_start_Set() const{
    return m_pulse_run_start_isSet;
}

bool OAIPulseResponse::is_pulse_run_start_Valid() const{
    return m_pulse_run_start_isValid;
}

QString OAIPulseResponse::getPulseType() const {
    return m_pulse_type;
}
void OAIPulseResponse::setPulseType(const QString &pulse_type) {
    m_pulse_type = pulse_type;
    m_pulse_type_isSet = true;
}

bool OAIPulseResponse::is_pulse_type_Set() const{
    return m_pulse_type_isSet;
}

bool OAIPulseResponse::is_pulse_type_Valid() const{
    return m_pulse_type_isValid;
}

OAIPulseAnswer OAIPulseResponse::getResponse() const {
    return m_response;
}
void OAIPulseResponse::setResponse(const OAIPulseAnswer &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAIPulseResponse::is_response_Set() const{
    return m_response_isSet;
}

bool OAIPulseResponse::is_response_Valid() const{
    return m_response_isValid;
}

QDateTime OAIPulseResponse::getResponseTime() const {
    return m_response_time;
}
void OAIPulseResponse::setResponseTime(const QDateTime &response_time) {
    m_response_time = response_time;
    m_response_time_isSet = true;
}

bool OAIPulseResponse::is_response_time_Set() const{
    return m_response_time_isSet;
}

bool OAIPulseResponse::is_response_time_Valid() const{
    return m_response_time_isValid;
}

bool OAIPulseResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_learner_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_learner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_learner_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pulse_base_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pulse_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pulse_question_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pulse_run_duration_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pulse_run_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pulse_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPulseResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
