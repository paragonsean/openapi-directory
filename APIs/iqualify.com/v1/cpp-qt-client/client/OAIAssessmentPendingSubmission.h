/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAssessmentPendingSubmission.h
 *
 * 
 */

#ifndef OAIAssessmentPendingSubmission_H
#define OAIAssessmentPendingSubmission_H

#include <QJsonObject>

#include "OAIDocument.h"
#include "OAIThemeResponse.h"
#include "OAIUser.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDocument;
class OAIThemeResponse;
class OAIUser;

class OAIAssessmentPendingSubmission : public OAIObject {
public:
    OAIAssessmentPendingSubmission();
    OAIAssessmentPendingSubmission(QString json);
    ~OAIAssessmentPendingSubmission() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getContent() const;
    void setContent(const QString &content);
    bool is_content_Set() const;
    bool is_content_Valid() const;

    QList<OAIDocument> getDocuments() const;
    void setDocuments(const QList<OAIDocument> &documents);
    bool is_documents_Set() const;
    bool is_documents_Valid() const;

    QDateTime getDueDate() const;
    void setDueDate(const QDateTime &due_date);
    bool is_due_date_Set() const;
    bool is_due_date_Valid() const;

    qint32 getDurationMinutes() const;
    void setDurationMinutes(const qint32 &duration_minutes);
    bool is_duration_minutes_Set() const;
    bool is_duration_minutes_Valid() const;

    QString getFilename() const;
    void setFilename(const QString &filename);
    bool is_filename_Set() const;
    bool is_filename_Valid() const;

    bool isHidden() const;
    void setHidden(const bool &hidden);
    bool is_hidden_Set() const;
    bool is_hidden_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getMarkNumber() const;
    void setMarkNumber(const QString &mark_number);
    bool is_mark_number_Set() const;
    bool is_mark_number_Valid() const;

    QString getMarkType() const;
    void setMarkType(const QString &mark_type);
    bool is_mark_type_Set() const;
    bool is_mark_type_Valid() const;

    qint32 getMaxAttempts() const;
    void setMaxAttempts(const qint32 &max_attempts);
    bool is_max_attempts_Set() const;
    bool is_max_attempts_Valid() const;

    QString getOfferingId() const;
    void setOfferingId(const QString &offering_id);
    bool is_offering_id_Set() const;
    bool is_offering_id_Valid() const;

    QString getOfferingName() const;
    void setOfferingName(const QString &offering_name);
    bool is_offering_name_Set() const;
    bool is_offering_name_Valid() const;

    QDateTime getOpenDate() const;
    void setOpenDate(const QDateTime &open_date);
    bool is_open_date_Set() const;
    bool is_open_date_Valid() const;

    QString getPid() const;
    void setPid(const QString &pid);
    bool is_pid_Set() const;
    bool is_pid_Valid() const;

    QString getPoints() const;
    void setPoints(const QString &points);
    bool is_points_Set() const;
    bool is_points_Valid() const;

    QList<OAIThemeResponse> getThemes() const;
    void setThemes(const QList<OAIThemeResponse> &themes);
    bool is_themes_Set() const;
    bool is_themes_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    qint32 getTotalQuestions() const;
    void setTotalQuestions(const qint32 &total_questions);
    bool is_total_questions_Set() const;
    bool is_total_questions_Valid() const;

    qint32 getTotalThemes() const;
    void setTotalThemes(const qint32 &total_themes);
    bool is_total_themes_Set() const;
    bool is_total_themes_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QList<OAIUser> getUsers() const;
    void setUsers(const QList<OAIUser> &users);
    bool is_users_Set() const;
    bool is_users_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_content;
    bool m_content_isSet;
    bool m_content_isValid;

    QList<OAIDocument> m_documents;
    bool m_documents_isSet;
    bool m_documents_isValid;

    QDateTime m_due_date;
    bool m_due_date_isSet;
    bool m_due_date_isValid;

    qint32 m_duration_minutes;
    bool m_duration_minutes_isSet;
    bool m_duration_minutes_isValid;

    QString m_filename;
    bool m_filename_isSet;
    bool m_filename_isValid;

    bool m_hidden;
    bool m_hidden_isSet;
    bool m_hidden_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_mark_number;
    bool m_mark_number_isSet;
    bool m_mark_number_isValid;

    QString m_mark_type;
    bool m_mark_type_isSet;
    bool m_mark_type_isValid;

    qint32 m_max_attempts;
    bool m_max_attempts_isSet;
    bool m_max_attempts_isValid;

    QString m_offering_id;
    bool m_offering_id_isSet;
    bool m_offering_id_isValid;

    QString m_offering_name;
    bool m_offering_name_isSet;
    bool m_offering_name_isValid;

    QDateTime m_open_date;
    bool m_open_date_isSet;
    bool m_open_date_isValid;

    QString m_pid;
    bool m_pid_isSet;
    bool m_pid_isValid;

    QString m_points;
    bool m_points_isSet;
    bool m_points_isValid;

    QList<OAIThemeResponse> m_themes;
    bool m_themes_isSet;
    bool m_themes_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    qint32 m_total_questions;
    bool m_total_questions_isSet;
    bool m_total_questions_isValid;

    qint32 m_total_themes;
    bool m_total_themes_isSet;
    bool m_total_themes_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QList<OAIUser> m_users;
    bool m_users_isSet;
    bool m_users_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAssessmentPendingSubmission)

#endif // OAIAssessmentPendingSubmission_H
