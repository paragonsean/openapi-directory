/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivityAttemptOpenResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivityAttemptOpenResponse::OAIActivityAttemptOpenResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivityAttemptOpenResponse::OAIActivityAttemptOpenResponse() {
    this->initializeModel();
}

OAIActivityAttemptOpenResponse::~OAIActivityAttemptOpenResponse() {}

void OAIActivityAttemptOpenResponse::initializeModel() {

    m_activity_id_isSet = false;
    m_activity_id_isValid = false;

    m_activity_type_isSet = false;
    m_activity_type_isValid = false;

    m_feedback_isSet = false;
    m_feedback_isValid = false;

    m_learner_email_isSet = false;
    m_learner_email_isValid = false;

    m_offering_id_isSet = false;
    m_offering_id_isValid = false;

    m_response_text_isSet = false;
    m_response_text_isValid = false;

    m_uploaded_files_isSet = false;
    m_uploaded_files_isValid = false;
}

void OAIActivityAttemptOpenResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivityAttemptOpenResponse::fromJsonObject(QJsonObject json) {

    m_activity_id_isValid = ::OpenAPI::fromJsonValue(m_activity_id, json[QString("activityId")]);
    m_activity_id_isSet = !json[QString("activityId")].isNull() && m_activity_id_isValid;

    m_activity_type_isValid = ::OpenAPI::fromJsonValue(m_activity_type, json[QString("activityType")]);
    m_activity_type_isSet = !json[QString("activityType")].isNull() && m_activity_type_isValid;

    m_feedback_isValid = ::OpenAPI::fromJsonValue(m_feedback, json[QString("feedback")]);
    m_feedback_isSet = !json[QString("feedback")].isNull() && m_feedback_isValid;

    m_learner_email_isValid = ::OpenAPI::fromJsonValue(m_learner_email, json[QString("learnerEmail")]);
    m_learner_email_isSet = !json[QString("learnerEmail")].isNull() && m_learner_email_isValid;

    m_offering_id_isValid = ::OpenAPI::fromJsonValue(m_offering_id, json[QString("offeringId")]);
    m_offering_id_isSet = !json[QString("offeringId")].isNull() && m_offering_id_isValid;

    m_response_text_isValid = ::OpenAPI::fromJsonValue(m_response_text, json[QString("responseText")]);
    m_response_text_isSet = !json[QString("responseText")].isNull() && m_response_text_isValid;

    m_uploaded_files_isValid = ::OpenAPI::fromJsonValue(m_uploaded_files, json[QString("uploadedFiles")]);
    m_uploaded_files_isSet = !json[QString("uploadedFiles")].isNull() && m_uploaded_files_isValid;
}

QString OAIActivityAttemptOpenResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivityAttemptOpenResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_id_isSet) {
        obj.insert(QString("activityId"), ::OpenAPI::toJsonValue(m_activity_id));
    }
    if (m_activity_type_isSet) {
        obj.insert(QString("activityType"), ::OpenAPI::toJsonValue(m_activity_type));
    }
    if (m_feedback.isSet()) {
        obj.insert(QString("feedback"), ::OpenAPI::toJsonValue(m_feedback));
    }
    if (m_learner_email_isSet) {
        obj.insert(QString("learnerEmail"), ::OpenAPI::toJsonValue(m_learner_email));
    }
    if (m_offering_id_isSet) {
        obj.insert(QString("offeringId"), ::OpenAPI::toJsonValue(m_offering_id));
    }
    if (m_response_text_isSet) {
        obj.insert(QString("responseText"), ::OpenAPI::toJsonValue(m_response_text));
    }
    if (m_uploaded_files.isSet()) {
        obj.insert(QString("uploadedFiles"), ::OpenAPI::toJsonValue(m_uploaded_files));
    }
    return obj;
}

QString OAIActivityAttemptOpenResponse::getActivityId() const {
    return m_activity_id;
}
void OAIActivityAttemptOpenResponse::setActivityId(const QString &activity_id) {
    m_activity_id = activity_id;
    m_activity_id_isSet = true;
}

bool OAIActivityAttemptOpenResponse::is_activity_id_Set() const{
    return m_activity_id_isSet;
}

bool OAIActivityAttemptOpenResponse::is_activity_id_Valid() const{
    return m_activity_id_isValid;
}

QString OAIActivityAttemptOpenResponse::getActivityType() const {
    return m_activity_type;
}
void OAIActivityAttemptOpenResponse::setActivityType(const QString &activity_type) {
    m_activity_type = activity_type;
    m_activity_type_isSet = true;
}

bool OAIActivityAttemptOpenResponse::is_activity_type_Set() const{
    return m_activity_type_isSet;
}

bool OAIActivityAttemptOpenResponse::is_activity_type_Valid() const{
    return m_activity_type_isValid;
}

OAIActivityAttemptOpenResponseFeedback OAIActivityAttemptOpenResponse::getFeedback() const {
    return m_feedback;
}
void OAIActivityAttemptOpenResponse::setFeedback(const OAIActivityAttemptOpenResponseFeedback &feedback) {
    m_feedback = feedback;
    m_feedback_isSet = true;
}

bool OAIActivityAttemptOpenResponse::is_feedback_Set() const{
    return m_feedback_isSet;
}

bool OAIActivityAttemptOpenResponse::is_feedback_Valid() const{
    return m_feedback_isValid;
}

QString OAIActivityAttemptOpenResponse::getLearnerEmail() const {
    return m_learner_email;
}
void OAIActivityAttemptOpenResponse::setLearnerEmail(const QString &learner_email) {
    m_learner_email = learner_email;
    m_learner_email_isSet = true;
}

bool OAIActivityAttemptOpenResponse::is_learner_email_Set() const{
    return m_learner_email_isSet;
}

bool OAIActivityAttemptOpenResponse::is_learner_email_Valid() const{
    return m_learner_email_isValid;
}

QString OAIActivityAttemptOpenResponse::getOfferingId() const {
    return m_offering_id;
}
void OAIActivityAttemptOpenResponse::setOfferingId(const QString &offering_id) {
    m_offering_id = offering_id;
    m_offering_id_isSet = true;
}

bool OAIActivityAttemptOpenResponse::is_offering_id_Set() const{
    return m_offering_id_isSet;
}

bool OAIActivityAttemptOpenResponse::is_offering_id_Valid() const{
    return m_offering_id_isValid;
}

QString OAIActivityAttemptOpenResponse::getResponseText() const {
    return m_response_text;
}
void OAIActivityAttemptOpenResponse::setResponseText(const QString &response_text) {
    m_response_text = response_text;
    m_response_text_isSet = true;
}

bool OAIActivityAttemptOpenResponse::is_response_text_Set() const{
    return m_response_text_isSet;
}

bool OAIActivityAttemptOpenResponse::is_response_text_Valid() const{
    return m_response_text_isValid;
}

OAIActivityAttemptOpenResponseFiles OAIActivityAttemptOpenResponse::getUploadedFiles() const {
    return m_uploaded_files;
}
void OAIActivityAttemptOpenResponse::setUploadedFiles(const OAIActivityAttemptOpenResponseFiles &uploaded_files) {
    m_uploaded_files = uploaded_files;
    m_uploaded_files_isSet = true;
}

bool OAIActivityAttemptOpenResponse::is_uploaded_files_Set() const{
    return m_uploaded_files_isSet;
}

bool OAIActivityAttemptOpenResponse::is_uploaded_files_Valid() const{
    return m_uploaded_files_isValid;
}

bool OAIActivityAttemptOpenResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feedback.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_learner_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offering_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploaded_files.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivityAttemptOpenResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
