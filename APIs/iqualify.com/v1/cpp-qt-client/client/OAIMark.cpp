/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMark.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMark::OAIMark(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMark::OAIMark() {
    this->initializeModel();
}

OAIMark::~OAIMark() {}

void OAIMark::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_feedback_isSet = false;
    m_feedback_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mark_isSet = false;
    m_mark_isValid = false;

    m_mark_feedback_isSet = false;
    m_mark_feedback_isValid = false;

    m_marked_by_isSet = false;
    m_marked_by_isValid = false;

    m_marker_id_isSet = false;
    m_marker_id_isValid = false;
}

void OAIMark::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMark::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_feedback_isValid = ::OpenAPI::fromJsonValue(m_feedback, json[QString("feedback")]);
    m_feedback_isSet = !json[QString("feedback")].isNull() && m_feedback_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mark_isValid = ::OpenAPI::fromJsonValue(m_mark, json[QString("mark")]);
    m_mark_isSet = !json[QString("mark")].isNull() && m_mark_isValid;

    m_mark_feedback_isValid = ::OpenAPI::fromJsonValue(m_mark_feedback, json[QString("markFeedback")]);
    m_mark_feedback_isSet = !json[QString("markFeedback")].isNull() && m_mark_feedback_isValid;

    m_marked_by_isValid = ::OpenAPI::fromJsonValue(m_marked_by, json[QString("markedBy")]);
    m_marked_by_isSet = !json[QString("markedBy")].isNull() && m_marked_by_isValid;

    m_marker_id_isValid = ::OpenAPI::fromJsonValue(m_marker_id, json[QString("markerId")]);
    m_marker_id_isSet = !json[QString("markerId")].isNull() && m_marker_id_isValid;
}

QString OAIMark::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMark::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_feedback_isSet) {
        obj.insert(QString("feedback"), ::OpenAPI::toJsonValue(m_feedback));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mark_isSet) {
        obj.insert(QString("mark"), ::OpenAPI::toJsonValue(m_mark));
    }
    if (m_mark_feedback.size() > 0) {
        obj.insert(QString("markFeedback"), ::OpenAPI::toJsonValue(m_mark_feedback));
    }
    if (m_marked_by_isSet) {
        obj.insert(QString("markedBy"), ::OpenAPI::toJsonValue(m_marked_by));
    }
    if (m_marker_id_isSet) {
        obj.insert(QString("markerId"), ::OpenAPI::toJsonValue(m_marker_id));
    }
    return obj;
}

QDateTime OAIMark::getCreatedAt() const {
    return m_created_at;
}
void OAIMark::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIMark::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIMark::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIMark::getFeedback() const {
    return m_feedback;
}
void OAIMark::setFeedback(const QString &feedback) {
    m_feedback = feedback;
    m_feedback_isSet = true;
}

bool OAIMark::is_feedback_Set() const{
    return m_feedback_isSet;
}

bool OAIMark::is_feedback_Valid() const{
    return m_feedback_isValid;
}

QString OAIMark::getId() const {
    return m_id;
}
void OAIMark::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMark::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMark::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMark::getMark() const {
    return m_mark;
}
void OAIMark::setMark(const QString &mark) {
    m_mark = mark;
    m_mark_isSet = true;
}

bool OAIMark::is_mark_Set() const{
    return m_mark_isSet;
}

bool OAIMark::is_mark_Valid() const{
    return m_mark_isValid;
}

QList<OAIMarkFeedback> OAIMark::getMarkFeedback() const {
    return m_mark_feedback;
}
void OAIMark::setMarkFeedback(const QList<OAIMarkFeedback> &mark_feedback) {
    m_mark_feedback = mark_feedback;
    m_mark_feedback_isSet = true;
}

bool OAIMark::is_mark_feedback_Set() const{
    return m_mark_feedback_isSet;
}

bool OAIMark::is_mark_feedback_Valid() const{
    return m_mark_feedback_isValid;
}

QString OAIMark::getMarkedBy() const {
    return m_marked_by;
}
void OAIMark::setMarkedBy(const QString &marked_by) {
    m_marked_by = marked_by;
    m_marked_by_isSet = true;
}

bool OAIMark::is_marked_by_Set() const{
    return m_marked_by_isSet;
}

bool OAIMark::is_marked_by_Valid() const{
    return m_marked_by_isValid;
}

QString OAIMark::getMarkerId() const {
    return m_marker_id;
}
void OAIMark::setMarkerId(const QString &marker_id) {
    m_marker_id = marker_id;
    m_marker_id_isSet = true;
}

bool OAIMark::is_marker_id_Set() const{
    return m_marker_id_isSet;
}

bool OAIMark::is_marker_id_Valid() const{
    return m_marker_id_isValid;
}

bool OAIMark::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feedback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mark_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mark_feedback.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_marked_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marker_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMark::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
