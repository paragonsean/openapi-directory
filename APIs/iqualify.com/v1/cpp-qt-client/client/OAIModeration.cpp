/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModeration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModeration::OAIModeration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModeration::OAIModeration() {
    this->initializeModel();
}

OAIModeration::~OAIModeration() {}

void OAIModeration::initializeModel() {

    m_is_muted_isSet = false;
    m_is_muted_isValid = false;

    m_moderator_isSet = false;
    m_moderator_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAIModeration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModeration::fromJsonObject(QJsonObject json) {

    m_is_muted_isValid = ::OpenAPI::fromJsonValue(m_is_muted, json[QString("isMuted")]);
    m_is_muted_isSet = !json[QString("isMuted")].isNull() && m_is_muted_isValid;

    m_moderator_isValid = ::OpenAPI::fromJsonValue(m_moderator, json[QString("moderator")]);
    m_moderator_isSet = !json[QString("moderator")].isNull() && m_moderator_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;
}

QString OAIModeration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModeration::asJsonObject() const {
    QJsonObject obj;
    if (m_is_muted_isSet) {
        obj.insert(QString("isMuted"), ::OpenAPI::toJsonValue(m_is_muted));
    }
    if (m_moderator.isSet()) {
        obj.insert(QString("moderator"), ::OpenAPI::toJsonValue(m_moderator));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    return obj;
}

bool OAIModeration::isIsMuted() const {
    return m_is_muted;
}
void OAIModeration::setIsMuted(const bool &is_muted) {
    m_is_muted = is_muted;
    m_is_muted_isSet = true;
}

bool OAIModeration::is_is_muted_Set() const{
    return m_is_muted_isSet;
}

bool OAIModeration::is_is_muted_Valid() const{
    return m_is_muted_isValid;
}

OAIModerator OAIModeration::getModerator() const {
    return m_moderator;
}
void OAIModeration::setModerator(const OAIModerator &moderator) {
    m_moderator = moderator;
    m_moderator_isSet = true;
}

bool OAIModeration::is_moderator_Set() const{
    return m_moderator_isSet;
}

bool OAIModeration::is_moderator_Valid() const{
    return m_moderator_isValid;
}

QString OAIModeration::getReason() const {
    return m_reason;
}
void OAIModeration::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIModeration::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIModeration::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAIModeration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_muted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moderator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModeration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
