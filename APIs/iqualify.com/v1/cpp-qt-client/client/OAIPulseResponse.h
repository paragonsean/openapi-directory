/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPulseResponse.h
 *
 * 
 */

#ifndef OAIPulseResponse_H
#define OAIPulseResponse_H

#include <QJsonObject>

#include "OAIPulseAnswer.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPulseAnswer;

class OAIPulseResponse : public OAIObject {
public:
    OAIPulseResponse();
    OAIPulseResponse(QString json);
    ~OAIPulseResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLearnerFirstName() const;
    void setLearnerFirstName(const QString &learner_first_name);
    bool is_learner_first_name_Set() const;
    bool is_learner_first_name_Valid() const;

    QString getLearnerId() const;
    void setLearnerId(const QString &learner_id);
    bool is_learner_id_Set() const;
    bool is_learner_id_Valid() const;

    QString getLearnerLastName() const;
    void setLearnerLastName(const QString &learner_last_name);
    bool is_learner_last_name_Set() const;
    bool is_learner_last_name_Valid() const;

    QString getPulseBaseId() const;
    void setPulseBaseId(const QString &pulse_base_id);
    bool is_pulse_base_id_Set() const;
    bool is_pulse_base_id_Valid() const;

    QString getPulseInstanceId() const;
    void setPulseInstanceId(const QString &pulse_instance_id);
    bool is_pulse_instance_id_Set() const;
    bool is_pulse_instance_id_Valid() const;

    QString getPulseQuestion() const;
    void setPulseQuestion(const QString &pulse_question);
    bool is_pulse_question_Set() const;
    bool is_pulse_question_Valid() const;

    qint32 getPulseRunDurationMinutes() const;
    void setPulseRunDurationMinutes(const qint32 &pulse_run_duration_minutes);
    bool is_pulse_run_duration_minutes_Set() const;
    bool is_pulse_run_duration_minutes_Valid() const;

    QDateTime getPulseRunStart() const;
    void setPulseRunStart(const QDateTime &pulse_run_start);
    bool is_pulse_run_start_Set() const;
    bool is_pulse_run_start_Valid() const;

    QString getPulseType() const;
    void setPulseType(const QString &pulse_type);
    bool is_pulse_type_Set() const;
    bool is_pulse_type_Valid() const;

    OAIPulseAnswer getResponse() const;
    void setResponse(const OAIPulseAnswer &response);
    bool is_response_Set() const;
    bool is_response_Valid() const;

    QDateTime getResponseTime() const;
    void setResponseTime(const QDateTime &response_time);
    bool is_response_time_Set() const;
    bool is_response_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_learner_first_name;
    bool m_learner_first_name_isSet;
    bool m_learner_first_name_isValid;

    QString m_learner_id;
    bool m_learner_id_isSet;
    bool m_learner_id_isValid;

    QString m_learner_last_name;
    bool m_learner_last_name_isSet;
    bool m_learner_last_name_isValid;

    QString m_pulse_base_id;
    bool m_pulse_base_id_isSet;
    bool m_pulse_base_id_isValid;

    QString m_pulse_instance_id;
    bool m_pulse_instance_id_isSet;
    bool m_pulse_instance_id_isValid;

    QString m_pulse_question;
    bool m_pulse_question_isSet;
    bool m_pulse_question_isValid;

    qint32 m_pulse_run_duration_minutes;
    bool m_pulse_run_duration_minutes_isSet;
    bool m_pulse_run_duration_minutes_isValid;

    QDateTime m_pulse_run_start;
    bool m_pulse_run_start_isSet;
    bool m_pulse_run_start_isValid;

    QString m_pulse_type;
    bool m_pulse_type_isSet;
    bool m_pulse_type_isValid;

    OAIPulseAnswer m_response;
    bool m_response_isSet;
    bool m_response_isValid;

    QDateTime m_response_time;
    bool m_response_time_isSet;
    bool m_response_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPulseResponse)

#endif // OAIPulseResponse_H
