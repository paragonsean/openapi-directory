/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBadgeExpiry.h
 *
 * 
 */

#ifndef OAIBadgeExpiry_H
#define OAIBadgeExpiry_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBadgeExpiry : public OAIObject {
public:
    OAIBadgeExpiry();
    OAIBadgeExpiry(QString json);
    ~OAIBadgeExpiry() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getExpirationDate() const;
    void setExpirationDate(const QDateTime &expiration_date);
    bool is_expiration_date_Set() const;
    bool is_expiration_date_Valid() const;

    bool isExpires() const;
    void setExpires(const bool &expires);
    bool is_expires_Set() const;
    bool is_expires_Valid() const;

    QString getExpiryType() const;
    void setExpiryType(const QString &expiry_type);
    bool is_expiry_type_Set() const;
    bool is_expiry_type_Valid() const;

    double getTimeframeAmount() const;
    void setTimeframeAmount(const double &timeframe_amount);
    bool is_timeframe_amount_Set() const;
    bool is_timeframe_amount_Valid() const;

    QString getTimeframeUnit() const;
    void setTimeframeUnit(const QString &timeframe_unit);
    bool is_timeframe_unit_Set() const;
    bool is_timeframe_unit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_expiration_date;
    bool m_expiration_date_isSet;
    bool m_expiration_date_isValid;

    bool m_expires;
    bool m_expires_isSet;
    bool m_expires_isValid;

    QString m_expiry_type;
    bool m_expiry_type_isSet;
    bool m_expiry_type_isValid;

    double m_timeframe_amount;
    bool m_timeframe_amount_isSet;
    bool m_timeframe_amount_isValid;

    QString m_timeframe_unit;
    bool m_timeframe_unit_isSet;
    bool m_timeframe_unit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBadgeExpiry)

#endif // OAIBadgeExpiry_H
