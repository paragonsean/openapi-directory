/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOfferingsApi_H
#define OAI_OAIOfferingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIOffering.h"
#include "OAIOfferingMetadataResponse.h"
#include "OAIOfferingRequired.h"
#include "OAIPortfolioActivations.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOfferingsApi : public QObject {
    Q_OBJECT

public:
    OAIOfferingsApi(const int timeOut = 0);
    ~OAIOfferingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void offeringsCurrentGet();


    virtual void offeringsFutureGet();


    virtual void offeringsGet();

    /**
    * @param[in]  text_pattern QString [required]
    */
    virtual void offeringsInfoTextPatternGet(const QString &text_pattern);

    /**
    * @param[in]  offering_id QString [required]
    */
    virtual void offeringsOfferingIdGet(const QString &offering_id);

    /**
    * @param[in]  offering_id QString [required]
    * @param[in]  oai_offering OAIOffering [required]
    */
    virtual void offeringsOfferingIdPatch(const QString &offering_id, const OAIOffering &oai_offering);


    virtual void offeringsPastGet();

    /**
    * @param[in]  oai_offering_required OAIOfferingRequired [required]
    */
    virtual void offeringsPost(const OAIOfferingRequired &oai_offering_required);

    /**
    * @param[in]  top QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void offeringsSummaryGet(const ::OpenAPI::OptionalParam<QString> &top = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void offeringsCurrentGetCallback(OAIHttpRequestWorker *worker);
    void offeringsFutureGetCallback(OAIHttpRequestWorker *worker);
    void offeringsGetCallback(OAIHttpRequestWorker *worker);
    void offeringsInfoTextPatternGetCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdGetCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdPatchCallback(OAIHttpRequestWorker *worker);
    void offeringsPastGetCallback(OAIHttpRequestWorker *worker);
    void offeringsPostCallback(OAIHttpRequestWorker *worker);
    void offeringsSummaryGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void offeringsCurrentGetSignal(QList<OAIOfferingMetadataResponse> summary);
    void offeringsFutureGetSignal(QList<OAIOfferingMetadataResponse> summary);
    void offeringsGetSignal(QList<OAIOfferingMetadataResponse> summary);
    void offeringsInfoTextPatternGetSignal(QList<OAIPortfolioActivations> summary);
    void offeringsOfferingIdGetSignal(OAIOfferingMetadataResponse summary);
    void offeringsOfferingIdPatchSignal(OAIOfferingMetadataResponse summary);
    void offeringsPastGetSignal(QList<OAIOfferingMetadataResponse> summary);
    void offeringsPostSignal(OAIOfferingMetadataResponse summary);
    void offeringsSummaryGetSignal(QList<OAIPortfolioActivations> summary);


    void offeringsCurrentGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIOfferingMetadataResponse> summary);
    void offeringsFutureGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIOfferingMetadataResponse> summary);
    void offeringsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIOfferingMetadataResponse> summary);
    void offeringsInfoTextPatternGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIPortfolioActivations> summary);
    void offeringsOfferingIdGetSignalFull(OAIHttpRequestWorker *worker, OAIOfferingMetadataResponse summary);
    void offeringsOfferingIdPatchSignalFull(OAIHttpRequestWorker *worker, OAIOfferingMetadataResponse summary);
    void offeringsPastGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIOfferingMetadataResponse> summary);
    void offeringsPostSignalFull(OAIHttpRequestWorker *worker, OAIOfferingMetadataResponse summary);
    void offeringsSummaryGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIPortfolioActivations> summary);

    Q_DECL_DEPRECATED_X("Use offeringsCurrentGetSignalError() instead")
    void offeringsCurrentGetSignalE(QList<OAIOfferingMetadataResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsCurrentGetSignalError(QList<OAIOfferingMetadataResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsFutureGetSignalError() instead")
    void offeringsFutureGetSignalE(QList<OAIOfferingMetadataResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsFutureGetSignalError(QList<OAIOfferingMetadataResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsGetSignalError() instead")
    void offeringsGetSignalE(QList<OAIOfferingMetadataResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsGetSignalError(QList<OAIOfferingMetadataResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsInfoTextPatternGetSignalError() instead")
    void offeringsInfoTextPatternGetSignalE(QList<OAIPortfolioActivations> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsInfoTextPatternGetSignalError(QList<OAIPortfolioActivations> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdGetSignalError() instead")
    void offeringsOfferingIdGetSignalE(OAIOfferingMetadataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdGetSignalError(OAIOfferingMetadataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdPatchSignalError() instead")
    void offeringsOfferingIdPatchSignalE(OAIOfferingMetadataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdPatchSignalError(OAIOfferingMetadataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsPastGetSignalError() instead")
    void offeringsPastGetSignalE(QList<OAIOfferingMetadataResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsPastGetSignalError(QList<OAIOfferingMetadataResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsPostSignalError() instead")
    void offeringsPostSignalE(OAIOfferingMetadataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsPostSignalError(OAIOfferingMetadataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsSummaryGetSignalError() instead")
    void offeringsSummaryGetSignalE(QList<OAIPortfolioActivations> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsSummaryGetSignalError(QList<OAIPortfolioActivations> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use offeringsCurrentGetSignalErrorFull() instead")
    void offeringsCurrentGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsCurrentGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsFutureGetSignalErrorFull() instead")
    void offeringsFutureGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsFutureGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsGetSignalErrorFull() instead")
    void offeringsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsInfoTextPatternGetSignalErrorFull() instead")
    void offeringsInfoTextPatternGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsInfoTextPatternGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdGetSignalErrorFull() instead")
    void offeringsOfferingIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdPatchSignalErrorFull() instead")
    void offeringsOfferingIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsPastGetSignalErrorFull() instead")
    void offeringsPastGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsPastGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsPostSignalErrorFull() instead")
    void offeringsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsSummaryGetSignalErrorFull() instead")
    void offeringsSummaryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsSummaryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
