/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubmissionMarkResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubmissionMarkResponse::OAISubmissionMarkResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubmissionMarkResponse::OAISubmissionMarkResponse() {
    this->initializeModel();
}

OAISubmissionMarkResponse::~OAISubmissionMarkResponse() {}

void OAISubmissionMarkResponse::initializeModel() {

    m_assessment_id_isSet = false;
    m_assessment_id_isValid = false;

    m_assessment_item_details_isSet = false;
    m_assessment_item_details_isValid = false;

    m_assessment_item_name_isSet = false;
    m_assessment_item_name_isValid = false;

    m_course_name_isSet = false;
    m_course_name_isValid = false;

    m_files_isSet = false;
    m_files_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_learner_email_isSet = false;
    m_learner_email_isValid = false;

    m_learner_first_name_isSet = false;
    m_learner_first_name_isValid = false;

    m_learner_last_name_isSet = false;
    m_learner_last_name_isValid = false;

    m_learner_person_id_isSet = false;
    m_learner_person_id_isValid = false;

    m_marks_isSet = false;
    m_marks_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_submission_date_time_isSet = false;
    m_submission_date_time_isValid = false;
}

void OAISubmissionMarkResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubmissionMarkResponse::fromJsonObject(QJsonObject json) {

    m_assessment_id_isValid = ::OpenAPI::fromJsonValue(m_assessment_id, json[QString("assessmentId")]);
    m_assessment_id_isSet = !json[QString("assessmentId")].isNull() && m_assessment_id_isValid;

    m_assessment_item_details_isValid = ::OpenAPI::fromJsonValue(m_assessment_item_details, json[QString("assessmentItemDetails")]);
    m_assessment_item_details_isSet = !json[QString("assessmentItemDetails")].isNull() && m_assessment_item_details_isValid;

    m_assessment_item_name_isValid = ::OpenAPI::fromJsonValue(m_assessment_item_name, json[QString("assessmentItemName")]);
    m_assessment_item_name_isSet = !json[QString("assessmentItemName")].isNull() && m_assessment_item_name_isValid;

    m_course_name_isValid = ::OpenAPI::fromJsonValue(m_course_name, json[QString("courseName")]);
    m_course_name_isSet = !json[QString("courseName")].isNull() && m_course_name_isValid;

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_learner_email_isValid = ::OpenAPI::fromJsonValue(m_learner_email, json[QString("learnerEmail")]);
    m_learner_email_isSet = !json[QString("learnerEmail")].isNull() && m_learner_email_isValid;

    m_learner_first_name_isValid = ::OpenAPI::fromJsonValue(m_learner_first_name, json[QString("learnerFirstName")]);
    m_learner_first_name_isSet = !json[QString("learnerFirstName")].isNull() && m_learner_first_name_isValid;

    m_learner_last_name_isValid = ::OpenAPI::fromJsonValue(m_learner_last_name, json[QString("learnerLastName")]);
    m_learner_last_name_isSet = !json[QString("learnerLastName")].isNull() && m_learner_last_name_isValid;

    m_learner_person_id_isValid = ::OpenAPI::fromJsonValue(m_learner_person_id, json[QString("learnerPersonId")]);
    m_learner_person_id_isSet = !json[QString("learnerPersonId")].isNull() && m_learner_person_id_isValid;

    m_marks_isValid = ::OpenAPI::fromJsonValue(m_marks, json[QString("marks")]);
    m_marks_isSet = !json[QString("marks")].isNull() && m_marks_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_submission_date_time_isValid = ::OpenAPI::fromJsonValue(m_submission_date_time, json[QString("submissionDateTime")]);
    m_submission_date_time_isSet = !json[QString("submissionDateTime")].isNull() && m_submission_date_time_isValid;
}

QString OAISubmissionMarkResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubmissionMarkResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_assessment_id_isSet) {
        obj.insert(QString("assessmentId"), ::OpenAPI::toJsonValue(m_assessment_id));
    }
    if (m_assessment_item_details_isSet) {
        obj.insert(QString("assessmentItemDetails"), ::OpenAPI::toJsonValue(m_assessment_item_details));
    }
    if (m_assessment_item_name_isSet) {
        obj.insert(QString("assessmentItemName"), ::OpenAPI::toJsonValue(m_assessment_item_name));
    }
    if (m_course_name_isSet) {
        obj.insert(QString("courseName"), ::OpenAPI::toJsonValue(m_course_name));
    }
    if (m_files.size() > 0) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_html_isSet) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_learner_email_isSet) {
        obj.insert(QString("learnerEmail"), ::OpenAPI::toJsonValue(m_learner_email));
    }
    if (m_learner_first_name_isSet) {
        obj.insert(QString("learnerFirstName"), ::OpenAPI::toJsonValue(m_learner_first_name));
    }
    if (m_learner_last_name_isSet) {
        obj.insert(QString("learnerLastName"), ::OpenAPI::toJsonValue(m_learner_last_name));
    }
    if (m_learner_person_id_isSet) {
        obj.insert(QString("learnerPersonId"), ::OpenAPI::toJsonValue(m_learner_person_id));
    }
    if (m_marks.size() > 0) {
        obj.insert(QString("marks"), ::OpenAPI::toJsonValue(m_marks));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_submission_date_time_isSet) {
        obj.insert(QString("submissionDateTime"), ::OpenAPI::toJsonValue(m_submission_date_time));
    }
    return obj;
}

QString OAISubmissionMarkResponse::getAssessmentId() const {
    return m_assessment_id;
}
void OAISubmissionMarkResponse::setAssessmentId(const QString &assessment_id) {
    m_assessment_id = assessment_id;
    m_assessment_id_isSet = true;
}

bool OAISubmissionMarkResponse::is_assessment_id_Set() const{
    return m_assessment_id_isSet;
}

bool OAISubmissionMarkResponse::is_assessment_id_Valid() const{
    return m_assessment_id_isValid;
}

QString OAISubmissionMarkResponse::getAssessmentItemDetails() const {
    return m_assessment_item_details;
}
void OAISubmissionMarkResponse::setAssessmentItemDetails(const QString &assessment_item_details) {
    m_assessment_item_details = assessment_item_details;
    m_assessment_item_details_isSet = true;
}

bool OAISubmissionMarkResponse::is_assessment_item_details_Set() const{
    return m_assessment_item_details_isSet;
}

bool OAISubmissionMarkResponse::is_assessment_item_details_Valid() const{
    return m_assessment_item_details_isValid;
}

QString OAISubmissionMarkResponse::getAssessmentItemName() const {
    return m_assessment_item_name;
}
void OAISubmissionMarkResponse::setAssessmentItemName(const QString &assessment_item_name) {
    m_assessment_item_name = assessment_item_name;
    m_assessment_item_name_isSet = true;
}

bool OAISubmissionMarkResponse::is_assessment_item_name_Set() const{
    return m_assessment_item_name_isSet;
}

bool OAISubmissionMarkResponse::is_assessment_item_name_Valid() const{
    return m_assessment_item_name_isValid;
}

QString OAISubmissionMarkResponse::getCourseName() const {
    return m_course_name;
}
void OAISubmissionMarkResponse::setCourseName(const QString &course_name) {
    m_course_name = course_name;
    m_course_name_isSet = true;
}

bool OAISubmissionMarkResponse::is_course_name_Set() const{
    return m_course_name_isSet;
}

bool OAISubmissionMarkResponse::is_course_name_Valid() const{
    return m_course_name_isValid;
}

QList<OAIDocument> OAISubmissionMarkResponse::getFiles() const {
    return m_files;
}
void OAISubmissionMarkResponse::setFiles(const QList<OAIDocument> &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAISubmissionMarkResponse::is_files_Set() const{
    return m_files_isSet;
}

bool OAISubmissionMarkResponse::is_files_Valid() const{
    return m_files_isValid;
}

QString OAISubmissionMarkResponse::getHtml() const {
    return m_html;
}
void OAISubmissionMarkResponse::setHtml(const QString &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAISubmissionMarkResponse::is_html_Set() const{
    return m_html_isSet;
}

bool OAISubmissionMarkResponse::is_html_Valid() const{
    return m_html_isValid;
}

QString OAISubmissionMarkResponse::getLearnerEmail() const {
    return m_learner_email;
}
void OAISubmissionMarkResponse::setLearnerEmail(const QString &learner_email) {
    m_learner_email = learner_email;
    m_learner_email_isSet = true;
}

bool OAISubmissionMarkResponse::is_learner_email_Set() const{
    return m_learner_email_isSet;
}

bool OAISubmissionMarkResponse::is_learner_email_Valid() const{
    return m_learner_email_isValid;
}

QString OAISubmissionMarkResponse::getLearnerFirstName() const {
    return m_learner_first_name;
}
void OAISubmissionMarkResponse::setLearnerFirstName(const QString &learner_first_name) {
    m_learner_first_name = learner_first_name;
    m_learner_first_name_isSet = true;
}

bool OAISubmissionMarkResponse::is_learner_first_name_Set() const{
    return m_learner_first_name_isSet;
}

bool OAISubmissionMarkResponse::is_learner_first_name_Valid() const{
    return m_learner_first_name_isValid;
}

QString OAISubmissionMarkResponse::getLearnerLastName() const {
    return m_learner_last_name;
}
void OAISubmissionMarkResponse::setLearnerLastName(const QString &learner_last_name) {
    m_learner_last_name = learner_last_name;
    m_learner_last_name_isSet = true;
}

bool OAISubmissionMarkResponse::is_learner_last_name_Set() const{
    return m_learner_last_name_isSet;
}

bool OAISubmissionMarkResponse::is_learner_last_name_Valid() const{
    return m_learner_last_name_isValid;
}

QString OAISubmissionMarkResponse::getLearnerPersonId() const {
    return m_learner_person_id;
}
void OAISubmissionMarkResponse::setLearnerPersonId(const QString &learner_person_id) {
    m_learner_person_id = learner_person_id;
    m_learner_person_id_isSet = true;
}

bool OAISubmissionMarkResponse::is_learner_person_id_Set() const{
    return m_learner_person_id_isSet;
}

bool OAISubmissionMarkResponse::is_learner_person_id_Valid() const{
    return m_learner_person_id_isValid;
}

QList<OAIMark> OAISubmissionMarkResponse::getMarks() const {
    return m_marks;
}
void OAISubmissionMarkResponse::setMarks(const QList<OAIMark> &marks) {
    m_marks = marks;
    m_marks_isSet = true;
}

bool OAISubmissionMarkResponse::is_marks_Set() const{
    return m_marks_isSet;
}

bool OAISubmissionMarkResponse::is_marks_Valid() const{
    return m_marks_isValid;
}

QString OAISubmissionMarkResponse::getStatus() const {
    return m_status;
}
void OAISubmissionMarkResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISubmissionMarkResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAISubmissionMarkResponse::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAISubmissionMarkResponse::getSubmissionDateTime() const {
    return m_submission_date_time;
}
void OAISubmissionMarkResponse::setSubmissionDateTime(const QDateTime &submission_date_time) {
    m_submission_date_time = submission_date_time;
    m_submission_date_time_isSet = true;
}

bool OAISubmissionMarkResponse::is_submission_date_time_Set() const{
    return m_submission_date_time_isSet;
}

bool OAISubmissionMarkResponse::is_submission_date_time_Valid() const{
    return m_submission_date_time_isValid;
}

bool OAISubmissionMarkResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assessment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_item_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_item_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_course_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_learner_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_learner_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_learner_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_learner_person_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submission_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubmissionMarkResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
