/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICourseMetaResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICourseMetaResponse::OAICourseMetaResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICourseMetaResponse::OAICourseMetaResponse() {
    this->initializeModel();
}

OAICourseMetaResponse::~OAICourseMetaResponse() {}

void OAICourseMetaResponse::initializeModel() {

    m_cover_image_url_isSet = false;
    m_cover_image_url_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tasks_enabled_isSet = false;
    m_tasks_enabled_isValid = false;
}

void OAICourseMetaResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICourseMetaResponse::fromJsonObject(QJsonObject json) {

    m_cover_image_url_isValid = ::OpenAPI::fromJsonValue(m_cover_image_url, json[QString("coverImageUrl")]);
    m_cover_image_url_isSet = !json[QString("coverImageUrl")].isNull() && m_cover_image_url_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tasks_enabled_isValid = ::OpenAPI::fromJsonValue(m_tasks_enabled, json[QString("tasksEnabled")]);
    m_tasks_enabled_isSet = !json[QString("tasksEnabled")].isNull() && m_tasks_enabled_isValid;
}

QString OAICourseMetaResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICourseMetaResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_cover_image_url_isSet) {
        obj.insert(QString("coverImageUrl"), ::OpenAPI::toJsonValue(m_cover_image_url));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tasks_enabled_isSet) {
        obj.insert(QString("tasksEnabled"), ::OpenAPI::toJsonValue(m_tasks_enabled));
    }
    return obj;
}

QString OAICourseMetaResponse::getCoverImageUrl() const {
    return m_cover_image_url;
}
void OAICourseMetaResponse::setCoverImageUrl(const QString &cover_image_url) {
    m_cover_image_url = cover_image_url;
    m_cover_image_url_isSet = true;
}

bool OAICourseMetaResponse::is_cover_image_url_Set() const{
    return m_cover_image_url_isSet;
}

bool OAICourseMetaResponse::is_cover_image_url_Valid() const{
    return m_cover_image_url_isValid;
}

QDateTime OAICourseMetaResponse::getCreatedAt() const {
    return m_created_at;
}
void OAICourseMetaResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICourseMetaResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICourseMetaResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICourseMetaResponse::getId() const {
    return m_id;
}
void OAICourseMetaResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICourseMetaResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAICourseMetaResponse::is_id_Valid() const{
    return m_id_isValid;
}

OAICourseMetaResponse_metadata OAICourseMetaResponse::getMetadata() const {
    return m_metadata;
}
void OAICourseMetaResponse::setMetadata(const OAICourseMetaResponse_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAICourseMetaResponse::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAICourseMetaResponse::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAICourseMetaResponse::getName() const {
    return m_name;
}
void OAICourseMetaResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICourseMetaResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAICourseMetaResponse::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICourseMetaResponse::isTasksEnabled() const {
    return m_tasks_enabled;
}
void OAICourseMetaResponse::setTasksEnabled(const bool &tasks_enabled) {
    m_tasks_enabled = tasks_enabled;
    m_tasks_enabled_isSet = true;
}

bool OAICourseMetaResponse::is_tasks_enabled_Set() const{
    return m_tasks_enabled_isSet;
}

bool OAICourseMetaResponse::is_tasks_enabled_Valid() const{
    return m_tasks_enabled_isValid;
}

bool OAICourseMetaResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cover_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tasks_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICourseMetaResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
