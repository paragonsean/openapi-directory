/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssessmentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssessmentResponse::OAIAssessmentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssessmentResponse::OAIAssessmentResponse() {
    this->initializeModel();
}

OAIAssessmentResponse::~OAIAssessmentResponse() {}

void OAIAssessmentResponse::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_duration_minutes_isSet = false;
    m_duration_minutes_isValid = false;

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mark_number_isSet = false;
    m_mark_number_isValid = false;

    m_mark_type_isSet = false;
    m_mark_type_isValid = false;

    m_max_attempts_isSet = false;
    m_max_attempts_isValid = false;

    m_open_date_isSet = false;
    m_open_date_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_points_isSet = false;
    m_points_isValid = false;

    m_themes_isSet = false;
    m_themes_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_total_questions_isSet = false;
    m_total_questions_isValid = false;

    m_total_themes_isSet = false;
    m_total_themes_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAssessmentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssessmentResponse::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("dueDate")]);
    m_due_date_isSet = !json[QString("dueDate")].isNull() && m_due_date_isValid;

    m_duration_minutes_isValid = ::OpenAPI::fromJsonValue(m_duration_minutes, json[QString("durationMinutes")]);
    m_duration_minutes_isSet = !json[QString("durationMinutes")].isNull() && m_duration_minutes_isValid;

    m_filename_isValid = ::OpenAPI::fromJsonValue(m_filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mark_number_isValid = ::OpenAPI::fromJsonValue(m_mark_number, json[QString("markNumber")]);
    m_mark_number_isSet = !json[QString("markNumber")].isNull() && m_mark_number_isValid;

    m_mark_type_isValid = ::OpenAPI::fromJsonValue(m_mark_type, json[QString("markType")]);
    m_mark_type_isSet = !json[QString("markType")].isNull() && m_mark_type_isValid;

    m_max_attempts_isValid = ::OpenAPI::fromJsonValue(m_max_attempts, json[QString("maxAttempts")]);
    m_max_attempts_isSet = !json[QString("maxAttempts")].isNull() && m_max_attempts_isValid;

    m_open_date_isValid = ::OpenAPI::fromJsonValue(m_open_date, json[QString("openDate")]);
    m_open_date_isSet = !json[QString("openDate")].isNull() && m_open_date_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_points_isValid = ::OpenAPI::fromJsonValue(m_points, json[QString("points")]);
    m_points_isSet = !json[QString("points")].isNull() && m_points_isValid;

    m_themes_isValid = ::OpenAPI::fromJsonValue(m_themes, json[QString("themes")]);
    m_themes_isSet = !json[QString("themes")].isNull() && m_themes_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_total_questions_isValid = ::OpenAPI::fromJsonValue(m_total_questions, json[QString("totalQuestions")]);
    m_total_questions_isSet = !json[QString("totalQuestions")].isNull() && m_total_questions_isValid;

    m_total_themes_isValid = ::OpenAPI::fromJsonValue(m_total_themes, json[QString("totalThemes")]);
    m_total_themes_isSet = !json[QString("totalThemes")].isNull() && m_total_themes_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAssessmentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssessmentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_documents.size() > 0) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("dueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_duration_minutes_isSet) {
        obj.insert(QString("durationMinutes"), ::OpenAPI::toJsonValue(m_duration_minutes));
    }
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(m_filename));
    }
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mark_number_isSet) {
        obj.insert(QString("markNumber"), ::OpenAPI::toJsonValue(m_mark_number));
    }
    if (m_mark_type_isSet) {
        obj.insert(QString("markType"), ::OpenAPI::toJsonValue(m_mark_type));
    }
    if (m_max_attempts_isSet) {
        obj.insert(QString("maxAttempts"), ::OpenAPI::toJsonValue(m_max_attempts));
    }
    if (m_open_date_isSet) {
        obj.insert(QString("openDate"), ::OpenAPI::toJsonValue(m_open_date));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_points_isSet) {
        obj.insert(QString("points"), ::OpenAPI::toJsonValue(m_points));
    }
    if (m_themes.size() > 0) {
        obj.insert(QString("themes"), ::OpenAPI::toJsonValue(m_themes));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_total_questions_isSet) {
        obj.insert(QString("totalQuestions"), ::OpenAPI::toJsonValue(m_total_questions));
    }
    if (m_total_themes_isSet) {
        obj.insert(QString("totalThemes"), ::OpenAPI::toJsonValue(m_total_themes));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIAssessmentResponse::getContent() const {
    return m_content;
}
void OAIAssessmentResponse::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIAssessmentResponse::is_content_Set() const{
    return m_content_isSet;
}

bool OAIAssessmentResponse::is_content_Valid() const{
    return m_content_isValid;
}

QList<OAIDocument> OAIAssessmentResponse::getDocuments() const {
    return m_documents;
}
void OAIAssessmentResponse::setDocuments(const QList<OAIDocument> &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAIAssessmentResponse::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAIAssessmentResponse::is_documents_Valid() const{
    return m_documents_isValid;
}

QDateTime OAIAssessmentResponse::getDueDate() const {
    return m_due_date;
}
void OAIAssessmentResponse::setDueDate(const QDateTime &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIAssessmentResponse::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIAssessmentResponse::is_due_date_Valid() const{
    return m_due_date_isValid;
}

qint32 OAIAssessmentResponse::getDurationMinutes() const {
    return m_duration_minutes;
}
void OAIAssessmentResponse::setDurationMinutes(const qint32 &duration_minutes) {
    m_duration_minutes = duration_minutes;
    m_duration_minutes_isSet = true;
}

bool OAIAssessmentResponse::is_duration_minutes_Set() const{
    return m_duration_minutes_isSet;
}

bool OAIAssessmentResponse::is_duration_minutes_Valid() const{
    return m_duration_minutes_isValid;
}

QString OAIAssessmentResponse::getFilename() const {
    return m_filename;
}
void OAIAssessmentResponse::setFilename(const QString &filename) {
    m_filename = filename;
    m_filename_isSet = true;
}

bool OAIAssessmentResponse::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAIAssessmentResponse::is_filename_Valid() const{
    return m_filename_isValid;
}

bool OAIAssessmentResponse::isHidden() const {
    return m_hidden;
}
void OAIAssessmentResponse::setHidden(const bool &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAIAssessmentResponse::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAIAssessmentResponse::is_hidden_Valid() const{
    return m_hidden_isValid;
}

QString OAIAssessmentResponse::getId() const {
    return m_id;
}
void OAIAssessmentResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAssessmentResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAssessmentResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAssessmentResponse::getMarkNumber() const {
    return m_mark_number;
}
void OAIAssessmentResponse::setMarkNumber(const QString &mark_number) {
    m_mark_number = mark_number;
    m_mark_number_isSet = true;
}

bool OAIAssessmentResponse::is_mark_number_Set() const{
    return m_mark_number_isSet;
}

bool OAIAssessmentResponse::is_mark_number_Valid() const{
    return m_mark_number_isValid;
}

QString OAIAssessmentResponse::getMarkType() const {
    return m_mark_type;
}
void OAIAssessmentResponse::setMarkType(const QString &mark_type) {
    m_mark_type = mark_type;
    m_mark_type_isSet = true;
}

bool OAIAssessmentResponse::is_mark_type_Set() const{
    return m_mark_type_isSet;
}

bool OAIAssessmentResponse::is_mark_type_Valid() const{
    return m_mark_type_isValid;
}

qint32 OAIAssessmentResponse::getMaxAttempts() const {
    return m_max_attempts;
}
void OAIAssessmentResponse::setMaxAttempts(const qint32 &max_attempts) {
    m_max_attempts = max_attempts;
    m_max_attempts_isSet = true;
}

bool OAIAssessmentResponse::is_max_attempts_Set() const{
    return m_max_attempts_isSet;
}

bool OAIAssessmentResponse::is_max_attempts_Valid() const{
    return m_max_attempts_isValid;
}

QDateTime OAIAssessmentResponse::getOpenDate() const {
    return m_open_date;
}
void OAIAssessmentResponse::setOpenDate(const QDateTime &open_date) {
    m_open_date = open_date;
    m_open_date_isSet = true;
}

bool OAIAssessmentResponse::is_open_date_Set() const{
    return m_open_date_isSet;
}

bool OAIAssessmentResponse::is_open_date_Valid() const{
    return m_open_date_isValid;
}

QString OAIAssessmentResponse::getPid() const {
    return m_pid;
}
void OAIAssessmentResponse::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAIAssessmentResponse::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAIAssessmentResponse::is_pid_Valid() const{
    return m_pid_isValid;
}

QString OAIAssessmentResponse::getPoints() const {
    return m_points;
}
void OAIAssessmentResponse::setPoints(const QString &points) {
    m_points = points;
    m_points_isSet = true;
}

bool OAIAssessmentResponse::is_points_Set() const{
    return m_points_isSet;
}

bool OAIAssessmentResponse::is_points_Valid() const{
    return m_points_isValid;
}

QList<OAIThemeResponse> OAIAssessmentResponse::getThemes() const {
    return m_themes;
}
void OAIAssessmentResponse::setThemes(const QList<OAIThemeResponse> &themes) {
    m_themes = themes;
    m_themes_isSet = true;
}

bool OAIAssessmentResponse::is_themes_Set() const{
    return m_themes_isSet;
}

bool OAIAssessmentResponse::is_themes_Valid() const{
    return m_themes_isValid;
}

QString OAIAssessmentResponse::getTitle() const {
    return m_title;
}
void OAIAssessmentResponse::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAssessmentResponse::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAssessmentResponse::is_title_Valid() const{
    return m_title_isValid;
}

qint32 OAIAssessmentResponse::getTotalQuestions() const {
    return m_total_questions;
}
void OAIAssessmentResponse::setTotalQuestions(const qint32 &total_questions) {
    m_total_questions = total_questions;
    m_total_questions_isSet = true;
}

bool OAIAssessmentResponse::is_total_questions_Set() const{
    return m_total_questions_isSet;
}

bool OAIAssessmentResponse::is_total_questions_Valid() const{
    return m_total_questions_isValid;
}

qint32 OAIAssessmentResponse::getTotalThemes() const {
    return m_total_themes;
}
void OAIAssessmentResponse::setTotalThemes(const qint32 &total_themes) {
    m_total_themes = total_themes;
    m_total_themes_isSet = true;
}

bool OAIAssessmentResponse::is_total_themes_Set() const{
    return m_total_themes_isSet;
}

bool OAIAssessmentResponse::is_total_themes_Valid() const{
    return m_total_themes_isValid;
}

QString OAIAssessmentResponse::getType() const {
    return m_type;
}
void OAIAssessmentResponse::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAssessmentResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAssessmentResponse::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAssessmentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mark_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mark_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_themes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_questions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_themes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssessmentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
