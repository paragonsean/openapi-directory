/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivityAttemptOpenResponseFiles.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivityAttemptOpenResponseFiles::OAIActivityAttemptOpenResponseFiles(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivityAttemptOpenResponseFiles::OAIActivityAttemptOpenResponseFiles() {
    this->initializeModel();
}

OAIActivityAttemptOpenResponseFiles::~OAIActivityAttemptOpenResponseFiles() {}

void OAIActivityAttemptOpenResponseFiles::initializeModel() {

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_mimetype_isSet = false;
    m_mimetype_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIActivityAttemptOpenResponseFiles::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivityAttemptOpenResponseFiles::fromJsonObject(QJsonObject json) {

    m_filename_isValid = ::OpenAPI::fromJsonValue(m_filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_mimetype_isValid = ::OpenAPI::fromJsonValue(m_mimetype, json[QString("mimetype")]);
    m_mimetype_isSet = !json[QString("mimetype")].isNull() && m_mimetype_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIActivityAttemptOpenResponseFiles::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivityAttemptOpenResponseFiles::asJsonObject() const {
    QJsonObject obj;
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(m_filename));
    }
    if (m_mimetype_isSet) {
        obj.insert(QString("mimetype"), ::OpenAPI::toJsonValue(m_mimetype));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIActivityAttemptOpenResponseFiles::getFilename() const {
    return m_filename;
}
void OAIActivityAttemptOpenResponseFiles::setFilename(const QString &filename) {
    m_filename = filename;
    m_filename_isSet = true;
}

bool OAIActivityAttemptOpenResponseFiles::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAIActivityAttemptOpenResponseFiles::is_filename_Valid() const{
    return m_filename_isValid;
}

QString OAIActivityAttemptOpenResponseFiles::getMimetype() const {
    return m_mimetype;
}
void OAIActivityAttemptOpenResponseFiles::setMimetype(const QString &mimetype) {
    m_mimetype = mimetype;
    m_mimetype_isSet = true;
}

bool OAIActivityAttemptOpenResponseFiles::is_mimetype_Set() const{
    return m_mimetype_isSet;
}

bool OAIActivityAttemptOpenResponseFiles::is_mimetype_Valid() const{
    return m_mimetype_isValid;
}

QString OAIActivityAttemptOpenResponseFiles::getSize() const {
    return m_size;
}
void OAIActivityAttemptOpenResponseFiles::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIActivityAttemptOpenResponseFiles::is_size_Set() const{
    return m_size_isSet;
}

bool OAIActivityAttemptOpenResponseFiles::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIActivityAttemptOpenResponseFiles::getUrl() const {
    return m_url;
}
void OAIActivityAttemptOpenResponseFiles::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIActivityAttemptOpenResponseFiles::is_url_Set() const{
    return m_url_isSet;
}

bool OAIActivityAttemptOpenResponseFiles::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIActivityAttemptOpenResponseFiles::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mimetype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivityAttemptOpenResponseFiles::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
