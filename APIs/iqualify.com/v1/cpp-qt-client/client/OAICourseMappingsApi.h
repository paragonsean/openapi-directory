/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICourseMappingsApi_H
#define OAI_OAICourseMappingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICourseMappingsApi : public QObject {
    Q_OBJECT

public:
    OAICourseMappingsApi(const int timeOut = 0);
    ~OAICourseMappingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  external_course_id QString [required]
    */
    virtual void courseMappingsExternalcourseExternalCourseIdGet(const QString &external_course_id);


    virtual void courseMappingsGet();

    /**
    * @param[in]  offering_id QString [required]
    * @param[in]  external_course_id QString [required]
    */
    virtual void courseMappingsOfferingIdExternalCourseIdDelete(const QString &offering_id, const QString &external_course_id);

    /**
    * @param[in]  offering_id QString [required]
    * @param[in]  external_course_id QString [required]
    */
    virtual void courseMappingsOfferingIdExternalCourseIdPut(const QString &offering_id, const QString &external_course_id);

    /**
    * @param[in]  offering_id QString [required]
    */
    virtual void courseMappingsOfferingIdGet(const QString &offering_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void courseMappingsExternalcourseExternalCourseIdGetCallback(OAIHttpRequestWorker *worker);
    void courseMappingsGetCallback(OAIHttpRequestWorker *worker);
    void courseMappingsOfferingIdExternalCourseIdDeleteCallback(OAIHttpRequestWorker *worker);
    void courseMappingsOfferingIdExternalCourseIdPutCallback(OAIHttpRequestWorker *worker);
    void courseMappingsOfferingIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void courseMappingsExternalcourseExternalCourseIdGetSignal(QList<QString> summary);
    void courseMappingsGetSignal(QMap<QString, QString> summary);
    void courseMappingsOfferingIdExternalCourseIdDeleteSignal(QList<QString> summary);
    void courseMappingsOfferingIdExternalCourseIdPutSignal(QList<QString> summary);
    void courseMappingsOfferingIdGetSignal(QList<QString> summary);


    void courseMappingsExternalcourseExternalCourseIdGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void courseMappingsGetSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void courseMappingsOfferingIdExternalCourseIdDeleteSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void courseMappingsOfferingIdExternalCourseIdPutSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void courseMappingsOfferingIdGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);

    Q_DECL_DEPRECATED_X("Use courseMappingsExternalcourseExternalCourseIdGetSignalError() instead")
    void courseMappingsExternalcourseExternalCourseIdGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void courseMappingsExternalcourseExternalCourseIdGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use courseMappingsGetSignalError() instead")
    void courseMappingsGetSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void courseMappingsGetSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use courseMappingsOfferingIdExternalCourseIdDeleteSignalError() instead")
    void courseMappingsOfferingIdExternalCourseIdDeleteSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void courseMappingsOfferingIdExternalCourseIdDeleteSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use courseMappingsOfferingIdExternalCourseIdPutSignalError() instead")
    void courseMappingsOfferingIdExternalCourseIdPutSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void courseMappingsOfferingIdExternalCourseIdPutSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use courseMappingsOfferingIdGetSignalError() instead")
    void courseMappingsOfferingIdGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void courseMappingsOfferingIdGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use courseMappingsExternalcourseExternalCourseIdGetSignalErrorFull() instead")
    void courseMappingsExternalcourseExternalCourseIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void courseMappingsExternalcourseExternalCourseIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use courseMappingsGetSignalErrorFull() instead")
    void courseMappingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void courseMappingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use courseMappingsOfferingIdExternalCourseIdDeleteSignalErrorFull() instead")
    void courseMappingsOfferingIdExternalCourseIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void courseMappingsOfferingIdExternalCourseIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use courseMappingsOfferingIdExternalCourseIdPutSignalErrorFull() instead")
    void courseMappingsOfferingIdExternalCourseIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void courseMappingsOfferingIdExternalCourseIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use courseMappingsOfferingIdGetSignalErrorFull() instead")
    void courseMappingsOfferingIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void courseMappingsOfferingIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
