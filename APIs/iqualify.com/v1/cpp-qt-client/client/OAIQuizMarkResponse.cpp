/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuizMarkResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuizMarkResponse::OAIQuizMarkResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuizMarkResponse::OAIQuizMarkResponse() {
    this->initializeModel();
}

OAIQuizMarkResponse::~OAIQuizMarkResponse() {}

void OAIQuizMarkResponse::initializeModel() {

    m_attempts_isSet = false;
    m_attempts_isValid = false;

    m_last_attempt_at_isSet = false;
    m_last_attempt_at_isValid = false;

    m_learner_email_isSet = false;
    m_learner_email_isValid = false;

    m_learner_fullname_isSet = false;
    m_learner_fullname_isValid = false;

    m_learner_person_id_isSet = false;
    m_learner_person_id_isValid = false;

    m_mark_isSet = false;
    m_mark_isValid = false;

    m_quiz_id_isSet = false;
    m_quiz_id_isValid = false;

    m_quiz_title_isSet = false;
    m_quiz_title_isValid = false;
}

void OAIQuizMarkResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuizMarkResponse::fromJsonObject(QJsonObject json) {

    m_attempts_isValid = ::OpenAPI::fromJsonValue(m_attempts, json[QString("attempts")]);
    m_attempts_isSet = !json[QString("attempts")].isNull() && m_attempts_isValid;

    m_last_attempt_at_isValid = ::OpenAPI::fromJsonValue(m_last_attempt_at, json[QString("lastAttemptAt")]);
    m_last_attempt_at_isSet = !json[QString("lastAttemptAt")].isNull() && m_last_attempt_at_isValid;

    m_learner_email_isValid = ::OpenAPI::fromJsonValue(m_learner_email, json[QString("learnerEmail")]);
    m_learner_email_isSet = !json[QString("learnerEmail")].isNull() && m_learner_email_isValid;

    m_learner_fullname_isValid = ::OpenAPI::fromJsonValue(m_learner_fullname, json[QString("learnerFullname")]);
    m_learner_fullname_isSet = !json[QString("learnerFullname")].isNull() && m_learner_fullname_isValid;

    m_learner_person_id_isValid = ::OpenAPI::fromJsonValue(m_learner_person_id, json[QString("learnerPersonId")]);
    m_learner_person_id_isSet = !json[QString("learnerPersonId")].isNull() && m_learner_person_id_isValid;

    m_mark_isValid = ::OpenAPI::fromJsonValue(m_mark, json[QString("mark")]);
    m_mark_isSet = !json[QString("mark")].isNull() && m_mark_isValid;

    m_quiz_id_isValid = ::OpenAPI::fromJsonValue(m_quiz_id, json[QString("quizId")]);
    m_quiz_id_isSet = !json[QString("quizId")].isNull() && m_quiz_id_isValid;

    m_quiz_title_isValid = ::OpenAPI::fromJsonValue(m_quiz_title, json[QString("quizTitle")]);
    m_quiz_title_isSet = !json[QString("quizTitle")].isNull() && m_quiz_title_isValid;
}

QString OAIQuizMarkResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuizMarkResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_attempts_isSet) {
        obj.insert(QString("attempts"), ::OpenAPI::toJsonValue(m_attempts));
    }
    if (m_last_attempt_at_isSet) {
        obj.insert(QString("lastAttemptAt"), ::OpenAPI::toJsonValue(m_last_attempt_at));
    }
    if (m_learner_email_isSet) {
        obj.insert(QString("learnerEmail"), ::OpenAPI::toJsonValue(m_learner_email));
    }
    if (m_learner_fullname_isSet) {
        obj.insert(QString("learnerFullname"), ::OpenAPI::toJsonValue(m_learner_fullname));
    }
    if (m_learner_person_id_isSet) {
        obj.insert(QString("learnerPersonId"), ::OpenAPI::toJsonValue(m_learner_person_id));
    }
    if (m_mark_isSet) {
        obj.insert(QString("mark"), ::OpenAPI::toJsonValue(m_mark));
    }
    if (m_quiz_id_isSet) {
        obj.insert(QString("quizId"), ::OpenAPI::toJsonValue(m_quiz_id));
    }
    if (m_quiz_title_isSet) {
        obj.insert(QString("quizTitle"), ::OpenAPI::toJsonValue(m_quiz_title));
    }
    return obj;
}

qint32 OAIQuizMarkResponse::getAttempts() const {
    return m_attempts;
}
void OAIQuizMarkResponse::setAttempts(const qint32 &attempts) {
    m_attempts = attempts;
    m_attempts_isSet = true;
}

bool OAIQuizMarkResponse::is_attempts_Set() const{
    return m_attempts_isSet;
}

bool OAIQuizMarkResponse::is_attempts_Valid() const{
    return m_attempts_isValid;
}

QDateTime OAIQuizMarkResponse::getLastAttemptAt() const {
    return m_last_attempt_at;
}
void OAIQuizMarkResponse::setLastAttemptAt(const QDateTime &last_attempt_at) {
    m_last_attempt_at = last_attempt_at;
    m_last_attempt_at_isSet = true;
}

bool OAIQuizMarkResponse::is_last_attempt_at_Set() const{
    return m_last_attempt_at_isSet;
}

bool OAIQuizMarkResponse::is_last_attempt_at_Valid() const{
    return m_last_attempt_at_isValid;
}

QString OAIQuizMarkResponse::getLearnerEmail() const {
    return m_learner_email;
}
void OAIQuizMarkResponse::setLearnerEmail(const QString &learner_email) {
    m_learner_email = learner_email;
    m_learner_email_isSet = true;
}

bool OAIQuizMarkResponse::is_learner_email_Set() const{
    return m_learner_email_isSet;
}

bool OAIQuizMarkResponse::is_learner_email_Valid() const{
    return m_learner_email_isValid;
}

QString OAIQuizMarkResponse::getLearnerFullname() const {
    return m_learner_fullname;
}
void OAIQuizMarkResponse::setLearnerFullname(const QString &learner_fullname) {
    m_learner_fullname = learner_fullname;
    m_learner_fullname_isSet = true;
}

bool OAIQuizMarkResponse::is_learner_fullname_Set() const{
    return m_learner_fullname_isSet;
}

bool OAIQuizMarkResponse::is_learner_fullname_Valid() const{
    return m_learner_fullname_isValid;
}

QString OAIQuizMarkResponse::getLearnerPersonId() const {
    return m_learner_person_id;
}
void OAIQuizMarkResponse::setLearnerPersonId(const QString &learner_person_id) {
    m_learner_person_id = learner_person_id;
    m_learner_person_id_isSet = true;
}

bool OAIQuizMarkResponse::is_learner_person_id_Set() const{
    return m_learner_person_id_isSet;
}

bool OAIQuizMarkResponse::is_learner_person_id_Valid() const{
    return m_learner_person_id_isValid;
}

QString OAIQuizMarkResponse::getMark() const {
    return m_mark;
}
void OAIQuizMarkResponse::setMark(const QString &mark) {
    m_mark = mark;
    m_mark_isSet = true;
}

bool OAIQuizMarkResponse::is_mark_Set() const{
    return m_mark_isSet;
}

bool OAIQuizMarkResponse::is_mark_Valid() const{
    return m_mark_isValid;
}

QString OAIQuizMarkResponse::getQuizId() const {
    return m_quiz_id;
}
void OAIQuizMarkResponse::setQuizId(const QString &quiz_id) {
    m_quiz_id = quiz_id;
    m_quiz_id_isSet = true;
}

bool OAIQuizMarkResponse::is_quiz_id_Set() const{
    return m_quiz_id_isSet;
}

bool OAIQuizMarkResponse::is_quiz_id_Valid() const{
    return m_quiz_id_isValid;
}

QString OAIQuizMarkResponse::getQuizTitle() const {
    return m_quiz_title;
}
void OAIQuizMarkResponse::setQuizTitle(const QString &quiz_title) {
    m_quiz_title = quiz_title;
    m_quiz_title_isSet = true;
}

bool OAIQuizMarkResponse::is_quiz_title_Set() const{
    return m_quiz_title_isSet;
}

bool OAIQuizMarkResponse::is_quiz_title_Valid() const{
    return m_quiz_title_isValid;
}

bool OAIQuizMarkResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_attempt_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_learner_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_learner_fullname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_learner_person_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mark_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quiz_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quiz_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuizMarkResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
