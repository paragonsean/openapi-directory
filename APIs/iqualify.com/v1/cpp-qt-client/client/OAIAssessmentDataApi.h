/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAssessmentDataApi_H
#define OAI_OAIAssessmentDataApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActivityAttemptOpenResponse.h"
#include "OAIAssignmentMarkResponse.h"
#include "OAIError.h"
#include "OAIQuizMarkResponse.h"
#include "OAISubmissionMarkResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAssessmentDataApi : public QObject {
    Q_OBJECT

public:
    OAIAssessmentDataApi(const int timeOut = 0);
    ~OAIAssessmentDataApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  offering_id QString [required]
    */
    virtual void offeringsOfferingIdAnalyticsActivitiesResponsesGet(const QString &offering_id);

    /**
    * @param[in]  offering_id QString [required]
    */
    virtual void offeringsOfferingIdAnalyticsMarksAssignmentsGet(const QString &offering_id);

    /**
    * @param[in]  offering_id QString [required]
    */
    virtual void offeringsOfferingIdAnalyticsMarksQuizzesGet(const QString &offering_id);

    /**
    * @param[in]  offering_id QString [required]
    */
    virtual void offeringsOfferingIdAnalyticsSubmissionsAssignmentsGet(const QString &offering_id);

    /**
    * @param[in]  offering_id QString [required]
    * @param[in]  assessment_id QString [required]
    */
    virtual void offeringsOfferingIdAnalyticsSubmissionsOpenResponseAssessmentIdGet(const QString &offering_id, const QString &assessment_id);

    /**
    * @param[in]  offering_id QString [required]
    * @param[in]  user_email QString [required]
    * @param[in]  assessment_id QString [required]
    */
    virtual void offeringsOfferingIdAnalyticsSubmissionsUserEmailAssignmentsAssessmentIdGet(const QString &offering_id, const QString &user_email, const QString &assessment_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void offeringsOfferingIdAnalyticsActivitiesResponsesGetCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdAnalyticsMarksAssignmentsGetCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdAnalyticsMarksQuizzesGetCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdAnalyticsSubmissionsAssignmentsGetCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdAnalyticsSubmissionsOpenResponseAssessmentIdGetCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdAnalyticsSubmissionsUserEmailAssignmentsAssessmentIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void offeringsOfferingIdAnalyticsActivitiesResponsesGetSignal(QList<OAIActivityAttemptOpenResponse> summary);
    void offeringsOfferingIdAnalyticsMarksAssignmentsGetSignal(QList<OAIAssignmentMarkResponse> summary);
    void offeringsOfferingIdAnalyticsMarksQuizzesGetSignal(QList<OAIQuizMarkResponse> summary);
    void offeringsOfferingIdAnalyticsSubmissionsAssignmentsGetSignal(QList<OAIAssignmentMarkResponse> summary);
    void offeringsOfferingIdAnalyticsSubmissionsOpenResponseAssessmentIdGetSignal(QList<OAISubmissionMarkResponse> summary);
    void offeringsOfferingIdAnalyticsSubmissionsUserEmailAssignmentsAssessmentIdGetSignal(QList<OAISubmissionMarkResponse> summary);


    void offeringsOfferingIdAnalyticsActivitiesResponsesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIActivityAttemptOpenResponse> summary);
    void offeringsOfferingIdAnalyticsMarksAssignmentsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssignmentMarkResponse> summary);
    void offeringsOfferingIdAnalyticsMarksQuizzesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuizMarkResponse> summary);
    void offeringsOfferingIdAnalyticsSubmissionsAssignmentsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAssignmentMarkResponse> summary);
    void offeringsOfferingIdAnalyticsSubmissionsOpenResponseAssessmentIdGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISubmissionMarkResponse> summary);
    void offeringsOfferingIdAnalyticsSubmissionsUserEmailAssignmentsAssessmentIdGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISubmissionMarkResponse> summary);

    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAnalyticsActivitiesResponsesGetSignalError() instead")
    void offeringsOfferingIdAnalyticsActivitiesResponsesGetSignalE(QList<OAIActivityAttemptOpenResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAnalyticsActivitiesResponsesGetSignalError(QList<OAIActivityAttemptOpenResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAnalyticsMarksAssignmentsGetSignalError() instead")
    void offeringsOfferingIdAnalyticsMarksAssignmentsGetSignalE(QList<OAIAssignmentMarkResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAnalyticsMarksAssignmentsGetSignalError(QList<OAIAssignmentMarkResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAnalyticsMarksQuizzesGetSignalError() instead")
    void offeringsOfferingIdAnalyticsMarksQuizzesGetSignalE(QList<OAIQuizMarkResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAnalyticsMarksQuizzesGetSignalError(QList<OAIQuizMarkResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAnalyticsSubmissionsAssignmentsGetSignalError() instead")
    void offeringsOfferingIdAnalyticsSubmissionsAssignmentsGetSignalE(QList<OAIAssignmentMarkResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAnalyticsSubmissionsAssignmentsGetSignalError(QList<OAIAssignmentMarkResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAnalyticsSubmissionsOpenResponseAssessmentIdGetSignalError() instead")
    void offeringsOfferingIdAnalyticsSubmissionsOpenResponseAssessmentIdGetSignalE(QList<OAISubmissionMarkResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAnalyticsSubmissionsOpenResponseAssessmentIdGetSignalError(QList<OAISubmissionMarkResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAnalyticsSubmissionsUserEmailAssignmentsAssessmentIdGetSignalError() instead")
    void offeringsOfferingIdAnalyticsSubmissionsUserEmailAssignmentsAssessmentIdGetSignalE(QList<OAISubmissionMarkResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAnalyticsSubmissionsUserEmailAssignmentsAssessmentIdGetSignalError(QList<OAISubmissionMarkResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAnalyticsActivitiesResponsesGetSignalErrorFull() instead")
    void offeringsOfferingIdAnalyticsActivitiesResponsesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAnalyticsActivitiesResponsesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAnalyticsMarksAssignmentsGetSignalErrorFull() instead")
    void offeringsOfferingIdAnalyticsMarksAssignmentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAnalyticsMarksAssignmentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAnalyticsMarksQuizzesGetSignalErrorFull() instead")
    void offeringsOfferingIdAnalyticsMarksQuizzesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAnalyticsMarksQuizzesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAnalyticsSubmissionsAssignmentsGetSignalErrorFull() instead")
    void offeringsOfferingIdAnalyticsSubmissionsAssignmentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAnalyticsSubmissionsAssignmentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAnalyticsSubmissionsOpenResponseAssessmentIdGetSignalErrorFull() instead")
    void offeringsOfferingIdAnalyticsSubmissionsOpenResponseAssessmentIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAnalyticsSubmissionsOpenResponseAssessmentIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAnalyticsSubmissionsUserEmailAssignmentsAssessmentIdGetSignalErrorFull() instead")
    void offeringsOfferingIdAnalyticsSubmissionsUserEmailAssignmentsAssessmentIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAnalyticsSubmissionsUserEmailAssignmentsAssessmentIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
