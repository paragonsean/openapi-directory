/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICourseMetadataApi_H
#define OAI_OAICourseMetadataApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICourseMetaResponse.h"
#include "OAIError.h"
#include "OAI_courses__contentId__metadata_category_put_request.h"
#include "OAI_courses__contentId__metadata_level_put_request.h"
#include "OAI_courses__contentId__metadata_tags_put_request.h"
#include "OAI_courses__contentId__metadata_topic_put_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICourseMetadataApi : public QObject {
    Q_OBJECT

public:
    OAICourseMetadataApi(const int timeOut = 0);
    ~OAICourseMetadataApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_id QString [required]
    * @param[in]  oai_courses__content_id__metadata_category_put_request OAI_courses__contentId__metadata_category_put_request [required]
    */
    virtual void coursesContentIdMetadataCategoryPut(const QString &content_id, const OAI_courses__contentId__metadata_category_put_request &oai_courses__content_id__metadata_category_put_request);

    /**
    * @param[in]  content_id QString [required]
    * @param[in]  oai_courses__content_id__metadata_level_put_request OAI_courses__contentId__metadata_level_put_request [required]
    */
    virtual void coursesContentIdMetadataLevelPut(const QString &content_id, const OAI_courses__contentId__metadata_level_put_request &oai_courses__content_id__metadata_level_put_request);

    /**
    * @param[in]  content_id QString [required]
    * @param[in]  oai_courses__content_id__metadata_tags_put_request OAI_courses__contentId__metadata_tags_put_request [required]
    */
    virtual void coursesContentIdMetadataTagsPut(const QString &content_id, const OAI_courses__contentId__metadata_tags_put_request &oai_courses__content_id__metadata_tags_put_request);

    /**
    * @param[in]  content_id QString [required]
    * @param[in]  oai_courses__content_id__metadata_topic_put_request OAI_courses__contentId__metadata_topic_put_request [required]
    */
    virtual void coursesContentIdMetadataTopicPut(const QString &content_id, const OAI_courses__contentId__metadata_topic_put_request &oai_courses__content_id__metadata_topic_put_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void coursesContentIdMetadataCategoryPutCallback(OAIHttpRequestWorker *worker);
    void coursesContentIdMetadataLevelPutCallback(OAIHttpRequestWorker *worker);
    void coursesContentIdMetadataTagsPutCallback(OAIHttpRequestWorker *worker);
    void coursesContentIdMetadataTopicPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void coursesContentIdMetadataCategoryPutSignal(OAICourseMetaResponse summary);
    void coursesContentIdMetadataLevelPutSignal(OAICourseMetaResponse summary);
    void coursesContentIdMetadataTagsPutSignal(OAICourseMetaResponse summary);
    void coursesContentIdMetadataTopicPutSignal(OAICourseMetaResponse summary);


    void coursesContentIdMetadataCategoryPutSignalFull(OAIHttpRequestWorker *worker, OAICourseMetaResponse summary);
    void coursesContentIdMetadataLevelPutSignalFull(OAIHttpRequestWorker *worker, OAICourseMetaResponse summary);
    void coursesContentIdMetadataTagsPutSignalFull(OAIHttpRequestWorker *worker, OAICourseMetaResponse summary);
    void coursesContentIdMetadataTopicPutSignalFull(OAIHttpRequestWorker *worker, OAICourseMetaResponse summary);

    Q_DECL_DEPRECATED_X("Use coursesContentIdMetadataCategoryPutSignalError() instead")
    void coursesContentIdMetadataCategoryPutSignalE(OAICourseMetaResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void coursesContentIdMetadataCategoryPutSignalError(OAICourseMetaResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use coursesContentIdMetadataLevelPutSignalError() instead")
    void coursesContentIdMetadataLevelPutSignalE(OAICourseMetaResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void coursesContentIdMetadataLevelPutSignalError(OAICourseMetaResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use coursesContentIdMetadataTagsPutSignalError() instead")
    void coursesContentIdMetadataTagsPutSignalE(OAICourseMetaResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void coursesContentIdMetadataTagsPutSignalError(OAICourseMetaResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use coursesContentIdMetadataTopicPutSignalError() instead")
    void coursesContentIdMetadataTopicPutSignalE(OAICourseMetaResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void coursesContentIdMetadataTopicPutSignalError(OAICourseMetaResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use coursesContentIdMetadataCategoryPutSignalErrorFull() instead")
    void coursesContentIdMetadataCategoryPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void coursesContentIdMetadataCategoryPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use coursesContentIdMetadataLevelPutSignalErrorFull() instead")
    void coursesContentIdMetadataLevelPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void coursesContentIdMetadataLevelPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use coursesContentIdMetadataTagsPutSignalErrorFull() instead")
    void coursesContentIdMetadataTagsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void coursesContentIdMetadataTagsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use coursesContentIdMetadataTopicPutSignalErrorFull() instead")
    void coursesContentIdMetadataTopicPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void coursesContentIdMetadataTopicPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
