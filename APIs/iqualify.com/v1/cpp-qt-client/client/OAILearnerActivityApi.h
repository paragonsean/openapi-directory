/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILearnerActivityApi_H
#define OAI_OAILearnerActivityApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAILearnerProgressResponse.h"
#include "OAILearnerResponse.h"
#include "OAISocialNotesResponse.h"
#include "OAIUnitReactionsAnalyticsResponse.h"
#include "OAI_users__userEmail__offerings__offeringId__progress_get_200_response.h"
#include "OAI_users_all_progress_get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILearnerActivityApi : public QObject {
    Q_OBJECT

public:
    OAILearnerActivityApi(const int timeOut = 0);
    ~OAILearnerActivityApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  offering_id QString [required]
    */
    virtual void offeringsOfferingIdAnalyticsLearnersProgressGet(const QString &offering_id);

    /**
    * @param[in]  offering_id QString [required]
    */
    virtual void offeringsOfferingIdAnalyticsSocialNotesGet(const QString &offering_id);

    /**
    * @param[in]  offering_id QString [required]
    */
    virtual void offeringsOfferingIdAnalyticsUnitReactionsGet(const QString &offering_id);

    /**
    * @param[in]  top QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void usersAllProgressGet(const ::OpenAPI::OptionalParam<QString> &top = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_email QString [required]
    * @param[in]  offering_id QString [required]
    */
    virtual void usersUserEmailOfferingsOfferingIdProgressGet(const QString &user_email, const QString &offering_id);

    /**
    * @param[in]  user_email QString [required]
    */
    virtual void usersUserEmailProgressGet(const QString &user_email);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void offeringsOfferingIdAnalyticsLearnersProgressGetCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdAnalyticsSocialNotesGetCallback(OAIHttpRequestWorker *worker);
    void offeringsOfferingIdAnalyticsUnitReactionsGetCallback(OAIHttpRequestWorker *worker);
    void usersAllProgressGetCallback(OAIHttpRequestWorker *worker);
    void usersUserEmailOfferingsOfferingIdProgressGetCallback(OAIHttpRequestWorker *worker);
    void usersUserEmailProgressGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void offeringsOfferingIdAnalyticsLearnersProgressGetSignal(QList<OAILearnerProgressResponse> summary);
    void offeringsOfferingIdAnalyticsSocialNotesGetSignal(QList<OAISocialNotesResponse> summary);
    void offeringsOfferingIdAnalyticsUnitReactionsGetSignal(QList<OAIUnitReactionsAnalyticsResponse> summary);
    void usersAllProgressGetSignal(OAI_users_all_progress_get_200_response summary);
    void usersUserEmailOfferingsOfferingIdProgressGetSignal(OAI_users__userEmail__offerings__offeringId__progress_get_200_response summary);
    void usersUserEmailProgressGetSignal(OAILearnerResponse summary);


    void offeringsOfferingIdAnalyticsLearnersProgressGetSignalFull(OAIHttpRequestWorker *worker, QList<OAILearnerProgressResponse> summary);
    void offeringsOfferingIdAnalyticsSocialNotesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISocialNotesResponse> summary);
    void offeringsOfferingIdAnalyticsUnitReactionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUnitReactionsAnalyticsResponse> summary);
    void usersAllProgressGetSignalFull(OAIHttpRequestWorker *worker, OAI_users_all_progress_get_200_response summary);
    void usersUserEmailOfferingsOfferingIdProgressGetSignalFull(OAIHttpRequestWorker *worker, OAI_users__userEmail__offerings__offeringId__progress_get_200_response summary);
    void usersUserEmailProgressGetSignalFull(OAIHttpRequestWorker *worker, OAILearnerResponse summary);

    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAnalyticsLearnersProgressGetSignalError() instead")
    void offeringsOfferingIdAnalyticsLearnersProgressGetSignalE(QList<OAILearnerProgressResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAnalyticsLearnersProgressGetSignalError(QList<OAILearnerProgressResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAnalyticsSocialNotesGetSignalError() instead")
    void offeringsOfferingIdAnalyticsSocialNotesGetSignalE(QList<OAISocialNotesResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAnalyticsSocialNotesGetSignalError(QList<OAISocialNotesResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAnalyticsUnitReactionsGetSignalError() instead")
    void offeringsOfferingIdAnalyticsUnitReactionsGetSignalE(QList<OAIUnitReactionsAnalyticsResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAnalyticsUnitReactionsGetSignalError(QList<OAIUnitReactionsAnalyticsResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersAllProgressGetSignalError() instead")
    void usersAllProgressGetSignalE(OAI_users_all_progress_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersAllProgressGetSignalError(OAI_users_all_progress_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserEmailOfferingsOfferingIdProgressGetSignalError() instead")
    void usersUserEmailOfferingsOfferingIdProgressGetSignalE(OAI_users__userEmail__offerings__offeringId__progress_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserEmailOfferingsOfferingIdProgressGetSignalError(OAI_users__userEmail__offerings__offeringId__progress_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserEmailProgressGetSignalError() instead")
    void usersUserEmailProgressGetSignalE(OAILearnerResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserEmailProgressGetSignalError(OAILearnerResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAnalyticsLearnersProgressGetSignalErrorFull() instead")
    void offeringsOfferingIdAnalyticsLearnersProgressGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAnalyticsLearnersProgressGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAnalyticsSocialNotesGetSignalErrorFull() instead")
    void offeringsOfferingIdAnalyticsSocialNotesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAnalyticsSocialNotesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offeringsOfferingIdAnalyticsUnitReactionsGetSignalErrorFull() instead")
    void offeringsOfferingIdAnalyticsUnitReactionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offeringsOfferingIdAnalyticsUnitReactionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersAllProgressGetSignalErrorFull() instead")
    void usersAllProgressGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersAllProgressGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserEmailOfferingsOfferingIdProgressGetSignalErrorFull() instead")
    void usersUserEmailOfferingsOfferingIdProgressGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserEmailOfferingsOfferingIdProgressGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserEmailProgressGetSignalErrorFull() instead")
    void usersUserEmailProgressGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserEmailProgressGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
