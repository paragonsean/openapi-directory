/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOpenBadgeClass.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOpenBadgeClass::OAIOpenBadgeClass(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOpenBadgeClass::OAIOpenBadgeClass() {
    this->initializeModel();
}

OAIOpenBadgeClass::~OAIOpenBadgeClass() {}

void OAIOpenBadgeClass::initializeModel() {

    m_criteria_isSet = false;
    m_criteria_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIOpenBadgeClass::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOpenBadgeClass::fromJsonObject(QJsonObject json) {

    m_criteria_isValid = ::OpenAPI::fromJsonValue(m_criteria, json[QString("criteria")]);
    m_criteria_isSet = !json[QString("criteria")].isNull() && m_criteria_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("issuer")]);
    m_issuer_isSet = !json[QString("issuer")].isNull() && m_issuer_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIOpenBadgeClass::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOpenBadgeClass::asJsonObject() const {
    QJsonObject obj;
    if (m_criteria.isSet()) {
        obj.insert(QString("criteria"), ::OpenAPI::toJsonValue(m_criteria));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_issuer_isSet) {
        obj.insert(QString("issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIOpenBadgeClass_criteria OAIOpenBadgeClass::getCriteria() const {
    return m_criteria;
}
void OAIOpenBadgeClass::setCriteria(const OAIOpenBadgeClass_criteria &criteria) {
    m_criteria = criteria;
    m_criteria_isSet = true;
}

bool OAIOpenBadgeClass::is_criteria_Set() const{
    return m_criteria_isSet;
}

bool OAIOpenBadgeClass::is_criteria_Valid() const{
    return m_criteria_isValid;
}

QString OAIOpenBadgeClass::getDescription() const {
    return m_description;
}
void OAIOpenBadgeClass::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOpenBadgeClass::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOpenBadgeClass::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIOpenBadgeClass::getId() const {
    return m_id;
}
void OAIOpenBadgeClass::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOpenBadgeClass::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOpenBadgeClass::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOpenBadgeClass::getImage() const {
    return m_image;
}
void OAIOpenBadgeClass::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIOpenBadgeClass::is_image_Set() const{
    return m_image_isSet;
}

bool OAIOpenBadgeClass::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIOpenBadgeClass::getIssuer() const {
    return m_issuer;
}
void OAIOpenBadgeClass::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAIOpenBadgeClass::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAIOpenBadgeClass::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QString OAIOpenBadgeClass::getName() const {
    return m_name;
}
void OAIOpenBadgeClass::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOpenBadgeClass::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOpenBadgeClass::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOpenBadgeClass::getType() const {
    return m_type;
}
void OAIOpenBadgeClass::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOpenBadgeClass::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOpenBadgeClass::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIOpenBadgeClass::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOpenBadgeClass::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
