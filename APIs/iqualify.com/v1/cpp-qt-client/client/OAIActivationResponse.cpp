/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivationResponse::OAIActivationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivationResponse::OAIActivationResponse() {
    this->initializeModel();
}

OAIActivationResponse::~OAIActivationResponse() {}

void OAIActivationResponse::initializeModel() {

    m_end_isSet = false;
    m_end_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_info_isSet = false;
    m_info_isValid = false;

    m_learners_count_isSet = false;
    m_learners_count_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;
}

void OAIActivationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivationResponse::fromJsonObject(QJsonObject json) {

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_info_isValid = ::OpenAPI::fromJsonValue(m_info, json[QString("info")]);
    m_info_isSet = !json[QString("info")].isNull() && m_info_isValid;

    m_learners_count_isValid = ::OpenAPI::fromJsonValue(m_learners_count, json[QString("learnersCount")]);
    m_learners_count_isSet = !json[QString("learnersCount")].isNull() && m_learners_count_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;
}

QString OAIActivationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_info_isSet) {
        obj.insert(QString("info"), ::OpenAPI::toJsonValue(m_info));
    }
    if (m_learners_count_isSet) {
        obj.insert(QString("learnersCount"), ::OpenAPI::toJsonValue(m_learners_count));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    return obj;
}

QString OAIActivationResponse::getEnd() const {
    return m_end;
}
void OAIActivationResponse::setEnd(const QString &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIActivationResponse::is_end_Set() const{
    return m_end_isSet;
}

bool OAIActivationResponse::is_end_Valid() const{
    return m_end_isValid;
}

QString OAIActivationResponse::getId() const {
    return m_id;
}
void OAIActivationResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIActivationResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIActivationResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIActivationResponse::getInfo() const {
    return m_info;
}
void OAIActivationResponse::setInfo(const QString &info) {
    m_info = info;
    m_info_isSet = true;
}

bool OAIActivationResponse::is_info_Set() const{
    return m_info_isSet;
}

bool OAIActivationResponse::is_info_Valid() const{
    return m_info_isValid;
}

QString OAIActivationResponse::getLearnersCount() const {
    return m_learners_count;
}
void OAIActivationResponse::setLearnersCount(const QString &learners_count) {
    m_learners_count = learners_count;
    m_learners_count_isSet = true;
}

bool OAIActivationResponse::is_learners_count_Set() const{
    return m_learners_count_isSet;
}

bool OAIActivationResponse::is_learners_count_Valid() const{
    return m_learners_count_isValid;
}

OAIActivationResponse_metadata OAIActivationResponse::getMetadata() const {
    return m_metadata;
}
void OAIActivationResponse::setMetadata(const OAIActivationResponse_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIActivationResponse::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIActivationResponse::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIActivationResponse::getName() const {
    return m_name;
}
void OAIActivationResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIActivationResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIActivationResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIActivationResponse::getStart() const {
    return m_start;
}
void OAIActivationResponse::setStart(const QString &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIActivationResponse::is_start_Set() const{
    return m_start_isSet;
}

bool OAIActivationResponse::is_start_Valid() const{
    return m_start_isValid;
}

bool OAIActivationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_learners_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
