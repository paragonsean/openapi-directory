/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssignmentMarkResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssignmentMarkResponse::OAIAssignmentMarkResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssignmentMarkResponse::OAIAssignmentMarkResponse() {
    this->initializeModel();
}

OAIAssignmentMarkResponse::~OAIAssignmentMarkResponse() {}

void OAIAssignmentMarkResponse::initializeModel() {

    m_assessment_id_isSet = false;
    m_assessment_id_isValid = false;

    m_assessment_item_details_isSet = false;
    m_assessment_item_details_isValid = false;

    m_assessment_item_name_isSet = false;
    m_assessment_item_name_isValid = false;

    m_course_name_isSet = false;
    m_course_name_isValid = false;

    m_learner_email_isSet = false;
    m_learner_email_isValid = false;

    m_learner_first_name_isSet = false;
    m_learner_first_name_isValid = false;

    m_learner_last_name_isSet = false;
    m_learner_last_name_isValid = false;

    m_learner_person_id_isSet = false;
    m_learner_person_id_isValid = false;

    m_mark_isSet = false;
    m_mark_isValid = false;

    m_mark_feedback_isSet = false;
    m_mark_feedback_isValid = false;

    m_marked_by_isSet = false;
    m_marked_by_isValid = false;

    m_marked_by_evaluator_isSet = false;
    m_marked_by_evaluator_isValid = false;

    m_marked_by_facilitator_isSet = false;
    m_marked_by_facilitator_isValid = false;

    m_marked_by_marker_isSet = false;
    m_marked_by_marker_isValid = false;

    m_marked_date_time_isSet = false;
    m_marked_date_time_isValid = false;

    m_submission_date_time_isSet = false;
    m_submission_date_time_isValid = false;
}

void OAIAssignmentMarkResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssignmentMarkResponse::fromJsonObject(QJsonObject json) {

    m_assessment_id_isValid = ::OpenAPI::fromJsonValue(m_assessment_id, json[QString("assessmentId")]);
    m_assessment_id_isSet = !json[QString("assessmentId")].isNull() && m_assessment_id_isValid;

    m_assessment_item_details_isValid = ::OpenAPI::fromJsonValue(m_assessment_item_details, json[QString("assessmentItemDetails")]);
    m_assessment_item_details_isSet = !json[QString("assessmentItemDetails")].isNull() && m_assessment_item_details_isValid;

    m_assessment_item_name_isValid = ::OpenAPI::fromJsonValue(m_assessment_item_name, json[QString("assessmentItemName")]);
    m_assessment_item_name_isSet = !json[QString("assessmentItemName")].isNull() && m_assessment_item_name_isValid;

    m_course_name_isValid = ::OpenAPI::fromJsonValue(m_course_name, json[QString("courseName")]);
    m_course_name_isSet = !json[QString("courseName")].isNull() && m_course_name_isValid;

    m_learner_email_isValid = ::OpenAPI::fromJsonValue(m_learner_email, json[QString("learnerEmail")]);
    m_learner_email_isSet = !json[QString("learnerEmail")].isNull() && m_learner_email_isValid;

    m_learner_first_name_isValid = ::OpenAPI::fromJsonValue(m_learner_first_name, json[QString("learnerFirstName")]);
    m_learner_first_name_isSet = !json[QString("learnerFirstName")].isNull() && m_learner_first_name_isValid;

    m_learner_last_name_isValid = ::OpenAPI::fromJsonValue(m_learner_last_name, json[QString("learnerLastName")]);
    m_learner_last_name_isSet = !json[QString("learnerLastName")].isNull() && m_learner_last_name_isValid;

    m_learner_person_id_isValid = ::OpenAPI::fromJsonValue(m_learner_person_id, json[QString("learnerPersonId")]);
    m_learner_person_id_isSet = !json[QString("learnerPersonId")].isNull() && m_learner_person_id_isValid;

    m_mark_isValid = ::OpenAPI::fromJsonValue(m_mark, json[QString("mark")]);
    m_mark_isSet = !json[QString("mark")].isNull() && m_mark_isValid;

    m_mark_feedback_isValid = ::OpenAPI::fromJsonValue(m_mark_feedback, json[QString("markFeedback")]);
    m_mark_feedback_isSet = !json[QString("markFeedback")].isNull() && m_mark_feedback_isValid;

    m_marked_by_isValid = ::OpenAPI::fromJsonValue(m_marked_by, json[QString("markedBy")]);
    m_marked_by_isSet = !json[QString("markedBy")].isNull() && m_marked_by_isValid;

    m_marked_by_evaluator_isValid = ::OpenAPI::fromJsonValue(m_marked_by_evaluator, json[QString("markedByEvaluator")]);
    m_marked_by_evaluator_isSet = !json[QString("markedByEvaluator")].isNull() && m_marked_by_evaluator_isValid;

    m_marked_by_facilitator_isValid = ::OpenAPI::fromJsonValue(m_marked_by_facilitator, json[QString("markedByFacilitator")]);
    m_marked_by_facilitator_isSet = !json[QString("markedByFacilitator")].isNull() && m_marked_by_facilitator_isValid;

    m_marked_by_marker_isValid = ::OpenAPI::fromJsonValue(m_marked_by_marker, json[QString("markedByMarker")]);
    m_marked_by_marker_isSet = !json[QString("markedByMarker")].isNull() && m_marked_by_marker_isValid;

    m_marked_date_time_isValid = ::OpenAPI::fromJsonValue(m_marked_date_time, json[QString("markedDateTime")]);
    m_marked_date_time_isSet = !json[QString("markedDateTime")].isNull() && m_marked_date_time_isValid;

    m_submission_date_time_isValid = ::OpenAPI::fromJsonValue(m_submission_date_time, json[QString("submissionDateTime")]);
    m_submission_date_time_isSet = !json[QString("submissionDateTime")].isNull() && m_submission_date_time_isValid;
}

QString OAIAssignmentMarkResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssignmentMarkResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_assessment_id_isSet) {
        obj.insert(QString("assessmentId"), ::OpenAPI::toJsonValue(m_assessment_id));
    }
    if (m_assessment_item_details_isSet) {
        obj.insert(QString("assessmentItemDetails"), ::OpenAPI::toJsonValue(m_assessment_item_details));
    }
    if (m_assessment_item_name_isSet) {
        obj.insert(QString("assessmentItemName"), ::OpenAPI::toJsonValue(m_assessment_item_name));
    }
    if (m_course_name_isSet) {
        obj.insert(QString("courseName"), ::OpenAPI::toJsonValue(m_course_name));
    }
    if (m_learner_email_isSet) {
        obj.insert(QString("learnerEmail"), ::OpenAPI::toJsonValue(m_learner_email));
    }
    if (m_learner_first_name_isSet) {
        obj.insert(QString("learnerFirstName"), ::OpenAPI::toJsonValue(m_learner_first_name));
    }
    if (m_learner_last_name_isSet) {
        obj.insert(QString("learnerLastName"), ::OpenAPI::toJsonValue(m_learner_last_name));
    }
    if (m_learner_person_id_isSet) {
        obj.insert(QString("learnerPersonId"), ::OpenAPI::toJsonValue(m_learner_person_id));
    }
    if (m_mark_isSet) {
        obj.insert(QString("mark"), ::OpenAPI::toJsonValue(m_mark));
    }
    if (m_mark_feedback_isSet) {
        obj.insert(QString("markFeedback"), ::OpenAPI::toJsonValue(m_mark_feedback));
    }
    if (m_marked_by_isSet) {
        obj.insert(QString("markedBy"), ::OpenAPI::toJsonValue(m_marked_by));
    }
    if (m_marked_by_evaluator_isSet) {
        obj.insert(QString("markedByEvaluator"), ::OpenAPI::toJsonValue(m_marked_by_evaluator));
    }
    if (m_marked_by_facilitator_isSet) {
        obj.insert(QString("markedByFacilitator"), ::OpenAPI::toJsonValue(m_marked_by_facilitator));
    }
    if (m_marked_by_marker_isSet) {
        obj.insert(QString("markedByMarker"), ::OpenAPI::toJsonValue(m_marked_by_marker));
    }
    if (m_marked_date_time_isSet) {
        obj.insert(QString("markedDateTime"), ::OpenAPI::toJsonValue(m_marked_date_time));
    }
    if (m_submission_date_time_isSet) {
        obj.insert(QString("submissionDateTime"), ::OpenAPI::toJsonValue(m_submission_date_time));
    }
    return obj;
}

QString OAIAssignmentMarkResponse::getAssessmentId() const {
    return m_assessment_id;
}
void OAIAssignmentMarkResponse::setAssessmentId(const QString &assessment_id) {
    m_assessment_id = assessment_id;
    m_assessment_id_isSet = true;
}

bool OAIAssignmentMarkResponse::is_assessment_id_Set() const{
    return m_assessment_id_isSet;
}

bool OAIAssignmentMarkResponse::is_assessment_id_Valid() const{
    return m_assessment_id_isValid;
}

QString OAIAssignmentMarkResponse::getAssessmentItemDetails() const {
    return m_assessment_item_details;
}
void OAIAssignmentMarkResponse::setAssessmentItemDetails(const QString &assessment_item_details) {
    m_assessment_item_details = assessment_item_details;
    m_assessment_item_details_isSet = true;
}

bool OAIAssignmentMarkResponse::is_assessment_item_details_Set() const{
    return m_assessment_item_details_isSet;
}

bool OAIAssignmentMarkResponse::is_assessment_item_details_Valid() const{
    return m_assessment_item_details_isValid;
}

QString OAIAssignmentMarkResponse::getAssessmentItemName() const {
    return m_assessment_item_name;
}
void OAIAssignmentMarkResponse::setAssessmentItemName(const QString &assessment_item_name) {
    m_assessment_item_name = assessment_item_name;
    m_assessment_item_name_isSet = true;
}

bool OAIAssignmentMarkResponse::is_assessment_item_name_Set() const{
    return m_assessment_item_name_isSet;
}

bool OAIAssignmentMarkResponse::is_assessment_item_name_Valid() const{
    return m_assessment_item_name_isValid;
}

QString OAIAssignmentMarkResponse::getCourseName() const {
    return m_course_name;
}
void OAIAssignmentMarkResponse::setCourseName(const QString &course_name) {
    m_course_name = course_name;
    m_course_name_isSet = true;
}

bool OAIAssignmentMarkResponse::is_course_name_Set() const{
    return m_course_name_isSet;
}

bool OAIAssignmentMarkResponse::is_course_name_Valid() const{
    return m_course_name_isValid;
}

QString OAIAssignmentMarkResponse::getLearnerEmail() const {
    return m_learner_email;
}
void OAIAssignmentMarkResponse::setLearnerEmail(const QString &learner_email) {
    m_learner_email = learner_email;
    m_learner_email_isSet = true;
}

bool OAIAssignmentMarkResponse::is_learner_email_Set() const{
    return m_learner_email_isSet;
}

bool OAIAssignmentMarkResponse::is_learner_email_Valid() const{
    return m_learner_email_isValid;
}

QString OAIAssignmentMarkResponse::getLearnerFirstName() const {
    return m_learner_first_name;
}
void OAIAssignmentMarkResponse::setLearnerFirstName(const QString &learner_first_name) {
    m_learner_first_name = learner_first_name;
    m_learner_first_name_isSet = true;
}

bool OAIAssignmentMarkResponse::is_learner_first_name_Set() const{
    return m_learner_first_name_isSet;
}

bool OAIAssignmentMarkResponse::is_learner_first_name_Valid() const{
    return m_learner_first_name_isValid;
}

QString OAIAssignmentMarkResponse::getLearnerLastName() const {
    return m_learner_last_name;
}
void OAIAssignmentMarkResponse::setLearnerLastName(const QString &learner_last_name) {
    m_learner_last_name = learner_last_name;
    m_learner_last_name_isSet = true;
}

bool OAIAssignmentMarkResponse::is_learner_last_name_Set() const{
    return m_learner_last_name_isSet;
}

bool OAIAssignmentMarkResponse::is_learner_last_name_Valid() const{
    return m_learner_last_name_isValid;
}

QString OAIAssignmentMarkResponse::getLearnerPersonId() const {
    return m_learner_person_id;
}
void OAIAssignmentMarkResponse::setLearnerPersonId(const QString &learner_person_id) {
    m_learner_person_id = learner_person_id;
    m_learner_person_id_isSet = true;
}

bool OAIAssignmentMarkResponse::is_learner_person_id_Set() const{
    return m_learner_person_id_isSet;
}

bool OAIAssignmentMarkResponse::is_learner_person_id_Valid() const{
    return m_learner_person_id_isValid;
}

QString OAIAssignmentMarkResponse::getMark() const {
    return m_mark;
}
void OAIAssignmentMarkResponse::setMark(const QString &mark) {
    m_mark = mark;
    m_mark_isSet = true;
}

bool OAIAssignmentMarkResponse::is_mark_Set() const{
    return m_mark_isSet;
}

bool OAIAssignmentMarkResponse::is_mark_Valid() const{
    return m_mark_isValid;
}

QString OAIAssignmentMarkResponse::getMarkFeedback() const {
    return m_mark_feedback;
}
void OAIAssignmentMarkResponse::setMarkFeedback(const QString &mark_feedback) {
    m_mark_feedback = mark_feedback;
    m_mark_feedback_isSet = true;
}

bool OAIAssignmentMarkResponse::is_mark_feedback_Set() const{
    return m_mark_feedback_isSet;
}

bool OAIAssignmentMarkResponse::is_mark_feedback_Valid() const{
    return m_mark_feedback_isValid;
}

QString OAIAssignmentMarkResponse::getMarkedBy() const {
    return m_marked_by;
}
void OAIAssignmentMarkResponse::setMarkedBy(const QString &marked_by) {
    m_marked_by = marked_by;
    m_marked_by_isSet = true;
}

bool OAIAssignmentMarkResponse::is_marked_by_Set() const{
    return m_marked_by_isSet;
}

bool OAIAssignmentMarkResponse::is_marked_by_Valid() const{
    return m_marked_by_isValid;
}

bool OAIAssignmentMarkResponse::isMarkedByEvaluator() const {
    return m_marked_by_evaluator;
}
void OAIAssignmentMarkResponse::setMarkedByEvaluator(const bool &marked_by_evaluator) {
    m_marked_by_evaluator = marked_by_evaluator;
    m_marked_by_evaluator_isSet = true;
}

bool OAIAssignmentMarkResponse::is_marked_by_evaluator_Set() const{
    return m_marked_by_evaluator_isSet;
}

bool OAIAssignmentMarkResponse::is_marked_by_evaluator_Valid() const{
    return m_marked_by_evaluator_isValid;
}

bool OAIAssignmentMarkResponse::isMarkedByFacilitator() const {
    return m_marked_by_facilitator;
}
void OAIAssignmentMarkResponse::setMarkedByFacilitator(const bool &marked_by_facilitator) {
    m_marked_by_facilitator = marked_by_facilitator;
    m_marked_by_facilitator_isSet = true;
}

bool OAIAssignmentMarkResponse::is_marked_by_facilitator_Set() const{
    return m_marked_by_facilitator_isSet;
}

bool OAIAssignmentMarkResponse::is_marked_by_facilitator_Valid() const{
    return m_marked_by_facilitator_isValid;
}

bool OAIAssignmentMarkResponse::isMarkedByMarker() const {
    return m_marked_by_marker;
}
void OAIAssignmentMarkResponse::setMarkedByMarker(const bool &marked_by_marker) {
    m_marked_by_marker = marked_by_marker;
    m_marked_by_marker_isSet = true;
}

bool OAIAssignmentMarkResponse::is_marked_by_marker_Set() const{
    return m_marked_by_marker_isSet;
}

bool OAIAssignmentMarkResponse::is_marked_by_marker_Valid() const{
    return m_marked_by_marker_isValid;
}

QDateTime OAIAssignmentMarkResponse::getMarkedDateTime() const {
    return m_marked_date_time;
}
void OAIAssignmentMarkResponse::setMarkedDateTime(const QDateTime &marked_date_time) {
    m_marked_date_time = marked_date_time;
    m_marked_date_time_isSet = true;
}

bool OAIAssignmentMarkResponse::is_marked_date_time_Set() const{
    return m_marked_date_time_isSet;
}

bool OAIAssignmentMarkResponse::is_marked_date_time_Valid() const{
    return m_marked_date_time_isValid;
}

QDateTime OAIAssignmentMarkResponse::getSubmissionDateTime() const {
    return m_submission_date_time;
}
void OAIAssignmentMarkResponse::setSubmissionDateTime(const QDateTime &submission_date_time) {
    m_submission_date_time = submission_date_time;
    m_submission_date_time_isSet = true;
}

bool OAIAssignmentMarkResponse::is_submission_date_time_Set() const{
    return m_submission_date_time_isSet;
}

bool OAIAssignmentMarkResponse::is_submission_date_time_Valid() const{
    return m_submission_date_time_isValid;
}

bool OAIAssignmentMarkResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assessment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_item_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_item_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_course_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_learner_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_learner_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_learner_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_learner_person_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mark_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mark_feedback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marked_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marked_by_evaluator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marked_by_facilitator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marked_by_marker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marked_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submission_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssignmentMarkResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
