/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannel::OAIChannel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannel::OAIChannel() {
    this->initializeModel();
}

OAIChannel::~OAIChannel() {}

void OAIChannel::initializeModel() {

    m_group_isSet = false;
    m_group_isValid = false;

    m_group_discussion_isSet = false;
    m_group_discussion_isValid = false;

    m_is_broadcast_only_isSet = false;
    m_is_broadcast_only_isValid = false;

    m_private_support_isSet = false;
    m_private_support_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIChannel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannel::fromJsonObject(QJsonObject json) {

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_group_discussion_isValid = ::OpenAPI::fromJsonValue(m_group_discussion, json[QString("groupDiscussion")]);
    m_group_discussion_isSet = !json[QString("groupDiscussion")].isNull() && m_group_discussion_isValid;

    m_is_broadcast_only_isValid = ::OpenAPI::fromJsonValue(m_is_broadcast_only, json[QString("isBroadcastOnly")]);
    m_is_broadcast_only_isSet = !json[QString("isBroadcastOnly")].isNull() && m_is_broadcast_only_isValid;

    m_private_support_isValid = ::OpenAPI::fromJsonValue(m_private_support, json[QString("privateSupport")]);
    m_private_support_isSet = !json[QString("privateSupport")].isNull() && m_private_support_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIChannel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannel::asJsonObject() const {
    QJsonObject obj;
    if (m_group.isSet()) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_group_discussion_isSet) {
        obj.insert(QString("groupDiscussion"), ::OpenAPI::toJsonValue(m_group_discussion));
    }
    if (m_is_broadcast_only_isSet) {
        obj.insert(QString("isBroadcastOnly"), ::OpenAPI::toJsonValue(m_is_broadcast_only));
    }
    if (m_private_support_isSet) {
        obj.insert(QString("privateSupport"), ::OpenAPI::toJsonValue(m_private_support));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

OAIChannel_group OAIChannel::getGroup() const {
    return m_group;
}
void OAIChannel::setGroup(const OAIChannel_group &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIChannel::is_group_Set() const{
    return m_group_isSet;
}

bool OAIChannel::is_group_Valid() const{
    return m_group_isValid;
}

bool OAIChannel::isGroupDiscussion() const {
    return m_group_discussion;
}
void OAIChannel::setGroupDiscussion(const bool &group_discussion) {
    m_group_discussion = group_discussion;
    m_group_discussion_isSet = true;
}

bool OAIChannel::is_group_discussion_Set() const{
    return m_group_discussion_isSet;
}

bool OAIChannel::is_group_discussion_Valid() const{
    return m_group_discussion_isValid;
}

bool OAIChannel::isIsBroadcastOnly() const {
    return m_is_broadcast_only;
}
void OAIChannel::setIsBroadcastOnly(const bool &is_broadcast_only) {
    m_is_broadcast_only = is_broadcast_only;
    m_is_broadcast_only_isSet = true;
}

bool OAIChannel::is_is_broadcast_only_Set() const{
    return m_is_broadcast_only_isSet;
}

bool OAIChannel::is_is_broadcast_only_Valid() const{
    return m_is_broadcast_only_isValid;
}

bool OAIChannel::isPrivateSupport() const {
    return m_private_support;
}
void OAIChannel::setPrivateSupport(const bool &private_support) {
    m_private_support = private_support;
    m_private_support_isSet = true;
}

bool OAIChannel::is_private_support_Set() const{
    return m_private_support_isSet;
}

bool OAIChannel::is_private_support_Valid() const{
    return m_private_support_isValid;
}

QString OAIChannel::getTitle() const {
    return m_title;
}
void OAIChannel::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIChannel::is_title_Set() const{
    return m_title_isSet;
}

bool OAIChannel::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIChannel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_discussion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_broadcast_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_support_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
