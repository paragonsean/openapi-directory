/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPortfolioMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPortfolioMetadata::OAIPortfolioMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPortfolioMetadata::OAIPortfolioMetadata() {
    this->initializeModel();
}

OAIPortfolioMetadata::~OAIPortfolioMetadata() {}

void OAIPortfolioMetadata::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;
}

void OAIPortfolioMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPortfolioMetadata::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;
}

QString OAIPortfolioMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPortfolioMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    return obj;
}

QString OAIPortfolioMetadata::getCategory() const {
    return m_category;
}
void OAIPortfolioMetadata::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIPortfolioMetadata::is_category_Set() const{
    return m_category_isSet;
}

bool OAIPortfolioMetadata::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIPortfolioMetadata::getLevel() const {
    return m_level;
}
void OAIPortfolioMetadata::setLevel(const QString &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIPortfolioMetadata::is_level_Set() const{
    return m_level_isSet;
}

bool OAIPortfolioMetadata::is_level_Valid() const{
    return m_level_isValid;
}

QList<QString> OAIPortfolioMetadata::getTags() const {
    return m_tags;
}
void OAIPortfolioMetadata::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPortfolioMetadata::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPortfolioMetadata::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIPortfolioMetadata::getTopic() const {
    return m_topic;
}
void OAIPortfolioMetadata::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAIPortfolioMetadata::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAIPortfolioMetadata::is_topic_Valid() const{
    return m_topic_isValid;
}

bool OAIPortfolioMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPortfolioMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
