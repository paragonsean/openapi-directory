/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISocialNotesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISocialNotesResponse::OAISocialNotesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISocialNotesResponse::OAISocialNotesResponse() {
    this->initializeModel();
}

OAISocialNotesResponse::~OAISocialNotesResponse() {}

void OAISocialNotesResponse::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_page_id_isSet = false;
    m_page_id_isValid = false;

    m_person_id_isSet = false;
    m_person_id_isValid = false;

    m_social_note_content_isSet = false;
    m_social_note_content_isValid = false;

    m_social_note_paragraph_id_isSet = false;
    m_social_note_paragraph_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAISocialNotesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISocialNotesResponse::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_page_id_isValid = ::OpenAPI::fromJsonValue(m_page_id, json[QString("pageId")]);
    m_page_id_isSet = !json[QString("pageId")].isNull() && m_page_id_isValid;

    m_person_id_isValid = ::OpenAPI::fromJsonValue(m_person_id, json[QString("personId")]);
    m_person_id_isSet = !json[QString("personId")].isNull() && m_person_id_isValid;

    m_social_note_content_isValid = ::OpenAPI::fromJsonValue(m_social_note_content, json[QString("social-note-content")]);
    m_social_note_content_isSet = !json[QString("social-note-content")].isNull() && m_social_note_content_isValid;

    m_social_note_paragraph_id_isValid = ::OpenAPI::fromJsonValue(m_social_note_paragraph_id, json[QString("social-note-paragraphId")]);
    m_social_note_paragraph_id_isSet = !json[QString("social-note-paragraphId")].isNull() && m_social_note_paragraph_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAISocialNotesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISocialNotesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_page_id_isSet) {
        obj.insert(QString("pageId"), ::OpenAPI::toJsonValue(m_page_id));
    }
    if (m_person_id_isSet) {
        obj.insert(QString("personId"), ::OpenAPI::toJsonValue(m_person_id));
    }
    if (m_social_note_content_isSet) {
        obj.insert(QString("social-note-content"), ::OpenAPI::toJsonValue(m_social_note_content));
    }
    if (m_social_note_paragraph_id_isSet) {
        obj.insert(QString("social-note-paragraphId"), ::OpenAPI::toJsonValue(m_social_note_paragraph_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAISocialNotesResponse::getEmail() const {
    return m_email;
}
void OAISocialNotesResponse::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAISocialNotesResponse::is_email_Set() const{
    return m_email_isSet;
}

bool OAISocialNotesResponse::is_email_Valid() const{
    return m_email_isValid;
}

QString OAISocialNotesResponse::getFirstName() const {
    return m_first_name;
}
void OAISocialNotesResponse::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAISocialNotesResponse::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAISocialNotesResponse::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAISocialNotesResponse::getLastName() const {
    return m_last_name;
}
void OAISocialNotesResponse::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAISocialNotesResponse::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAISocialNotesResponse::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAISocialNotesResponse::getPageId() const {
    return m_page_id;
}
void OAISocialNotesResponse::setPageId(const QString &page_id) {
    m_page_id = page_id;
    m_page_id_isSet = true;
}

bool OAISocialNotesResponse::is_page_id_Set() const{
    return m_page_id_isSet;
}

bool OAISocialNotesResponse::is_page_id_Valid() const{
    return m_page_id_isValid;
}

QString OAISocialNotesResponse::getPersonId() const {
    return m_person_id;
}
void OAISocialNotesResponse::setPersonId(const QString &person_id) {
    m_person_id = person_id;
    m_person_id_isSet = true;
}

bool OAISocialNotesResponse::is_person_id_Set() const{
    return m_person_id_isSet;
}

bool OAISocialNotesResponse::is_person_id_Valid() const{
    return m_person_id_isValid;
}

QString OAISocialNotesResponse::getSocialNoteContent() const {
    return m_social_note_content;
}
void OAISocialNotesResponse::setSocialNoteContent(const QString &social_note_content) {
    m_social_note_content = social_note_content;
    m_social_note_content_isSet = true;
}

bool OAISocialNotesResponse::is_social_note_content_Set() const{
    return m_social_note_content_isSet;
}

bool OAISocialNotesResponse::is_social_note_content_Valid() const{
    return m_social_note_content_isValid;
}

QString OAISocialNotesResponse::getSocialNoteParagraphId() const {
    return m_social_note_paragraph_id;
}
void OAISocialNotesResponse::setSocialNoteParagraphId(const QString &social_note_paragraph_id) {
    m_social_note_paragraph_id = social_note_paragraph_id;
    m_social_note_paragraph_id_isSet = true;
}

bool OAISocialNotesResponse::is_social_note_paragraph_id_Set() const{
    return m_social_note_paragraph_id_isSet;
}

bool OAISocialNotesResponse::is_social_note_paragraph_id_Valid() const{
    return m_social_note_paragraph_id_isValid;
}

QString OAISocialNotesResponse::getUserId() const {
    return m_user_id;
}
void OAISocialNotesResponse::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAISocialNotesResponse::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAISocialNotesResponse::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAISocialNotesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_note_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_note_paragraph_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISocialNotesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
