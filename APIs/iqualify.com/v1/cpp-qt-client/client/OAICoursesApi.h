/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICoursesApi_H
#define OAI_OAICoursesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActivationResponse.h"
#include "OAICourseMetaResponse.h"
#include "OAICourseResponse.h"
#include "OAIError.h"
#include "OAIPermission_to_be_granted_to_the_user_.h"
#include "OAIUserPermission.h"
#include "OAI_courses__rootContentId__permissions__userEmail__post_201_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICoursesApi : public QObject {
    Q_OBJECT

public:
    OAICoursesApi(const int timeOut = 0);
    ~OAICoursesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_id QString [required]
    */
    virtual void coursesContentIdActivationsGet(const QString &content_id);

    /**
    * @param[in]  content_id QString [required]
    */
    virtual void coursesContentIdGet(const QString &content_id);

    /**
    * @param[in]  content_id QString [required]
    */
    virtual void coursesContentIdPermissionsGet(const QString &content_id);


    virtual void coursesGet();

    /**
    * @param[in]  root_content_id QString [required]
    * @param[in]  user_email QString [required]
    * @param[in]  oai_permission_to_be_granted_to_the_user_ OAIPermission_to_be_granted_to_the_user_ [required]
    */
    virtual void coursesRootContentIdPermissionsUserEmailPost(const QString &root_content_id, const QString &user_email, const OAIPermission_to_be_granted_to_the_user_ &oai_permission_to_be_granted_to_the_user_);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void coursesContentIdActivationsGetCallback(OAIHttpRequestWorker *worker);
    void coursesContentIdGetCallback(OAIHttpRequestWorker *worker);
    void coursesContentIdPermissionsGetCallback(OAIHttpRequestWorker *worker);
    void coursesGetCallback(OAIHttpRequestWorker *worker);
    void coursesRootContentIdPermissionsUserEmailPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void coursesContentIdActivationsGetSignal(OAIActivationResponse summary);
    void coursesContentIdGetSignal(OAICourseMetaResponse summary);
    void coursesContentIdPermissionsGetSignal(OAIUserPermission summary);
    void coursesGetSignal(QList<OAICourseResponse> summary);
    void coursesRootContentIdPermissionsUserEmailPostSignal(OAI_courses__rootContentId__permissions__userEmail__post_201_response summary);


    void coursesContentIdActivationsGetSignalFull(OAIHttpRequestWorker *worker, OAIActivationResponse summary);
    void coursesContentIdGetSignalFull(OAIHttpRequestWorker *worker, OAICourseMetaResponse summary);
    void coursesContentIdPermissionsGetSignalFull(OAIHttpRequestWorker *worker, OAIUserPermission summary);
    void coursesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICourseResponse> summary);
    void coursesRootContentIdPermissionsUserEmailPostSignalFull(OAIHttpRequestWorker *worker, OAI_courses__rootContentId__permissions__userEmail__post_201_response summary);

    Q_DECL_DEPRECATED_X("Use coursesContentIdActivationsGetSignalError() instead")
    void coursesContentIdActivationsGetSignalE(OAIActivationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void coursesContentIdActivationsGetSignalError(OAIActivationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use coursesContentIdGetSignalError() instead")
    void coursesContentIdGetSignalE(OAICourseMetaResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void coursesContentIdGetSignalError(OAICourseMetaResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use coursesContentIdPermissionsGetSignalError() instead")
    void coursesContentIdPermissionsGetSignalE(OAIUserPermission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void coursesContentIdPermissionsGetSignalError(OAIUserPermission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use coursesGetSignalError() instead")
    void coursesGetSignalE(QList<OAICourseResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void coursesGetSignalError(QList<OAICourseResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use coursesRootContentIdPermissionsUserEmailPostSignalError() instead")
    void coursesRootContentIdPermissionsUserEmailPostSignalE(OAI_courses__rootContentId__permissions__userEmail__post_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void coursesRootContentIdPermissionsUserEmailPostSignalError(OAI_courses__rootContentId__permissions__userEmail__post_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use coursesContentIdActivationsGetSignalErrorFull() instead")
    void coursesContentIdActivationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void coursesContentIdActivationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use coursesContentIdGetSignalErrorFull() instead")
    void coursesContentIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void coursesContentIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use coursesContentIdPermissionsGetSignalErrorFull() instead")
    void coursesContentIdPermissionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void coursesContentIdPermissionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use coursesGetSignalErrorFull() instead")
    void coursesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void coursesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use coursesRootContentIdPermissionsUserEmailPostSignalErrorFull() instead")
    void coursesRootContentIdPermissionsUserEmailPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void coursesRootContentIdPermissionsUserEmailPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
