/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBadgeExpiry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBadgeExpiry::OAIBadgeExpiry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBadgeExpiry::OAIBadgeExpiry() {
    this->initializeModel();
}

OAIBadgeExpiry::~OAIBadgeExpiry() {}

void OAIBadgeExpiry::initializeModel() {

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_expires_isSet = false;
    m_expires_isValid = false;

    m_expiry_type_isSet = false;
    m_expiry_type_isValid = false;

    m_timeframe_amount_isSet = false;
    m_timeframe_amount_isValid = false;

    m_timeframe_unit_isSet = false;
    m_timeframe_unit_isValid = false;
}

void OAIBadgeExpiry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBadgeExpiry::fromJsonObject(QJsonObject json) {

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_expires_isValid = ::OpenAPI::fromJsonValue(m_expires, json[QString("expires")]);
    m_expires_isSet = !json[QString("expires")].isNull() && m_expires_isValid;

    m_expiry_type_isValid = ::OpenAPI::fromJsonValue(m_expiry_type, json[QString("expiryType")]);
    m_expiry_type_isSet = !json[QString("expiryType")].isNull() && m_expiry_type_isValid;

    m_timeframe_amount_isValid = ::OpenAPI::fromJsonValue(m_timeframe_amount, json[QString("timeframeAmount")]);
    m_timeframe_amount_isSet = !json[QString("timeframeAmount")].isNull() && m_timeframe_amount_isValid;

    m_timeframe_unit_isValid = ::OpenAPI::fromJsonValue(m_timeframe_unit, json[QString("timeframeUnit")]);
    m_timeframe_unit_isSet = !json[QString("timeframeUnit")].isNull() && m_timeframe_unit_isValid;
}

QString OAIBadgeExpiry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBadgeExpiry::asJsonObject() const {
    QJsonObject obj;
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_expires_isSet) {
        obj.insert(QString("expires"), ::OpenAPI::toJsonValue(m_expires));
    }
    if (m_expiry_type_isSet) {
        obj.insert(QString("expiryType"), ::OpenAPI::toJsonValue(m_expiry_type));
    }
    if (m_timeframe_amount_isSet) {
        obj.insert(QString("timeframeAmount"), ::OpenAPI::toJsonValue(m_timeframe_amount));
    }
    if (m_timeframe_unit_isSet) {
        obj.insert(QString("timeframeUnit"), ::OpenAPI::toJsonValue(m_timeframe_unit));
    }
    return obj;
}

QDateTime OAIBadgeExpiry::getExpirationDate() const {
    return m_expiration_date;
}
void OAIBadgeExpiry::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIBadgeExpiry::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIBadgeExpiry::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

bool OAIBadgeExpiry::isExpires() const {
    return m_expires;
}
void OAIBadgeExpiry::setExpires(const bool &expires) {
    m_expires = expires;
    m_expires_isSet = true;
}

bool OAIBadgeExpiry::is_expires_Set() const{
    return m_expires_isSet;
}

bool OAIBadgeExpiry::is_expires_Valid() const{
    return m_expires_isValid;
}

QString OAIBadgeExpiry::getExpiryType() const {
    return m_expiry_type;
}
void OAIBadgeExpiry::setExpiryType(const QString &expiry_type) {
    m_expiry_type = expiry_type;
    m_expiry_type_isSet = true;
}

bool OAIBadgeExpiry::is_expiry_type_Set() const{
    return m_expiry_type_isSet;
}

bool OAIBadgeExpiry::is_expiry_type_Valid() const{
    return m_expiry_type_isValid;
}

double OAIBadgeExpiry::getTimeframeAmount() const {
    return m_timeframe_amount;
}
void OAIBadgeExpiry::setTimeframeAmount(const double &timeframe_amount) {
    m_timeframe_amount = timeframe_amount;
    m_timeframe_amount_isSet = true;
}

bool OAIBadgeExpiry::is_timeframe_amount_Set() const{
    return m_timeframe_amount_isSet;
}

bool OAIBadgeExpiry::is_timeframe_amount_Valid() const{
    return m_timeframe_amount_isValid;
}

QString OAIBadgeExpiry::getTimeframeUnit() const {
    return m_timeframe_unit;
}
void OAIBadgeExpiry::setTimeframeUnit(const QString &timeframe_unit) {
    m_timeframe_unit = timeframe_unit;
    m_timeframe_unit_isSet = true;
}

bool OAIBadgeExpiry::is_timeframe_unit_Set() const{
    return m_timeframe_unit_isSet;
}

bool OAIBadgeExpiry::is_timeframe_unit_Valid() const{
    return m_timeframe_unit_isValid;
}

bool OAIBadgeExpiry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeframe_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeframe_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBadgeExpiry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
