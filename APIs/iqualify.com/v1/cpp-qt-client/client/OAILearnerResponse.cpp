/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILearnerResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILearnerResponse::OAILearnerResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILearnerResponse::OAILearnerResponse() {
    this->initializeModel();
}

OAILearnerResponse::~OAILearnerResponse() {}

void OAILearnerResponse::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_offerings_isSet = false;
    m_offerings_isValid = false;

    m_person_id_isSet = false;
    m_person_id_isValid = false;
}

void OAILearnerResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILearnerResponse::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_offerings_isValid = ::OpenAPI::fromJsonValue(m_offerings, json[QString("offerings")]);
    m_offerings_isSet = !json[QString("offerings")].isNull() && m_offerings_isValid;

    m_person_id_isValid = ::OpenAPI::fromJsonValue(m_person_id, json[QString("personId")]);
    m_person_id_isSet = !json[QString("personId")].isNull() && m_person_id_isValid;
}

QString OAILearnerResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILearnerResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_offerings.size() > 0) {
        obj.insert(QString("offerings"), ::OpenAPI::toJsonValue(m_offerings));
    }
    if (m_person_id_isSet) {
        obj.insert(QString("personId"), ::OpenAPI::toJsonValue(m_person_id));
    }
    return obj;
}

QString OAILearnerResponse::getEmail() const {
    return m_email;
}
void OAILearnerResponse::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAILearnerResponse::is_email_Set() const{
    return m_email_isSet;
}

bool OAILearnerResponse::is_email_Valid() const{
    return m_email_isValid;
}

QString OAILearnerResponse::getFirstName() const {
    return m_first_name;
}
void OAILearnerResponse::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAILearnerResponse::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAILearnerResponse::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAILearnerResponse::getId() const {
    return m_id;
}
void OAILearnerResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILearnerResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAILearnerResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILearnerResponse::getLastName() const {
    return m_last_name;
}
void OAILearnerResponse::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAILearnerResponse::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAILearnerResponse::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QList<OAIOfferingProgressRow> OAILearnerResponse::getOfferings() const {
    return m_offerings;
}
void OAILearnerResponse::setOfferings(const QList<OAIOfferingProgressRow> &offerings) {
    m_offerings = offerings;
    m_offerings_isSet = true;
}

bool OAILearnerResponse::is_offerings_Set() const{
    return m_offerings_isSet;
}

bool OAILearnerResponse::is_offerings_Valid() const{
    return m_offerings_isValid;
}

QString OAILearnerResponse::getPersonId() const {
    return m_person_id;
}
void OAILearnerResponse::setPersonId(const QString &person_id) {
    m_person_id = person_id;
    m_person_id_isSet = true;
}

bool OAILearnerResponse::is_person_id_Set() const{
    return m_person_id_isSet;
}

bool OAILearnerResponse::is_person_id_Valid() const{
    return m_person_id_isValid;
}

bool OAILearnerResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offerings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILearnerResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
