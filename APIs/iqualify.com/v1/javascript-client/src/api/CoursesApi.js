/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivationResponse from '../model/ActivationResponse';
import CourseMetaResponse from '../model/CourseMetaResponse';
import CourseResponse from '../model/CourseResponse';
import CoursesRootContentIdPermissionsUserEmailPost201Response from '../model/CoursesRootContentIdPermissionsUserEmailPost201Response';
import Error from '../model/Error';
import PermissionToBeGrantedToTheUser from '../model/PermissionToBeGrantedToTheUser';
import UserPermission from '../model/UserPermission';

/**
* Courses service.
* @module api/CoursesApi
* @version v1
*/
export default class CoursesApi {

    /**
    * Constructs a new CoursesApi. 
    * @alias module:api/CoursesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the coursesContentIdActivationsGet operation.
     * @callback module:api/CoursesApi~coursesContentIdActivationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find activations for a contentId
     * Responds with all activations for the contentId provided.
     * @param {String} contentId The content Id
     * @param {module:api/CoursesApi~coursesContentIdActivationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivationResponse}
     */
    coursesContentIdActivationsGet(contentId, callback) {
      let postBody = null;
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling coursesContentIdActivationsGet");
      }

      let pathParams = {
        'contentId': contentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActivationResponse;
      return this.apiClient.callApi(
        '/courses/{contentId}/activations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesContentIdGet operation.
     * @callback module:api/CoursesApi~coursesContentIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CourseMetaResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find course by contentId
     * Responds with a course matching the contentId.
     * @param {String} contentId The content Id
     * @param {module:api/CoursesApi~coursesContentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CourseMetaResponse}
     */
    coursesContentIdGet(contentId, callback) {
      let postBody = null;
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling coursesContentIdGet");
      }

      let pathParams = {
        'contentId': contentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CourseMetaResponse;
      return this.apiClient.callApi(
        '/courses/{contentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesContentIdPermissionsGet operation.
     * @callback module:api/CoursesApi~coursesContentIdPermissionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserPermission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find users who have access to the contentId provided
     * Responds with users who have access to a specific course by contentId.
     * @param {String} contentId The content Id
     * @param {module:api/CoursesApi~coursesContentIdPermissionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserPermission}
     */
    coursesContentIdPermissionsGet(contentId, callback) {
      let postBody = null;
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling coursesContentIdPermissionsGet");
      }

      let pathParams = {
        'contentId': contentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserPermission;
      return this.apiClient.callApi(
        '/courses/{contentId}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesGet operation.
     * @callback module:api/CoursesApi~coursesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CourseResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find courses
     * Responds with all courses (draft and published.)
     * @param {module:api/CoursesApi~coursesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CourseResponse>}
     */
    coursesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CourseResponse];
      return this.apiClient.callApi(
        '/courses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesRootContentIdPermissionsUserEmailPost operation.
     * @callback module:api/CoursesApi~coursesRootContentIdPermissionsUserEmailPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CoursesRootContentIdPermissionsUserEmailPost201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update course access
     * Provide a user with access to a specific course by rootContentId.
     * @param {String} rootContentId The content Id
     * @param {String} userEmail The user email
     * @param {module:model/PermissionToBeGrantedToTheUser} permissionToBeGrantedToTheUser 
     * @param {module:api/CoursesApi~coursesRootContentIdPermissionsUserEmailPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CoursesRootContentIdPermissionsUserEmailPost201Response}
     */
    coursesRootContentIdPermissionsUserEmailPost(rootContentId, userEmail, permissionToBeGrantedToTheUser, callback) {
      let postBody = permissionToBeGrantedToTheUser;
      // verify the required parameter 'rootContentId' is set
      if (rootContentId === undefined || rootContentId === null) {
        throw new Error("Missing the required parameter 'rootContentId' when calling coursesRootContentIdPermissionsUserEmailPost");
      }
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling coursesRootContentIdPermissionsUserEmailPost");
      }
      // verify the required parameter 'permissionToBeGrantedToTheUser' is set
      if (permissionToBeGrantedToTheUser === undefined || permissionToBeGrantedToTheUser === null) {
        throw new Error("Missing the required parameter 'permissionToBeGrantedToTheUser' when calling coursesRootContentIdPermissionsUserEmailPost");
      }

      let pathParams = {
        'rootContentId': rootContentId,
        'userEmail': userEmail
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CoursesRootContentIdPermissionsUserEmailPost201Response;
      return this.apiClient.callApi(
        '/courses/{rootContentId}/permissions/{userEmail}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
