/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivityAttemptOpenResponse from '../model/ActivityAttemptOpenResponse';
import AssignmentMarkResponse from '../model/AssignmentMarkResponse';
import Error from '../model/Error';
import QuizMarkResponse from '../model/QuizMarkResponse';
import SubmissionMarkResponse from '../model/SubmissionMarkResponse';

/**
* AssessmentData service.
* @module api/AssessmentDataApi
* @version v1
*/
export default class AssessmentDataApi {

    /**
    * Constructs a new AssessmentDataApi. 
    * @alias module:api/AssessmentDataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the offeringsOfferingIdAnalyticsActivitiesResponsesGet operation.
     * @callback module:api/AssessmentDataApi~offeringsOfferingIdAnalyticsActivitiesResponsesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ActivityAttemptOpenResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find open response activity attempts
     * Responds with all learner activity attempts for open response activities in an offering matching the offeringId.
     * @param {String} offeringId offering's id
     * @param {module:api/AssessmentDataApi~offeringsOfferingIdAnalyticsActivitiesResponsesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ActivityAttemptOpenResponse>}
     */
    offeringsOfferingIdAnalyticsActivitiesResponsesGet(offeringId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAnalyticsActivitiesResponsesGet");
      }

      let pathParams = {
        'offeringId': offeringId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ActivityAttemptOpenResponse];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/analytics/activities/responses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdAnalyticsMarksAssignmentsGet operation.
     * @callback module:api/AssessmentDataApi~offeringsOfferingIdAnalyticsMarksAssignmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssignmentMarkResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find assessment marks
     * Responds with all learner assessment marks in an offering matching the offeringId.
     * @param {String} offeringId offering's id
     * @param {module:api/AssessmentDataApi~offeringsOfferingIdAnalyticsMarksAssignmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssignmentMarkResponse>}
     */
    offeringsOfferingIdAnalyticsMarksAssignmentsGet(offeringId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAnalyticsMarksAssignmentsGet");
      }

      let pathParams = {
        'offeringId': offeringId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AssignmentMarkResponse];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/analytics/marks/assignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdAnalyticsMarksQuizzesGet operation.
     * @callback module:api/AssessmentDataApi~offeringsOfferingIdAnalyticsMarksQuizzesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuizMarkResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find quiz marks
     * Responds with all learner quiz marks in an offering matching the offeringId.
     * @param {String} offeringId offering's id
     * @param {module:api/AssessmentDataApi~offeringsOfferingIdAnalyticsMarksQuizzesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuizMarkResponse>}
     */
    offeringsOfferingIdAnalyticsMarksQuizzesGet(offeringId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAnalyticsMarksQuizzesGet");
      }

      let pathParams = {
        'offeringId': offeringId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [QuizMarkResponse];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/analytics/marks/quizzes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdAnalyticsSubmissionsAssignmentsGet operation.
     * @callback module:api/AssessmentDataApi~offeringsOfferingIdAnalyticsSubmissionsAssignmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssignmentMarkResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find submissions to assessments, including marks if any
     * Responds with all learner assessment submissions and marks, if any, in an offering matching the offeringId.
     * @param {String} offeringId offering's id
     * @param {module:api/AssessmentDataApi~offeringsOfferingIdAnalyticsSubmissionsAssignmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssignmentMarkResponse>}
     */
    offeringsOfferingIdAnalyticsSubmissionsAssignmentsGet(offeringId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAnalyticsSubmissionsAssignmentsGet");
      }

      let pathParams = {
        'offeringId': offeringId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AssignmentMarkResponse];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/analytics/submissions/assignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdAnalyticsSubmissionsOpenResponseAssessmentIdGet operation.
     * @callback module:api/AssessmentDataApi~offeringsOfferingIdAnalyticsSubmissionsOpenResponseAssessmentIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SubmissionMarkResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find submissions to a specified open response assessment, including marks if any
     * Responds with all learner assessment submissions and marks, if any, in a specified open response assessment.
     * @param {String} offeringId offering's id
     * @param {String} assessmentId assessment's id
     * @param {module:api/AssessmentDataApi~offeringsOfferingIdAnalyticsSubmissionsOpenResponseAssessmentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SubmissionMarkResponse>}
     */
    offeringsOfferingIdAnalyticsSubmissionsOpenResponseAssessmentIdGet(offeringId, assessmentId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAnalyticsSubmissionsOpenResponseAssessmentIdGet");
      }
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling offeringsOfferingIdAnalyticsSubmissionsOpenResponseAssessmentIdGet");
      }

      let pathParams = {
        'offeringId': offeringId,
        'assessmentId': assessmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SubmissionMarkResponse];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/analytics/submissions/open-response/{assessmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdAnalyticsSubmissionsUserEmailAssignmentsAssessmentIdGet operation.
     * @callback module:api/AssessmentDataApi~offeringsOfferingIdAnalyticsSubmissionsUserEmailAssignmentsAssessmentIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SubmissionMarkResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a learner's submission to a specified assessment, including marks if any
     * Responds with the learner's assessment submission and any marks for the submission.
     * @param {String} offeringId offering's id
     * @param {String} userEmail user's email
     * @param {String} assessmentId assessment's id
     * @param {module:api/AssessmentDataApi~offeringsOfferingIdAnalyticsSubmissionsUserEmailAssignmentsAssessmentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SubmissionMarkResponse>}
     */
    offeringsOfferingIdAnalyticsSubmissionsUserEmailAssignmentsAssessmentIdGet(offeringId, userEmail, assessmentId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAnalyticsSubmissionsUserEmailAssignmentsAssessmentIdGet");
      }
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling offeringsOfferingIdAnalyticsSubmissionsUserEmailAssignmentsAssessmentIdGet");
      }
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling offeringsOfferingIdAnalyticsSubmissionsUserEmailAssignmentsAssessmentIdGet");
      }

      let pathParams = {
        'offeringId': offeringId,
        'userEmail': userEmail,
        'assessmentId': assessmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SubmissionMarkResponse];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/analytics/submissions/{userEmail}/assignments/{assessmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
