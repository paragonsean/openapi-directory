/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Assessment from '../model/Assessment';
import AssessmentPendingSubmission from '../model/AssessmentPendingSubmission';
import AssessmentResponse from '../model/AssessmentResponse';
import Assignments from '../model/Assignments';
import Error from '../model/Error';
import OfferingActivitiesResponse from '../model/OfferingActivitiesResponse';
import OfferingsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest from '../model/OfferingsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest';

/**
* AssessmentManagement service.
* @module api/AssessmentManagementApi
* @version v1
*/
export default class AssessmentManagementApi {

    /**
    * Constructs a new AssessmentManagementApi. 
    * @alias module:api/AssessmentManagementApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the offeringsOfferingIdActivitiesOpenresponseGet operation.
     * @callback module:api/AssessmentManagementApi~offeringsOfferingIdActivitiesOpenresponseGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OfferingActivitiesResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find offering's activities
     * Responds with the activities in a specific offering.
     * @param {String} offeringId offering's id
     * @param {module:api/AssessmentManagementApi~offeringsOfferingIdActivitiesOpenresponseGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OfferingActivitiesResponse>}
     */
    offeringsOfferingIdActivitiesOpenresponseGet(offeringId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdActivitiesOpenresponseGet");
      }

      let pathParams = {
        'offeringId': offeringId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OfferingActivitiesResponse];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/activities/openresponse', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDelete operation.
     * @callback module:api/AssessmentManagementApi~offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove assessment document
     * Removes the assessment document file for a specified assessment in an offering.
     * @param {String} offeringId offering's id
     * @param {String} assessmentId assessment's id
     * @param {String} documentId documents's id
     * @param {module:api/AssessmentManagementApi~offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDelete(offeringId, assessmentId, documentId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDelete");
      }
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDelete");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling offeringsOfferingIdAssessmentsAssessmentIdDocumentsDocumentIdDelete");
      }

      let pathParams = {
        'offeringId': offeringId,
        'assessmentId': assessmentId,
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/offerings/{offeringId}/assessments/{assessmentId}/documents/{documentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdAssessmentsAssessmentIdPatch operation.
     * @callback module:api/AssessmentManagementApi~offeringsOfferingIdAssessmentsAssessmentIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssessmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update assessment details
     * Updates the assessment details for a specified assessment in an offering.
     * @param {String} offeringId offering's id
     * @param {String} assessmentId assessment's id
     * @param {module:model/Assessment} assessment 
     * @param {module:api/AssessmentManagementApi~offeringsOfferingIdAssessmentsAssessmentIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssessmentResponse}
     */
    offeringsOfferingIdAssessmentsAssessmentIdPatch(offeringId, assessmentId, assessment, callback) {
      let postBody = assessment;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAssessmentsAssessmentIdPatch");
      }
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling offeringsOfferingIdAssessmentsAssessmentIdPatch");
      }
      // verify the required parameter 'assessment' is set
      if (assessment === undefined || assessment === null) {
        throw new Error("Missing the required parameter 'assessment' when calling offeringsOfferingIdAssessmentsAssessmentIdPatch");
      }

      let pathParams = {
        'offeringId': offeringId,
        'assessmentId': assessmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssessmentResponse;
      return this.apiClient.callApi(
        '/offerings/{offeringId}/assessments/{assessmentId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatch operation.
     * @callback module:api/AssessmentManagementApi~offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the due dates for a learner's quiz attempt
     * Updates the due dates for a learner's quiz attempt specified by the assessmentId.
     * @param {String} offeringId offering's id
     * @param {String} assessmentId assessment's id
     * @param {String} userEmail user's email
     * @param {module:model/OfferingsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest} offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest 
     * @param {module:api/AssessmentManagementApi~offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatch(offeringId, assessmentId, userEmail, offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest, callback) {
      let postBody = offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatch");
      }
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatch");
      }
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatch");
      }
      // verify the required parameter 'offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest' is set
      if (offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest === undefined || offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest === null) {
        throw new Error("Missing the required parameter 'offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatchRequest' when calling offeringsOfferingIdAssessmentsAssessmentIdUserEmailPatch");
      }

      let pathParams = {
        'offeringId': offeringId,
        'assessmentId': assessmentId,
        'userEmail': userEmail
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/offerings/{offeringId}/assessments/{assessmentId}/{userEmail}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdAssessmentsGet operation.
     * @callback module:api/AssessmentManagementApi~offeringsOfferingIdAssessmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssessmentResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find offering's assessments
     * Responds with all assessments in an offering matching the offeringId.
     * @param {String} offeringId offering's id
     * @param {module:api/AssessmentManagementApi~offeringsOfferingIdAssessmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssessmentResponse>}
     */
    offeringsOfferingIdAssessmentsGet(offeringId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAssessmentsGet");
      }

      let pathParams = {
        'offeringId': offeringId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AssessmentResponse];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/assessments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdLearnersPendingSubmissionGet operation.
     * @callback module:api/AssessmentManagementApi~offeringsOfferingIdLearnersPendingSubmissionGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssessmentPendingSubmission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find learners with assessments pending x days before due date within the specified offeringId
     * Responds with learners who have one or more assessments due x days before the due date, with each assessment that is due, where x = the number of days specified in the request. The default is 3 days.
     * @param {String} offeringId offering's id
     * @param {Object} opts Optional parameters
     * @param {String} [days] days to assessment due date. Default is 3 days
     * @param {module:api/AssessmentManagementApi~offeringsOfferingIdLearnersPendingSubmissionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssessmentPendingSubmission>}
     */
    offeringsOfferingIdLearnersPendingSubmissionGet(offeringId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdLearnersPendingSubmissionGet");
      }

      let pathParams = {
        'offeringId': offeringId
      };
      let queryParams = {
        'days': opts['days']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AssessmentPendingSubmission];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/learners/pending-submission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDelete operation.
     * @callback module:api/AssessmentManagementApi~offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset user's assessment to draft state
     * Resets the user's submitted assessment to a draft state.
     * @param {String} offeringId offering's id
     * @param {String} userEmail user's email
     * @param {String} assessmentId assessment's id
     * @param {module:api/AssessmentManagementApi~offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDelete(offeringId, userEmail, assessmentId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDelete");
      }
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDelete");
      }
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling offeringsOfferingIdUsersUserEmailAssessmentsAssessmentIdDelete");
      }

      let pathParams = {
        'offeringId': offeringId,
        'userEmail': userEmail,
        'assessmentId': assessmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/offerings/{offeringId}/users/{userEmail}/assessments/{assessmentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGet operation.
     * @callback module:api/AssessmentManagementApi~offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Assignments>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find learner's open response assessment submissions
     * Responds with open response assessment submissions by a learner in an offering.
     * @param {String} offeringId offering's id
     * @param {String} userEmail user's email
     * @param {module:api/AssessmentManagementApi~offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Assignments>}
     */
    offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGet(offeringId, userEmail, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGet");
      }
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling offeringsOfferingIdUsersUserEmailSubmissionsOpenResponseGet");
      }

      let pathParams = {
        'offeringId': offeringId,
        'userEmail': userEmail
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Assignments];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/users/{userEmail}/submissions/open-response', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
