/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import LearnerProgressResponse from '../model/LearnerProgressResponse';
import LearnerResponse from '../model/LearnerResponse';
import SocialNotesResponse from '../model/SocialNotesResponse';
import UnitReactionsAnalyticsResponse from '../model/UnitReactionsAnalyticsResponse';
import UsersAllProgressGet200Response from '../model/UsersAllProgressGet200Response';
import UsersUserEmailOfferingsOfferingIdProgressGet200Response from '../model/UsersUserEmailOfferingsOfferingIdProgressGet200Response';

/**
* LearnerActivity service.
* @module api/LearnerActivityApi
* @version v1
*/
export default class LearnerActivityApi {

    /**
    * Constructs a new LearnerActivityApi. 
    * @alias module:api/LearnerActivityApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the offeringsOfferingIdAnalyticsLearnersProgressGet operation.
     * @callback module:api/LearnerActivityApi~offeringsOfferingIdAnalyticsLearnersProgressGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LearnerProgressResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find learner progress in a specified offering
     * Responds with all learner progress in the offering.
     * @param {String} offeringId offering's id
     * @param {module:api/LearnerActivityApi~offeringsOfferingIdAnalyticsLearnersProgressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LearnerProgressResponse>}
     */
    offeringsOfferingIdAnalyticsLearnersProgressGet(offeringId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAnalyticsLearnersProgressGet");
      }

      let pathParams = {
        'offeringId': offeringId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LearnerProgressResponse];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/analytics/learners-progress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdAnalyticsSocialNotesGet operation.
     * @callback module:api/LearnerActivityApi~offeringsOfferingIdAnalyticsSocialNotesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SocialNotesResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find shared social notes in an offering
     * Responds with all shared social notes in a specified offering.
     * @param {String} offeringId offering's id
     * @param {module:api/LearnerActivityApi~offeringsOfferingIdAnalyticsSocialNotesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SocialNotesResponse>}
     */
    offeringsOfferingIdAnalyticsSocialNotesGet(offeringId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAnalyticsSocialNotesGet");
      }

      let pathParams = {
        'offeringId': offeringId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SocialNotesResponse];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/analytics/social-notes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdAnalyticsUnitReactionsGet operation.
     * @callback module:api/LearnerActivityApi~offeringsOfferingIdAnalyticsUnitReactionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UnitReactionsAnalyticsResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find unit reactions
     * Responds with user reactions to units in a specified offering.
     * @param {String} offeringId offering's id
     * @param {module:api/LearnerActivityApi~offeringsOfferingIdAnalyticsUnitReactionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UnitReactionsAnalyticsResponse>}
     */
    offeringsOfferingIdAnalyticsUnitReactionsGet(offeringId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAnalyticsUnitReactionsGet");
      }

      let pathParams = {
        'offeringId': offeringId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UnitReactionsAnalyticsResponse];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/analytics/unit-reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersAllProgressGet operation.
     * @callback module:api/LearnerActivityApi~usersAllProgressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersAllProgressGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find learner progress in all offerings
     * Responds with all learners' progress in all offerings.
     * @param {Object} opts Optional parameters
     * @param {String} [top = '50')] Returns only the first n results.
     * @param {String} [orderby] Sorts the results.
     * @param {String} [filter] Filters the results, based on a Boolean condition.
     * @param {module:api/LearnerActivityApi~usersAllProgressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersAllProgressGet200Response}
     */
    usersAllProgressGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '$top': opts['top'],
        '$orderby': opts['orderby'],
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersAllProgressGet200Response;
      return this.apiClient.callApi(
        '/users/all/progress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserEmailOfferingsOfferingIdProgressGet operation.
     * @callback module:api/LearnerActivityApi~usersUserEmailOfferingsOfferingIdProgressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersUserEmailOfferingsOfferingIdProgressGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find learner's progress in a specified offering
     * Responds with the learner's progress in a specified offering.
     * @param {String} userEmail user's email
     * @param {String} offeringId offering's id
     * @param {module:api/LearnerActivityApi~usersUserEmailOfferingsOfferingIdProgressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersUserEmailOfferingsOfferingIdProgressGet200Response}
     */
    usersUserEmailOfferingsOfferingIdProgressGet(userEmail, offeringId, callback) {
      let postBody = null;
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling usersUserEmailOfferingsOfferingIdProgressGet");
      }
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling usersUserEmailOfferingsOfferingIdProgressGet");
      }

      let pathParams = {
        'userEmail': userEmail,
        'offeringId': offeringId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersUserEmailOfferingsOfferingIdProgressGet200Response;
      return this.apiClient.callApi(
        '/users/{userEmail}/offerings/{offeringId}/progress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserEmailProgressGet operation.
     * @callback module:api/LearnerActivityApi~usersUserEmailProgressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LearnerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find learner's progress in offerings
     * Responds with the specified learner's progress in all offerings.
     * @param {String} userEmail user's email
     * @param {module:api/LearnerActivityApi~usersUserEmailProgressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LearnerResponse}
     */
    usersUserEmailProgressGet(userEmail, callback) {
      let postBody = null;
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling usersUserEmailProgressGet");
      }

      let pathParams = {
        'userEmail': userEmail
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LearnerResponse;
      return this.apiClient.callApi(
        '/users/{userEmail}/progress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
