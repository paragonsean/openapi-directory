/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssessmentGroupRequired from '../model/AssessmentGroupRequired';
import AssessmentGroupResponse from '../model/AssessmentGroupResponse';
import Error from '../model/Error';
import OfferingsOfferingIdGroupsGroupIdLearnersPostRequest from '../model/OfferingsOfferingIdGroupsGroupIdLearnersPostRequest';
import UserResponse from '../model/UserResponse';

/**
* AssessmentGroups service.
* @module api/AssessmentGroupsApi
* @version v1
*/
export default class AssessmentGroupsApi {

    /**
    * Constructs a new AssessmentGroupsApi. 
    * @alias module:api/AssessmentGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the offeringsOfferingIdGroupsGet operation.
     * @callback module:api/AssessmentGroupsApi~offeringsOfferingIdGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssessmentGroupResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find assessment groups
     * Responds with a list of assessment groups in an offering.
     * @param {String} offeringId offering's id
     * @param {module:api/AssessmentGroupsApi~offeringsOfferingIdGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssessmentGroupResponse>}
     */
    offeringsOfferingIdGroupsGet(offeringId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdGroupsGet");
      }

      let pathParams = {
        'offeringId': offeringId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AssessmentGroupResponse];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdGroupsGroupIdLearnersGet operation.
     * @callback module:api/AssessmentGroupsApi~offeringsOfferingIdGroupsGroupIdLearnersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find learners in an assessment group
     * Responds with a list of learners in a specified assessment group.
     * @param {String} offeringId offering's id
     * @param {String} groupId Assessment group id
     * @param {module:api/AssessmentGroupsApi~offeringsOfferingIdGroupsGroupIdLearnersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserResponse>}
     */
    offeringsOfferingIdGroupsGroupIdLearnersGet(offeringId, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdGroupsGroupIdLearnersGet");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling offeringsOfferingIdGroupsGroupIdLearnersGet");
      }

      let pathParams = {
        'offeringId': offeringId,
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserResponse];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/groups/{groupId}/learners', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdGroupsGroupIdLearnersPost operation.
     * @callback module:api/AssessmentGroupsApi~offeringsOfferingIdGroupsGroupIdLearnersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a learner to an assessment group
     * Adds a learner into the specified assessment group.
     * @param {String} offeringId offering's id
     * @param {String} groupId Assessment group id
     * @param {module:model/OfferingsOfferingIdGroupsGroupIdLearnersPostRequest} offeringsOfferingIdGroupsGroupIdLearnersPostRequest 
     * @param {module:api/AssessmentGroupsApi~offeringsOfferingIdGroupsGroupIdLearnersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResponse}
     */
    offeringsOfferingIdGroupsGroupIdLearnersPost(offeringId, groupId, offeringsOfferingIdGroupsGroupIdLearnersPostRequest, callback) {
      let postBody = offeringsOfferingIdGroupsGroupIdLearnersPostRequest;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdGroupsGroupIdLearnersPost");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling offeringsOfferingIdGroupsGroupIdLearnersPost");
      }
      // verify the required parameter 'offeringsOfferingIdGroupsGroupIdLearnersPostRequest' is set
      if (offeringsOfferingIdGroupsGroupIdLearnersPostRequest === undefined || offeringsOfferingIdGroupsGroupIdLearnersPostRequest === null) {
        throw new Error("Missing the required parameter 'offeringsOfferingIdGroupsGroupIdLearnersPostRequest' when calling offeringsOfferingIdGroupsGroupIdLearnersPost");
      }

      let pathParams = {
        'offeringId': offeringId,
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserResponse;
      return this.apiClient.callApi(
        '/offerings/{offeringId}/groups/{groupId}/learners', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdGroupsGroupIdLearnersUserEmailDelete operation.
     * @callback module:api/AssessmentGroupsApi~offeringsOfferingIdGroupsGroupIdLearnersUserEmailDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a learner from an assessment group
     * Removes a learner from the specified assessment group.
     * @param {String} offeringId offering's id
     * @param {String} groupId Assessment group id
     * @param {String} userEmail user's email
     * @param {module:api/AssessmentGroupsApi~offeringsOfferingIdGroupsGroupIdLearnersUserEmailDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    offeringsOfferingIdGroupsGroupIdLearnersUserEmailDelete(offeringId, groupId, userEmail, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdGroupsGroupIdLearnersUserEmailDelete");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling offeringsOfferingIdGroupsGroupIdLearnersUserEmailDelete");
      }
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling offeringsOfferingIdGroupsGroupIdLearnersUserEmailDelete");
      }

      let pathParams = {
        'offeringId': offeringId,
        'groupId': groupId,
        'userEmail': userEmail
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/offerings/{offeringId}/groups/{groupId}/learners/{userEmail}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdGroupsPost operation.
     * @callback module:api/AssessmentGroupsApi~offeringsOfferingIdGroupsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssessmentGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an assessment group
     * Creates a new assessment group in an offering.
     * @param {String} offeringId offering's id
     * @param {module:model/AssessmentGroupRequired} assessmentGroupRequired 
     * @param {module:api/AssessmentGroupsApi~offeringsOfferingIdGroupsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssessmentGroupResponse}
     */
    offeringsOfferingIdGroupsPost(offeringId, assessmentGroupRequired, callback) {
      let postBody = assessmentGroupRequired;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdGroupsPost");
      }
      // verify the required parameter 'assessmentGroupRequired' is set
      if (assessmentGroupRequired === undefined || assessmentGroupRequired === null) {
        throw new Error("Missing the required parameter 'assessmentGroupRequired' when calling offeringsOfferingIdGroupsPost");
      }

      let pathParams = {
        'offeringId': offeringId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssessmentGroupResponse;
      return this.apiClient.callApi(
        '/offerings/{offeringId}/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
