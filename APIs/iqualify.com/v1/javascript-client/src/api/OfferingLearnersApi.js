/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import OfferingUser from '../model/OfferingUser';
import OfferingUserAddResponse from '../model/OfferingUserAddResponse';
import OfferingUserResponse from '../model/OfferingUserResponse';
import OfferingsOfferingIdUsersPost207ResponseInner from '../model/OfferingsOfferingIdUsersPost207ResponseInner';
import TransferRequest from '../model/TransferRequest';

/**
* OfferingLearners service.
* @module api/OfferingLearnersApi
* @version v1
*/
export default class OfferingLearnersApi {

    /**
    * Constructs a new OfferingLearnersApi. 
    * @alias module:api/OfferingLearnersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the offeringsOfferingIdUsersGet operation.
     * @callback module:api/OfferingLearnersApi~offeringsOfferingIdUsersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OfferingUserResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find offering's users
     * Responds with a list of users in the offering (facilitators, learners and markers.).
     * @param {String} offeringId offering's id
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [facilitators = 'true')] If true, facilitators are included in the results.
     * @param {module:model/String} [learners = 'true')] If true, learners are included in the results.
     * @param {module:model/String} [markers = 'true')] If true, markers are included in the results.
     * @param {module:api/OfferingLearnersApi~offeringsOfferingIdUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OfferingUserResponse>}
     */
    offeringsOfferingIdUsersGet(offeringId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdUsersGet");
      }

      let pathParams = {
        'offeringId': offeringId
      };
      let queryParams = {
        'facilitators': opts['facilitators'],
        'learners': opts['learners'],
        'markers': opts['markers']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OfferingUserResponse];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdUsersMarkerEmailMarksDelete operation.
     * @callback module:api/OfferingLearnersApi~offeringsOfferingIdUsersMarkerEmailMarksDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OfferingUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove learners from coach's marking list
     * Removes an array of learners from coach's marking list.
     * @param {String} offeringId offering's id
     * @param {String} markerEmail marker's email
     * @param {Array.<String>} requestBody array of learners e-mails
     * @param {module:api/OfferingLearnersApi~offeringsOfferingIdUsersMarkerEmailMarksDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OfferingUser>}
     */
    offeringsOfferingIdUsersMarkerEmailMarksDelete(offeringId, markerEmail, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdUsersMarkerEmailMarksDelete");
      }
      // verify the required parameter 'markerEmail' is set
      if (markerEmail === undefined || markerEmail === null) {
        throw new Error("Missing the required parameter 'markerEmail' when calling offeringsOfferingIdUsersMarkerEmailMarksDelete");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling offeringsOfferingIdUsersMarkerEmailMarksDelete");
      }

      let pathParams = {
        'offeringId': offeringId,
        'markerEmail': markerEmail
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [OfferingUser];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/users/{markerEmail}/marks', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdUsersMarkerEmailMarksGet operation.
     * @callback module:api/OfferingLearnersApi~offeringsOfferingIdUsersMarkerEmailMarksGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OfferingUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find Learners marked by a coach
     * Responds with all learners marked by the specified coach.
     * @param {String} offeringId offering's id
     * @param {String} markerEmail marker's email
     * @param {module:api/OfferingLearnersApi~offeringsOfferingIdUsersMarkerEmailMarksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OfferingUser>}
     */
    offeringsOfferingIdUsersMarkerEmailMarksGet(offeringId, markerEmail, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdUsersMarkerEmailMarksGet");
      }
      // verify the required parameter 'markerEmail' is set
      if (markerEmail === undefined || markerEmail === null) {
        throw new Error("Missing the required parameter 'markerEmail' when calling offeringsOfferingIdUsersMarkerEmailMarksGet");
      }

      let pathParams = {
        'offeringId': offeringId,
        'markerEmail': markerEmail
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OfferingUser];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/users/{markerEmail}/marks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdUsersMarkerEmailMarksPost operation.
     * @callback module:api/OfferingLearnersApi~offeringsOfferingIdUsersMarkerEmailMarksPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OfferingUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add learners to be marked by a coach
     * Adds an array of learners to be marked by the specified coach.
     * @param {String} offeringId offering's id
     * @param {String} markerEmail marker's email
     * @param {Array.<String>} requestBody array of learners e-mails
     * @param {module:api/OfferingLearnersApi~offeringsOfferingIdUsersMarkerEmailMarksPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OfferingUser>}
     */
    offeringsOfferingIdUsersMarkerEmailMarksPost(offeringId, markerEmail, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdUsersMarkerEmailMarksPost");
      }
      // verify the required parameter 'markerEmail' is set
      if (markerEmail === undefined || markerEmail === null) {
        throw new Error("Missing the required parameter 'markerEmail' when calling offeringsOfferingIdUsersMarkerEmailMarksPost");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling offeringsOfferingIdUsersMarkerEmailMarksPost");
      }

      let pathParams = {
        'offeringId': offeringId,
        'markerEmail': markerEmail
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [OfferingUser];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/users/{markerEmail}/marks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdUsersPost operation.
     * @callback module:api/OfferingLearnersApi~offeringsOfferingIdUsersPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OfferingUserAddResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds user to the offering
     * Adds one or more users to the offering.
     * @param {String} offeringId offering's id
     * @param {Array.<module:model/OfferingUser>} offeringUser 
     * @param {module:api/OfferingLearnersApi~offeringsOfferingIdUsersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OfferingUserAddResponse>}
     */
    offeringsOfferingIdUsersPost(offeringId, offeringUser, callback) {
      let postBody = offeringUser;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdUsersPost");
      }
      // verify the required parameter 'offeringUser' is set
      if (offeringUser === undefined || offeringUser === null) {
        throw new Error("Missing the required parameter 'offeringUser' when calling offeringsOfferingIdUsersPost");
      }

      let pathParams = {
        'offeringId': offeringId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [OfferingUserAddResponse];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdUsersUserEmailDelete operation.
     * @callback module:api/OfferingLearnersApi~offeringsOfferingIdUsersUserEmailDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes user from the offering
     * Removes a user from the offering.
     * @param {String} offeringId offering's id
     * @param {String} userEmail user's email
     * @param {module:api/OfferingLearnersApi~offeringsOfferingIdUsersUserEmailDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    offeringsOfferingIdUsersUserEmailDelete(offeringId, userEmail, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdUsersUserEmailDelete");
      }
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling offeringsOfferingIdUsersUserEmailDelete");
      }

      let pathParams = {
        'offeringId': offeringId,
        'userEmail': userEmail
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/offerings/{offeringId}/users/{userEmail}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserEmailTransferPatch operation.
     * @callback module:api/OfferingLearnersApi~usersUserEmailTransferPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer a user between offerings
     * Moves the user's access and progress from one offering to another.
     * @param {String} userEmail user's email
     * @param {module:model/TransferRequest} transferRequest transfer_data
     * @param {module:api/OfferingLearnersApi~usersUserEmailTransferPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserEmailTransferPatch(userEmail, transferRequest, callback) {
      let postBody = transferRequest;
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling usersUserEmailTransferPatch");
      }
      // verify the required parameter 'transferRequest' is set
      if (transferRequest === undefined || transferRequest === null) {
        throw new Error("Missing the required parameter 'transferRequest' when calling usersUserEmailTransferPatch");
      }

      let pathParams = {
        'userEmail': userEmail
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{userEmail}/transfer', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
