/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AwardedResponse from '../model/AwardedResponse';
import Badge from '../model/Badge';
import Error from '../model/Error';
import UserBadge from '../model/UserBadge';

/**
* Badges service.
* @module api/BadgesApi
* @version v1
*/
export default class BadgesApi {

    /**
    * Constructs a new BadgesApi. 
    * @alias module:api/BadgesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the offeringsOfferingIdBadgesGet operation.
     * @callback module:api/BadgesApi~offeringsOfferingIdBadgesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Badge} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find offering badges
     * Responds with the badge for an offering matching the offeringId.
     * @param {String} offeringId offering's id
     * @param {module:api/BadgesApi~offeringsOfferingIdBadgesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Badge}
     */
    offeringsOfferingIdBadgesGet(offeringId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdBadgesGet");
      }

      let pathParams = {
        'offeringId': offeringId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Badge;
      return this.apiClient.callApi(
        '/offerings/{offeringId}/badges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdUsersUserEmailBadgesAwardPost operation.
     * @callback module:api/BadgesApi~offeringsOfferingIdUsersUserEmailBadgesAwardPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Award badge
     * Awards a badge to a user in the offering.
     * @param {String} offeringId offering's id
     * @param {String} userEmail user's email
     * @param {module:api/BadgesApi~offeringsOfferingIdUsersUserEmailBadgesAwardPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardedResponse}
     */
    offeringsOfferingIdUsersUserEmailBadgesAwardPost(offeringId, userEmail, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdUsersUserEmailBadgesAwardPost");
      }
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling offeringsOfferingIdUsersUserEmailBadgesAwardPost");
      }

      let pathParams = {
        'offeringId': offeringId,
        'userEmail': userEmail
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AwardedResponse;
      return this.apiClient.callApi(
        '/offerings/{offeringId}/users/{userEmail}/badges/award', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserEmailBadgesGet operation.
     * @callback module:api/BadgesApi~usersUserEmailBadgesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserBadge>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find user's badges
     * Responds with all badges that the specified user has been awarded.
     * @param {String} userEmail user's email
     * @param {module:api/BadgesApi~usersUserEmailBadgesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserBadge>}
     */
    usersUserEmailBadgesGet(userEmail, callback) {
      let postBody = null;
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling usersUserEmailBadgesGet");
      }

      let pathParams = {
        'userEmail': userEmail
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserBadge];
      return this.apiClient.callApi(
        '/users/{userEmail}/badges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
