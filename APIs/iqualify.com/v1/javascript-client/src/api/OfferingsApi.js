/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Offering from '../model/Offering';
import OfferingMetadataResponse from '../model/OfferingMetadataResponse';
import OfferingRequired from '../model/OfferingRequired';
import PortfolioActivations from '../model/PortfolioActivations';

/**
* Offerings service.
* @module api/OfferingsApi
* @version v1
*/
export default class OfferingsApi {

    /**
    * Constructs a new OfferingsApi. 
    * @alias module:api/OfferingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the offeringsCurrentGet operation.
     * @callback module:api/OfferingsApi~offeringsCurrentGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OfferingMetadataResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find active offerings
     * Responds with active offerings for your organisation.
     * @param {module:api/OfferingsApi~offeringsCurrentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OfferingMetadataResponse>}
     */
    offeringsCurrentGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OfferingMetadataResponse];
      return this.apiClient.callApi(
        '/offerings/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsFutureGet operation.
     * @callback module:api/OfferingsApi~offeringsFutureGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OfferingMetadataResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find scheduled offerings
     * Responds with scheduled offerings for your organisation. Scheduled offerings have a start date after today's date (inclusive).
     * @param {module:api/OfferingsApi~offeringsFutureGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OfferingMetadataResponse>}
     */
    offeringsFutureGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OfferingMetadataResponse];
      return this.apiClient.callApi(
        '/offerings/future', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsGet operation.
     * @callback module:api/OfferingsApi~offeringsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OfferingMetadataResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find current, past and future offerings
     * Responds with all offerings for your organisation.
     * @param {module:api/OfferingsApi~offeringsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OfferingMetadataResponse>}
     */
    offeringsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OfferingMetadataResponse];
      return this.apiClient.callApi(
        '/offerings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsInfoTextPatternGet operation.
     * @callback module:api/OfferingsApi~offeringsInfoTextPatternGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PortfolioActivations>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find offerings where info field matches the specified textPattern
     * Find offerings where info field matches the specified text pattern.
     * @param {String} textPattern Text pattern to search for (minimum of 3 characters length).
     * @param {module:api/OfferingsApi~offeringsInfoTextPatternGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PortfolioActivations>}
     */
    offeringsInfoTextPatternGet(textPattern, callback) {
      let postBody = null;
      // verify the required parameter 'textPattern' is set
      if (textPattern === undefined || textPattern === null) {
        throw new Error("Missing the required parameter 'textPattern' when calling offeringsInfoTextPatternGet");
      }

      let pathParams = {
        'textPattern': textPattern
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PortfolioActivations];
      return this.apiClient.callApi(
        '/offerings/info/{textPattern}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdGet operation.
     * @callback module:api/OfferingsApi~offeringsOfferingIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OfferingMetadataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find offering by ID
     * Responds with an offering matching the offeringId.
     * @param {String} offeringId offering's id
     * @param {module:api/OfferingsApi~offeringsOfferingIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OfferingMetadataResponse}
     */
    offeringsOfferingIdGet(offeringId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdGet");
      }

      let pathParams = {
        'offeringId': offeringId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OfferingMetadataResponse;
      return this.apiClient.callApi(
        '/offerings/{offeringId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdPatch operation.
     * @callback module:api/OfferingsApi~offeringsOfferingIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OfferingMetadataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update offering
     * Updates the offering.
     * @param {String} offeringId offering's id
     * @param {module:model/Offering} offering 
     * @param {module:api/OfferingsApi~offeringsOfferingIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OfferingMetadataResponse}
     */
    offeringsOfferingIdPatch(offeringId, offering, callback) {
      let postBody = offering;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdPatch");
      }
      // verify the required parameter 'offering' is set
      if (offering === undefined || offering === null) {
        throw new Error("Missing the required parameter 'offering' when calling offeringsOfferingIdPatch");
      }

      let pathParams = {
        'offeringId': offeringId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OfferingMetadataResponse;
      return this.apiClient.callApi(
        '/offerings/{offeringId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsPastGet operation.
     * @callback module:api/OfferingsApi~offeringsPastGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OfferingMetadataResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find past offerings
     * Responds with past offerings for your organisation.
     * @param {module:api/OfferingsApi~offeringsPastGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OfferingMetadataResponse>}
     */
    offeringsPastGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OfferingMetadataResponse];
      return this.apiClient.callApi(
        '/offerings/past', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsPost operation.
     * @callback module:api/OfferingsApi~offeringsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OfferingMetadataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create offering
     * Creates a new offering.
     * @param {module:model/OfferingRequired} offeringRequired 
     * @param {module:api/OfferingsApi~offeringsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OfferingMetadataResponse}
     */
    offeringsPost(offeringRequired, callback) {
      let postBody = offeringRequired;
      // verify the required parameter 'offeringRequired' is set
      if (offeringRequired === undefined || offeringRequired === null) {
        throw new Error("Missing the required parameter 'offeringRequired' when calling offeringsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OfferingMetadataResponse;
      return this.apiClient.callApi(
        '/offerings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsSummaryGet operation.
     * @callback module:api/OfferingsApi~offeringsSummaryGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PortfolioActivations>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Offerings summary
     * Responds with a summary of all offerings for your organisation.
     * @param {Object} opts Optional parameters
     * @param {String} [top = '50')] Returns only the first n results.
     * @param {String} [orderby] Sorts the results.
     * @param {String} [filter] Filters the results, based on a Boolean condition.
     * @param {module:api/OfferingsApi~offeringsSummaryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PortfolioActivations>}
     */
    offeringsSummaryGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '$top': opts['top'],
        '$orderby': opts['orderby'],
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PortfolioActivations];
      return this.apiClient.callApi(
        '/offerings/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
