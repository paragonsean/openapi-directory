/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';

/**
* CourseMappings service.
* @module api/CourseMappingsApi
* @version v1
*/
export default class CourseMappingsApi {

    /**
    * Constructs a new CourseMappingsApi. 
    * @alias module:api/CourseMappingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the courseMappingsExternalcourseExternalCourseIdGet operation.
     * @callback module:api/CourseMappingsApi~courseMappingsExternalcourseExternalCourseIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find course mappings by externalCourseId
     * Responds with course mapping details by externalCourseId.
     * @param {String} externalCourseId external course's id
     * @param {module:api/CourseMappingsApi~courseMappingsExternalcourseExternalCourseIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    courseMappingsExternalcourseExternalCourseIdGet(externalCourseId, callback) {
      let postBody = null;
      // verify the required parameter 'externalCourseId' is set
      if (externalCourseId === undefined || externalCourseId === null) {
        throw new Error("Missing the required parameter 'externalCourseId' when calling courseMappingsExternalcourseExternalCourseIdGet");
      }

      let pathParams = {
        'externalCourseId': externalCourseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/course-mappings/externalcourse/{externalCourseId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the courseMappingsGet operation.
     * @callback module:api/CourseMappingsApi~courseMappingsGetCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find course mappings
     * Returns all course mappings for course offerings.
     * @param {module:api/CourseMappingsApi~courseMappingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    courseMappingsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/course-mappings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the courseMappingsOfferingIdExternalCourseIdDelete operation.
     * @callback module:api/CourseMappingsApi~courseMappingsOfferingIdExternalCourseIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove course mapping
     * Removes the course mapping between the offering and the externalCourseId.
     * @param {String} offeringId offering's id
     * @param {String} externalCourseId external course's id
     * @param {module:api/CourseMappingsApi~courseMappingsOfferingIdExternalCourseIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    courseMappingsOfferingIdExternalCourseIdDelete(offeringId, externalCourseId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling courseMappingsOfferingIdExternalCourseIdDelete");
      }
      // verify the required parameter 'externalCourseId' is set
      if (externalCourseId === undefined || externalCourseId === null) {
        throw new Error("Missing the required parameter 'externalCourseId' when calling courseMappingsOfferingIdExternalCourseIdDelete");
      }

      let pathParams = {
        'offeringId': offeringId,
        'externalCourseId': externalCourseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/course-mappings/{offeringId}/{externalCourseId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the courseMappingsOfferingIdExternalCourseIdPut operation.
     * @callback module:api/CourseMappingsApi~courseMappingsOfferingIdExternalCourseIdPutCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add course mapping
     * Creates a mapping between the offering and the externalCourseId.
     * @param {String} offeringId offering's id
     * @param {String} externalCourseId external course's id
     * @param {module:api/CourseMappingsApi~courseMappingsOfferingIdExternalCourseIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    courseMappingsOfferingIdExternalCourseIdPut(offeringId, externalCourseId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling courseMappingsOfferingIdExternalCourseIdPut");
      }
      // verify the required parameter 'externalCourseId' is set
      if (externalCourseId === undefined || externalCourseId === null) {
        throw new Error("Missing the required parameter 'externalCourseId' when calling courseMappingsOfferingIdExternalCourseIdPut");
      }

      let pathParams = {
        'offeringId': offeringId,
        'externalCourseId': externalCourseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/course-mappings/{offeringId}/{externalCourseId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the courseMappingsOfferingIdGet operation.
     * @callback module:api/CourseMappingsApi~courseMappingsOfferingIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find course mappings by offeringId
     * Responds with course mapping details by offeringId.
     * @param {String} offeringId offering's id
     * @param {module:api/CourseMappingsApi~courseMappingsOfferingIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    courseMappingsOfferingIdGet(offeringId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling courseMappingsOfferingIdGet");
      }

      let pathParams = {
        'offeringId': offeringId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/course-mappings/{offeringId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
