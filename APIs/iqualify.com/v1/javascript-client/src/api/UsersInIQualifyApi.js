/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import OfferingMetadataResponse from '../model/OfferingMetadataResponse';
import SuspendedRequest from '../model/SuspendedRequest';
import User from '../model/User';
import UserResponse from '../model/UserResponse';

/**
* UsersInIQualify service.
* @module api/UsersInIQualifyApi
* @version v1
*/
export default class UsersInIQualifyApi {

    /**
    * Constructs a new UsersInIQualifyApi. 
    * @alias module:api/UsersInIQualifyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usersPost operation.
     * @callback module:api/UsersInIQualifyApi~usersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new user
     * Creates a new user.
     * @param {module:model/User} user user
     * @param {module:api/UsersInIQualifyApi~usersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResponse}
     */
    usersPost(user, callback) {
      let postBody = user;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling usersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserResponse;
      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserEmailGet operation.
     * @callback module:api/UsersInIQualifyApi~usersUserEmailGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find user by email
     * Responds with a user matching the specified email.
     * @param {String} userEmail user's email
     * @param {module:api/UsersInIQualifyApi~usersUserEmailGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResponse}
     */
    usersUserEmailGet(userEmail, callback) {
      let postBody = null;
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling usersUserEmailGet");
      }

      let pathParams = {
        'userEmail': userEmail
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserResponse;
      return this.apiClient.callApi(
        '/users/{userEmail}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserEmailInviteEmailPost operation.
     * @callback module:api/UsersInIQualifyApi~usersUserEmailInviteEmailPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resend invitation email
     * Re-sends an invitation e-mail to the specified user.
     * @param {String} userEmail user's email
     * @param {module:api/UsersInIQualifyApi~usersUserEmailInviteEmailPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserEmailInviteEmailPost(userEmail, callback) {
      let postBody = null;
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling usersUserEmailInviteEmailPost");
      }

      let pathParams = {
        'userEmail': userEmail
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{userEmail}/invite-email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserEmailOfferingsGet operation.
     * @callback module:api/UsersInIQualifyApi~usersUserEmailOfferingsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OfferingMetadataResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find user's offerings
     * Responds with all offerings that the user in.
     * @param {String} userEmail user's email
     * @param {module:api/UsersInIQualifyApi~usersUserEmailOfferingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OfferingMetadataResponse>}
     */
    usersUserEmailOfferingsGet(userEmail, callback) {
      let postBody = null;
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling usersUserEmailOfferingsGet");
      }

      let pathParams = {
        'userEmail': userEmail
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OfferingMetadataResponse];
      return this.apiClient.callApi(
        '/users/{userEmail}/offerings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserEmailOfferingsPost operation.
     * @callback module:api/UsersInIQualifyApi~usersUserEmailOfferingsPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OfferingMetadataResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the user to the specified offerings as a learner
     * Adds a user to an array of offerings by offeringId.
     * @param {String} userEmail user's email
     * @param {Array.<String>} requestBody offering ids
     * @param {module:api/UsersInIQualifyApi~usersUserEmailOfferingsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OfferingMetadataResponse>}
     */
    usersUserEmailOfferingsPost(userEmail, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling usersUserEmailOfferingsPost");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling usersUserEmailOfferingsPost");
      }

      let pathParams = {
        'userEmail': userEmail
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [OfferingMetadataResponse];
      return this.apiClient.callApi(
        '/users/{userEmail}/offerings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserEmailPatch operation.
     * @callback module:api/UsersInIQualifyApi~usersUserEmailPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user
     * Updates the specified user by email.
     * @param {String} userEmail user's email
     * @param {Object} opts Optional parameters
     * @param {module:model/User} [user] 
     * @param {module:api/UsersInIQualifyApi~usersUserEmailPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResponse}
     */
    usersUserEmailPatch(userEmail, opts, callback) {
      opts = opts || {};
      let postBody = opts['user'];
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling usersUserEmailPatch");
      }

      let pathParams = {
        'userEmail': userEmail
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserResponse;
      return this.apiClient.callApi(
        '/users/{userEmail}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserEmailPermissionsPermissionNamePost operation.
     * @callback module:api/UsersInIQualifyApi~usersUserEmailPermissionsPermissionNamePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add permission to user
     * Adds additional permissions to the specified user.
     * @param {String} userEmail user's email
     * @param {module:model/String} permissionName permission name
     * @param {module:api/UsersInIQualifyApi~usersUserEmailPermissionsPermissionNamePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResponse}
     */
    usersUserEmailPermissionsPermissionNamePost(userEmail, permissionName, callback) {
      let postBody = null;
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling usersUserEmailPermissionsPermissionNamePost");
      }
      // verify the required parameter 'permissionName' is set
      if (permissionName === undefined || permissionName === null) {
        throw new Error("Missing the required parameter 'permissionName' when calling usersUserEmailPermissionsPermissionNamePost");
      }

      let pathParams = {
        'userEmail': userEmail,
        'permissionName': permissionName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserResponse;
      return this.apiClient.callApi(
        '/users/{userEmail}/permissions/{permissionName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserEmailSuspendPut operation.
     * @callback module:api/UsersInIQualifyApi~usersUserEmailSuspendPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Suspend user
     * Suspends the specified user's account.
     * @param {String} userEmail user's email
     * @param {module:model/SuspendedRequest} suspendedRequest 
     * @param {module:api/UsersInIQualifyApi~usersUserEmailSuspendPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserEmailSuspendPut(userEmail, suspendedRequest, callback) {
      let postBody = suspendedRequest;
      // verify the required parameter 'userEmail' is set
      if (userEmail === undefined || userEmail === null) {
        throw new Error("Missing the required parameter 'userEmail' when calling usersUserEmailSuspendPut");
      }
      // verify the required parameter 'suspendedRequest' is set
      if (suspendedRequest === undefined || suspendedRequest === null) {
        throw new Error("Missing the required parameter 'suspendedRequest' when calling usersUserEmailSuspendPut");
      }

      let pathParams = {
        'userEmail': userEmail
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{userEmail}/suspend', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
