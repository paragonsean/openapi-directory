/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CourseMetaResponse from '../model/CourseMetaResponse';
import CoursesContentIdMetadataCategoryPutRequest from '../model/CoursesContentIdMetadataCategoryPutRequest';
import CoursesContentIdMetadataLevelPutRequest from '../model/CoursesContentIdMetadataLevelPutRequest';
import CoursesContentIdMetadataTagsPutRequest from '../model/CoursesContentIdMetadataTagsPutRequest';
import CoursesContentIdMetadataTopicPutRequest from '../model/CoursesContentIdMetadataTopicPutRequest';
import Error from '../model/Error';

/**
* CourseMetadata service.
* @module api/CourseMetadataApi
* @version v1
*/
export default class CourseMetadataApi {

    /**
    * Constructs a new CourseMetadataApi. 
    * @alias module:api/CourseMetadataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the coursesContentIdMetadataCategoryPut operation.
     * @callback module:api/CourseMetadataApi~coursesContentIdMetadataCategoryPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CourseMetaResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update course category
     * Add or update course category in the metadata of a course.
     * @param {String} contentId The content Id
     * @param {module:model/CoursesContentIdMetadataCategoryPutRequest} coursesContentIdMetadataCategoryPutRequest 
     * @param {module:api/CourseMetadataApi~coursesContentIdMetadataCategoryPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CourseMetaResponse}
     */
    coursesContentIdMetadataCategoryPut(contentId, coursesContentIdMetadataCategoryPutRequest, callback) {
      let postBody = coursesContentIdMetadataCategoryPutRequest;
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling coursesContentIdMetadataCategoryPut");
      }
      // verify the required parameter 'coursesContentIdMetadataCategoryPutRequest' is set
      if (coursesContentIdMetadataCategoryPutRequest === undefined || coursesContentIdMetadataCategoryPutRequest === null) {
        throw new Error("Missing the required parameter 'coursesContentIdMetadataCategoryPutRequest' when calling coursesContentIdMetadataCategoryPut");
      }

      let pathParams = {
        'contentId': contentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CourseMetaResponse;
      return this.apiClient.callApi(
        '/courses/{contentId}/metadata/category', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesContentIdMetadataLevelPut operation.
     * @callback module:api/CourseMetadataApi~coursesContentIdMetadataLevelPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CourseMetaResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update course level
     * Add or update the course level in the metadata of a course.
     * @param {String} contentId The content Id
     * @param {module:model/CoursesContentIdMetadataLevelPutRequest} coursesContentIdMetadataLevelPutRequest 
     * @param {module:api/CourseMetadataApi~coursesContentIdMetadataLevelPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CourseMetaResponse}
     */
    coursesContentIdMetadataLevelPut(contentId, coursesContentIdMetadataLevelPutRequest, callback) {
      let postBody = coursesContentIdMetadataLevelPutRequest;
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling coursesContentIdMetadataLevelPut");
      }
      // verify the required parameter 'coursesContentIdMetadataLevelPutRequest' is set
      if (coursesContentIdMetadataLevelPutRequest === undefined || coursesContentIdMetadataLevelPutRequest === null) {
        throw new Error("Missing the required parameter 'coursesContentIdMetadataLevelPutRequest' when calling coursesContentIdMetadataLevelPut");
      }

      let pathParams = {
        'contentId': contentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CourseMetaResponse;
      return this.apiClient.callApi(
        '/courses/{contentId}/metadata/level', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesContentIdMetadataTagsPut operation.
     * @callback module:api/CourseMetadataApi~coursesContentIdMetadataTagsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CourseMetaResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update course tags
     * Add or update course tags in the metadata of a course.
     * @param {String} contentId The content Id
     * @param {module:model/CoursesContentIdMetadataTagsPutRequest} coursesContentIdMetadataTagsPutRequest 
     * @param {module:api/CourseMetadataApi~coursesContentIdMetadataTagsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CourseMetaResponse}
     */
    coursesContentIdMetadataTagsPut(contentId, coursesContentIdMetadataTagsPutRequest, callback) {
      let postBody = coursesContentIdMetadataTagsPutRequest;
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling coursesContentIdMetadataTagsPut");
      }
      // verify the required parameter 'coursesContentIdMetadataTagsPutRequest' is set
      if (coursesContentIdMetadataTagsPutRequest === undefined || coursesContentIdMetadataTagsPutRequest === null) {
        throw new Error("Missing the required parameter 'coursesContentIdMetadataTagsPutRequest' when calling coursesContentIdMetadataTagsPut");
      }

      let pathParams = {
        'contentId': contentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CourseMetaResponse;
      return this.apiClient.callApi(
        '/courses/{contentId}/metadata/tags', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesContentIdMetadataTopicPut operation.
     * @callback module:api/CourseMetadataApi~coursesContentIdMetadataTopicPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CourseMetaResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update course topic
     * Add or update the course topic in the metadata of a course.
     * @param {String} contentId The content Id
     * @param {module:model/CoursesContentIdMetadataTopicPutRequest} coursesContentIdMetadataTopicPutRequest 
     * @param {module:api/CourseMetadataApi~coursesContentIdMetadataTopicPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CourseMetaResponse}
     */
    coursesContentIdMetadataTopicPut(contentId, coursesContentIdMetadataTopicPutRequest, callback) {
      let postBody = coursesContentIdMetadataTopicPutRequest;
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling coursesContentIdMetadataTopicPut");
      }
      // verify the required parameter 'coursesContentIdMetadataTopicPutRequest' is set
      if (coursesContentIdMetadataTopicPutRequest === undefined || coursesContentIdMetadataTopicPutRequest === null) {
        throw new Error("Missing the required parameter 'coursesContentIdMetadataTopicPutRequest' when calling coursesContentIdMetadataTopicPut");
      }

      let pathParams = {
        'contentId': contentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CourseMetaResponse;
      return this.apiClient.callApi(
        '/courses/{contentId}/metadata/topic', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
