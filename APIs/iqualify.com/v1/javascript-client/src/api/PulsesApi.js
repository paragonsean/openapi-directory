/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import OfferingsOfferingIdAnalyticsPulsesResponsesGetResponseTimeParameter from '../model/OfferingsOfferingIdAnalyticsPulsesResponsesGetResponseTimeParameter';
import PulseResponse from '../model/PulseResponse';

/**
* Pulses service.
* @module api/PulsesApi
* @version v1
*/
export default class PulsesApi {

    /**
    * Constructs a new PulsesApi. 
    * @alias module:api/PulsesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the offeringsOfferingIdAnalyticsPulsesGet operation.
     * @callback module:api/PulsesApi~offeringsOfferingIdAnalyticsPulsesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find all pulse IDs in the specified offering
     * Responds with the IDs of all pulses that learners have responded to in a specified offering.
     * @param {String} offeringId offering's id
     * @param {module:api/PulsesApi~offeringsOfferingIdAnalyticsPulsesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    offeringsOfferingIdAnalyticsPulsesGet(offeringId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAnalyticsPulsesGet");
      }

      let pathParams = {
        'offeringId': offeringId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/analytics/pulses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdAnalyticsPulsesPulseIdResponsesGet operation.
     * @callback module:api/PulsesApi~offeringsOfferingIdAnalyticsPulsesPulseIdResponsesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PulseResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find pulses by offeringId and pulseId
     * Responds with pulse's responses, matching the pulseId, in an offering matching the offeringId.
     * @param {String} offeringId offering's id
     * @param {String} pulseId pulse's base id
     * @param {module:api/PulsesApi~offeringsOfferingIdAnalyticsPulsesPulseIdResponsesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PulseResponse>}
     */
    offeringsOfferingIdAnalyticsPulsesPulseIdResponsesGet(offeringId, pulseId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAnalyticsPulsesPulseIdResponsesGet");
      }
      // verify the required parameter 'pulseId' is set
      if (pulseId === undefined || pulseId === null) {
        throw new Error("Missing the required parameter 'pulseId' when calling offeringsOfferingIdAnalyticsPulsesPulseIdResponsesGet");
      }

      let pathParams = {
        'offeringId': offeringId,
        'pulseId': pulseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PulseResponse];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/analytics/pulses/{pulseId}/responses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdAnalyticsPulsesResponsesGet operation.
     * @callback module:api/PulsesApi~offeringsOfferingIdAnalyticsPulsesResponsesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PulseResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find pulses by offeringId
     * Responds with pulse's responses in an offering matching the offeringId.
     * @param {String} offeringId offering's id
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [pulseType] Filter pulse responses by type.
     * @param {module:model/OfferingsOfferingIdAnalyticsPulsesResponsesGetResponseTimeParameter} [responseTime] Filter pulse responses by responseTime. Lower then (`lt`), lower then or equal (`lte`), greater then (`gt`) and greater then or equal (`gte`) operators are available. Example of filtering by time range __gte__2017-03-14T07:30:00Z__
     * @param {module:api/PulsesApi~offeringsOfferingIdAnalyticsPulsesResponsesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PulseResponse>}
     */
    offeringsOfferingIdAnalyticsPulsesResponsesGet(offeringId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAnalyticsPulsesResponsesGet");
      }

      let pathParams = {
        'offeringId': offeringId
      };
      let queryParams = {
        'pulseType': opts['pulseType'],
        'responseTime': opts['responseTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PulseResponse];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/analytics/pulses/responses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
