/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Channel from '../model/Channel';
import ChannelRequired from '../model/ChannelRequired';
import ChannelResponse from '../model/ChannelResponse';
import Comment from '../model/Comment';
import Error from '../model/Error';
import HttpPost from '../model/HttpPost';
import OfferingsOfferingIdChannelsChannelIdLearnersPostRequest from '../model/OfferingsOfferingIdChannelsChannelIdLearnersPostRequest';

/**
* Channels service.
* @module api/ChannelsApi
* @version v1
*/
export default class ChannelsApi {

    /**
    * Constructs a new ChannelsApi. 
    * @alias module:api/ChannelsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGet operation.
     * @callback module:api/ChannelsApi~offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Comment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find comments
     * Responds with a list of comments made in any posts in a specified channel, within an offering.
     * @param {String} offeringId offering's id
     * @param {String} channelId channel's id
     * @param {module:api/ChannelsApi~offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Comment>}
     */
    offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGet(offeringId, channelId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGet");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling offeringsOfferingIdAnalyticsChannelsChannelIdCommentsGet");
      }

      let pathParams = {
        'offeringId': offeringId,
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Comment];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/analytics/channels/{channelId}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdAnalyticsChannelsChannelIdPostsGet operation.
     * @callback module:api/ChannelsApi~offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HttpPost>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find posts
     * Responds with a list of posts made in a specified channel, within an offering.
     * @param {String} offeringId offering's id
     * @param {String} channelId channel's id
     * @param {module:api/ChannelsApi~offeringsOfferingIdAnalyticsChannelsChannelIdPostsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/HttpPost>}
     */
    offeringsOfferingIdAnalyticsChannelsChannelIdPostsGet(offeringId, channelId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAnalyticsChannelsChannelIdPostsGet");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling offeringsOfferingIdAnalyticsChannelsChannelIdPostsGet");
      }

      let pathParams = {
        'offeringId': offeringId,
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HttpPost];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/analytics/channels/{channelId}/posts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGet operation.
     * @callback module:api/ChannelsApi~offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Comment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find replies
     * Responds with a list of replies to comments in any posts in a specified channel, within an offering.
     * @param {String} offeringId offering's id
     * @param {String} channelId channel's id
     * @param {module:api/ChannelsApi~offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Comment>}
     */
    offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGet(offeringId, channelId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGet");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling offeringsOfferingIdAnalyticsChannelsChannelIdRepliesGet");
      }

      let pathParams = {
        'offeringId': offeringId,
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Comment];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/analytics/channels/{channelId}/replies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdChannelsChannelIdLearnersDelete operation.
     * @callback module:api/ChannelsApi~offeringsOfferingIdChannelsChannelIdLearnersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove learners from a group channel
     * Removes a learner from the specified group channel.
     * @param {String} offeringId offering's id
     * @param {String} channelId channel's id
     * @param {module:model/OfferingsOfferingIdChannelsChannelIdLearnersPostRequest} offeringsOfferingIdChannelsChannelIdLearnersPostRequest 
     * @param {module:api/ChannelsApi~offeringsOfferingIdChannelsChannelIdLearnersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    offeringsOfferingIdChannelsChannelIdLearnersDelete(offeringId, channelId, offeringsOfferingIdChannelsChannelIdLearnersPostRequest, callback) {
      let postBody = offeringsOfferingIdChannelsChannelIdLearnersPostRequest;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdChannelsChannelIdLearnersDelete");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling offeringsOfferingIdChannelsChannelIdLearnersDelete");
      }
      // verify the required parameter 'offeringsOfferingIdChannelsChannelIdLearnersPostRequest' is set
      if (offeringsOfferingIdChannelsChannelIdLearnersPostRequest === undefined || offeringsOfferingIdChannelsChannelIdLearnersPostRequest === null) {
        throw new Error("Missing the required parameter 'offeringsOfferingIdChannelsChannelIdLearnersPostRequest' when calling offeringsOfferingIdChannelsChannelIdLearnersDelete");
      }

      let pathParams = {
        'offeringId': offeringId,
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/offerings/{offeringId}/channels/{channelId}/learners', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdChannelsChannelIdLearnersGet operation.
     * @callback module:api/ChannelsApi~offeringsOfferingIdChannelsChannelIdLearnersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find learners in a group channel
     * Finds all learners in a specified group channel.
     * @param {String} offeringId offering's id
     * @param {String} channelId channel's id
     * @param {module:api/ChannelsApi~offeringsOfferingIdChannelsChannelIdLearnersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelResponse}
     */
    offeringsOfferingIdChannelsChannelIdLearnersGet(offeringId, channelId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdChannelsChannelIdLearnersGet");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling offeringsOfferingIdChannelsChannelIdLearnersGet");
      }

      let pathParams = {
        'offeringId': offeringId,
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChannelResponse;
      return this.apiClient.callApi(
        '/offerings/{offeringId}/channels/{channelId}/learners', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdChannelsChannelIdLearnersPost operation.
     * @callback module:api/ChannelsApi~offeringsOfferingIdChannelsChannelIdLearnersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add learners to a group channel
     * Adds a learner to a specified group channel.
     * @param {String} offeringId offering's id
     * @param {String} channelId channel's id
     * @param {module:model/OfferingsOfferingIdChannelsChannelIdLearnersPostRequest} offeringsOfferingIdChannelsChannelIdLearnersPostRequest 
     * @param {module:api/ChannelsApi~offeringsOfferingIdChannelsChannelIdLearnersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    offeringsOfferingIdChannelsChannelIdLearnersPost(offeringId, channelId, offeringsOfferingIdChannelsChannelIdLearnersPostRequest, callback) {
      let postBody = offeringsOfferingIdChannelsChannelIdLearnersPostRequest;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdChannelsChannelIdLearnersPost");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling offeringsOfferingIdChannelsChannelIdLearnersPost");
      }
      // verify the required parameter 'offeringsOfferingIdChannelsChannelIdLearnersPostRequest' is set
      if (offeringsOfferingIdChannelsChannelIdLearnersPostRequest === undefined || offeringsOfferingIdChannelsChannelIdLearnersPostRequest === null) {
        throw new Error("Missing the required parameter 'offeringsOfferingIdChannelsChannelIdLearnersPostRequest' when calling offeringsOfferingIdChannelsChannelIdLearnersPost");
      }

      let pathParams = {
        'offeringId': offeringId,
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/offerings/{offeringId}/channels/{channelId}/learners', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdChannelsChannelIdPatch operation.
     * @callback module:api/ChannelsApi~offeringsOfferingIdChannelsChannelIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update channel
     * Updates a channel in an offering.
     * @param {String} offeringId offering's id
     * @param {String} channelId channel's id
     * @param {module:model/Channel} channel 
     * @param {module:api/ChannelsApi~offeringsOfferingIdChannelsChannelIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelResponse}
     */
    offeringsOfferingIdChannelsChannelIdPatch(offeringId, channelId, channel, callback) {
      let postBody = channel;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdChannelsChannelIdPatch");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling offeringsOfferingIdChannelsChannelIdPatch");
      }
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling offeringsOfferingIdChannelsChannelIdPatch");
      }

      let pathParams = {
        'offeringId': offeringId,
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChannelResponse;
      return this.apiClient.callApi(
        '/offerings/{offeringId}/channels/{channelId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdChannelsGet operation.
     * @callback module:api/ChannelsApi~offeringsOfferingIdChannelsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChannelResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find channels
     * Responds with a list of channels in an offering.
     * @param {String} offeringId offering's id
     * @param {module:api/ChannelsApi~offeringsOfferingIdChannelsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChannelResponse>}
     */
    offeringsOfferingIdChannelsGet(offeringId, callback) {
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdChannelsGet");
      }

      let pathParams = {
        'offeringId': offeringId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ChannelResponse];
      return this.apiClient.callApi(
        '/offerings/{offeringId}/channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offeringsOfferingIdChannelsPost operation.
     * @callback module:api/ChannelsApi~offeringsOfferingIdChannelsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add channel
     * Adds new channel to the specified offering.
     * @param {String} offeringId offering's id
     * @param {module:model/ChannelRequired} channelRequired 
     * @param {module:api/ChannelsApi~offeringsOfferingIdChannelsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelResponse}
     */
    offeringsOfferingIdChannelsPost(offeringId, channelRequired, callback) {
      let postBody = channelRequired;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling offeringsOfferingIdChannelsPost");
      }
      // verify the required parameter 'channelRequired' is set
      if (channelRequired === undefined || channelRequired === null) {
        throw new Error("Missing the required parameter 'channelRequired' when calling offeringsOfferingIdChannelsPost");
      }

      let pathParams = {
        'offeringId': offeringId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChannelResponse;
      return this.apiClient.callApi(
        '/offerings/{offeringId}/channels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
