/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OfferingProgressRow from './OfferingProgressRow';

/**
 * The LearnerResponse model module.
 * @module model/LearnerResponse
 * @version v1
 */
class LearnerResponse {
    /**
     * Constructs a new <code>LearnerResponse</code>.
     * @alias module:model/LearnerResponse
     */
    constructor() { 
        
        LearnerResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LearnerResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LearnerResponse} obj Optional instance to populate.
     * @return {module:model/LearnerResponse} The populated <code>LearnerResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LearnerResponse();

            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('offerings')) {
                obj['offerings'] = ApiClient.convertToType(data['offerings'], [OfferingProgressRow]);
            }
            if (data.hasOwnProperty('personId')) {
                obj['personId'] = ApiClient.convertToType(data['personId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LearnerResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LearnerResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        if (data['offerings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['offerings'])) {
                throw new Error("Expected the field `offerings` to be an array in the JSON data but got " + data['offerings']);
            }
            // validate the optional field `offerings` (array)
            for (const item of data['offerings']) {
                OfferingProgressRow.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['personId'] && !(typeof data['personId'] === 'string' || data['personId'] instanceof String)) {
            throw new Error("Expected the field `personId` to be a primitive type in the JSON string but got " + data['personId']);
        }

        return true;
    }


}



/**
 * @member {String} email
 */
LearnerResponse.prototype['email'] = undefined;

/**
 * @member {String} firstName
 */
LearnerResponse.prototype['firstName'] = undefined;

/**
 * @member {String} id
 */
LearnerResponse.prototype['id'] = undefined;

/**
 * @member {String} lastName
 */
LearnerResponse.prototype['lastName'] = undefined;

/**
 * @member {Array.<module:model/OfferingProgressRow>} offerings
 */
LearnerResponse.prototype['offerings'] = undefined;

/**
 * @member {String} personId
 */
LearnerResponse.prototype['personId'] = undefined;






export default LearnerResponse;

