/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OpenBadgeClassCriteria from './OpenBadgeClassCriteria';

/**
 * The OpenBadgeClass model module.
 * @module model/OpenBadgeClass
 * @version v1
 */
class OpenBadgeClass {
    /**
     * Constructs a new <code>OpenBadgeClass</code>.
     * @alias module:model/OpenBadgeClass
     */
    constructor() { 
        
        OpenBadgeClass.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OpenBadgeClass</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OpenBadgeClass} obj Optional instance to populate.
     * @return {module:model/OpenBadgeClass} The populated <code>OpenBadgeClass</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OpenBadgeClass();

            if (data.hasOwnProperty('criteria')) {
                obj['criteria'] = OpenBadgeClassCriteria.constructFromObject(data['criteria']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('issuer')) {
                obj['issuer'] = ApiClient.convertToType(data['issuer'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OpenBadgeClass</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OpenBadgeClass</code>.
     */
    static validateJSON(data) {
        // validate the optional field `criteria`
        if (data['criteria']) { // data not null
          OpenBadgeClassCriteria.validateJSON(data['criteria']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // ensure the json data is a string
        if (data['issuer'] && !(typeof data['issuer'] === 'string' || data['issuer'] instanceof String)) {
            throw new Error("Expected the field `issuer` to be a primitive type in the JSON string but got " + data['issuer']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/OpenBadgeClassCriteria} criteria
 */
OpenBadgeClass.prototype['criteria'] = undefined;

/**
 * @member {String} description
 */
OpenBadgeClass.prototype['description'] = undefined;

/**
 * @member {String} id
 */
OpenBadgeClass.prototype['id'] = undefined;

/**
 * @member {String} image
 */
OpenBadgeClass.prototype['image'] = undefined;

/**
 * @member {String} issuer
 */
OpenBadgeClass.prototype['issuer'] = undefined;

/**
 * @member {String} name
 */
OpenBadgeClass.prototype['name'] = undefined;

/**
 * @member {String} type
 */
OpenBadgeClass.prototype['type'] = undefined;






export default OpenBadgeClass;

