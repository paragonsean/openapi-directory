/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AssignmentMarkResponse model module.
 * @module model/AssignmentMarkResponse
 * @version v1
 */
class AssignmentMarkResponse {
    /**
     * Constructs a new <code>AssignmentMarkResponse</code>.
     * @alias module:model/AssignmentMarkResponse
     */
    constructor() { 
        
        AssignmentMarkResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AssignmentMarkResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssignmentMarkResponse} obj Optional instance to populate.
     * @return {module:model/AssignmentMarkResponse} The populated <code>AssignmentMarkResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssignmentMarkResponse();

            if (data.hasOwnProperty('assessmentId')) {
                obj['assessmentId'] = ApiClient.convertToType(data['assessmentId'], 'String');
            }
            if (data.hasOwnProperty('assessmentItemDetails')) {
                obj['assessmentItemDetails'] = ApiClient.convertToType(data['assessmentItemDetails'], 'String');
            }
            if (data.hasOwnProperty('assessmentItemName')) {
                obj['assessmentItemName'] = ApiClient.convertToType(data['assessmentItemName'], 'String');
            }
            if (data.hasOwnProperty('courseName')) {
                obj['courseName'] = ApiClient.convertToType(data['courseName'], 'String');
            }
            if (data.hasOwnProperty('learnerEmail')) {
                obj['learnerEmail'] = ApiClient.convertToType(data['learnerEmail'], 'String');
            }
            if (data.hasOwnProperty('learnerFirstName')) {
                obj['learnerFirstName'] = ApiClient.convertToType(data['learnerFirstName'], 'String');
            }
            if (data.hasOwnProperty('learnerLastName')) {
                obj['learnerLastName'] = ApiClient.convertToType(data['learnerLastName'], 'String');
            }
            if (data.hasOwnProperty('learnerPersonId')) {
                obj['learnerPersonId'] = ApiClient.convertToType(data['learnerPersonId'], 'String');
            }
            if (data.hasOwnProperty('mark')) {
                obj['mark'] = ApiClient.convertToType(data['mark'], 'String');
            }
            if (data.hasOwnProperty('markFeedback')) {
                obj['markFeedback'] = ApiClient.convertToType(data['markFeedback'], 'String');
            }
            if (data.hasOwnProperty('markedBy')) {
                obj['markedBy'] = ApiClient.convertToType(data['markedBy'], 'String');
            }
            if (data.hasOwnProperty('markedByEvaluator')) {
                obj['markedByEvaluator'] = ApiClient.convertToType(data['markedByEvaluator'], 'Boolean');
            }
            if (data.hasOwnProperty('markedByFacilitator')) {
                obj['markedByFacilitator'] = ApiClient.convertToType(data['markedByFacilitator'], 'Boolean');
            }
            if (data.hasOwnProperty('markedByMarker')) {
                obj['markedByMarker'] = ApiClient.convertToType(data['markedByMarker'], 'Boolean');
            }
            if (data.hasOwnProperty('markedDateTime')) {
                obj['markedDateTime'] = ApiClient.convertToType(data['markedDateTime'], 'Date');
            }
            if (data.hasOwnProperty('submissionDateTime')) {
                obj['submissionDateTime'] = ApiClient.convertToType(data['submissionDateTime'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssignmentMarkResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssignmentMarkResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['assessmentId'] && !(typeof data['assessmentId'] === 'string' || data['assessmentId'] instanceof String)) {
            throw new Error("Expected the field `assessmentId` to be a primitive type in the JSON string but got " + data['assessmentId']);
        }
        // ensure the json data is a string
        if (data['assessmentItemDetails'] && !(typeof data['assessmentItemDetails'] === 'string' || data['assessmentItemDetails'] instanceof String)) {
            throw new Error("Expected the field `assessmentItemDetails` to be a primitive type in the JSON string but got " + data['assessmentItemDetails']);
        }
        // ensure the json data is a string
        if (data['assessmentItemName'] && !(typeof data['assessmentItemName'] === 'string' || data['assessmentItemName'] instanceof String)) {
            throw new Error("Expected the field `assessmentItemName` to be a primitive type in the JSON string but got " + data['assessmentItemName']);
        }
        // ensure the json data is a string
        if (data['courseName'] && !(typeof data['courseName'] === 'string' || data['courseName'] instanceof String)) {
            throw new Error("Expected the field `courseName` to be a primitive type in the JSON string but got " + data['courseName']);
        }
        // ensure the json data is a string
        if (data['learnerEmail'] && !(typeof data['learnerEmail'] === 'string' || data['learnerEmail'] instanceof String)) {
            throw new Error("Expected the field `learnerEmail` to be a primitive type in the JSON string but got " + data['learnerEmail']);
        }
        // ensure the json data is a string
        if (data['learnerFirstName'] && !(typeof data['learnerFirstName'] === 'string' || data['learnerFirstName'] instanceof String)) {
            throw new Error("Expected the field `learnerFirstName` to be a primitive type in the JSON string but got " + data['learnerFirstName']);
        }
        // ensure the json data is a string
        if (data['learnerLastName'] && !(typeof data['learnerLastName'] === 'string' || data['learnerLastName'] instanceof String)) {
            throw new Error("Expected the field `learnerLastName` to be a primitive type in the JSON string but got " + data['learnerLastName']);
        }
        // ensure the json data is a string
        if (data['learnerPersonId'] && !(typeof data['learnerPersonId'] === 'string' || data['learnerPersonId'] instanceof String)) {
            throw new Error("Expected the field `learnerPersonId` to be a primitive type in the JSON string but got " + data['learnerPersonId']);
        }
        // ensure the json data is a string
        if (data['mark'] && !(typeof data['mark'] === 'string' || data['mark'] instanceof String)) {
            throw new Error("Expected the field `mark` to be a primitive type in the JSON string but got " + data['mark']);
        }
        // ensure the json data is a string
        if (data['markFeedback'] && !(typeof data['markFeedback'] === 'string' || data['markFeedback'] instanceof String)) {
            throw new Error("Expected the field `markFeedback` to be a primitive type in the JSON string but got " + data['markFeedback']);
        }
        // ensure the json data is a string
        if (data['markedBy'] && !(typeof data['markedBy'] === 'string' || data['markedBy'] instanceof String)) {
            throw new Error("Expected the field `markedBy` to be a primitive type in the JSON string but got " + data['markedBy']);
        }

        return true;
    }


}



/**
 * @member {String} assessmentId
 */
AssignmentMarkResponse.prototype['assessmentId'] = undefined;

/**
 * @member {String} assessmentItemDetails
 */
AssignmentMarkResponse.prototype['assessmentItemDetails'] = undefined;

/**
 * @member {String} assessmentItemName
 */
AssignmentMarkResponse.prototype['assessmentItemName'] = undefined;

/**
 * @member {String} courseName
 */
AssignmentMarkResponse.prototype['courseName'] = undefined;

/**
 * @member {String} learnerEmail
 */
AssignmentMarkResponse.prototype['learnerEmail'] = undefined;

/**
 * @member {String} learnerFirstName
 */
AssignmentMarkResponse.prototype['learnerFirstName'] = undefined;

/**
 * @member {String} learnerLastName
 */
AssignmentMarkResponse.prototype['learnerLastName'] = undefined;

/**
 * @member {String} learnerPersonId
 */
AssignmentMarkResponse.prototype['learnerPersonId'] = undefined;

/**
 * @member {String} mark
 */
AssignmentMarkResponse.prototype['mark'] = undefined;

/**
 * @member {String} markFeedback
 */
AssignmentMarkResponse.prototype['markFeedback'] = undefined;

/**
 * @member {String} markedBy
 */
AssignmentMarkResponse.prototype['markedBy'] = undefined;

/**
 * @member {Boolean} markedByEvaluator
 */
AssignmentMarkResponse.prototype['markedByEvaluator'] = undefined;

/**
 * @member {Boolean} markedByFacilitator
 */
AssignmentMarkResponse.prototype['markedByFacilitator'] = undefined;

/**
 * @member {Boolean} markedByMarker
 */
AssignmentMarkResponse.prototype['markedByMarker'] = undefined;

/**
 * @member {Date} markedDateTime
 */
AssignmentMarkResponse.prototype['markedDateTime'] = undefined;

/**
 * @member {Date} submissionDateTime
 */
AssignmentMarkResponse.prototype['submissionDateTime'] = undefined;






export default AssignmentMarkResponse;

