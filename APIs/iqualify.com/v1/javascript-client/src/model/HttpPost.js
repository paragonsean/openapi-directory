/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentResponse from './DocumentResponse';
import Moderation from './Moderation';

/**
 * The HttpPost model module.
 * @module model/HttpPost
 * @version v1
 */
class HttpPost {
    /**
     * Constructs a new <code>HttpPost</code>.
     * @alias module:model/HttpPost
     */
    constructor() { 
        
        HttpPost.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HttpPost</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HttpPost} obj Optional instance to populate.
     * @return {module:model/HttpPost} The populated <code>HttpPost</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HttpPost();

            if (data.hasOwnProperty('attachments')) {
                obj['attachments'] = ApiClient.convertToType(data['attachments'], [DocumentResponse]);
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isFacilitatorPost')) {
                obj['isFacilitatorPost'] = ApiClient.convertToType(data['isFacilitatorPost'], 'Boolean');
            }
            if (data.hasOwnProperty('moderation')) {
                obj['moderation'] = Moderation.constructFromObject(data['moderation']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HttpPost</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HttpPost</code>.
     */
    static validateJSON(data) {
        if (data['attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attachments'])) {
                throw new Error("Expected the field `attachments` to be an array in the JSON data but got " + data['attachments']);
            }
            // validate the optional field `attachments` (array)
            for (const item of data['attachments']) {
                DocumentResponse.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `moderation`
        if (data['moderation']) { // data not null
          Moderation.validateJSON(data['moderation']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/DocumentResponse>} attachments
 */
HttpPost.prototype['attachments'] = undefined;

/**
 * @member {String} content
 */
HttpPost.prototype['content'] = undefined;

/**
 * @member {Date} createdAt
 */
HttpPost.prototype['createdAt'] = undefined;

/**
 * @member {String} email
 */
HttpPost.prototype['email'] = undefined;

/**
 * @member {String} id
 */
HttpPost.prototype['id'] = undefined;

/**
 * @member {Boolean} isFacilitatorPost
 */
HttpPost.prototype['isFacilitatorPost'] = undefined;

/**
 * @member {module:model/Moderation} moderation
 */
HttpPost.prototype['moderation'] = undefined;

/**
 * @member {String} title
 */
HttpPost.prototype['title'] = undefined;






export default HttpPost;

