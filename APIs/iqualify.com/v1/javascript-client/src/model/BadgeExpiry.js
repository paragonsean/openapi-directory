/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BadgeExpiry model module.
 * @module model/BadgeExpiry
 * @version v1
 */
class BadgeExpiry {
    /**
     * Constructs a new <code>BadgeExpiry</code>.
     * @alias module:model/BadgeExpiry
     */
    constructor() { 
        
        BadgeExpiry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BadgeExpiry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BadgeExpiry} obj Optional instance to populate.
     * @return {module:model/BadgeExpiry} The populated <code>BadgeExpiry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BadgeExpiry();

            if (data.hasOwnProperty('expirationDate')) {
                obj['expirationDate'] = ApiClient.convertToType(data['expirationDate'], 'Date');
            }
            if (data.hasOwnProperty('expires')) {
                obj['expires'] = ApiClient.convertToType(data['expires'], 'Boolean');
            }
            if (data.hasOwnProperty('expiryType')) {
                obj['expiryType'] = ApiClient.convertToType(data['expiryType'], 'String');
            }
            if (data.hasOwnProperty('timeframeAmount')) {
                obj['timeframeAmount'] = ApiClient.convertToType(data['timeframeAmount'], 'Number');
            }
            if (data.hasOwnProperty('timeframeUnit')) {
                obj['timeframeUnit'] = ApiClient.convertToType(data['timeframeUnit'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BadgeExpiry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BadgeExpiry</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['expiryType'] && !(typeof data['expiryType'] === 'string' || data['expiryType'] instanceof String)) {
            throw new Error("Expected the field `expiryType` to be a primitive type in the JSON string but got " + data['expiryType']);
        }
        // ensure the json data is a string
        if (data['timeframeUnit'] && !(typeof data['timeframeUnit'] === 'string' || data['timeframeUnit'] instanceof String)) {
            throw new Error("Expected the field `timeframeUnit` to be a primitive type in the JSON string but got " + data['timeframeUnit']);
        }

        return true;
    }


}



/**
 * @member {Date} expirationDate
 */
BadgeExpiry.prototype['expirationDate'] = undefined;

/**
 * @member {Boolean} expires
 */
BadgeExpiry.prototype['expires'] = undefined;

/**
 * @member {module:model/BadgeExpiry.ExpiryTypeEnum} expiryType
 */
BadgeExpiry.prototype['expiryType'] = undefined;

/**
 * @member {Number} timeframeAmount
 */
BadgeExpiry.prototype['timeframeAmount'] = undefined;

/**
 * @member {module:model/BadgeExpiry.TimeframeUnitEnum} timeframeUnit
 */
BadgeExpiry.prototype['timeframeUnit'] = undefined;





/**
 * Allowed values for the <code>expiryType</code> property.
 * @enum {String}
 * @readonly
 */
BadgeExpiry['ExpiryTypeEnum'] = {

    /**
     * value: "date"
     * @const
     */
    "date": "date",

    /**
     * value: "timeframe"
     * @const
     */
    "timeframe": "timeframe"
};


/**
 * Allowed values for the <code>timeframeUnit</code> property.
 * @enum {String}
 * @readonly
 */
BadgeExpiry['TimeframeUnitEnum'] = {

    /**
     * value: "days"
     * @const
     */
    "days": "days",

    /**
     * value: "months"
     * @const
     */
    "months": "months",

    /**
     * value: "years"
     * @const
     */
    "years": "years"
};



export default BadgeExpiry;

