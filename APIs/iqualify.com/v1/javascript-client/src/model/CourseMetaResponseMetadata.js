/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LearningOutcomes from './LearningOutcomes';

/**
 * The CourseMetaResponseMetadata model module.
 * @module model/CourseMetaResponseMetadata
 * @version v1
 */
class CourseMetaResponseMetadata {
    /**
     * Constructs a new <code>CourseMetaResponseMetadata</code>.
     * @alias module:model/CourseMetaResponseMetadata
     */
    constructor() { 
        
        CourseMetaResponseMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CourseMetaResponseMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CourseMetaResponseMetadata} obj Optional instance to populate.
     * @return {module:model/CourseMetaResponseMetadata} The populated <code>CourseMetaResponseMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CourseMetaResponseMetadata();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('learning_outcomes')) {
                obj['learning_outcomes'] = ApiClient.convertToType(data['learning_outcomes'], [LearningOutcomes]);
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'String');
            }
            if (data.hasOwnProperty('rootContentId')) {
                obj['rootContentId'] = ApiClient.convertToType(data['rootContentId'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('topic')) {
                obj['topic'] = ApiClient.convertToType(data['topic'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CourseMetaResponseMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CourseMetaResponseMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        if (data['learning_outcomes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['learning_outcomes'])) {
                throw new Error("Expected the field `learning_outcomes` to be an array in the JSON data but got " + data['learning_outcomes']);
            }
            // validate the optional field `learning_outcomes` (array)
            for (const item of data['learning_outcomes']) {
                LearningOutcomes.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['level'] && !(typeof data['level'] === 'string' || data['level'] instanceof String)) {
            throw new Error("Expected the field `level` to be a primitive type in the JSON string but got " + data['level']);
        }
        // ensure the json data is a string
        if (data['rootContentId'] && !(typeof data['rootContentId'] === 'string' || data['rootContentId'] instanceof String)) {
            throw new Error("Expected the field `rootContentId` to be a primitive type in the JSON string but got " + data['rootContentId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['topic'] && !(typeof data['topic'] === 'string' || data['topic'] instanceof String)) {
            throw new Error("Expected the field `topic` to be a primitive type in the JSON string but got " + data['topic']);
        }

        return true;
    }


}



/**
 * @member {String} category
 */
CourseMetaResponseMetadata.prototype['category'] = undefined;

/**
 * @member {Array.<module:model/LearningOutcomes>} learning_outcomes
 */
CourseMetaResponseMetadata.prototype['learning_outcomes'] = undefined;

/**
 * @member {String} level
 */
CourseMetaResponseMetadata.prototype['level'] = undefined;

/**
 * @member {String} rootContentId
 */
CourseMetaResponseMetadata.prototype['rootContentId'] = undefined;

/**
 * @member {Array.<String>} tags
 */
CourseMetaResponseMetadata.prototype['tags'] = undefined;

/**
 * @member {String} topic
 */
CourseMetaResponseMetadata.prototype['topic'] = undefined;






export default CourseMetaResponseMetadata;

