/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Criteria from './Criteria';
import OpenBadgeClass from './OpenBadgeClass';
import UserBadgeBadgeExpiry from './UserBadgeBadgeExpiry';

/**
 * The UserBadge model module.
 * @module model/UserBadge
 * @version v1
 */
class UserBadge {
    /**
     * Constructs a new <code>UserBadge</code>.
     * @alias module:model/UserBadge
     */
    constructor() { 
        
        UserBadge.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserBadge</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserBadge} obj Optional instance to populate.
     * @return {module:model/UserBadge} The populated <code>UserBadge</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserBadge();

            if (data.hasOwnProperty('awardedAt')) {
                obj['awardedAt'] = ApiClient.convertToType(data['awardedAt'], 'Date');
            }
            if (data.hasOwnProperty('badgeExpiry')) {
                obj['badgeExpiry'] = UserBadgeBadgeExpiry.constructFromObject(data['badgeExpiry']);
            }
            if (data.hasOwnProperty('badgeUrl')) {
                obj['badgeUrl'] = ApiClient.convertToType(data['badgeUrl'], 'String');
            }
            if (data.hasOwnProperty('criterias')) {
                obj['criterias'] = ApiClient.convertToType(data['criterias'], Criteria);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('offeringId')) {
                obj['offeringId'] = ApiClient.convertToType(data['offeringId'], 'String');
            }
            if (data.hasOwnProperty('openBadge')) {
                obj['openBadge'] = ApiClient.convertToType(data['openBadge'], OpenBadgeClass);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserBadge</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserBadge</code>.
     */
    static validateJSON(data) {
        // validate the optional field `badgeExpiry`
        if (data['badgeExpiry']) { // data not null
          UserBadgeBadgeExpiry.validateJSON(data['badgeExpiry']);
        }
        // ensure the json data is a string
        if (data['badgeUrl'] && !(typeof data['badgeUrl'] === 'string' || data['badgeUrl'] instanceof String)) {
            throw new Error("Expected the field `badgeUrl` to be a primitive type in the JSON string but got " + data['badgeUrl']);
        }
        // validate the optional field `criterias`
        if (data['criterias']) { // data not null
          Criteria.validateJSON(data['criterias']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['offeringId'] && !(typeof data['offeringId'] === 'string' || data['offeringId'] instanceof String)) {
            throw new Error("Expected the field `offeringId` to be a primitive type in the JSON string but got " + data['offeringId']);
        }
        // validate the optional field `openBadge`
        if (data['openBadge']) { // data not null
          OpenBadgeClass.validateJSON(data['openBadge']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {Date} awardedAt
 */
UserBadge.prototype['awardedAt'] = undefined;

/**
 * @member {module:model/UserBadgeBadgeExpiry} badgeExpiry
 */
UserBadge.prototype['badgeExpiry'] = undefined;

/**
 * @member {String} badgeUrl
 */
UserBadge.prototype['badgeUrl'] = undefined;

/**
 * @member {module:model/Criteria} criterias
 */
UserBadge.prototype['criterias'] = undefined;

/**
 * @member {String} description
 */
UserBadge.prototype['description'] = undefined;

/**
 * @member {String} offeringId
 */
UserBadge.prototype['offeringId'] = undefined;

/**
 * @member {module:model/OpenBadgeClass} openBadge
 */
UserBadge.prototype['openBadge'] = undefined;

/**
 * @member {String} title
 */
UserBadge.prototype['title'] = undefined;






export default UserBadge;

