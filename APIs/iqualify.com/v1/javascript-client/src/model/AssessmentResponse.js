/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Document from './Document';
import ThemeResponse from './ThemeResponse';

/**
 * The AssessmentResponse model module.
 * @module model/AssessmentResponse
 * @version v1
 */
class AssessmentResponse {
    /**
     * Constructs a new <code>AssessmentResponse</code>.
     * @alias module:model/AssessmentResponse
     */
    constructor() { 
        
        AssessmentResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['hidden'] = false;
    }

    /**
     * Constructs a <code>AssessmentResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssessmentResponse} obj Optional instance to populate.
     * @return {module:model/AssessmentResponse} The populated <code>AssessmentResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssessmentResponse();

            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('documents')) {
                obj['documents'] = ApiClient.convertToType(data['documents'], [Document]);
            }
            if (data.hasOwnProperty('dueDate')) {
                obj['dueDate'] = ApiClient.convertToType(data['dueDate'], 'Date');
            }
            if (data.hasOwnProperty('durationMinutes')) {
                obj['durationMinutes'] = ApiClient.convertToType(data['durationMinutes'], 'Number');
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('hidden')) {
                obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('markNumber')) {
                obj['markNumber'] = ApiClient.convertToType(data['markNumber'], 'String');
            }
            if (data.hasOwnProperty('markType')) {
                obj['markType'] = ApiClient.convertToType(data['markType'], 'String');
            }
            if (data.hasOwnProperty('maxAttempts')) {
                obj['maxAttempts'] = ApiClient.convertToType(data['maxAttempts'], 'Number');
            }
            if (data.hasOwnProperty('openDate')) {
                obj['openDate'] = ApiClient.convertToType(data['openDate'], 'Date');
            }
            if (data.hasOwnProperty('pid')) {
                obj['pid'] = ApiClient.convertToType(data['pid'], 'String');
            }
            if (data.hasOwnProperty('points')) {
                obj['points'] = ApiClient.convertToType(data['points'], 'String');
            }
            if (data.hasOwnProperty('themes')) {
                obj['themes'] = ApiClient.convertToType(data['themes'], [ThemeResponse]);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('totalQuestions')) {
                obj['totalQuestions'] = ApiClient.convertToType(data['totalQuestions'], 'Number');
            }
            if (data.hasOwnProperty('totalThemes')) {
                obj['totalThemes'] = ApiClient.convertToType(data['totalThemes'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssessmentResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssessmentResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        if (data['documents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['documents'])) {
                throw new Error("Expected the field `documents` to be an array in the JSON data but got " + data['documents']);
            }
            // validate the optional field `documents` (array)
            for (const item of data['documents']) {
                Document.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
            throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['markNumber'] && !(typeof data['markNumber'] === 'string' || data['markNumber'] instanceof String)) {
            throw new Error("Expected the field `markNumber` to be a primitive type in the JSON string but got " + data['markNumber']);
        }
        // ensure the json data is a string
        if (data['markType'] && !(typeof data['markType'] === 'string' || data['markType'] instanceof String)) {
            throw new Error("Expected the field `markType` to be a primitive type in the JSON string but got " + data['markType']);
        }
        // ensure the json data is a string
        if (data['pid'] && !(typeof data['pid'] === 'string' || data['pid'] instanceof String)) {
            throw new Error("Expected the field `pid` to be a primitive type in the JSON string but got " + data['pid']);
        }
        // ensure the json data is a string
        if (data['points'] && !(typeof data['points'] === 'string' || data['points'] instanceof String)) {
            throw new Error("Expected the field `points` to be a primitive type in the JSON string but got " + data['points']);
        }
        if (data['themes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['themes'])) {
                throw new Error("Expected the field `themes` to be an array in the JSON data but got " + data['themes']);
            }
            // validate the optional field `themes` (array)
            for (const item of data['themes']) {
                ThemeResponse.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {String} content
 */
AssessmentResponse.prototype['content'] = undefined;

/**
 * @member {Array.<module:model/Document>} documents
 */
AssessmentResponse.prototype['documents'] = undefined;

/**
 * @member {Date} dueDate
 */
AssessmentResponse.prototype['dueDate'] = undefined;

/**
 * @member {Number} durationMinutes
 */
AssessmentResponse.prototype['durationMinutes'] = undefined;

/**
 * @member {String} filename
 */
AssessmentResponse.prototype['filename'] = undefined;

/**
 * @member {Boolean} hidden
 * @default false
 */
AssessmentResponse.prototype['hidden'] = false;

/**
 * @member {String} id
 */
AssessmentResponse.prototype['id'] = undefined;

/**
 * @member {String} markNumber
 */
AssessmentResponse.prototype['markNumber'] = undefined;

/**
 * @member {String} markType
 */
AssessmentResponse.prototype['markType'] = undefined;

/**
 * @member {Number} maxAttempts
 */
AssessmentResponse.prototype['maxAttempts'] = undefined;

/**
 * @member {Date} openDate
 */
AssessmentResponse.prototype['openDate'] = undefined;

/**
 * @member {String} pid
 */
AssessmentResponse.prototype['pid'] = undefined;

/**
 * @member {String} points
 */
AssessmentResponse.prototype['points'] = undefined;

/**
 * @member {Array.<module:model/ThemeResponse>} themes
 */
AssessmentResponse.prototype['themes'] = undefined;

/**
 * @member {String} title
 */
AssessmentResponse.prototype['title'] = undefined;

/**
 * @member {Number} totalQuestions
 */
AssessmentResponse.prototype['totalQuestions'] = undefined;

/**
 * @member {Number} totalThemes
 */
AssessmentResponse.prototype['totalThemes'] = undefined;

/**
 * @member {String} type
 */
AssessmentResponse.prototype['type'] = undefined;






export default AssessmentResponse;

