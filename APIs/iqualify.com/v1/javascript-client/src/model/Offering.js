/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OfferingBadge from './OfferingBadge';
import OfferingMetadata from './OfferingMetadata';

/**
 * The Offering model module.
 * @module model/Offering
 * @version v1
 */
class Offering {
    /**
     * Constructs a new <code>Offering</code>.
     * @alias module:model/Offering
     */
    constructor() { 
        
        Offering.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Offering</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Offering} obj Optional instance to populate.
     * @return {module:model/Offering} The populated <code>Offering</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Offering();

            if (data.hasOwnProperty('badge')) {
                obj['badge'] = OfferingBadge.constructFromObject(data['badge']);
            }
            if (data.hasOwnProperty('contentId')) {
                obj['contentId'] = ApiClient.convertToType(data['contentId'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('earlyCloseOffDate')) {
                obj['earlyCloseOffDate'] = ApiClient.convertToType(data['earlyCloseOffDate'], 'Date');
            }
            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], 'Date');
            }
            if (data.hasOwnProperty('hasEarlyCloseOff')) {
                obj['hasEarlyCloseOff'] = ApiClient.convertToType(data['hasEarlyCloseOff'], 'Boolean');
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('isReadonly')) {
                obj['isReadonly'] = ApiClient.convertToType(data['isReadonly'], 'Boolean');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = OfferingMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('overview')) {
                obj['overview'] = ApiClient.convertToType(data['overview'], 'String');
            }
            if (data.hasOwnProperty('rootContentId')) {
                obj['rootContentId'] = ApiClient.convertToType(data['rootContentId'], 'String');
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'Date');
            }
            if (data.hasOwnProperty('trailerVideoUrl')) {
                obj['trailerVideoUrl'] = ApiClient.convertToType(data['trailerVideoUrl'], 'String');
            }
            if (data.hasOwnProperty('useRelativeDates')) {
                obj['useRelativeDates'] = ApiClient.convertToType(data['useRelativeDates'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Offering</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Offering</code>.
     */
    static validateJSON(data) {
        // validate the optional field `badge`
        if (data['badge']) { // data not null
          OfferingBadge.validateJSON(data['badge']);
        }
        // ensure the json data is a string
        if (data['contentId'] && !(typeof data['contentId'] === 'string' || data['contentId'] instanceof String)) {
            throw new Error("Expected the field `contentId` to be a primitive type in the JSON string but got " + data['contentId']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          OfferingMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['overview'] && !(typeof data['overview'] === 'string' || data['overview'] instanceof String)) {
            throw new Error("Expected the field `overview` to be a primitive type in the JSON string but got " + data['overview']);
        }
        // ensure the json data is a string
        if (data['rootContentId'] && !(typeof data['rootContentId'] === 'string' || data['rootContentId'] instanceof String)) {
            throw new Error("Expected the field `rootContentId` to be a primitive type in the JSON string but got " + data['rootContentId']);
        }
        // ensure the json data is a string
        if (data['trailerVideoUrl'] && !(typeof data['trailerVideoUrl'] === 'string' || data['trailerVideoUrl'] instanceof String)) {
            throw new Error("Expected the field `trailerVideoUrl` to be a primitive type in the JSON string but got " + data['trailerVideoUrl']);
        }

        return true;
    }


}



/**
 * @member {module:model/OfferingBadge} badge
 */
Offering.prototype['badge'] = undefined;

/**
 * The identifier for a specific version of a course
 * @member {String} contentId
 */
Offering.prototype['contentId'] = undefined;

/**
 * @member {String} description
 */
Offering.prototype['description'] = undefined;

/**
 * @member {Date} earlyCloseOffDate
 */
Offering.prototype['earlyCloseOffDate'] = undefined;

/**
 * @member {Date} end
 */
Offering.prototype['end'] = undefined;

/**
 * @member {Boolean} hasEarlyCloseOff
 */
Offering.prototype['hasEarlyCloseOff'] = undefined;

/**
 * @member {String} identifier
 */
Offering.prototype['identifier'] = undefined;

/**
 * @member {Boolean} isReadonly
 */
Offering.prototype['isReadonly'] = undefined;

/**
 * @member {module:model/OfferingMetadata} metadata
 */
Offering.prototype['metadata'] = undefined;

/**
 * @member {String} name
 */
Offering.prototype['name'] = undefined;

/**
 * @member {String} overview
 */
Offering.prototype['overview'] = undefined;

/**
 * Every time a course is republished it is assigned a new contentId. rootContentId is the first original contentId associated with a course.
 * @member {String} rootContentId
 */
Offering.prototype['rootContentId'] = undefined;

/**
 * @member {Date} start
 */
Offering.prototype['start'] = undefined;

/**
 * @member {String} trailerVideoUrl
 */
Offering.prototype['trailerVideoUrl'] = undefined;

/**
 * @member {Boolean} useRelativeDates
 */
Offering.prototype['useRelativeDates'] = undefined;






export default Offering;

