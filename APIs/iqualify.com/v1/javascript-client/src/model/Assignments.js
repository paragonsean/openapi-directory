/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Document from './Document';
import Mark from './Mark';

/**
 * The Assignments model module.
 * @module model/Assignments
 * @version v1
 */
class Assignments {
    /**
     * Constructs a new <code>Assignments</code>.
     * @alias module:model/Assignments
     */
    constructor() { 
        
        Assignments.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Assignments</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Assignments} obj Optional instance to populate.
     * @return {module:model/Assignments} The populated <code>Assignments</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Assignments();

            if (data.hasOwnProperty('files')) {
                obj['files'] = ApiClient.convertToType(data['files'], [Document]);
            }
            if (data.hasOwnProperty('marks')) {
                obj['marks'] = ApiClient.convertToType(data['marks'], [Mark]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('submittedAt')) {
                obj['submittedAt'] = ApiClient.convertToType(data['submittedAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Assignments</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Assignments</code>.
     */
    static validateJSON(data) {
        if (data['files']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['files'])) {
                throw new Error("Expected the field `files` to be an array in the JSON data but got " + data['files']);
            }
            // validate the optional field `files` (array)
            for (const item of data['files']) {
                Document.validateJSON(item);
            };
        }
        if (data['marks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['marks'])) {
                throw new Error("Expected the field `marks` to be an array in the JSON data but got " + data['marks']);
            }
            // validate the optional field `marks` (array)
            for (const item of data['marks']) {
                Mark.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/Document>} files
 */
Assignments.prototype['files'] = undefined;

/**
 * @member {Array.<module:model/Mark>} marks
 */
Assignments.prototype['marks'] = undefined;

/**
 * @member {String} status
 */
Assignments.prototype['status'] = undefined;

/**
 * @member {Date} submittedAt
 */
Assignments.prototype['submittedAt'] = undefined;

/**
 * @member {Date} updatedAt
 */
Assignments.prototype['updatedAt'] = undefined;






export default Assignments;

