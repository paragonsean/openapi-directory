/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IQualifyManagementApi);
  }
}(this, function(expect, IQualifyManagementApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new IQualifyManagementApi.AssessmentPendingSubmission();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AssessmentPendingSubmission', function() {
    it('should create an instance of AssessmentPendingSubmission', function() {
      // uncomment below and update the code to test AssessmentPendingSubmission
      //var instance = new IQualifyManagementApi.AssessmentPendingSubmission();
      //expect(instance).to.be.a(IQualifyManagementApi.AssessmentPendingSubmission);
    });

    it('should have the property content (base name: "content")', function() {
      // uncomment below and update the code to test the property content
      //var instance = new IQualifyManagementApi.AssessmentPendingSubmission();
      //expect(instance).to.be();
    });

    it('should have the property documents (base name: "documents")', function() {
      // uncomment below and update the code to test the property documents
      //var instance = new IQualifyManagementApi.AssessmentPendingSubmission();
      //expect(instance).to.be();
    });

    it('should have the property dueDate (base name: "dueDate")', function() {
      // uncomment below and update the code to test the property dueDate
      //var instance = new IQualifyManagementApi.AssessmentPendingSubmission();
      //expect(instance).to.be();
    });

    it('should have the property durationMinutes (base name: "durationMinutes")', function() {
      // uncomment below and update the code to test the property durationMinutes
      //var instance = new IQualifyManagementApi.AssessmentPendingSubmission();
      //expect(instance).to.be();
    });

    it('should have the property filename (base name: "filename")', function() {
      // uncomment below and update the code to test the property filename
      //var instance = new IQualifyManagementApi.AssessmentPendingSubmission();
      //expect(instance).to.be();
    });

    it('should have the property hidden (base name: "hidden")', function() {
      // uncomment below and update the code to test the property hidden
      //var instance = new IQualifyManagementApi.AssessmentPendingSubmission();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new IQualifyManagementApi.AssessmentPendingSubmission();
      //expect(instance).to.be();
    });

    it('should have the property markNumber (base name: "markNumber")', function() {
      // uncomment below and update the code to test the property markNumber
      //var instance = new IQualifyManagementApi.AssessmentPendingSubmission();
      //expect(instance).to.be();
    });

    it('should have the property markType (base name: "markType")', function() {
      // uncomment below and update the code to test the property markType
      //var instance = new IQualifyManagementApi.AssessmentPendingSubmission();
      //expect(instance).to.be();
    });

    it('should have the property maxAttempts (base name: "maxAttempts")', function() {
      // uncomment below and update the code to test the property maxAttempts
      //var instance = new IQualifyManagementApi.AssessmentPendingSubmission();
      //expect(instance).to.be();
    });

    it('should have the property offeringId (base name: "offeringId")', function() {
      // uncomment below and update the code to test the property offeringId
      //var instance = new IQualifyManagementApi.AssessmentPendingSubmission();
      //expect(instance).to.be();
    });

    it('should have the property offeringName (base name: "offeringName")', function() {
      // uncomment below and update the code to test the property offeringName
      //var instance = new IQualifyManagementApi.AssessmentPendingSubmission();
      //expect(instance).to.be();
    });

    it('should have the property openDate (base name: "openDate")', function() {
      // uncomment below and update the code to test the property openDate
      //var instance = new IQualifyManagementApi.AssessmentPendingSubmission();
      //expect(instance).to.be();
    });

    it('should have the property pid (base name: "pid")', function() {
      // uncomment below and update the code to test the property pid
      //var instance = new IQualifyManagementApi.AssessmentPendingSubmission();
      //expect(instance).to.be();
    });

    it('should have the property points (base name: "points")', function() {
      // uncomment below and update the code to test the property points
      //var instance = new IQualifyManagementApi.AssessmentPendingSubmission();
      //expect(instance).to.be();
    });

    it('should have the property themes (base name: "themes")', function() {
      // uncomment below and update the code to test the property themes
      //var instance = new IQualifyManagementApi.AssessmentPendingSubmission();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new IQualifyManagementApi.AssessmentPendingSubmission();
      //expect(instance).to.be();
    });

    it('should have the property totalQuestions (base name: "totalQuestions")', function() {
      // uncomment below and update the code to test the property totalQuestions
      //var instance = new IQualifyManagementApi.AssessmentPendingSubmission();
      //expect(instance).to.be();
    });

    it('should have the property totalThemes (base name: "totalThemes")', function() {
      // uncomment below and update the code to test the property totalThemes
      //var instance = new IQualifyManagementApi.AssessmentPendingSubmission();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new IQualifyManagementApi.AssessmentPendingSubmission();
      //expect(instance).to.be();
    });

    it('should have the property users (base name: "users")', function() {
      // uncomment below and update the code to test the property users
      //var instance = new IQualifyManagementApi.AssessmentPendingSubmission();
      //expect(instance).to.be();
    });

  });

}));
