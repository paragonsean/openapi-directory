/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IQualifyManagementApi);
  }
}(this, function(expect, IQualifyManagementApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new IQualifyManagementApi.OfferingUserResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OfferingUserResponse', function() {
    it('should create an instance of OfferingUserResponse', function() {
      // uncomment below and update the code to test OfferingUserResponse
      //var instance = new IQualifyManagementApi.OfferingUserResponse();
      //expect(instance).to.be.a(IQualifyManagementApi.OfferingUserResponse);
    });

    it('should have the property avatarUrl (base name: "avatarUrl")', function() {
      // uncomment below and update the code to test the property avatarUrl
      //var instance = new IQualifyManagementApi.OfferingUserResponse();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instance = new IQualifyManagementApi.OfferingUserResponse();
      //expect(instance).to.be();
    });

    it('should have the property evaluatedBy (base name: "evaluatedBy")', function() {
      // uncomment below and update the code to test the property evaluatedBy
      //var instance = new IQualifyManagementApi.OfferingUserResponse();
      //expect(instance).to.be();
    });

    it('should have the property evaluates (base name: "evaluates")', function() {
      // uncomment below and update the code to test the property evaluates
      //var instance = new IQualifyManagementApi.OfferingUserResponse();
      //expect(instance).to.be();
    });

    it('should have the property firstName (base name: "firstName")', function() {
      // uncomment below and update the code to test the property firstName
      //var instance = new IQualifyManagementApi.OfferingUserResponse();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new IQualifyManagementApi.OfferingUserResponse();
      //expect(instance).to.be();
    });

    it('should have the property isFacilitator (base name: "isFacilitator")', function() {
      // uncomment below and update the code to test the property isFacilitator
      //var instance = new IQualifyManagementApi.OfferingUserResponse();
      //expect(instance).to.be();
    });

    it('should have the property isMarker (base name: "isMarker")', function() {
      // uncomment below and update the code to test the property isMarker
      //var instance = new IQualifyManagementApi.OfferingUserResponse();
      //expect(instance).to.be();
    });

    it('should have the property isReadonly (base name: "isReadonly")', function() {
      // uncomment below and update the code to test the property isReadonly
      //var instance = new IQualifyManagementApi.OfferingUserResponse();
      //expect(instance).to.be();
    });

    it('should have the property lastName (base name: "lastName")', function() {
      // uncomment below and update the code to test the property lastName
      //var instance = new IQualifyManagementApi.OfferingUserResponse();
      //expect(instance).to.be();
    });

    it('should have the property markedBy (base name: "markedBy")', function() {
      // uncomment below and update the code to test the property markedBy
      //var instance = new IQualifyManagementApi.OfferingUserResponse();
      //expect(instance).to.be();
    });

    it('should have the property marks (base name: "marks")', function() {
      // uncomment below and update the code to test the property marks
      //var instance = new IQualifyManagementApi.OfferingUserResponse();
      //expect(instance).to.be();
    });

    it('should have the property personId (base name: "personId")', function() {
      // uncomment below and update the code to test the property personId
      //var instance = new IQualifyManagementApi.OfferingUserResponse();
      //expect(instance).to.be();
    });

    it('should have the property profile (base name: "profile")', function() {
      // uncomment below and update the code to test the property profile
      //var instance = new IQualifyManagementApi.OfferingUserResponse();
      //expect(instance).to.be();
    });

  });

}));
