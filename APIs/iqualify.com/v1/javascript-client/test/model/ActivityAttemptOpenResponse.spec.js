/**
 * iQualify Management API
 * The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IQualifyManagementApi);
  }
}(this, function(expect, IQualifyManagementApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new IQualifyManagementApi.ActivityAttemptOpenResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ActivityAttemptOpenResponse', function() {
    it('should create an instance of ActivityAttemptOpenResponse', function() {
      // uncomment below and update the code to test ActivityAttemptOpenResponse
      //var instance = new IQualifyManagementApi.ActivityAttemptOpenResponse();
      //expect(instance).to.be.a(IQualifyManagementApi.ActivityAttemptOpenResponse);
    });

    it('should have the property activityId (base name: "activityId")', function() {
      // uncomment below and update the code to test the property activityId
      //var instance = new IQualifyManagementApi.ActivityAttemptOpenResponse();
      //expect(instance).to.be();
    });

    it('should have the property activityType (base name: "activityType")', function() {
      // uncomment below and update the code to test the property activityType
      //var instance = new IQualifyManagementApi.ActivityAttemptOpenResponse();
      //expect(instance).to.be();
    });

    it('should have the property feedback (base name: "feedback")', function() {
      // uncomment below and update the code to test the property feedback
      //var instance = new IQualifyManagementApi.ActivityAttemptOpenResponse();
      //expect(instance).to.be();
    });

    it('should have the property learnerEmail (base name: "learnerEmail")', function() {
      // uncomment below and update the code to test the property learnerEmail
      //var instance = new IQualifyManagementApi.ActivityAttemptOpenResponse();
      //expect(instance).to.be();
    });

    it('should have the property offeringId (base name: "offeringId")', function() {
      // uncomment below and update the code to test the property offeringId
      //var instance = new IQualifyManagementApi.ActivityAttemptOpenResponse();
      //expect(instance).to.be();
    });

    it('should have the property responseText (base name: "responseText")', function() {
      // uncomment below and update the code to test the property responseText
      //var instance = new IQualifyManagementApi.ActivityAttemptOpenResponse();
      //expect(instance).to.be();
    });

    it('should have the property uploadedFiles (base name: "uploadedFiles")', function() {
      // uncomment below and update the code to test the property uploadedFiles
      //var instance = new IQualifyManagementApi.ActivityAttemptOpenResponse();
      //expect(instance).to.be();
    });

  });

}));
