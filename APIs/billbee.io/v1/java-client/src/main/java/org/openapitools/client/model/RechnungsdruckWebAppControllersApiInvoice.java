/*
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RechnungsdruckWebAppControllersApiInvoice
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:20.866639-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RechnungsdruckWebAppControllersApiInvoice {
  public static final String SERIALIZED_NAME_INVOICE_DATE = "InvoiceDate";
  @SerializedName(SERIALIZED_NAME_INVOICE_DATE)
  private OffsetDateTime invoiceDate;

  public static final String SERIALIZED_NAME_INVOICE_NUMBER = "InvoiceNumber";
  @SerializedName(SERIALIZED_NAME_INVOICE_NUMBER)
  private String invoiceNumber;

  public static final String SERIALIZED_NAME_ORDER_NUMBER = "OrderNumber";
  @SerializedName(SERIALIZED_NAME_ORDER_NUMBER)
  private String orderNumber;

  public static final String SERIALIZED_NAME_PD_F_DATA = "PDFData";
  @SerializedName(SERIALIZED_NAME_PD_F_DATA)
  private byte[] pdFData;

  public static final String SERIALIZED_NAME_PDF_DOWNLOAD_URL = "PdfDownloadUrl";
  @SerializedName(SERIALIZED_NAME_PDF_DOWNLOAD_URL)
  private String pdfDownloadUrl;

  public static final String SERIALIZED_NAME_TOTAL_GROSS = "TotalGross";
  @SerializedName(SERIALIZED_NAME_TOTAL_GROSS)
  private Double totalGross;

  public static final String SERIALIZED_NAME_TOTAL_NET = "TotalNet";
  @SerializedName(SERIALIZED_NAME_TOTAL_NET)
  private Double totalNet;

  public RechnungsdruckWebAppControllersApiInvoice() {
  }

  public RechnungsdruckWebAppControllersApiInvoice invoiceDate(OffsetDateTime invoiceDate) {
    this.invoiceDate = invoiceDate;
    return this;
  }

  /**
   * Get invoiceDate
   * @return invoiceDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getInvoiceDate() {
    return invoiceDate;
  }

  public void setInvoiceDate(OffsetDateTime invoiceDate) {
    this.invoiceDate = invoiceDate;
  }


  public RechnungsdruckWebAppControllersApiInvoice invoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
    return this;
  }

  /**
   * Get invoiceNumber
   * @return invoiceNumber
   */
  @javax.annotation.Nullable
  public String getInvoiceNumber() {
    return invoiceNumber;
  }

  public void setInvoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
  }


  public RechnungsdruckWebAppControllersApiInvoice orderNumber(String orderNumber) {
    this.orderNumber = orderNumber;
    return this;
  }

  /**
   * Get orderNumber
   * @return orderNumber
   */
  @javax.annotation.Nullable
  public String getOrderNumber() {
    return orderNumber;
  }

  public void setOrderNumber(String orderNumber) {
    this.orderNumber = orderNumber;
  }


  public RechnungsdruckWebAppControllersApiInvoice pdFData(byte[] pdFData) {
    this.pdFData = pdFData;
    return this;
  }

  /**
   * Get pdFData
   * @return pdFData
   */
  @javax.annotation.Nullable
  public byte[] getPdFData() {
    return pdFData;
  }

  public void setPdFData(byte[] pdFData) {
    this.pdFData = pdFData;
  }


  public RechnungsdruckWebAppControllersApiInvoice pdfDownloadUrl(String pdfDownloadUrl) {
    this.pdfDownloadUrl = pdfDownloadUrl;
    return this;
  }

  /**
   * Get pdfDownloadUrl
   * @return pdfDownloadUrl
   */
  @javax.annotation.Nullable
  public String getPdfDownloadUrl() {
    return pdfDownloadUrl;
  }

  public void setPdfDownloadUrl(String pdfDownloadUrl) {
    this.pdfDownloadUrl = pdfDownloadUrl;
  }


  public RechnungsdruckWebAppControllersApiInvoice totalGross(Double totalGross) {
    this.totalGross = totalGross;
    return this;
  }

  /**
   * Get totalGross
   * @return totalGross
   */
  @javax.annotation.Nullable
  public Double getTotalGross() {
    return totalGross;
  }

  public void setTotalGross(Double totalGross) {
    this.totalGross = totalGross;
  }


  public RechnungsdruckWebAppControllersApiInvoice totalNet(Double totalNet) {
    this.totalNet = totalNet;
    return this;
  }

  /**
   * Get totalNet
   * @return totalNet
   */
  @javax.annotation.Nullable
  public Double getTotalNet() {
    return totalNet;
  }

  public void setTotalNet(Double totalNet) {
    this.totalNet = totalNet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RechnungsdruckWebAppControllersApiInvoice rechnungsdruckWebAppControllersApiInvoice = (RechnungsdruckWebAppControllersApiInvoice) o;
    return Objects.equals(this.invoiceDate, rechnungsdruckWebAppControllersApiInvoice.invoiceDate) &&
        Objects.equals(this.invoiceNumber, rechnungsdruckWebAppControllersApiInvoice.invoiceNumber) &&
        Objects.equals(this.orderNumber, rechnungsdruckWebAppControllersApiInvoice.orderNumber) &&
        Arrays.equals(this.pdFData, rechnungsdruckWebAppControllersApiInvoice.pdFData) &&
        Objects.equals(this.pdfDownloadUrl, rechnungsdruckWebAppControllersApiInvoice.pdfDownloadUrl) &&
        Objects.equals(this.totalGross, rechnungsdruckWebAppControllersApiInvoice.totalGross) &&
        Objects.equals(this.totalNet, rechnungsdruckWebAppControllersApiInvoice.totalNet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(invoiceDate, invoiceNumber, orderNumber, Arrays.hashCode(pdFData), pdfDownloadUrl, totalGross, totalNet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RechnungsdruckWebAppControllersApiInvoice {\n");
    sb.append("    invoiceDate: ").append(toIndentedString(invoiceDate)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    orderNumber: ").append(toIndentedString(orderNumber)).append("\n");
    sb.append("    pdFData: ").append(toIndentedString(pdFData)).append("\n");
    sb.append("    pdfDownloadUrl: ").append(toIndentedString(pdfDownloadUrl)).append("\n");
    sb.append("    totalGross: ").append(toIndentedString(totalGross)).append("\n");
    sb.append("    totalNet: ").append(toIndentedString(totalNet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InvoiceDate");
    openapiFields.add("InvoiceNumber");
    openapiFields.add("OrderNumber");
    openapiFields.add("PDFData");
    openapiFields.add("PdfDownloadUrl");
    openapiFields.add("TotalGross");
    openapiFields.add("TotalNet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RechnungsdruckWebAppControllersApiInvoice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RechnungsdruckWebAppControllersApiInvoice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RechnungsdruckWebAppControllersApiInvoice is not found in the empty JSON string", RechnungsdruckWebAppControllersApiInvoice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RechnungsdruckWebAppControllersApiInvoice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RechnungsdruckWebAppControllersApiInvoice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("InvoiceNumber") != null && !jsonObj.get("InvoiceNumber").isJsonNull()) && !jsonObj.get("InvoiceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InvoiceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InvoiceNumber").toString()));
      }
      if ((jsonObj.get("OrderNumber") != null && !jsonObj.get("OrderNumber").isJsonNull()) && !jsonObj.get("OrderNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OrderNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OrderNumber").toString()));
      }
      if ((jsonObj.get("PdfDownloadUrl") != null && !jsonObj.get("PdfDownloadUrl").isJsonNull()) && !jsonObj.get("PdfDownloadUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PdfDownloadUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PdfDownloadUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RechnungsdruckWebAppControllersApiInvoice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RechnungsdruckWebAppControllersApiInvoice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RechnungsdruckWebAppControllersApiInvoice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RechnungsdruckWebAppControllersApiInvoice.class));

       return (TypeAdapter<T>) new TypeAdapter<RechnungsdruckWebAppControllersApiInvoice>() {
           @Override
           public void write(JsonWriter out, RechnungsdruckWebAppControllersApiInvoice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RechnungsdruckWebAppControllersApiInvoice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RechnungsdruckWebAppControllersApiInvoice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RechnungsdruckWebAppControllersApiInvoice
   * @throws IOException if the JSON string is invalid with respect to RechnungsdruckWebAppControllersApiInvoice
   */
  public static RechnungsdruckWebAppControllersApiInvoice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RechnungsdruckWebAppControllersApiInvoice.class);
  }

  /**
   * Convert an instance of RechnungsdruckWebAppControllersApiInvoice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

