/*
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BillbeeInterfacesBillbeeAPIModelOrder;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelInvoiceApiModel;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelOrder;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiInvoice;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelsLayoutTemplate;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiOrderStateUpdate;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiOrderTagCreate;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiSearchControllerSearchModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrdersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrdersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for layoutApiGetList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call layoutApiGetListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/layouts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call layoutApiGetListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return layoutApiGetListCall(_callback);

    }

    /**
     * 
     * 
     * @return RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelsLayoutTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelsLayoutTemplate layoutApiGetList() throws ApiException {
        ApiResponse<RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelsLayoutTemplate> localVarResp = layoutApiGetListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelsLayoutTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelsLayoutTemplate> layoutApiGetListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = layoutApiGetListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelsLayoutTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call layoutApiGetListAsync(final ApiCallback<RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelsLayoutTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = layoutApiGetListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelsLayoutTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderApiAddShipment
     * @param id The internal billbee id of the order (required)
     * @param rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel The shipment data to create the shipment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiAddShipmentCall(Long id, RechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel;

        // create path and map variables
        String localVarPath = "/api/v1/orders/{id}/shipment"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderApiAddShipmentValidateBeforeCall(Long id, RechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderApiAddShipment(Async)");
        }

        // verify the required parameter 'rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel' is set
        if (rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel == null) {
            throw new ApiException("Missing the required parameter 'rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel' when calling orderApiAddShipment(Async)");
        }

        return orderApiAddShipmentCall(id, rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel, _callback);

    }

    /**
     * Add a shipment to a given order
     * 
     * @param id The internal billbee id of the order (required)
     * @param rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel The shipment data to create the shipment (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object orderApiAddShipment(Long id, RechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel) throws ApiException {
        ApiResponse<Object> localVarResp = orderApiAddShipmentWithHttpInfo(id, rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel);
        return localVarResp.getData();
    }

    /**
     * Add a shipment to a given order
     * 
     * @param id The internal billbee id of the order (required)
     * @param rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel The shipment data to create the shipment (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> orderApiAddShipmentWithHttpInfo(Long id, RechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel) throws ApiException {
        okhttp3.Call localVarCall = orderApiAddShipmentValidateBeforeCall(id, rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a shipment to a given order (asynchronously)
     * 
     * @param id The internal billbee id of the order (required)
     * @param rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel The shipment data to create the shipment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiAddShipmentAsync(Long id, RechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderApiAddShipmentValidateBeforeCall(id, rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderApiCreateDeliveryNote
     * @param id The internal billbee id of the order (required)
     * @param includePdf If true, the PDF is included in the response as base64 encoded string (optional)
     * @param sendToCloudId Optionally specify the id of a billbee connected cloud device to send the pdf to (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiCreateDeliveryNoteCall(Long id, Boolean includePdf, Long sendToCloudId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/orders/CreateDeliveryNote/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includePdf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePdf", includePdf));
        }

        if (sendToCloudId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendToCloudId", sendToCloudId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderApiCreateDeliveryNoteValidateBeforeCall(Long id, Boolean includePdf, Long sendToCloudId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderApiCreateDeliveryNote(Async)");
        }

        return orderApiCreateDeliveryNoteCall(id, includePdf, sendToCloudId, _callback);

    }

    /**
     * Create an delivery note for an existing order. This request is extra throttled by order and api key to a maximum of 1 per 5 minutes.
     * 
     * @param id The internal billbee id of the order (required)
     * @param includePdf If true, the PDF is included in the response as base64 encoded string (optional)
     * @param sendToCloudId Optionally specify the id of a billbee connected cloud device to send the pdf to (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object orderApiCreateDeliveryNote(Long id, Boolean includePdf, Long sendToCloudId) throws ApiException {
        ApiResponse<Object> localVarResp = orderApiCreateDeliveryNoteWithHttpInfo(id, includePdf, sendToCloudId);
        return localVarResp.getData();
    }

    /**
     * Create an delivery note for an existing order. This request is extra throttled by order and api key to a maximum of 1 per 5 minutes.
     * 
     * @param id The internal billbee id of the order (required)
     * @param includePdf If true, the PDF is included in the response as base64 encoded string (optional)
     * @param sendToCloudId Optionally specify the id of a billbee connected cloud device to send the pdf to (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> orderApiCreateDeliveryNoteWithHttpInfo(Long id, Boolean includePdf, Long sendToCloudId) throws ApiException {
        okhttp3.Call localVarCall = orderApiCreateDeliveryNoteValidateBeforeCall(id, includePdf, sendToCloudId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an delivery note for an existing order. This request is extra throttled by order and api key to a maximum of 1 per 5 minutes. (asynchronously)
     * 
     * @param id The internal billbee id of the order (required)
     * @param includePdf If true, the PDF is included in the response as base64 encoded string (optional)
     * @param sendToCloudId Optionally specify the id of a billbee connected cloud device to send the pdf to (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiCreateDeliveryNoteAsync(Long id, Boolean includePdf, Long sendToCloudId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderApiCreateDeliveryNoteValidateBeforeCall(id, includePdf, sendToCloudId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderApiCreateInvoice
     * @param id The internal billbee id of the order (required)
     * @param includeInvoicePdf If true, the PDF is included in the response as base64 encoded string (optional)
     * @param templateId You can pass the id of an invoice template to overwrite the assigned template for invoice creation (optional)
     * @param sendToCloudId You can pass the id of a connected cloud printer/storage to send the invoice to it (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiCreateInvoiceCall(Long id, Boolean includeInvoicePdf, Long templateId, Long sendToCloudId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/orders/CreateInvoice/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeInvoicePdf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInvoicePdf", includeInvoicePdf));
        }

        if (templateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateId", templateId));
        }

        if (sendToCloudId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendToCloudId", sendToCloudId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderApiCreateInvoiceValidateBeforeCall(Long id, Boolean includeInvoicePdf, Long templateId, Long sendToCloudId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderApiCreateInvoice(Async)");
        }

        return orderApiCreateInvoiceCall(id, includeInvoicePdf, templateId, sendToCloudId, _callback);

    }

    /**
     * Create an invoice for an existing order. This request is extra throttled by order and api key to a maximum of 1 per 5 minutes.
     * 
     * @param id The internal billbee id of the order (required)
     * @param includeInvoicePdf If true, the PDF is included in the response as base64 encoded string (optional)
     * @param templateId You can pass the id of an invoice template to overwrite the assigned template for invoice creation (optional)
     * @param sendToCloudId You can pass the id of a connected cloud printer/storage to send the invoice to it (optional)
     * @return RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiInvoice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiInvoice orderApiCreateInvoice(Long id, Boolean includeInvoicePdf, Long templateId, Long sendToCloudId) throws ApiException {
        ApiResponse<RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiInvoice> localVarResp = orderApiCreateInvoiceWithHttpInfo(id, includeInvoicePdf, templateId, sendToCloudId);
        return localVarResp.getData();
    }

    /**
     * Create an invoice for an existing order. This request is extra throttled by order and api key to a maximum of 1 per 5 minutes.
     * 
     * @param id The internal billbee id of the order (required)
     * @param includeInvoicePdf If true, the PDF is included in the response as base64 encoded string (optional)
     * @param templateId You can pass the id of an invoice template to overwrite the assigned template for invoice creation (optional)
     * @param sendToCloudId You can pass the id of a connected cloud printer/storage to send the invoice to it (optional)
     * @return ApiResponse&lt;RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiInvoice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiInvoice> orderApiCreateInvoiceWithHttpInfo(Long id, Boolean includeInvoicePdf, Long templateId, Long sendToCloudId) throws ApiException {
        okhttp3.Call localVarCall = orderApiCreateInvoiceValidateBeforeCall(id, includeInvoicePdf, templateId, sendToCloudId, null);
        Type localVarReturnType = new TypeToken<RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiInvoice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an invoice for an existing order. This request is extra throttled by order and api key to a maximum of 1 per 5 minutes. (asynchronously)
     * 
     * @param id The internal billbee id of the order (required)
     * @param includeInvoicePdf If true, the PDF is included in the response as base64 encoded string (optional)
     * @param templateId You can pass the id of an invoice template to overwrite the assigned template for invoice creation (optional)
     * @param sendToCloudId You can pass the id of a connected cloud printer/storage to send the invoice to it (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiCreateInvoiceAsync(Long id, Boolean includeInvoicePdf, Long templateId, Long sendToCloudId, final ApiCallback<RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiInvoice> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderApiCreateInvoiceValidateBeforeCall(id, includeInvoicePdf, templateId, sendToCloudId, _callback);
        Type localVarReturnType = new TypeToken<RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiInvoice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderApiFind
     * @param id The order id from the external system (required)
     * @param partner Optional the name of the shop/marketplace the order was imported from (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call orderApiFindCall(String id, String partner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/orders/find/{id}/{partner}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "partner" + "}", localVarApiClient.escapeString(partner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderApiFindValidateBeforeCall(String id, String partner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderApiFind(Async)");
        }

        // verify the required parameter 'partner' is set
        if (partner == null) {
            throw new ApiException("Missing the required parameter 'partner' when calling orderApiFind(Async)");
        }

        return orderApiFindCall(id, partner, _callback);

    }

    /**
     * Find a single order by its external id (order number)
     * 
     * @param id The order id from the external system (required)
     * @param partner Optional the name of the shop/marketplace the order was imported from (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Object orderApiFind(String id, String partner) throws ApiException {
        ApiResponse<Object> localVarResp = orderApiFindWithHttpInfo(id, partner);
        return localVarResp.getData();
    }

    /**
     * Find a single order by its external id (order number)
     * 
     * @param id The order id from the external system (required)
     * @param partner Optional the name of the shop/marketplace the order was imported from (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Object> orderApiFindWithHttpInfo(String id, String partner) throws ApiException {
        okhttp3.Call localVarCall = orderApiFindValidateBeforeCall(id, partner, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find a single order by its external id (order number) (asynchronously)
     * 
     * @param id The order id from the external system (required)
     * @param partner Optional the name of the shop/marketplace the order was imported from (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call orderApiFindAsync(String id, String partner, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderApiFindValidateBeforeCall(id, partner, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderApiGet
     * @param id The internal billbee id of the order (required)
     * @param articleTitleSource The source field for the article title. 0 &#x3D; Order Position (default), 1 &#x3D; Article Title, 2 &#x3D; Article Invoice Text (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiGetCall(Long id, Integer articleTitleSource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/orders/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (articleTitleSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("articleTitleSource", articleTitleSource));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderApiGetValidateBeforeCall(Long id, Integer articleTitleSource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderApiGet(Async)");
        }

        return orderApiGetCall(id, articleTitleSource, _callback);

    }

    /**
     * Get a single order by its internal billbee id. This request is throttled to 6 calls per order in one minute
     * 
     * @param id The internal billbee id of the order (required)
     * @param articleTitleSource The source field for the article title. 0 &#x3D; Order Position (default), 1 &#x3D; Article Title, 2 &#x3D; Article Invoice Text (optional)
     * @return RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder orderApiGet(Long id, Integer articleTitleSource) throws ApiException {
        ApiResponse<RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder> localVarResp = orderApiGetWithHttpInfo(id, articleTitleSource);
        return localVarResp.getData();
    }

    /**
     * Get a single order by its internal billbee id. This request is throttled to 6 calls per order in one minute
     * 
     * @param id The internal billbee id of the order (required)
     * @param articleTitleSource The source field for the article title. 0 &#x3D; Order Position (default), 1 &#x3D; Article Title, 2 &#x3D; Article Invoice Text (optional)
     * @return ApiResponse&lt;RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder> orderApiGetWithHttpInfo(Long id, Integer articleTitleSource) throws ApiException {
        okhttp3.Call localVarCall = orderApiGetValidateBeforeCall(id, articleTitleSource, null);
        Type localVarReturnType = new TypeToken<RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single order by its internal billbee id. This request is throttled to 6 calls per order in one minute (asynchronously)
     * 
     * @param id The internal billbee id of the order (required)
     * @param articleTitleSource The source field for the article title. 0 &#x3D; Order Position (default), 1 &#x3D; Article Title, 2 &#x3D; Article Invoice Text (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiGetAsync(Long id, Integer articleTitleSource, final ApiCallback<RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderApiGetValidateBeforeCall(id, articleTitleSource, _callback);
        Type localVarReturnType = new TypeToken<RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderApiGetByExtRef
     * @param extRef The extern order number of the order (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiGetByExtRefCall(String extRef, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/orders/findbyextref/{extRef}"
            .replace("{" + "extRef" + "}", localVarApiClient.escapeString(extRef.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderApiGetByExtRefValidateBeforeCall(String extRef, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'extRef' is set
        if (extRef == null) {
            throw new ApiException("Missing the required parameter 'extRef' when calling orderApiGetByExtRef(Async)");
        }

        return orderApiGetByExtRefCall(extRef, _callback);

    }

    /**
     * Get a single order by its external order number
     * 
     * @param extRef The extern order number of the order (required)
     * @return RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder orderApiGetByExtRef(String extRef) throws ApiException {
        ApiResponse<RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder> localVarResp = orderApiGetByExtRefWithHttpInfo(extRef);
        return localVarResp.getData();
    }

    /**
     * Get a single order by its external order number
     * 
     * @param extRef The extern order number of the order (required)
     * @return ApiResponse&lt;RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder> orderApiGetByExtRefWithHttpInfo(String extRef) throws ApiException {
        okhttp3.Call localVarCall = orderApiGetByExtRefValidateBeforeCall(extRef, null);
        Type localVarReturnType = new TypeToken<RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single order by its external order number (asynchronously)
     * 
     * @param extRef The extern order number of the order (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiGetByExtRefAsync(String extRef, final ApiCallback<RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderApiGetByExtRefValidateBeforeCall(extRef, _callback);
        Type localVarReturnType = new TypeToken<RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderApiGetInvoiceList
     * @param minInvoiceDate Specifies the oldest invoice date to include (optional)
     * @param maxInvoiceDate Specifies the newest invoice date to include (optional)
     * @param page Specifies the page to request (optional)
     * @param pageSize Specifies the pagesize. Defaults to 50, max value is 250 (optional)
     * @param shopId Specifies a list of shop ids for which invoices should be included (optional)
     * @param orderStateId Specifies a list of state ids to include in the response (optional)
     * @param tag  (optional)
     * @param minPayDate  (optional)
     * @param maxPayDate  (optional)
     * @param includePositions  (optional)
     * @param excludeTags If true the list of tags passed to the call are used to filter orders to not include these tags (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiGetInvoiceListCall(OffsetDateTime minInvoiceDate, OffsetDateTime maxInvoiceDate, Integer page, Integer pageSize, List<Long> shopId, List<Integer> orderStateId, List<String> tag, OffsetDateTime minPayDate, OffsetDateTime maxPayDate, Boolean includePositions, Boolean excludeTags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/orders/invoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (minInvoiceDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minInvoiceDate", minInvoiceDate));
        }

        if (maxInvoiceDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxInvoiceDate", maxInvoiceDate));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (shopId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "shopId", shopId));
        }

        if (orderStateId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "orderStateId", orderStateId));
        }

        if (tag != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tag", tag));
        }

        if (minPayDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minPayDate", minPayDate));
        }

        if (maxPayDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxPayDate", maxPayDate));
        }

        if (includePositions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePositions", includePositions));
        }

        if (excludeTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeTags", excludeTags));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderApiGetInvoiceListValidateBeforeCall(OffsetDateTime minInvoiceDate, OffsetDateTime maxInvoiceDate, Integer page, Integer pageSize, List<Long> shopId, List<Integer> orderStateId, List<String> tag, OffsetDateTime minPayDate, OffsetDateTime maxPayDate, Boolean includePositions, Boolean excludeTags, final ApiCallback _callback) throws ApiException {
        return orderApiGetInvoiceListCall(minInvoiceDate, maxInvoiceDate, page, pageSize, shopId, orderStateId, tag, minPayDate, maxPayDate, includePositions, excludeTags, _callback);

    }

    /**
     * Get a list of all invoices optionally filtered by date. This request ist throttled to 1 per 1 minute for same page and minInvoiceDate
     * 
     * @param minInvoiceDate Specifies the oldest invoice date to include (optional)
     * @param maxInvoiceDate Specifies the newest invoice date to include (optional)
     * @param page Specifies the page to request (optional)
     * @param pageSize Specifies the pagesize. Defaults to 50, max value is 250 (optional)
     * @param shopId Specifies a list of shop ids for which invoices should be included (optional)
     * @param orderStateId Specifies a list of state ids to include in the response (optional)
     * @param tag  (optional)
     * @param minPayDate  (optional)
     * @param maxPayDate  (optional)
     * @param includePositions  (optional)
     * @param excludeTags If true the list of tags passed to the call are used to filter orders to not include these tags (optional)
     * @return RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelInvoiceApiModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelInvoiceApiModel orderApiGetInvoiceList(OffsetDateTime minInvoiceDate, OffsetDateTime maxInvoiceDate, Integer page, Integer pageSize, List<Long> shopId, List<Integer> orderStateId, List<String> tag, OffsetDateTime minPayDate, OffsetDateTime maxPayDate, Boolean includePositions, Boolean excludeTags) throws ApiException {
        ApiResponse<RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelInvoiceApiModel> localVarResp = orderApiGetInvoiceListWithHttpInfo(minInvoiceDate, maxInvoiceDate, page, pageSize, shopId, orderStateId, tag, minPayDate, maxPayDate, includePositions, excludeTags);
        return localVarResp.getData();
    }

    /**
     * Get a list of all invoices optionally filtered by date. This request ist throttled to 1 per 1 minute for same page and minInvoiceDate
     * 
     * @param minInvoiceDate Specifies the oldest invoice date to include (optional)
     * @param maxInvoiceDate Specifies the newest invoice date to include (optional)
     * @param page Specifies the page to request (optional)
     * @param pageSize Specifies the pagesize. Defaults to 50, max value is 250 (optional)
     * @param shopId Specifies a list of shop ids for which invoices should be included (optional)
     * @param orderStateId Specifies a list of state ids to include in the response (optional)
     * @param tag  (optional)
     * @param minPayDate  (optional)
     * @param maxPayDate  (optional)
     * @param includePositions  (optional)
     * @param excludeTags If true the list of tags passed to the call are used to filter orders to not include these tags (optional)
     * @return ApiResponse&lt;RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelInvoiceApiModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelInvoiceApiModel> orderApiGetInvoiceListWithHttpInfo(OffsetDateTime minInvoiceDate, OffsetDateTime maxInvoiceDate, Integer page, Integer pageSize, List<Long> shopId, List<Integer> orderStateId, List<String> tag, OffsetDateTime minPayDate, OffsetDateTime maxPayDate, Boolean includePositions, Boolean excludeTags) throws ApiException {
        okhttp3.Call localVarCall = orderApiGetInvoiceListValidateBeforeCall(minInvoiceDate, maxInvoiceDate, page, pageSize, shopId, orderStateId, tag, minPayDate, maxPayDate, includePositions, excludeTags, null);
        Type localVarReturnType = new TypeToken<RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelInvoiceApiModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of all invoices optionally filtered by date. This request ist throttled to 1 per 1 minute for same page and minInvoiceDate (asynchronously)
     * 
     * @param minInvoiceDate Specifies the oldest invoice date to include (optional)
     * @param maxInvoiceDate Specifies the newest invoice date to include (optional)
     * @param page Specifies the page to request (optional)
     * @param pageSize Specifies the pagesize. Defaults to 50, max value is 250 (optional)
     * @param shopId Specifies a list of shop ids for which invoices should be included (optional)
     * @param orderStateId Specifies a list of state ids to include in the response (optional)
     * @param tag  (optional)
     * @param minPayDate  (optional)
     * @param maxPayDate  (optional)
     * @param includePositions  (optional)
     * @param excludeTags If true the list of tags passed to the call are used to filter orders to not include these tags (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiGetInvoiceListAsync(OffsetDateTime minInvoiceDate, OffsetDateTime maxInvoiceDate, Integer page, Integer pageSize, List<Long> shopId, List<Integer> orderStateId, List<String> tag, OffsetDateTime minPayDate, OffsetDateTime maxPayDate, Boolean includePositions, Boolean excludeTags, final ApiCallback<RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelInvoiceApiModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderApiGetInvoiceListValidateBeforeCall(minInvoiceDate, maxInvoiceDate, page, pageSize, shopId, orderStateId, tag, minPayDate, maxPayDate, includePositions, excludeTags, _callback);
        Type localVarReturnType = new TypeToken<RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelInvoiceApiModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderApiGetList
     * @param minOrderDate Specifies the oldest order date to include in the response (optional)
     * @param maxOrderDate Specifies the newest order date to include in the response (optional)
     * @param page Specifies the page to request (optional)
     * @param pageSize Specifies the pagesize. Defaults to 50, max value is 250 (optional)
     * @param shopId Specifies a list of shop ids for which invoices should be included (optional)
     * @param orderStateId Specifies a list of state ids to include in the response (optional)
     * @param tag Specifies a list of tags the order must have attached to be included in the response (optional)
     * @param minimumBillBeeOrderId If given, all delivered orders have an Id greater than or equal to the given minimumOrderId (optional)
     * @param modifiedAtMin If given, the last modification has to be newer than the given date (optional)
     * @param modifiedAtMax If given, the last modification has to be older or equal than the given date. (optional)
     * @param articleTitleSource The source field for the article title. 0 &#x3D; Order Position (default), 1 &#x3D; Article Title, 2 &#x3D; Article Invoice Text (optional)
     * @param excludeTags If true the list of tags passed to the call are used to filter orders to not include these tags (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiGetListCall(OffsetDateTime minOrderDate, OffsetDateTime maxOrderDate, Integer page, Integer pageSize, List<Long> shopId, List<Integer> orderStateId, List<String> tag, Long minimumBillBeeOrderId, OffsetDateTime modifiedAtMin, OffsetDateTime modifiedAtMax, Integer articleTitleSource, Boolean excludeTags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (minOrderDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minOrderDate", minOrderDate));
        }

        if (maxOrderDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxOrderDate", maxOrderDate));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (shopId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "shopId", shopId));
        }

        if (orderStateId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "orderStateId", orderStateId));
        }

        if (tag != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tag", tag));
        }

        if (minimumBillBeeOrderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minimumBillBeeOrderId", minimumBillBeeOrderId));
        }

        if (modifiedAtMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modifiedAtMin", modifiedAtMin));
        }

        if (modifiedAtMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modifiedAtMax", modifiedAtMax));
        }

        if (articleTitleSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("articleTitleSource", articleTitleSource));
        }

        if (excludeTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeTags", excludeTags));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderApiGetListValidateBeforeCall(OffsetDateTime minOrderDate, OffsetDateTime maxOrderDate, Integer page, Integer pageSize, List<Long> shopId, List<Integer> orderStateId, List<String> tag, Long minimumBillBeeOrderId, OffsetDateTime modifiedAtMin, OffsetDateTime modifiedAtMax, Integer articleTitleSource, Boolean excludeTags, final ApiCallback _callback) throws ApiException {
        return orderApiGetListCall(minOrderDate, maxOrderDate, page, pageSize, shopId, orderStateId, tag, minimumBillBeeOrderId, modifiedAtMin, modifiedAtMax, articleTitleSource, excludeTags, _callback);

    }

    /**
     * Get a list of all orders optionally filtered by date
     * 
     * @param minOrderDate Specifies the oldest order date to include in the response (optional)
     * @param maxOrderDate Specifies the newest order date to include in the response (optional)
     * @param page Specifies the page to request (optional)
     * @param pageSize Specifies the pagesize. Defaults to 50, max value is 250 (optional)
     * @param shopId Specifies a list of shop ids for which invoices should be included (optional)
     * @param orderStateId Specifies a list of state ids to include in the response (optional)
     * @param tag Specifies a list of tags the order must have attached to be included in the response (optional)
     * @param minimumBillBeeOrderId If given, all delivered orders have an Id greater than or equal to the given minimumOrderId (optional)
     * @param modifiedAtMin If given, the last modification has to be newer than the given date (optional)
     * @param modifiedAtMax If given, the last modification has to be older or equal than the given date. (optional)
     * @param articleTitleSource The source field for the article title. 0 &#x3D; Order Position (default), 1 &#x3D; Article Title, 2 &#x3D; Article Invoice Text (optional)
     * @param excludeTags If true the list of tags passed to the call are used to filter orders to not include these tags (optional)
     * @return RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelOrder orderApiGetList(OffsetDateTime minOrderDate, OffsetDateTime maxOrderDate, Integer page, Integer pageSize, List<Long> shopId, List<Integer> orderStateId, List<String> tag, Long minimumBillBeeOrderId, OffsetDateTime modifiedAtMin, OffsetDateTime modifiedAtMax, Integer articleTitleSource, Boolean excludeTags) throws ApiException {
        ApiResponse<RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelOrder> localVarResp = orderApiGetListWithHttpInfo(minOrderDate, maxOrderDate, page, pageSize, shopId, orderStateId, tag, minimumBillBeeOrderId, modifiedAtMin, modifiedAtMax, articleTitleSource, excludeTags);
        return localVarResp.getData();
    }

    /**
     * Get a list of all orders optionally filtered by date
     * 
     * @param minOrderDate Specifies the oldest order date to include in the response (optional)
     * @param maxOrderDate Specifies the newest order date to include in the response (optional)
     * @param page Specifies the page to request (optional)
     * @param pageSize Specifies the pagesize. Defaults to 50, max value is 250 (optional)
     * @param shopId Specifies a list of shop ids for which invoices should be included (optional)
     * @param orderStateId Specifies a list of state ids to include in the response (optional)
     * @param tag Specifies a list of tags the order must have attached to be included in the response (optional)
     * @param minimumBillBeeOrderId If given, all delivered orders have an Id greater than or equal to the given minimumOrderId (optional)
     * @param modifiedAtMin If given, the last modification has to be newer than the given date (optional)
     * @param modifiedAtMax If given, the last modification has to be older or equal than the given date. (optional)
     * @param articleTitleSource The source field for the article title. 0 &#x3D; Order Position (default), 1 &#x3D; Article Title, 2 &#x3D; Article Invoice Text (optional)
     * @param excludeTags If true the list of tags passed to the call are used to filter orders to not include these tags (optional)
     * @return ApiResponse&lt;RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelOrder> orderApiGetListWithHttpInfo(OffsetDateTime minOrderDate, OffsetDateTime maxOrderDate, Integer page, Integer pageSize, List<Long> shopId, List<Integer> orderStateId, List<String> tag, Long minimumBillBeeOrderId, OffsetDateTime modifiedAtMin, OffsetDateTime modifiedAtMax, Integer articleTitleSource, Boolean excludeTags) throws ApiException {
        okhttp3.Call localVarCall = orderApiGetListValidateBeforeCall(minOrderDate, maxOrderDate, page, pageSize, shopId, orderStateId, tag, minimumBillBeeOrderId, modifiedAtMin, modifiedAtMax, articleTitleSource, excludeTags, null);
        Type localVarReturnType = new TypeToken<RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelOrder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of all orders optionally filtered by date (asynchronously)
     * 
     * @param minOrderDate Specifies the oldest order date to include in the response (optional)
     * @param maxOrderDate Specifies the newest order date to include in the response (optional)
     * @param page Specifies the page to request (optional)
     * @param pageSize Specifies the pagesize. Defaults to 50, max value is 250 (optional)
     * @param shopId Specifies a list of shop ids for which invoices should be included (optional)
     * @param orderStateId Specifies a list of state ids to include in the response (optional)
     * @param tag Specifies a list of tags the order must have attached to be included in the response (optional)
     * @param minimumBillBeeOrderId If given, all delivered orders have an Id greater than or equal to the given minimumOrderId (optional)
     * @param modifiedAtMin If given, the last modification has to be newer than the given date (optional)
     * @param modifiedAtMax If given, the last modification has to be older or equal than the given date. (optional)
     * @param articleTitleSource The source field for the article title. 0 &#x3D; Order Position (default), 1 &#x3D; Article Title, 2 &#x3D; Article Invoice Text (optional)
     * @param excludeTags If true the list of tags passed to the call are used to filter orders to not include these tags (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiGetListAsync(OffsetDateTime minOrderDate, OffsetDateTime maxOrderDate, Integer page, Integer pageSize, List<Long> shopId, List<Integer> orderStateId, List<String> tag, Long minimumBillBeeOrderId, OffsetDateTime modifiedAtMin, OffsetDateTime modifiedAtMax, Integer articleTitleSource, Boolean excludeTags, final ApiCallback<RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelOrder> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderApiGetListValidateBeforeCall(minOrderDate, maxOrderDate, page, pageSize, shopId, orderStateId, tag, minimumBillBeeOrderId, modifiedAtMin, modifiedAtMax, articleTitleSource, excludeTags, _callback);
        Type localVarReturnType = new TypeToken<RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelOrder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderApiGetPatchableFields
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiGetPatchableFieldsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/orders/PatchableFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderApiGetPatchableFieldsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return orderApiGetPatchableFieldsCall(_callback);

    }

    /**
     * Returns a list of fields which can be updated with the orders/{id} patch call
     * 
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object orderApiGetPatchableFields() throws ApiException {
        ApiResponse<Object> localVarResp = orderApiGetPatchableFieldsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Returns a list of fields which can be updated with the orders/{id} patch call
     * 
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> orderApiGetPatchableFieldsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = orderApiGetPatchableFieldsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of fields which can be updated with the orders/{id} patch call (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiGetPatchableFieldsAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderApiGetPatchableFieldsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderApiParsePlaceholders
     * @param id The id of the order (required)
     * @param rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiParsePlaceholdersCall(Long id, RechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer;

        // create path and map variables
        String localVarPath = "/api/v1/orders/{id}/parse-placeholders"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderApiParsePlaceholdersValidateBeforeCall(Long id, RechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderApiParsePlaceholders(Async)");
        }

        // verify the required parameter 'rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer' is set
        if (rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer == null) {
            throw new ApiException("Missing the required parameter 'rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer' when calling orderApiParsePlaceholders(Async)");
        }

        return orderApiParsePlaceholdersCall(id, rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer, _callback);

    }

    /**
     * Parses a text and replaces all placeholders
     * 
     * @param id The id of the order (required)
     * @param rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object orderApiParsePlaceholders(Long id, RechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer) throws ApiException {
        ApiResponse<Object> localVarResp = orderApiParsePlaceholdersWithHttpInfo(id, rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer);
        return localVarResp.getData();
    }

    /**
     * Parses a text and replaces all placeholders
     * 
     * @param id The id of the order (required)
     * @param rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> orderApiParsePlaceholdersWithHttpInfo(Long id, RechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer) throws ApiException {
        okhttp3.Call localVarCall = orderApiParsePlaceholdersValidateBeforeCall(id, rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Parses a text and replaces all placeholders (asynchronously)
     * 
     * @param id The id of the order (required)
     * @param rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiParsePlaceholdersAsync(Long id, RechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderApiParsePlaceholdersValidateBeforeCall(id, rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderApiPatchOrder
     * @param id  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiPatchOrderCall(Long id, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/orders/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderApiPatchOrderValidateBeforeCall(Long id, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderApiPatchOrder(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling orderApiPatchOrder(Async)");
        }

        return orderApiPatchOrderCall(id, body, _callback);

    }

    /**
     * Updates one or more fields of an order
     * 
     * @param id  (required)
     * @param body  (required)
     * @return RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder orderApiPatchOrder(Long id, Object body) throws ApiException {
        ApiResponse<RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder> localVarResp = orderApiPatchOrderWithHttpInfo(id, body);
        return localVarResp.getData();
    }

    /**
     * Updates one or more fields of an order
     * 
     * @param id  (required)
     * @param body  (required)
     * @return ApiResponse&lt;RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder> orderApiPatchOrderWithHttpInfo(Long id, Object body) throws ApiException {
        okhttp3.Call localVarCall = orderApiPatchOrderValidateBeforeCall(id, body, null);
        Type localVarReturnType = new TypeToken<RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates one or more fields of an order (asynchronously)
     * 
     * @param id  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiPatchOrderAsync(Long id, Object body, final ApiCallback<RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderApiPatchOrderValidateBeforeCall(id, body, _callback);
        Type localVarReturnType = new TypeToken<RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderApiPostNewOrder
     * @param billbeeInterfacesBillbeeAPIModelOrder  (required)
     * @param shopId Deprecated, if orderData.ApiAccountId is set, it will be used instead of &#39;shopId&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The order was created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data was received in the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal exception occured. Order was not created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiPostNewOrderCall(BillbeeInterfacesBillbeeAPIModelOrder billbeeInterfacesBillbeeAPIModelOrder, Long shopId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = billbeeInterfacesBillbeeAPIModelOrder;

        // create path and map variables
        String localVarPath = "/api/v1/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shopId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shopId", shopId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderApiPostNewOrderValidateBeforeCall(BillbeeInterfacesBillbeeAPIModelOrder billbeeInterfacesBillbeeAPIModelOrder, Long shopId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billbeeInterfacesBillbeeAPIModelOrder' is set
        if (billbeeInterfacesBillbeeAPIModelOrder == null) {
            throw new ApiException("Missing the required parameter 'billbeeInterfacesBillbeeAPIModelOrder' when calling orderApiPostNewOrder(Async)");
        }

        return orderApiPostNewOrderCall(billbeeInterfacesBillbeeAPIModelOrder, shopId, _callback);

    }

    /**
     * Creates a new order in the Billbee account
     * To create an order POST an JSON object to the orders endpoint with the shown properties.  Not all properties are required.
     * @param billbeeInterfacesBillbeeAPIModelOrder  (required)
     * @param shopId Deprecated, if orderData.ApiAccountId is set, it will be used instead of &#39;shopId&#39; (optional)
     * @return RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The order was created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data was received in the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal exception occured. Order was not created </td><td>  -  </td></tr>
     </table>
     */
    public RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder orderApiPostNewOrder(BillbeeInterfacesBillbeeAPIModelOrder billbeeInterfacesBillbeeAPIModelOrder, Long shopId) throws ApiException {
        ApiResponse<RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder> localVarResp = orderApiPostNewOrderWithHttpInfo(billbeeInterfacesBillbeeAPIModelOrder, shopId);
        return localVarResp.getData();
    }

    /**
     * Creates a new order in the Billbee account
     * To create an order POST an JSON object to the orders endpoint with the shown properties.  Not all properties are required.
     * @param billbeeInterfacesBillbeeAPIModelOrder  (required)
     * @param shopId Deprecated, if orderData.ApiAccountId is set, it will be used instead of &#39;shopId&#39; (optional)
     * @return ApiResponse&lt;RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The order was created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data was received in the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal exception occured. Order was not created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder> orderApiPostNewOrderWithHttpInfo(BillbeeInterfacesBillbeeAPIModelOrder billbeeInterfacesBillbeeAPIModelOrder, Long shopId) throws ApiException {
        okhttp3.Call localVarCall = orderApiPostNewOrderValidateBeforeCall(billbeeInterfacesBillbeeAPIModelOrder, shopId, null);
        Type localVarReturnType = new TypeToken<RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new order in the Billbee account (asynchronously)
     * To create an order POST an JSON object to the orders endpoint with the shown properties.  Not all properties are required.
     * @param billbeeInterfacesBillbeeAPIModelOrder  (required)
     * @param shopId Deprecated, if orderData.ApiAccountId is set, it will be used instead of &#39;shopId&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The order was created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data was received in the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal exception occured. Order was not created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiPostNewOrderAsync(BillbeeInterfacesBillbeeAPIModelOrder billbeeInterfacesBillbeeAPIModelOrder, Long shopId, final ApiCallback<RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderApiPostNewOrderValidateBeforeCall(billbeeInterfacesBillbeeAPIModelOrder, shopId, _callback);
        Type localVarReturnType = new TypeToken<RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderApiSendMessage
     * @param id The id of the order (required)
     * @param rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel The message model (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiSendMessageCall(Long id, RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel;

        // create path and map variables
        String localVarPath = "/api/v1/orders/{id}/send-message"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderApiSendMessageValidateBeforeCall(Long id, RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderApiSendMessage(Async)");
        }

        // verify the required parameter 'rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel' is set
        if (rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel == null) {
            throw new ApiException("Missing the required parameter 'rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel' when calling orderApiSendMessage(Async)");
        }

        return orderApiSendMessageCall(id, rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel, _callback);

    }

    /**
     * Sends a message to the buyer
     * 
     * @param id The id of the order (required)
     * @param rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel The message model (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object orderApiSendMessage(Long id, RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel) throws ApiException {
        ApiResponse<Object> localVarResp = orderApiSendMessageWithHttpInfo(id, rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel);
        return localVarResp.getData();
    }

    /**
     * Sends a message to the buyer
     * 
     * @param id The id of the order (required)
     * @param rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel The message model (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> orderApiSendMessageWithHttpInfo(Long id, RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel) throws ApiException {
        okhttp3.Call localVarCall = orderApiSendMessageValidateBeforeCall(id, rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sends a message to the buyer (asynchronously)
     * 
     * @param id The id of the order (required)
     * @param rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel The message model (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiSendMessageAsync(Long id, RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderApiSendMessageValidateBeforeCall(id, rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderApiTagsCreate
     * @param id The internal id of the order (required)
     * @param rechnungsdruckWebAppControllersApiOrderTagCreate Tags to attach (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiTagsCreateCall(Long id, RechnungsdruckWebAppControllersApiOrderTagCreate rechnungsdruckWebAppControllersApiOrderTagCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rechnungsdruckWebAppControllersApiOrderTagCreate;

        // create path and map variables
        String localVarPath = "/api/v1/orders/{id}/tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderApiTagsCreateValidateBeforeCall(Long id, RechnungsdruckWebAppControllersApiOrderTagCreate rechnungsdruckWebAppControllersApiOrderTagCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderApiTagsCreate(Async)");
        }

        // verify the required parameter 'rechnungsdruckWebAppControllersApiOrderTagCreate' is set
        if (rechnungsdruckWebAppControllersApiOrderTagCreate == null) {
            throw new ApiException("Missing the required parameter 'rechnungsdruckWebAppControllersApiOrderTagCreate' when calling orderApiTagsCreate(Async)");
        }

        return orderApiTagsCreateCall(id, rechnungsdruckWebAppControllersApiOrderTagCreate, _callback);

    }

    /**
     * Attach one or more tags to an order
     * When a tag is already attached, it is ignored. Tags are not case sensitive. All given tags are added to the existing tags.
     * @param id The internal id of the order (required)
     * @param rechnungsdruckWebAppControllersApiOrderTagCreate Tags to attach (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object orderApiTagsCreate(Long id, RechnungsdruckWebAppControllersApiOrderTagCreate rechnungsdruckWebAppControllersApiOrderTagCreate) throws ApiException {
        ApiResponse<Object> localVarResp = orderApiTagsCreateWithHttpInfo(id, rechnungsdruckWebAppControllersApiOrderTagCreate);
        return localVarResp.getData();
    }

    /**
     * Attach one or more tags to an order
     * When a tag is already attached, it is ignored. Tags are not case sensitive. All given tags are added to the existing tags.
     * @param id The internal id of the order (required)
     * @param rechnungsdruckWebAppControllersApiOrderTagCreate Tags to attach (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> orderApiTagsCreateWithHttpInfo(Long id, RechnungsdruckWebAppControllersApiOrderTagCreate rechnungsdruckWebAppControllersApiOrderTagCreate) throws ApiException {
        okhttp3.Call localVarCall = orderApiTagsCreateValidateBeforeCall(id, rechnungsdruckWebAppControllersApiOrderTagCreate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Attach one or more tags to an order (asynchronously)
     * When a tag is already attached, it is ignored. Tags are not case sensitive. All given tags are added to the existing tags.
     * @param id The internal id of the order (required)
     * @param rechnungsdruckWebAppControllersApiOrderTagCreate Tags to attach (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiTagsCreateAsync(Long id, RechnungsdruckWebAppControllersApiOrderTagCreate rechnungsdruckWebAppControllersApiOrderTagCreate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderApiTagsCreateValidateBeforeCall(id, rechnungsdruckWebAppControllersApiOrderTagCreate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderApiTagsUpdate
     * @param id The internal id of the order (required)
     * @param rechnungsdruckWebAppControllersApiOrderTagCreate Tags to attach (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiTagsUpdateCall(Long id, RechnungsdruckWebAppControllersApiOrderTagCreate rechnungsdruckWebAppControllersApiOrderTagCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rechnungsdruckWebAppControllersApiOrderTagCreate;

        // create path and map variables
        String localVarPath = "/api/v1/orders/{id}/tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderApiTagsUpdateValidateBeforeCall(Long id, RechnungsdruckWebAppControllersApiOrderTagCreate rechnungsdruckWebAppControllersApiOrderTagCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderApiTagsUpdate(Async)");
        }

        // verify the required parameter 'rechnungsdruckWebAppControllersApiOrderTagCreate' is set
        if (rechnungsdruckWebAppControllersApiOrderTagCreate == null) {
            throw new ApiException("Missing the required parameter 'rechnungsdruckWebAppControllersApiOrderTagCreate' when calling orderApiTagsUpdate(Async)");
        }

        return orderApiTagsUpdateCall(id, rechnungsdruckWebAppControllersApiOrderTagCreate, _callback);

    }

    /**
     * Sets the tags attached to an order
     * All existing tags will be replaced by the given list of new tags. To just add tags, use POST method.
     * @param id The internal id of the order (required)
     * @param rechnungsdruckWebAppControllersApiOrderTagCreate Tags to attach (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object orderApiTagsUpdate(Long id, RechnungsdruckWebAppControllersApiOrderTagCreate rechnungsdruckWebAppControllersApiOrderTagCreate) throws ApiException {
        ApiResponse<Object> localVarResp = orderApiTagsUpdateWithHttpInfo(id, rechnungsdruckWebAppControllersApiOrderTagCreate);
        return localVarResp.getData();
    }

    /**
     * Sets the tags attached to an order
     * All existing tags will be replaced by the given list of new tags. To just add tags, use POST method.
     * @param id The internal id of the order (required)
     * @param rechnungsdruckWebAppControllersApiOrderTagCreate Tags to attach (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> orderApiTagsUpdateWithHttpInfo(Long id, RechnungsdruckWebAppControllersApiOrderTagCreate rechnungsdruckWebAppControllersApiOrderTagCreate) throws ApiException {
        okhttp3.Call localVarCall = orderApiTagsUpdateValidateBeforeCall(id, rechnungsdruckWebAppControllersApiOrderTagCreate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets the tags attached to an order (asynchronously)
     * All existing tags will be replaced by the given list of new tags. To just add tags, use POST method.
     * @param id The internal id of the order (required)
     * @param rechnungsdruckWebAppControllersApiOrderTagCreate Tags to attach (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiTagsUpdateAsync(Long id, RechnungsdruckWebAppControllersApiOrderTagCreate rechnungsdruckWebAppControllersApiOrderTagCreate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderApiTagsUpdateValidateBeforeCall(id, rechnungsdruckWebAppControllersApiOrderTagCreate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderApiTriggerEvent
     * @param id The id of the order (required)
     * @param rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiTriggerEventCall(Long id, RechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer;

        // create path and map variables
        String localVarPath = "/api/v1/orders/{id}/trigger-event"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderApiTriggerEventValidateBeforeCall(Long id, RechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderApiTriggerEvent(Async)");
        }

        // verify the required parameter 'rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer' is set
        if (rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer == null) {
            throw new ApiException("Missing the required parameter 'rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer' when calling orderApiTriggerEvent(Async)");
        }

        return orderApiTriggerEventCall(id, rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer, _callback);

    }

    /**
     * Triggers a rule event
     * 
     * @param id The id of the order (required)
     * @param rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object orderApiTriggerEvent(Long id, RechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer) throws ApiException {
        ApiResponse<Object> localVarResp = orderApiTriggerEventWithHttpInfo(id, rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer);
        return localVarResp.getData();
    }

    /**
     * Triggers a rule event
     * 
     * @param id The id of the order (required)
     * @param rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> orderApiTriggerEventWithHttpInfo(Long id, RechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer) throws ApiException {
        okhttp3.Call localVarCall = orderApiTriggerEventValidateBeforeCall(id, rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Triggers a rule event (asynchronously)
     * 
     * @param id The id of the order (required)
     * @param rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiTriggerEventAsync(Long id, RechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderApiTriggerEventValidateBeforeCall(id, rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderApiUpdateState
     * @param id The internal id of the order (required)
     * @param rechnungsdruckWebAppControllersApiOrderStateUpdate The data used to change the state (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiUpdateStateCall(Long id, RechnungsdruckWebAppControllersApiOrderStateUpdate rechnungsdruckWebAppControllersApiOrderStateUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rechnungsdruckWebAppControllersApiOrderStateUpdate;

        // create path and map variables
        String localVarPath = "/api/v1/orders/{id}/orderstate"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderApiUpdateStateValidateBeforeCall(Long id, RechnungsdruckWebAppControllersApiOrderStateUpdate rechnungsdruckWebAppControllersApiOrderStateUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderApiUpdateState(Async)");
        }

        // verify the required parameter 'rechnungsdruckWebAppControllersApiOrderStateUpdate' is set
        if (rechnungsdruckWebAppControllersApiOrderStateUpdate == null) {
            throw new ApiException("Missing the required parameter 'rechnungsdruckWebAppControllersApiOrderStateUpdate' when calling orderApiUpdateState(Async)");
        }

        return orderApiUpdateStateCall(id, rechnungsdruckWebAppControllersApiOrderStateUpdate, _callback);

    }

    /**
     * Changes the main state of a single order
     * ### REMARKS ###  Use this call to change the state of an order to i.e. paid or sent.    The state is transfered to the external shop/marketplace if configured.  This is the list of known states:  - 1: ordered  - 2: confirmed  - 3: paid  - 4: shipped  - 5: reclamation  - 6: deleted  - 7: closed  - 8: canceled  - 9: archived  - 10: not used  - 11: demand note 1  - 12: demand note 2  - 13: packed  - 14: offered  - 15: payment reminder  - 16: fulfilling
     * @param id The internal id of the order (required)
     * @param rechnungsdruckWebAppControllersApiOrderStateUpdate The data used to change the state (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object orderApiUpdateState(Long id, RechnungsdruckWebAppControllersApiOrderStateUpdate rechnungsdruckWebAppControllersApiOrderStateUpdate) throws ApiException {
        ApiResponse<Object> localVarResp = orderApiUpdateStateWithHttpInfo(id, rechnungsdruckWebAppControllersApiOrderStateUpdate);
        return localVarResp.getData();
    }

    /**
     * Changes the main state of a single order
     * ### REMARKS ###  Use this call to change the state of an order to i.e. paid or sent.    The state is transfered to the external shop/marketplace if configured.  This is the list of known states:  - 1: ordered  - 2: confirmed  - 3: paid  - 4: shipped  - 5: reclamation  - 6: deleted  - 7: closed  - 8: canceled  - 9: archived  - 10: not used  - 11: demand note 1  - 12: demand note 2  - 13: packed  - 14: offered  - 15: payment reminder  - 16: fulfilling
     * @param id The internal id of the order (required)
     * @param rechnungsdruckWebAppControllersApiOrderStateUpdate The data used to change the state (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> orderApiUpdateStateWithHttpInfo(Long id, RechnungsdruckWebAppControllersApiOrderStateUpdate rechnungsdruckWebAppControllersApiOrderStateUpdate) throws ApiException {
        okhttp3.Call localVarCall = orderApiUpdateStateValidateBeforeCall(id, rechnungsdruckWebAppControllersApiOrderStateUpdate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Changes the main state of a single order (asynchronously)
     * ### REMARKS ###  Use this call to change the state of an order to i.e. paid or sent.    The state is transfered to the external shop/marketplace if configured.  This is the list of known states:  - 1: ordered  - 2: confirmed  - 3: paid  - 4: shipped  - 5: reclamation  - 6: deleted  - 7: closed  - 8: canceled  - 9: archived  - 10: not used  - 11: demand note 1  - 12: demand note 2  - 13: packed  - 14: offered  - 15: payment reminder  - 16: fulfilling
     * @param id The internal id of the order (required)
     * @param rechnungsdruckWebAppControllersApiOrderStateUpdate The data used to change the state (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderApiUpdateStateAsync(Long id, RechnungsdruckWebAppControllersApiOrderStateUpdate rechnungsdruckWebAppControllersApiOrderStateUpdate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderApiUpdateStateValidateBeforeCall(id, rechnungsdruckWebAppControllersApiOrderStateUpdate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchSearch_1
     * @param rechnungsdruckWebAppControllersApiSearchControllerSearchModel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchSearch_1Call(RechnungsdruckWebAppControllersApiSearchControllerSearchModel rechnungsdruckWebAppControllersApiSearchControllerSearchModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rechnungsdruckWebAppControllersApiSearchControllerSearchModel;

        // create path and map variables
        String localVarPath = "/api/v1/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchSearch_1ValidateBeforeCall(RechnungsdruckWebAppControllersApiSearchControllerSearchModel rechnungsdruckWebAppControllersApiSearchControllerSearchModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rechnungsdruckWebAppControllersApiSearchControllerSearchModel' is set
        if (rechnungsdruckWebAppControllersApiSearchControllerSearchModel == null) {
            throw new ApiException("Missing the required parameter 'rechnungsdruckWebAppControllersApiSearchControllerSearchModel' when calling searchSearch_1(Async)");
        }

        return searchSearch_1Call(rechnungsdruckWebAppControllersApiSearchControllerSearchModel, _callback);

    }

    /**
     * Search for products, customers and orders.  Type can be \&quot;order\&quot;, \&quot;product\&quot; and / or \&quot;customer\&quot;  Term can contains lucene query syntax
     * 
     * @param rechnungsdruckWebAppControllersApiSearchControllerSearchModel  (required)
     * @return RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel searchSearch_1(RechnungsdruckWebAppControllersApiSearchControllerSearchModel rechnungsdruckWebAppControllersApiSearchControllerSearchModel) throws ApiException {
        ApiResponse<RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel> localVarResp = searchSearch_1WithHttpInfo(rechnungsdruckWebAppControllersApiSearchControllerSearchModel);
        return localVarResp.getData();
    }

    /**
     * Search for products, customers and orders.  Type can be \&quot;order\&quot;, \&quot;product\&quot; and / or \&quot;customer\&quot;  Term can contains lucene query syntax
     * 
     * @param rechnungsdruckWebAppControllersApiSearchControllerSearchModel  (required)
     * @return ApiResponse&lt;RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel> searchSearch_1WithHttpInfo(RechnungsdruckWebAppControllersApiSearchControllerSearchModel rechnungsdruckWebAppControllersApiSearchControllerSearchModel) throws ApiException {
        okhttp3.Call localVarCall = searchSearch_1ValidateBeforeCall(rechnungsdruckWebAppControllersApiSearchControllerSearchModel, null);
        Type localVarReturnType = new TypeToken<RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for products, customers and orders.  Type can be \&quot;order\&quot;, \&quot;product\&quot; and / or \&quot;customer\&quot;  Term can contains lucene query syntax (asynchronously)
     * 
     * @param rechnungsdruckWebAppControllersApiSearchControllerSearchModel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchSearch_1Async(RechnungsdruckWebAppControllersApiSearchControllerSearchModel rechnungsdruckWebAppControllersApiSearchControllerSearchModel, final ApiCallback<RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchSearch_1ValidateBeforeCall(rechnungsdruckWebAppControllersApiSearchControllerSearchModel, _callback);
        Type localVarReturnType = new TypeToken<RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
