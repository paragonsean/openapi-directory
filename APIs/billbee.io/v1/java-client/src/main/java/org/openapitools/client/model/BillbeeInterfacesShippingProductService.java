/*
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SystemCollectionsGenericKeyValuePairSystemStringSystemCollectionsGenericListSystemCollectionsGenericKeyValuePairSystemInt32SystemString;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BillbeeInterfacesShippingProductService
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:20.866639-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BillbeeInterfacesShippingProductService {
  public static final String SERIALIZED_NAME_CAN_BE_CONFIGURED = "CanBeConfigured";
  @SerializedName(SERIALIZED_NAME_CAN_BE_CONFIGURED)
  private Boolean canBeConfigured;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "DisplayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DISPLAY_VALUE = "DisplayValue";
  @SerializedName(SERIALIZED_NAME_DISPLAY_VALUE)
  private String displayValue;

  public static final String SERIALIZED_NAME_POSSIBLE_VALUE_LISTS = "PossibleValueLists";
  @SerializedName(SERIALIZED_NAME_POSSIBLE_VALUE_LISTS)
  private List<SystemCollectionsGenericKeyValuePairSystemStringSystemCollectionsGenericListSystemCollectionsGenericKeyValuePairSystemInt32SystemString> possibleValueLists = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUIRES_USER_INPUT = "RequiresUserInput";
  @SerializedName(SERIALIZED_NAME_REQUIRES_USER_INPUT)
  private Boolean requiresUserInput;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "ServiceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public static final String SERIALIZED_NAME_TYPE_NAME = "typeName";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME)
  private String typeName;

  public BillbeeInterfacesShippingProductService() {
  }

  public BillbeeInterfacesShippingProductService(
     Boolean canBeConfigured, 
     String displayName, 
     String displayValue, 
     List<SystemCollectionsGenericKeyValuePairSystemStringSystemCollectionsGenericListSystemCollectionsGenericKeyValuePairSystemInt32SystemString> possibleValueLists, 
     Boolean requiresUserInput, 
     String serviceName, 
     String typeName
  ) {
    this();
    this.canBeConfigured = canBeConfigured;
    this.displayName = displayName;
    this.displayValue = displayValue;
    this.possibleValueLists = possibleValueLists;
    this.requiresUserInput = requiresUserInput;
    this.serviceName = serviceName;
    this.typeName = typeName;
  }

  /**
   * Get canBeConfigured
   * @return canBeConfigured
   */
  @javax.annotation.Nullable
  public Boolean getCanBeConfigured() {
    return canBeConfigured;
  }



  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  /**
   * Get displayValue
   * @return displayValue
   */
  @javax.annotation.Nullable
  public String getDisplayValue() {
    return displayValue;
  }



  /**
   * Get possibleValueLists
   * @return possibleValueLists
   */
  @javax.annotation.Nullable
  public List<SystemCollectionsGenericKeyValuePairSystemStringSystemCollectionsGenericListSystemCollectionsGenericKeyValuePairSystemInt32SystemString> getPossibleValueLists() {
    return possibleValueLists;
  }



  /**
   * Get requiresUserInput
   * @return requiresUserInput
   */
  @javax.annotation.Nullable
  public Boolean getRequiresUserInput() {
    return requiresUserInput;
  }



  /**
   * Get serviceName
   * @return serviceName
   */
  @javax.annotation.Nullable
  public String getServiceName() {
    return serviceName;
  }



  /**
   * Get typeName
   * @return typeName
   */
  @javax.annotation.Nullable
  public String getTypeName() {
    return typeName;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillbeeInterfacesShippingProductService billbeeInterfacesShippingProductService = (BillbeeInterfacesShippingProductService) o;
    return Objects.equals(this.canBeConfigured, billbeeInterfacesShippingProductService.canBeConfigured) &&
        Objects.equals(this.displayName, billbeeInterfacesShippingProductService.displayName) &&
        Objects.equals(this.displayValue, billbeeInterfacesShippingProductService.displayValue) &&
        Objects.equals(this.possibleValueLists, billbeeInterfacesShippingProductService.possibleValueLists) &&
        Objects.equals(this.requiresUserInput, billbeeInterfacesShippingProductService.requiresUserInput) &&
        Objects.equals(this.serviceName, billbeeInterfacesShippingProductService.serviceName) &&
        Objects.equals(this.typeName, billbeeInterfacesShippingProductService.typeName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canBeConfigured, displayName, displayValue, possibleValueLists, requiresUserInput, serviceName, typeName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillbeeInterfacesShippingProductService {\n");
    sb.append("    canBeConfigured: ").append(toIndentedString(canBeConfigured)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    displayValue: ").append(toIndentedString(displayValue)).append("\n");
    sb.append("    possibleValueLists: ").append(toIndentedString(possibleValueLists)).append("\n");
    sb.append("    requiresUserInput: ").append(toIndentedString(requiresUserInput)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CanBeConfigured");
    openapiFields.add("DisplayName");
    openapiFields.add("DisplayValue");
    openapiFields.add("PossibleValueLists");
    openapiFields.add("RequiresUserInput");
    openapiFields.add("ServiceName");
    openapiFields.add("typeName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BillbeeInterfacesShippingProductService
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BillbeeInterfacesShippingProductService.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillbeeInterfacesShippingProductService is not found in the empty JSON string", BillbeeInterfacesShippingProductService.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BillbeeInterfacesShippingProductService.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BillbeeInterfacesShippingProductService` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DisplayName") != null && !jsonObj.get("DisplayName").isJsonNull()) && !jsonObj.get("DisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisplayName").toString()));
      }
      if ((jsonObj.get("DisplayValue") != null && !jsonObj.get("DisplayValue").isJsonNull()) && !jsonObj.get("DisplayValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisplayValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisplayValue").toString()));
      }
      if (jsonObj.get("PossibleValueLists") != null && !jsonObj.get("PossibleValueLists").isJsonNull()) {
        JsonArray jsonArraypossibleValueLists = jsonObj.getAsJsonArray("PossibleValueLists");
        if (jsonArraypossibleValueLists != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PossibleValueLists").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PossibleValueLists` to be an array in the JSON string but got `%s`", jsonObj.get("PossibleValueLists").toString()));
          }

          // validate the optional field `PossibleValueLists` (array)
          for (int i = 0; i < jsonArraypossibleValueLists.size(); i++) {
            SystemCollectionsGenericKeyValuePairSystemStringSystemCollectionsGenericListSystemCollectionsGenericKeyValuePairSystemInt32SystemString.validateJsonElement(jsonArraypossibleValueLists.get(i));
          };
        }
      }
      if ((jsonObj.get("ServiceName") != null && !jsonObj.get("ServiceName").isJsonNull()) && !jsonObj.get("ServiceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceName").toString()));
      }
      if ((jsonObj.get("typeName") != null && !jsonObj.get("typeName").isJsonNull()) && !jsonObj.get("typeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillbeeInterfacesShippingProductService.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillbeeInterfacesShippingProductService' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillbeeInterfacesShippingProductService> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillbeeInterfacesShippingProductService.class));

       return (TypeAdapter<T>) new TypeAdapter<BillbeeInterfacesShippingProductService>() {
           @Override
           public void write(JsonWriter out, BillbeeInterfacesShippingProductService value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BillbeeInterfacesShippingProductService read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BillbeeInterfacesShippingProductService given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BillbeeInterfacesShippingProductService
   * @throws IOException if the JSON string is invalid with respect to BillbeeInterfacesShippingProductService
   */
  public static BillbeeInterfacesShippingProductService fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillbeeInterfacesShippingProductService.class);
  }

  /**
   * Convert an instance of BillbeeInterfacesShippingProductService to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

