/*
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RechnungsdruckWebAppControllersApiShipmentWithLabelResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:20.866639-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RechnungsdruckWebAppControllersApiShipmentWithLabelResult {
  public static final String SERIALIZED_NAME_CARRIER = "Carrier";
  @SerializedName(SERIALIZED_NAME_CARRIER)
  private String carrier;

  public static final String SERIALIZED_NAME_EXPORT_DOCS_PDF = "ExportDocsPdf";
  @SerializedName(SERIALIZED_NAME_EXPORT_DOCS_PDF)
  private byte[] exportDocsPdf;

  public static final String SERIALIZED_NAME_LABEL_DATA_PDF = "LabelDataPdf";
  @SerializedName(SERIALIZED_NAME_LABEL_DATA_PDF)
  private byte[] labelDataPdf;

  public static final String SERIALIZED_NAME_ORDER_ID = "OrderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private Long orderId;

  public static final String SERIALIZED_NAME_ORDER_REFERENCE = "OrderReference";
  @SerializedName(SERIALIZED_NAME_ORDER_REFERENCE)
  private String orderReference;

  public static final String SERIALIZED_NAME_SHIPPING_DATE = "ShippingDate";
  @SerializedName(SERIALIZED_NAME_SHIPPING_DATE)
  private OffsetDateTime shippingDate;

  public static final String SERIALIZED_NAME_SHIPPING_ID = "ShippingId";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ID)
  private String shippingId;

  public static final String SERIALIZED_NAME_TRACKING_URL = "TrackingUrl";
  @SerializedName(SERIALIZED_NAME_TRACKING_URL)
  private String trackingUrl;

  public RechnungsdruckWebAppControllersApiShipmentWithLabelResult() {
  }

  public RechnungsdruckWebAppControllersApiShipmentWithLabelResult carrier(String carrier) {
    this.carrier = carrier;
    return this;
  }

  /**
   * Get carrier
   * @return carrier
   */
  @javax.annotation.Nullable
  public String getCarrier() {
    return carrier;
  }

  public void setCarrier(String carrier) {
    this.carrier = carrier;
  }


  public RechnungsdruckWebAppControllersApiShipmentWithLabelResult exportDocsPdf(byte[] exportDocsPdf) {
    this.exportDocsPdf = exportDocsPdf;
    return this;
  }

  /**
   * Get exportDocsPdf
   * @return exportDocsPdf
   */
  @javax.annotation.Nullable
  public byte[] getExportDocsPdf() {
    return exportDocsPdf;
  }

  public void setExportDocsPdf(byte[] exportDocsPdf) {
    this.exportDocsPdf = exportDocsPdf;
  }


  public RechnungsdruckWebAppControllersApiShipmentWithLabelResult labelDataPdf(byte[] labelDataPdf) {
    this.labelDataPdf = labelDataPdf;
    return this;
  }

  /**
   * Get labelDataPdf
   * @return labelDataPdf
   */
  @javax.annotation.Nullable
  public byte[] getLabelDataPdf() {
    return labelDataPdf;
  }

  public void setLabelDataPdf(byte[] labelDataPdf) {
    this.labelDataPdf = labelDataPdf;
  }


  public RechnungsdruckWebAppControllersApiShipmentWithLabelResult orderId(Long orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * Get orderId
   * @return orderId
   */
  @javax.annotation.Nullable
  public Long getOrderId() {
    return orderId;
  }

  public void setOrderId(Long orderId) {
    this.orderId = orderId;
  }


  public RechnungsdruckWebAppControllersApiShipmentWithLabelResult orderReference(String orderReference) {
    this.orderReference = orderReference;
    return this;
  }

  /**
   * Get orderReference
   * @return orderReference
   */
  @javax.annotation.Nullable
  public String getOrderReference() {
    return orderReference;
  }

  public void setOrderReference(String orderReference) {
    this.orderReference = orderReference;
  }


  public RechnungsdruckWebAppControllersApiShipmentWithLabelResult shippingDate(OffsetDateTime shippingDate) {
    this.shippingDate = shippingDate;
    return this;
  }

  /**
   * Get shippingDate
   * @return shippingDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getShippingDate() {
    return shippingDate;
  }

  public void setShippingDate(OffsetDateTime shippingDate) {
    this.shippingDate = shippingDate;
  }


  public RechnungsdruckWebAppControllersApiShipmentWithLabelResult shippingId(String shippingId) {
    this.shippingId = shippingId;
    return this;
  }

  /**
   * Get shippingId
   * @return shippingId
   */
  @javax.annotation.Nullable
  public String getShippingId() {
    return shippingId;
  }

  public void setShippingId(String shippingId) {
    this.shippingId = shippingId;
  }


  public RechnungsdruckWebAppControllersApiShipmentWithLabelResult trackingUrl(String trackingUrl) {
    this.trackingUrl = trackingUrl;
    return this;
  }

  /**
   * Get trackingUrl
   * @return trackingUrl
   */
  @javax.annotation.Nullable
  public String getTrackingUrl() {
    return trackingUrl;
  }

  public void setTrackingUrl(String trackingUrl) {
    this.trackingUrl = trackingUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RechnungsdruckWebAppControllersApiShipmentWithLabelResult rechnungsdruckWebAppControllersApiShipmentWithLabelResult = (RechnungsdruckWebAppControllersApiShipmentWithLabelResult) o;
    return Objects.equals(this.carrier, rechnungsdruckWebAppControllersApiShipmentWithLabelResult.carrier) &&
        Arrays.equals(this.exportDocsPdf, rechnungsdruckWebAppControllersApiShipmentWithLabelResult.exportDocsPdf) &&
        Arrays.equals(this.labelDataPdf, rechnungsdruckWebAppControllersApiShipmentWithLabelResult.labelDataPdf) &&
        Objects.equals(this.orderId, rechnungsdruckWebAppControllersApiShipmentWithLabelResult.orderId) &&
        Objects.equals(this.orderReference, rechnungsdruckWebAppControllersApiShipmentWithLabelResult.orderReference) &&
        Objects.equals(this.shippingDate, rechnungsdruckWebAppControllersApiShipmentWithLabelResult.shippingDate) &&
        Objects.equals(this.shippingId, rechnungsdruckWebAppControllersApiShipmentWithLabelResult.shippingId) &&
        Objects.equals(this.trackingUrl, rechnungsdruckWebAppControllersApiShipmentWithLabelResult.trackingUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(carrier, Arrays.hashCode(exportDocsPdf), Arrays.hashCode(labelDataPdf), orderId, orderReference, shippingDate, shippingId, trackingUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RechnungsdruckWebAppControllersApiShipmentWithLabelResult {\n");
    sb.append("    carrier: ").append(toIndentedString(carrier)).append("\n");
    sb.append("    exportDocsPdf: ").append(toIndentedString(exportDocsPdf)).append("\n");
    sb.append("    labelDataPdf: ").append(toIndentedString(labelDataPdf)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    orderReference: ").append(toIndentedString(orderReference)).append("\n");
    sb.append("    shippingDate: ").append(toIndentedString(shippingDate)).append("\n");
    sb.append("    shippingId: ").append(toIndentedString(shippingId)).append("\n");
    sb.append("    trackingUrl: ").append(toIndentedString(trackingUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Carrier");
    openapiFields.add("ExportDocsPdf");
    openapiFields.add("LabelDataPdf");
    openapiFields.add("OrderId");
    openapiFields.add("OrderReference");
    openapiFields.add("ShippingDate");
    openapiFields.add("ShippingId");
    openapiFields.add("TrackingUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RechnungsdruckWebAppControllersApiShipmentWithLabelResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RechnungsdruckWebAppControllersApiShipmentWithLabelResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RechnungsdruckWebAppControllersApiShipmentWithLabelResult is not found in the empty JSON string", RechnungsdruckWebAppControllersApiShipmentWithLabelResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RechnungsdruckWebAppControllersApiShipmentWithLabelResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RechnungsdruckWebAppControllersApiShipmentWithLabelResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Carrier") != null && !jsonObj.get("Carrier").isJsonNull()) && !jsonObj.get("Carrier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Carrier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Carrier").toString()));
      }
      if ((jsonObj.get("OrderReference") != null && !jsonObj.get("OrderReference").isJsonNull()) && !jsonObj.get("OrderReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OrderReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OrderReference").toString()));
      }
      if ((jsonObj.get("ShippingId") != null && !jsonObj.get("ShippingId").isJsonNull()) && !jsonObj.get("ShippingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShippingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShippingId").toString()));
      }
      if ((jsonObj.get("TrackingUrl") != null && !jsonObj.get("TrackingUrl").isJsonNull()) && !jsonObj.get("TrackingUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrackingUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TrackingUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RechnungsdruckWebAppControllersApiShipmentWithLabelResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RechnungsdruckWebAppControllersApiShipmentWithLabelResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RechnungsdruckWebAppControllersApiShipmentWithLabelResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RechnungsdruckWebAppControllersApiShipmentWithLabelResult.class));

       return (TypeAdapter<T>) new TypeAdapter<RechnungsdruckWebAppControllersApiShipmentWithLabelResult>() {
           @Override
           public void write(JsonWriter out, RechnungsdruckWebAppControllersApiShipmentWithLabelResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RechnungsdruckWebAppControllersApiShipmentWithLabelResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RechnungsdruckWebAppControllersApiShipmentWithLabelResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RechnungsdruckWebAppControllersApiShipmentWithLabelResult
   * @throws IOException if the JSON string is invalid with respect to RechnungsdruckWebAppControllersApiShipmentWithLabelResult
   */
  public static RechnungsdruckWebAppControllersApiShipmentWithLabelResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RechnungsdruckWebAppControllersApiShipmentWithLabelResult.class);
  }

  /**
   * Convert an instance of RechnungsdruckWebAppControllersApiShipmentWithLabelResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

