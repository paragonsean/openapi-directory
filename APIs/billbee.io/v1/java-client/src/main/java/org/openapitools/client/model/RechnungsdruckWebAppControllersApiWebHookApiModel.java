/*
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RechnungsdruckWebAppControllersApiWebHookApiModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:20.866639-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RechnungsdruckWebAppControllersApiWebHookApiModel {
  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FILTERS = "Filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<String> filters = new ArrayList<>();

  public static final String SERIALIZED_NAME_HEADERS = "Headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private Map<String, String> headers = new HashMap<>();

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_PAUSED = "IsPaused";
  @SerializedName(SERIALIZED_NAME_IS_PAUSED)
  private Boolean isPaused;

  public static final String SERIALIZED_NAME_PROPERTIES = "Properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, Object> properties = new HashMap<>();

  public static final String SERIALIZED_NAME_SECRET = "Secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  private String secret;

  public static final String SERIALIZED_NAME_WEB_HOOK_URI = "WebHookUri";
  @SerializedName(SERIALIZED_NAME_WEB_HOOK_URI)
  private String webHookUri;

  public RechnungsdruckWebAppControllersApiWebHookApiModel() {
  }

  public RechnungsdruckWebAppControllersApiWebHookApiModel description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RechnungsdruckWebAppControllersApiWebHookApiModel filters(List<String> filters) {
    this.filters = filters;
    return this;
  }

  public RechnungsdruckWebAppControllersApiWebHookApiModel addFiltersItem(String filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nullable
  public List<String> getFilters() {
    return filters;
  }

  public void setFilters(List<String> filters) {
    this.filters = filters;
  }


  public RechnungsdruckWebAppControllersApiWebHookApiModel headers(Map<String, String> headers) {
    this.headers = headers;
    return this;
  }

  public RechnungsdruckWebAppControllersApiWebHookApiModel putHeadersItem(String key, String headersItem) {
    if (this.headers == null) {
      this.headers = new HashMap<>();
    }
    this.headers.put(key, headersItem);
    return this;
  }

  /**
   * Get headers
   * @return headers
   */
  @javax.annotation.Nullable
  public Map<String, String> getHeaders() {
    return headers;
  }

  public void setHeaders(Map<String, String> headers) {
    this.headers = headers;
  }


  public RechnungsdruckWebAppControllersApiWebHookApiModel id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public RechnungsdruckWebAppControllersApiWebHookApiModel isPaused(Boolean isPaused) {
    this.isPaused = isPaused;
    return this;
  }

  /**
   * Get isPaused
   * @return isPaused
   */
  @javax.annotation.Nullable
  public Boolean getIsPaused() {
    return isPaused;
  }

  public void setIsPaused(Boolean isPaused) {
    this.isPaused = isPaused;
  }


  public RechnungsdruckWebAppControllersApiWebHookApiModel properties(Map<String, Object> properties) {
    this.properties = properties;
    return this;
  }

  public RechnungsdruckWebAppControllersApiWebHookApiModel putPropertiesItem(String key, Object propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * Get properties
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, Object> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, Object> properties) {
    this.properties = properties;
  }


  public RechnungsdruckWebAppControllersApiWebHookApiModel secret(String secret) {
    this.secret = secret;
    return this;
  }

  /**
   * Get secret
   * @return secret
   */
  @javax.annotation.Nonnull
  public String getSecret() {
    return secret;
  }

  public void setSecret(String secret) {
    this.secret = secret;
  }


  public RechnungsdruckWebAppControllersApiWebHookApiModel webHookUri(String webHookUri) {
    this.webHookUri = webHookUri;
    return this;
  }

  /**
   * Get webHookUri
   * @return webHookUri
   */
  @javax.annotation.Nonnull
  public String getWebHookUri() {
    return webHookUri;
  }

  public void setWebHookUri(String webHookUri) {
    this.webHookUri = webHookUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RechnungsdruckWebAppControllersApiWebHookApiModel rechnungsdruckWebAppControllersApiWebHookApiModel = (RechnungsdruckWebAppControllersApiWebHookApiModel) o;
    return Objects.equals(this.description, rechnungsdruckWebAppControllersApiWebHookApiModel.description) &&
        Objects.equals(this.filters, rechnungsdruckWebAppControllersApiWebHookApiModel.filters) &&
        Objects.equals(this.headers, rechnungsdruckWebAppControllersApiWebHookApiModel.headers) &&
        Objects.equals(this.id, rechnungsdruckWebAppControllersApiWebHookApiModel.id) &&
        Objects.equals(this.isPaused, rechnungsdruckWebAppControllersApiWebHookApiModel.isPaused) &&
        Objects.equals(this.properties, rechnungsdruckWebAppControllersApiWebHookApiModel.properties) &&
        Objects.equals(this.secret, rechnungsdruckWebAppControllersApiWebHookApiModel.secret) &&
        Objects.equals(this.webHookUri, rechnungsdruckWebAppControllersApiWebHookApiModel.webHookUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, filters, headers, id, isPaused, properties, secret, webHookUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RechnungsdruckWebAppControllersApiWebHookApiModel {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isPaused: ").append(toIndentedString(isPaused)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    webHookUri: ").append(toIndentedString(webHookUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Description");
    openapiFields.add("Filters");
    openapiFields.add("Headers");
    openapiFields.add("Id");
    openapiFields.add("IsPaused");
    openapiFields.add("Properties");
    openapiFields.add("Secret");
    openapiFields.add("WebHookUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Secret");
    openapiRequiredFields.add("WebHookUri");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RechnungsdruckWebAppControllersApiWebHookApiModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RechnungsdruckWebAppControllersApiWebHookApiModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RechnungsdruckWebAppControllersApiWebHookApiModel is not found in the empty JSON string", RechnungsdruckWebAppControllersApiWebHookApiModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RechnungsdruckWebAppControllersApiWebHookApiModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RechnungsdruckWebAppControllersApiWebHookApiModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RechnungsdruckWebAppControllersApiWebHookApiModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Filters") != null && !jsonObj.get("Filters").isJsonNull() && !jsonObj.get("Filters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Filters` to be an array in the JSON string but got `%s`", jsonObj.get("Filters").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if (!jsonObj.get("Secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Secret").toString()));
      }
      if (!jsonObj.get("WebHookUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WebHookUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WebHookUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RechnungsdruckWebAppControllersApiWebHookApiModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RechnungsdruckWebAppControllersApiWebHookApiModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RechnungsdruckWebAppControllersApiWebHookApiModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RechnungsdruckWebAppControllersApiWebHookApiModel.class));

       return (TypeAdapter<T>) new TypeAdapter<RechnungsdruckWebAppControllersApiWebHookApiModel>() {
           @Override
           public void write(JsonWriter out, RechnungsdruckWebAppControllersApiWebHookApiModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RechnungsdruckWebAppControllersApiWebHookApiModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RechnungsdruckWebAppControllersApiWebHookApiModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RechnungsdruckWebAppControllersApiWebHookApiModel
   * @throws IOException if the JSON string is invalid with respect to RechnungsdruckWebAppControllersApiWebHookApiModel
   */
  public static RechnungsdruckWebAppControllersApiWebHookApiModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RechnungsdruckWebAppControllersApiWebHookApiModel.class);
  }

  /**
   * Convert an instance of RechnungsdruckWebAppControllersApiWebHookApiModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

