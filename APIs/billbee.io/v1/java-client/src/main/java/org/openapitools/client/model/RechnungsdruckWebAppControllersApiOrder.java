/*
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RechnungsdruckWebAppControllersApiOrder
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:20.866639-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RechnungsdruckWebAppControllersApiOrder {
  public static final String SERIALIZED_NAME_CAN_CREATE_AUTO_INVOICE = "CanCreateAutoInvoice";
  @SerializedName(SERIALIZED_NAME_CAN_CREATE_AUTO_INVOICE)
  private Boolean canCreateAutoInvoice;

  public static final String SERIALIZED_NAME_CREATED_AT = "CreatedAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "ExternalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_HAS_INVOICE = "HasInvoice";
  @SerializedName(SERIALIZED_NAME_HAS_INVOICE)
  private Boolean hasInvoice;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INVOICE_CREATED_AT = "InvoiceCreatedAt";
  @SerializedName(SERIALIZED_NAME_INVOICE_CREATED_AT)
  private OffsetDateTime invoiceCreatedAt;

  public static final String SERIALIZED_NAME_INVOICE_DATE = "InvoiceDate";
  @SerializedName(SERIALIZED_NAME_INVOICE_DATE)
  private OffsetDateTime invoiceDate;

  public static final String SERIALIZED_NAME_INVOICE_NUMBER = "InvoiceNumber";
  @SerializedName(SERIALIZED_NAME_INVOICE_NUMBER)
  private String invoiceNumber;

  public static final String SERIALIZED_NAME_ORDER_STATE_ID = "OrderStateId";
  @SerializedName(SERIALIZED_NAME_ORDER_STATE_ID)
  private Integer orderStateId;

  public static final String SERIALIZED_NAME_ORDER_STATE_TEXT = "OrderStateText";
  @SerializedName(SERIALIZED_NAME_ORDER_STATE_TEXT)
  private String orderStateText;

  public static final String SERIALIZED_NAME_PAID_AT = "PaidAt";
  @SerializedName(SERIALIZED_NAME_PAID_AT)
  private OffsetDateTime paidAt;

  public static final String SERIALIZED_NAME_SHIPPED_AT = "ShippedAt";
  @SerializedName(SERIALIZED_NAME_SHIPPED_AT)
  private OffsetDateTime shippedAt;

  public static final String SERIALIZED_NAME_SHOP_NAME = "ShopName";
  @SerializedName(SERIALIZED_NAME_SHOP_NAME)
  private String shopName;

  public static final String SERIALIZED_NAME_TOTAL_GROSS = "TotalGross";
  @SerializedName(SERIALIZED_NAME_TOTAL_GROSS)
  private Double totalGross;

  public RechnungsdruckWebAppControllersApiOrder() {
  }

  public RechnungsdruckWebAppControllersApiOrder canCreateAutoInvoice(Boolean canCreateAutoInvoice) {
    this.canCreateAutoInvoice = canCreateAutoInvoice;
    return this;
  }

  /**
   * Get canCreateAutoInvoice
   * @return canCreateAutoInvoice
   */
  @javax.annotation.Nullable
  public Boolean getCanCreateAutoInvoice() {
    return canCreateAutoInvoice;
  }

  public void setCanCreateAutoInvoice(Boolean canCreateAutoInvoice) {
    this.canCreateAutoInvoice = canCreateAutoInvoice;
  }


  public RechnungsdruckWebAppControllersApiOrder createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public RechnungsdruckWebAppControllersApiOrder externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * Get externalId
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public RechnungsdruckWebAppControllersApiOrder hasInvoice(Boolean hasInvoice) {
    this.hasInvoice = hasInvoice;
    return this;
  }

  /**
   * Get hasInvoice
   * @return hasInvoice
   */
  @javax.annotation.Nullable
  public Boolean getHasInvoice() {
    return hasInvoice;
  }

  public void setHasInvoice(Boolean hasInvoice) {
    this.hasInvoice = hasInvoice;
  }


  public RechnungsdruckWebAppControllersApiOrder id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public RechnungsdruckWebAppControllersApiOrder invoiceCreatedAt(OffsetDateTime invoiceCreatedAt) {
    this.invoiceCreatedAt = invoiceCreatedAt;
    return this;
  }

  /**
   * Get invoiceCreatedAt
   * @return invoiceCreatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getInvoiceCreatedAt() {
    return invoiceCreatedAt;
  }

  public void setInvoiceCreatedAt(OffsetDateTime invoiceCreatedAt) {
    this.invoiceCreatedAt = invoiceCreatedAt;
  }


  public RechnungsdruckWebAppControllersApiOrder invoiceDate(OffsetDateTime invoiceDate) {
    this.invoiceDate = invoiceDate;
    return this;
  }

  /**
   * Get invoiceDate
   * @return invoiceDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getInvoiceDate() {
    return invoiceDate;
  }

  public void setInvoiceDate(OffsetDateTime invoiceDate) {
    this.invoiceDate = invoiceDate;
  }


  public RechnungsdruckWebAppControllersApiOrder invoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
    return this;
  }

  /**
   * Get invoiceNumber
   * @return invoiceNumber
   */
  @javax.annotation.Nullable
  public String getInvoiceNumber() {
    return invoiceNumber;
  }

  public void setInvoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
  }


  public RechnungsdruckWebAppControllersApiOrder orderStateId(Integer orderStateId) {
    this.orderStateId = orderStateId;
    return this;
  }

  /**
   * Get orderStateId
   * @return orderStateId
   */
  @javax.annotation.Nullable
  public Integer getOrderStateId() {
    return orderStateId;
  }

  public void setOrderStateId(Integer orderStateId) {
    this.orderStateId = orderStateId;
  }


  public RechnungsdruckWebAppControllersApiOrder orderStateText(String orderStateText) {
    this.orderStateText = orderStateText;
    return this;
  }

  /**
   * Get orderStateText
   * @return orderStateText
   */
  @javax.annotation.Nullable
  public String getOrderStateText() {
    return orderStateText;
  }

  public void setOrderStateText(String orderStateText) {
    this.orderStateText = orderStateText;
  }


  public RechnungsdruckWebAppControllersApiOrder paidAt(OffsetDateTime paidAt) {
    this.paidAt = paidAt;
    return this;
  }

  /**
   * Get paidAt
   * @return paidAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPaidAt() {
    return paidAt;
  }

  public void setPaidAt(OffsetDateTime paidAt) {
    this.paidAt = paidAt;
  }


  public RechnungsdruckWebAppControllersApiOrder shippedAt(OffsetDateTime shippedAt) {
    this.shippedAt = shippedAt;
    return this;
  }

  /**
   * Get shippedAt
   * @return shippedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getShippedAt() {
    return shippedAt;
  }

  public void setShippedAt(OffsetDateTime shippedAt) {
    this.shippedAt = shippedAt;
  }


  public RechnungsdruckWebAppControllersApiOrder shopName(String shopName) {
    this.shopName = shopName;
    return this;
  }

  /**
   * Get shopName
   * @return shopName
   */
  @javax.annotation.Nullable
  public String getShopName() {
    return shopName;
  }

  public void setShopName(String shopName) {
    this.shopName = shopName;
  }


  public RechnungsdruckWebAppControllersApiOrder totalGross(Double totalGross) {
    this.totalGross = totalGross;
    return this;
  }

  /**
   * Get totalGross
   * @return totalGross
   */
  @javax.annotation.Nullable
  public Double getTotalGross() {
    return totalGross;
  }

  public void setTotalGross(Double totalGross) {
    this.totalGross = totalGross;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RechnungsdruckWebAppControllersApiOrder rechnungsdruckWebAppControllersApiOrder = (RechnungsdruckWebAppControllersApiOrder) o;
    return Objects.equals(this.canCreateAutoInvoice, rechnungsdruckWebAppControllersApiOrder.canCreateAutoInvoice) &&
        Objects.equals(this.createdAt, rechnungsdruckWebAppControllersApiOrder.createdAt) &&
        Objects.equals(this.externalId, rechnungsdruckWebAppControllersApiOrder.externalId) &&
        Objects.equals(this.hasInvoice, rechnungsdruckWebAppControllersApiOrder.hasInvoice) &&
        Objects.equals(this.id, rechnungsdruckWebAppControllersApiOrder.id) &&
        Objects.equals(this.invoiceCreatedAt, rechnungsdruckWebAppControllersApiOrder.invoiceCreatedAt) &&
        Objects.equals(this.invoiceDate, rechnungsdruckWebAppControllersApiOrder.invoiceDate) &&
        Objects.equals(this.invoiceNumber, rechnungsdruckWebAppControllersApiOrder.invoiceNumber) &&
        Objects.equals(this.orderStateId, rechnungsdruckWebAppControllersApiOrder.orderStateId) &&
        Objects.equals(this.orderStateText, rechnungsdruckWebAppControllersApiOrder.orderStateText) &&
        Objects.equals(this.paidAt, rechnungsdruckWebAppControllersApiOrder.paidAt) &&
        Objects.equals(this.shippedAt, rechnungsdruckWebAppControllersApiOrder.shippedAt) &&
        Objects.equals(this.shopName, rechnungsdruckWebAppControllersApiOrder.shopName) &&
        Objects.equals(this.totalGross, rechnungsdruckWebAppControllersApiOrder.totalGross);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canCreateAutoInvoice, createdAt, externalId, hasInvoice, id, invoiceCreatedAt, invoiceDate, invoiceNumber, orderStateId, orderStateText, paidAt, shippedAt, shopName, totalGross);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RechnungsdruckWebAppControllersApiOrder {\n");
    sb.append("    canCreateAutoInvoice: ").append(toIndentedString(canCreateAutoInvoice)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    hasInvoice: ").append(toIndentedString(hasInvoice)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    invoiceCreatedAt: ").append(toIndentedString(invoiceCreatedAt)).append("\n");
    sb.append("    invoiceDate: ").append(toIndentedString(invoiceDate)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    orderStateId: ").append(toIndentedString(orderStateId)).append("\n");
    sb.append("    orderStateText: ").append(toIndentedString(orderStateText)).append("\n");
    sb.append("    paidAt: ").append(toIndentedString(paidAt)).append("\n");
    sb.append("    shippedAt: ").append(toIndentedString(shippedAt)).append("\n");
    sb.append("    shopName: ").append(toIndentedString(shopName)).append("\n");
    sb.append("    totalGross: ").append(toIndentedString(totalGross)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CanCreateAutoInvoice");
    openapiFields.add("CreatedAt");
    openapiFields.add("ExternalId");
    openapiFields.add("HasInvoice");
    openapiFields.add("Id");
    openapiFields.add("InvoiceCreatedAt");
    openapiFields.add("InvoiceDate");
    openapiFields.add("InvoiceNumber");
    openapiFields.add("OrderStateId");
    openapiFields.add("OrderStateText");
    openapiFields.add("PaidAt");
    openapiFields.add("ShippedAt");
    openapiFields.add("ShopName");
    openapiFields.add("TotalGross");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RechnungsdruckWebAppControllersApiOrder
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RechnungsdruckWebAppControllersApiOrder.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RechnungsdruckWebAppControllersApiOrder is not found in the empty JSON string", RechnungsdruckWebAppControllersApiOrder.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RechnungsdruckWebAppControllersApiOrder.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RechnungsdruckWebAppControllersApiOrder` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ExternalId") != null && !jsonObj.get("ExternalId").isJsonNull()) && !jsonObj.get("ExternalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExternalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExternalId").toString()));
      }
      if ((jsonObj.get("InvoiceNumber") != null && !jsonObj.get("InvoiceNumber").isJsonNull()) && !jsonObj.get("InvoiceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InvoiceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InvoiceNumber").toString()));
      }
      if ((jsonObj.get("OrderStateText") != null && !jsonObj.get("OrderStateText").isJsonNull()) && !jsonObj.get("OrderStateText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OrderStateText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OrderStateText").toString()));
      }
      if ((jsonObj.get("ShopName") != null && !jsonObj.get("ShopName").isJsonNull()) && !jsonObj.get("ShopName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShopName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShopName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RechnungsdruckWebAppControllersApiOrder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RechnungsdruckWebAppControllersApiOrder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RechnungsdruckWebAppControllersApiOrder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RechnungsdruckWebAppControllersApiOrder.class));

       return (TypeAdapter<T>) new TypeAdapter<RechnungsdruckWebAppControllersApiOrder>() {
           @Override
           public void write(JsonWriter out, RechnungsdruckWebAppControllersApiOrder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RechnungsdruckWebAppControllersApiOrder read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RechnungsdruckWebAppControllersApiOrder given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RechnungsdruckWebAppControllersApiOrder
   * @throws IOException if the JSON string is invalid with respect to RechnungsdruckWebAppControllersApiOrder
   */
  public static RechnungsdruckWebAppControllersApiOrder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RechnungsdruckWebAppControllersApiOrder.class);
  }

  /**
   * Convert an instance of RechnungsdruckWebAppControllersApiOrder to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

