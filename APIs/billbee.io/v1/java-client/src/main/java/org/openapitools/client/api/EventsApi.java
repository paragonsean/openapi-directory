/*
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for eventApiGetList
     * @param minDate Specifies the oldest date to include in the response (optional)
     * @param maxDate Specifies the newest date to include in the response (optional)
     * @param page Specifies the page to request (optional)
     * @param pageSize Specifies the pagesize. Defaults to 50, max value is 250 (optional)
     * @param typeId Filter for specific event types (optional)
     * @param orderId Filter for specific order id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventApiGetListCall(OffsetDateTime minDate, OffsetDateTime maxDate, Integer page, Integer pageSize, List<Integer> typeId, Long orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (minDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minDate", minDate));
        }

        if (maxDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxDate", maxDate));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (typeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "typeId", typeId));
        }

        if (orderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderId", orderId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventApiGetListValidateBeforeCall(OffsetDateTime minDate, OffsetDateTime maxDate, Integer page, Integer pageSize, List<Integer> typeId, Long orderId, final ApiCallback _callback) throws ApiException {
        return eventApiGetListCall(minDate, maxDate, page, pageSize, typeId, orderId, _callback);

    }

    /**
     * Get a list of all events optionally filtered by date. This request is extra throttled to 2 calls per page per hour.
     * 
     * @param minDate Specifies the oldest date to include in the response (optional)
     * @param maxDate Specifies the newest date to include in the response (optional)
     * @param page Specifies the page to request (optional)
     * @param pageSize Specifies the pagesize. Defaults to 50, max value is 250 (optional)
     * @param typeId Filter for specific event types (optional)
     * @param orderId Filter for specific order id (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object eventApiGetList(OffsetDateTime minDate, OffsetDateTime maxDate, Integer page, Integer pageSize, List<Integer> typeId, Long orderId) throws ApiException {
        ApiResponse<Object> localVarResp = eventApiGetListWithHttpInfo(minDate, maxDate, page, pageSize, typeId, orderId);
        return localVarResp.getData();
    }

    /**
     * Get a list of all events optionally filtered by date. This request is extra throttled to 2 calls per page per hour.
     * 
     * @param minDate Specifies the oldest date to include in the response (optional)
     * @param maxDate Specifies the newest date to include in the response (optional)
     * @param page Specifies the page to request (optional)
     * @param pageSize Specifies the pagesize. Defaults to 50, max value is 250 (optional)
     * @param typeId Filter for specific event types (optional)
     * @param orderId Filter for specific order id (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> eventApiGetListWithHttpInfo(OffsetDateTime minDate, OffsetDateTime maxDate, Integer page, Integer pageSize, List<Integer> typeId, Long orderId) throws ApiException {
        okhttp3.Call localVarCall = eventApiGetListValidateBeforeCall(minDate, maxDate, page, pageSize, typeId, orderId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of all events optionally filtered by date. This request is extra throttled to 2 calls per page per hour. (asynchronously)
     * 
     * @param minDate Specifies the oldest date to include in the response (optional)
     * @param maxDate Specifies the newest date to include in the response (optional)
     * @param page Specifies the page to request (optional)
     * @param pageSize Specifies the pagesize. Defaults to 50, max value is 250 (optional)
     * @param typeId Filter for specific event types (optional)
     * @param orderId Filter for specific order id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventApiGetListAsync(OffsetDateTime minDate, OffsetDateTime maxDate, Integer page, Integer pageSize, List<Integer> typeId, Long orderId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventApiGetListValidateBeforeCall(minDate, maxDate, page, pageSize, typeId, orderId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
