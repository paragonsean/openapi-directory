/*
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BillbeeInterfacesOrderMultiLanguageString;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:20.866639-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel {
  public static final String SERIALIZED_NAME_ALTERNATIVE_MAIL = "AlternativeMail";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVE_MAIL)
  private String alternativeMail;

  public static final String SERIALIZED_NAME_BODY = "Body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private List<BillbeeInterfacesOrderMultiLanguageString> body = new ArrayList<>();

  /**
   * Gets or Sets sendMode
   */
  @JsonAdapter(SendModeEnum.Adapter.class)
  public enum SendModeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4);

    private Integer value;

    SendModeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendModeEnum fromValue(Integer value) {
      for (SendModeEnum b : SendModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendModeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return SendModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      SendModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEND_MODE = "SendMode";
  @SerializedName(SERIALIZED_NAME_SEND_MODE)
  private SendModeEnum sendMode;

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private List<BillbeeInterfacesOrderMultiLanguageString> subject = new ArrayList<>();

  public RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel() {
  }

  public RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel alternativeMail(String alternativeMail) {
    this.alternativeMail = alternativeMail;
    return this;
  }

  /**
   * Get alternativeMail
   * @return alternativeMail
   */
  @javax.annotation.Nullable
  public String getAlternativeMail() {
    return alternativeMail;
  }

  public void setAlternativeMail(String alternativeMail) {
    this.alternativeMail = alternativeMail;
  }


  public RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel body(List<BillbeeInterfacesOrderMultiLanguageString> body) {
    this.body = body;
    return this;
  }

  public RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel addBodyItem(BillbeeInterfacesOrderMultiLanguageString bodyItem) {
    if (this.body == null) {
      this.body = new ArrayList<>();
    }
    this.body.add(bodyItem);
    return this;
  }

  /**
   * Get body
   * @return body
   */
  @javax.annotation.Nullable
  public List<BillbeeInterfacesOrderMultiLanguageString> getBody() {
    return body;
  }

  public void setBody(List<BillbeeInterfacesOrderMultiLanguageString> body) {
    this.body = body;
  }


  public RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel sendMode(SendModeEnum sendMode) {
    this.sendMode = sendMode;
    return this;
  }

  /**
   * Get sendMode
   * @return sendMode
   */
  @javax.annotation.Nullable
  public SendModeEnum getSendMode() {
    return sendMode;
  }

  public void setSendMode(SendModeEnum sendMode) {
    this.sendMode = sendMode;
  }


  public RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel subject(List<BillbeeInterfacesOrderMultiLanguageString> subject) {
    this.subject = subject;
    return this;
  }

  public RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel addSubjectItem(BillbeeInterfacesOrderMultiLanguageString subjectItem) {
    if (this.subject == null) {
      this.subject = new ArrayList<>();
    }
    this.subject.add(subjectItem);
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public List<BillbeeInterfacesOrderMultiLanguageString> getSubject() {
    return subject;
  }

  public void setSubject(List<BillbeeInterfacesOrderMultiLanguageString> subject) {
    this.subject = subject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel = (RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel) o;
    return Objects.equals(this.alternativeMail, rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel.alternativeMail) &&
        Objects.equals(this.body, rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel.body) &&
        Objects.equals(this.sendMode, rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel.sendMode) &&
        Objects.equals(this.subject, rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel.subject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternativeMail, body, sendMode, subject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel {\n");
    sb.append("    alternativeMail: ").append(toIndentedString(alternativeMail)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    sendMode: ").append(toIndentedString(sendMode)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AlternativeMail");
    openapiFields.add("Body");
    openapiFields.add("SendMode");
    openapiFields.add("Subject");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel is not found in the empty JSON string", RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AlternativeMail") != null && !jsonObj.get("AlternativeMail").isJsonNull()) && !jsonObj.get("AlternativeMail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AlternativeMail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AlternativeMail").toString()));
      }
      if (jsonObj.get("Body") != null && !jsonObj.get("Body").isJsonNull()) {
        JsonArray jsonArraybody = jsonObj.getAsJsonArray("Body");
        if (jsonArraybody != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Body").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Body` to be an array in the JSON string but got `%s`", jsonObj.get("Body").toString()));
          }

          // validate the optional field `Body` (array)
          for (int i = 0; i < jsonArraybody.size(); i++) {
            BillbeeInterfacesOrderMultiLanguageString.validateJsonElement(jsonArraybody.get(i));
          };
        }
      }
      // validate the optional field `SendMode`
      if (jsonObj.get("SendMode") != null && !jsonObj.get("SendMode").isJsonNull()) {
        SendModeEnum.validateJsonElement(jsonObj.get("SendMode"));
      }
      if (jsonObj.get("Subject") != null && !jsonObj.get("Subject").isJsonNull()) {
        JsonArray jsonArraysubject = jsonObj.getAsJsonArray("Subject");
        if (jsonArraysubject != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Subject").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Subject` to be an array in the JSON string but got `%s`", jsonObj.get("Subject").toString()));
          }

          // validate the optional field `Subject` (array)
          for (int i = 0; i < jsonArraysubject.size(); i++) {
            BillbeeInterfacesOrderMultiLanguageString.validateJsonElement(jsonArraysubject.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel.class));

       return (TypeAdapter<T>) new TypeAdapter<RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel>() {
           @Override
           public void write(JsonWriter out, RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel
   * @throws IOException if the JSON string is invalid with respect to RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel
   */
  public static RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel.class);
  }

  /**
   * Convert an instance of RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

