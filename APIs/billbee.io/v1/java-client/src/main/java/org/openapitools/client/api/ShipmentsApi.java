/*
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BillbeeInterfacesBillbeeAPIModelCreateShipmentApiModel;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelShipment;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiShipmentWithLabelResult;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiShipmentWithLabel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ShipmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ShipmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ShipmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for shipmentGetList
     * @param page Specifies the page to request. (optional)
     * @param pageSize Specifies the pagesize. Defaults to 50, max value is 250 (optional)
     * @param createdAtMin Specifies the oldest shipment date to include in the response (optional)
     * @param createdAtMax Specifies the newest shipment date to include in the response (optional)
     * @param orderId Get shipments for this order only. (optional)
     * @param minimumShipmentId Get Shipments with a shipment greater or equal than this id. New shipments have a greater id than older shipments. (optional)
     * @param shippingProviderId Get Shippings for the specified shipping provider only. &lt;seealso cref&#x3D;\&quot;M:Rechnungsdruck.WebApp.Controllers.Api.ShipmentController.GetShippingproviders\&quot; /&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shipmentGetListCall(Integer page, Integer pageSize, OffsetDateTime createdAtMin, OffsetDateTime createdAtMax, Long orderId, Long minimumShipmentId, Long shippingProviderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/shipment/shipments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (createdAtMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAtMin", createdAtMin));
        }

        if (createdAtMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAtMax", createdAtMax));
        }

        if (orderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderId", orderId));
        }

        if (minimumShipmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minimumShipmentId", minimumShipmentId));
        }

        if (shippingProviderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shippingProviderId", shippingProviderId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shipmentGetListValidateBeforeCall(Integer page, Integer pageSize, OffsetDateTime createdAtMin, OffsetDateTime createdAtMax, Long orderId, Long minimumShipmentId, Long shippingProviderId, final ApiCallback _callback) throws ApiException {
        return shipmentGetListCall(page, pageSize, createdAtMin, createdAtMax, orderId, minimumShipmentId, shippingProviderId, _callback);

    }

    /**
     * Get a list of all shipments optionally filtered by date. All parameters are optional.
     * 
     * @param page Specifies the page to request. (optional)
     * @param pageSize Specifies the pagesize. Defaults to 50, max value is 250 (optional)
     * @param createdAtMin Specifies the oldest shipment date to include in the response (optional)
     * @param createdAtMax Specifies the newest shipment date to include in the response (optional)
     * @param orderId Get shipments for this order only. (optional)
     * @param minimumShipmentId Get Shipments with a shipment greater or equal than this id. New shipments have a greater id than older shipments. (optional)
     * @param shippingProviderId Get Shippings for the specified shipping provider only. &lt;seealso cref&#x3D;\&quot;M:Rechnungsdruck.WebApp.Controllers.Api.ShipmentController.GetShippingproviders\&quot; /&gt; (optional)
     * @return RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelShipment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelShipment shipmentGetList(Integer page, Integer pageSize, OffsetDateTime createdAtMin, OffsetDateTime createdAtMax, Long orderId, Long minimumShipmentId, Long shippingProviderId) throws ApiException {
        ApiResponse<RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelShipment> localVarResp = shipmentGetListWithHttpInfo(page, pageSize, createdAtMin, createdAtMax, orderId, minimumShipmentId, shippingProviderId);
        return localVarResp.getData();
    }

    /**
     * Get a list of all shipments optionally filtered by date. All parameters are optional.
     * 
     * @param page Specifies the page to request. (optional)
     * @param pageSize Specifies the pagesize. Defaults to 50, max value is 250 (optional)
     * @param createdAtMin Specifies the oldest shipment date to include in the response (optional)
     * @param createdAtMax Specifies the newest shipment date to include in the response (optional)
     * @param orderId Get shipments for this order only. (optional)
     * @param minimumShipmentId Get Shipments with a shipment greater or equal than this id. New shipments have a greater id than older shipments. (optional)
     * @param shippingProviderId Get Shippings for the specified shipping provider only. &lt;seealso cref&#x3D;\&quot;M:Rechnungsdruck.WebApp.Controllers.Api.ShipmentController.GetShippingproviders\&quot; /&gt; (optional)
     * @return ApiResponse&lt;RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelShipment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelShipment> shipmentGetListWithHttpInfo(Integer page, Integer pageSize, OffsetDateTime createdAtMin, OffsetDateTime createdAtMax, Long orderId, Long minimumShipmentId, Long shippingProviderId) throws ApiException {
        okhttp3.Call localVarCall = shipmentGetListValidateBeforeCall(page, pageSize, createdAtMin, createdAtMax, orderId, minimumShipmentId, shippingProviderId, null);
        Type localVarReturnType = new TypeToken<RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelShipment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of all shipments optionally filtered by date. All parameters are optional. (asynchronously)
     * 
     * @param page Specifies the page to request. (optional)
     * @param pageSize Specifies the pagesize. Defaults to 50, max value is 250 (optional)
     * @param createdAtMin Specifies the oldest shipment date to include in the response (optional)
     * @param createdAtMax Specifies the newest shipment date to include in the response (optional)
     * @param orderId Get shipments for this order only. (optional)
     * @param minimumShipmentId Get Shipments with a shipment greater or equal than this id. New shipments have a greater id than older shipments. (optional)
     * @param shippingProviderId Get Shippings for the specified shipping provider only. &lt;seealso cref&#x3D;\&quot;M:Rechnungsdruck.WebApp.Controllers.Api.ShipmentController.GetShippingproviders\&quot; /&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shipmentGetListAsync(Integer page, Integer pageSize, OffsetDateTime createdAtMin, OffsetDateTime createdAtMax, Long orderId, Long minimumShipmentId, Long shippingProviderId, final ApiCallback<RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelShipment> _callback) throws ApiException {

        okhttp3.Call localVarCall = shipmentGetListValidateBeforeCall(page, pageSize, createdAtMin, createdAtMax, orderId, minimumShipmentId, shippingProviderId, _callback);
        Type localVarReturnType = new TypeToken<RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelShipment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shipmentGetPing
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shipmentGetPingCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/shipment/ping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shipmentGetPingValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return shipmentGetPingCall(_callback);

    }

    /**
     * 
     * 
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object shipmentGetPing() throws ApiException {
        ApiResponse<Object> localVarResp = shipmentGetPingWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> shipmentGetPingWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = shipmentGetPingValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shipmentGetPingAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = shipmentGetPingValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shipmentGetShippingCarrier
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shipmentGetShippingCarrierCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/shipment/shippingcarriers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shipmentGetShippingCarrierValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return shipmentGetShippingCarrierCall(_callback);

    }

    /**
     * Queries the currently available shipping carriers.
     * 
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object shipmentGetShippingCarrier() throws ApiException {
        ApiResponse<Object> localVarResp = shipmentGetShippingCarrierWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Queries the currently available shipping carriers.
     * 
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> shipmentGetShippingCarrierWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = shipmentGetShippingCarrierValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Queries the currently available shipping carriers. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shipmentGetShippingCarrierAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = shipmentGetShippingCarrierValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shipmentGetShippingproviders
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shipmentGetShippingprovidersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/shipment/shippingproviders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shipmentGetShippingprovidersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return shipmentGetShippingprovidersCall(_callback);

    }

    /**
     * Query all defined shipping providers
     * 
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object shipmentGetShippingproviders() throws ApiException {
        ApiResponse<Object> localVarResp = shipmentGetShippingprovidersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Query all defined shipping providers
     * 
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> shipmentGetShippingprovidersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = shipmentGetShippingprovidersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query all defined shipping providers (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shipmentGetShippingprovidersAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = shipmentGetShippingprovidersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shipmentPostShipment
     * @param billbeeInterfacesBillbeeAPIModelCreateShipmentApiModel Data to specify shipment parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shipmentPostShipmentCall(BillbeeInterfacesBillbeeAPIModelCreateShipmentApiModel billbeeInterfacesBillbeeAPIModelCreateShipmentApiModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = billbeeInterfacesBillbeeAPIModelCreateShipmentApiModel;

        // create path and map variables
        String localVarPath = "/api/v1/shipment/shipment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shipmentPostShipmentValidateBeforeCall(BillbeeInterfacesBillbeeAPIModelCreateShipmentApiModel billbeeInterfacesBillbeeAPIModelCreateShipmentApiModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billbeeInterfacesBillbeeAPIModelCreateShipmentApiModel' is set
        if (billbeeInterfacesBillbeeAPIModelCreateShipmentApiModel == null) {
            throw new ApiException("Missing the required parameter 'billbeeInterfacesBillbeeAPIModelCreateShipmentApiModel' when calling shipmentPostShipment(Async)");
        }

        return shipmentPostShipmentCall(billbeeInterfacesBillbeeAPIModelCreateShipmentApiModel, _callback);

    }

    /**
     * Creates a new shipment with the selected Shippingprovider
     * 
     * @param billbeeInterfacesBillbeeAPIModelCreateShipmentApiModel Data to specify shipment parameters (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object shipmentPostShipment(BillbeeInterfacesBillbeeAPIModelCreateShipmentApiModel billbeeInterfacesBillbeeAPIModelCreateShipmentApiModel) throws ApiException {
        ApiResponse<Object> localVarResp = shipmentPostShipmentWithHttpInfo(billbeeInterfacesBillbeeAPIModelCreateShipmentApiModel);
        return localVarResp.getData();
    }

    /**
     * Creates a new shipment with the selected Shippingprovider
     * 
     * @param billbeeInterfacesBillbeeAPIModelCreateShipmentApiModel Data to specify shipment parameters (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> shipmentPostShipmentWithHttpInfo(BillbeeInterfacesBillbeeAPIModelCreateShipmentApiModel billbeeInterfacesBillbeeAPIModelCreateShipmentApiModel) throws ApiException {
        okhttp3.Call localVarCall = shipmentPostShipmentValidateBeforeCall(billbeeInterfacesBillbeeAPIModelCreateShipmentApiModel, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new shipment with the selected Shippingprovider (asynchronously)
     * 
     * @param billbeeInterfacesBillbeeAPIModelCreateShipmentApiModel Data to specify shipment parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shipmentPostShipmentAsync(BillbeeInterfacesBillbeeAPIModelCreateShipmentApiModel billbeeInterfacesBillbeeAPIModelCreateShipmentApiModel, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = shipmentPostShipmentValidateBeforeCall(billbeeInterfacesBillbeeAPIModelCreateShipmentApiModel, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shipmentShipWithLabel
     * @param rechnungsdruckWebAppControllersApiShipmentWithLabel Details on the order and the shipping methods, that should be used. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shipmentShipWithLabelCall(RechnungsdruckWebAppControllersApiShipmentWithLabel rechnungsdruckWebAppControllersApiShipmentWithLabel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rechnungsdruckWebAppControllersApiShipmentWithLabel;

        // create path and map variables
        String localVarPath = "/api/v1/shipment/shipwithlabel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shipmentShipWithLabelValidateBeforeCall(RechnungsdruckWebAppControllersApiShipmentWithLabel rechnungsdruckWebAppControllersApiShipmentWithLabel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rechnungsdruckWebAppControllersApiShipmentWithLabel' is set
        if (rechnungsdruckWebAppControllersApiShipmentWithLabel == null) {
            throw new ApiException("Missing the required parameter 'rechnungsdruckWebAppControllersApiShipmentWithLabel' when calling shipmentShipWithLabel(Async)");
        }

        return shipmentShipWithLabelCall(rechnungsdruckWebAppControllersApiShipmentWithLabel, _callback);

    }

    /**
     * Creates a shipment for an order in billbee
     * 
     * @param rechnungsdruckWebAppControllersApiShipmentWithLabel Details on the order and the shipping methods, that should be used. (required)
     * @return RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiShipmentWithLabelResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiShipmentWithLabelResult shipmentShipWithLabel(RechnungsdruckWebAppControllersApiShipmentWithLabel rechnungsdruckWebAppControllersApiShipmentWithLabel) throws ApiException {
        ApiResponse<RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiShipmentWithLabelResult> localVarResp = shipmentShipWithLabelWithHttpInfo(rechnungsdruckWebAppControllersApiShipmentWithLabel);
        return localVarResp.getData();
    }

    /**
     * Creates a shipment for an order in billbee
     * 
     * @param rechnungsdruckWebAppControllersApiShipmentWithLabel Details on the order and the shipping methods, that should be used. (required)
     * @return ApiResponse&lt;RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiShipmentWithLabelResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiShipmentWithLabelResult> shipmentShipWithLabelWithHttpInfo(RechnungsdruckWebAppControllersApiShipmentWithLabel rechnungsdruckWebAppControllersApiShipmentWithLabel) throws ApiException {
        okhttp3.Call localVarCall = shipmentShipWithLabelValidateBeforeCall(rechnungsdruckWebAppControllersApiShipmentWithLabel, null);
        Type localVarReturnType = new TypeToken<RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiShipmentWithLabelResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a shipment for an order in billbee (asynchronously)
     * 
     * @param rechnungsdruckWebAppControllersApiShipmentWithLabel Details on the order and the shipping methods, that should be used. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shipmentShipWithLabelAsync(RechnungsdruckWebAppControllersApiShipmentWithLabel rechnungsdruckWebAppControllersApiShipmentWithLabel, final ApiCallback<RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiShipmentWithLabelResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = shipmentShipWithLabelValidateBeforeCall(rechnungsdruckWebAppControllersApiShipmentWithLabel, _callback);
        Type localVarReturnType = new TypeToken<RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiShipmentWithLabelResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
