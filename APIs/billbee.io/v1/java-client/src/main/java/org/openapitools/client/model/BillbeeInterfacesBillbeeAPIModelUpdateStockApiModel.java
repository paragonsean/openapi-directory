/*
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:20.866639-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel {
  public static final String SERIALIZED_NAME_AUTOSUBTRACT_RESERVED_AMOUNT = "AutosubtractReservedAmount";
  @SerializedName(SERIALIZED_NAME_AUTOSUBTRACT_RESERVED_AMOUNT)
  private Boolean autosubtractReservedAmount;

  public static final String SERIALIZED_NAME_BILLBEE_ID = "BillbeeId";
  @SerializedName(SERIALIZED_NAME_BILLBEE_ID)
  private Long billbeeId;

  public static final String SERIALIZED_NAME_DELTA_QUANTITY = "DeltaQuantity";
  @SerializedName(SERIALIZED_NAME_DELTA_QUANTITY)
  private Double deltaQuantity;

  public static final String SERIALIZED_NAME_FORCE_SEND_STOCK_TO_SHOPS = "ForceSendStockToShops";
  @SerializedName(SERIALIZED_NAME_FORCE_SEND_STOCK_TO_SHOPS)
  private Boolean forceSendStockToShops;

  public static final String SERIALIZED_NAME_NEW_QUANTITY = "NewQuantity";
  @SerializedName(SERIALIZED_NAME_NEW_QUANTITY)
  private Double newQuantity;

  public static final String SERIALIZED_NAME_OLD_QUANTITY = "OldQuantity";
  @SerializedName(SERIALIZED_NAME_OLD_QUANTITY)
  private Double oldQuantity;

  public static final String SERIALIZED_NAME_REASON = "Reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_SKU = "Sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_STOCK_ID = "StockId";
  @SerializedName(SERIALIZED_NAME_STOCK_ID)
  private Long stockId;

  public BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel() {
  }

  public BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel autosubtractReservedAmount(Boolean autosubtractReservedAmount) {
    this.autosubtractReservedAmount = autosubtractReservedAmount;
    return this;
  }

  /**
   * Automatically reduce the NewQuantity by the currently not fulfilled amount
   * @return autosubtractReservedAmount
   */
  @javax.annotation.Nullable
  public Boolean getAutosubtractReservedAmount() {
    return autosubtractReservedAmount;
  }

  public void setAutosubtractReservedAmount(Boolean autosubtractReservedAmount) {
    this.autosubtractReservedAmount = autosubtractReservedAmount;
  }


  public BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel billbeeId(Long billbeeId) {
    this.billbeeId = billbeeId;
    return this;
  }

  /**
   * Optional the ID of the Billbee product to update
   * @return billbeeId
   */
  @javax.annotation.Nullable
  public Long getBillbeeId() {
    return billbeeId;
  }

  public void setBillbeeId(Long billbeeId) {
    this.billbeeId = billbeeId;
  }


  public BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel deltaQuantity(Double deltaQuantity) {
    this.deltaQuantity = deltaQuantity;
    return this;
  }

  /**
   * This parameter is currently ignored
   * @return deltaQuantity
   */
  @javax.annotation.Nullable
  public Double getDeltaQuantity() {
    return deltaQuantity;
  }

  public void setDeltaQuantity(Double deltaQuantity) {
    this.deltaQuantity = deltaQuantity;
  }


  public BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel forceSendStockToShops(Boolean forceSendStockToShops) {
    this.forceSendStockToShops = forceSendStockToShops;
    return this;
  }

  /**
   * If true, every sent stockchange is stored and transmitted to the connected shop, even if the value has not changed
   * @return forceSendStockToShops
   */
  @javax.annotation.Nullable
  public Boolean getForceSendStockToShops() {
    return forceSendStockToShops;
  }

  public void setForceSendStockToShops(Boolean forceSendStockToShops) {
    this.forceSendStockToShops = forceSendStockToShops;
  }


  public BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel newQuantity(Double newQuantity) {
    this.newQuantity = newQuantity;
    return this;
  }

  /**
   * The new absolute stock quantity for the product you want to set
   * @return newQuantity
   */
  @javax.annotation.Nullable
  public Double getNewQuantity() {
    return newQuantity;
  }

  public void setNewQuantity(Double newQuantity) {
    this.newQuantity = newQuantity;
  }


  public BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel oldQuantity(Double oldQuantity) {
    this.oldQuantity = oldQuantity;
    return this;
  }

  /**
   * This parameter is currently ignored
   * @return oldQuantity
   */
  @javax.annotation.Nullable
  public Double getOldQuantity() {
    return oldQuantity;
  }

  public void setOldQuantity(Double oldQuantity) {
    this.oldQuantity = oldQuantity;
  }


  public BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Optional a reason text for the stock update
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel sku(String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * The SKU of the product to update
   * @return sku
   */
  @javax.annotation.Nullable
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }


  public BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel stockId(Long stockId) {
    this.stockId = stockId;
    return this;
  }

  /**
   * Optional the stock id if the feature multi stock is activated
   * @return stockId
   */
  @javax.annotation.Nullable
  public Long getStockId() {
    return stockId;
  }

  public void setStockId(Long stockId) {
    this.stockId = stockId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel billbeeInterfacesBillbeeAPIModelUpdateStockApiModel = (BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel) o;
    return Objects.equals(this.autosubtractReservedAmount, billbeeInterfacesBillbeeAPIModelUpdateStockApiModel.autosubtractReservedAmount) &&
        Objects.equals(this.billbeeId, billbeeInterfacesBillbeeAPIModelUpdateStockApiModel.billbeeId) &&
        Objects.equals(this.deltaQuantity, billbeeInterfacesBillbeeAPIModelUpdateStockApiModel.deltaQuantity) &&
        Objects.equals(this.forceSendStockToShops, billbeeInterfacesBillbeeAPIModelUpdateStockApiModel.forceSendStockToShops) &&
        Objects.equals(this.newQuantity, billbeeInterfacesBillbeeAPIModelUpdateStockApiModel.newQuantity) &&
        Objects.equals(this.oldQuantity, billbeeInterfacesBillbeeAPIModelUpdateStockApiModel.oldQuantity) &&
        Objects.equals(this.reason, billbeeInterfacesBillbeeAPIModelUpdateStockApiModel.reason) &&
        Objects.equals(this.sku, billbeeInterfacesBillbeeAPIModelUpdateStockApiModel.sku) &&
        Objects.equals(this.stockId, billbeeInterfacesBillbeeAPIModelUpdateStockApiModel.stockId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autosubtractReservedAmount, billbeeId, deltaQuantity, forceSendStockToShops, newQuantity, oldQuantity, reason, sku, stockId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel {\n");
    sb.append("    autosubtractReservedAmount: ").append(toIndentedString(autosubtractReservedAmount)).append("\n");
    sb.append("    billbeeId: ").append(toIndentedString(billbeeId)).append("\n");
    sb.append("    deltaQuantity: ").append(toIndentedString(deltaQuantity)).append("\n");
    sb.append("    forceSendStockToShops: ").append(toIndentedString(forceSendStockToShops)).append("\n");
    sb.append("    newQuantity: ").append(toIndentedString(newQuantity)).append("\n");
    sb.append("    oldQuantity: ").append(toIndentedString(oldQuantity)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    stockId: ").append(toIndentedString(stockId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AutosubtractReservedAmount");
    openapiFields.add("BillbeeId");
    openapiFields.add("DeltaQuantity");
    openapiFields.add("ForceSendStockToShops");
    openapiFields.add("NewQuantity");
    openapiFields.add("OldQuantity");
    openapiFields.add("Reason");
    openapiFields.add("Sku");
    openapiFields.add("StockId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel is not found in the empty JSON string", BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Reason") != null && !jsonObj.get("Reason").isJsonNull()) && !jsonObj.get("Reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Reason").toString()));
      }
      if ((jsonObj.get("Sku") != null && !jsonObj.get("Sku").isJsonNull()) && !jsonObj.get("Sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Sku").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.class));

       return (TypeAdapter<T>) new TypeAdapter<BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel>() {
           @Override
           public void write(JsonWriter out, BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel
   * @throws IOException if the JSON string is invalid with respect to BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel
   */
  public static BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.class);
  }

  /**
   * Convert an instance of BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

