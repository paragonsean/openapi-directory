/*
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.BillbeeInterfacesShippingShipmentDataDimensions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RechnungsdruckWebAppControllersApiShipmentWithLabel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:20.866639-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RechnungsdruckWebAppControllersApiShipmentWithLabel {
  public static final String SERIALIZED_NAME_CHANGE_STATE_TO_SEND = "ChangeStateToSend";
  @SerializedName(SERIALIZED_NAME_CHANGE_STATE_TO_SEND)
  private Boolean changeStateToSend;

  public static final String SERIALIZED_NAME_CLIENT_REFERENCE = "ClientReference";
  @SerializedName(SERIALIZED_NAME_CLIENT_REFERENCE)
  private String clientReference;

  public static final String SERIALIZED_NAME_DIMENSION = "Dimension";
  @SerializedName(SERIALIZED_NAME_DIMENSION)
  private BillbeeInterfacesShippingShipmentDataDimensions dimension;

  public static final String SERIALIZED_NAME_ORDER_ID = "OrderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private Long orderId;

  public static final String SERIALIZED_NAME_PRINTER_NAME = "PrinterName";
  @SerializedName(SERIALIZED_NAME_PRINTER_NAME)
  private String printerName;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "ProductId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private Long productId;

  public static final String SERIALIZED_NAME_PROVIDER_ID = "ProviderId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ID)
  private Long providerId;

  public static final String SERIALIZED_NAME_SHIP_DATE = "ShipDate";
  @SerializedName(SERIALIZED_NAME_SHIP_DATE)
  private OffsetDateTime shipDate;

  public static final String SERIALIZED_NAME_WEIGHT_IN_GRAM = "WeightInGram";
  @SerializedName(SERIALIZED_NAME_WEIGHT_IN_GRAM)
  private Integer weightInGram;

  public RechnungsdruckWebAppControllersApiShipmentWithLabel() {
  }

  public RechnungsdruckWebAppControllersApiShipmentWithLabel changeStateToSend(Boolean changeStateToSend) {
    this.changeStateToSend = changeStateToSend;
    return this;
  }

  /**
   * Optional parameter to automatically change the orderstate to sent after creating the shipment
   * @return changeStateToSend
   */
  @javax.annotation.Nullable
  public Boolean getChangeStateToSend() {
    return changeStateToSend;
  }

  public void setChangeStateToSend(Boolean changeStateToSend) {
    this.changeStateToSend = changeStateToSend;
  }


  public RechnungsdruckWebAppControllersApiShipmentWithLabel clientReference(String clientReference) {
    this.clientReference = clientReference;
    return this;
  }

  /**
   * Optional specify a reference text to be included on the label. Works not with all carriers
   * @return clientReference
   */
  @javax.annotation.Nullable
  public String getClientReference() {
    return clientReference;
  }

  public void setClientReference(String clientReference) {
    this.clientReference = clientReference;
  }


  public RechnungsdruckWebAppControllersApiShipmentWithLabel dimension(BillbeeInterfacesShippingShipmentDataDimensions dimension) {
    this.dimension = dimension;
    return this;
  }

  /**
   * Get dimension
   * @return dimension
   */
  @javax.annotation.Nullable
  public BillbeeInterfacesShippingShipmentDataDimensions getDimension() {
    return dimension;
  }

  public void setDimension(BillbeeInterfacesShippingShipmentDataDimensions dimension) {
    this.dimension = dimension;
  }


  public RechnungsdruckWebAppControllersApiShipmentWithLabel orderId(Long orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * The Billbee internal id of the order to ship
   * @return orderId
   */
  @javax.annotation.Nullable
  public Long getOrderId() {
    return orderId;
  }

  public void setOrderId(Long orderId) {
    this.orderId = orderId;
  }


  public RechnungsdruckWebAppControllersApiShipmentWithLabel printerName(String printerName) {
    this.printerName = printerName;
    return this;
  }

  /**
   * Optional the name of a connected cloudprinter to send the label to
   * @return printerName
   */
  @javax.annotation.Nullable
  public String getPrinterName() {
    return printerName;
  }

  public void setPrinterName(String printerName) {
    this.printerName = printerName;
  }


  public RechnungsdruckWebAppControllersApiShipmentWithLabel productId(Long productId) {
    this.productId = productId;
    return this;
  }

  /**
   * the id of the shipping provider product to be used
   * @return productId
   */
  @javax.annotation.Nullable
  public Long getProductId() {
    return productId;
  }

  public void setProductId(Long productId) {
    this.productId = productId;
  }


  public RechnungsdruckWebAppControllersApiShipmentWithLabel providerId(Long providerId) {
    this.providerId = providerId;
    return this;
  }

  /**
   * The id of the provider. You can query all providers with the shippingproviders endpoint
   * @return providerId
   */
  @javax.annotation.Nullable
  public Long getProviderId() {
    return providerId;
  }

  public void setProviderId(Long providerId) {
    this.providerId = providerId;
  }


  public RechnungsdruckWebAppControllersApiShipmentWithLabel shipDate(OffsetDateTime shipDate) {
    this.shipDate = shipDate;
    return this;
  }

  /**
   * Optional specify the shipdate to be transmitted to the carrier
   * @return shipDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getShipDate() {
    return shipDate;
  }

  public void setShipDate(OffsetDateTime shipDate) {
    this.shipDate = shipDate;
  }


  public RechnungsdruckWebAppControllersApiShipmentWithLabel weightInGram(Integer weightInGram) {
    this.weightInGram = weightInGram;
    return this;
  }

  /**
   * Optional the shipments weight in gram to override the calculated weight
   * @return weightInGram
   */
  @javax.annotation.Nullable
  public Integer getWeightInGram() {
    return weightInGram;
  }

  public void setWeightInGram(Integer weightInGram) {
    this.weightInGram = weightInGram;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RechnungsdruckWebAppControllersApiShipmentWithLabel rechnungsdruckWebAppControllersApiShipmentWithLabel = (RechnungsdruckWebAppControllersApiShipmentWithLabel) o;
    return Objects.equals(this.changeStateToSend, rechnungsdruckWebAppControllersApiShipmentWithLabel.changeStateToSend) &&
        Objects.equals(this.clientReference, rechnungsdruckWebAppControllersApiShipmentWithLabel.clientReference) &&
        Objects.equals(this.dimension, rechnungsdruckWebAppControllersApiShipmentWithLabel.dimension) &&
        Objects.equals(this.orderId, rechnungsdruckWebAppControllersApiShipmentWithLabel.orderId) &&
        Objects.equals(this.printerName, rechnungsdruckWebAppControllersApiShipmentWithLabel.printerName) &&
        Objects.equals(this.productId, rechnungsdruckWebAppControllersApiShipmentWithLabel.productId) &&
        Objects.equals(this.providerId, rechnungsdruckWebAppControllersApiShipmentWithLabel.providerId) &&
        Objects.equals(this.shipDate, rechnungsdruckWebAppControllersApiShipmentWithLabel.shipDate) &&
        Objects.equals(this.weightInGram, rechnungsdruckWebAppControllersApiShipmentWithLabel.weightInGram);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changeStateToSend, clientReference, dimension, orderId, printerName, productId, providerId, shipDate, weightInGram);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RechnungsdruckWebAppControllersApiShipmentWithLabel {\n");
    sb.append("    changeStateToSend: ").append(toIndentedString(changeStateToSend)).append("\n");
    sb.append("    clientReference: ").append(toIndentedString(clientReference)).append("\n");
    sb.append("    dimension: ").append(toIndentedString(dimension)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    printerName: ").append(toIndentedString(printerName)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("    shipDate: ").append(toIndentedString(shipDate)).append("\n");
    sb.append("    weightInGram: ").append(toIndentedString(weightInGram)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChangeStateToSend");
    openapiFields.add("ClientReference");
    openapiFields.add("Dimension");
    openapiFields.add("OrderId");
    openapiFields.add("PrinterName");
    openapiFields.add("ProductId");
    openapiFields.add("ProviderId");
    openapiFields.add("ShipDate");
    openapiFields.add("WeightInGram");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RechnungsdruckWebAppControllersApiShipmentWithLabel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RechnungsdruckWebAppControllersApiShipmentWithLabel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RechnungsdruckWebAppControllersApiShipmentWithLabel is not found in the empty JSON string", RechnungsdruckWebAppControllersApiShipmentWithLabel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RechnungsdruckWebAppControllersApiShipmentWithLabel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RechnungsdruckWebAppControllersApiShipmentWithLabel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ClientReference") != null && !jsonObj.get("ClientReference").isJsonNull()) && !jsonObj.get("ClientReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientReference").toString()));
      }
      // validate the optional field `Dimension`
      if (jsonObj.get("Dimension") != null && !jsonObj.get("Dimension").isJsonNull()) {
        BillbeeInterfacesShippingShipmentDataDimensions.validateJsonElement(jsonObj.get("Dimension"));
      }
      if ((jsonObj.get("PrinterName") != null && !jsonObj.get("PrinterName").isJsonNull()) && !jsonObj.get("PrinterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PrinterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PrinterName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RechnungsdruckWebAppControllersApiShipmentWithLabel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RechnungsdruckWebAppControllersApiShipmentWithLabel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RechnungsdruckWebAppControllersApiShipmentWithLabel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RechnungsdruckWebAppControllersApiShipmentWithLabel.class));

       return (TypeAdapter<T>) new TypeAdapter<RechnungsdruckWebAppControllersApiShipmentWithLabel>() {
           @Override
           public void write(JsonWriter out, RechnungsdruckWebAppControllersApiShipmentWithLabel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RechnungsdruckWebAppControllersApiShipmentWithLabel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RechnungsdruckWebAppControllersApiShipmentWithLabel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RechnungsdruckWebAppControllersApiShipmentWithLabel
   * @throws IOException if the JSON string is invalid with respect to RechnungsdruckWebAppControllersApiShipmentWithLabel
   */
  public static RechnungsdruckWebAppControllersApiShipmentWithLabel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RechnungsdruckWebAppControllersApiShipmentWithLabel.class);
  }

  /**
   * Convert an instance of RechnungsdruckWebAppControllersApiShipmentWithLabel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

