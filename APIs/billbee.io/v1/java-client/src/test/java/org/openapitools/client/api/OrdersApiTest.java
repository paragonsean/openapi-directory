/*
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BillbeeInterfacesBillbeeAPIModelOrder;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelInvoiceApiModel;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelOrder;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiInvoice;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelsLayoutTemplate;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiOrderStateUpdate;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiOrderTagCreate;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiSearchControllerSearchModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrdersApi
 */
@Disabled
public class OrdersApiTest {

    private final OrdersApi api = new OrdersApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void layoutApiGetListTest() throws ApiException {
        RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelsLayoutTemplate response = api.layoutApiGetList();
        // TODO: test validations
    }

    /**
     * Add a shipment to a given order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderApiAddShipmentTest() throws ApiException {
        Long id = null;
        RechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel = null;
        Object response = api.orderApiAddShipment(id, rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel);
        // TODO: test validations
    }

    /**
     * Create an delivery note for an existing order. This request is extra throttled by order and api key to a maximum of 1 per 5 minutes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderApiCreateDeliveryNoteTest() throws ApiException {
        Long id = null;
        Boolean includePdf = null;
        Long sendToCloudId = null;
        Object response = api.orderApiCreateDeliveryNote(id, includePdf, sendToCloudId);
        // TODO: test validations
    }

    /**
     * Create an invoice for an existing order. This request is extra throttled by order and api key to a maximum of 1 per 5 minutes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderApiCreateInvoiceTest() throws ApiException {
        Long id = null;
        Boolean includeInvoicePdf = null;
        Long templateId = null;
        Long sendToCloudId = null;
        RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiInvoice response = api.orderApiCreateInvoice(id, includeInvoicePdf, templateId, sendToCloudId);
        // TODO: test validations
    }

    /**
     * Find a single order by its external id (order number)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderApiFindTest() throws ApiException {
        String id = null;
        String partner = null;
        Object response = api.orderApiFind(id, partner);
        // TODO: test validations
    }

    /**
     * Get a single order by its internal billbee id. This request is throttled to 6 calls per order in one minute
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderApiGetTest() throws ApiException {
        Long id = null;
        Integer articleTitleSource = null;
        RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder response = api.orderApiGet(id, articleTitleSource);
        // TODO: test validations
    }

    /**
     * Get a single order by its external order number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderApiGetByExtRefTest() throws ApiException {
        String extRef = null;
        RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder response = api.orderApiGetByExtRef(extRef);
        // TODO: test validations
    }

    /**
     * Get a list of all invoices optionally filtered by date. This request ist throttled to 1 per 1 minute for same page and minInvoiceDate
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderApiGetInvoiceListTest() throws ApiException {
        OffsetDateTime minInvoiceDate = null;
        OffsetDateTime maxInvoiceDate = null;
        Integer page = null;
        Integer pageSize = null;
        List<Long> shopId = null;
        List<Integer> orderStateId = null;
        List<String> tag = null;
        OffsetDateTime minPayDate = null;
        OffsetDateTime maxPayDate = null;
        Boolean includePositions = null;
        Boolean excludeTags = null;
        RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelInvoiceApiModel response = api.orderApiGetInvoiceList(minInvoiceDate, maxInvoiceDate, page, pageSize, shopId, orderStateId, tag, minPayDate, maxPayDate, includePositions, excludeTags);
        // TODO: test validations
    }

    /**
     * Get a list of all orders optionally filtered by date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderApiGetListTest() throws ApiException {
        OffsetDateTime minOrderDate = null;
        OffsetDateTime maxOrderDate = null;
        Integer page = null;
        Integer pageSize = null;
        List<Long> shopId = null;
        List<Integer> orderStateId = null;
        List<String> tag = null;
        Long minimumBillBeeOrderId = null;
        OffsetDateTime modifiedAtMin = null;
        OffsetDateTime modifiedAtMax = null;
        Integer articleTitleSource = null;
        Boolean excludeTags = null;
        RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelOrder response = api.orderApiGetList(minOrderDate, maxOrderDate, page, pageSize, shopId, orderStateId, tag, minimumBillBeeOrderId, modifiedAtMin, modifiedAtMax, articleTitleSource, excludeTags);
        // TODO: test validations
    }

    /**
     * Returns a list of fields which can be updated with the orders/{id} patch call
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderApiGetPatchableFieldsTest() throws ApiException {
        Object response = api.orderApiGetPatchableFields();
        // TODO: test validations
    }

    /**
     * Parses a text and replaces all placeholders
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderApiParsePlaceholdersTest() throws ApiException {
        Long id = null;
        RechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer = null;
        Object response = api.orderApiParsePlaceholders(id, rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer);
        // TODO: test validations
    }

    /**
     * Updates one or more fields of an order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderApiPatchOrderTest() throws ApiException {
        Long id = null;
        Object body = null;
        RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder response = api.orderApiPatchOrder(id, body);
        // TODO: test validations
    }

    /**
     * Creates a new order in the Billbee account
     *
     * To create an order POST an JSON object to the orders endpoint with the shown properties.  Not all properties are required.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderApiPostNewOrderTest() throws ApiException {
        BillbeeInterfacesBillbeeAPIModelOrder billbeeInterfacesBillbeeAPIModelOrder = null;
        Long shopId = null;
        RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder response = api.orderApiPostNewOrder(billbeeInterfacesBillbeeAPIModelOrder, shopId);
        // TODO: test validations
    }

    /**
     * Sends a message to the buyer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderApiSendMessageTest() throws ApiException {
        Long id = null;
        RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel = null;
        Object response = api.orderApiSendMessage(id, rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel);
        // TODO: test validations
    }

    /**
     * Attach one or more tags to an order
     *
     * When a tag is already attached, it is ignored. Tags are not case sensitive. All given tags are added to the existing tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderApiTagsCreateTest() throws ApiException {
        Long id = null;
        RechnungsdruckWebAppControllersApiOrderTagCreate rechnungsdruckWebAppControllersApiOrderTagCreate = null;
        Object response = api.orderApiTagsCreate(id, rechnungsdruckWebAppControllersApiOrderTagCreate);
        // TODO: test validations
    }

    /**
     * Sets the tags attached to an order
     *
     * All existing tags will be replaced by the given list of new tags. To just add tags, use POST method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderApiTagsUpdateTest() throws ApiException {
        Long id = null;
        RechnungsdruckWebAppControllersApiOrderTagCreate rechnungsdruckWebAppControllersApiOrderTagCreate = null;
        Object response = api.orderApiTagsUpdate(id, rechnungsdruckWebAppControllersApiOrderTagCreate);
        // TODO: test validations
    }

    /**
     * Triggers a rule event
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderApiTriggerEventTest() throws ApiException {
        Long id = null;
        RechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer = null;
        Object response = api.orderApiTriggerEvent(id, rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer);
        // TODO: test validations
    }

    /**
     * Changes the main state of a single order
     *
     * ### REMARKS ###  Use this call to change the state of an order to i.e. paid or sent.    The state is transfered to the external shop/marketplace if configured.  This is the list of known states:  - 1: ordered  - 2: confirmed  - 3: paid  - 4: shipped  - 5: reclamation  - 6: deleted  - 7: closed  - 8: canceled  - 9: archived  - 10: not used  - 11: demand note 1  - 12: demand note 2  - 13: packed  - 14: offered  - 15: payment reminder  - 16: fulfilling
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderApiUpdateStateTest() throws ApiException {
        Long id = null;
        RechnungsdruckWebAppControllersApiOrderStateUpdate rechnungsdruckWebAppControllersApiOrderStateUpdate = null;
        Object response = api.orderApiUpdateState(id, rechnungsdruckWebAppControllersApiOrderStateUpdate);
        // TODO: test validations
    }

    /**
     * Search for products, customers and orders.  Type can be \&quot;order\&quot;, \&quot;product\&quot; and / or \&quot;customer\&quot;  Term can contains lucene query syntax
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchSearch_1Test() throws ApiException {
        RechnungsdruckWebAppControllersApiSearchControllerSearchModel rechnungsdruckWebAppControllersApiSearchControllerSearchModel = null;
        RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel response = api.searchSearch_1(rechnungsdruckWebAppControllersApiSearchControllerSearchModel);
        // TODO: test validations
    }

}
