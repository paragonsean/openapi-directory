/*
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BillbeeInterfacesBillbeeAPIModelArticleApiModel;
import org.openapitools.client.model.BillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel;
import org.openapitools.client.model.BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel;
import org.openapitools.client.model.BillbeeInterfacesBillbeeAPIModelUpdateStockCodeApiModel;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelArticleApiCustomFieldDefinitionModel;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelArticleApiModel;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleApiCustomFieldDefinitionModel;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleApiModel;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelDeletedImagesModel;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelGetReservedAmountResponseData;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelUpdateStockCodeResponseData;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelUpdateStockResponseData;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelStockResponseData;
import org.openapitools.client.model.RechnungsdruckWebAppControllersApiSearchControllerSearchModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductsApi
 */
@Disabled
public class ProductsApiTest {

    private final ProductsApi api = new ProductsApi();

    /**
     * Creates a new product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleCreateArticleTest() throws ApiException {
        BillbeeInterfacesBillbeeAPIModelArticleApiModel billbeeInterfacesBillbeeAPIModelArticleApiModel = null;
        Object response = api.articleCreateArticle(billbeeInterfacesBillbeeAPIModelArticleApiModel);
        // TODO: test validations
    }

    /**
     * Deletes a product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleDeleteArticleTest() throws ApiException {
        Long id = null;
        Object response = api.articleDeleteArticle(id);
        // TODO: test validations
    }

    /**
     * Deletes a single image by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleDeleteImageTest() throws ApiException {
        Long imageId = null;
        Object response = api.articleDeleteImage(imageId);
        // TODO: test validations
    }

    /**
     * Deletes a single image from a product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleDeleteImageFromProductTest() throws ApiException {
        Long productId = null;
        Long imageId = null;
        Object response = api.articleDeleteImageFromProduct(productId, imageId);
        // TODO: test validations
    }

    /**
     * Delete multiple images by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleDeleteImagesTest() throws ApiException {
        List<Long> requestBody = null;
        RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelDeletedImagesModel response = api.articleDeleteImages(requestBody);
        // TODO: test validations
    }

    /**
     * Queries a single article by id or by sku
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleGetArticleTest() throws ApiException {
        String id = null;
        String lookupBy = null;
        RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleApiModel response = api.articleGetArticle(id, lookupBy);
        // TODO: test validations
    }

    /**
     * GEts a list of all defined categories
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleGetCategoryTest() throws ApiException {
        Object response = api.articleGetCategory();
        // TODO: test validations
    }

    /**
     * Queries a single custom field
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleGetCustomFieldTest() throws ApiException {
        Long id = null;
        RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleApiCustomFieldDefinitionModel response = api.articleGetCustomField(id);
        // TODO: test validations
    }

    /**
     * Queries a list of all custom fields
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleGetCustomFieldsTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelArticleApiCustomFieldDefinitionModel response = api.articleGetCustomFields(page, pageSize);
        // TODO: test validations
    }

    /**
     * Returns a single image by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleGetImageTest() throws ApiException {
        Long imageId = null;
        RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel response = api.articleGetImage(imageId);
        // TODO: test validations
    }

    /**
     * Returns a single image by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleGetImageFromProductTest() throws ApiException {
        Long productId = null;
        Long imageId = null;
        RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel response = api.articleGetImageFromProduct(productId, imageId);
        // TODO: test validations
    }

    /**
     * Returns a list of all images of the product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleGetImagesTest() throws ApiException {
        Long productId = null;
        RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel response = api.articleGetImages(productId);
        // TODO: test validations
    }

    /**
     * Get a list of all products
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleGetListTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        OffsetDateTime minCreatedAt = null;
        Long minimumBillBeeArticleId = null;
        Long maximumBillBeeArticleId = null;
        RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelArticleApiModel response = api.articleGetList(page, pageSize, minCreatedAt, minimumBillBeeArticleId, maximumBillBeeArticleId);
        // TODO: test validations
    }

    /**
     * Returns a list of fields which can be updated with the patch call
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleGetPatchableFieldsTest() throws ApiException {
        Object response = api.articleGetPatchableFields();
        // TODO: test validations
    }

    /**
     * Queries the reserved amount for a single article by id or by sku
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleGetReservedAmountTest() throws ApiException {
        String id = null;
        String lookupBy = null;
        Long stockId = null;
        RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelGetReservedAmountResponseData response = api.articleGetReservedAmount(id, lookupBy, stockId);
        // TODO: test validations
    }

    /**
     * Query all defined stock locations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleGetStocksTest() throws ApiException {
        RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelStockResponseData response = api.articleGetStocks();
        // TODO: test validations
    }

    /**
     * Updates one or more fields of a product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articlePatchArticleTest() throws ApiException {
        Long id = null;
        Object body = null;
        Object response = api.articlePatchArticle(id, body);
        // TODO: test validations
    }

    /**
     * Add or update an existing image of a product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articlePutImageTest() throws ApiException {
        Long productId = null;
        Long imageId = null;
        BillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel billbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel = null;
        RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel response = api.articlePutImage(productId, imageId, billbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel);
        // TODO: test validations
    }

    /**
     * Add multiple images to a product or replace the product images by the given images
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articlePutImagesTest() throws ApiException {
        Long productId = null;
        List<BillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel> billbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel = null;
        Boolean replace = null;
        RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel response = api.articlePutImages(productId, billbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel, replace);
        // TODO: test validations
    }

    /**
     * Update the stock qty of an article
     *
     * The article is specified by sku. You have to send the absolute value for the current stock
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleUpdateStockTest() throws ApiException {
        BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel billbeeInterfacesBillbeeAPIModelUpdateStockApiModel = null;
        RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelUpdateStockResponseData response = api.articleUpdateStock(billbeeInterfacesBillbeeAPIModelUpdateStockApiModel);
        // TODO: test validations
    }

    /**
     * Update the stock code of an article
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleUpdateStockCodeTest() throws ApiException {
        BillbeeInterfacesBillbeeAPIModelUpdateStockCodeApiModel billbeeInterfacesBillbeeAPIModelUpdateStockCodeApiModel = null;
        RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelUpdateStockCodeResponseData response = api.articleUpdateStockCode(billbeeInterfacesBillbeeAPIModelUpdateStockCodeApiModel);
        // TODO: test validations
    }

    /**
     * Update the stock qty for multiple articles at once
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleUpdateStockMultipleTest() throws ApiException {
        List<BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel> billbeeInterfacesBillbeeAPIModelUpdateStockApiModel = null;
        List<RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelUpdateStockResponseData> response = api.articleUpdateStockMultiple(billbeeInterfacesBillbeeAPIModelUpdateStockApiModel);
        // TODO: test validations
    }

    /**
     * Search for products, customers and orders.  Type can be \&quot;order\&quot;, \&quot;product\&quot; and / or \&quot;customer\&quot;  Term can contains lucene query syntax
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchSearchTest() throws ApiException {
        RechnungsdruckWebAppControllersApiSearchControllerSearchModel rechnungsdruckWebAppControllersApiSearchControllerSearchModel = null;
        RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel response = api.searchSearch(rechnungsdruckWebAppControllersApiSearchControllerSearchModel);
        // TODO: test validations
    }

}
