/**
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomerAddressesApi_H
#define OAI_OAICustomerAddressesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBillbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel.h"
#include "OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_.h"
#include "OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomerAddressesApi : public QObject {
    Q_OBJECT

public:
    OAICustomerAddressesApi(const int timeOut = 0);
    ~OAICustomerAddressesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_billbee_interfaces_billbee_api_model_customer_address_api_model OAIBillbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel [required]
    */
    virtual void customerAddressesCreate(const OAIBillbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel &oai_billbee_interfaces_billbee_api_model_customer_address_api_model);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void customerAddressesGetAll(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void customerAddressesGetOne(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_billbee_interfaces_billbee_api_model_customer_address_api_model OAIBillbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel [required]
    */
    virtual void customerAddressesUpdate(const qint64 &id, const OAIBillbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel &oai_billbee_interfaces_billbee_api_model_customer_address_api_model);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void customerAddressesCreateCallback(OAIHttpRequestWorker *worker);
    void customerAddressesGetAllCallback(OAIHttpRequestWorker *worker);
    void customerAddressesGetOneCallback(OAIHttpRequestWorker *worker);
    void customerAddressesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void customerAddressesCreateSignal(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary);
    void customerAddressesGetAllSignal(OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary);
    void customerAddressesGetOneSignal(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary);
    void customerAddressesUpdateSignal(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary);


    void customerAddressesCreateSignalFull(OAIHttpRequestWorker *worker, OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary);
    void customerAddressesGetAllSignalFull(OAIHttpRequestWorker *worker, OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary);
    void customerAddressesGetOneSignalFull(OAIHttpRequestWorker *worker, OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary);
    void customerAddressesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary);

    Q_DECL_DEPRECATED_X("Use customerAddressesCreateSignalError() instead")
    void customerAddressesCreateSignalE(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerAddressesCreateSignalError(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerAddressesGetAllSignalError() instead")
    void customerAddressesGetAllSignalE(OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerAddressesGetAllSignalError(OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerAddressesGetOneSignalError() instead")
    void customerAddressesGetOneSignalE(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerAddressesGetOneSignalError(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerAddressesUpdateSignalError() instead")
    void customerAddressesUpdateSignalE(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerAddressesUpdateSignalError(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use customerAddressesCreateSignalErrorFull() instead")
    void customerAddressesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerAddressesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerAddressesGetAllSignalErrorFull() instead")
    void customerAddressesGetAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerAddressesGetAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerAddressesGetOneSignalErrorFull() instead")
    void customerAddressesGetOneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerAddressesGetOneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerAddressesUpdateSignalErrorFull() instead")
    void customerAddressesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerAddressesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
