/**
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel() {
    this->initializeModel();
}

OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::~OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel() {}

void OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::initializeModel() {

    m_autosubtract_reserved_amount_isSet = false;
    m_autosubtract_reserved_amount_isValid = false;

    m_billbee_id_isSet = false;
    m_billbee_id_isValid = false;

    m_delta_quantity_isSet = false;
    m_delta_quantity_isValid = false;

    m_force_send_stock_to_shops_isSet = false;
    m_force_send_stock_to_shops_isValid = false;

    m_new_quantity_isSet = false;
    m_new_quantity_isValid = false;

    m_old_quantity_isSet = false;
    m_old_quantity_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_stock_id_isSet = false;
    m_stock_id_isValid = false;
}

void OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::fromJsonObject(QJsonObject json) {

    m_autosubtract_reserved_amount_isValid = ::OpenAPI::fromJsonValue(m_autosubtract_reserved_amount, json[QString("AutosubtractReservedAmount")]);
    m_autosubtract_reserved_amount_isSet = !json[QString("AutosubtractReservedAmount")].isNull() && m_autosubtract_reserved_amount_isValid;

    m_billbee_id_isValid = ::OpenAPI::fromJsonValue(m_billbee_id, json[QString("BillbeeId")]);
    m_billbee_id_isSet = !json[QString("BillbeeId")].isNull() && m_billbee_id_isValid;

    m_delta_quantity_isValid = ::OpenAPI::fromJsonValue(m_delta_quantity, json[QString("DeltaQuantity")]);
    m_delta_quantity_isSet = !json[QString("DeltaQuantity")].isNull() && m_delta_quantity_isValid;

    m_force_send_stock_to_shops_isValid = ::OpenAPI::fromJsonValue(m_force_send_stock_to_shops, json[QString("ForceSendStockToShops")]);
    m_force_send_stock_to_shops_isSet = !json[QString("ForceSendStockToShops")].isNull() && m_force_send_stock_to_shops_isValid;

    m_new_quantity_isValid = ::OpenAPI::fromJsonValue(m_new_quantity, json[QString("NewQuantity")]);
    m_new_quantity_isSet = !json[QString("NewQuantity")].isNull() && m_new_quantity_isValid;

    m_old_quantity_isValid = ::OpenAPI::fromJsonValue(m_old_quantity, json[QString("OldQuantity")]);
    m_old_quantity_isSet = !json[QString("OldQuantity")].isNull() && m_old_quantity_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("Reason")]);
    m_reason_isSet = !json[QString("Reason")].isNull() && m_reason_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("Sku")]);
    m_sku_isSet = !json[QString("Sku")].isNull() && m_sku_isValid;

    m_stock_id_isValid = ::OpenAPI::fromJsonValue(m_stock_id, json[QString("StockId")]);
    m_stock_id_isSet = !json[QString("StockId")].isNull() && m_stock_id_isValid;
}

QString OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::asJsonObject() const {
    QJsonObject obj;
    if (m_autosubtract_reserved_amount_isSet) {
        obj.insert(QString("AutosubtractReservedAmount"), ::OpenAPI::toJsonValue(m_autosubtract_reserved_amount));
    }
    if (m_billbee_id_isSet) {
        obj.insert(QString("BillbeeId"), ::OpenAPI::toJsonValue(m_billbee_id));
    }
    if (m_delta_quantity_isSet) {
        obj.insert(QString("DeltaQuantity"), ::OpenAPI::toJsonValue(m_delta_quantity));
    }
    if (m_force_send_stock_to_shops_isSet) {
        obj.insert(QString("ForceSendStockToShops"), ::OpenAPI::toJsonValue(m_force_send_stock_to_shops));
    }
    if (m_new_quantity_isSet) {
        obj.insert(QString("NewQuantity"), ::OpenAPI::toJsonValue(m_new_quantity));
    }
    if (m_old_quantity_isSet) {
        obj.insert(QString("OldQuantity"), ::OpenAPI::toJsonValue(m_old_quantity));
    }
    if (m_reason_isSet) {
        obj.insert(QString("Reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_sku_isSet) {
        obj.insert(QString("Sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_stock_id_isSet) {
        obj.insert(QString("StockId"), ::OpenAPI::toJsonValue(m_stock_id));
    }
    return obj;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::isAutosubtractReservedAmount() const {
    return m_autosubtract_reserved_amount;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::setAutosubtractReservedAmount(const bool &autosubtract_reserved_amount) {
    m_autosubtract_reserved_amount = autosubtract_reserved_amount;
    m_autosubtract_reserved_amount_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::is_autosubtract_reserved_amount_Set() const{
    return m_autosubtract_reserved_amount_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::is_autosubtract_reserved_amount_Valid() const{
    return m_autosubtract_reserved_amount_isValid;
}

qint64 OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::getBillbeeId() const {
    return m_billbee_id;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::setBillbeeId(const qint64 &billbee_id) {
    m_billbee_id = billbee_id;
    m_billbee_id_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::is_billbee_id_Set() const{
    return m_billbee_id_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::is_billbee_id_Valid() const{
    return m_billbee_id_isValid;
}

double OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::getDeltaQuantity() const {
    return m_delta_quantity;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::setDeltaQuantity(const double &delta_quantity) {
    m_delta_quantity = delta_quantity;
    m_delta_quantity_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::is_delta_quantity_Set() const{
    return m_delta_quantity_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::is_delta_quantity_Valid() const{
    return m_delta_quantity_isValid;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::isForceSendStockToShops() const {
    return m_force_send_stock_to_shops;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::setForceSendStockToShops(const bool &force_send_stock_to_shops) {
    m_force_send_stock_to_shops = force_send_stock_to_shops;
    m_force_send_stock_to_shops_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::is_force_send_stock_to_shops_Set() const{
    return m_force_send_stock_to_shops_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::is_force_send_stock_to_shops_Valid() const{
    return m_force_send_stock_to_shops_isValid;
}

double OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::getNewQuantity() const {
    return m_new_quantity;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::setNewQuantity(const double &new_quantity) {
    m_new_quantity = new_quantity;
    m_new_quantity_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::is_new_quantity_Set() const{
    return m_new_quantity_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::is_new_quantity_Valid() const{
    return m_new_quantity_isValid;
}

double OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::getOldQuantity() const {
    return m_old_quantity;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::setOldQuantity(const double &old_quantity) {
    m_old_quantity = old_quantity;
    m_old_quantity_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::is_old_quantity_Set() const{
    return m_old_quantity_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::is_old_quantity_Valid() const{
    return m_old_quantity_isValid;
}

QString OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::getReason() const {
    return m_reason;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::getSku() const {
    return m_sku;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::is_sku_Valid() const{
    return m_sku_isValid;
}

qint64 OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::getStockId() const {
    return m_stock_id;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::setStockId(const qint64 &stock_id) {
    m_stock_id = stock_id;
    m_stock_id_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::is_stock_id_Set() const{
    return m_stock_id_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::is_stock_id_Valid() const{
    return m_stock_id_isValid;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_autosubtract_reserved_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billbee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delta_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_send_stock_to_shops_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockApiModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
