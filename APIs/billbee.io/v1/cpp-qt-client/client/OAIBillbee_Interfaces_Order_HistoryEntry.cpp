/**
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBillbee_Interfaces_Order_HistoryEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBillbee_Interfaces_Order_HistoryEntry::OAIBillbee_Interfaces_Order_HistoryEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBillbee_Interfaces_Order_HistoryEntry::OAIBillbee_Interfaces_Order_HistoryEntry() {
    this->initializeModel();
}

OAIBillbee_Interfaces_Order_HistoryEntry::~OAIBillbee_Interfaces_Order_HistoryEntry() {}

void OAIBillbee_Interfaces_Order_HistoryEntry::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_employee_name_isSet = false;
    m_employee_name_isValid = false;

    m_event_type_name_isSet = false;
    m_event_type_name_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_type_id_isSet = false;
    m_type_id_isValid = false;
}

void OAIBillbee_Interfaces_Order_HistoryEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBillbee_Interfaces_Order_HistoryEntry::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("Created")]);
    m_created_isSet = !json[QString("Created")].isNull() && m_created_isValid;

    m_employee_name_isValid = ::OpenAPI::fromJsonValue(m_employee_name, json[QString("EmployeeName")]);
    m_employee_name_isSet = !json[QString("EmployeeName")].isNull() && m_employee_name_isValid;

    m_event_type_name_isValid = ::OpenAPI::fromJsonValue(m_event_type_name, json[QString("EventTypeName")]);
    m_event_type_name_isSet = !json[QString("EventTypeName")].isNull() && m_event_type_name_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("Text")]);
    m_text_isSet = !json[QString("Text")].isNull() && m_text_isValid;

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("TypeId")]);
    m_type_id_isSet = !json[QString("TypeId")].isNull() && m_type_id_isValid;
}

QString OAIBillbee_Interfaces_Order_HistoryEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBillbee_Interfaces_Order_HistoryEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("Created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_employee_name_isSet) {
        obj.insert(QString("EmployeeName"), ::OpenAPI::toJsonValue(m_employee_name));
    }
    if (m_event_type_name_isSet) {
        obj.insert(QString("EventTypeName"), ::OpenAPI::toJsonValue(m_event_type_name));
    }
    if (m_text_isSet) {
        obj.insert(QString("Text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_type_id_isSet) {
        obj.insert(QString("TypeId"), ::OpenAPI::toJsonValue(m_type_id));
    }
    return obj;
}

QDateTime OAIBillbee_Interfaces_Order_HistoryEntry::getCreated() const {
    return m_created;
}
void OAIBillbee_Interfaces_Order_HistoryEntry::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIBillbee_Interfaces_Order_HistoryEntry::is_created_Set() const{
    return m_created_isSet;
}

bool OAIBillbee_Interfaces_Order_HistoryEntry::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIBillbee_Interfaces_Order_HistoryEntry::getEmployeeName() const {
    return m_employee_name;
}
void OAIBillbee_Interfaces_Order_HistoryEntry::setEmployeeName(const QString &employee_name) {
    m_employee_name = employee_name;
    m_employee_name_isSet = true;
}

bool OAIBillbee_Interfaces_Order_HistoryEntry::is_employee_name_Set() const{
    return m_employee_name_isSet;
}

bool OAIBillbee_Interfaces_Order_HistoryEntry::is_employee_name_Valid() const{
    return m_employee_name_isValid;
}

QString OAIBillbee_Interfaces_Order_HistoryEntry::getEventTypeName() const {
    return m_event_type_name;
}
void OAIBillbee_Interfaces_Order_HistoryEntry::setEventTypeName(const QString &event_type_name) {
    m_event_type_name = event_type_name;
    m_event_type_name_isSet = true;
}

bool OAIBillbee_Interfaces_Order_HistoryEntry::is_event_type_name_Set() const{
    return m_event_type_name_isSet;
}

bool OAIBillbee_Interfaces_Order_HistoryEntry::is_event_type_name_Valid() const{
    return m_event_type_name_isValid;
}

QString OAIBillbee_Interfaces_Order_HistoryEntry::getText() const {
    return m_text;
}
void OAIBillbee_Interfaces_Order_HistoryEntry::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIBillbee_Interfaces_Order_HistoryEntry::is_text_Set() const{
    return m_text_isSet;
}

bool OAIBillbee_Interfaces_Order_HistoryEntry::is_text_Valid() const{
    return m_text_isValid;
}

qint32 OAIBillbee_Interfaces_Order_HistoryEntry::getTypeId() const {
    return m_type_id;
}
void OAIBillbee_Interfaces_Order_HistoryEntry::setTypeId(const qint32 &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAIBillbee_Interfaces_Order_HistoryEntry::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAIBillbee_Interfaces_Order_HistoryEntry::is_type_id_Valid() const{
    return m_type_id_isValid;
}

bool OAIBillbee_Interfaces_Order_HistoryEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBillbee_Interfaces_Order_HistoryEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
