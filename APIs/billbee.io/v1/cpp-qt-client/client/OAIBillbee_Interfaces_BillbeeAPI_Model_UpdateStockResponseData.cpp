/**
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData() {
    this->initializeModel();
}

OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::~OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData() {}

void OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::initializeModel() {

    m_current_stock_isSet = false;
    m_current_stock_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_old_stock_isSet = false;
    m_old_stock_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_unfulfilled_amount_isSet = false;
    m_unfulfilled_amount_isValid = false;
}

void OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::fromJsonObject(QJsonObject json) {

    m_current_stock_isValid = ::OpenAPI::fromJsonValue(m_current_stock, json[QString("CurrentStock")]);
    m_current_stock_isSet = !json[QString("CurrentStock")].isNull() && m_current_stock_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_old_stock_isValid = ::OpenAPI::fromJsonValue(m_old_stock, json[QString("OldStock")]);
    m_old_stock_isSet = !json[QString("OldStock")].isNull() && m_old_stock_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("SKU")]);
    m_sku_isSet = !json[QString("SKU")].isNull() && m_sku_isValid;

    m_unfulfilled_amount_isValid = ::OpenAPI::fromJsonValue(m_unfulfilled_amount, json[QString("UnfulfilledAmount")]);
    m_unfulfilled_amount_isSet = !json[QString("UnfulfilledAmount")].isNull() && m_unfulfilled_amount_isValid;
}

QString OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::asJsonObject() const {
    QJsonObject obj;
    if (m_current_stock_isSet) {
        obj.insert(QString("CurrentStock"), ::OpenAPI::toJsonValue(m_current_stock));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_old_stock_isSet) {
        obj.insert(QString("OldStock"), ::OpenAPI::toJsonValue(m_old_stock));
    }
    if (m_sku_isSet) {
        obj.insert(QString("SKU"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_unfulfilled_amount_isSet) {
        obj.insert(QString("UnfulfilledAmount"), ::OpenAPI::toJsonValue(m_unfulfilled_amount));
    }
    return obj;
}

double OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::getCurrentStock() const {
    return m_current_stock;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::setCurrentStock(const double &current_stock) {
    m_current_stock = current_stock;
    m_current_stock_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::is_current_stock_Set() const{
    return m_current_stock_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::is_current_stock_Valid() const{
    return m_current_stock_isValid;
}

QString OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::getMessage() const {
    return m_message;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::is_message_Set() const{
    return m_message_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::is_message_Valid() const{
    return m_message_isValid;
}

double OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::getOldStock() const {
    return m_old_stock;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::setOldStock(const double &old_stock) {
    m_old_stock = old_stock;
    m_old_stock_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::is_old_stock_Set() const{
    return m_old_stock_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::is_old_stock_Valid() const{
    return m_old_stock_isValid;
}

QString OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::getSku() const {
    return m_sku;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::is_sku_Valid() const{
    return m_sku_isValid;
}

double OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::getUnfulfilledAmount() const {
    return m_unfulfilled_amount;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::setUnfulfilledAmount(const double &unfulfilled_amount) {
    m_unfulfilled_amount = unfulfilled_amount;
    m_unfulfilled_amount_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::is_unfulfilled_amount_Set() const{
    return m_unfulfilled_amount_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::is_unfulfilled_amount_Valid() const{
    return m_unfulfilled_amount_isValid;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_stock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_stock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unfulfilled_amount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_UpdateStockResponseData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
