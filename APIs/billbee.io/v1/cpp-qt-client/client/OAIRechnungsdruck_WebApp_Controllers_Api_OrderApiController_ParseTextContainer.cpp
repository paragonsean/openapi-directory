/**
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer::OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer::OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer() {
    this->initializeModel();
}

OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer::~OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer() {}

void OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer::initializeModel() {

    m_is_html_isSet = false;
    m_is_html_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_text_to_parse_isSet = false;
    m_text_to_parse_isValid = false;

    m_trim_isSet = false;
    m_trim_isValid = false;
}

void OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer::fromJsonObject(QJsonObject json) {

    m_is_html_isValid = ::OpenAPI::fromJsonValue(m_is_html, json[QString("IsHtml")]);
    m_is_html_isSet = !json[QString("IsHtml")].isNull() && m_is_html_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("Language")]);
    m_language_isSet = !json[QString("Language")].isNull() && m_language_isValid;

    m_text_to_parse_isValid = ::OpenAPI::fromJsonValue(m_text_to_parse, json[QString("TextToParse")]);
    m_text_to_parse_isSet = !json[QString("TextToParse")].isNull() && m_text_to_parse_isValid;

    m_trim_isValid = ::OpenAPI::fromJsonValue(m_trim, json[QString("Trim")]);
    m_trim_isSet = !json[QString("Trim")].isNull() && m_trim_isValid;
}

QString OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer::asJsonObject() const {
    QJsonObject obj;
    if (m_is_html_isSet) {
        obj.insert(QString("IsHtml"), ::OpenAPI::toJsonValue(m_is_html));
    }
    if (m_language_isSet) {
        obj.insert(QString("Language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_text_to_parse_isSet) {
        obj.insert(QString("TextToParse"), ::OpenAPI::toJsonValue(m_text_to_parse));
    }
    if (m_trim_isSet) {
        obj.insert(QString("Trim"), ::OpenAPI::toJsonValue(m_trim));
    }
    return obj;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer::isIsHtml() const {
    return m_is_html;
}
void OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer::setIsHtml(const bool &is_html) {
    m_is_html = is_html;
    m_is_html_isSet = true;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer::is_is_html_Set() const{
    return m_is_html_isSet;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer::is_is_html_Valid() const{
    return m_is_html_isValid;
}

QString OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer::getLanguage() const {
    return m_language;
}
void OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer::is_language_Set() const{
    return m_language_isSet;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer::getTextToParse() const {
    return m_text_to_parse;
}
void OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer::setTextToParse(const QString &text_to_parse) {
    m_text_to_parse = text_to_parse;
    m_text_to_parse_isSet = true;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer::is_text_to_parse_Set() const{
    return m_text_to_parse_isSet;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer::is_text_to_parse_Valid() const{
    return m_text_to_parse_isValid;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer::isTrim() const {
    return m_trim;
}
void OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer::setTrim(const bool &trim) {
    m_trim = trim;
    m_trim_isSet = true;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer::is_trim_Set() const{
    return m_trim_isSet;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer::is_trim_Valid() const{
    return m_trim_isValid;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_to_parse_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trim_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
