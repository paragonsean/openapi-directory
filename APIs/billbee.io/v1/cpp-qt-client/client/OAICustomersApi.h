/**
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomersApi_H
#define OAI_OAICustomersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBillbee_Interfaces_BillbeeAPI_Model_CreateCustomerApiModel.h"
#include "OAIBillbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel.h"
#include "OAIBillbee_Interfaces_BillbeeAPI_Model_CustomerApiModel.h"
#include "OAIObject.h"
#include "OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_.h"
#include "OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_CustomerApiModel_.h"
#include "OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Rechnungsdruck_WebApp_Controllers_Api_Order_.h"
#include "OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_.h"
#include "OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerApiModel_.h"
#include "OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Rechnungsdruck_WebApp_Controllers_Api_SearchController_SearchResultsModel_.h"
#include "OAIRechnungsdruck_WebApp_Controllers_Api_SearchController_SearchModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomersApi : public QObject {
    Q_OBJECT

public:
    OAICustomersApi(const int timeOut = 0);
    ~OAICustomersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_billbee_interfaces_billbee_api_model_customer_address_api_model OAIBillbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel [required]
    */
    virtual void customerAddCustomerAddress(const qint64 &id, const OAIBillbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel &oai_billbee_interfaces_billbee_api_model_customer_address_api_model);

    /**
    * @param[in]  oai_billbee_interfaces_billbee_api_model_create_customer_api_model OAIBillbee_Interfaces_BillbeeAPI_Model_CreateCustomerApiModel [required]
    */
    virtual void customerCreate(const OAIBillbee_Interfaces_BillbeeAPI_Model_CreateCustomerApiModel &oai_billbee_interfaces_billbee_api_model_create_customer_api_model);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void customerGetAll(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void customerGetCustomerAddress(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void customerGetCustomerAddresses(const qint64 &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void customerGetCustomerOrders(const qint64 &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void customerGetOne(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void customerPatchAddress(const qint64 &id, const OAIObject &body);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_billbee_interfaces_billbee_api_model_customer_api_model OAIBillbee_Interfaces_BillbeeAPI_Model_CustomerApiModel [required]
    */
    virtual void customerUpdate(const qint64 &id, const OAIBillbee_Interfaces_BillbeeAPI_Model_CustomerApiModel &oai_billbee_interfaces_billbee_api_model_customer_api_model);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_billbee_interfaces_billbee_api_model_customer_address_api_model OAIBillbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel [required]
    */
    virtual void customerUpdateAddress(const qint64 &id, const OAIBillbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel &oai_billbee_interfaces_billbee_api_model_customer_address_api_model);

    /**
    * @param[in]  oai_rechnungsdruck_web_app_controllers_api_search_controller_search_model OAIRechnungsdruck_WebApp_Controllers_Api_SearchController_SearchModel [required]
    */
    virtual void searchSearch(const OAIRechnungsdruck_WebApp_Controllers_Api_SearchController_SearchModel &oai_rechnungsdruck_web_app_controllers_api_search_controller_search_model);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void customerAddCustomerAddressCallback(OAIHttpRequestWorker *worker);
    void customerCreateCallback(OAIHttpRequestWorker *worker);
    void customerGetAllCallback(OAIHttpRequestWorker *worker);
    void customerGetCustomerAddressCallback(OAIHttpRequestWorker *worker);
    void customerGetCustomerAddressesCallback(OAIHttpRequestWorker *worker);
    void customerGetCustomerOrdersCallback(OAIHttpRequestWorker *worker);
    void customerGetOneCallback(OAIHttpRequestWorker *worker);
    void customerPatchAddressCallback(OAIHttpRequestWorker *worker);
    void customerUpdateCallback(OAIHttpRequestWorker *worker);
    void customerUpdateAddressCallback(OAIHttpRequestWorker *worker);
    void searchSearchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void customerAddCustomerAddressSignal(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary);
    void customerCreateSignal(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerApiModel_ summary);
    void customerGetAllSignal(OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_CustomerApiModel_ summary);
    void customerGetCustomerAddressSignal(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary);
    void customerGetCustomerAddressesSignal(OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary);
    void customerGetCustomerOrdersSignal(OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Rechnungsdruck_WebApp_Controllers_Api_Order_ summary);
    void customerGetOneSignal(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerApiModel_ summary);
    void customerPatchAddressSignal(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary);
    void customerUpdateSignal(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerApiModel_ summary);
    void customerUpdateAddressSignal(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary);
    void searchSearchSignal(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Rechnungsdruck_WebApp_Controllers_Api_SearchController_SearchResultsModel_ summary);


    void customerAddCustomerAddressSignalFull(OAIHttpRequestWorker *worker, OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary);
    void customerCreateSignalFull(OAIHttpRequestWorker *worker, OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerApiModel_ summary);
    void customerGetAllSignalFull(OAIHttpRequestWorker *worker, OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_CustomerApiModel_ summary);
    void customerGetCustomerAddressSignalFull(OAIHttpRequestWorker *worker, OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary);
    void customerGetCustomerAddressesSignalFull(OAIHttpRequestWorker *worker, OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary);
    void customerGetCustomerOrdersSignalFull(OAIHttpRequestWorker *worker, OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Rechnungsdruck_WebApp_Controllers_Api_Order_ summary);
    void customerGetOneSignalFull(OAIHttpRequestWorker *worker, OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerApiModel_ summary);
    void customerPatchAddressSignalFull(OAIHttpRequestWorker *worker, OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary);
    void customerUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerApiModel_ summary);
    void customerUpdateAddressSignalFull(OAIHttpRequestWorker *worker, OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary);
    void searchSearchSignalFull(OAIHttpRequestWorker *worker, OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Rechnungsdruck_WebApp_Controllers_Api_SearchController_SearchResultsModel_ summary);

    Q_DECL_DEPRECATED_X("Use customerAddCustomerAddressSignalError() instead")
    void customerAddCustomerAddressSignalE(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerAddCustomerAddressSignalError(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCreateSignalError() instead")
    void customerCreateSignalE(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerApiModel_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCreateSignalError(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerApiModel_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetAllSignalError() instead")
    void customerGetAllSignalE(OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_CustomerApiModel_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetAllSignalError(OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_CustomerApiModel_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetCustomerAddressSignalError() instead")
    void customerGetCustomerAddressSignalE(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetCustomerAddressSignalError(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetCustomerAddressesSignalError() instead")
    void customerGetCustomerAddressesSignalE(OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetCustomerAddressesSignalError(OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetCustomerOrdersSignalError() instead")
    void customerGetCustomerOrdersSignalE(OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Rechnungsdruck_WebApp_Controllers_Api_Order_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetCustomerOrdersSignalError(OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Rechnungsdruck_WebApp_Controllers_Api_Order_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetOneSignalError() instead")
    void customerGetOneSignalE(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerApiModel_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetOneSignalError(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerApiModel_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerPatchAddressSignalError() instead")
    void customerPatchAddressSignalE(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerPatchAddressSignalError(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerUpdateSignalError() instead")
    void customerUpdateSignalE(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerApiModel_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerUpdateSignalError(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerApiModel_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerUpdateAddressSignalError() instead")
    void customerUpdateAddressSignalE(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerUpdateAddressSignalError(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_CustomerAddressApiModel_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSearchSignalError() instead")
    void searchSearchSignalE(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Rechnungsdruck_WebApp_Controllers_Api_SearchController_SearchResultsModel_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSearchSignalError(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Rechnungsdruck_WebApp_Controllers_Api_SearchController_SearchResultsModel_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use customerAddCustomerAddressSignalErrorFull() instead")
    void customerAddCustomerAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerAddCustomerAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCreateSignalErrorFull() instead")
    void customerCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetAllSignalErrorFull() instead")
    void customerGetAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetCustomerAddressSignalErrorFull() instead")
    void customerGetCustomerAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetCustomerAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetCustomerAddressesSignalErrorFull() instead")
    void customerGetCustomerAddressesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetCustomerAddressesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetCustomerOrdersSignalErrorFull() instead")
    void customerGetCustomerOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetCustomerOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGetOneSignalErrorFull() instead")
    void customerGetOneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGetOneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerPatchAddressSignalErrorFull() instead")
    void customerPatchAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerPatchAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerUpdateSignalErrorFull() instead")
    void customerUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerUpdateAddressSignalErrorFull() instead")
    void customerUpdateAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerUpdateAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSearchSignalErrorFull() instead")
    void searchSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
