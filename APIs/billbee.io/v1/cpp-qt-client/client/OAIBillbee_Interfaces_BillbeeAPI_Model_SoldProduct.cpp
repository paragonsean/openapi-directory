/**
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct() {
    this->initializeModel();
}

OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::~OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct() {}

void OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::initializeModel() {

    m_billbee_id_isSet = false;
    m_billbee_id_isValid = false;

    m_country_of_origin_isSet = false;
    m_country_of_origin_isValid = false;

    m_ean_isSet = false;
    m_ean_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_is_digital_isSet = false;
    m_is_digital_isValid = false;

    m_old_id_isSet = false;
    m_old_id_isValid = false;

    m_platform_data_isSet = false;
    m_platform_data_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_sku_or_id_isSet = false;
    m_sku_or_id_isValid = false;

    m_taric_code_isSet = false;
    m_taric_code_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::fromJsonObject(QJsonObject json) {

    m_billbee_id_isValid = ::OpenAPI::fromJsonValue(m_billbee_id, json[QString("BillbeeId")]);
    m_billbee_id_isSet = !json[QString("BillbeeId")].isNull() && m_billbee_id_isValid;

    m_country_of_origin_isValid = ::OpenAPI::fromJsonValue(m_country_of_origin, json[QString("CountryOfOrigin")]);
    m_country_of_origin_isSet = !json[QString("CountryOfOrigin")].isNull() && m_country_of_origin_isValid;

    m_ean_isValid = ::OpenAPI::fromJsonValue(m_ean, json[QString("EAN")]);
    m_ean_isSet = !json[QString("EAN")].isNull() && m_ean_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("Images")]);
    m_images_isSet = !json[QString("Images")].isNull() && m_images_isValid;

    m_is_digital_isValid = ::OpenAPI::fromJsonValue(m_is_digital, json[QString("IsDigital")]);
    m_is_digital_isSet = !json[QString("IsDigital")].isNull() && m_is_digital_isValid;

    m_old_id_isValid = ::OpenAPI::fromJsonValue(m_old_id, json[QString("OldId")]);
    m_old_id_isSet = !json[QString("OldId")].isNull() && m_old_id_isValid;

    m_platform_data_isValid = ::OpenAPI::fromJsonValue(m_platform_data, json[QString("PlatformData")]);
    m_platform_data_isSet = !json[QString("PlatformData")].isNull() && m_platform_data_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("SKU")]);
    m_sku_isSet = !json[QString("SKU")].isNull() && m_sku_isValid;

    m_sku_or_id_isValid = ::OpenAPI::fromJsonValue(m_sku_or_id, json[QString("SkuOrId")]);
    m_sku_or_id_isSet = !json[QString("SkuOrId")].isNull() && m_sku_or_id_isValid;

    m_taric_code_isValid = ::OpenAPI::fromJsonValue(m_taric_code, json[QString("TARICCode")]);
    m_taric_code_isSet = !json[QString("TARICCode")].isNull() && m_taric_code_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("Weight")]);
    m_weight_isSet = !json[QString("Weight")].isNull() && m_weight_isValid;
}

QString OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::asJsonObject() const {
    QJsonObject obj;
    if (m_billbee_id_isSet) {
        obj.insert(QString("BillbeeId"), ::OpenAPI::toJsonValue(m_billbee_id));
    }
    if (m_country_of_origin_isSet) {
        obj.insert(QString("CountryOfOrigin"), ::OpenAPI::toJsonValue(m_country_of_origin));
    }
    if (m_ean_isSet) {
        obj.insert(QString("EAN"), ::OpenAPI::toJsonValue(m_ean));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("Images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_is_digital_isSet) {
        obj.insert(QString("IsDigital"), ::OpenAPI::toJsonValue(m_is_digital));
    }
    if (m_old_id_isSet) {
        obj.insert(QString("OldId"), ::OpenAPI::toJsonValue(m_old_id));
    }
    if (m_platform_data_isSet) {
        obj.insert(QString("PlatformData"), ::OpenAPI::toJsonValue(m_platform_data));
    }
    if (m_sku_isSet) {
        obj.insert(QString("SKU"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_sku_or_id_isSet) {
        obj.insert(QString("SkuOrId"), ::OpenAPI::toJsonValue(m_sku_or_id));
    }
    if (m_taric_code_isSet) {
        obj.insert(QString("TARICCode"), ::OpenAPI::toJsonValue(m_taric_code));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_weight_isSet) {
        obj.insert(QString("Weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

qint64 OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::getBillbeeId() const {
    return m_billbee_id;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::setBillbeeId(const qint64 &billbee_id) {
    m_billbee_id = billbee_id;
    m_billbee_id_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_billbee_id_Set() const{
    return m_billbee_id_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_billbee_id_Valid() const{
    return m_billbee_id_isValid;
}

QString OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::getCountryOfOrigin() const {
    return m_country_of_origin;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::setCountryOfOrigin(const QString &country_of_origin) {
    m_country_of_origin = country_of_origin;
    m_country_of_origin_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_country_of_origin_Set() const{
    return m_country_of_origin_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_country_of_origin_Valid() const{
    return m_country_of_origin_isValid;
}

QString OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::getEan() const {
    return m_ean;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::setEan(const QString &ean) {
    m_ean = ean;
    m_ean_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_ean_Set() const{
    return m_ean_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_ean_Valid() const{
    return m_ean_isValid;
}

QString OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::getId() const {
    return m_id;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIBillbee_Interfaces_BillbeeAPI_Model_ProductImage> OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::getImages() const {
    return m_images;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::setImages(const QList<OAIBillbee_Interfaces_BillbeeAPI_Model_ProductImage> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_images_Set() const{
    return m_images_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_images_Valid() const{
    return m_images_isValid;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::isIsDigital() const {
    return m_is_digital;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::setIsDigital(const bool &is_digital) {
    m_is_digital = is_digital;
    m_is_digital_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_is_digital_Set() const{
    return m_is_digital_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_is_digital_Valid() const{
    return m_is_digital_isValid;
}

QString OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::getOldId() const {
    return m_old_id;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::setOldId(const QString &old_id) {
    m_old_id = old_id;
    m_old_id_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_old_id_Set() const{
    return m_old_id_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_old_id_Valid() const{
    return m_old_id_isValid;
}

QString OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::getPlatformData() const {
    return m_platform_data;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::setPlatformData(const QString &platform_data) {
    m_platform_data = platform_data;
    m_platform_data_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_platform_data_Set() const{
    return m_platform_data_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_platform_data_Valid() const{
    return m_platform_data_isValid;
}

QString OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::getSku() const {
    return m_sku;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_sku_Valid() const{
    return m_sku_isValid;
}

QString OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::getSkuOrId() const {
    return m_sku_or_id;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::setSkuOrId(const QString &sku_or_id) {
    m_sku_or_id = sku_or_id;
    m_sku_or_id_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_sku_or_id_Set() const{
    return m_sku_or_id_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_sku_or_id_Valid() const{
    return m_sku_or_id_isValid;
}

QString OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::getTaricCode() const {
    return m_taric_code;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::setTaricCode(const QString &taric_code) {
    m_taric_code = taric_code;
    m_taric_code_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_taric_code_Set() const{
    return m_taric_code_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_taric_code_Valid() const{
    return m_taric_code_isValid;
}

QString OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::getTitle() const {
    return m_title;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_title_Set() const{
    return m_title_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_title_Valid() const{
    return m_title_isValid;
}

qint32 OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::getType() const {
    return m_type;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::setType(const qint32 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::getWeight() const {
    return m_weight;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billbee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_of_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_digital_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_or_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taric_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_SoldProduct::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
