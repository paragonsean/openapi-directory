/**
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags() {
    this->initializeModel();
}

OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::~OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags() {}

void OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::initializeModel() {

    m_customer_has_vat_id_isSet = false;
    m_customer_has_vat_id_isValid = false;

    m_eu_delivery_threshold_exceeded_isSet = false;
    m_eu_delivery_threshold_exceeded_isValid = false;

    m_is_distance_sale_isSet = false;
    m_is_distance_sale_isValid = false;

    m_order_distribution_country_is_empty_isSet = false;
    m_order_distribution_country_is_empty_isValid = false;

    m_oss_enabled_isSet = false;
    m_oss_enabled_isValid = false;

    m_rates_from_isSet = false;
    m_rates_from_isValid = false;

    m_seller_is_registered_in_dst_country_isSet = false;
    m_seller_is_registered_in_dst_country_isValid = false;

    m_set_igl_when_vat_id_is_available_enabled_isSet = false;
    m_set_igl_when_vat_id_is_available_enabled_isValid = false;

    m_src_country_is_equal_to_dst_country_isSet = false;
    m_src_country_is_equal_to_dst_country_isValid = false;

    m_third_party_country_isSet = false;
    m_third_party_country_isValid = false;

    m_user_profile_country_is_empty_isSet = false;
    m_user_profile_country_is_empty_isValid = false;

    m_vat_id_from_isSet = false;
    m_vat_id_from_isValid = false;
}

void OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::fromJsonObject(QJsonObject json) {

    m_customer_has_vat_id_isValid = ::OpenAPI::fromJsonValue(m_customer_has_vat_id, json[QString("CustomerHasVatId")]);
    m_customer_has_vat_id_isSet = !json[QString("CustomerHasVatId")].isNull() && m_customer_has_vat_id_isValid;

    m_eu_delivery_threshold_exceeded_isValid = ::OpenAPI::fromJsonValue(m_eu_delivery_threshold_exceeded, json[QString("EuDeliveryThresholdExceeded")]);
    m_eu_delivery_threshold_exceeded_isSet = !json[QString("EuDeliveryThresholdExceeded")].isNull() && m_eu_delivery_threshold_exceeded_isValid;

    m_is_distance_sale_isValid = ::OpenAPI::fromJsonValue(m_is_distance_sale, json[QString("IsDistanceSale")]);
    m_is_distance_sale_isSet = !json[QString("IsDistanceSale")].isNull() && m_is_distance_sale_isValid;

    m_order_distribution_country_is_empty_isValid = ::OpenAPI::fromJsonValue(m_order_distribution_country_is_empty, json[QString("OrderDistributionCountryIsEmpty")]);
    m_order_distribution_country_is_empty_isSet = !json[QString("OrderDistributionCountryIsEmpty")].isNull() && m_order_distribution_country_is_empty_isValid;

    m_oss_enabled_isValid = ::OpenAPI::fromJsonValue(m_oss_enabled, json[QString("OssEnabled")]);
    m_oss_enabled_isSet = !json[QString("OssEnabled")].isNull() && m_oss_enabled_isValid;

    m_rates_from_isValid = ::OpenAPI::fromJsonValue(m_rates_from, json[QString("RatesFrom")]);
    m_rates_from_isSet = !json[QString("RatesFrom")].isNull() && m_rates_from_isValid;

    m_seller_is_registered_in_dst_country_isValid = ::OpenAPI::fromJsonValue(m_seller_is_registered_in_dst_country, json[QString("SellerIsRegisteredInDstCountry")]);
    m_seller_is_registered_in_dst_country_isSet = !json[QString("SellerIsRegisteredInDstCountry")].isNull() && m_seller_is_registered_in_dst_country_isValid;

    m_set_igl_when_vat_id_is_available_enabled_isValid = ::OpenAPI::fromJsonValue(m_set_igl_when_vat_id_is_available_enabled, json[QString("SetIglWhenVatIdIsAvailableEnabled")]);
    m_set_igl_when_vat_id_is_available_enabled_isSet = !json[QString("SetIglWhenVatIdIsAvailableEnabled")].isNull() && m_set_igl_when_vat_id_is_available_enabled_isValid;

    m_src_country_is_equal_to_dst_country_isValid = ::OpenAPI::fromJsonValue(m_src_country_is_equal_to_dst_country, json[QString("SrcCountryIsEqualToDstCountry")]);
    m_src_country_is_equal_to_dst_country_isSet = !json[QString("SrcCountryIsEqualToDstCountry")].isNull() && m_src_country_is_equal_to_dst_country_isValid;

    m_third_party_country_isValid = ::OpenAPI::fromJsonValue(m_third_party_country, json[QString("ThirdPartyCountry")]);
    m_third_party_country_isSet = !json[QString("ThirdPartyCountry")].isNull() && m_third_party_country_isValid;

    m_user_profile_country_is_empty_isValid = ::OpenAPI::fromJsonValue(m_user_profile_country_is_empty, json[QString("UserProfileCountryIsEmpty")]);
    m_user_profile_country_is_empty_isSet = !json[QString("UserProfileCountryIsEmpty")].isNull() && m_user_profile_country_is_empty_isValid;

    m_vat_id_from_isValid = ::OpenAPI::fromJsonValue(m_vat_id_from, json[QString("VatIdFrom")]);
    m_vat_id_from_isSet = !json[QString("VatIdFrom")].isNull() && m_vat_id_from_isValid;
}

QString OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_has_vat_id_isSet) {
        obj.insert(QString("CustomerHasVatId"), ::OpenAPI::toJsonValue(m_customer_has_vat_id));
    }
    if (m_eu_delivery_threshold_exceeded_isSet) {
        obj.insert(QString("EuDeliveryThresholdExceeded"), ::OpenAPI::toJsonValue(m_eu_delivery_threshold_exceeded));
    }
    if (m_is_distance_sale_isSet) {
        obj.insert(QString("IsDistanceSale"), ::OpenAPI::toJsonValue(m_is_distance_sale));
    }
    if (m_order_distribution_country_is_empty_isSet) {
        obj.insert(QString("OrderDistributionCountryIsEmpty"), ::OpenAPI::toJsonValue(m_order_distribution_country_is_empty));
    }
    if (m_oss_enabled_isSet) {
        obj.insert(QString("OssEnabled"), ::OpenAPI::toJsonValue(m_oss_enabled));
    }
    if (m_rates_from_isSet) {
        obj.insert(QString("RatesFrom"), ::OpenAPI::toJsonValue(m_rates_from));
    }
    if (m_seller_is_registered_in_dst_country_isSet) {
        obj.insert(QString("SellerIsRegisteredInDstCountry"), ::OpenAPI::toJsonValue(m_seller_is_registered_in_dst_country));
    }
    if (m_set_igl_when_vat_id_is_available_enabled_isSet) {
        obj.insert(QString("SetIglWhenVatIdIsAvailableEnabled"), ::OpenAPI::toJsonValue(m_set_igl_when_vat_id_is_available_enabled));
    }
    if (m_src_country_is_equal_to_dst_country_isSet) {
        obj.insert(QString("SrcCountryIsEqualToDstCountry"), ::OpenAPI::toJsonValue(m_src_country_is_equal_to_dst_country));
    }
    if (m_third_party_country_isSet) {
        obj.insert(QString("ThirdPartyCountry"), ::OpenAPI::toJsonValue(m_third_party_country));
    }
    if (m_user_profile_country_is_empty_isSet) {
        obj.insert(QString("UserProfileCountryIsEmpty"), ::OpenAPI::toJsonValue(m_user_profile_country_is_empty));
    }
    if (m_vat_id_from_isSet) {
        obj.insert(QString("VatIdFrom"), ::OpenAPI::toJsonValue(m_vat_id_from));
    }
    return obj;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::isCustomerHasVatId() const {
    return m_customer_has_vat_id;
}
void OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::setCustomerHasVatId(const bool &customer_has_vat_id) {
    m_customer_has_vat_id = customer_has_vat_id;
    m_customer_has_vat_id_isSet = true;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::is_customer_has_vat_id_Set() const{
    return m_customer_has_vat_id_isSet;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::is_customer_has_vat_id_Valid() const{
    return m_customer_has_vat_id_isValid;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::isEuDeliveryThresholdExceeded() const {
    return m_eu_delivery_threshold_exceeded;
}
void OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::setEuDeliveryThresholdExceeded(const bool &eu_delivery_threshold_exceeded) {
    m_eu_delivery_threshold_exceeded = eu_delivery_threshold_exceeded;
    m_eu_delivery_threshold_exceeded_isSet = true;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::is_eu_delivery_threshold_exceeded_Set() const{
    return m_eu_delivery_threshold_exceeded_isSet;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::is_eu_delivery_threshold_exceeded_Valid() const{
    return m_eu_delivery_threshold_exceeded_isValid;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::isIsDistanceSale() const {
    return m_is_distance_sale;
}
void OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::setIsDistanceSale(const bool &is_distance_sale) {
    m_is_distance_sale = is_distance_sale;
    m_is_distance_sale_isSet = true;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::is_is_distance_sale_Set() const{
    return m_is_distance_sale_isSet;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::is_is_distance_sale_Valid() const{
    return m_is_distance_sale_isValid;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::isOrderDistributionCountryIsEmpty() const {
    return m_order_distribution_country_is_empty;
}
void OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::setOrderDistributionCountryIsEmpty(const bool &order_distribution_country_is_empty) {
    m_order_distribution_country_is_empty = order_distribution_country_is_empty;
    m_order_distribution_country_is_empty_isSet = true;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::is_order_distribution_country_is_empty_Set() const{
    return m_order_distribution_country_is_empty_isSet;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::is_order_distribution_country_is_empty_Valid() const{
    return m_order_distribution_country_is_empty_isValid;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::isOssEnabled() const {
    return m_oss_enabled;
}
void OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::setOssEnabled(const bool &oss_enabled) {
    m_oss_enabled = oss_enabled;
    m_oss_enabled_isSet = true;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::is_oss_enabled_Set() const{
    return m_oss_enabled_isSet;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::is_oss_enabled_Valid() const{
    return m_oss_enabled_isValid;
}

QString OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::getRatesFrom() const {
    return m_rates_from;
}
void OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::setRatesFrom(const QString &rates_from) {
    m_rates_from = rates_from;
    m_rates_from_isSet = true;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::is_rates_from_Set() const{
    return m_rates_from_isSet;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::is_rates_from_Valid() const{
    return m_rates_from_isValid;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::isSellerIsRegisteredInDstCountry() const {
    return m_seller_is_registered_in_dst_country;
}
void OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::setSellerIsRegisteredInDstCountry(const bool &seller_is_registered_in_dst_country) {
    m_seller_is_registered_in_dst_country = seller_is_registered_in_dst_country;
    m_seller_is_registered_in_dst_country_isSet = true;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::is_seller_is_registered_in_dst_country_Set() const{
    return m_seller_is_registered_in_dst_country_isSet;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::is_seller_is_registered_in_dst_country_Valid() const{
    return m_seller_is_registered_in_dst_country_isValid;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::isSetIglWhenVatIdIsAvailableEnabled() const {
    return m_set_igl_when_vat_id_is_available_enabled;
}
void OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::setSetIglWhenVatIdIsAvailableEnabled(const bool &set_igl_when_vat_id_is_available_enabled) {
    m_set_igl_when_vat_id_is_available_enabled = set_igl_when_vat_id_is_available_enabled;
    m_set_igl_when_vat_id_is_available_enabled_isSet = true;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::is_set_igl_when_vat_id_is_available_enabled_Set() const{
    return m_set_igl_when_vat_id_is_available_enabled_isSet;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::is_set_igl_when_vat_id_is_available_enabled_Valid() const{
    return m_set_igl_when_vat_id_is_available_enabled_isValid;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::isSrcCountryIsEqualToDstCountry() const {
    return m_src_country_is_equal_to_dst_country;
}
void OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::setSrcCountryIsEqualToDstCountry(const bool &src_country_is_equal_to_dst_country) {
    m_src_country_is_equal_to_dst_country = src_country_is_equal_to_dst_country;
    m_src_country_is_equal_to_dst_country_isSet = true;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::is_src_country_is_equal_to_dst_country_Set() const{
    return m_src_country_is_equal_to_dst_country_isSet;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::is_src_country_is_equal_to_dst_country_Valid() const{
    return m_src_country_is_equal_to_dst_country_isValid;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::isThirdPartyCountry() const {
    return m_third_party_country;
}
void OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::setThirdPartyCountry(const bool &third_party_country) {
    m_third_party_country = third_party_country;
    m_third_party_country_isSet = true;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::is_third_party_country_Set() const{
    return m_third_party_country_isSet;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::is_third_party_country_Valid() const{
    return m_third_party_country_isValid;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::isUserProfileCountryIsEmpty() const {
    return m_user_profile_country_is_empty;
}
void OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::setUserProfileCountryIsEmpty(const bool &user_profile_country_is_empty) {
    m_user_profile_country_is_empty = user_profile_country_is_empty;
    m_user_profile_country_is_empty_isSet = true;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::is_user_profile_country_is_empty_Set() const{
    return m_user_profile_country_is_empty_isSet;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::is_user_profile_country_is_empty_Valid() const{
    return m_user_profile_country_is_empty_isValid;
}

QString OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::getVatIdFrom() const {
    return m_vat_id_from;
}
void OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::setVatIdFrom(const QString &vat_id_from) {
    m_vat_id_from = vat_id_from;
    m_vat_id_from_isSet = true;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::is_vat_id_from_Set() const{
    return m_vat_id_from_isSet;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::is_vat_id_from_Valid() const{
    return m_vat_id_from_isValid;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_has_vat_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eu_delivery_threshold_exceeded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_distance_sale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_distribution_country_is_empty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oss_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rates_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_is_registered_in_dst_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_igl_when_vat_id_is_available_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_src_country_is_equal_to_dst_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_profile_country_is_empty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_id_from_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
