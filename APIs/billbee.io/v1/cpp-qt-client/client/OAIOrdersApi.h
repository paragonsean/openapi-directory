/**
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrdersApi_H
#define OAI_OAIOrdersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBillbee_Interfaces_BillbeeAPI_Model_Order.h"
#include "OAIObject.h"
#include "OAIRechnungsdruck_WebApp_Controllers_Api_ApiAddShipmentToOrderModel.h"
#include "OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_InvoiceApiModel_.h"
#include "OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_Order_.h"
#include "OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_Order_.h"
#include "OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Rechnungsdruck_WebApp_Controllers_Api_Invoice_.h"
#include "OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Rechnungsdruck_WebApp_Controllers_Api_SearchController_SearchResultsModel_.h"
#include "OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Models_LayoutTemplate_.h"
#include "OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer.h"
#include "OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_SendMessageModel.h"
#include "OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_TriggerEventContainer.h"
#include "OAIRechnungsdruck_WebApp_Controllers_Api_OrderStateUpdate.h"
#include "OAIRechnungsdruck_WebApp_Controllers_Api_OrderTagCreate.h"
#include "OAIRechnungsdruck_WebApp_Controllers_Api_SearchController_SearchModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrdersApi : public QObject {
    Q_OBJECT

public:
    OAIOrdersApi(const int timeOut = 0);
    ~OAIOrdersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void layoutApiGetList();

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_rechnungsdruck_web_app_controllers_api_api_add_shipment_to_order_model OAIRechnungsdruck_WebApp_Controllers_Api_ApiAddShipmentToOrderModel [required]
    */
    virtual void orderApiAddShipment(const qint64 &id, const OAIRechnungsdruck_WebApp_Controllers_Api_ApiAddShipmentToOrderModel &oai_rechnungsdruck_web_app_controllers_api_api_add_shipment_to_order_model);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  include_pdf bool [optional]
    * @param[in]  send_to_cloud_id qint64 [optional]
    */
    virtual void orderApiCreateDeliveryNote(const qint64 &id, const ::OpenAPI::OptionalParam<bool> &include_pdf = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &send_to_cloud_id = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  include_invoice_pdf bool [optional]
    * @param[in]  template_id qint64 [optional]
    * @param[in]  send_to_cloud_id qint64 [optional]
    */
    virtual void orderApiCreateInvoice(const qint64 &id, const ::OpenAPI::OptionalParam<bool> &include_invoice_pdf = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &template_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &send_to_cloud_id = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  partner QString [required]
    */
    Q_DECL_DEPRECATED virtual void orderApiFind(const QString &id, const QString &partner);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  article_title_source qint32 [optional]
    */
    virtual void orderApiGet(const qint64 &id, const ::OpenAPI::OptionalParam<qint32> &article_title_source = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  ext_ref QString [required]
    */
    virtual void orderApiGetByExtRef(const QString &ext_ref);

    /**
    * @param[in]  min_invoice_date QDateTime [optional]
    * @param[in]  max_invoice_date QDateTime [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  shop_id QList<qint64> [optional]
    * @param[in]  order_state_id QList<qint32> [optional]
    * @param[in]  tag QList<QString> [optional]
    * @param[in]  min_pay_date QDateTime [optional]
    * @param[in]  max_pay_date QDateTime [optional]
    * @param[in]  include_positions bool [optional]
    * @param[in]  exclude_tags bool [optional]
    */
    virtual void orderApiGetInvoiceList(const ::OpenAPI::OptionalParam<QDateTime> &min_invoice_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &max_invoice_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint64>> &shop_id = ::OpenAPI::OptionalParam<QList<qint64>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &order_state_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &min_pay_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &max_pay_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &include_positions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_tags = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  min_order_date QDateTime [optional]
    * @param[in]  max_order_date QDateTime [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  shop_id QList<qint64> [optional]
    * @param[in]  order_state_id QList<qint32> [optional]
    * @param[in]  tag QList<QString> [optional]
    * @param[in]  minimum_bill_bee_order_id qint64 [optional]
    * @param[in]  modified_at_min QDateTime [optional]
    * @param[in]  modified_at_max QDateTime [optional]
    * @param[in]  article_title_source qint32 [optional]
    * @param[in]  exclude_tags bool [optional]
    */
    virtual void orderApiGetList(const ::OpenAPI::OptionalParam<QDateTime> &min_order_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &max_order_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint64>> &shop_id = ::OpenAPI::OptionalParam<QList<qint64>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &order_state_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint64> &minimum_bill_bee_order_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QDateTime> &modified_at_min = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &modified_at_max = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &article_title_source = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &exclude_tags = ::OpenAPI::OptionalParam<bool>());


    virtual void orderApiGetPatchableFields();

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_rechnungsdruck_web_app_controllers_api_order_api_controller_parse_text_container OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer [required]
    */
    virtual void orderApiParsePlaceholders(const qint64 &id, const OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_ParseTextContainer &oai_rechnungsdruck_web_app_controllers_api_order_api_controller_parse_text_container);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void orderApiPatchOrder(const qint64 &id, const OAIObject &body);

    /**
    * @param[in]  oai_billbee_interfaces_billbee_api_model_order OAIBillbee_Interfaces_BillbeeAPI_Model_Order [required]
    * @param[in]  shop_id qint64 [optional]
    */
    virtual void orderApiPostNewOrder(const OAIBillbee_Interfaces_BillbeeAPI_Model_Order &oai_billbee_interfaces_billbee_api_model_order, const ::OpenAPI::OptionalParam<qint64> &shop_id = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_rechnungsdruck_web_app_controllers_api_order_api_controller_send_message_model OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_SendMessageModel [required]
    */
    virtual void orderApiSendMessage(const qint64 &id, const OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_SendMessageModel &oai_rechnungsdruck_web_app_controllers_api_order_api_controller_send_message_model);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_rechnungsdruck_web_app_controllers_api_order_tag_create OAIRechnungsdruck_WebApp_Controllers_Api_OrderTagCreate [required]
    */
    virtual void orderApiTagsCreate(const qint64 &id, const OAIRechnungsdruck_WebApp_Controllers_Api_OrderTagCreate &oai_rechnungsdruck_web_app_controllers_api_order_tag_create);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_rechnungsdruck_web_app_controllers_api_order_tag_create OAIRechnungsdruck_WebApp_Controllers_Api_OrderTagCreate [required]
    */
    virtual void orderApiTagsUpdate(const qint64 &id, const OAIRechnungsdruck_WebApp_Controllers_Api_OrderTagCreate &oai_rechnungsdruck_web_app_controllers_api_order_tag_create);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_rechnungsdruck_web_app_controllers_api_order_api_controller_trigger_event_container OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_TriggerEventContainer [required]
    */
    virtual void orderApiTriggerEvent(const qint64 &id, const OAIRechnungsdruck_WebApp_Controllers_Api_OrderApiController_TriggerEventContainer &oai_rechnungsdruck_web_app_controllers_api_order_api_controller_trigger_event_container);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_rechnungsdruck_web_app_controllers_api_order_state_update OAIRechnungsdruck_WebApp_Controllers_Api_OrderStateUpdate [required]
    */
    virtual void orderApiUpdateState(const qint64 &id, const OAIRechnungsdruck_WebApp_Controllers_Api_OrderStateUpdate &oai_rechnungsdruck_web_app_controllers_api_order_state_update);

    /**
    * @param[in]  oai_rechnungsdruck_web_app_controllers_api_search_controller_search_model OAIRechnungsdruck_WebApp_Controllers_Api_SearchController_SearchModel [required]
    */
    virtual void searchSearch(const OAIRechnungsdruck_WebApp_Controllers_Api_SearchController_SearchModel &oai_rechnungsdruck_web_app_controllers_api_search_controller_search_model);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void layoutApiGetListCallback(OAIHttpRequestWorker *worker);
    void orderApiAddShipmentCallback(OAIHttpRequestWorker *worker);
    void orderApiCreateDeliveryNoteCallback(OAIHttpRequestWorker *worker);
    void orderApiCreateInvoiceCallback(OAIHttpRequestWorker *worker);
    void orderApiFindCallback(OAIHttpRequestWorker *worker);
    void orderApiGetCallback(OAIHttpRequestWorker *worker);
    void orderApiGetByExtRefCallback(OAIHttpRequestWorker *worker);
    void orderApiGetInvoiceListCallback(OAIHttpRequestWorker *worker);
    void orderApiGetListCallback(OAIHttpRequestWorker *worker);
    void orderApiGetPatchableFieldsCallback(OAIHttpRequestWorker *worker);
    void orderApiParsePlaceholdersCallback(OAIHttpRequestWorker *worker);
    void orderApiPatchOrderCallback(OAIHttpRequestWorker *worker);
    void orderApiPostNewOrderCallback(OAIHttpRequestWorker *worker);
    void orderApiSendMessageCallback(OAIHttpRequestWorker *worker);
    void orderApiTagsCreateCallback(OAIHttpRequestWorker *worker);
    void orderApiTagsUpdateCallback(OAIHttpRequestWorker *worker);
    void orderApiTriggerEventCallback(OAIHttpRequestWorker *worker);
    void orderApiUpdateStateCallback(OAIHttpRequestWorker *worker);
    void searchSearchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void layoutApiGetListSignal(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Models_LayoutTemplate_ summary);
    void orderApiAddShipmentSignal(OAIObject summary);
    void orderApiCreateDeliveryNoteSignal(OAIObject summary);
    void orderApiCreateInvoiceSignal(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Rechnungsdruck_WebApp_Controllers_Api_Invoice_ summary);
    void orderApiFindSignal(OAIObject summary);
    void orderApiGetSignal(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_Order_ summary);
    void orderApiGetByExtRefSignal(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_Order_ summary);
    void orderApiGetInvoiceListSignal(OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_InvoiceApiModel_ summary);
    void orderApiGetListSignal(OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_Order_ summary);
    void orderApiGetPatchableFieldsSignal(OAIObject summary);
    void orderApiParsePlaceholdersSignal(OAIObject summary);
    void orderApiPatchOrderSignal(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_Order_ summary);
    void orderApiPostNewOrderSignal(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_Order_ summary);
    void orderApiSendMessageSignal(OAIObject summary);
    void orderApiTagsCreateSignal(OAIObject summary);
    void orderApiTagsUpdateSignal(OAIObject summary);
    void orderApiTriggerEventSignal(OAIObject summary);
    void orderApiUpdateStateSignal(OAIObject summary);
    void searchSearchSignal(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Rechnungsdruck_WebApp_Controllers_Api_SearchController_SearchResultsModel_ summary);


    void layoutApiGetListSignalFull(OAIHttpRequestWorker *worker, OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Models_LayoutTemplate_ summary);
    void orderApiAddShipmentSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void orderApiCreateDeliveryNoteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void orderApiCreateInvoiceSignalFull(OAIHttpRequestWorker *worker, OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Rechnungsdruck_WebApp_Controllers_Api_Invoice_ summary);
    void orderApiFindSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void orderApiGetSignalFull(OAIHttpRequestWorker *worker, OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_Order_ summary);
    void orderApiGetByExtRefSignalFull(OAIHttpRequestWorker *worker, OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_Order_ summary);
    void orderApiGetInvoiceListSignalFull(OAIHttpRequestWorker *worker, OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_InvoiceApiModel_ summary);
    void orderApiGetListSignalFull(OAIHttpRequestWorker *worker, OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_Order_ summary);
    void orderApiGetPatchableFieldsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void orderApiParsePlaceholdersSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void orderApiPatchOrderSignalFull(OAIHttpRequestWorker *worker, OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_Order_ summary);
    void orderApiPostNewOrderSignalFull(OAIHttpRequestWorker *worker, OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_Order_ summary);
    void orderApiSendMessageSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void orderApiTagsCreateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void orderApiTagsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void orderApiTriggerEventSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void orderApiUpdateStateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void searchSearchSignalFull(OAIHttpRequestWorker *worker, OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Rechnungsdruck_WebApp_Controllers_Api_SearchController_SearchResultsModel_ summary);

    Q_DECL_DEPRECATED_X("Use layoutApiGetListSignalError() instead")
    void layoutApiGetListSignalE(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Models_LayoutTemplate_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void layoutApiGetListSignalError(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Models_LayoutTemplate_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiAddShipmentSignalError() instead")
    void orderApiAddShipmentSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiAddShipmentSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiCreateDeliveryNoteSignalError() instead")
    void orderApiCreateDeliveryNoteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiCreateDeliveryNoteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiCreateInvoiceSignalError() instead")
    void orderApiCreateInvoiceSignalE(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Rechnungsdruck_WebApp_Controllers_Api_Invoice_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiCreateInvoiceSignalError(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Rechnungsdruck_WebApp_Controllers_Api_Invoice_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiFindSignalError() instead")
    void orderApiFindSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiFindSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiGetSignalError() instead")
    void orderApiGetSignalE(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_Order_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiGetSignalError(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_Order_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiGetByExtRefSignalError() instead")
    void orderApiGetByExtRefSignalE(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_Order_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiGetByExtRefSignalError(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_Order_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiGetInvoiceListSignalError() instead")
    void orderApiGetInvoiceListSignalE(OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_InvoiceApiModel_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiGetInvoiceListSignalError(OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_InvoiceApiModel_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiGetListSignalError() instead")
    void orderApiGetListSignalE(OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_Order_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiGetListSignalError(OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_Order_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiGetPatchableFieldsSignalError() instead")
    void orderApiGetPatchableFieldsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiGetPatchableFieldsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiParsePlaceholdersSignalError() instead")
    void orderApiParsePlaceholdersSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiParsePlaceholdersSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiPatchOrderSignalError() instead")
    void orderApiPatchOrderSignalE(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_Order_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiPatchOrderSignalError(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_Order_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiPostNewOrderSignalError() instead")
    void orderApiPostNewOrderSignalE(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_Order_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiPostNewOrderSignalError(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Billbee_Interfaces_BillbeeAPI_Model_Order_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiSendMessageSignalError() instead")
    void orderApiSendMessageSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiSendMessageSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiTagsCreateSignalError() instead")
    void orderApiTagsCreateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiTagsCreateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiTagsUpdateSignalError() instead")
    void orderApiTagsUpdateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiTagsUpdateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiTriggerEventSignalError() instead")
    void orderApiTriggerEventSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiTriggerEventSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiUpdateStateSignalError() instead")
    void orderApiUpdateStateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiUpdateStateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSearchSignalError() instead")
    void searchSearchSignalE(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Rechnungsdruck_WebApp_Controllers_Api_SearchController_SearchResultsModel_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSearchSignalError(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Rechnungsdruck_WebApp_Controllers_Api_SearchController_SearchResultsModel_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use layoutApiGetListSignalErrorFull() instead")
    void layoutApiGetListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void layoutApiGetListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiAddShipmentSignalErrorFull() instead")
    void orderApiAddShipmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiAddShipmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiCreateDeliveryNoteSignalErrorFull() instead")
    void orderApiCreateDeliveryNoteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiCreateDeliveryNoteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiCreateInvoiceSignalErrorFull() instead")
    void orderApiCreateInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiCreateInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiFindSignalErrorFull() instead")
    void orderApiFindSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiFindSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiGetSignalErrorFull() instead")
    void orderApiGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiGetByExtRefSignalErrorFull() instead")
    void orderApiGetByExtRefSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiGetByExtRefSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiGetInvoiceListSignalErrorFull() instead")
    void orderApiGetInvoiceListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiGetInvoiceListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiGetListSignalErrorFull() instead")
    void orderApiGetListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiGetListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiGetPatchableFieldsSignalErrorFull() instead")
    void orderApiGetPatchableFieldsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiGetPatchableFieldsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiParsePlaceholdersSignalErrorFull() instead")
    void orderApiParsePlaceholdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiParsePlaceholdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiPatchOrderSignalErrorFull() instead")
    void orderApiPatchOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiPatchOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiPostNewOrderSignalErrorFull() instead")
    void orderApiPostNewOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiPostNewOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiSendMessageSignalErrorFull() instead")
    void orderApiSendMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiSendMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiTagsCreateSignalErrorFull() instead")
    void orderApiTagsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiTagsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiTagsUpdateSignalErrorFull() instead")
    void orderApiTagsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiTagsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiTriggerEventSignalErrorFull() instead")
    void orderApiTriggerEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiTriggerEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderApiUpdateStateSignalErrorFull() instead")
    void orderApiUpdateStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderApiUpdateStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSearchSignalErrorFull() instead")
    void searchSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
