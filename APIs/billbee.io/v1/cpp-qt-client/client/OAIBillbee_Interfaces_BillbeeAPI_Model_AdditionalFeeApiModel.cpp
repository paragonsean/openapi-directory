/**
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel() {
    this->initializeModel();
}

OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::~OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel() {}

void OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::initializeModel() {

    m_gross_isSet = false;
    m_gross_isValid = false;

    m_net_isSet = false;
    m_net_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vat_amount_isSet = false;
    m_vat_amount_isValid = false;

    m_vat_rate_isSet = false;
    m_vat_rate_isValid = false;
}

void OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::fromJsonObject(QJsonObject json) {

    m_gross_isValid = ::OpenAPI::fromJsonValue(m_gross, json[QString("Gross")]);
    m_gross_isSet = !json[QString("Gross")].isNull() && m_gross_isValid;

    m_net_isValid = ::OpenAPI::fromJsonValue(m_net, json[QString("Net")]);
    m_net_isSet = !json[QString("Net")].isNull() && m_net_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_vat_amount_isValid = ::OpenAPI::fromJsonValue(m_vat_amount, json[QString("VatAmount")]);
    m_vat_amount_isSet = !json[QString("VatAmount")].isNull() && m_vat_amount_isValid;

    m_vat_rate_isValid = ::OpenAPI::fromJsonValue(m_vat_rate, json[QString("VatRate")]);
    m_vat_rate_isSet = !json[QString("VatRate")].isNull() && m_vat_rate_isValid;
}

QString OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::asJsonObject() const {
    QJsonObject obj;
    if (m_gross_isSet) {
        obj.insert(QString("Gross"), ::OpenAPI::toJsonValue(m_gross));
    }
    if (m_net_isSet) {
        obj.insert(QString("Net"), ::OpenAPI::toJsonValue(m_net));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vat_amount_isSet) {
        obj.insert(QString("VatAmount"), ::OpenAPI::toJsonValue(m_vat_amount));
    }
    if (m_vat_rate_isSet) {
        obj.insert(QString("VatRate"), ::OpenAPI::toJsonValue(m_vat_rate));
    }
    return obj;
}

double OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::getGross() const {
    return m_gross;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::setGross(const double &gross) {
    m_gross = gross;
    m_gross_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::is_gross_Set() const{
    return m_gross_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::is_gross_Valid() const{
    return m_gross_isValid;
}

double OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::getNet() const {
    return m_net;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::setNet(const double &net) {
    m_net = net;
    m_net_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::is_net_Set() const{
    return m_net_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::is_net_Valid() const{
    return m_net_isValid;
}

QString OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::getType() const {
    return m_type;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::is_type_Valid() const{
    return m_type_isValid;
}

double OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::getVatAmount() const {
    return m_vat_amount;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::setVatAmount(const double &vat_amount) {
    m_vat_amount = vat_amount;
    m_vat_amount_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::is_vat_amount_Set() const{
    return m_vat_amount_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::is_vat_amount_Valid() const{
    return m_vat_amount_isValid;
}

double OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::getVatRate() const {
    return m_vat_rate;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::setVatRate(const double &vat_rate) {
    m_vat_rate = vat_rate;
    m_vat_rate_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::is_vat_rate_Set() const{
    return m_vat_rate_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::is_vat_rate_Valid() const{
    return m_vat_rate_isValid;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gross_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_AdditionalFeeApiModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
