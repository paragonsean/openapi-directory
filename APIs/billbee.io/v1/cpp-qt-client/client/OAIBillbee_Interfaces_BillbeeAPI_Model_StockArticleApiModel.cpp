/**
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel() {
    this->initializeModel();
}

OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::~OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel() {}

void OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_stock_code_isSet = false;
    m_stock_code_isValid = false;

    m_stock_current_isSet = false;
    m_stock_current_isValid = false;

    m_stock_desired_isSet = false;
    m_stock_desired_isValid = false;

    m_stock_id_isSet = false;
    m_stock_id_isValid = false;

    m_stock_warning_isSet = false;
    m_stock_warning_isValid = false;

    m_unfulfilled_amount_isSet = false;
    m_unfulfilled_amount_isValid = false;
}

void OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_stock_code_isValid = ::OpenAPI::fromJsonValue(m_stock_code, json[QString("StockCode")]);
    m_stock_code_isSet = !json[QString("StockCode")].isNull() && m_stock_code_isValid;

    m_stock_current_isValid = ::OpenAPI::fromJsonValue(m_stock_current, json[QString("StockCurrent")]);
    m_stock_current_isSet = !json[QString("StockCurrent")].isNull() && m_stock_current_isValid;

    m_stock_desired_isValid = ::OpenAPI::fromJsonValue(m_stock_desired, json[QString("StockDesired")]);
    m_stock_desired_isSet = !json[QString("StockDesired")].isNull() && m_stock_desired_isValid;

    m_stock_id_isValid = ::OpenAPI::fromJsonValue(m_stock_id, json[QString("StockId")]);
    m_stock_id_isSet = !json[QString("StockId")].isNull() && m_stock_id_isValid;

    m_stock_warning_isValid = ::OpenAPI::fromJsonValue(m_stock_warning, json[QString("StockWarning")]);
    m_stock_warning_isSet = !json[QString("StockWarning")].isNull() && m_stock_warning_isValid;

    m_unfulfilled_amount_isValid = ::OpenAPI::fromJsonValue(m_unfulfilled_amount, json[QString("UnfulfilledAmount")]);
    m_unfulfilled_amount_isSet = !json[QString("UnfulfilledAmount")].isNull() && m_unfulfilled_amount_isValid;
}

QString OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_stock_code_isSet) {
        obj.insert(QString("StockCode"), ::OpenAPI::toJsonValue(m_stock_code));
    }
    if (m_stock_current_isSet) {
        obj.insert(QString("StockCurrent"), ::OpenAPI::toJsonValue(m_stock_current));
    }
    if (m_stock_desired_isSet) {
        obj.insert(QString("StockDesired"), ::OpenAPI::toJsonValue(m_stock_desired));
    }
    if (m_stock_id_isSet) {
        obj.insert(QString("StockId"), ::OpenAPI::toJsonValue(m_stock_id));
    }
    if (m_stock_warning_isSet) {
        obj.insert(QString("StockWarning"), ::OpenAPI::toJsonValue(m_stock_warning));
    }
    if (m_unfulfilled_amount_isSet) {
        obj.insert(QString("UnfulfilledAmount"), ::OpenAPI::toJsonValue(m_unfulfilled_amount));
    }
    return obj;
}

QString OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::getName() const {
    return m_name;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::getStockCode() const {
    return m_stock_code;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::setStockCode(const QString &stock_code) {
    m_stock_code = stock_code;
    m_stock_code_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::is_stock_code_Set() const{
    return m_stock_code_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::is_stock_code_Valid() const{
    return m_stock_code_isValid;
}

double OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::getStockCurrent() const {
    return m_stock_current;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::setStockCurrent(const double &stock_current) {
    m_stock_current = stock_current;
    m_stock_current_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::is_stock_current_Set() const{
    return m_stock_current_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::is_stock_current_Valid() const{
    return m_stock_current_isValid;
}

double OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::getStockDesired() const {
    return m_stock_desired;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::setStockDesired(const double &stock_desired) {
    m_stock_desired = stock_desired;
    m_stock_desired_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::is_stock_desired_Set() const{
    return m_stock_desired_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::is_stock_desired_Valid() const{
    return m_stock_desired_isValid;
}

qint64 OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::getStockId() const {
    return m_stock_id;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::setStockId(const qint64 &stock_id) {
    m_stock_id = stock_id;
    m_stock_id_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::is_stock_id_Set() const{
    return m_stock_id_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::is_stock_id_Valid() const{
    return m_stock_id_isValid;
}

double OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::getStockWarning() const {
    return m_stock_warning;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::setStockWarning(const double &stock_warning) {
    m_stock_warning = stock_warning;
    m_stock_warning_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::is_stock_warning_Set() const{
    return m_stock_warning_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::is_stock_warning_Valid() const{
    return m_stock_warning_isValid;
}

double OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::getUnfulfilledAmount() const {
    return m_unfulfilled_amount;
}
void OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::setUnfulfilledAmount(const double &unfulfilled_amount) {
    m_unfulfilled_amount = unfulfilled_amount;
    m_unfulfilled_amount_isSet = true;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::is_unfulfilled_amount_Set() const{
    return m_unfulfilled_amount_isSet;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::is_unfulfilled_amount_Valid() const{
    return m_unfulfilled_amount_isValid;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_desired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_warning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unfulfilled_amount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBillbee_Interfaces_BillbeeAPI_Model_StockArticleApiModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
