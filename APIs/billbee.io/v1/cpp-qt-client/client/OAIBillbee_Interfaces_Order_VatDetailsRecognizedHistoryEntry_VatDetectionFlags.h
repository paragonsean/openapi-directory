/**
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags.h
 *
 * 
 */

#ifndef OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags_H
#define OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags : public OAIObject {
public:
    OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags();
    OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags(QString json);
    ~OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isCustomerHasVatId() const;
    void setCustomerHasVatId(const bool &customer_has_vat_id);
    bool is_customer_has_vat_id_Set() const;
    bool is_customer_has_vat_id_Valid() const;

    bool isEuDeliveryThresholdExceeded() const;
    void setEuDeliveryThresholdExceeded(const bool &eu_delivery_threshold_exceeded);
    bool is_eu_delivery_threshold_exceeded_Set() const;
    bool is_eu_delivery_threshold_exceeded_Valid() const;

    bool isIsDistanceSale() const;
    void setIsDistanceSale(const bool &is_distance_sale);
    bool is_is_distance_sale_Set() const;
    bool is_is_distance_sale_Valid() const;

    bool isOrderDistributionCountryIsEmpty() const;
    void setOrderDistributionCountryIsEmpty(const bool &order_distribution_country_is_empty);
    bool is_order_distribution_country_is_empty_Set() const;
    bool is_order_distribution_country_is_empty_Valid() const;

    bool isOssEnabled() const;
    void setOssEnabled(const bool &oss_enabled);
    bool is_oss_enabled_Set() const;
    bool is_oss_enabled_Valid() const;

    QString getRatesFrom() const;
    void setRatesFrom(const QString &rates_from);
    bool is_rates_from_Set() const;
    bool is_rates_from_Valid() const;

    bool isSellerIsRegisteredInDstCountry() const;
    void setSellerIsRegisteredInDstCountry(const bool &seller_is_registered_in_dst_country);
    bool is_seller_is_registered_in_dst_country_Set() const;
    bool is_seller_is_registered_in_dst_country_Valid() const;

    bool isSetIglWhenVatIdIsAvailableEnabled() const;
    void setSetIglWhenVatIdIsAvailableEnabled(const bool &set_igl_when_vat_id_is_available_enabled);
    bool is_set_igl_when_vat_id_is_available_enabled_Set() const;
    bool is_set_igl_when_vat_id_is_available_enabled_Valid() const;

    bool isSrcCountryIsEqualToDstCountry() const;
    void setSrcCountryIsEqualToDstCountry(const bool &src_country_is_equal_to_dst_country);
    bool is_src_country_is_equal_to_dst_country_Set() const;
    bool is_src_country_is_equal_to_dst_country_Valid() const;

    bool isThirdPartyCountry() const;
    void setThirdPartyCountry(const bool &third_party_country);
    bool is_third_party_country_Set() const;
    bool is_third_party_country_Valid() const;

    bool isUserProfileCountryIsEmpty() const;
    void setUserProfileCountryIsEmpty(const bool &user_profile_country_is_empty);
    bool is_user_profile_country_is_empty_Set() const;
    bool is_user_profile_country_is_empty_Valid() const;

    QString getVatIdFrom() const;
    void setVatIdFrom(const QString &vat_id_from);
    bool is_vat_id_from_Set() const;
    bool is_vat_id_from_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_customer_has_vat_id;
    bool m_customer_has_vat_id_isSet;
    bool m_customer_has_vat_id_isValid;

    bool m_eu_delivery_threshold_exceeded;
    bool m_eu_delivery_threshold_exceeded_isSet;
    bool m_eu_delivery_threshold_exceeded_isValid;

    bool m_is_distance_sale;
    bool m_is_distance_sale_isSet;
    bool m_is_distance_sale_isValid;

    bool m_order_distribution_country_is_empty;
    bool m_order_distribution_country_is_empty_isSet;
    bool m_order_distribution_country_is_empty_isValid;

    bool m_oss_enabled;
    bool m_oss_enabled_isSet;
    bool m_oss_enabled_isValid;

    QString m_rates_from;
    bool m_rates_from_isSet;
    bool m_rates_from_isValid;

    bool m_seller_is_registered_in_dst_country;
    bool m_seller_is_registered_in_dst_country_isSet;
    bool m_seller_is_registered_in_dst_country_isValid;

    bool m_set_igl_when_vat_id_is_available_enabled;
    bool m_set_igl_when_vat_id_is_available_enabled_isSet;
    bool m_set_igl_when_vat_id_is_available_enabled_isValid;

    bool m_src_country_is_equal_to_dst_country;
    bool m_src_country_is_equal_to_dst_country_isSet;
    bool m_src_country_is_equal_to_dst_country_isValid;

    bool m_third_party_country;
    bool m_third_party_country_isSet;
    bool m_third_party_country_isValid;

    bool m_user_profile_country_is_empty;
    bool m_user_profile_country_is_empty_isSet;
    bool m_user_profile_country_is_empty_isValid;

    QString m_vat_id_from;
    bool m_vat_id_from_isSet;
    bool m_vat_id_from_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags)

#endif // OAIBillbee_Interfaces_Order_VatDetailsRecognizedHistoryEntry_VatDetectionFlags_H
