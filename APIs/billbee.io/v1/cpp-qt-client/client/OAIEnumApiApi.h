/**
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEnumApiApi_H
#define OAI_OAIEnumApiApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEnumApiApi : public QObject {
    Q_OBJECT

public:
    OAIEnumApiApi(const int timeOut = 0);
    ~OAIEnumApiApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void enumApiGetOrderStates();


    virtual void enumApiGetPaymentTypes();


    virtual void enumApiGetShipmentTypes();


    virtual void enumApiGetShippingCarriers();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void enumApiGetOrderStatesCallback(OAIHttpRequestWorker *worker);
    void enumApiGetPaymentTypesCallback(OAIHttpRequestWorker *worker);
    void enumApiGetShipmentTypesCallback(OAIHttpRequestWorker *worker);
    void enumApiGetShippingCarriersCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void enumApiGetOrderStatesSignal(OAIObject summary);
    void enumApiGetPaymentTypesSignal(OAIObject summary);
    void enumApiGetShipmentTypesSignal(OAIObject summary);
    void enumApiGetShippingCarriersSignal(OAIObject summary);


    void enumApiGetOrderStatesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void enumApiGetPaymentTypesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void enumApiGetShipmentTypesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void enumApiGetShippingCarriersSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use enumApiGetOrderStatesSignalError() instead")
    void enumApiGetOrderStatesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enumApiGetOrderStatesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumApiGetPaymentTypesSignalError() instead")
    void enumApiGetPaymentTypesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enumApiGetPaymentTypesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumApiGetShipmentTypesSignalError() instead")
    void enumApiGetShipmentTypesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enumApiGetShipmentTypesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumApiGetShippingCarriersSignalError() instead")
    void enumApiGetShippingCarriersSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enumApiGetShippingCarriersSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use enumApiGetOrderStatesSignalErrorFull() instead")
    void enumApiGetOrderStatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enumApiGetOrderStatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumApiGetPaymentTypesSignalErrorFull() instead")
    void enumApiGetPaymentTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enumApiGetPaymentTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumApiGetShipmentTypesSignalErrorFull() instead")
    void enumApiGetShipmentTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enumApiGetShipmentTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enumApiGetShippingCarriersSignalErrorFull() instead")
    void enumApiGetShippingCarriersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enumApiGetShippingCarriersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
