/**
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBillbee_Interfaces_Shipping_ProductService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBillbee_Interfaces_Shipping_ProductService::OAIBillbee_Interfaces_Shipping_ProductService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBillbee_Interfaces_Shipping_ProductService::OAIBillbee_Interfaces_Shipping_ProductService() {
    this->initializeModel();
}

OAIBillbee_Interfaces_Shipping_ProductService::~OAIBillbee_Interfaces_Shipping_ProductService() {}

void OAIBillbee_Interfaces_Shipping_ProductService::initializeModel() {

    m_can_be_configured_isSet = false;
    m_can_be_configured_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_display_value_isSet = false;
    m_display_value_isValid = false;

    m_possible_value_lists_isSet = false;
    m_possible_value_lists_isValid = false;

    m_requires_user_input_isSet = false;
    m_requires_user_input_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_type_name_isSet = false;
    m_type_name_isValid = false;
}

void OAIBillbee_Interfaces_Shipping_ProductService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBillbee_Interfaces_Shipping_ProductService::fromJsonObject(QJsonObject json) {

    m_can_be_configured_isValid = ::OpenAPI::fromJsonValue(m_can_be_configured, json[QString("CanBeConfigured")]);
    m_can_be_configured_isSet = !json[QString("CanBeConfigured")].isNull() && m_can_be_configured_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_display_value_isValid = ::OpenAPI::fromJsonValue(m_display_value, json[QString("DisplayValue")]);
    m_display_value_isSet = !json[QString("DisplayValue")].isNull() && m_display_value_isValid;

    m_possible_value_lists_isValid = ::OpenAPI::fromJsonValue(m_possible_value_lists, json[QString("PossibleValueLists")]);
    m_possible_value_lists_isSet = !json[QString("PossibleValueLists")].isNull() && m_possible_value_lists_isValid;

    m_requires_user_input_isValid = ::OpenAPI::fromJsonValue(m_requires_user_input, json[QString("RequiresUserInput")]);
    m_requires_user_input_isSet = !json[QString("RequiresUserInput")].isNull() && m_requires_user_input_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("ServiceName")]);
    m_service_name_isSet = !json[QString("ServiceName")].isNull() && m_service_name_isValid;

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("typeName")]);
    m_type_name_isSet = !json[QString("typeName")].isNull() && m_type_name_isValid;
}

QString OAIBillbee_Interfaces_Shipping_ProductService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBillbee_Interfaces_Shipping_ProductService::asJsonObject() const {
    QJsonObject obj;
    if (m_can_be_configured_isSet) {
        obj.insert(QString("CanBeConfigured"), ::OpenAPI::toJsonValue(m_can_be_configured));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_display_value_isSet) {
        obj.insert(QString("DisplayValue"), ::OpenAPI::toJsonValue(m_display_value));
    }
    if (m_possible_value_lists.size() > 0) {
        obj.insert(QString("PossibleValueLists"), ::OpenAPI::toJsonValue(m_possible_value_lists));
    }
    if (m_requires_user_input_isSet) {
        obj.insert(QString("RequiresUserInput"), ::OpenAPI::toJsonValue(m_requires_user_input));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("ServiceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_type_name_isSet) {
        obj.insert(QString("typeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    return obj;
}

bool OAIBillbee_Interfaces_Shipping_ProductService::isCanBeConfigured() const {
    return m_can_be_configured;
}
void OAIBillbee_Interfaces_Shipping_ProductService::setCanBeConfigured(const bool &can_be_configured) {
    m_can_be_configured = can_be_configured;
    m_can_be_configured_isSet = true;
}

bool OAIBillbee_Interfaces_Shipping_ProductService::is_can_be_configured_Set() const{
    return m_can_be_configured_isSet;
}

bool OAIBillbee_Interfaces_Shipping_ProductService::is_can_be_configured_Valid() const{
    return m_can_be_configured_isValid;
}

QString OAIBillbee_Interfaces_Shipping_ProductService::getDisplayName() const {
    return m_display_name;
}
void OAIBillbee_Interfaces_Shipping_ProductService::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIBillbee_Interfaces_Shipping_ProductService::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIBillbee_Interfaces_Shipping_ProductService::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIBillbee_Interfaces_Shipping_ProductService::getDisplayValue() const {
    return m_display_value;
}
void OAIBillbee_Interfaces_Shipping_ProductService::setDisplayValue(const QString &display_value) {
    m_display_value = display_value;
    m_display_value_isSet = true;
}

bool OAIBillbee_Interfaces_Shipping_ProductService::is_display_value_Set() const{
    return m_display_value_isSet;
}

bool OAIBillbee_Interfaces_Shipping_ProductService::is_display_value_Valid() const{
    return m_display_value_isValid;
}

QList<OAISystem_Collections_Generic_KeyValuePair_System_String_System_Collections_Generic_List_System_Collections_Generic_KeyValuePair_System_Int32_System_String_> OAIBillbee_Interfaces_Shipping_ProductService::getPossibleValueLists() const {
    return m_possible_value_lists;
}
void OAIBillbee_Interfaces_Shipping_ProductService::setPossibleValueLists(const QList<OAISystem_Collections_Generic_KeyValuePair_System_String_System_Collections_Generic_List_System_Collections_Generic_KeyValuePair_System_Int32_System_String_> &possible_value_lists) {
    m_possible_value_lists = possible_value_lists;
    m_possible_value_lists_isSet = true;
}

bool OAIBillbee_Interfaces_Shipping_ProductService::is_possible_value_lists_Set() const{
    return m_possible_value_lists_isSet;
}

bool OAIBillbee_Interfaces_Shipping_ProductService::is_possible_value_lists_Valid() const{
    return m_possible_value_lists_isValid;
}

bool OAIBillbee_Interfaces_Shipping_ProductService::isRequiresUserInput() const {
    return m_requires_user_input;
}
void OAIBillbee_Interfaces_Shipping_ProductService::setRequiresUserInput(const bool &requires_user_input) {
    m_requires_user_input = requires_user_input;
    m_requires_user_input_isSet = true;
}

bool OAIBillbee_Interfaces_Shipping_ProductService::is_requires_user_input_Set() const{
    return m_requires_user_input_isSet;
}

bool OAIBillbee_Interfaces_Shipping_ProductService::is_requires_user_input_Valid() const{
    return m_requires_user_input_isValid;
}

QString OAIBillbee_Interfaces_Shipping_ProductService::getServiceName() const {
    return m_service_name;
}
void OAIBillbee_Interfaces_Shipping_ProductService::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIBillbee_Interfaces_Shipping_ProductService::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIBillbee_Interfaces_Shipping_ProductService::is_service_name_Valid() const{
    return m_service_name_isValid;
}

QString OAIBillbee_Interfaces_Shipping_ProductService::getTypeName() const {
    return m_type_name;
}
void OAIBillbee_Interfaces_Shipping_ProductService::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAIBillbee_Interfaces_Shipping_ProductService::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAIBillbee_Interfaces_Shipping_ProductService::is_type_name_Valid() const{
    return m_type_name_isValid;
}

bool OAIBillbee_Interfaces_Shipping_ProductService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_be_configured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_possible_value_lists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_user_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBillbee_Interfaces_Shipping_ProductService::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
