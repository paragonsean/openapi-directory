/**
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel() {
    this->initializeModel();
}

OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::~OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel() {}

void OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_paused_isSet = false;
    m_is_paused_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_web_hook_uri_isSet = false;
    m_web_hook_uri_isValid = false;
}

void OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("Headers")]);
    m_headers_isSet = !json[QString("Headers")].isNull() && m_headers_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_is_paused_isValid = ::OpenAPI::fromJsonValue(m_is_paused, json[QString("IsPaused")]);
    m_is_paused_isSet = !json[QString("IsPaused")].isNull() && m_is_paused_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("Properties")]);
    m_properties_isSet = !json[QString("Properties")].isNull() && m_properties_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("Secret")]);
    m_secret_isSet = !json[QString("Secret")].isNull() && m_secret_isValid;

    m_web_hook_uri_isValid = ::OpenAPI::fromJsonValue(m_web_hook_uri, json[QString("WebHookUri")]);
    m_web_hook_uri_isSet = !json[QString("WebHookUri")].isNull() && m_web_hook_uri_isValid;
}

QString OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_filters.size() > 0) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("Headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_paused_isSet) {
        obj.insert(QString("IsPaused"), ::OpenAPI::toJsonValue(m_is_paused));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("Properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_secret_isSet) {
        obj.insert(QString("Secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_web_hook_uri_isSet) {
        obj.insert(QString("WebHookUri"), ::OpenAPI::toJsonValue(m_web_hook_uri));
    }
    return obj;
}

QString OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::getDescription() const {
    return m_description;
}
void OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::getFilters() const {
    return m_filters;
}
void OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::setFilters(const QList<QString> &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::is_filters_Valid() const{
    return m_filters_isValid;
}

QMap<QString, QString> OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::getHeaders() const {
    return m_headers;
}
void OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::setHeaders(const QMap<QString, QString> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::getId() const {
    return m_id;
}
void OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::isIsPaused() const {
    return m_is_paused;
}
void OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::setIsPaused(const bool &is_paused) {
    m_is_paused = is_paused;
    m_is_paused_isSet = true;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::is_is_paused_Set() const{
    return m_is_paused_isSet;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::is_is_paused_Valid() const{
    return m_is_paused_isValid;
}

QMap<QString, OAIObject> OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::getProperties() const {
    return m_properties;
}
void OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::setProperties(const QMap<QString, OAIObject> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::getSecret() const {
    return m_secret;
}
void OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::is_secret_Valid() const{
    return m_secret_isValid;
}

QString OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::getWebHookUri() const {
    return m_web_hook_uri;
}
void OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::setWebHookUri(const QString &web_hook_uri) {
    m_web_hook_uri = web_hook_uri;
    m_web_hook_uri_isSet = true;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::is_web_hook_uri_Set() const{
    return m_web_hook_uri_isSet;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::is_web_hook_uri_Valid() const{
    return m_web_hook_uri_isValid;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_paused_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_hook_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRechnungsdruck_WebApp_Controllers_Api_WebHookApiModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_secret_isValid && m_web_hook_uri_isValid && true;
}

} // namespace OpenAPI
