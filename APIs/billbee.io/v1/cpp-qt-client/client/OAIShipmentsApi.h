/**
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIShipmentsApi_H
#define OAI_OAIShipmentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBillbee_Interfaces_BillbeeAPI_Model_CreateShipmentApiModel.h"
#include "OAIObject.h"
#include "OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_Shipment_.h"
#include "OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Rechnungsdruck_WebApp_Controllers_Api_ShipmentWithLabelResult_.h"
#include "OAIRechnungsdruck_WebApp_Controllers_Api_ShipmentWithLabel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIShipmentsApi : public QObject {
    Q_OBJECT

public:
    OAIShipmentsApi(const int timeOut = 0);
    ~OAIShipmentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  created_at_min QDateTime [optional]
    * @param[in]  created_at_max QDateTime [optional]
    * @param[in]  order_id qint64 [optional]
    * @param[in]  minimum_shipment_id qint64 [optional]
    * @param[in]  shipping_provider_id qint64 [optional]
    */
    virtual void shipmentGetList(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_min = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_max = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint64> &order_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &minimum_shipment_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &shipping_provider_id = ::OpenAPI::OptionalParam<qint64>());


    virtual void shipmentGetPing();


    virtual void shipmentGetShippingCarrier();


    virtual void shipmentGetShippingproviders();

    /**
    * @param[in]  oai_billbee_interfaces_billbee_api_model_create_shipment_api_model OAIBillbee_Interfaces_BillbeeAPI_Model_CreateShipmentApiModel [required]
    */
    virtual void shipmentPostShipment(const OAIBillbee_Interfaces_BillbeeAPI_Model_CreateShipmentApiModel &oai_billbee_interfaces_billbee_api_model_create_shipment_api_model);

    /**
    * @param[in]  oai_rechnungsdruck_web_app_controllers_api_shipment_with_label OAIRechnungsdruck_WebApp_Controllers_Api_ShipmentWithLabel [required]
    */
    virtual void shipmentShipWithLabel(const OAIRechnungsdruck_WebApp_Controllers_Api_ShipmentWithLabel &oai_rechnungsdruck_web_app_controllers_api_shipment_with_label);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void shipmentGetListCallback(OAIHttpRequestWorker *worker);
    void shipmentGetPingCallback(OAIHttpRequestWorker *worker);
    void shipmentGetShippingCarrierCallback(OAIHttpRequestWorker *worker);
    void shipmentGetShippingprovidersCallback(OAIHttpRequestWorker *worker);
    void shipmentPostShipmentCallback(OAIHttpRequestWorker *worker);
    void shipmentShipWithLabelCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void shipmentGetListSignal(OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_Shipment_ summary);
    void shipmentGetPingSignal(OAIObject summary);
    void shipmentGetShippingCarrierSignal(OAIObject summary);
    void shipmentGetShippingprovidersSignal(OAIObject summary);
    void shipmentPostShipmentSignal(OAIObject summary);
    void shipmentShipWithLabelSignal(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Rechnungsdruck_WebApp_Controllers_Api_ShipmentWithLabelResult_ summary);


    void shipmentGetListSignalFull(OAIHttpRequestWorker *worker, OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_Shipment_ summary);
    void shipmentGetPingSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void shipmentGetShippingCarrierSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void shipmentGetShippingprovidersSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void shipmentPostShipmentSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void shipmentShipWithLabelSignalFull(OAIHttpRequestWorker *worker, OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Rechnungsdruck_WebApp_Controllers_Api_ShipmentWithLabelResult_ summary);

    Q_DECL_DEPRECATED_X("Use shipmentGetListSignalError() instead")
    void shipmentGetListSignalE(OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_Shipment_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void shipmentGetListSignalError(OAIRechnungsdruck_WebApp_Controllers_Api_ApiPagedResult_System_Collections_Generic_List_Billbee_Interfaces_BillbeeAPI_Model_Shipment_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shipmentGetPingSignalError() instead")
    void shipmentGetPingSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void shipmentGetPingSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shipmentGetShippingCarrierSignalError() instead")
    void shipmentGetShippingCarrierSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void shipmentGetShippingCarrierSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shipmentGetShippingprovidersSignalError() instead")
    void shipmentGetShippingprovidersSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void shipmentGetShippingprovidersSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shipmentPostShipmentSignalError() instead")
    void shipmentPostShipmentSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void shipmentPostShipmentSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shipmentShipWithLabelSignalError() instead")
    void shipmentShipWithLabelSignalE(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Rechnungsdruck_WebApp_Controllers_Api_ShipmentWithLabelResult_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void shipmentShipWithLabelSignalError(OAIRechnungsdruck_WebApp_Controllers_Api_ApiResult_Rechnungsdruck_WebApp_Controllers_Api_ShipmentWithLabelResult_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use shipmentGetListSignalErrorFull() instead")
    void shipmentGetListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shipmentGetListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shipmentGetPingSignalErrorFull() instead")
    void shipmentGetPingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shipmentGetPingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shipmentGetShippingCarrierSignalErrorFull() instead")
    void shipmentGetShippingCarrierSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shipmentGetShippingCarrierSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shipmentGetShippingprovidersSignalErrorFull() instead")
    void shipmentGetShippingprovidersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shipmentGetShippingprovidersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shipmentPostShipmentSignalErrorFull() instead")
    void shipmentPostShipmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shipmentPostShipmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shipmentShipWithLabelSignalErrorFull() instead")
    void shipmentShipWithLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shipmentShipWithLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
