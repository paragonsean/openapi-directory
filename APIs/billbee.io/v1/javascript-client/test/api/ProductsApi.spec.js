/**
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BillbeeApi);
  }
}(this, function(expect, BillbeeApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BillbeeApi.ProductsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProductsApi', function() {
    describe('articleCreateArticle', function() {
      it('should call articleCreateArticle successfully', function(done) {
        //uncomment below and update the code to test articleCreateArticle
        //instance.articleCreateArticle(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('articleDeleteArticle', function() {
      it('should call articleDeleteArticle successfully', function(done) {
        //uncomment below and update the code to test articleDeleteArticle
        //instance.articleDeleteArticle(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('articleDeleteImage', function() {
      it('should call articleDeleteImage successfully', function(done) {
        //uncomment below and update the code to test articleDeleteImage
        //instance.articleDeleteImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('articleDeleteImageFromProduct', function() {
      it('should call articleDeleteImageFromProduct successfully', function(done) {
        //uncomment below and update the code to test articleDeleteImageFromProduct
        //instance.articleDeleteImageFromProduct(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('articleDeleteImages', function() {
      it('should call articleDeleteImages successfully', function(done) {
        //uncomment below and update the code to test articleDeleteImages
        //instance.articleDeleteImages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('articleGetArticle', function() {
      it('should call articleGetArticle successfully', function(done) {
        //uncomment below and update the code to test articleGetArticle
        //instance.articleGetArticle(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('articleGetCategory', function() {
      it('should call articleGetCategory successfully', function(done) {
        //uncomment below and update the code to test articleGetCategory
        //instance.articleGetCategory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('articleGetCustomField', function() {
      it('should call articleGetCustomField successfully', function(done) {
        //uncomment below and update the code to test articleGetCustomField
        //instance.articleGetCustomField(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('articleGetCustomFields', function() {
      it('should call articleGetCustomFields successfully', function(done) {
        //uncomment below and update the code to test articleGetCustomFields
        //instance.articleGetCustomFields(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('articleGetImage', function() {
      it('should call articleGetImage successfully', function(done) {
        //uncomment below and update the code to test articleGetImage
        //instance.articleGetImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('articleGetImageFromProduct', function() {
      it('should call articleGetImageFromProduct successfully', function(done) {
        //uncomment below and update the code to test articleGetImageFromProduct
        //instance.articleGetImageFromProduct(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('articleGetImages', function() {
      it('should call articleGetImages successfully', function(done) {
        //uncomment below and update the code to test articleGetImages
        //instance.articleGetImages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('articleGetList', function() {
      it('should call articleGetList successfully', function(done) {
        //uncomment below and update the code to test articleGetList
        //instance.articleGetList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('articleGetPatchableFields', function() {
      it('should call articleGetPatchableFields successfully', function(done) {
        //uncomment below and update the code to test articleGetPatchableFields
        //instance.articleGetPatchableFields(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('articleGetReservedAmount', function() {
      it('should call articleGetReservedAmount successfully', function(done) {
        //uncomment below and update the code to test articleGetReservedAmount
        //instance.articleGetReservedAmount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('articleGetStocks', function() {
      it('should call articleGetStocks successfully', function(done) {
        //uncomment below and update the code to test articleGetStocks
        //instance.articleGetStocks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('articlePatchArticle', function() {
      it('should call articlePatchArticle successfully', function(done) {
        //uncomment below and update the code to test articlePatchArticle
        //instance.articlePatchArticle(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('articlePutImage', function() {
      it('should call articlePutImage successfully', function(done) {
        //uncomment below and update the code to test articlePutImage
        //instance.articlePutImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('articlePutImages', function() {
      it('should call articlePutImages successfully', function(done) {
        //uncomment below and update the code to test articlePutImages
        //instance.articlePutImages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('articleUpdateStock', function() {
      it('should call articleUpdateStock successfully', function(done) {
        //uncomment below and update the code to test articleUpdateStock
        //instance.articleUpdateStock(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('articleUpdateStockCode', function() {
      it('should call articleUpdateStockCode successfully', function(done) {
        //uncomment below and update the code to test articleUpdateStockCode
        //instance.articleUpdateStockCode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('articleUpdateStockMultiple', function() {
      it('should call articleUpdateStockMultiple successfully', function(done) {
        //uncomment below and update the code to test articleUpdateStockMultiple
        //instance.articleUpdateStockMultiple(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchSearch', function() {
      it('should call searchSearch successfully', function(done) {
        //uncomment below and update the code to test searchSearch
        //instance.searchSearch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
