/**
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RechnungsdruckWebAppControllersApiWebHookApiModel from '../model/RechnungsdruckWebAppControllersApiWebHookApiModel';

/**
* Webhooks service.
* @module api/WebhooksApi
* @version v1
*/
export default class WebhooksApi {

    /**
    * Constructs a new WebhooksApi. 
    * @alias module:api/WebhooksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the webHookManagementDelete operation.
     * @callback module:api/WebhooksApi~webHookManagementDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing WebHook registration.
     * @param {String} id The WebHook ID.
     * @param {module:api/WebhooksApi~webHookManagementDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    webHookManagementDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webHookManagementDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/webhooks/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webHookManagementDeleteAll operation.
     * @callback module:api/WebhooksApi~webHookManagementDeleteAllCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes all existing WebHook registrations.
     * @param {module:api/WebhooksApi~webHookManagementDeleteAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    webHookManagementDeleteAll(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/webhooks', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webHookManagementGet operation.
     * @callback module:api/WebhooksApi~webHookManagementGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RechnungsdruckWebAppControllersApiWebHookApiModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all registered WebHooks for a given user.
     * @param {module:api/WebhooksApi~webHookManagementGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RechnungsdruckWebAppControllersApiWebHookApiModel>}
     */
    webHookManagementGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = [RechnungsdruckWebAppControllersApiWebHookApiModel];
      return this.apiClient.callApi(
        '/api/v1/webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webHookManagementGetFilters operation.
     * @callback module:api/WebhooksApi~webHookManagementGetFiltersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all known filters you can use to register webhooks
     * @param {module:api/WebhooksApi~webHookManagementGetFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    webHookManagementGetFilters(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/webhooks/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webHookManagementLookup operation.
     * @callback module:api/WebhooksApi~webHookManagementLookupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiWebHookApiModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Looks up a registered WebHook with the given {id} for a given user.
     * @param {String} id 
     * @param {module:api/WebhooksApi~webHookManagementLookupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiWebHookApiModel}
     */
    webHookManagementLookup(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webHookManagementLookup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RechnungsdruckWebAppControllersApiWebHookApiModel;
      return this.apiClient.callApi(
        '/api/v1/webhooks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webHookManagementPost operation.
     * @callback module:api/WebhooksApi~webHookManagementPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiWebHookApiModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers a new WebHook for a given user.
     * @param {module:model/RechnungsdruckWebAppControllersApiWebHookApiModel} rechnungsdruckWebAppControllersApiWebHookApiModel The webhook to create. Attach ?noecho to the uri to prevent echo test.
     * @param {module:api/WebhooksApi~webHookManagementPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiWebHookApiModel}
     */
    webHookManagementPost(rechnungsdruckWebAppControllersApiWebHookApiModel, callback) {
      let postBody = rechnungsdruckWebAppControllersApiWebHookApiModel;
      // verify the required parameter 'rechnungsdruckWebAppControllersApiWebHookApiModel' is set
      if (rechnungsdruckWebAppControllersApiWebHookApiModel === undefined || rechnungsdruckWebAppControllersApiWebHookApiModel === null) {
        throw new Error("Missing the required parameter 'rechnungsdruckWebAppControllersApiWebHookApiModel' when calling webHookManagementPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = RechnungsdruckWebAppControllersApiWebHookApiModel;
      return this.apiClient.callApi(
        '/api/v1/webhooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webHookManagementPut operation.
     * @callback module:api/WebhooksApi~webHookManagementPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiWebHookApiModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing WebHook registration.
     * @param {String} id The WebHook ID.
     * @param {module:model/RechnungsdruckWebAppControllersApiWebHookApiModel} rechnungsdruckWebAppControllersApiWebHookApiModel The new webhook to use.
     * @param {module:api/WebhooksApi~webHookManagementPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiWebHookApiModel}
     */
    webHookManagementPut(id, rechnungsdruckWebAppControllersApiWebHookApiModel, callback) {
      let postBody = rechnungsdruckWebAppControllersApiWebHookApiModel;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webHookManagementPut");
      }
      // verify the required parameter 'rechnungsdruckWebAppControllersApiWebHookApiModel' is set
      if (rechnungsdruckWebAppControllersApiWebHookApiModel === undefined || rechnungsdruckWebAppControllersApiWebHookApiModel === null) {
        throw new Error("Missing the required parameter 'rechnungsdruckWebAppControllersApiWebHookApiModel' when calling webHookManagementPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = RechnungsdruckWebAppControllersApiWebHookApiModel;
      return this.apiClient.callApi(
        '/api/v1/webhooks/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
