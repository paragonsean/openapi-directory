/**
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BillbeeInterfacesBillbeeAPIModelOrder from '../model/BillbeeInterfacesBillbeeAPIModelOrder';
import RechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel from '../model/RechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel';
import RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelInvoiceApiModel from '../model/RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelInvoiceApiModel';
import RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelOrder from '../model/RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelOrder';
import RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder from '../model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder';
import RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiInvoice from '../model/RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiInvoice';
import RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel from '../model/RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel';
import RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelsLayoutTemplate from '../model/RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelsLayoutTemplate';
import RechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer from '../model/RechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer';
import RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel from '../model/RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel';
import RechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer from '../model/RechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer';
import RechnungsdruckWebAppControllersApiOrderStateUpdate from '../model/RechnungsdruckWebAppControllersApiOrderStateUpdate';
import RechnungsdruckWebAppControllersApiOrderTagCreate from '../model/RechnungsdruckWebAppControllersApiOrderTagCreate';
import RechnungsdruckWebAppControllersApiSearchControllerSearchModel from '../model/RechnungsdruckWebAppControllersApiSearchControllerSearchModel';

/**
* Orders service.
* @module api/OrdersApi
* @version v1
*/
export default class OrdersApi {

    /**
    * Constructs a new OrdersApi. 
    * @alias module:api/OrdersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the layoutApiGetList operation.
     * @callback module:api/OrdersApi~layoutApiGetListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelsLayoutTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/OrdersApi~layoutApiGetListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelsLayoutTemplate}
     */
    layoutApiGetList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelsLayoutTemplate;
      return this.apiClient.callApi(
        '/api/v1/layouts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderApiAddShipment operation.
     * @callback module:api/OrdersApi~orderApiAddShipmentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a shipment to a given order
     * @param {Number} id The internal billbee id of the order
     * @param {module:model/RechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel} rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel The shipment data to create the shipment
     * @param {module:api/OrdersApi~orderApiAddShipmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    orderApiAddShipment(id, rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel, callback) {
      let postBody = rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling orderApiAddShipment");
      }
      // verify the required parameter 'rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel' is set
      if (rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel === undefined || rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel === null) {
        throw new Error("Missing the required parameter 'rechnungsdruckWebAppControllersApiApiAddShipmentToOrderModel' when calling orderApiAddShipment");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/orders/{id}/shipment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderApiCreateDeliveryNote operation.
     * @callback module:api/OrdersApi~orderApiCreateDeliveryNoteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an delivery note for an existing order. This request is extra throttled by order and api key to a maximum of 1 per 5 minutes.
     * @param {Number} id The internal billbee id of the order
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includePdf] If true, the PDF is included in the response as base64 encoded string
     * @param {Number} [sendToCloudId] Optionally specify the id of a billbee connected cloud device to send the pdf to
     * @param {module:api/OrdersApi~orderApiCreateDeliveryNoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    orderApiCreateDeliveryNote(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling orderApiCreateDeliveryNote");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'includePdf': opts['includePdf'],
        'sendToCloudId': opts['sendToCloudId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/orders/CreateDeliveryNote/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderApiCreateInvoice operation.
     * @callback module:api/OrdersApi~orderApiCreateInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiInvoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an invoice for an existing order. This request is extra throttled by order and api key to a maximum of 1 per 5 minutes.
     * @param {Number} id The internal billbee id of the order
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeInvoicePdf] If true, the PDF is included in the response as base64 encoded string
     * @param {Number} [templateId] You can pass the id of an invoice template to overwrite the assigned template for invoice creation
     * @param {Number} [sendToCloudId] You can pass the id of a connected cloud printer/storage to send the invoice to it
     * @param {module:api/OrdersApi~orderApiCreateInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiInvoice}
     */
    orderApiCreateInvoice(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling orderApiCreateInvoice");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'includeInvoicePdf': opts['includeInvoicePdf'],
        'templateId': opts['templateId'],
        'sendToCloudId': opts['sendToCloudId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiInvoice;
      return this.apiClient.callApi(
        '/api/v1/orders/CreateInvoice/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderApiFind operation.
     * @callback module:api/OrdersApi~orderApiFindCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a single order by its external id (order number)
     * @param {String} id The order id from the external system
     * @param {String} partner Optional the name of the shop/marketplace the order was imported from
     * @param {module:api/OrdersApi~orderApiFindCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    orderApiFind(id, partner, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling orderApiFind");
      }
      // verify the required parameter 'partner' is set
      if (partner === undefined || partner === null) {
        throw new Error("Missing the required parameter 'partner' when calling orderApiFind");
      }

      let pathParams = {
        'id': id,
        'partner': partner
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/orders/find/{id}/{partner}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderApiGet operation.
     * @callback module:api/OrdersApi~orderApiGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single order by its internal billbee id. This request is throttled to 6 calls per order in one minute
     * @param {Number} id The internal billbee id of the order
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [articleTitleSource] The source field for the article title. 0 = Order Position (default), 1 = Article Title, 2 = Article Invoice Text
     * @param {module:api/OrdersApi~orderApiGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder}
     */
    orderApiGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling orderApiGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'articleTitleSource': opts['articleTitleSource']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder;
      return this.apiClient.callApi(
        '/api/v1/orders/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderApiGetByExtRef operation.
     * @callback module:api/OrdersApi~orderApiGetByExtRefCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single order by its external order number
     * @param {String} extRef The extern order number of the order
     * @param {module:api/OrdersApi~orderApiGetByExtRefCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder}
     */
    orderApiGetByExtRef(extRef, callback) {
      let postBody = null;
      // verify the required parameter 'extRef' is set
      if (extRef === undefined || extRef === null) {
        throw new Error("Missing the required parameter 'extRef' when calling orderApiGetByExtRef");
      }

      let pathParams = {
        'extRef': extRef
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder;
      return this.apiClient.callApi(
        '/api/v1/orders/findbyextref/{extRef}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderApiGetInvoiceList operation.
     * @callback module:api/OrdersApi~orderApiGetInvoiceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelInvoiceApiModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all invoices optionally filtered by date. This request ist throttled to 1 per 1 minute for same page and minInvoiceDate
     * @param {Object} opts Optional parameters
     * @param {Date} [minInvoiceDate] Specifies the oldest invoice date to include
     * @param {Date} [maxInvoiceDate] Specifies the newest invoice date to include
     * @param {Number} [page] Specifies the page to request
     * @param {Number} [pageSize] Specifies the pagesize. Defaults to 50, max value is 250
     * @param {Array.<Number>} [shopId] Specifies a list of shop ids for which invoices should be included
     * @param {Array.<Number>} [orderStateId] Specifies a list of state ids to include in the response
     * @param {Array.<String>} [tag] 
     * @param {Date} [minPayDate] 
     * @param {Date} [maxPayDate] 
     * @param {Boolean} [includePositions] 
     * @param {Boolean} [excludeTags] If true the list of tags passed to the call are used to filter orders to not include these tags
     * @param {module:api/OrdersApi~orderApiGetInvoiceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelInvoiceApiModel}
     */
    orderApiGetInvoiceList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'minInvoiceDate': opts['minInvoiceDate'],
        'maxInvoiceDate': opts['maxInvoiceDate'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'shopId': this.apiClient.buildCollectionParam(opts['shopId'], 'multi'),
        'orderStateId': this.apiClient.buildCollectionParam(opts['orderStateId'], 'multi'),
        'tag': this.apiClient.buildCollectionParam(opts['tag'], 'multi'),
        'minPayDate': opts['minPayDate'],
        'maxPayDate': opts['maxPayDate'],
        'includePositions': opts['includePositions'],
        'excludeTags': opts['excludeTags']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelInvoiceApiModel;
      return this.apiClient.callApi(
        '/api/v1/orders/invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderApiGetList operation.
     * @callback module:api/OrdersApi~orderApiGetListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all orders optionally filtered by date
     * @param {Object} opts Optional parameters
     * @param {Date} [minOrderDate] Specifies the oldest order date to include in the response
     * @param {Date} [maxOrderDate] Specifies the newest order date to include in the response
     * @param {Number} [page] Specifies the page to request
     * @param {Number} [pageSize] Specifies the pagesize. Defaults to 50, max value is 250
     * @param {Array.<Number>} [shopId] Specifies a list of shop ids for which invoices should be included
     * @param {Array.<Number>} [orderStateId] Specifies a list of state ids to include in the response
     * @param {Array.<String>} [tag] Specifies a list of tags the order must have attached to be included in the response
     * @param {Number} [minimumBillBeeOrderId] If given, all delivered orders have an Id greater than or equal to the given minimumOrderId
     * @param {Date} [modifiedAtMin] If given, the last modification has to be newer than the given date
     * @param {Date} [modifiedAtMax] If given, the last modification has to be older or equal than the given date.
     * @param {module:model/Number} [articleTitleSource] The source field for the article title. 0 = Order Position (default), 1 = Article Title, 2 = Article Invoice Text
     * @param {Boolean} [excludeTags] If true the list of tags passed to the call are used to filter orders to not include these tags
     * @param {module:api/OrdersApi~orderApiGetListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelOrder}
     */
    orderApiGetList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'minOrderDate': opts['minOrderDate'],
        'maxOrderDate': opts['maxOrderDate'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'shopId': this.apiClient.buildCollectionParam(opts['shopId'], 'multi'),
        'orderStateId': this.apiClient.buildCollectionParam(opts['orderStateId'], 'multi'),
        'tag': this.apiClient.buildCollectionParam(opts['tag'], 'multi'),
        'minimumBillBeeOrderId': opts['minimumBillBeeOrderId'],
        'modifiedAtMin': opts['modifiedAtMin'],
        'modifiedAtMax': opts['modifiedAtMax'],
        'articleTitleSource': opts['articleTitleSource'],
        'excludeTags': opts['excludeTags']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelOrder;
      return this.apiClient.callApi(
        '/api/v1/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderApiGetPatchableFields operation.
     * @callback module:api/OrdersApi~orderApiGetPatchableFieldsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of fields which can be updated with the orders/{id} patch call
     * @param {module:api/OrdersApi~orderApiGetPatchableFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    orderApiGetPatchableFields(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/orders/PatchableFields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderApiParsePlaceholders operation.
     * @callback module:api/OrdersApi~orderApiParsePlaceholdersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Parses a text and replaces all placeholders
     * @param {Number} id The id of the order
     * @param {module:model/RechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer} rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer 
     * @param {module:api/OrdersApi~orderApiParsePlaceholdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    orderApiParsePlaceholders(id, rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer, callback) {
      let postBody = rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling orderApiParsePlaceholders");
      }
      // verify the required parameter 'rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer' is set
      if (rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer === undefined || rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer === null) {
        throw new Error("Missing the required parameter 'rechnungsdruckWebAppControllersApiOrderApiControllerParseTextContainer' when calling orderApiParsePlaceholders");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/orders/{id}/parse-placeholders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderApiPatchOrder operation.
     * @callback module:api/OrdersApi~orderApiPatchOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates one or more fields of an order
     * @param {Number} id 
     * @param {Object.<String, Object>} body 
     * @param {module:api/OrdersApi~orderApiPatchOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder}
     */
    orderApiPatchOrder(id, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling orderApiPatchOrder");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling orderApiPatchOrder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'text/json'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder;
      return this.apiClient.callApi(
        '/api/v1/orders/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderApiPostNewOrder operation.
     * @callback module:api/OrdersApi~orderApiPostNewOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new order in the Billbee account
     * To create an order POST an JSON object to the orders endpoint with the shown properties.  Not all properties are required.
     * @param {module:model/BillbeeInterfacesBillbeeAPIModelOrder} billbeeInterfacesBillbeeAPIModelOrder 
     * @param {Object} opts Optional parameters
     * @param {Number} [shopId] Deprecated, if orderData.ApiAccountId is set, it will be used instead of 'shopId'
     * @param {module:api/OrdersApi~orderApiPostNewOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder}
     */
    orderApiPostNewOrder(billbeeInterfacesBillbeeAPIModelOrder, opts, callback) {
      opts = opts || {};
      let postBody = billbeeInterfacesBillbeeAPIModelOrder;
      // verify the required parameter 'billbeeInterfacesBillbeeAPIModelOrder' is set
      if (billbeeInterfacesBillbeeAPIModelOrder === undefined || billbeeInterfacesBillbeeAPIModelOrder === null) {
        throw new Error("Missing the required parameter 'billbeeInterfacesBillbeeAPIModelOrder' when calling orderApiPostNewOrder");
      }

      let pathParams = {
      };
      let queryParams = {
        'shopId': opts['shopId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelOrder;
      return this.apiClient.callApi(
        '/api/v1/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderApiSendMessage operation.
     * @callback module:api/OrdersApi~orderApiSendMessageCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends a message to the buyer
     * @param {Number} id The id of the order
     * @param {module:model/RechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel} rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel The message model
     * @param {module:api/OrdersApi~orderApiSendMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    orderApiSendMessage(id, rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel, callback) {
      let postBody = rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling orderApiSendMessage");
      }
      // verify the required parameter 'rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel' is set
      if (rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel === undefined || rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel === null) {
        throw new Error("Missing the required parameter 'rechnungsdruckWebAppControllersApiOrderApiControllerSendMessageModel' when calling orderApiSendMessage");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/orders/{id}/send-message', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderApiTagsCreate operation.
     * @callback module:api/OrdersApi~orderApiTagsCreateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach one or more tags to an order
     * When a tag is already attached, it is ignored. Tags are not case sensitive. All given tags are added to the existing tags.
     * @param {Number} id The internal id of the order
     * @param {module:model/RechnungsdruckWebAppControllersApiOrderTagCreate} rechnungsdruckWebAppControllersApiOrderTagCreate Tags to attach
     * @param {module:api/OrdersApi~orderApiTagsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    orderApiTagsCreate(id, rechnungsdruckWebAppControllersApiOrderTagCreate, callback) {
      let postBody = rechnungsdruckWebAppControllersApiOrderTagCreate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling orderApiTagsCreate");
      }
      // verify the required parameter 'rechnungsdruckWebAppControllersApiOrderTagCreate' is set
      if (rechnungsdruckWebAppControllersApiOrderTagCreate === undefined || rechnungsdruckWebAppControllersApiOrderTagCreate === null) {
        throw new Error("Missing the required parameter 'rechnungsdruckWebAppControllersApiOrderTagCreate' when calling orderApiTagsCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/orders/{id}/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderApiTagsUpdate operation.
     * @callback module:api/OrdersApi~orderApiTagsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the tags attached to an order
     * All existing tags will be replaced by the given list of new tags. To just add tags, use POST method.
     * @param {Number} id The internal id of the order
     * @param {module:model/RechnungsdruckWebAppControllersApiOrderTagCreate} rechnungsdruckWebAppControllersApiOrderTagCreate Tags to attach
     * @param {module:api/OrdersApi~orderApiTagsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    orderApiTagsUpdate(id, rechnungsdruckWebAppControllersApiOrderTagCreate, callback) {
      let postBody = rechnungsdruckWebAppControllersApiOrderTagCreate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling orderApiTagsUpdate");
      }
      // verify the required parameter 'rechnungsdruckWebAppControllersApiOrderTagCreate' is set
      if (rechnungsdruckWebAppControllersApiOrderTagCreate === undefined || rechnungsdruckWebAppControllersApiOrderTagCreate === null) {
        throw new Error("Missing the required parameter 'rechnungsdruckWebAppControllersApiOrderTagCreate' when calling orderApiTagsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/orders/{id}/tags', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderApiTriggerEvent operation.
     * @callback module:api/OrdersApi~orderApiTriggerEventCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Triggers a rule event
     * @param {Number} id The id of the order
     * @param {module:model/RechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer} rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer 
     * @param {module:api/OrdersApi~orderApiTriggerEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    orderApiTriggerEvent(id, rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer, callback) {
      let postBody = rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling orderApiTriggerEvent");
      }
      // verify the required parameter 'rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer' is set
      if (rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer === undefined || rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer === null) {
        throw new Error("Missing the required parameter 'rechnungsdruckWebAppControllersApiOrderApiControllerTriggerEventContainer' when calling orderApiTriggerEvent");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/orders/{id}/trigger-event', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderApiUpdateState operation.
     * @callback module:api/OrdersApi~orderApiUpdateStateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes the main state of a single order
     * ### REMARKS ###  Use this call to change the state of an order to i.e. paid or sent.    The state is transfered to the external shop/marketplace if configured.  This is the list of known states:  - 1: ordered  - 2: confirmed  - 3: paid  - 4: shipped  - 5: reclamation  - 6: deleted  - 7: closed  - 8: canceled  - 9: archived  - 10: not used  - 11: demand note 1  - 12: demand note 2  - 13: packed  - 14: offered  - 15: payment reminder  - 16: fulfilling
     * @param {Number} id The internal id of the order
     * @param {module:model/RechnungsdruckWebAppControllersApiOrderStateUpdate} rechnungsdruckWebAppControllersApiOrderStateUpdate The data used to change the state
     * @param {module:api/OrdersApi~orderApiUpdateStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    orderApiUpdateState(id, rechnungsdruckWebAppControllersApiOrderStateUpdate, callback) {
      let postBody = rechnungsdruckWebAppControllersApiOrderStateUpdate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling orderApiUpdateState");
      }
      // verify the required parameter 'rechnungsdruckWebAppControllersApiOrderStateUpdate' is set
      if (rechnungsdruckWebAppControllersApiOrderStateUpdate === undefined || rechnungsdruckWebAppControllersApiOrderStateUpdate === null) {
        throw new Error("Missing the required parameter 'rechnungsdruckWebAppControllersApiOrderStateUpdate' when calling orderApiUpdateState");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/orders/{id}/orderstate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchSearch_1 operation.
     * @callback module:api/OrdersApi~searchSearch_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for products, customers and orders.  Type can be \"order\", \"product\" and / or \"customer\"  Term can contains lucene query syntax
     * @param {module:model/RechnungsdruckWebAppControllersApiSearchControllerSearchModel} rechnungsdruckWebAppControllersApiSearchControllerSearchModel 
     * @param {module:api/OrdersApi~searchSearch_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel}
     */
    searchSearch_1(rechnungsdruckWebAppControllersApiSearchControllerSearchModel, callback) {
      let postBody = rechnungsdruckWebAppControllersApiSearchControllerSearchModel;
      // verify the required parameter 'rechnungsdruckWebAppControllersApiSearchControllerSearchModel' is set
      if (rechnungsdruckWebAppControllersApiSearchControllerSearchModel === undefined || rechnungsdruckWebAppControllersApiSearchControllerSearchModel === null) {
        throw new Error("Missing the required parameter 'rechnungsdruckWebAppControllersApiSearchControllerSearchModel' when calling searchSearch_1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel;
      return this.apiClient.callApi(
        '/api/v1/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
