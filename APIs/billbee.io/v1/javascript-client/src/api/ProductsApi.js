/**
 * Billbee API
 * Documentation of the Billbee REST API to connect a Billbee account to external aplications.  ## Endpoint  The Billbee API endpoint base url is https://api.billbee.io/api/v1   ## Activation  You have to enable the API in the settings of your Billbee account. In addition you need a Billbee API Key identifying the application you develop. To get an API key, send a mail to support@billbee.io and send us a short note about what you are building.  ## Authorization & security  Because you can access private data with the Billbee API, every request has to be sent over https and must  * Contain a valid API Key identifying the application/developer. It has to be sent as the HTTP header X-Billbee-Api-Key * Contain a valid user login with billbee username and api password in form of a basic auth HTTP header  ## Throttling  Each endpoint has a throttle of max 2 requests per second per combination of API Key and Billbee user.  When you exceed these 2 calls, the API will return a HTTP 429 status code  
 *
 * The version of the OpenAPI document: v1
 * Contact: support@billbee.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BillbeeInterfacesBillbeeAPIModelArticleApiModel from '../model/BillbeeInterfacesBillbeeAPIModelArticleApiModel';
import BillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel from '../model/BillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel';
import BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel from '../model/BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel';
import BillbeeInterfacesBillbeeAPIModelUpdateStockCodeApiModel from '../model/BillbeeInterfacesBillbeeAPIModelUpdateStockCodeApiModel';
import RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelArticleApiCustomFieldDefinitionModel from '../model/RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelArticleApiCustomFieldDefinitionModel';
import RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelArticleApiModel from '../model/RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelArticleApiModel';
import RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleApiCustomFieldDefinitionModel from '../model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleApiCustomFieldDefinitionModel';
import RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleApiModel from '../model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleApiModel';
import RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel from '../model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel';
import RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelDeletedImagesModel from '../model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelDeletedImagesModel';
import RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelGetReservedAmountResponseData from '../model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelGetReservedAmountResponseData';
import RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelUpdateStockCodeResponseData from '../model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelUpdateStockCodeResponseData';
import RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelUpdateStockResponseData from '../model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelUpdateStockResponseData';
import RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel from '../model/RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel';
import RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel from '../model/RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel';
import RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelStockResponseData from '../model/RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelStockResponseData';
import RechnungsdruckWebAppControllersApiSearchControllerSearchModel from '../model/RechnungsdruckWebAppControllersApiSearchControllerSearchModel';

/**
* Products service.
* @module api/ProductsApi
* @version v1
*/
export default class ProductsApi {

    /**
    * Constructs a new ProductsApi. 
    * @alias module:api/ProductsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the articleCreateArticle operation.
     * @callback module:api/ProductsApi~articleCreateArticleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new product
     * @param {module:model/BillbeeInterfacesBillbeeAPIModelArticleApiModel} billbeeInterfacesBillbeeAPIModelArticleApiModel 
     * @param {module:api/ProductsApi~articleCreateArticleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    articleCreateArticle(billbeeInterfacesBillbeeAPIModelArticleApiModel, callback) {
      let postBody = billbeeInterfacesBillbeeAPIModelArticleApiModel;
      // verify the required parameter 'billbeeInterfacesBillbeeAPIModelArticleApiModel' is set
      if (billbeeInterfacesBillbeeAPIModelArticleApiModel === undefined || billbeeInterfacesBillbeeAPIModelArticleApiModel === null) {
        throw new Error("Missing the required parameter 'billbeeInterfacesBillbeeAPIModelArticleApiModel' when calling articleCreateArticle");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleDeleteArticle operation.
     * @callback module:api/ProductsApi~articleDeleteArticleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a product
     * @param {Number} id The id of the Product
     * @param {module:api/ProductsApi~articleDeleteArticleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    articleDeleteArticle(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling articleDeleteArticle");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/products/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleDeleteImage operation.
     * @callback module:api/ProductsApi~articleDeleteImageCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a single image by id
     * @param {Number} imageId The image id
     * @param {module:api/ProductsApi~articleDeleteImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    articleDeleteImage(imageId, callback) {
      let postBody = null;
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling articleDeleteImage");
      }

      let pathParams = {
        'imageId': imageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/products/images/{imageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleDeleteImageFromProduct operation.
     * @callback module:api/ProductsApi~articleDeleteImageFromProductCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a single image from a product
     * @param {Number} productId The product id
     * @param {Number} imageId The image id
     * @param {module:api/ProductsApi~articleDeleteImageFromProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    articleDeleteImageFromProduct(productId, imageId, callback) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling articleDeleteImageFromProduct");
      }
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling articleDeleteImageFromProduct");
      }

      let pathParams = {
        'productId': productId,
        'imageId': imageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/products/{productId}/images/{imageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleDeleteImages operation.
     * @callback module:api/ProductsApi~articleDeleteImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelDeletedImagesModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete multiple images by id
     * @param {Array.<Number>} requestBody 
     * @param {module:api/ProductsApi~articleDeleteImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelDeletedImagesModel}
     */
    articleDeleteImages(requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling articleDeleteImages");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelDeletedImagesModel;
      return this.apiClient.callApi(
        '/api/v1/products/images/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleGetArticle operation.
     * @callback module:api/ProductsApi~articleGetArticleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleApiModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries a single article by id or by sku
     * @param {String} id The id or the sku of the article to query
     * @param {Object} opts Optional parameters
     * @param {String} [lookupBy] Either the value id, ean or the value sku to specify the meaning of the id parameter.
     * @param {module:api/ProductsApi~articleGetArticleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleApiModel}
     */
    articleGetArticle(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling articleGetArticle");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'lookupBy': opts['lookupBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleApiModel;
      return this.apiClient.callApi(
        '/api/v1/products/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleGetCategory operation.
     * @callback module:api/ProductsApi~articleGetCategoryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GEts a list of all defined categories
     * @param {module:api/ProductsApi~articleGetCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    articleGetCategory(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/products/category', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleGetCustomField operation.
     * @callback module:api/ProductsApi~articleGetCustomFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleApiCustomFieldDefinitionModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries a single custom field
     * @param {Number} id The id of the custom field to query
     * @param {module:api/ProductsApi~articleGetCustomFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleApiCustomFieldDefinitionModel}
     */
    articleGetCustomField(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling articleGetCustomField");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleApiCustomFieldDefinitionModel;
      return this.apiClient.callApi(
        '/api/v1/products/custom-fields/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleGetCustomFields operation.
     * @callback module:api/ProductsApi~articleGetCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelArticleApiCustomFieldDefinitionModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries a list of all custom fields
     * @param {Object} opts Optional parameters
     * @param {Number} [page] 
     * @param {Number} [pageSize] 
     * @param {module:api/ProductsApi~articleGetCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelArticleApiCustomFieldDefinitionModel}
     */
    articleGetCustomFields(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelArticleApiCustomFieldDefinitionModel;
      return this.apiClient.callApi(
        '/api/v1/products/custom-fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleGetImage operation.
     * @callback module:api/ProductsApi~articleGetImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single image by id
     * @param {Number} imageId The Id of the image
     * @param {module:api/ProductsApi~articleGetImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel}
     */
    articleGetImage(imageId, callback) {
      let postBody = null;
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling articleGetImage");
      }

      let pathParams = {
        'imageId': imageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel;
      return this.apiClient.callApi(
        '/api/v1/products/images/{imageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleGetImageFromProduct operation.
     * @callback module:api/ProductsApi~articleGetImageFromProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single image by id
     * @param {Number} productId The Id of the product
     * @param {Number} imageId The Id of the image
     * @param {module:api/ProductsApi~articleGetImageFromProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel}
     */
    articleGetImageFromProduct(productId, imageId, callback) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling articleGetImageFromProduct");
      }
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling articleGetImageFromProduct");
      }

      let pathParams = {
        'productId': productId,
        'imageId': imageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel;
      return this.apiClient.callApi(
        '/api/v1/products/{productId}/images/{imageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleGetImages operation.
     * @callback module:api/ProductsApi~articleGetImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all images of the product
     * @param {Number} productId The Id of the product
     * @param {module:api/ProductsApi~articleGetImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel}
     */
    articleGetImages(productId, callback) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling articleGetImages");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel;
      return this.apiClient.callApi(
        '/api/v1/products/{productId}/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleGetList operation.
     * @callback module:api/ProductsApi~articleGetListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelArticleApiModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all products
     * @param {Object} opts Optional parameters
     * @param {Number} [page] The current page to request starting with 1
     * @param {Number} [pageSize] The pagesize for the result list. Values between 1 and 250 are allowed
     * @param {Date} [minCreatedAt] Optional the oldest create date of the articles to be returned
     * @param {Number} [minimumBillBeeArticleId] 
     * @param {Number} [maximumBillBeeArticleId] 
     * @param {module:api/ProductsApi~articleGetListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelArticleApiModel}
     */
    articleGetList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'minCreatedAt': opts['minCreatedAt'],
        'minimumBillBeeArticleId': opts['minimumBillBeeArticleId'],
        'maximumBillBeeArticleId': opts['maximumBillBeeArticleId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RechnungsdruckWebAppControllersApiApiPagedResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelArticleApiModel;
      return this.apiClient.callApi(
        '/api/v1/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleGetPatchableFields operation.
     * @callback module:api/ProductsApi~articleGetPatchableFieldsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of fields which can be updated with the patch call
     * @param {module:api/ProductsApi~articleGetPatchableFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    articleGetPatchableFields(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/products/PatchableFields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleGetReservedAmount operation.
     * @callback module:api/ProductsApi~articleGetReservedAmountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelGetReservedAmountResponseData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries the reserved amount for a single article by id or by sku
     * @param {String} id The id or the sku of the article to query
     * @param {Object} opts Optional parameters
     * @param {String} [lookupBy] Either the value id or the value sku to specify the meaning of the id parameter
     * @param {Number} [stockId] Optional the stock id if the multi stock feature is enabled
     * @param {module:api/ProductsApi~articleGetReservedAmountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelGetReservedAmountResponseData}
     */
    articleGetReservedAmount(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling articleGetReservedAmount");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'lookupBy': opts['lookupBy'],
        'stockId': opts['stockId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelGetReservedAmountResponseData;
      return this.apiClient.callApi(
        '/api/v1/products/reservedamount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleGetStocks operation.
     * @callback module:api/ProductsApi~articleGetStocksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelStockResponseData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query all defined stock locations
     * @param {module:api/ProductsApi~articleGetStocksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelStockResponseData}
     */
    articleGetStocks(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = RechnungsdruckWebAppControllersApiApiResultSystemCollectionsGenericListBillbeeInterfacesBillbeeAPIModelStockResponseData;
      return this.apiClient.callApi(
        '/api/v1/products/stocks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articlePatchArticle operation.
     * @callback module:api/ProductsApi~articlePatchArticleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates one or more fields of a product
     * @param {Number} id The id of the Product
     * @param {Object.<String, Object>} body 
     * @param {module:api/ProductsApi~articlePatchArticleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    articlePatchArticle(id, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling articlePatchArticle");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling articlePatchArticle");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/products/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articlePutImage operation.
     * @callback module:api/ProductsApi~articlePutImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or update an existing image of a product
     * @param {Number} productId The product id
     * @param {Number} imageId The image id. If you pass 0, the image will be added
     * @param {module:model/BillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel} billbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel The ArticleApiImageModel
     * @param {module:api/ProductsApi~articlePutImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel}
     */
    articlePutImage(productId, imageId, billbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel, callback) {
      let postBody = billbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling articlePutImage");
      }
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling articlePutImage");
      }
      // verify the required parameter 'billbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel' is set
      if (billbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel === undefined || billbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel === null) {
        throw new Error("Missing the required parameter 'billbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel' when calling articlePutImage");
      }

      let pathParams = {
        'productId': productId,
        'imageId': imageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel;
      return this.apiClient.callApi(
        '/api/v1/products/{productId}/images/{imageId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articlePutImages operation.
     * @callback module:api/ProductsApi~articlePutImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add multiple images to a product or replace the product images by the given images
     * @param {Number} productId The id of the product
     * @param {Array.<module:model/BillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel>} billbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel An array of ArticleApiImageModel
     * @param {Object} opts Optional parameters
     * @param {Boolean} [replace] If you pass true, the images will be replaced by the passed images. Otherwise the passed images will be appended to the product.
     * @param {module:api/ProductsApi~articlePutImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel}
     */
    articlePutImages(productId, billbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel, opts, callback) {
      opts = opts || {};
      let postBody = billbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling articlePutImages");
      }
      // verify the required parameter 'billbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel' is set
      if (billbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel === undefined || billbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel === null) {
        throw new Error("Missing the required parameter 'billbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel' when calling articlePutImages");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'replace': opts['replace']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelArticleImageRelationApiModel;
      return this.apiClient.callApi(
        '/api/v1/products/{productId}/images', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleUpdateStock operation.
     * @callback module:api/ProductsApi~articleUpdateStockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelUpdateStockResponseData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the stock qty of an article
     * The article is specified by sku. You have to send the absolute value for the current stock
     * @param {module:model/BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel} billbeeInterfacesBillbeeAPIModelUpdateStockApiModel 
     * @param {module:api/ProductsApi~articleUpdateStockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelUpdateStockResponseData}
     */
    articleUpdateStock(billbeeInterfacesBillbeeAPIModelUpdateStockApiModel, callback) {
      let postBody = billbeeInterfacesBillbeeAPIModelUpdateStockApiModel;
      // verify the required parameter 'billbeeInterfacesBillbeeAPIModelUpdateStockApiModel' is set
      if (billbeeInterfacesBillbeeAPIModelUpdateStockApiModel === undefined || billbeeInterfacesBillbeeAPIModelUpdateStockApiModel === null) {
        throw new Error("Missing the required parameter 'billbeeInterfacesBillbeeAPIModelUpdateStockApiModel' when calling articleUpdateStock");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelUpdateStockResponseData;
      return this.apiClient.callApi(
        '/api/v1/products/updatestock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleUpdateStockCode operation.
     * @callback module:api/ProductsApi~articleUpdateStockCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelUpdateStockCodeResponseData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the stock code of an article
     * @param {module:model/BillbeeInterfacesBillbeeAPIModelUpdateStockCodeApiModel} billbeeInterfacesBillbeeAPIModelUpdateStockCodeApiModel 
     * @param {module:api/ProductsApi~articleUpdateStockCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelUpdateStockCodeResponseData}
     */
    articleUpdateStockCode(billbeeInterfacesBillbeeAPIModelUpdateStockCodeApiModel, callback) {
      let postBody = billbeeInterfacesBillbeeAPIModelUpdateStockCodeApiModel;
      // verify the required parameter 'billbeeInterfacesBillbeeAPIModelUpdateStockCodeApiModel' is set
      if (billbeeInterfacesBillbeeAPIModelUpdateStockCodeApiModel === undefined || billbeeInterfacesBillbeeAPIModelUpdateStockCodeApiModel === null) {
        throw new Error("Missing the required parameter 'billbeeInterfacesBillbeeAPIModelUpdateStockCodeApiModel' when calling articleUpdateStockCode");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelUpdateStockCodeResponseData;
      return this.apiClient.callApi(
        '/api/v1/products/updatestockcode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleUpdateStockMultiple operation.
     * @callback module:api/ProductsApi~articleUpdateStockMultipleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelUpdateStockResponseData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the stock qty for multiple articles at once
     * @param {Array.<module:model/BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel>} billbeeInterfacesBillbeeAPIModelUpdateStockApiModel 
     * @param {module:api/ProductsApi~articleUpdateStockMultipleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelUpdateStockResponseData>}
     */
    articleUpdateStockMultiple(billbeeInterfacesBillbeeAPIModelUpdateStockApiModel, callback) {
      let postBody = billbeeInterfacesBillbeeAPIModelUpdateStockApiModel;
      // verify the required parameter 'billbeeInterfacesBillbeeAPIModelUpdateStockApiModel' is set
      if (billbeeInterfacesBillbeeAPIModelUpdateStockApiModel === undefined || billbeeInterfacesBillbeeAPIModelUpdateStockApiModel === null) {
        throw new Error("Missing the required parameter 'billbeeInterfacesBillbeeAPIModelUpdateStockApiModel' when calling articleUpdateStockMultiple");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [RechnungsdruckWebAppControllersApiApiResultBillbeeInterfacesBillbeeAPIModelUpdateStockResponseData];
      return this.apiClient.callApi(
        '/api/v1/products/updatestockmultiple', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchSearch operation.
     * @callback module:api/ProductsApi~searchSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for products, customers and orders.  Type can be \"order\", \"product\" and / or \"customer\"  Term can contains lucene query syntax
     * @param {module:model/RechnungsdruckWebAppControllersApiSearchControllerSearchModel} rechnungsdruckWebAppControllersApiSearchControllerSearchModel 
     * @param {module:api/ProductsApi~searchSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel}
     */
    searchSearch(rechnungsdruckWebAppControllersApiSearchControllerSearchModel, callback) {
      let postBody = rechnungsdruckWebAppControllersApiSearchControllerSearchModel;
      // verify the required parameter 'rechnungsdruckWebAppControllersApiSearchControllerSearchModel' is set
      if (rechnungsdruckWebAppControllersApiSearchControllerSearchModel === undefined || rechnungsdruckWebAppControllersApiSearchControllerSearchModel === null) {
        throw new Error("Missing the required parameter 'rechnungsdruckWebAppControllersApiSearchControllerSearchModel' when calling searchSearch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = RechnungsdruckWebAppControllersApiApiResultRechnungsdruckWebAppControllersApiSearchControllerSearchResultsModel;
      return this.apiClient.callApi(
        '/api/v1/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
