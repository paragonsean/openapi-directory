# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_stock: float=None, message: str=None, old_stock: float=None, sku: str=None, unfulfilled_amount: float=None):
        """BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData - a model defined in OpenAPI

        :param current_stock: The current_stock of this BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData.
        :param message: The message of this BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData.
        :param old_stock: The old_stock of this BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData.
        :param sku: The sku of this BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData.
        :param unfulfilled_amount: The unfulfilled_amount of this BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData.
        """
        self.openapi_types = {
            'current_stock': float,
            'message': str,
            'old_stock': float,
            'sku': str,
            'unfulfilled_amount': float
        }

        self.attribute_map = {
            'current_stock': 'CurrentStock',
            'message': 'Message',
            'old_stock': 'OldStock',
            'sku': 'SKU',
            'unfulfilled_amount': 'UnfulfilledAmount'
        }

        self._current_stock = current_stock
        self._message = message
        self._old_stock = old_stock
        self._sku = sku
        self._unfulfilled_amount = unfulfilled_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Billbee.Interfaces.BillbeeAPI.Model.UpdateStockResponseData of this BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_stock(self):
        """Gets the current_stock of this BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData.

        The new value for current stock after the update

        :return: The current_stock of this BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData.
        :rtype: float
        """
        return self._current_stock

    @current_stock.setter
    def current_stock(self, current_stock):
        """Sets the current_stock of this BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData.

        The new value for current stock after the update

        :param current_stock: The current_stock of this BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData.
        :type current_stock: float
        """

        self._current_stock = current_stock

    @property
    def message(self):
        """Gets the message of this BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData.

        A human readable message that explains the result of the operation

        :return: The message of this BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData.

        A human readable message that explains the result of the operation

        :param message: The message of this BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData.
        :type message: str
        """

        self._message = message

    @property
    def old_stock(self):
        """Gets the old_stock of this BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData.

        The old value for current stock before the update

        :return: The old_stock of this BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData.
        :rtype: float
        """
        return self._old_stock

    @old_stock.setter
    def old_stock(self, old_stock):
        """Sets the old_stock of this BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData.

        The old value for current stock before the update

        :param old_stock: The old_stock of this BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData.
        :type old_stock: float
        """

        self._old_stock = old_stock

    @property
    def sku(self):
        """Gets the sku of this BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData.

        The SKU of the article to update the current stock

        :return: The sku of this BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData.

        The SKU of the article to update the current stock

        :param sku: The sku of this BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData.
        :type sku: str
        """

        self._sku = sku

    @property
    def unfulfilled_amount(self):
        """Gets the unfulfilled_amount of this BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData.

        The value of the unfulfilled amount (reserved) of the article

        :return: The unfulfilled_amount of this BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData.
        :rtype: float
        """
        return self._unfulfilled_amount

    @unfulfilled_amount.setter
    def unfulfilled_amount(self, unfulfilled_amount):
        """Sets the unfulfilled_amount of this BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData.

        The value of the unfulfilled amount (reserved) of the article

        :param unfulfilled_amount: The unfulfilled_amount of this BillbeeInterfacesBillbeeAPIModelUpdateStockResponseData.
        :type unfulfilled_amount: float
        """

        self._unfulfilled_amount = unfulfilled_amount
