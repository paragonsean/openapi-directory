# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, autosubtract_reserved_amount: bool=None, billbee_id: int=None, delta_quantity: float=None, force_send_stock_to_shops: bool=None, new_quantity: float=None, old_quantity: float=None, reason: str=None, sku: str=None, stock_id: int=None):
        """BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel - a model defined in OpenAPI

        :param autosubtract_reserved_amount: The autosubtract_reserved_amount of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        :param billbee_id: The billbee_id of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        :param delta_quantity: The delta_quantity of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        :param force_send_stock_to_shops: The force_send_stock_to_shops of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        :param new_quantity: The new_quantity of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        :param old_quantity: The old_quantity of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        :param reason: The reason of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        :param sku: The sku of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        :param stock_id: The stock_id of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        """
        self.openapi_types = {
            'autosubtract_reserved_amount': bool,
            'billbee_id': int,
            'delta_quantity': float,
            'force_send_stock_to_shops': bool,
            'new_quantity': float,
            'old_quantity': float,
            'reason': str,
            'sku': str,
            'stock_id': int
        }

        self.attribute_map = {
            'autosubtract_reserved_amount': 'AutosubtractReservedAmount',
            'billbee_id': 'BillbeeId',
            'delta_quantity': 'DeltaQuantity',
            'force_send_stock_to_shops': 'ForceSendStockToShops',
            'new_quantity': 'NewQuantity',
            'old_quantity': 'OldQuantity',
            'reason': 'Reason',
            'sku': 'Sku',
            'stock_id': 'StockId'
        }

        self._autosubtract_reserved_amount = autosubtract_reserved_amount
        self._billbee_id = billbee_id
        self._delta_quantity = delta_quantity
        self._force_send_stock_to_shops = force_send_stock_to_shops
        self._new_quantity = new_quantity
        self._old_quantity = old_quantity
        self._reason = reason
        self._sku = sku
        self._stock_id = stock_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Billbee.Interfaces.BillbeeAPI.Model.UpdateStockApiModel of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def autosubtract_reserved_amount(self):
        """Gets the autosubtract_reserved_amount of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.

        Automatically reduce the NewQuantity by the currently not fulfilled amount

        :return: The autosubtract_reserved_amount of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        :rtype: bool
        """
        return self._autosubtract_reserved_amount

    @autosubtract_reserved_amount.setter
    def autosubtract_reserved_amount(self, autosubtract_reserved_amount):
        """Sets the autosubtract_reserved_amount of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.

        Automatically reduce the NewQuantity by the currently not fulfilled amount

        :param autosubtract_reserved_amount: The autosubtract_reserved_amount of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        :type autosubtract_reserved_amount: bool
        """

        self._autosubtract_reserved_amount = autosubtract_reserved_amount

    @property
    def billbee_id(self):
        """Gets the billbee_id of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.

        Optional the ID of the Billbee product to update

        :return: The billbee_id of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        :rtype: int
        """
        return self._billbee_id

    @billbee_id.setter
    def billbee_id(self, billbee_id):
        """Sets the billbee_id of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.

        Optional the ID of the Billbee product to update

        :param billbee_id: The billbee_id of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        :type billbee_id: int
        """

        self._billbee_id = billbee_id

    @property
    def delta_quantity(self):
        """Gets the delta_quantity of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.

        This parameter is currently ignored

        :return: The delta_quantity of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        :rtype: float
        """
        return self._delta_quantity

    @delta_quantity.setter
    def delta_quantity(self, delta_quantity):
        """Sets the delta_quantity of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.

        This parameter is currently ignored

        :param delta_quantity: The delta_quantity of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        :type delta_quantity: float
        """

        self._delta_quantity = delta_quantity

    @property
    def force_send_stock_to_shops(self):
        """Gets the force_send_stock_to_shops of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.

        If true, every sent stockchange is stored and transmitted to the connected shop, even if the value has not changed

        :return: The force_send_stock_to_shops of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        :rtype: bool
        """
        return self._force_send_stock_to_shops

    @force_send_stock_to_shops.setter
    def force_send_stock_to_shops(self, force_send_stock_to_shops):
        """Sets the force_send_stock_to_shops of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.

        If true, every sent stockchange is stored and transmitted to the connected shop, even if the value has not changed

        :param force_send_stock_to_shops: The force_send_stock_to_shops of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        :type force_send_stock_to_shops: bool
        """

        self._force_send_stock_to_shops = force_send_stock_to_shops

    @property
    def new_quantity(self):
        """Gets the new_quantity of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.

        The new absolute stock quantity for the product you want to set

        :return: The new_quantity of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        :rtype: float
        """
        return self._new_quantity

    @new_quantity.setter
    def new_quantity(self, new_quantity):
        """Sets the new_quantity of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.

        The new absolute stock quantity for the product you want to set

        :param new_quantity: The new_quantity of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        :type new_quantity: float
        """

        self._new_quantity = new_quantity

    @property
    def old_quantity(self):
        """Gets the old_quantity of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.

        This parameter is currently ignored

        :return: The old_quantity of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        :rtype: float
        """
        return self._old_quantity

    @old_quantity.setter
    def old_quantity(self, old_quantity):
        """Sets the old_quantity of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.

        This parameter is currently ignored

        :param old_quantity: The old_quantity of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        :type old_quantity: float
        """

        self._old_quantity = old_quantity

    @property
    def reason(self):
        """Gets the reason of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.

        Optional a reason text for the stock update

        :return: The reason of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.

        Optional a reason text for the stock update

        :param reason: The reason of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        :type reason: str
        """

        self._reason = reason

    @property
    def sku(self):
        """Gets the sku of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.

        The SKU of the product to update

        :return: The sku of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.

        The SKU of the product to update

        :param sku: The sku of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        :type sku: str
        """

        self._sku = sku

    @property
    def stock_id(self):
        """Gets the stock_id of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.

        Optional the stock id if the feature multi stock is activated

        :return: The stock_id of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        :rtype: int
        """
        return self._stock_id

    @stock_id.setter
    def stock_id(self, stock_id):
        """Sets the stock_id of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.

        Optional the stock id if the feature multi stock is activated

        :param stock_id: The stock_id of this BillbeeInterfacesBillbeeAPIModelUpdateStockApiModel.
        :type stock_id: int
        """

        self._stock_id = stock_id
