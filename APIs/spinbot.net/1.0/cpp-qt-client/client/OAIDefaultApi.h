/**
 * Article Rewriter and Article Extractor API
 * Spinbot.net propose a new solution based on high technologies for faster article spinner and extractor that you will love to use it. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: admin@spinbot.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  key QString [required]
    */
    virtual void getInfo(const QString &key);

    /**
    * @param[in]  key QString [required]
    * @param[in]  url QString [required]
    * @param[in]  faster_mode QString [optional]
    */
    virtual void postArticle(const QString &key, const QString &url, const ::OpenAPI::OptionalParam<QString> &faster_mode = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  key QString [required]
    * @param[in]  text QString [required]
    * @param[in]  keep QString [required]
    * @param[in]  accuracy QString [required]
    */
    virtual void postPrettySpinner(const QString &key, const QString &text, const QString &keep, const QString &accuracy);

    /**
    * @param[in]  key QString [required]
    * @param[in]  text QString [required]
    */
    virtual void postSpinner(const QString &key, const QString &text);

    /**
    * @param[in]  key QString [required]
    * @param[in]  text QString [required]
    * @param[in]  full_mode QString [optional]
    */
    virtual void postSpintax(const QString &key, const QString &text, const ::OpenAPI::OptionalParam<QString> &full_mode = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getInfoCallback(OAIHttpRequestWorker *worker);
    void postArticleCallback(OAIHttpRequestWorker *worker);
    void postPrettySpinnerCallback(OAIHttpRequestWorker *worker);
    void postSpinnerCallback(OAIHttpRequestWorker *worker);
    void postSpintaxCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getInfoSignal(OAIObject summary);
    void postArticleSignal(OAIObject summary);
    void postPrettySpinnerSignal(OAIObject summary);
    void postSpinnerSignal(OAIObject summary);
    void postSpintaxSignal(OAIObject summary);


    void getInfoSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void postArticleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void postPrettySpinnerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void postSpinnerSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void postSpintaxSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use getInfoSignalError() instead")
    void getInfoSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInfoSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postArticleSignalError() instead")
    void postArticleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postArticleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPrettySpinnerSignalError() instead")
    void postPrettySpinnerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPrettySpinnerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSpinnerSignalError() instead")
    void postSpinnerSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postSpinnerSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSpintaxSignalError() instead")
    void postSpintaxSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postSpintaxSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getInfoSignalErrorFull() instead")
    void getInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postArticleSignalErrorFull() instead")
    void postArticleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postArticleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPrettySpinnerSignalErrorFull() instead")
    void postPrettySpinnerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPrettySpinnerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSpinnerSignalErrorFull() instead")
    void postSpinnerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSpinnerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSpintaxSignalErrorFull() instead")
    void postSpintaxSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSpintaxSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
