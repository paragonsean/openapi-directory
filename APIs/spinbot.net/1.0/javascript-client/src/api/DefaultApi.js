/**
 * Article Rewriter and Article Extractor API
 * Spinbot.net propose a new solution based on high technologies for faster article spinner and extractor that you will love to use it. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: admin@spinbot.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getInfo operation.
     * @callback module:api/DefaultApi~getInfoCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the user credit information.
     * Return the user credit information.
     * @param {String} key Your api key
     * @param {module:api/DefaultApi~getInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getInfo(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/acc', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postArticle operation.
     * @callback module:api/DefaultApi~postArticleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extracting the main article of the given URL.
     * Extracting the main article of the given URL. The response is in JSON format.
     * @param {String} key Your spinbot API key
     * @param {String} url The url of target article
     * @param {Object} opts Optional parameters
     * @param {String} [fasterMode] you can set this input value to 1 to skip detecting the size (width and height in pixel) of all the images inside the extracted article. The response time of your request will be shortened if you set this input value to 1.
     * @param {module:api/DefaultApi~postArticleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    postArticle(key, url, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling postArticle");
      }
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling postArticle");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'key': key,
        'url': url,
        'faster_mode': opts['fasterMode']
      };

      let authNames = ['key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/article', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPrettySpinner operation.
     * @callback module:api/DefaultApi~postPrettySpinnerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Human readable auto rewrite your article.
     * Human readable auto rewrite your article. The response is in JSON format.
     * @param {String} key Your spinbot API key
     * @param {String} text Input article that need to be rewrited.
     * @param {String} keep Keep words/phrases, separated by newline, those remain unchanged during the rewrite process.
     * @param {String} accuracy Rewrite accuracy profile, accepted values are very-low, low, medium, high, very-high
     * @param {module:api/DefaultApi~postPrettySpinnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    postPrettySpinner(key, text, keep, accuracy, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling postPrettySpinner");
      }
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling postPrettySpinner");
      }
      // verify the required parameter 'keep' is set
      if (keep === undefined || keep === null) {
        throw new Error("Missing the required parameter 'keep' when calling postPrettySpinner");
      }
      // verify the required parameter 'accuracy' is set
      if (accuracy === undefined || accuracy === null) {
        throw new Error("Missing the required parameter 'accuracy' when calling postPrettySpinner");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'key': key,
        'text': text,
        'keep': keep,
        'accuracy': accuracy
      };

      let authNames = ['key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/pretty-spinner', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSpinner operation.
     * @callback module:api/DefaultApi~postSpinnerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rewriting (spinning) your input article.
     * Rewriting (spinning) you input article. The response is in JSON format.
     * @param {String} key Your spinbot API key
     * @param {String} text Input article that need to be rewrited.
     * @param {module:api/DefaultApi~postSpinnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    postSpinner(key, text, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling postSpinner");
      }
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling postSpinner");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'key': key,
        'text': text
      };

      let authNames = ['key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/spinner', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSpintax operation.
     * @callback module:api/DefaultApi~postSpintaxCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate Spintax format for the input article
     * Generate Spintax format for the input article, so you can rewrite it yourself. The response is in JSON format.
     * @param {String} key Your spinbot API key
     * @param {String} text Input article that need to be rewritten.
     * @param {Object} opts Optional parameters
     * @param {String} [fullMode] Full mode option.
     * @param {module:api/DefaultApi~postSpintaxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    postSpintax(key, text, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling postSpintax");
      }
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling postSpintax");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'key': key,
        'text': text,
        'full_mode': opts['fullMode']
      };

      let authNames = ['key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/spintax', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
