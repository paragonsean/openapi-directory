/*
 * Article Rewriter and Article Extractor API
 * Spinbot.net propose a new solution based on high technologies for faster article spinner and extractor that you will love to use it. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: admin@spinbot.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getInfo
     * @param key Your api key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInfoCall(String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/acc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInfoValidateBeforeCall(String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getInfo(Async)");
        }

        return getInfoCall(key, _callback);

    }

    /**
     * Return the user credit information.
     * Return the user credit information.
     * @param key Your api key (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public Object getInfo(String key) throws ApiException {
        ApiResponse<Object> localVarResp = getInfoWithHttpInfo(key);
        return localVarResp.getData();
    }

    /**
     * Return the user credit information.
     * Return the user credit information.
     * @param key Your api key (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getInfoWithHttpInfo(String key) throws ApiException {
        okhttp3.Call localVarCall = getInfoValidateBeforeCall(key, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the user credit information. (asynchronously)
     * Return the user credit information.
     * @param key Your api key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInfoAsync(String key, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInfoValidateBeforeCall(key, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postArticle
     * @param key Your spinbot API key (required)
     * @param url The url of target article (required)
     * @param fasterMode you can set this input value to 1 to skip detecting the size (width and height in pixel) of all the images inside the extracted article. The response time of your request will be shortened if you set this input value to 1. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postArticleCall(String key, String url, String fasterMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/article";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarFormParams.put("key", key);
        }

        if (url != null) {
            localVarFormParams.put("url", url);
        }

        if (fasterMode != null) {
            localVarFormParams.put("faster_mode", fasterMode);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postArticleValidateBeforeCall(String key, String url, String fasterMode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling postArticle(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling postArticle(Async)");
        }

        return postArticleCall(key, url, fasterMode, _callback);

    }

    /**
     * Extracting the main article of the given URL.
     * Extracting the main article of the given URL. The response is in JSON format.
     * @param key Your spinbot API key (required)
     * @param url The url of target article (required)
     * @param fasterMode you can set this input value to 1 to skip detecting the size (width and height in pixel) of all the images inside the extracted article. The response time of your request will be shortened if you set this input value to 1. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Object postArticle(String key, String url, String fasterMode) throws ApiException {
        ApiResponse<Object> localVarResp = postArticleWithHttpInfo(key, url, fasterMode);
        return localVarResp.getData();
    }

    /**
     * Extracting the main article of the given URL.
     * Extracting the main article of the given URL. The response is in JSON format.
     * @param key Your spinbot API key (required)
     * @param url The url of target article (required)
     * @param fasterMode you can set this input value to 1 to skip detecting the size (width and height in pixel) of all the images inside the extracted article. The response time of your request will be shortened if you set this input value to 1. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> postArticleWithHttpInfo(String key, String url, String fasterMode) throws ApiException {
        okhttp3.Call localVarCall = postArticleValidateBeforeCall(key, url, fasterMode, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Extracting the main article of the given URL. (asynchronously)
     * Extracting the main article of the given URL. The response is in JSON format.
     * @param key Your spinbot API key (required)
     * @param url The url of target article (required)
     * @param fasterMode you can set this input value to 1 to skip detecting the size (width and height in pixel) of all the images inside the extracted article. The response time of your request will be shortened if you set this input value to 1. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postArticleAsync(String key, String url, String fasterMode, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = postArticleValidateBeforeCall(key, url, fasterMode, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPrettySpinner
     * @param key Your spinbot API key (required)
     * @param text Input article that need to be rewrited. (required)
     * @param keep Keep words/phrases, separated by newline, those remain unchanged during the rewrite process. (required)
     * @param accuracy Rewrite accuracy profile, accepted values are very-low, low, medium, high, very-high (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPrettySpinnerCall(String key, String text, String keep, String accuracy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pretty-spinner";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarFormParams.put("key", key);
        }

        if (text != null) {
            localVarFormParams.put("text", text);
        }

        if (keep != null) {
            localVarFormParams.put("keep", keep);
        }

        if (accuracy != null) {
            localVarFormParams.put("accuracy", accuracy);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPrettySpinnerValidateBeforeCall(String key, String text, String keep, String accuracy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling postPrettySpinner(Async)");
        }

        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling postPrettySpinner(Async)");
        }

        // verify the required parameter 'keep' is set
        if (keep == null) {
            throw new ApiException("Missing the required parameter 'keep' when calling postPrettySpinner(Async)");
        }

        // verify the required parameter 'accuracy' is set
        if (accuracy == null) {
            throw new ApiException("Missing the required parameter 'accuracy' when calling postPrettySpinner(Async)");
        }

        return postPrettySpinnerCall(key, text, keep, accuracy, _callback);

    }

    /**
     * Human readable auto rewrite your article.
     * Human readable auto rewrite your article. The response is in JSON format.
     * @param key Your spinbot API key (required)
     * @param text Input article that need to be rewrited. (required)
     * @param keep Keep words/phrases, separated by newline, those remain unchanged during the rewrite process. (required)
     * @param accuracy Rewrite accuracy profile, accepted values are very-low, low, medium, high, very-high (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Object postPrettySpinner(String key, String text, String keep, String accuracy) throws ApiException {
        ApiResponse<Object> localVarResp = postPrettySpinnerWithHttpInfo(key, text, keep, accuracy);
        return localVarResp.getData();
    }

    /**
     * Human readable auto rewrite your article.
     * Human readable auto rewrite your article. The response is in JSON format.
     * @param key Your spinbot API key (required)
     * @param text Input article that need to be rewrited. (required)
     * @param keep Keep words/phrases, separated by newline, those remain unchanged during the rewrite process. (required)
     * @param accuracy Rewrite accuracy profile, accepted values are very-low, low, medium, high, very-high (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> postPrettySpinnerWithHttpInfo(String key, String text, String keep, String accuracy) throws ApiException {
        okhttp3.Call localVarCall = postPrettySpinnerValidateBeforeCall(key, text, keep, accuracy, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Human readable auto rewrite your article. (asynchronously)
     * Human readable auto rewrite your article. The response is in JSON format.
     * @param key Your spinbot API key (required)
     * @param text Input article that need to be rewrited. (required)
     * @param keep Keep words/phrases, separated by newline, those remain unchanged during the rewrite process. (required)
     * @param accuracy Rewrite accuracy profile, accepted values are very-low, low, medium, high, very-high (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPrettySpinnerAsync(String key, String text, String keep, String accuracy, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPrettySpinnerValidateBeforeCall(key, text, keep, accuracy, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSpinner
     * @param key Your spinbot API key (required)
     * @param text Input article that need to be rewrited. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSpinnerCall(String key, String text, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/spinner";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarFormParams.put("key", key);
        }

        if (text != null) {
            localVarFormParams.put("text", text);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSpinnerValidateBeforeCall(String key, String text, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling postSpinner(Async)");
        }

        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling postSpinner(Async)");
        }

        return postSpinnerCall(key, text, _callback);

    }

    /**
     * Rewriting (spinning) your input article.
     * Rewriting (spinning) you input article. The response is in JSON format.
     * @param key Your spinbot API key (required)
     * @param text Input article that need to be rewrited. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Object postSpinner(String key, String text) throws ApiException {
        ApiResponse<Object> localVarResp = postSpinnerWithHttpInfo(key, text);
        return localVarResp.getData();
    }

    /**
     * Rewriting (spinning) your input article.
     * Rewriting (spinning) you input article. The response is in JSON format.
     * @param key Your spinbot API key (required)
     * @param text Input article that need to be rewrited. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> postSpinnerWithHttpInfo(String key, String text) throws ApiException {
        okhttp3.Call localVarCall = postSpinnerValidateBeforeCall(key, text, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rewriting (spinning) your input article. (asynchronously)
     * Rewriting (spinning) you input article. The response is in JSON format.
     * @param key Your spinbot API key (required)
     * @param text Input article that need to be rewrited. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSpinnerAsync(String key, String text, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSpinnerValidateBeforeCall(key, text, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSpintax
     * @param key Your spinbot API key (required)
     * @param text Input article that need to be rewritten. (required)
     * @param fullMode Full mode option. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSpintaxCall(String key, String text, String fullMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/spintax";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarFormParams.put("key", key);
        }

        if (text != null) {
            localVarFormParams.put("text", text);
        }

        if (fullMode != null) {
            localVarFormParams.put("full_mode", fullMode);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSpintaxValidateBeforeCall(String key, String text, String fullMode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling postSpintax(Async)");
        }

        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling postSpintax(Async)");
        }

        return postSpintaxCall(key, text, fullMode, _callback);

    }

    /**
     * Generate Spintax format for the input article
     * Generate Spintax format for the input article, so you can rewrite it yourself. The response is in JSON format.
     * @param key Your spinbot API key (required)
     * @param text Input article that need to be rewritten. (required)
     * @param fullMode Full mode option. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Object postSpintax(String key, String text, String fullMode) throws ApiException {
        ApiResponse<Object> localVarResp = postSpintaxWithHttpInfo(key, text, fullMode);
        return localVarResp.getData();
    }

    /**
     * Generate Spintax format for the input article
     * Generate Spintax format for the input article, so you can rewrite it yourself. The response is in JSON format.
     * @param key Your spinbot API key (required)
     * @param text Input article that need to be rewritten. (required)
     * @param fullMode Full mode option. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> postSpintaxWithHttpInfo(String key, String text, String fullMode) throws ApiException {
        okhttp3.Call localVarCall = postSpintaxValidateBeforeCall(key, text, fullMode, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate Spintax format for the input article (asynchronously)
     * Generate Spintax format for the input article, so you can rewrite it yourself. The response is in JSON format.
     * @param key Your spinbot API key (required)
     * @param text Input article that need to be rewritten. (required)
     * @param fullMode Full mode option. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSpintaxAsync(String key, String text, String fullMode, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSpintaxValidateBeforeCall(key, text, fullMode, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
