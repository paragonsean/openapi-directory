# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.format import Format
from openapi_server.models.margin import Margin
from openapi_server.models.orientation import Orientation
from openapi_server import util


class CreateOrUpdateTemplateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, components: List[object]=None, css: str=None, footer_html: str=None, format: Format=None, header_html: str=None, margin: Margin=None, name: str=None, orientation: Orientation=None, preview_payload: object=None, template_html: str=None):
        """CreateOrUpdateTemplateRequest - a model defined in OpenAPI

        :param components: The components of this CreateOrUpdateTemplateRequest.
        :param css: The css of this CreateOrUpdateTemplateRequest.
        :param footer_html: The footer_html of this CreateOrUpdateTemplateRequest.
        :param format: The format of this CreateOrUpdateTemplateRequest.
        :param header_html: The header_html of this CreateOrUpdateTemplateRequest.
        :param margin: The margin of this CreateOrUpdateTemplateRequest.
        :param name: The name of this CreateOrUpdateTemplateRequest.
        :param orientation: The orientation of this CreateOrUpdateTemplateRequest.
        :param preview_payload: The preview_payload of this CreateOrUpdateTemplateRequest.
        :param template_html: The template_html of this CreateOrUpdateTemplateRequest.
        """
        self.openapi_types = {
            'components': List[object],
            'css': str,
            'footer_html': str,
            'format': Format,
            'header_html': str,
            'margin': Margin,
            'name': str,
            'orientation': Orientation,
            'preview_payload': object,
            'template_html': str
        }

        self.attribute_map = {
            'components': 'components',
            'css': 'css',
            'footer_html': 'footer_html',
            'format': 'format',
            'header_html': 'header_html',
            'margin': 'margin',
            'name': 'name',
            'orientation': 'orientation',
            'preview_payload': 'preview_payload',
            'template_html': 'template_html'
        }

        self._components = components
        self._css = css
        self._footer_html = footer_html
        self._format = format
        self._header_html = header_html
        self._margin = margin
        self._name = name
        self._orientation = orientation
        self._preview_payload = preview_payload
        self._template_html = template_html

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOrUpdateTemplateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateOrUpdateTemplateRequest of this CreateOrUpdateTemplateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def components(self):
        """Gets the components of this CreateOrUpdateTemplateRequest.


        :return: The components of this CreateOrUpdateTemplateRequest.
        :rtype: List[object]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this CreateOrUpdateTemplateRequest.


        :param components: The components of this CreateOrUpdateTemplateRequest.
        :type components: List[object]
        """
        if components is None:
            raise ValueError("Invalid value for `components`, must not be `None`")

        self._components = components

    @property
    def css(self):
        """Gets the css of this CreateOrUpdateTemplateRequest.


        :return: The css of this CreateOrUpdateTemplateRequest.
        :rtype: str
        """
        return self._css

    @css.setter
    def css(self, css):
        """Sets the css of this CreateOrUpdateTemplateRequest.


        :param css: The css of this CreateOrUpdateTemplateRequest.
        :type css: str
        """
        if css is None:
            raise ValueError("Invalid value for `css`, must not be `None`")

        self._css = css

    @property
    def footer_html(self):
        """Gets the footer_html of this CreateOrUpdateTemplateRequest.


        :return: The footer_html of this CreateOrUpdateTemplateRequest.
        :rtype: str
        """
        return self._footer_html

    @footer_html.setter
    def footer_html(self, footer_html):
        """Sets the footer_html of this CreateOrUpdateTemplateRequest.


        :param footer_html: The footer_html of this CreateOrUpdateTemplateRequest.
        :type footer_html: str
        """

        self._footer_html = footer_html

    @property
    def format(self):
        """Gets the format of this CreateOrUpdateTemplateRequest.


        :return: The format of this CreateOrUpdateTemplateRequest.
        :rtype: Format
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this CreateOrUpdateTemplateRequest.


        :param format: The format of this CreateOrUpdateTemplateRequest.
        :type format: Format
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")

        self._format = format

    @property
    def header_html(self):
        """Gets the header_html of this CreateOrUpdateTemplateRequest.


        :return: The header_html of this CreateOrUpdateTemplateRequest.
        :rtype: str
        """
        return self._header_html

    @header_html.setter
    def header_html(self, header_html):
        """Sets the header_html of this CreateOrUpdateTemplateRequest.


        :param header_html: The header_html of this CreateOrUpdateTemplateRequest.
        :type header_html: str
        """

        self._header_html = header_html

    @property
    def margin(self):
        """Gets the margin of this CreateOrUpdateTemplateRequest.


        :return: The margin of this CreateOrUpdateTemplateRequest.
        :rtype: Margin
        """
        return self._margin

    @margin.setter
    def margin(self, margin):
        """Sets the margin of this CreateOrUpdateTemplateRequest.


        :param margin: The margin of this CreateOrUpdateTemplateRequest.
        :type margin: Margin
        """

        self._margin = margin

    @property
    def name(self):
        """Gets the name of this CreateOrUpdateTemplateRequest.


        :return: The name of this CreateOrUpdateTemplateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateOrUpdateTemplateRequest.


        :param name: The name of this CreateOrUpdateTemplateRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def orientation(self):
        """Gets the orientation of this CreateOrUpdateTemplateRequest.


        :return: The orientation of this CreateOrUpdateTemplateRequest.
        :rtype: Orientation
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this CreateOrUpdateTemplateRequest.


        :param orientation: The orientation of this CreateOrUpdateTemplateRequest.
        :type orientation: Orientation
        """
        if orientation is None:
            raise ValueError("Invalid value for `orientation`, must not be `None`")

        self._orientation = orientation

    @property
    def preview_payload(self):
        """Gets the preview_payload of this CreateOrUpdateTemplateRequest.


        :return: The preview_payload of this CreateOrUpdateTemplateRequest.
        :rtype: object
        """
        return self._preview_payload

    @preview_payload.setter
    def preview_payload(self, preview_payload):
        """Sets the preview_payload of this CreateOrUpdateTemplateRequest.


        :param preview_payload: The preview_payload of this CreateOrUpdateTemplateRequest.
        :type preview_payload: object
        """
        if preview_payload is None:
            raise ValueError("Invalid value for `preview_payload`, must not be `None`")

        self._preview_payload = preview_payload

    @property
    def template_html(self):
        """Gets the template_html of this CreateOrUpdateTemplateRequest.


        :return: The template_html of this CreateOrUpdateTemplateRequest.
        :rtype: str
        """
        return self._template_html

    @template_html.setter
    def template_html(self, template_html):
        """Sets the template_html of this CreateOrUpdateTemplateRequest.


        :param template_html: The template_html of this CreateOrUpdateTemplateRequest.
        :type template_html: str
        """
        if template_html is None:
            raise ValueError("Invalid value for `template_html`, must not be `None`")

        self._template_html = template_html
