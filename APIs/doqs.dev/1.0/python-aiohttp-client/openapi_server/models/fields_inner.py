# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bounding_box import BoundingBox
from openapi_server.models.check_box_field import CheckBoxField
from openapi_server.models.date_field import DateField
from openapi_server.models.eval import Eval
from openapi_server.models.font import Font
from openapi_server.models.horizontal_align import HorizontalAlign
from openapi_server.models.image_anchor import ImageAnchor
from openapi_server.models.image_field import ImageField
from openapi_server.models.text_field import TextField
from openapi_server.models.vertical_align import VerticalAlign
from openapi_server import util


class FieldsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bbox: BoundingBox=None, cell_count: int=0, cell_offset: int=0, cells: bool=False, color: str='black', font: Font=None, font_size: int=10, format: str=None, h_align: HorizontalAlign=None, locale: str='en_US', name: str=None, page: int=None, required: bool=True, type: str=None, v_align: VerticalAlign=None, anchor: ImageAnchor=None, eval: Eval=None):
        """FieldsInner - a model defined in OpenAPI

        :param bbox: The bbox of this FieldsInner.
        :param cell_count: The cell_count of this FieldsInner.
        :param cell_offset: The cell_offset of this FieldsInner.
        :param cells: The cells of this FieldsInner.
        :param color: The color of this FieldsInner.
        :param font: The font of this FieldsInner.
        :param font_size: The font_size of this FieldsInner.
        :param format: The format of this FieldsInner.
        :param h_align: The h_align of this FieldsInner.
        :param locale: The locale of this FieldsInner.
        :param name: The name of this FieldsInner.
        :param page: The page of this FieldsInner.
        :param required: The required of this FieldsInner.
        :param type: The type of this FieldsInner.
        :param v_align: The v_align of this FieldsInner.
        :param anchor: The anchor of this FieldsInner.
        :param eval: The eval of this FieldsInner.
        """
        self.openapi_types = {
            'bbox': BoundingBox,
            'cell_count': int,
            'cell_offset': int,
            'cells': bool,
            'color': str,
            'font': Font,
            'font_size': int,
            'format': str,
            'h_align': HorizontalAlign,
            'locale': str,
            'name': str,
            'page': int,
            'required': bool,
            'type': str,
            'v_align': VerticalAlign,
            'anchor': ImageAnchor,
            'eval': Eval
        }

        self.attribute_map = {
            'bbox': 'bbox',
            'cell_count': 'cell_count',
            'cell_offset': 'cell_offset',
            'cells': 'cells',
            'color': 'color',
            'font': 'font',
            'font_size': 'font_size',
            'format': 'format',
            'h_align': 'h_align',
            'locale': 'locale',
            'name': 'name',
            'page': 'page',
            'required': 'required',
            'type': 'type',
            'v_align': 'v_align',
            'anchor': 'anchor',
            'eval': 'eval'
        }

        self._bbox = bbox
        self._cell_count = cell_count
        self._cell_offset = cell_offset
        self._cells = cells
        self._color = color
        self._font = font
        self._font_size = font_size
        self._format = format
        self._h_align = h_align
        self._locale = locale
        self._name = name
        self._page = page
        self._required = required
        self._type = type
        self._v_align = v_align
        self._anchor = anchor
        self._eval = eval

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Fields_inner of this FieldsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bbox(self):
        """Gets the bbox of this FieldsInner.


        :return: The bbox of this FieldsInner.
        :rtype: BoundingBox
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox):
        """Sets the bbox of this FieldsInner.


        :param bbox: The bbox of this FieldsInner.
        :type bbox: BoundingBox
        """
        if bbox is None:
            raise ValueError("Invalid value for `bbox`, must not be `None`")

        self._bbox = bbox

    @property
    def cell_count(self):
        """Gets the cell_count of this FieldsInner.


        :return: The cell_count of this FieldsInner.
        :rtype: int
        """
        return self._cell_count

    @cell_count.setter
    def cell_count(self, cell_count):
        """Sets the cell_count of this FieldsInner.


        :param cell_count: The cell_count of this FieldsInner.
        :type cell_count: int
        """
        if cell_count is not None and cell_count < 0:
            raise ValueError("Invalid value for `cell_count`, must be a value greater than or equal to `0`")

        self._cell_count = cell_count

    @property
    def cell_offset(self):
        """Gets the cell_offset of this FieldsInner.


        :return: The cell_offset of this FieldsInner.
        :rtype: int
        """
        return self._cell_offset

    @cell_offset.setter
    def cell_offset(self, cell_offset):
        """Sets the cell_offset of this FieldsInner.


        :param cell_offset: The cell_offset of this FieldsInner.
        :type cell_offset: int
        """
        if cell_offset is not None and cell_offset < 0:
            raise ValueError("Invalid value for `cell_offset`, must be a value greater than or equal to `0`")

        self._cell_offset = cell_offset

    @property
    def cells(self):
        """Gets the cells of this FieldsInner.


        :return: The cells of this FieldsInner.
        :rtype: bool
        """
        return self._cells

    @cells.setter
    def cells(self, cells):
        """Sets the cells of this FieldsInner.


        :param cells: The cells of this FieldsInner.
        :type cells: bool
        """

        self._cells = cells

    @property
    def color(self):
        """Gets the color of this FieldsInner.


        :return: The color of this FieldsInner.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this FieldsInner.


        :param color: The color of this FieldsInner.
        :type color: str
        """

        self._color = color

    @property
    def font(self):
        """Gets the font of this FieldsInner.


        :return: The font of this FieldsInner.
        :rtype: Font
        """
        return self._font

    @font.setter
    def font(self, font):
        """Sets the font of this FieldsInner.


        :param font: The font of this FieldsInner.
        :type font: Font
        """

        self._font = font

    @property
    def font_size(self):
        """Gets the font_size of this FieldsInner.


        :return: The font_size of this FieldsInner.
        :rtype: int
        """
        return self._font_size

    @font_size.setter
    def font_size(self, font_size):
        """Sets the font_size of this FieldsInner.


        :param font_size: The font_size of this FieldsInner.
        :type font_size: int
        """
        if font_size is not None and font_size <= 0:
            raise ValueError("Invalid value for `font_size`, must be a value greater than `0`")

        self._font_size = font_size

    @property
    def format(self):
        """Gets the format of this FieldsInner.


        :return: The format of this FieldsInner.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this FieldsInner.


        :param format: The format of this FieldsInner.
        :type format: str
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")

        self._format = format

    @property
    def h_align(self):
        """Gets the h_align of this FieldsInner.


        :return: The h_align of this FieldsInner.
        :rtype: HorizontalAlign
        """
        return self._h_align

    @h_align.setter
    def h_align(self, h_align):
        """Sets the h_align of this FieldsInner.


        :param h_align: The h_align of this FieldsInner.
        :type h_align: HorizontalAlign
        """

        self._h_align = h_align

    @property
    def locale(self):
        """Gets the locale of this FieldsInner.


        :return: The locale of this FieldsInner.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this FieldsInner.


        :param locale: The locale of this FieldsInner.
        :type locale: str
        """
        if locale is not None and len(locale) > 5:
            raise ValueError("Invalid value for `locale`, length must be less than or equal to `5`")
        if locale is not None and len(locale) < 5:
            raise ValueError("Invalid value for `locale`, length must be greater than or equal to `5`")

        self._locale = locale

    @property
    def name(self):
        """Gets the name of this FieldsInner.


        :return: The name of this FieldsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FieldsInner.


        :param name: The name of this FieldsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def page(self):
        """Gets the page of this FieldsInner.


        :return: The page of this FieldsInner.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this FieldsInner.


        :param page: The page of this FieldsInner.
        :type page: int
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")
        if page is not None and page < 0:
            raise ValueError("Invalid value for `page`, must be a value greater than or equal to `0`")

        self._page = page

    @property
    def required(self):
        """Gets the required of this FieldsInner.


        :return: The required of this FieldsInner.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this FieldsInner.


        :param required: The required of this FieldsInner.
        :type required: bool
        """

        self._required = required

    @property
    def type(self):
        """Gets the type of this FieldsInner.


        :return: The type of this FieldsInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FieldsInner.


        :param type: The type of this FieldsInner.
        :type type: str
        """
        allowed_values = ["date", "text", "image", "check"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def v_align(self):
        """Gets the v_align of this FieldsInner.


        :return: The v_align of this FieldsInner.
        :rtype: VerticalAlign
        """
        return self._v_align

    @v_align.setter
    def v_align(self, v_align):
        """Sets the v_align of this FieldsInner.


        :param v_align: The v_align of this FieldsInner.
        :type v_align: VerticalAlign
        """

        self._v_align = v_align

    @property
    def anchor(self):
        """Gets the anchor of this FieldsInner.


        :return: The anchor of this FieldsInner.
        :rtype: ImageAnchor
        """
        return self._anchor

    @anchor.setter
    def anchor(self, anchor):
        """Sets the anchor of this FieldsInner.


        :param anchor: The anchor of this FieldsInner.
        :type anchor: ImageAnchor
        """

        self._anchor = anchor

    @property
    def eval(self):
        """Gets the eval of this FieldsInner.


        :return: The eval of this FieldsInner.
        :rtype: Eval
        """
        return self._eval

    @eval.setter
    def eval(self, eval):
        """Sets the eval of this FieldsInner.


        :param eval: The eval of this FieldsInner.
        :type eval: Eval
        """

        self._eval = eval
