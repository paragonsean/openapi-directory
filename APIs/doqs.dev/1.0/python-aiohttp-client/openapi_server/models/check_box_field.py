# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bounding_box import BoundingBox
from openapi_server.models.eval import Eval
from openapi_server import util


class CheckBoxField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bbox: BoundingBox=None, eval: Eval=None, name: str=None, page: int=None, required: bool=True, type: str=None):
        """CheckBoxField - a model defined in OpenAPI

        :param bbox: The bbox of this CheckBoxField.
        :param eval: The eval of this CheckBoxField.
        :param name: The name of this CheckBoxField.
        :param page: The page of this CheckBoxField.
        :param required: The required of this CheckBoxField.
        :param type: The type of this CheckBoxField.
        """
        self.openapi_types = {
            'bbox': BoundingBox,
            'eval': Eval,
            'name': str,
            'page': int,
            'required': bool,
            'type': str
        }

        self.attribute_map = {
            'bbox': 'bbox',
            'eval': 'eval',
            'name': 'name',
            'page': 'page',
            'required': 'required',
            'type': 'type'
        }

        self._bbox = bbox
        self._eval = eval
        self._name = name
        self._page = page
        self._required = required
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckBoxField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckBoxField of this CheckBoxField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bbox(self):
        """Gets the bbox of this CheckBoxField.


        :return: The bbox of this CheckBoxField.
        :rtype: BoundingBox
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox):
        """Sets the bbox of this CheckBoxField.


        :param bbox: The bbox of this CheckBoxField.
        :type bbox: BoundingBox
        """
        if bbox is None:
            raise ValueError("Invalid value for `bbox`, must not be `None`")

        self._bbox = bbox

    @property
    def eval(self):
        """Gets the eval of this CheckBoxField.


        :return: The eval of this CheckBoxField.
        :rtype: Eval
        """
        return self._eval

    @eval.setter
    def eval(self, eval):
        """Sets the eval of this CheckBoxField.


        :param eval: The eval of this CheckBoxField.
        :type eval: Eval
        """

        self._eval = eval

    @property
    def name(self):
        """Gets the name of this CheckBoxField.


        :return: The name of this CheckBoxField.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CheckBoxField.


        :param name: The name of this CheckBoxField.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def page(self):
        """Gets the page of this CheckBoxField.


        :return: The page of this CheckBoxField.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this CheckBoxField.


        :param page: The page of this CheckBoxField.
        :type page: int
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")
        if page is not None and page < 0:
            raise ValueError("Invalid value for `page`, must be a value greater than or equal to `0`")

        self._page = page

    @property
    def required(self):
        """Gets the required of this CheckBoxField.


        :return: The required of this CheckBoxField.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this CheckBoxField.


        :param required: The required of this CheckBoxField.
        :type required: bool
        """

        self._required = required

    @property
    def type(self):
        """Gets the type of this CheckBoxField.


        :return: The type of this CheckBoxField.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CheckBoxField.


        :param type: The type of this CheckBoxField.
        :type type: str
        """
        allowed_values = ["check"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
