# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PreviewModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, css: str=None, data: object=None, footer_html: str=None, header_html: str=None, template_html: str=None):
        """PreviewModel - a model defined in OpenAPI

        :param css: The css of this PreviewModel.
        :param data: The data of this PreviewModel.
        :param footer_html: The footer_html of this PreviewModel.
        :param header_html: The header_html of this PreviewModel.
        :param template_html: The template_html of this PreviewModel.
        """
        self.openapi_types = {
            'css': str,
            'data': object,
            'footer_html': str,
            'header_html': str,
            'template_html': str
        }

        self.attribute_map = {
            'css': 'css',
            'data': 'data',
            'footer_html': 'footer_html',
            'header_html': 'header_html',
            'template_html': 'template_html'
        }

        self._css = css
        self._data = data
        self._footer_html = footer_html
        self._header_html = header_html
        self._template_html = template_html

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PreviewModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PreviewModel of this PreviewModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def css(self):
        """Gets the css of this PreviewModel.


        :return: The css of this PreviewModel.
        :rtype: str
        """
        return self._css

    @css.setter
    def css(self, css):
        """Sets the css of this PreviewModel.


        :param css: The css of this PreviewModel.
        :type css: str
        """
        if css is None:
            raise ValueError("Invalid value for `css`, must not be `None`")

        self._css = css

    @property
    def data(self):
        """Gets the data of this PreviewModel.


        :return: The data of this PreviewModel.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this PreviewModel.


        :param data: The data of this PreviewModel.
        :type data: object
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def footer_html(self):
        """Gets the footer_html of this PreviewModel.


        :return: The footer_html of this PreviewModel.
        :rtype: str
        """
        return self._footer_html

    @footer_html.setter
    def footer_html(self, footer_html):
        """Sets the footer_html of this PreviewModel.


        :param footer_html: The footer_html of this PreviewModel.
        :type footer_html: str
        """

        self._footer_html = footer_html

    @property
    def header_html(self):
        """Gets the header_html of this PreviewModel.


        :return: The header_html of this PreviewModel.
        :rtype: str
        """
        return self._header_html

    @header_html.setter
    def header_html(self, header_html):
        """Sets the header_html of this PreviewModel.


        :param header_html: The header_html of this PreviewModel.
        :type header_html: str
        """

        self._header_html = header_html

    @property
    def template_html(self):
        """Gets the template_html of this PreviewModel.


        :return: The template_html of this PreviewModel.
        :rtype: str
        """
        return self._template_html

    @template_html.setter
    def template_html(self, template_html):
        """Sets the template_html of this PreviewModel.


        :param template_html: The template_html of this PreviewModel.
        :type template_html: str
        """
        if template_html is None:
            raise ValueError("Invalid value for `template_html`, must not be `None`")

        self._template_html = template_html
