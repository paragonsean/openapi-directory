# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fields_inner import FieldsInner
from openapi_server import util


class Template(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, fields: List[FieldsInner]=[], id: str=None, name: str=None, pages: int=None, size_bytes: int=None):
        """Template - a model defined in OpenAPI

        :param created_at: The created_at of this Template.
        :param fields: The fields of this Template.
        :param id: The id of this Template.
        :param name: The name of this Template.
        :param pages: The pages of this Template.
        :param size_bytes: The size_bytes of this Template.
        """
        self.openapi_types = {
            'created_at': datetime,
            'fields': List[FieldsInner],
            'id': str,
            'name': str,
            'pages': int,
            'size_bytes': int
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'fields': 'fields',
            'id': 'id',
            'name': 'name',
            'pages': 'pages',
            'size_bytes': 'size_bytes'
        }

        self._created_at = created_at
        self._fields = fields
        self._id = id
        self._name = name
        self._pages = pages
        self._size_bytes = size_bytes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Template':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Template of this Template.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Template.


        :return: The created_at of this Template.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Template.


        :param created_at: The created_at of this Template.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def fields(self):
        """Gets the fields of this Template.


        :return: The fields of this Template.
        :rtype: List[FieldsInner]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Template.


        :param fields: The fields of this Template.
        :type fields: List[FieldsInner]
        """

        self._fields = fields

    @property
    def id(self):
        """Gets the id of this Template.


        :return: The id of this Template.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Template.


        :param id: The id of this Template.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Template.


        :return: The name of this Template.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Template.


        :param name: The name of this Template.
        :type name: str
        """

        self._name = name

    @property
    def pages(self):
        """Gets the pages of this Template.


        :return: The pages of this Template.
        :rtype: int
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this Template.


        :param pages: The pages of this Template.
        :type pages: int
        """
        if pages is None:
            raise ValueError("Invalid value for `pages`, must not be `None`")
        if pages is not None and pages <= 0:
            raise ValueError("Invalid value for `pages`, must be a value greater than `0`")

        self._pages = pages

    @property
    def size_bytes(self):
        """Gets the size_bytes of this Template.


        :return: The size_bytes of this Template.
        :rtype: int
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):
        """Sets the size_bytes of this Template.


        :param size_bytes: The size_bytes of this Template.
        :type size_bytes: int
        """

        self._size_bytes = size_bytes
