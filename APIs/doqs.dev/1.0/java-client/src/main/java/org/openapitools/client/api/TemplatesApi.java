/*
 * doqs.dev | PDF filling API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.FillTemplateRequest;
import org.openapitools.client.model.ResponseError;
import org.openapitools.client.model.ResponseOkHttpUrl;
import org.openapitools.client.model.ResponseOkListAppsApiRoutesTemplatesTemplate;
import org.openapitools.client.model.ResponseOkNoneType;
import org.openapitools.client.model.ResponseOkTemplate;
import org.openapitools.client.model.UpdateTemplateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TemplatesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TemplatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TemplatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for callList
     * @param limit  (optional, default to 100)
     * @param offset  (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callListCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callListValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return callListCall(limit, offset, _callback);

    }

    /**
     * List 
     * 
     * @param limit  (optional, default to 100)
     * @param offset  (optional, default to 0)
     * @return ResponseOkListAppsApiRoutesTemplatesTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseOkListAppsApiRoutesTemplatesTemplate callList(Integer limit, Integer offset) throws ApiException {
        ApiResponse<ResponseOkListAppsApiRoutesTemplatesTemplate> localVarResp = callListWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * List 
     * 
     * @param limit  (optional, default to 100)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;ResponseOkListAppsApiRoutesTemplatesTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseOkListAppsApiRoutesTemplatesTemplate> callListWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = callListValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<ResponseOkListAppsApiRoutesTemplatesTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List  (asynchronously)
     * 
     * @param limit  (optional, default to 100)
     * @param offset  (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callListAsync(Integer limit, Integer offset, final ApiCallback<ResponseOkListAppsApiRoutesTemplatesTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = callListValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ResponseOkListAppsApiRoutesTemplatesTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for create
     * @param _file  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCall(File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling create(Async)");
        }

        return createCall(_file, _callback);

    }

    /**
     * Create
     * 
     * @param _file  (required)
     * @return ResponseOkTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseOkTemplate create(File _file) throws ApiException {
        ApiResponse<ResponseOkTemplate> localVarResp = createWithHttpInfo(_file);
        return localVarResp.getData();
    }

    /**
     * Create
     * 
     * @param _file  (required)
     * @return ApiResponse&lt;ResponseOkTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseOkTemplate> createWithHttpInfo(File _file) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(_file, null);
        Type localVarReturnType = new TypeToken<ResponseOkTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create (asynchronously)
     * 
     * @param _file  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAsync(File _file, final ApiCallback<ResponseOkTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(_file, _callback);
        Type localVarReturnType = new TypeToken<ResponseOkTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTemplatesIdDelete
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTemplatesIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTemplatesIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteTemplatesIdDelete(Async)");
        }

        return deleteTemplatesIdDeleteCall(id, _callback);

    }

    /**
     * Delete 
     * 
     * @param id  (required)
     * @return ResponseOkNoneType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseOkNoneType deleteTemplatesIdDelete(String id) throws ApiException {
        ApiResponse<ResponseOkNoneType> localVarResp = deleteTemplatesIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;ResponseOkNoneType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseOkNoneType> deleteTemplatesIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteTemplatesIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ResponseOkNoneType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTemplatesIdDeleteAsync(String id, final ApiCallback<ResponseOkNoneType> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTemplatesIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ResponseOkNoneType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fill
     * @param id  (required)
     * @param fillTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fillCall(String id, FillTemplateRequest fillTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fillTemplateRequest;

        // create path and map variables
        String localVarPath = "/templates/{id}/fill"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fillValidateBeforeCall(String id, FillTemplateRequest fillTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling fill(Async)");
        }

        // verify the required parameter 'fillTemplateRequest' is set
        if (fillTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'fillTemplateRequest' when calling fill(Async)");
        }

        return fillCall(id, fillTemplateRequest, _callback);

    }

    /**
     * Fill
     * 
     * @param id  (required)
     * @param fillTemplateRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Object fill(String id, FillTemplateRequest fillTemplateRequest) throws ApiException {
        ApiResponse<Object> localVarResp = fillWithHttpInfo(id, fillTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Fill
     * 
     * @param id  (required)
     * @param fillTemplateRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> fillWithHttpInfo(String id, FillTemplateRequest fillTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = fillValidateBeforeCall(id, fillTemplateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fill (asynchronously)
     * 
     * @param id  (required)
     * @param fillTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fillAsync(String id, FillTemplateRequest fillTemplateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = fillValidateBeforeCall(id, fillTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for get
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling get(Async)");
        }

        return getCall(id, _callback);

    }

    /**
     * Get Template
     * 
     * @param id  (required)
     * @return ResponseOkTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseOkTemplate get(String id) throws ApiException {
        ApiResponse<ResponseOkTemplate> localVarResp = getWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Template
     * 
     * @param id  (required)
     * @return ApiResponse&lt;ResponseOkTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseOkTemplate> getWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ResponseOkTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Template (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAsync(String id, final ApiCallback<ResponseOkTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ResponseOkTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFileTemplatesIdFileGet
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileTemplatesIdFileGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{id}/file"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileTemplatesIdFileGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFileTemplatesIdFileGet(Async)");
        }

        return getFileTemplatesIdFileGetCall(id, _callback);

    }

    /**
     * Get File
     * 
     * @param id  (required)
     * @return ResponseOkHttpUrl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseOkHttpUrl getFileTemplatesIdFileGet(String id) throws ApiException {
        ApiResponse<ResponseOkHttpUrl> localVarResp = getFileTemplatesIdFileGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get File
     * 
     * @param id  (required)
     * @return ApiResponse&lt;ResponseOkHttpUrl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseOkHttpUrl> getFileTemplatesIdFileGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getFileTemplatesIdFileGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ResponseOkHttpUrl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get File (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileTemplatesIdFileGetAsync(String id, final ApiCallback<ResponseOkHttpUrl> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileTemplatesIdFileGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ResponseOkHttpUrl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for update
     * @param id  (required)
     * @param updateTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCall(String id, UpdateTemplateRequest updateTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTemplateRequest;

        // create path and map variables
        String localVarPath = "/templates/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidateBeforeCall(String id, UpdateTemplateRequest updateTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling update(Async)");
        }

        // verify the required parameter 'updateTemplateRequest' is set
        if (updateTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateTemplateRequest' when calling update(Async)");
        }

        return updateCall(id, updateTemplateRequest, _callback);

    }

    /**
     * Update
     * 
     * @param id  (required)
     * @param updateTemplateRequest  (required)
     * @return ResponseOkTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseOkTemplate update(String id, UpdateTemplateRequest updateTemplateRequest) throws ApiException {
        ApiResponse<ResponseOkTemplate> localVarResp = updateWithHttpInfo(id, updateTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Update
     * 
     * @param id  (required)
     * @param updateTemplateRequest  (required)
     * @return ApiResponse&lt;ResponseOkTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseOkTemplate> updateWithHttpInfo(String id, UpdateTemplateRequest updateTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateValidateBeforeCall(id, updateTemplateRequest, null);
        Type localVarReturnType = new TypeToken<ResponseOkTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (asynchronously)
     * 
     * @param id  (required)
     * @param updateTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAsync(String id, UpdateTemplateRequest updateTemplateRequest, final ApiCallback<ResponseOkTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValidateBeforeCall(id, updateTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<ResponseOkTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
