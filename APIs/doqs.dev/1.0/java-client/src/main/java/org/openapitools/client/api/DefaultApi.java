/*
 * doqs.dev | PDF filling API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateOrUpdateTemplateRequest;
import org.openapitools.client.model.GeneratePDFPayload;
import org.openapitools.client.model.PreviewModel;
import org.openapitools.client.model.ResponseError;
import org.openapitools.client.model.ResponseOkDesignerTemplate;
import org.openapitools.client.model.ResponseOkListFillrEntitiesDesignerTemplateDesignerTemplate;
import org.openapitools.client.model.ResponseOkNoneType;
import org.openapitools.client.model.ResponseOkPreviewResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTemplateDesignerTemplatesPost
     * @param createOrUpdateTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTemplateDesignerTemplatesPostCall(CreateOrUpdateTemplateRequest createOrUpdateTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrUpdateTemplateRequest;

        // create path and map variables
        String localVarPath = "/designer/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTemplateDesignerTemplatesPostValidateBeforeCall(CreateOrUpdateTemplateRequest createOrUpdateTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createOrUpdateTemplateRequest' is set
        if (createOrUpdateTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrUpdateTemplateRequest' when calling createTemplateDesignerTemplatesPost(Async)");
        }

        return createTemplateDesignerTemplatesPostCall(createOrUpdateTemplateRequest, _callback);

    }

    /**
     * Create Template
     * 
     * @param createOrUpdateTemplateRequest  (required)
     * @return ResponseOkDesignerTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseOkDesignerTemplate createTemplateDesignerTemplatesPost(CreateOrUpdateTemplateRequest createOrUpdateTemplateRequest) throws ApiException {
        ApiResponse<ResponseOkDesignerTemplate> localVarResp = createTemplateDesignerTemplatesPostWithHttpInfo(createOrUpdateTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Create Template
     * 
     * @param createOrUpdateTemplateRequest  (required)
     * @return ApiResponse&lt;ResponseOkDesignerTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseOkDesignerTemplate> createTemplateDesignerTemplatesPostWithHttpInfo(CreateOrUpdateTemplateRequest createOrUpdateTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = createTemplateDesignerTemplatesPostValidateBeforeCall(createOrUpdateTemplateRequest, null);
        Type localVarReturnType = new TypeToken<ResponseOkDesignerTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Template (asynchronously)
     * 
     * @param createOrUpdateTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTemplateDesignerTemplatesPostAsync(CreateOrUpdateTemplateRequest createOrUpdateTemplateRequest, final ApiCallback<ResponseOkDesignerTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTemplateDesignerTemplatesPostValidateBeforeCall(createOrUpdateTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<ResponseOkDesignerTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDesignerTemplatesIdDelete
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDesignerTemplatesIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/designer/templates/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDesignerTemplatesIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteDesignerTemplatesIdDelete(Async)");
        }

        return deleteDesignerTemplatesIdDeleteCall(id, _callback);

    }

    /**
     * Delete
     * 
     * @param id  (required)
     * @return ResponseOkNoneType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseOkNoneType deleteDesignerTemplatesIdDelete(String id) throws ApiException {
        ApiResponse<ResponseOkNoneType> localVarResp = deleteDesignerTemplatesIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete
     * 
     * @param id  (required)
     * @return ApiResponse&lt;ResponseOkNoneType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseOkNoneType> deleteDesignerTemplatesIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteDesignerTemplatesIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ResponseOkNoneType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDesignerTemplatesIdDeleteAsync(String id, final ApiCallback<ResponseOkNoneType> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDesignerTemplatesIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ResponseOkNoneType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generatePdfDesignerTemplatesIdGeneratePost
     * @param id  (required)
     * @param generatePDFPayload  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generatePdfDesignerTemplatesIdGeneratePostCall(String id, GeneratePDFPayload generatePDFPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generatePDFPayload;

        // create path and map variables
        String localVarPath = "/designer/templates/{id}/generate"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generatePdfDesignerTemplatesIdGeneratePostValidateBeforeCall(String id, GeneratePDFPayload generatePDFPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling generatePdfDesignerTemplatesIdGeneratePost(Async)");
        }

        // verify the required parameter 'generatePDFPayload' is set
        if (generatePDFPayload == null) {
            throw new ApiException("Missing the required parameter 'generatePDFPayload' when calling generatePdfDesignerTemplatesIdGeneratePost(Async)");
        }

        return generatePdfDesignerTemplatesIdGeneratePostCall(id, generatePDFPayload, _callback);

    }

    /**
     * Generate Pdf
     * 
     * @param id  (required)
     * @param generatePDFPayload  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Object generatePdfDesignerTemplatesIdGeneratePost(String id, GeneratePDFPayload generatePDFPayload) throws ApiException {
        ApiResponse<Object> localVarResp = generatePdfDesignerTemplatesIdGeneratePostWithHttpInfo(id, generatePDFPayload);
        return localVarResp.getData();
    }

    /**
     * Generate Pdf
     * 
     * @param id  (required)
     * @param generatePDFPayload  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> generatePdfDesignerTemplatesIdGeneratePostWithHttpInfo(String id, GeneratePDFPayload generatePDFPayload) throws ApiException {
        okhttp3.Call localVarCall = generatePdfDesignerTemplatesIdGeneratePostValidateBeforeCall(id, generatePDFPayload, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate Pdf (asynchronously)
     * 
     * @param id  (required)
     * @param generatePDFPayload  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generatePdfDesignerTemplatesIdGeneratePostAsync(String id, GeneratePDFPayload generatePDFPayload, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = generatePdfDesignerTemplatesIdGeneratePostValidateBeforeCall(id, generatePDFPayload, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTemplatesDesignerTemplatesGet
     * @param limit  (optional, default to 100)
     * @param offset  (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTemplatesDesignerTemplatesGetCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/designer/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTemplatesDesignerTemplatesGetValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return listTemplatesDesignerTemplatesGetCall(limit, offset, _callback);

    }

    /**
     * List Templates
     * 
     * @param limit  (optional, default to 100)
     * @param offset  (optional, default to 0)
     * @return ResponseOkListFillrEntitiesDesignerTemplateDesignerTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseOkListFillrEntitiesDesignerTemplateDesignerTemplate listTemplatesDesignerTemplatesGet(Integer limit, Integer offset) throws ApiException {
        ApiResponse<ResponseOkListFillrEntitiesDesignerTemplateDesignerTemplate> localVarResp = listTemplatesDesignerTemplatesGetWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * List Templates
     * 
     * @param limit  (optional, default to 100)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;ResponseOkListFillrEntitiesDesignerTemplateDesignerTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseOkListFillrEntitiesDesignerTemplateDesignerTemplate> listTemplatesDesignerTemplatesGetWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listTemplatesDesignerTemplatesGetValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<ResponseOkListFillrEntitiesDesignerTemplateDesignerTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Templates (asynchronously)
     * 
     * @param limit  (optional, default to 100)
     * @param offset  (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTemplatesDesignerTemplatesGetAsync(Integer limit, Integer offset, final ApiCallback<ResponseOkListFillrEntitiesDesignerTemplateDesignerTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTemplatesDesignerTemplatesGetValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ResponseOkListFillrEntitiesDesignerTemplateDesignerTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTemplatesDesignerTemplatesIdGet
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTemplatesDesignerTemplatesIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/designer/templates/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTemplatesDesignerTemplatesIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listTemplatesDesignerTemplatesIdGet(Async)");
        }

        return listTemplatesDesignerTemplatesIdGetCall(id, _callback);

    }

    /**
     * List Templates
     * 
     * @param id  (required)
     * @return ResponseOkDesignerTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseOkDesignerTemplate listTemplatesDesignerTemplatesIdGet(String id) throws ApiException {
        ApiResponse<ResponseOkDesignerTemplate> localVarResp = listTemplatesDesignerTemplatesIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * List Templates
     * 
     * @param id  (required)
     * @return ApiResponse&lt;ResponseOkDesignerTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseOkDesignerTemplate> listTemplatesDesignerTemplatesIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = listTemplatesDesignerTemplatesIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ResponseOkDesignerTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Templates (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTemplatesDesignerTemplatesIdGetAsync(String id, final ApiCallback<ResponseOkDesignerTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTemplatesDesignerTemplatesIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ResponseOkDesignerTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for previewDesignerTemplatesPreviewPost
     * @param previewModel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewDesignerTemplatesPreviewPostCall(PreviewModel previewModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = previewModel;

        // create path and map variables
        String localVarPath = "/designer/templates/preview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call previewDesignerTemplatesPreviewPostValidateBeforeCall(PreviewModel previewModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'previewModel' is set
        if (previewModel == null) {
            throw new ApiException("Missing the required parameter 'previewModel' when calling previewDesignerTemplatesPreviewPost(Async)");
        }

        return previewDesignerTemplatesPreviewPostCall(previewModel, _callback);

    }

    /**
     * Preview
     * 
     * @param previewModel  (required)
     * @return ResponseOkPreviewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseOkPreviewResponse previewDesignerTemplatesPreviewPost(PreviewModel previewModel) throws ApiException {
        ApiResponse<ResponseOkPreviewResponse> localVarResp = previewDesignerTemplatesPreviewPostWithHttpInfo(previewModel);
        return localVarResp.getData();
    }

    /**
     * Preview
     * 
     * @param previewModel  (required)
     * @return ApiResponse&lt;ResponseOkPreviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseOkPreviewResponse> previewDesignerTemplatesPreviewPostWithHttpInfo(PreviewModel previewModel) throws ApiException {
        okhttp3.Call localVarCall = previewDesignerTemplatesPreviewPostValidateBeforeCall(previewModel, null);
        Type localVarReturnType = new TypeToken<ResponseOkPreviewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Preview (asynchronously)
     * 
     * @param previewModel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewDesignerTemplatesPreviewPostAsync(PreviewModel previewModel, final ApiCallback<ResponseOkPreviewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = previewDesignerTemplatesPreviewPostValidateBeforeCall(previewModel, _callback);
        Type localVarReturnType = new TypeToken<ResponseOkPreviewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTemplateDesignerTemplatesIdPut
     * @param id  (required)
     * @param createOrUpdateTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTemplateDesignerTemplatesIdPutCall(String id, CreateOrUpdateTemplateRequest createOrUpdateTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrUpdateTemplateRequest;

        // create path and map variables
        String localVarPath = "/designer/templates/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTemplateDesignerTemplatesIdPutValidateBeforeCall(String id, CreateOrUpdateTemplateRequest createOrUpdateTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTemplateDesignerTemplatesIdPut(Async)");
        }

        // verify the required parameter 'createOrUpdateTemplateRequest' is set
        if (createOrUpdateTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrUpdateTemplateRequest' when calling updateTemplateDesignerTemplatesIdPut(Async)");
        }

        return updateTemplateDesignerTemplatesIdPutCall(id, createOrUpdateTemplateRequest, _callback);

    }

    /**
     * Update Template
     * 
     * @param id  (required)
     * @param createOrUpdateTemplateRequest  (required)
     * @return ResponseOkDesignerTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseOkDesignerTemplate updateTemplateDesignerTemplatesIdPut(String id, CreateOrUpdateTemplateRequest createOrUpdateTemplateRequest) throws ApiException {
        ApiResponse<ResponseOkDesignerTemplate> localVarResp = updateTemplateDesignerTemplatesIdPutWithHttpInfo(id, createOrUpdateTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Update Template
     * 
     * @param id  (required)
     * @param createOrUpdateTemplateRequest  (required)
     * @return ApiResponse&lt;ResponseOkDesignerTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseOkDesignerTemplate> updateTemplateDesignerTemplatesIdPutWithHttpInfo(String id, CreateOrUpdateTemplateRequest createOrUpdateTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTemplateDesignerTemplatesIdPutValidateBeforeCall(id, createOrUpdateTemplateRequest, null);
        Type localVarReturnType = new TypeToken<ResponseOkDesignerTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Template (asynchronously)
     * 
     * @param id  (required)
     * @param createOrUpdateTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTemplateDesignerTemplatesIdPutAsync(String id, CreateOrUpdateTemplateRequest createOrUpdateTemplateRequest, final ApiCallback<ResponseOkDesignerTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTemplateDesignerTemplatesIdPutValidateBeforeCall(id, createOrUpdateTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<ResponseOkDesignerTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
