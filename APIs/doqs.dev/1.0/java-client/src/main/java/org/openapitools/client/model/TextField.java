/*
 * doqs.dev | PDF filling API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BoundingBox;
import org.openapitools.client.model.Font;
import org.openapitools.client.model.HorizontalAlign;
import org.openapitools.client.model.VerticalAlign;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TextField
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:28.754122-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TextField {
  public static final String SERIALIZED_NAME_BBOX = "bbox";
  @SerializedName(SERIALIZED_NAME_BBOX)
  private BoundingBox bbox;

  public static final String SERIALIZED_NAME_CELL_COUNT = "cell_count";
  @SerializedName(SERIALIZED_NAME_CELL_COUNT)
  private Integer cellCount = 0;

  public static final String SERIALIZED_NAME_CELL_OFFSET = "cell_offset";
  @SerializedName(SERIALIZED_NAME_CELL_OFFSET)
  private Integer cellOffset = 0;

  public static final String SERIALIZED_NAME_CELLS = "cells";
  @SerializedName(SERIALIZED_NAME_CELLS)
  private Boolean cells = false;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color = "black";

  public static final String SERIALIZED_NAME_FONT = "font";
  @SerializedName(SERIALIZED_NAME_FONT)
  private Font font = Font.HELVETICA;

  public static final String SERIALIZED_NAME_FONT_SIZE = "font_size";
  @SerializedName(SERIALIZED_NAME_FONT_SIZE)
  private Integer fontSize = 10;

  public static final String SERIALIZED_NAME_H_ALIGN = "h_align";
  @SerializedName(SERIALIZED_NAME_H_ALIGN)
  private HorizontalAlign hAlign = HorizontalAlign.L;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required = true;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TEXT("text");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_V_ALIGN = "v_align";
  @SerializedName(SERIALIZED_NAME_V_ALIGN)
  private VerticalAlign vAlign = VerticalAlign.B;

  public TextField() {
  }

  public TextField bbox(BoundingBox bbox) {
    this.bbox = bbox;
    return this;
  }

  /**
   * Get bbox
   * @return bbox
   */
  @javax.annotation.Nonnull
  public BoundingBox getBbox() {
    return bbox;
  }

  public void setBbox(BoundingBox bbox) {
    this.bbox = bbox;
  }


  public TextField cellCount(Integer cellCount) {
    this.cellCount = cellCount;
    return this;
  }

  /**
   * Get cellCount
   * minimum: 0
   * @return cellCount
   */
  @javax.annotation.Nullable
  public Integer getCellCount() {
    return cellCount;
  }

  public void setCellCount(Integer cellCount) {
    this.cellCount = cellCount;
  }


  public TextField cellOffset(Integer cellOffset) {
    this.cellOffset = cellOffset;
    return this;
  }

  /**
   * Get cellOffset
   * minimum: 0
   * @return cellOffset
   */
  @javax.annotation.Nullable
  public Integer getCellOffset() {
    return cellOffset;
  }

  public void setCellOffset(Integer cellOffset) {
    this.cellOffset = cellOffset;
  }


  public TextField cells(Boolean cells) {
    this.cells = cells;
    return this;
  }

  /**
   * Get cells
   * @return cells
   */
  @javax.annotation.Nullable
  public Boolean getCells() {
    return cells;
  }

  public void setCells(Boolean cells) {
    this.cells = cells;
  }


  public TextField color(String color) {
    this.color = color;
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nullable
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }


  public TextField font(Font font) {
    this.font = font;
    return this;
  }

  /**
   * Get font
   * @return font
   */
  @javax.annotation.Nullable
  public Font getFont() {
    return font;
  }

  public void setFont(Font font) {
    this.font = font;
  }


  public TextField fontSize(Integer fontSize) {
    this.fontSize = fontSize;
    return this;
  }

  /**
   * Get fontSize
   * minimum: 0
   * @return fontSize
   */
  @javax.annotation.Nullable
  public Integer getFontSize() {
    return fontSize;
  }

  public void setFontSize(Integer fontSize) {
    this.fontSize = fontSize;
  }


  public TextField hAlign(HorizontalAlign hAlign) {
    this.hAlign = hAlign;
    return this;
  }

  /**
   * Get hAlign
   * @return hAlign
   */
  @javax.annotation.Nullable
  public HorizontalAlign gethAlign() {
    return hAlign;
  }

  public void sethAlign(HorizontalAlign hAlign) {
    this.hAlign = hAlign;
  }


  public TextField name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TextField page(Integer page) {
    this.page = page;
    return this;
  }

  /**
   * Get page
   * minimum: 0
   * @return page
   */
  @javax.annotation.Nonnull
  public Integer getPage() {
    return page;
  }

  public void setPage(Integer page) {
    this.page = page;
  }


  public TextField required(Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * Get required
   * @return required
   */
  @javax.annotation.Nullable
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }


  public TextField type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public TextField vAlign(VerticalAlign vAlign) {
    this.vAlign = vAlign;
    return this;
  }

  /**
   * Get vAlign
   * @return vAlign
   */
  @javax.annotation.Nullable
  public VerticalAlign getvAlign() {
    return vAlign;
  }

  public void setvAlign(VerticalAlign vAlign) {
    this.vAlign = vAlign;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TextField textField = (TextField) o;
    return Objects.equals(this.bbox, textField.bbox) &&
        Objects.equals(this.cellCount, textField.cellCount) &&
        Objects.equals(this.cellOffset, textField.cellOffset) &&
        Objects.equals(this.cells, textField.cells) &&
        Objects.equals(this.color, textField.color) &&
        Objects.equals(this.font, textField.font) &&
        Objects.equals(this.fontSize, textField.fontSize) &&
        Objects.equals(this.hAlign, textField.hAlign) &&
        Objects.equals(this.name, textField.name) &&
        Objects.equals(this.page, textField.page) &&
        Objects.equals(this.required, textField.required) &&
        Objects.equals(this.type, textField.type) &&
        Objects.equals(this.vAlign, textField.vAlign);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bbox, cellCount, cellOffset, cells, color, font, fontSize, hAlign, name, page, required, type, vAlign);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TextField {\n");
    sb.append("    bbox: ").append(toIndentedString(bbox)).append("\n");
    sb.append("    cellCount: ").append(toIndentedString(cellCount)).append("\n");
    sb.append("    cellOffset: ").append(toIndentedString(cellOffset)).append("\n");
    sb.append("    cells: ").append(toIndentedString(cells)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    font: ").append(toIndentedString(font)).append("\n");
    sb.append("    fontSize: ").append(toIndentedString(fontSize)).append("\n");
    sb.append("    hAlign: ").append(toIndentedString(hAlign)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vAlign: ").append(toIndentedString(vAlign)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bbox");
    openapiFields.add("cell_count");
    openapiFields.add("cell_offset");
    openapiFields.add("cells");
    openapiFields.add("color");
    openapiFields.add("font");
    openapiFields.add("font_size");
    openapiFields.add("h_align");
    openapiFields.add("name");
    openapiFields.add("page");
    openapiFields.add("required");
    openapiFields.add("type");
    openapiFields.add("v_align");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("bbox");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("page");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TextField
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TextField.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TextField is not found in the empty JSON string", TextField.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TextField.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TextField` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TextField.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `bbox`
      BoundingBox.validateJsonElement(jsonObj.get("bbox"));
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      // validate the optional field `font`
      if (jsonObj.get("font") != null && !jsonObj.get("font").isJsonNull()) {
        Font.validateJsonElement(jsonObj.get("font"));
      }
      // validate the optional field `h_align`
      if (jsonObj.get("h_align") != null && !jsonObj.get("h_align").isJsonNull()) {
        HorizontalAlign.validateJsonElement(jsonObj.get("h_align"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      // validate the optional field `v_align`
      if (jsonObj.get("v_align") != null && !jsonObj.get("v_align").isJsonNull()) {
        VerticalAlign.validateJsonElement(jsonObj.get("v_align"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TextField.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TextField' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TextField> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TextField.class));

       return (TypeAdapter<T>) new TypeAdapter<TextField>() {
           @Override
           public void write(JsonWriter out, TextField value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TextField read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TextField given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TextField
   * @throws IOException if the JSON string is invalid with respect to TextField
   */
  public static TextField fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TextField.class);
  }

  /**
   * Convert an instance of TextField to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

