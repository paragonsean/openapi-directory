/*
 * doqs.dev | PDF filling API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Format;
import org.openapitools.client.model.Margin;
import org.openapitools.client.model.Orientation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DesignerTemplate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:28.754122-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DesignerTemplate {
  public static final String SERIALIZED_NAME_COMPONENTS = "components";
  @SerializedName(SERIALIZED_NAME_COMPONENTS)
  private List<Object> components = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CSS = "css";
  @SerializedName(SERIALIZED_NAME_CSS)
  private String css;

  public static final String SERIALIZED_NAME_FOOTER_HTML = "footer_html";
  @SerializedName(SERIALIZED_NAME_FOOTER_HTML)
  private String footerHtml;

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private Format format;

  public static final String SERIALIZED_NAME_HEADER_HTML = "header_html";
  @SerializedName(SERIALIZED_NAME_HEADER_HTML)
  private String headerHtml;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MARGIN = "margin";
  @SerializedName(SERIALIZED_NAME_MARGIN)
  private Margin margin;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORIENTATION = "orientation";
  @SerializedName(SERIALIZED_NAME_ORIENTATION)
  private Orientation orientation;

  public static final String SERIALIZED_NAME_PREVIEW_PAYLOAD = "preview_payload";
  @SerializedName(SERIALIZED_NAME_PREVIEW_PAYLOAD)
  private Object previewPayload;

  public static final String SERIALIZED_NAME_TEMPLATE_HTML = "template_html";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_HTML)
  private String templateHtml;

  public DesignerTemplate() {
  }

  public DesignerTemplate components(List<Object> components) {
    this.components = components;
    return this;
  }

  public DesignerTemplate addComponentsItem(Object componentsItem) {
    if (this.components == null) {
      this.components = new ArrayList<>();
    }
    this.components.add(componentsItem);
    return this;
  }

  /**
   * Get components
   * @return components
   */
  @javax.annotation.Nonnull
  public List<Object> getComponents() {
    return components;
  }

  public void setComponents(List<Object> components) {
    this.components = components;
  }


  public DesignerTemplate createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public DesignerTemplate css(String css) {
    this.css = css;
    return this;
  }

  /**
   * Get css
   * @return css
   */
  @javax.annotation.Nonnull
  public String getCss() {
    return css;
  }

  public void setCss(String css) {
    this.css = css;
  }


  public DesignerTemplate footerHtml(String footerHtml) {
    this.footerHtml = footerHtml;
    return this;
  }

  /**
   * Get footerHtml
   * @return footerHtml
   */
  @javax.annotation.Nullable
  public String getFooterHtml() {
    return footerHtml;
  }

  public void setFooterHtml(String footerHtml) {
    this.footerHtml = footerHtml;
  }


  public DesignerTemplate format(Format format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nonnull
  public Format getFormat() {
    return format;
  }

  public void setFormat(Format format) {
    this.format = format;
  }


  public DesignerTemplate headerHtml(String headerHtml) {
    this.headerHtml = headerHtml;
    return this;
  }

  /**
   * Get headerHtml
   * @return headerHtml
   */
  @javax.annotation.Nullable
  public String getHeaderHtml() {
    return headerHtml;
  }

  public void setHeaderHtml(String headerHtml) {
    this.headerHtml = headerHtml;
  }


  public DesignerTemplate id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DesignerTemplate margin(Margin margin) {
    this.margin = margin;
    return this;
  }

  /**
   * Get margin
   * @return margin
   */
  @javax.annotation.Nonnull
  public Margin getMargin() {
    return margin;
  }

  public void setMargin(Margin margin) {
    this.margin = margin;
  }


  public DesignerTemplate name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DesignerTemplate orientation(Orientation orientation) {
    this.orientation = orientation;
    return this;
  }

  /**
   * Get orientation
   * @return orientation
   */
  @javax.annotation.Nonnull
  public Orientation getOrientation() {
    return orientation;
  }

  public void setOrientation(Orientation orientation) {
    this.orientation = orientation;
  }


  public DesignerTemplate previewPayload(Object previewPayload) {
    this.previewPayload = previewPayload;
    return this;
  }

  /**
   * Get previewPayload
   * @return previewPayload
   */
  @javax.annotation.Nonnull
  public Object getPreviewPayload() {
    return previewPayload;
  }

  public void setPreviewPayload(Object previewPayload) {
    this.previewPayload = previewPayload;
  }


  public DesignerTemplate templateHtml(String templateHtml) {
    this.templateHtml = templateHtml;
    return this;
  }

  /**
   * Get templateHtml
   * @return templateHtml
   */
  @javax.annotation.Nonnull
  public String getTemplateHtml() {
    return templateHtml;
  }

  public void setTemplateHtml(String templateHtml) {
    this.templateHtml = templateHtml;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DesignerTemplate designerTemplate = (DesignerTemplate) o;
    return Objects.equals(this.components, designerTemplate.components) &&
        Objects.equals(this.createdAt, designerTemplate.createdAt) &&
        Objects.equals(this.css, designerTemplate.css) &&
        Objects.equals(this.footerHtml, designerTemplate.footerHtml) &&
        Objects.equals(this.format, designerTemplate.format) &&
        Objects.equals(this.headerHtml, designerTemplate.headerHtml) &&
        Objects.equals(this.id, designerTemplate.id) &&
        Objects.equals(this.margin, designerTemplate.margin) &&
        Objects.equals(this.name, designerTemplate.name) &&
        Objects.equals(this.orientation, designerTemplate.orientation) &&
        Objects.equals(this.previewPayload, designerTemplate.previewPayload) &&
        Objects.equals(this.templateHtml, designerTemplate.templateHtml);
  }

  @Override
  public int hashCode() {
    return Objects.hash(components, createdAt, css, footerHtml, format, headerHtml, id, margin, name, orientation, previewPayload, templateHtml);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DesignerTemplate {\n");
    sb.append("    components: ").append(toIndentedString(components)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    css: ").append(toIndentedString(css)).append("\n");
    sb.append("    footerHtml: ").append(toIndentedString(footerHtml)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    headerHtml: ").append(toIndentedString(headerHtml)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    margin: ").append(toIndentedString(margin)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    orientation: ").append(toIndentedString(orientation)).append("\n");
    sb.append("    previewPayload: ").append(toIndentedString(previewPayload)).append("\n");
    sb.append("    templateHtml: ").append(toIndentedString(templateHtml)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("components");
    openapiFields.add("created_at");
    openapiFields.add("css");
    openapiFields.add("footer_html");
    openapiFields.add("format");
    openapiFields.add("header_html");
    openapiFields.add("id");
    openapiFields.add("margin");
    openapiFields.add("name");
    openapiFields.add("orientation");
    openapiFields.add("preview_payload");
    openapiFields.add("template_html");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("components");
    openapiRequiredFields.add("css");
    openapiRequiredFields.add("format");
    openapiRequiredFields.add("margin");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("orientation");
    openapiRequiredFields.add("preview_payload");
    openapiRequiredFields.add("template_html");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DesignerTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DesignerTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DesignerTemplate is not found in the empty JSON string", DesignerTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DesignerTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DesignerTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DesignerTemplate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("components") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("components").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `components` to be an array in the JSON string but got `%s`", jsonObj.get("components").toString()));
      }
      if (!jsonObj.get("css").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `css` to be a primitive type in the JSON string but got `%s`", jsonObj.get("css").toString()));
      }
      if ((jsonObj.get("footer_html") != null && !jsonObj.get("footer_html").isJsonNull()) && !jsonObj.get("footer_html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `footer_html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("footer_html").toString()));
      }
      // validate the required field `format`
      Format.validateJsonElement(jsonObj.get("format"));
      if ((jsonObj.get("header_html") != null && !jsonObj.get("header_html").isJsonNull()) && !jsonObj.get("header_html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header_html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header_html").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `margin`
      Margin.validateJsonElement(jsonObj.get("margin"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `orientation`
      Orientation.validateJsonElement(jsonObj.get("orientation"));
      if (!jsonObj.get("template_html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_html").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DesignerTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DesignerTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DesignerTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DesignerTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<DesignerTemplate>() {
           @Override
           public void write(JsonWriter out, DesignerTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DesignerTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DesignerTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DesignerTemplate
   * @throws IOException if the JSON string is invalid with respect to DesignerTemplate
   */
  public static DesignerTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DesignerTemplate.class);
  }

  /**
   * Convert an instance of DesignerTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

