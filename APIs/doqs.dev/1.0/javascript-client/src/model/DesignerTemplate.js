/**
 * doqs.dev | PDF filling API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Format from './Format';
import Margin from './Margin';
import Orientation from './Orientation';

/**
 * The DesignerTemplate model module.
 * @module model/DesignerTemplate
 * @version 1.0
 */
class DesignerTemplate {
    /**
     * Constructs a new <code>DesignerTemplate</code>.
     * @alias module:model/DesignerTemplate
     * @param components {Array.<Object>} 
     * @param css {String} 
     * @param format {module:model/Format} 
     * @param margin {module:model/Margin} 
     * @param name {String} 
     * @param orientation {module:model/Orientation} 
     * @param previewPayload {Object} 
     * @param templateHtml {String} 
     */
    constructor(components, css, format, margin, name, orientation, previewPayload, templateHtml) { 
        
        DesignerTemplate.initialize(this, components, css, format, margin, name, orientation, previewPayload, templateHtml);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, components, css, format, margin, name, orientation, previewPayload, templateHtml) { 
        obj['components'] = components;
        obj['css'] = css;
        obj['format'] = format;
        obj['margin'] = margin;
        obj['name'] = name;
        obj['orientation'] = orientation;
        obj['preview_payload'] = previewPayload;
        obj['template_html'] = templateHtml;
    }

    /**
     * Constructs a <code>DesignerTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DesignerTemplate} obj Optional instance to populate.
     * @return {module:model/DesignerTemplate} The populated <code>DesignerTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DesignerTemplate();

            if (data.hasOwnProperty('components')) {
                obj['components'] = ApiClient.convertToType(data['components'], [Object]);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('css')) {
                obj['css'] = ApiClient.convertToType(data['css'], 'String');
            }
            if (data.hasOwnProperty('footer_html')) {
                obj['footer_html'] = ApiClient.convertToType(data['footer_html'], 'String');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = Format.constructFromObject(data['format']);
            }
            if (data.hasOwnProperty('header_html')) {
                obj['header_html'] = ApiClient.convertToType(data['header_html'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('margin')) {
                obj['margin'] = Margin.constructFromObject(data['margin']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('orientation')) {
                obj['orientation'] = Orientation.constructFromObject(data['orientation']);
            }
            if (data.hasOwnProperty('preview_payload')) {
                obj['preview_payload'] = ApiClient.convertToType(data['preview_payload'], Object);
            }
            if (data.hasOwnProperty('template_html')) {
                obj['template_html'] = ApiClient.convertToType(data['template_html'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DesignerTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DesignerTemplate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DesignerTemplate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['components'])) {
            throw new Error("Expected the field `components` to be an array in the JSON data but got " + data['components']);
        }
        // ensure the json data is a string
        if (data['css'] && !(typeof data['css'] === 'string' || data['css'] instanceof String)) {
            throw new Error("Expected the field `css` to be a primitive type in the JSON string but got " + data['css']);
        }
        // ensure the json data is a string
        if (data['footer_html'] && !(typeof data['footer_html'] === 'string' || data['footer_html'] instanceof String)) {
            throw new Error("Expected the field `footer_html` to be a primitive type in the JSON string but got " + data['footer_html']);
        }
        // ensure the json data is a string
        if (data['header_html'] && !(typeof data['header_html'] === 'string' || data['header_html'] instanceof String)) {
            throw new Error("Expected the field `header_html` to be a primitive type in the JSON string but got " + data['header_html']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `margin`
        if (data['margin']) { // data not null
          Margin.validateJSON(data['margin']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['template_html'] && !(typeof data['template_html'] === 'string' || data['template_html'] instanceof String)) {
            throw new Error("Expected the field `template_html` to be a primitive type in the JSON string but got " + data['template_html']);
        }

        return true;
    }


}

DesignerTemplate.RequiredProperties = ["components", "css", "format", "margin", "name", "orientation", "preview_payload", "template_html"];

/**
 * @member {Array.<Object>} components
 */
DesignerTemplate.prototype['components'] = undefined;

/**
 * @member {Date} created_at
 */
DesignerTemplate.prototype['created_at'] = undefined;

/**
 * @member {String} css
 */
DesignerTemplate.prototype['css'] = undefined;

/**
 * @member {String} footer_html
 */
DesignerTemplate.prototype['footer_html'] = undefined;

/**
 * @member {module:model/Format} format
 */
DesignerTemplate.prototype['format'] = undefined;

/**
 * @member {String} header_html
 */
DesignerTemplate.prototype['header_html'] = undefined;

/**
 * @member {String} id
 */
DesignerTemplate.prototype['id'] = undefined;

/**
 * @member {module:model/Margin} margin
 */
DesignerTemplate.prototype['margin'] = undefined;

/**
 * @member {String} name
 */
DesignerTemplate.prototype['name'] = undefined;

/**
 * @member {module:model/Orientation} orientation
 */
DesignerTemplate.prototype['orientation'] = undefined;

/**
 * @member {Object} preview_payload
 */
DesignerTemplate.prototype['preview_payload'] = undefined;

/**
 * @member {String} template_html
 */
DesignerTemplate.prototype['template_html'] = undefined;






export default DesignerTemplate;

