/**
 * doqs.dev | PDF filling API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BoundingBox from './BoundingBox';
import Font from './Font';
import HorizontalAlign from './HorizontalAlign';
import VerticalAlign from './VerticalAlign';

/**
 * The TextField model module.
 * @module model/TextField
 * @version 1.0
 */
class TextField {
    /**
     * Constructs a new <code>TextField</code>.
     * @alias module:model/TextField
     * @param bbox {module:model/BoundingBox} 
     * @param name {String} 
     * @param page {Number} 
     * @param type {module:model/TextField.TypeEnum} 
     */
    constructor(bbox, name, page, type) { 
        
        TextField.initialize(this, bbox, name, page, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, bbox, name, page, type) { 
        obj['bbox'] = bbox;
        obj['cell_count'] = 0;
        obj['cell_offset'] = 0;
        obj['cells'] = false;
        obj['color'] = 'black';
        obj['font_size'] = 10;
        obj['name'] = name;
        obj['page'] = page;
        obj['required'] = true;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>TextField</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TextField} obj Optional instance to populate.
     * @return {module:model/TextField} The populated <code>TextField</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TextField();

            if (data.hasOwnProperty('bbox')) {
                obj['bbox'] = BoundingBox.constructFromObject(data['bbox']);
            }
            if (data.hasOwnProperty('cell_count')) {
                obj['cell_count'] = ApiClient.convertToType(data['cell_count'], 'Number');
            }
            if (data.hasOwnProperty('cell_offset')) {
                obj['cell_offset'] = ApiClient.convertToType(data['cell_offset'], 'Number');
            }
            if (data.hasOwnProperty('cells')) {
                obj['cells'] = ApiClient.convertToType(data['cells'], 'Boolean');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('font')) {
                obj['font'] = ApiClient.convertToType(data['font'], Font);
            }
            if (data.hasOwnProperty('font_size')) {
                obj['font_size'] = ApiClient.convertToType(data['font_size'], 'Number');
            }
            if (data.hasOwnProperty('h_align')) {
                obj['h_align'] = ApiClient.convertToType(data['h_align'], HorizontalAlign);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('page')) {
                obj['page'] = ApiClient.convertToType(data['page'], 'Number');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('v_align')) {
                obj['v_align'] = ApiClient.convertToType(data['v_align'], VerticalAlign);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TextField</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TextField</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TextField.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `bbox`
        if (data['bbox']) { // data not null
          BoundingBox.validateJSON(data['bbox']);
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

TextField.RequiredProperties = ["bbox", "name", "page", "type"];

/**
 * @member {module:model/BoundingBox} bbox
 */
TextField.prototype['bbox'] = undefined;

/**
 * @member {Number} cell_count
 * @default 0
 */
TextField.prototype['cell_count'] = 0;

/**
 * @member {Number} cell_offset
 * @default 0
 */
TextField.prototype['cell_offset'] = 0;

/**
 * @member {Boolean} cells
 * @default false
 */
TextField.prototype['cells'] = false;

/**
 * @member {String} color
 * @default 'black'
 */
TextField.prototype['color'] = 'black';

/**
 * @member {module:model/Font} font
 */
TextField.prototype['font'] = undefined;

/**
 * @member {Number} font_size
 * @default 10
 */
TextField.prototype['font_size'] = 10;

/**
 * @member {module:model/HorizontalAlign} h_align
 */
TextField.prototype['h_align'] = undefined;

/**
 * @member {String} name
 */
TextField.prototype['name'] = undefined;

/**
 * @member {Number} page
 */
TextField.prototype['page'] = undefined;

/**
 * @member {Boolean} required
 * @default true
 */
TextField.prototype['required'] = true;

/**
 * @member {module:model/TextField.TypeEnum} type
 */
TextField.prototype['type'] = undefined;

/**
 * @member {module:model/VerticalAlign} v_align
 */
TextField.prototype['v_align'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
TextField['TypeEnum'] = {

    /**
     * value: "text"
     * @const
     */
    "text": "text"
};



export default TextField;

