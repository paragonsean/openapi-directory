/**
 * doqs.dev | PDF filling API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateOrUpdateTemplateRequest from '../model/CreateOrUpdateTemplateRequest';
import GeneratePDFPayload from '../model/GeneratePDFPayload';
import PreviewModel from '../model/PreviewModel';
import ResponseError from '../model/ResponseError';
import ResponseOkDesignerTemplate from '../model/ResponseOkDesignerTemplate';
import ResponseOkListFillrEntitiesDesignerTemplateDesignerTemplate from '../model/ResponseOkListFillrEntitiesDesignerTemplateDesignerTemplate';
import ResponseOkNoneType from '../model/ResponseOkNoneType';
import ResponseOkPreviewResponse from '../model/ResponseOkPreviewResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTemplateDesignerTemplatesPost operation.
     * @callback module:api/DefaultApi~createTemplateDesignerTemplatesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseOkDesignerTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Template
     * @param {module:model/CreateOrUpdateTemplateRequest} createOrUpdateTemplateRequest 
     * @param {module:api/DefaultApi~createTemplateDesignerTemplatesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseOkDesignerTemplate}
     */
    createTemplateDesignerTemplatesPost(createOrUpdateTemplateRequest, callback) {
      let postBody = createOrUpdateTemplateRequest;
      // verify the required parameter 'createOrUpdateTemplateRequest' is set
      if (createOrUpdateTemplateRequest === undefined || createOrUpdateTemplateRequest === null) {
        throw new Error("Missing the required parameter 'createOrUpdateTemplateRequest' when calling createTemplateDesignerTemplatesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseOkDesignerTemplate;
      return this.apiClient.callApi(
        '/designer/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDesignerTemplatesIdDelete operation.
     * @callback module:api/DefaultApi~deleteDesignerTemplatesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseOkNoneType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete
     * @param {String} id 
     * @param {module:api/DefaultApi~deleteDesignerTemplatesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseOkNoneType}
     */
    deleteDesignerTemplatesIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDesignerTemplatesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseOkNoneType;
      return this.apiClient.callApi(
        '/designer/templates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generatePdfDesignerTemplatesIdGeneratePost operation.
     * @callback module:api/DefaultApi~generatePdfDesignerTemplatesIdGeneratePostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate Pdf
     * @param {String} id 
     * @param {module:model/GeneratePDFPayload} generatePDFPayload 
     * @param {module:api/DefaultApi~generatePdfDesignerTemplatesIdGeneratePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    generatePdfDesignerTemplatesIdGeneratePost(id, generatePDFPayload, callback) {
      let postBody = generatePDFPayload;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling generatePdfDesignerTemplatesIdGeneratePost");
      }
      // verify the required parameter 'generatePDFPayload' is set
      if (generatePDFPayload === undefined || generatePDFPayload === null) {
        throw new Error("Missing the required parameter 'generatePDFPayload' when calling generatePdfDesignerTemplatesIdGeneratePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/designer/templates/{id}/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTemplatesDesignerTemplatesGet operation.
     * @callback module:api/DefaultApi~listTemplatesDesignerTemplatesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseOkListFillrEntitiesDesignerTemplateDesignerTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Templates
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/DefaultApi~listTemplatesDesignerTemplatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseOkListFillrEntitiesDesignerTemplateDesignerTemplate}
     */
    listTemplatesDesignerTemplatesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseOkListFillrEntitiesDesignerTemplateDesignerTemplate;
      return this.apiClient.callApi(
        '/designer/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTemplatesDesignerTemplatesIdGet operation.
     * @callback module:api/DefaultApi~listTemplatesDesignerTemplatesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseOkDesignerTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Templates
     * @param {String} id 
     * @param {module:api/DefaultApi~listTemplatesDesignerTemplatesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseOkDesignerTemplate}
     */
    listTemplatesDesignerTemplatesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listTemplatesDesignerTemplatesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseOkDesignerTemplate;
      return this.apiClient.callApi(
        '/designer/templates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the previewDesignerTemplatesPreviewPost operation.
     * @callback module:api/DefaultApi~previewDesignerTemplatesPreviewPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseOkPreviewResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Preview
     * @param {module:model/PreviewModel} previewModel 
     * @param {module:api/DefaultApi~previewDesignerTemplatesPreviewPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseOkPreviewResponse}
     */
    previewDesignerTemplatesPreviewPost(previewModel, callback) {
      let postBody = previewModel;
      // verify the required parameter 'previewModel' is set
      if (previewModel === undefined || previewModel === null) {
        throw new Error("Missing the required parameter 'previewModel' when calling previewDesignerTemplatesPreviewPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseOkPreviewResponse;
      return this.apiClient.callApi(
        '/designer/templates/preview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTemplateDesignerTemplatesIdPut operation.
     * @callback module:api/DefaultApi~updateTemplateDesignerTemplatesIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseOkDesignerTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Template
     * @param {String} id 
     * @param {module:model/CreateOrUpdateTemplateRequest} createOrUpdateTemplateRequest 
     * @param {module:api/DefaultApi~updateTemplateDesignerTemplatesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseOkDesignerTemplate}
     */
    updateTemplateDesignerTemplatesIdPut(id, createOrUpdateTemplateRequest, callback) {
      let postBody = createOrUpdateTemplateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTemplateDesignerTemplatesIdPut");
      }
      // verify the required parameter 'createOrUpdateTemplateRequest' is set
      if (createOrUpdateTemplateRequest === undefined || createOrUpdateTemplateRequest === null) {
        throw new Error("Missing the required parameter 'createOrUpdateTemplateRequest' when calling updateTemplateDesignerTemplatesIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseOkDesignerTemplate;
      return this.apiClient.callApi(
        '/designer/templates/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
