/**
 * doqs.dev | PDF filling API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FillTemplateRequest from '../model/FillTemplateRequest';
import ResponseError from '../model/ResponseError';
import ResponseOkHttpUrl from '../model/ResponseOkHttpUrl';
import ResponseOkListAppsApiRoutesTemplatesTemplate from '../model/ResponseOkListAppsApiRoutesTemplatesTemplate';
import ResponseOkNoneType from '../model/ResponseOkNoneType';
import ResponseOkTemplate from '../model/ResponseOkTemplate';
import UpdateTemplateRequest from '../model/UpdateTemplateRequest';

/**
* Templates service.
* @module api/TemplatesApi
* @version 1.0
*/
export default class TemplatesApi {

    /**
    * Constructs a new TemplatesApi. 
    * @alias module:api/TemplatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the create operation.
     * @callback module:api/TemplatesApi~createCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseOkTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create
     * @param {File} file 
     * @param {module:api/TemplatesApi~createCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseOkTemplate}
     */
    create(file, callback) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling create");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ResponseOkTemplate;
      return this.apiClient.callApi(
        '/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTemplatesIdDelete operation.
     * @callback module:api/TemplatesApi~deleteTemplatesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseOkNoneType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete 
     * @param {String} id 
     * @param {module:api/TemplatesApi~deleteTemplatesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseOkNoneType}
     */
    deleteTemplatesIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTemplatesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseOkNoneType;
      return this.apiClient.callApi(
        '/templates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fill operation.
     * @callback module:api/TemplatesApi~fillCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fill
     * @param {String} id 
     * @param {module:model/FillTemplateRequest} fillTemplateRequest 
     * @param {module:api/TemplatesApi~fillCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    fill(id, fillTemplateRequest, callback) {
      let postBody = fillTemplateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fill");
      }
      // verify the required parameter 'fillTemplateRequest' is set
      if (fillTemplateRequest === undefined || fillTemplateRequest === null) {
        throw new Error("Missing the required parameter 'fillTemplateRequest' when calling fill");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/templates/{id}/fill', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the get operation.
     * @callback module:api/TemplatesApi~getCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseOkTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Template
     * @param {String} id 
     * @param {module:api/TemplatesApi~getCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseOkTemplate}
     */
    get(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling get");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseOkTemplate;
      return this.apiClient.callApi(
        '/templates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFileTemplatesIdFileGet operation.
     * @callback module:api/TemplatesApi~getFileTemplatesIdFileGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseOkHttpUrl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get File
     * @param {String} id 
     * @param {module:api/TemplatesApi~getFileTemplatesIdFileGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseOkHttpUrl}
     */
    getFileTemplatesIdFileGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFileTemplatesIdFileGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseOkHttpUrl;
      return this.apiClient.callApi(
        '/templates/{id}/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the list operation.
     * @callback module:api/TemplatesApi~listCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseOkListAppsApiRoutesTemplatesTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/TemplatesApi~listCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseOkListAppsApiRoutesTemplatesTemplate}
     */
    list(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseOkListAppsApiRoutesTemplatesTemplate;
      return this.apiClient.callApi(
        '/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the update operation.
     * @callback module:api/TemplatesApi~updateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseOkTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update
     * @param {String} id 
     * @param {module:model/UpdateTemplateRequest} updateTemplateRequest 
     * @param {module:api/TemplatesApi~updateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseOkTemplate}
     */
    update(id, updateTemplateRequest, callback) {
      let postBody = updateTemplateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling update");
      }
      // verify the required parameter 'updateTemplateRequest' is set
      if (updateTemplateRequest === undefined || updateTemplateRequest === null) {
        throw new Error("Missing the required parameter 'updateTemplateRequest' when calling update");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseOkTemplate;
      return this.apiClient.callApi(
        '/templates/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
