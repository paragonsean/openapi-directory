/**
 * doqs.dev | PDF filling API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFont.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFont::OAIFont(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFont::OAIFont() {
    this->initializeModel();
}

OAIFont::~OAIFont() {}

void OAIFont::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFont::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFont::fromJson(QString jsonString) {
    
    if ( jsonString.compare("courier", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFont::COURIER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("helvetica", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFont::HELVETICA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("times_roman", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFont::TIMES_ROMAN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFont::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFont::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFont::COURIER:
            val = "courier";
            break;
        case eOAIFont::HELVETICA:
            val = "helvetica";
            break;
        case eOAIFont::TIMES_ROMAN:
            val = "times_roman";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFont::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFont::eOAIFont OAIFont::getValue() const {
    return m_value;
}

void OAIFont::setValue(const OAIFont::eOAIFont& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFont::isSet() const {
    
    return m_value_isSet;
}

bool OAIFont::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
