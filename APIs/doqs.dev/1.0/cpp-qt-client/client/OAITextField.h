/**
 * doqs.dev | PDF filling API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITextField.h
 *
 * 
 */

#ifndef OAITextField_H
#define OAITextField_H

#include <QJsonObject>

#include "OAIBoundingBox.h"
#include "OAIFont.h"
#include "OAIHorizontalAlign.h"
#include "OAIVerticalAlign.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBoundingBox;

class OAITextField : public OAIObject {
public:
    OAITextField();
    OAITextField(QString json);
    ~OAITextField() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIBoundingBox getBbox() const;
    void setBbox(const OAIBoundingBox &bbox);
    bool is_bbox_Set() const;
    bool is_bbox_Valid() const;

    qint32 getCellCount() const;
    void setCellCount(const qint32 &cell_count);
    bool is_cell_count_Set() const;
    bool is_cell_count_Valid() const;

    qint32 getCellOffset() const;
    void setCellOffset(const qint32 &cell_offset);
    bool is_cell_offset_Set() const;
    bool is_cell_offset_Valid() const;

    bool isCells() const;
    void setCells(const bool &cells);
    bool is_cells_Set() const;
    bool is_cells_Valid() const;

    QString getColor() const;
    void setColor(const QString &color);
    bool is_color_Set() const;
    bool is_color_Valid() const;

    OAIFont getFont() const;
    void setFont(const OAIFont &font);
    bool is_font_Set() const;
    bool is_font_Valid() const;

    qint32 getFontSize() const;
    void setFontSize(const qint32 &font_size);
    bool is_font_size_Set() const;
    bool is_font_size_Valid() const;

    OAIHorizontalAlign getHAlign() const;
    void setHAlign(const OAIHorizontalAlign &h_align);
    bool is_h_align_Set() const;
    bool is_h_align_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getPage() const;
    void setPage(const qint32 &page);
    bool is_page_Set() const;
    bool is_page_Valid() const;

    bool isRequired() const;
    void setRequired(const bool &required);
    bool is_required_Set() const;
    bool is_required_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAIVerticalAlign getVAlign() const;
    void setVAlign(const OAIVerticalAlign &v_align);
    bool is_v_align_Set() const;
    bool is_v_align_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIBoundingBox m_bbox;
    bool m_bbox_isSet;
    bool m_bbox_isValid;

    qint32 m_cell_count;
    bool m_cell_count_isSet;
    bool m_cell_count_isValid;

    qint32 m_cell_offset;
    bool m_cell_offset_isSet;
    bool m_cell_offset_isValid;

    bool m_cells;
    bool m_cells_isSet;
    bool m_cells_isValid;

    QString m_color;
    bool m_color_isSet;
    bool m_color_isValid;

    OAIFont m_font;
    bool m_font_isSet;
    bool m_font_isValid;

    qint32 m_font_size;
    bool m_font_size_isSet;
    bool m_font_size_isValid;

    OAIHorizontalAlign m_h_align;
    bool m_h_align_isSet;
    bool m_h_align_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_page;
    bool m_page_isSet;
    bool m_page_isValid;

    bool m_required;
    bool m_required_isSet;
    bool m_required_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAIVerticalAlign m_v_align;
    bool m_v_align_isSet;
    bool m_v_align_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITextField)

#endif // OAITextField_H
