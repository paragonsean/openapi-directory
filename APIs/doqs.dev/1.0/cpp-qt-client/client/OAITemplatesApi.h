/**
 * doqs.dev | PDF filling API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITemplatesApi_H
#define OAI_OAITemplatesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFillTemplateRequest.h"
#include "OAIHttpFileElement.h"
#include "OAIResponseError.h"
#include "OAIResponseOk_HttpUrl_.h"
#include "OAIResponseOk_List_apps_api_routes_templates_Template__.h"
#include "OAIResponseOk_NoneType_.h"
#include "OAIResponseOk_Template_.h"
#include "OAIUpdateTemplateRequest.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITemplatesApi : public QObject {
    Q_OBJECT

public:
    OAITemplatesApi(const int timeOut = 0);
    ~OAITemplatesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  file OAIHttpFileElement [required]
    */
    virtual void create(const OAIHttpFileElement &file);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteTemplatesIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_fill_template_request OAIFillTemplateRequest [required]
    */
    virtual void fill(const QString &id, const OAIFillTemplateRequest &oai_fill_template_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void get(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getFileTemplatesIdFileGet(const QString &id);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void list(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_update_template_request OAIUpdateTemplateRequest [required]
    */
    virtual void update(const QString &id, const OAIUpdateTemplateRequest &oai_update_template_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCallback(OAIHttpRequestWorker *worker);
    void deleteTemplatesIdDeleteCallback(OAIHttpRequestWorker *worker);
    void fillCallback(OAIHttpRequestWorker *worker);
    void getCallback(OAIHttpRequestWorker *worker);
    void getFileTemplatesIdFileGetCallback(OAIHttpRequestWorker *worker);
    void listCallback(OAIHttpRequestWorker *worker);
    void updateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSignal(OAIResponseOk_Template_ summary);
    void deleteTemplatesIdDeleteSignal(OAIResponseOk_NoneType_ summary);
    void fillSignal(QJsonValue summary);
    void getSignal(OAIResponseOk_Template_ summary);
    void getFileTemplatesIdFileGetSignal(OAIResponseOk_HttpUrl_ summary);
    void listSignal(OAIResponseOk_List_apps_api_routes_templates_Template__ summary);
    void updateSignal(OAIResponseOk_Template_ summary);


    void createSignalFull(OAIHttpRequestWorker *worker, OAIResponseOk_Template_ summary);
    void deleteTemplatesIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIResponseOk_NoneType_ summary);
    void fillSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getSignalFull(OAIHttpRequestWorker *worker, OAIResponseOk_Template_ summary);
    void getFileTemplatesIdFileGetSignalFull(OAIHttpRequestWorker *worker, OAIResponseOk_HttpUrl_ summary);
    void listSignalFull(OAIHttpRequestWorker *worker, OAIResponseOk_List_apps_api_routes_templates_Template__ summary);
    void updateSignalFull(OAIHttpRequestWorker *worker, OAIResponseOk_Template_ summary);

    Q_DECL_DEPRECATED_X("Use createSignalError() instead")
    void createSignalE(OAIResponseOk_Template_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSignalError(OAIResponseOk_Template_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTemplatesIdDeleteSignalError() instead")
    void deleteTemplatesIdDeleteSignalE(OAIResponseOk_NoneType_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTemplatesIdDeleteSignalError(OAIResponseOk_NoneType_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fillSignalError() instead")
    void fillSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fillSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSignalError() instead")
    void getSignalE(OAIResponseOk_Template_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSignalError(OAIResponseOk_Template_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFileTemplatesIdFileGetSignalError() instead")
    void getFileTemplatesIdFileGetSignalE(OAIResponseOk_HttpUrl_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFileTemplatesIdFileGetSignalError(OAIResponseOk_HttpUrl_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSignalError() instead")
    void listSignalE(OAIResponseOk_List_apps_api_routes_templates_Template__ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSignalError(OAIResponseOk_List_apps_api_routes_templates_Template__ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSignalError() instead")
    void updateSignalE(OAIResponseOk_Template_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSignalError(OAIResponseOk_Template_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSignalErrorFull() instead")
    void createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTemplatesIdDeleteSignalErrorFull() instead")
    void deleteTemplatesIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTemplatesIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fillSignalErrorFull() instead")
    void fillSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fillSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSignalErrorFull() instead")
    void getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFileTemplatesIdFileGetSignalErrorFull() instead")
    void getFileTemplatesIdFileGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFileTemplatesIdFileGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSignalErrorFull() instead")
    void listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSignalErrorFull() instead")
    void updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
