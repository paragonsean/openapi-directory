/**
 * doqs.dev | PDF filling API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckBoxField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckBoxField::OAICheckBoxField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckBoxField::OAICheckBoxField() {
    this->initializeModel();
}

OAICheckBoxField::~OAICheckBoxField() {}

void OAICheckBoxField::initializeModel() {

    m_bbox_isSet = false;
    m_bbox_isValid = false;

    m_eval_isSet = false;
    m_eval_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICheckBoxField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckBoxField::fromJsonObject(QJsonObject json) {

    m_bbox_isValid = ::OpenAPI::fromJsonValue(m_bbox, json[QString("bbox")]);
    m_bbox_isSet = !json[QString("bbox")].isNull() && m_bbox_isValid;

    m_eval_isValid = ::OpenAPI::fromJsonValue(m_eval, json[QString("eval")]);
    m_eval_isSet = !json[QString("eval")].isNull() && m_eval_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICheckBoxField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckBoxField::asJsonObject() const {
    QJsonObject obj;
    if (m_bbox.isSet()) {
        obj.insert(QString("bbox"), ::OpenAPI::toJsonValue(m_bbox));
    }
    if (m_eval.isSet()) {
        obj.insert(QString("eval"), ::OpenAPI::toJsonValue(m_eval));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIBoundingBox OAICheckBoxField::getBbox() const {
    return m_bbox;
}
void OAICheckBoxField::setBbox(const OAIBoundingBox &bbox) {
    m_bbox = bbox;
    m_bbox_isSet = true;
}

bool OAICheckBoxField::is_bbox_Set() const{
    return m_bbox_isSet;
}

bool OAICheckBoxField::is_bbox_Valid() const{
    return m_bbox_isValid;
}

OAIEval OAICheckBoxField::getEval() const {
    return m_eval;
}
void OAICheckBoxField::setEval(const OAIEval &eval) {
    m_eval = eval;
    m_eval_isSet = true;
}

bool OAICheckBoxField::is_eval_Set() const{
    return m_eval_isSet;
}

bool OAICheckBoxField::is_eval_Valid() const{
    return m_eval_isValid;
}

QString OAICheckBoxField::getName() const {
    return m_name;
}
void OAICheckBoxField::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICheckBoxField::is_name_Set() const{
    return m_name_isSet;
}

bool OAICheckBoxField::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAICheckBoxField::getPage() const {
    return m_page;
}
void OAICheckBoxField::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAICheckBoxField::is_page_Set() const{
    return m_page_isSet;
}

bool OAICheckBoxField::is_page_Valid() const{
    return m_page_isValid;
}

bool OAICheckBoxField::isRequired() const {
    return m_required;
}
void OAICheckBoxField::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAICheckBoxField::is_required_Set() const{
    return m_required_isSet;
}

bool OAICheckBoxField::is_required_Valid() const{
    return m_required_isValid;
}

QString OAICheckBoxField::getType() const {
    return m_type;
}
void OAICheckBoxField::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICheckBoxField::is_type_Set() const{
    return m_type_isSet;
}

bool OAICheckBoxField::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICheckBoxField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bbox.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckBoxField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bbox_isValid && m_name_isValid && m_page_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
