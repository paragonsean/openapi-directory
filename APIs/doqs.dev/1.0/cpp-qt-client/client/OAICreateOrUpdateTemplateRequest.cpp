/**
 * doqs.dev | PDF filling API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateOrUpdateTemplateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateOrUpdateTemplateRequest::OAICreateOrUpdateTemplateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateOrUpdateTemplateRequest::OAICreateOrUpdateTemplateRequest() {
    this->initializeModel();
}

OAICreateOrUpdateTemplateRequest::~OAICreateOrUpdateTemplateRequest() {}

void OAICreateOrUpdateTemplateRequest::initializeModel() {

    m_components_isSet = false;
    m_components_isValid = false;

    m_css_isSet = false;
    m_css_isValid = false;

    m_footer_html_isSet = false;
    m_footer_html_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_header_html_isSet = false;
    m_header_html_isValid = false;

    m_margin_isSet = false;
    m_margin_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_orientation_isSet = false;
    m_orientation_isValid = false;

    m_preview_payload_isSet = false;
    m_preview_payload_isValid = false;

    m_template_html_isSet = false;
    m_template_html_isValid = false;
}

void OAICreateOrUpdateTemplateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateOrUpdateTemplateRequest::fromJsonObject(QJsonObject json) {

    m_components_isValid = ::OpenAPI::fromJsonValue(m_components, json[QString("components")]);
    m_components_isSet = !json[QString("components")].isNull() && m_components_isValid;

    m_css_isValid = ::OpenAPI::fromJsonValue(m_css, json[QString("css")]);
    m_css_isSet = !json[QString("css")].isNull() && m_css_isValid;

    m_footer_html_isValid = ::OpenAPI::fromJsonValue(m_footer_html, json[QString("footer_html")]);
    m_footer_html_isSet = !json[QString("footer_html")].isNull() && m_footer_html_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_header_html_isValid = ::OpenAPI::fromJsonValue(m_header_html, json[QString("header_html")]);
    m_header_html_isSet = !json[QString("header_html")].isNull() && m_header_html_isValid;

    m_margin_isValid = ::OpenAPI::fromJsonValue(m_margin, json[QString("margin")]);
    m_margin_isSet = !json[QString("margin")].isNull() && m_margin_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_orientation_isValid = ::OpenAPI::fromJsonValue(m_orientation, json[QString("orientation")]);
    m_orientation_isSet = !json[QString("orientation")].isNull() && m_orientation_isValid;

    m_preview_payload_isValid = ::OpenAPI::fromJsonValue(m_preview_payload, json[QString("preview_payload")]);
    m_preview_payload_isSet = !json[QString("preview_payload")].isNull() && m_preview_payload_isValid;

    m_template_html_isValid = ::OpenAPI::fromJsonValue(m_template_html, json[QString("template_html")]);
    m_template_html_isSet = !json[QString("template_html")].isNull() && m_template_html_isValid;
}

QString OAICreateOrUpdateTemplateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateOrUpdateTemplateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_components.size() > 0) {
        obj.insert(QString("components"), ::OpenAPI::toJsonValue(m_components));
    }
    if (m_css_isSet) {
        obj.insert(QString("css"), ::OpenAPI::toJsonValue(m_css));
    }
    if (m_footer_html_isSet) {
        obj.insert(QString("footer_html"), ::OpenAPI::toJsonValue(m_footer_html));
    }
    if (m_format.isSet()) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_header_html_isSet) {
        obj.insert(QString("header_html"), ::OpenAPI::toJsonValue(m_header_html));
    }
    if (m_margin.isSet()) {
        obj.insert(QString("margin"), ::OpenAPI::toJsonValue(m_margin));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_orientation.isSet()) {
        obj.insert(QString("orientation"), ::OpenAPI::toJsonValue(m_orientation));
    }
    if (m_preview_payload_isSet) {
        obj.insert(QString("preview_payload"), ::OpenAPI::toJsonValue(m_preview_payload));
    }
    if (m_template_html_isSet) {
        obj.insert(QString("template_html"), ::OpenAPI::toJsonValue(m_template_html));
    }
    return obj;
}

QList<OAIObject> OAICreateOrUpdateTemplateRequest::getComponents() const {
    return m_components;
}
void OAICreateOrUpdateTemplateRequest::setComponents(const QList<OAIObject> &components) {
    m_components = components;
    m_components_isSet = true;
}

bool OAICreateOrUpdateTemplateRequest::is_components_Set() const{
    return m_components_isSet;
}

bool OAICreateOrUpdateTemplateRequest::is_components_Valid() const{
    return m_components_isValid;
}

QString OAICreateOrUpdateTemplateRequest::getCss() const {
    return m_css;
}
void OAICreateOrUpdateTemplateRequest::setCss(const QString &css) {
    m_css = css;
    m_css_isSet = true;
}

bool OAICreateOrUpdateTemplateRequest::is_css_Set() const{
    return m_css_isSet;
}

bool OAICreateOrUpdateTemplateRequest::is_css_Valid() const{
    return m_css_isValid;
}

QString OAICreateOrUpdateTemplateRequest::getFooterHtml() const {
    return m_footer_html;
}
void OAICreateOrUpdateTemplateRequest::setFooterHtml(const QString &footer_html) {
    m_footer_html = footer_html;
    m_footer_html_isSet = true;
}

bool OAICreateOrUpdateTemplateRequest::is_footer_html_Set() const{
    return m_footer_html_isSet;
}

bool OAICreateOrUpdateTemplateRequest::is_footer_html_Valid() const{
    return m_footer_html_isValid;
}

OAIFormat OAICreateOrUpdateTemplateRequest::getFormat() const {
    return m_format;
}
void OAICreateOrUpdateTemplateRequest::setFormat(const OAIFormat &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAICreateOrUpdateTemplateRequest::is_format_Set() const{
    return m_format_isSet;
}

bool OAICreateOrUpdateTemplateRequest::is_format_Valid() const{
    return m_format_isValid;
}

QString OAICreateOrUpdateTemplateRequest::getHeaderHtml() const {
    return m_header_html;
}
void OAICreateOrUpdateTemplateRequest::setHeaderHtml(const QString &header_html) {
    m_header_html = header_html;
    m_header_html_isSet = true;
}

bool OAICreateOrUpdateTemplateRequest::is_header_html_Set() const{
    return m_header_html_isSet;
}

bool OAICreateOrUpdateTemplateRequest::is_header_html_Valid() const{
    return m_header_html_isValid;
}

OAIMargin OAICreateOrUpdateTemplateRequest::getMargin() const {
    return m_margin;
}
void OAICreateOrUpdateTemplateRequest::setMargin(const OAIMargin &margin) {
    m_margin = margin;
    m_margin_isSet = true;
}

bool OAICreateOrUpdateTemplateRequest::is_margin_Set() const{
    return m_margin_isSet;
}

bool OAICreateOrUpdateTemplateRequest::is_margin_Valid() const{
    return m_margin_isValid;
}

QString OAICreateOrUpdateTemplateRequest::getName() const {
    return m_name;
}
void OAICreateOrUpdateTemplateRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateOrUpdateTemplateRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateOrUpdateTemplateRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAIOrientation OAICreateOrUpdateTemplateRequest::getOrientation() const {
    return m_orientation;
}
void OAICreateOrUpdateTemplateRequest::setOrientation(const OAIOrientation &orientation) {
    m_orientation = orientation;
    m_orientation_isSet = true;
}

bool OAICreateOrUpdateTemplateRequest::is_orientation_Set() const{
    return m_orientation_isSet;
}

bool OAICreateOrUpdateTemplateRequest::is_orientation_Valid() const{
    return m_orientation_isValid;
}

OAIObject OAICreateOrUpdateTemplateRequest::getPreviewPayload() const {
    return m_preview_payload;
}
void OAICreateOrUpdateTemplateRequest::setPreviewPayload(const OAIObject &preview_payload) {
    m_preview_payload = preview_payload;
    m_preview_payload_isSet = true;
}

bool OAICreateOrUpdateTemplateRequest::is_preview_payload_Set() const{
    return m_preview_payload_isSet;
}

bool OAICreateOrUpdateTemplateRequest::is_preview_payload_Valid() const{
    return m_preview_payload_isValid;
}

QString OAICreateOrUpdateTemplateRequest::getTemplateHtml() const {
    return m_template_html;
}
void OAICreateOrUpdateTemplateRequest::setTemplateHtml(const QString &template_html) {
    m_template_html = template_html;
    m_template_html_isSet = true;
}

bool OAICreateOrUpdateTemplateRequest::is_template_html_Set() const{
    return m_template_html_isSet;
}

bool OAICreateOrUpdateTemplateRequest::is_template_html_Valid() const{
    return m_template_html_isValid;
}

bool OAICreateOrUpdateTemplateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_components.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_css_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_footer_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orientation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_html_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateOrUpdateTemplateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_components_isValid && m_css_isValid && m_format_isValid && m_name_isValid && m_orientation_isValid && m_preview_payload_isValid && m_template_html_isValid && true;
}

} // namespace OpenAPI
