/**
 * doqs.dev | PDF filling API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateOrUpdateTemplateRequest.h"
#include "OAIGeneratePDFPayload.h"
#include "OAIPreviewModel.h"
#include "OAIResponseError.h"
#include "OAIResponseOk_DesignerTemplate_.h"
#include "OAIResponseOk_List_fillr_entities_designer_template_DesignerTemplate__.h"
#include "OAIResponseOk_NoneType_.h"
#include "OAIResponseOk_PreviewResponse_.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_or_update_template_request OAICreateOrUpdateTemplateRequest [required]
    */
    virtual void createTemplateDesignerTemplatesPost(const OAICreateOrUpdateTemplateRequest &oai_create_or_update_template_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteDesignerTemplatesIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_generate_pdf_payload OAIGeneratePDFPayload [required]
    */
    virtual void generatePdfDesignerTemplatesIdGeneratePost(const QString &id, const OAIGeneratePDFPayload &oai_generate_pdf_payload);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void listTemplatesDesignerTemplatesGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void listTemplatesDesignerTemplatesIdGet(const QString &id);

    /**
    * @param[in]  oai_preview_model OAIPreviewModel [required]
    */
    virtual void previewDesignerTemplatesPreviewPost(const OAIPreviewModel &oai_preview_model);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_or_update_template_request OAICreateOrUpdateTemplateRequest [required]
    */
    virtual void updateTemplateDesignerTemplatesIdPut(const QString &id, const OAICreateOrUpdateTemplateRequest &oai_create_or_update_template_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createTemplateDesignerTemplatesPostCallback(OAIHttpRequestWorker *worker);
    void deleteDesignerTemplatesIdDeleteCallback(OAIHttpRequestWorker *worker);
    void generatePdfDesignerTemplatesIdGeneratePostCallback(OAIHttpRequestWorker *worker);
    void listTemplatesDesignerTemplatesGetCallback(OAIHttpRequestWorker *worker);
    void listTemplatesDesignerTemplatesIdGetCallback(OAIHttpRequestWorker *worker);
    void previewDesignerTemplatesPreviewPostCallback(OAIHttpRequestWorker *worker);
    void updateTemplateDesignerTemplatesIdPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createTemplateDesignerTemplatesPostSignal(OAIResponseOk_DesignerTemplate_ summary);
    void deleteDesignerTemplatesIdDeleteSignal(OAIResponseOk_NoneType_ summary);
    void generatePdfDesignerTemplatesIdGeneratePostSignal(QJsonValue summary);
    void listTemplatesDesignerTemplatesGetSignal(OAIResponseOk_List_fillr_entities_designer_template_DesignerTemplate__ summary);
    void listTemplatesDesignerTemplatesIdGetSignal(OAIResponseOk_DesignerTemplate_ summary);
    void previewDesignerTemplatesPreviewPostSignal(OAIResponseOk_PreviewResponse_ summary);
    void updateTemplateDesignerTemplatesIdPutSignal(OAIResponseOk_DesignerTemplate_ summary);


    void createTemplateDesignerTemplatesPostSignalFull(OAIHttpRequestWorker *worker, OAIResponseOk_DesignerTemplate_ summary);
    void deleteDesignerTemplatesIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIResponseOk_NoneType_ summary);
    void generatePdfDesignerTemplatesIdGeneratePostSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void listTemplatesDesignerTemplatesGetSignalFull(OAIHttpRequestWorker *worker, OAIResponseOk_List_fillr_entities_designer_template_DesignerTemplate__ summary);
    void listTemplatesDesignerTemplatesIdGetSignalFull(OAIHttpRequestWorker *worker, OAIResponseOk_DesignerTemplate_ summary);
    void previewDesignerTemplatesPreviewPostSignalFull(OAIHttpRequestWorker *worker, OAIResponseOk_PreviewResponse_ summary);
    void updateTemplateDesignerTemplatesIdPutSignalFull(OAIHttpRequestWorker *worker, OAIResponseOk_DesignerTemplate_ summary);

    Q_DECL_DEPRECATED_X("Use createTemplateDesignerTemplatesPostSignalError() instead")
    void createTemplateDesignerTemplatesPostSignalE(OAIResponseOk_DesignerTemplate_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTemplateDesignerTemplatesPostSignalError(OAIResponseOk_DesignerTemplate_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDesignerTemplatesIdDeleteSignalError() instead")
    void deleteDesignerTemplatesIdDeleteSignalE(OAIResponseOk_NoneType_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDesignerTemplatesIdDeleteSignalError(OAIResponseOk_NoneType_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generatePdfDesignerTemplatesIdGeneratePostSignalError() instead")
    void generatePdfDesignerTemplatesIdGeneratePostSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generatePdfDesignerTemplatesIdGeneratePostSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTemplatesDesignerTemplatesGetSignalError() instead")
    void listTemplatesDesignerTemplatesGetSignalE(OAIResponseOk_List_fillr_entities_designer_template_DesignerTemplate__ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTemplatesDesignerTemplatesGetSignalError(OAIResponseOk_List_fillr_entities_designer_template_DesignerTemplate__ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTemplatesDesignerTemplatesIdGetSignalError() instead")
    void listTemplatesDesignerTemplatesIdGetSignalE(OAIResponseOk_DesignerTemplate_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTemplatesDesignerTemplatesIdGetSignalError(OAIResponseOk_DesignerTemplate_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use previewDesignerTemplatesPreviewPostSignalError() instead")
    void previewDesignerTemplatesPreviewPostSignalE(OAIResponseOk_PreviewResponse_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void previewDesignerTemplatesPreviewPostSignalError(OAIResponseOk_PreviewResponse_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTemplateDesignerTemplatesIdPutSignalError() instead")
    void updateTemplateDesignerTemplatesIdPutSignalE(OAIResponseOk_DesignerTemplate_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTemplateDesignerTemplatesIdPutSignalError(OAIResponseOk_DesignerTemplate_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createTemplateDesignerTemplatesPostSignalErrorFull() instead")
    void createTemplateDesignerTemplatesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTemplateDesignerTemplatesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDesignerTemplatesIdDeleteSignalErrorFull() instead")
    void deleteDesignerTemplatesIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDesignerTemplatesIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generatePdfDesignerTemplatesIdGeneratePostSignalErrorFull() instead")
    void generatePdfDesignerTemplatesIdGeneratePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generatePdfDesignerTemplatesIdGeneratePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTemplatesDesignerTemplatesGetSignalErrorFull() instead")
    void listTemplatesDesignerTemplatesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTemplatesDesignerTemplatesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTemplatesDesignerTemplatesIdGetSignalErrorFull() instead")
    void listTemplatesDesignerTemplatesIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTemplatesDesignerTemplatesIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use previewDesignerTemplatesPreviewPostSignalErrorFull() instead")
    void previewDesignerTemplatesPreviewPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void previewDesignerTemplatesPreviewPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTemplateDesignerTemplatesIdPutSignalErrorFull() instead")
    void updateTemplateDesignerTemplatesIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTemplateDesignerTemplatesIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
