/**
 * doqs.dev | PDF filling API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextField::OAITextField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextField::OAITextField() {
    this->initializeModel();
}

OAITextField::~OAITextField() {}

void OAITextField::initializeModel() {

    m_bbox_isSet = false;
    m_bbox_isValid = false;

    m_cell_count_isSet = false;
    m_cell_count_isValid = false;

    m_cell_offset_isSet = false;
    m_cell_offset_isValid = false;

    m_cells_isSet = false;
    m_cells_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_font_isSet = false;
    m_font_isValid = false;

    m_font_size_isSet = false;
    m_font_size_isValid = false;

    m_h_align_isSet = false;
    m_h_align_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_v_align_isSet = false;
    m_v_align_isValid = false;
}

void OAITextField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextField::fromJsonObject(QJsonObject json) {

    m_bbox_isValid = ::OpenAPI::fromJsonValue(m_bbox, json[QString("bbox")]);
    m_bbox_isSet = !json[QString("bbox")].isNull() && m_bbox_isValid;

    m_cell_count_isValid = ::OpenAPI::fromJsonValue(m_cell_count, json[QString("cell_count")]);
    m_cell_count_isSet = !json[QString("cell_count")].isNull() && m_cell_count_isValid;

    m_cell_offset_isValid = ::OpenAPI::fromJsonValue(m_cell_offset, json[QString("cell_offset")]);
    m_cell_offset_isSet = !json[QString("cell_offset")].isNull() && m_cell_offset_isValid;

    m_cells_isValid = ::OpenAPI::fromJsonValue(m_cells, json[QString("cells")]);
    m_cells_isSet = !json[QString("cells")].isNull() && m_cells_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_font_isValid = ::OpenAPI::fromJsonValue(m_font, json[QString("font")]);
    m_font_isSet = !json[QString("font")].isNull() && m_font_isValid;

    m_font_size_isValid = ::OpenAPI::fromJsonValue(m_font_size, json[QString("font_size")]);
    m_font_size_isSet = !json[QString("font_size")].isNull() && m_font_size_isValid;

    m_h_align_isValid = ::OpenAPI::fromJsonValue(m_h_align, json[QString("h_align")]);
    m_h_align_isSet = !json[QString("h_align")].isNull() && m_h_align_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_v_align_isValid = ::OpenAPI::fromJsonValue(m_v_align, json[QString("v_align")]);
    m_v_align_isSet = !json[QString("v_align")].isNull() && m_v_align_isValid;
}

QString OAITextField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextField::asJsonObject() const {
    QJsonObject obj;
    if (m_bbox.isSet()) {
        obj.insert(QString("bbox"), ::OpenAPI::toJsonValue(m_bbox));
    }
    if (m_cell_count_isSet) {
        obj.insert(QString("cell_count"), ::OpenAPI::toJsonValue(m_cell_count));
    }
    if (m_cell_offset_isSet) {
        obj.insert(QString("cell_offset"), ::OpenAPI::toJsonValue(m_cell_offset));
    }
    if (m_cells_isSet) {
        obj.insert(QString("cells"), ::OpenAPI::toJsonValue(m_cells));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_font.isSet()) {
        obj.insert(QString("font"), ::OpenAPI::toJsonValue(m_font));
    }
    if (m_font_size_isSet) {
        obj.insert(QString("font_size"), ::OpenAPI::toJsonValue(m_font_size));
    }
    if (m_h_align.isSet()) {
        obj.insert(QString("h_align"), ::OpenAPI::toJsonValue(m_h_align));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_v_align.isSet()) {
        obj.insert(QString("v_align"), ::OpenAPI::toJsonValue(m_v_align));
    }
    return obj;
}

OAIBoundingBox OAITextField::getBbox() const {
    return m_bbox;
}
void OAITextField::setBbox(const OAIBoundingBox &bbox) {
    m_bbox = bbox;
    m_bbox_isSet = true;
}

bool OAITextField::is_bbox_Set() const{
    return m_bbox_isSet;
}

bool OAITextField::is_bbox_Valid() const{
    return m_bbox_isValid;
}

qint32 OAITextField::getCellCount() const {
    return m_cell_count;
}
void OAITextField::setCellCount(const qint32 &cell_count) {
    m_cell_count = cell_count;
    m_cell_count_isSet = true;
}

bool OAITextField::is_cell_count_Set() const{
    return m_cell_count_isSet;
}

bool OAITextField::is_cell_count_Valid() const{
    return m_cell_count_isValid;
}

qint32 OAITextField::getCellOffset() const {
    return m_cell_offset;
}
void OAITextField::setCellOffset(const qint32 &cell_offset) {
    m_cell_offset = cell_offset;
    m_cell_offset_isSet = true;
}

bool OAITextField::is_cell_offset_Set() const{
    return m_cell_offset_isSet;
}

bool OAITextField::is_cell_offset_Valid() const{
    return m_cell_offset_isValid;
}

bool OAITextField::isCells() const {
    return m_cells;
}
void OAITextField::setCells(const bool &cells) {
    m_cells = cells;
    m_cells_isSet = true;
}

bool OAITextField::is_cells_Set() const{
    return m_cells_isSet;
}

bool OAITextField::is_cells_Valid() const{
    return m_cells_isValid;
}

QString OAITextField::getColor() const {
    return m_color;
}
void OAITextField::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAITextField::is_color_Set() const{
    return m_color_isSet;
}

bool OAITextField::is_color_Valid() const{
    return m_color_isValid;
}

OAIFont OAITextField::getFont() const {
    return m_font;
}
void OAITextField::setFont(const OAIFont &font) {
    m_font = font;
    m_font_isSet = true;
}

bool OAITextField::is_font_Set() const{
    return m_font_isSet;
}

bool OAITextField::is_font_Valid() const{
    return m_font_isValid;
}

qint32 OAITextField::getFontSize() const {
    return m_font_size;
}
void OAITextField::setFontSize(const qint32 &font_size) {
    m_font_size = font_size;
    m_font_size_isSet = true;
}

bool OAITextField::is_font_size_Set() const{
    return m_font_size_isSet;
}

bool OAITextField::is_font_size_Valid() const{
    return m_font_size_isValid;
}

OAIHorizontalAlign OAITextField::getHAlign() const {
    return m_h_align;
}
void OAITextField::setHAlign(const OAIHorizontalAlign &h_align) {
    m_h_align = h_align;
    m_h_align_isSet = true;
}

bool OAITextField::is_h_align_Set() const{
    return m_h_align_isSet;
}

bool OAITextField::is_h_align_Valid() const{
    return m_h_align_isValid;
}

QString OAITextField::getName() const {
    return m_name;
}
void OAITextField::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITextField::is_name_Set() const{
    return m_name_isSet;
}

bool OAITextField::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAITextField::getPage() const {
    return m_page;
}
void OAITextField::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAITextField::is_page_Set() const{
    return m_page_isSet;
}

bool OAITextField::is_page_Valid() const{
    return m_page_isValid;
}

bool OAITextField::isRequired() const {
    return m_required;
}
void OAITextField::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAITextField::is_required_Set() const{
    return m_required_isSet;
}

bool OAITextField::is_required_Valid() const{
    return m_required_isValid;
}

QString OAITextField::getType() const {
    return m_type;
}
void OAITextField::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITextField::is_type_Set() const{
    return m_type_isSet;
}

bool OAITextField::is_type_Valid() const{
    return m_type_isValid;
}

OAIVerticalAlign OAITextField::getVAlign() const {
    return m_v_align;
}
void OAITextField::setVAlign(const OAIVerticalAlign &v_align) {
    m_v_align = v_align;
    m_v_align_isSet = true;
}

bool OAITextField::is_v_align_Set() const{
    return m_v_align_isSet;
}

bool OAITextField::is_v_align_Valid() const{
    return m_v_align_isValid;
}

bool OAITextField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bbox.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cell_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cell_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cells_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_h_align.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v_align.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bbox_isValid && m_name_isValid && m_page_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
