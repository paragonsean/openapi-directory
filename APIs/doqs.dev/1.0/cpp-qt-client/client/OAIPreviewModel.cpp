/**
 * doqs.dev | PDF filling API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPreviewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPreviewModel::OAIPreviewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPreviewModel::OAIPreviewModel() {
    this->initializeModel();
}

OAIPreviewModel::~OAIPreviewModel() {}

void OAIPreviewModel::initializeModel() {

    m_css_isSet = false;
    m_css_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_footer_html_isSet = false;
    m_footer_html_isValid = false;

    m_header_html_isSet = false;
    m_header_html_isValid = false;

    m_template_html_isSet = false;
    m_template_html_isValid = false;
}

void OAIPreviewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPreviewModel::fromJsonObject(QJsonObject json) {

    m_css_isValid = ::OpenAPI::fromJsonValue(m_css, json[QString("css")]);
    m_css_isSet = !json[QString("css")].isNull() && m_css_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_footer_html_isValid = ::OpenAPI::fromJsonValue(m_footer_html, json[QString("footer_html")]);
    m_footer_html_isSet = !json[QString("footer_html")].isNull() && m_footer_html_isValid;

    m_header_html_isValid = ::OpenAPI::fromJsonValue(m_header_html, json[QString("header_html")]);
    m_header_html_isSet = !json[QString("header_html")].isNull() && m_header_html_isValid;

    m_template_html_isValid = ::OpenAPI::fromJsonValue(m_template_html, json[QString("template_html")]);
    m_template_html_isSet = !json[QString("template_html")].isNull() && m_template_html_isValid;
}

QString OAIPreviewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPreviewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_css_isSet) {
        obj.insert(QString("css"), ::OpenAPI::toJsonValue(m_css));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_footer_html_isSet) {
        obj.insert(QString("footer_html"), ::OpenAPI::toJsonValue(m_footer_html));
    }
    if (m_header_html_isSet) {
        obj.insert(QString("header_html"), ::OpenAPI::toJsonValue(m_header_html));
    }
    if (m_template_html_isSet) {
        obj.insert(QString("template_html"), ::OpenAPI::toJsonValue(m_template_html));
    }
    return obj;
}

QString OAIPreviewModel::getCss() const {
    return m_css;
}
void OAIPreviewModel::setCss(const QString &css) {
    m_css = css;
    m_css_isSet = true;
}

bool OAIPreviewModel::is_css_Set() const{
    return m_css_isSet;
}

bool OAIPreviewModel::is_css_Valid() const{
    return m_css_isValid;
}

OAIObject OAIPreviewModel::getData() const {
    return m_data;
}
void OAIPreviewModel::setData(const OAIObject &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIPreviewModel::is_data_Set() const{
    return m_data_isSet;
}

bool OAIPreviewModel::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIPreviewModel::getFooterHtml() const {
    return m_footer_html;
}
void OAIPreviewModel::setFooterHtml(const QString &footer_html) {
    m_footer_html = footer_html;
    m_footer_html_isSet = true;
}

bool OAIPreviewModel::is_footer_html_Set() const{
    return m_footer_html_isSet;
}

bool OAIPreviewModel::is_footer_html_Valid() const{
    return m_footer_html_isValid;
}

QString OAIPreviewModel::getHeaderHtml() const {
    return m_header_html;
}
void OAIPreviewModel::setHeaderHtml(const QString &header_html) {
    m_header_html = header_html;
    m_header_html_isSet = true;
}

bool OAIPreviewModel::is_header_html_Set() const{
    return m_header_html_isSet;
}

bool OAIPreviewModel::is_header_html_Valid() const{
    return m_header_html_isValid;
}

QString OAIPreviewModel::getTemplateHtml() const {
    return m_template_html;
}
void OAIPreviewModel::setTemplateHtml(const QString &template_html) {
    m_template_html = template_html;
    m_template_html_isSet = true;
}

bool OAIPreviewModel::is_template_html_Set() const{
    return m_template_html_isSet;
}

bool OAIPreviewModel::is_template_html_Valid() const{
    return m_template_html_isValid;
}

bool OAIPreviewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_css_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_footer_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_html_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPreviewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_css_isValid && m_data_isValid && m_template_html_isValid && true;
}

} // namespace OpenAPI
