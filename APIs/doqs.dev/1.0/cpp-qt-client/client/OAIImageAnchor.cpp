/**
 * doqs.dev | PDF filling API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageAnchor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageAnchor::OAIImageAnchor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageAnchor::OAIImageAnchor() {
    this->initializeModel();
}

OAIImageAnchor::~OAIImageAnchor() {}

void OAIImageAnchor::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIImageAnchor::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIImageAnchor::fromJson(QString jsonString) {
    
    if ( jsonString.compare("nw", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageAnchor::NW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("n", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageAnchor::N;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ne", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageAnchor::NE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("w", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageAnchor::W;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageAnchor::C;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("e", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageAnchor::E;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sw", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageAnchor::SW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("s", Qt::CaseInsensitive) == 0) {
        m_value = eOAIImageAnchor::S;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIImageAnchor::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIImageAnchor::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIImageAnchor::NW:
            val = "nw";
            break;
        case eOAIImageAnchor::N:
            val = "n";
            break;
        case eOAIImageAnchor::NE:
            val = "ne";
            break;
        case eOAIImageAnchor::W:
            val = "w";
            break;
        case eOAIImageAnchor::C:
            val = "c";
            break;
        case eOAIImageAnchor::E:
            val = "e";
            break;
        case eOAIImageAnchor::SW:
            val = "sw";
            break;
        case eOAIImageAnchor::S:
            val = "s";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIImageAnchor::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIImageAnchor::eOAIImageAnchor OAIImageAnchor::getValue() const {
    return m_value;
}

void OAIImageAnchor::setValue(const OAIImageAnchor::eOAIImageAnchor& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIImageAnchor::isSet() const {
    
    return m_value_isSet;
}

bool OAIImageAnchor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
