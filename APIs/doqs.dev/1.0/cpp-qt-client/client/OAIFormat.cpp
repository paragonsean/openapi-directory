/**
 * doqs.dev | PDF filling API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFormat::OAIFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFormat::OAIFormat() {
    this->initializeModel();
}

OAIFormat::~OAIFormat() {}

void OAIFormat::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFormat::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFormat::fromJson(QString jsonString) {
    
    if ( jsonString.compare("a0", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormat::A0;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("a1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormat::A1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("a2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormat::A2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("a3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormat::A3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("a4", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormat::A4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("a5", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormat::A5;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("a6", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFormat::A6;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFormat::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFormat::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFormat::A0:
            val = "a0";
            break;
        case eOAIFormat::A1:
            val = "a1";
            break;
        case eOAIFormat::A2:
            val = "a2";
            break;
        case eOAIFormat::A3:
            val = "a3";
            break;
        case eOAIFormat::A4:
            val = "a4";
            break;
        case eOAIFormat::A5:
            val = "a5";
            break;
        case eOAIFormat::A6:
            val = "a6";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFormat::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFormat::eOAIFormat OAIFormat::getValue() const {
    return m_value;
}

void OAIFormat::setValue(const OAIFormat::eOAIFormat& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFormat::isSet() const {
    
    return m_value_isSet;
}

bool OAIFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
