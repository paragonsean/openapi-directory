/**
 * doqs.dev | PDF filling API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplate::OAITemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplate::OAITemplate() {
    this->initializeModel();
}

OAITemplate::~OAITemplate() {}

void OAITemplate::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pages_isSet = false;
    m_pages_isValid = false;

    m_size_bytes_isSet = false;
    m_size_bytes_isValid = false;
}

void OAITemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplate::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pages_isValid = ::OpenAPI::fromJsonValue(m_pages, json[QString("pages")]);
    m_pages_isSet = !json[QString("pages")].isNull() && m_pages_isValid;

    m_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_bytes, json[QString("size_bytes")]);
    m_size_bytes_isSet = !json[QString("size_bytes")].isNull() && m_size_bytes_isValid;
}

QString OAITemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pages_isSet) {
        obj.insert(QString("pages"), ::OpenAPI::toJsonValue(m_pages));
    }
    if (m_size_bytes_isSet) {
        obj.insert(QString("size_bytes"), ::OpenAPI::toJsonValue(m_size_bytes));
    }
    return obj;
}

QDateTime OAITemplate::getCreatedAt() const {
    return m_created_at;
}
void OAITemplate::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITemplate::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITemplate::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<OAIFields_inner> OAITemplate::getFields() const {
    return m_fields;
}
void OAITemplate::setFields(const QList<OAIFields_inner> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAITemplate::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAITemplate::is_fields_Valid() const{
    return m_fields_isValid;
}

QString OAITemplate::getId() const {
    return m_id;
}
void OAITemplate::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITemplate::is_id_Set() const{
    return m_id_isSet;
}

bool OAITemplate::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITemplate::getName() const {
    return m_name;
}
void OAITemplate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITemplate::is_name_Set() const{
    return m_name_isSet;
}

bool OAITemplate::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAITemplate::getPages() const {
    return m_pages;
}
void OAITemplate::setPages(const qint32 &pages) {
    m_pages = pages;
    m_pages_isSet = true;
}

bool OAITemplate::is_pages_Set() const{
    return m_pages_isSet;
}

bool OAITemplate::is_pages_Valid() const{
    return m_pages_isValid;
}

qint32 OAITemplate::getSizeBytes() const {
    return m_size_bytes;
}
void OAITemplate::setSizeBytes(const qint32 &size_bytes) {
    m_size_bytes = size_bytes;
    m_size_bytes_isSet = true;
}

bool OAITemplate::is_size_bytes_Set() const{
    return m_size_bytes_isSet;
}

bool OAITemplate::is_size_bytes_Valid() const{
    return m_size_bytes_isValid;
}

bool OAITemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pages_isValid && true;
}

} // namespace OpenAPI
