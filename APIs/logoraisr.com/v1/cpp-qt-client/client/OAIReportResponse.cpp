/**
 * API docs | logoraisr.com
 * <p style=\"font-size:110%;\">Dig into our logoraisr API reference documentation. We also offer an OpenAPI specification to allow easy integration into your systems. You can download the json file by clicking on the download button.<p><br><p style=\"font-size:110%; font-weight:bold\">OpenAPI 2.0 Validation Status</p><img src=\"https://online.swagger.io/validator?url=https://docs.logoraisr.com/\">
 *
 * The version of the OpenAPI document: v1
 * Contact: support@logoraisr.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportResponse::OAIReportResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportResponse::OAIReportResponse() {
    this->initializeModel();
}

OAIReportResponse::~OAIReportResponse() {}

void OAIReportResponse::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_file_id_isSet = false;
    m_file_id_isValid = false;

    m_processing_algorithm_isSet = false;
    m_processing_algorithm_isValid = false;

    m_report_number_isSet = false;
    m_report_number_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;
}

void OAIReportResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportResponse::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_file_id_isValid = ::OpenAPI::fromJsonValue(m_file_id, json[QString("file_id")]);
    m_file_id_isSet = !json[QString("file_id")].isNull() && m_file_id_isValid;

    m_processing_algorithm_isValid = ::OpenAPI::fromJsonValue(m_processing_algorithm, json[QString("processing_algorithm")]);
    m_processing_algorithm_isSet = !json[QString("processing_algorithm")].isNull() && m_processing_algorithm_isValid;

    m_report_number_isValid = ::OpenAPI::fromJsonValue(m_report_number, json[QString("report_number")]);
    m_report_number_isSet = !json[QString("report_number")].isNull() && m_report_number_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;
}

QString OAIReportResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_file_id_isSet) {
        obj.insert(QString("file_id"), ::OpenAPI::toJsonValue(m_file_id));
    }
    if (m_processing_algorithm_isSet) {
        obj.insert(QString("processing_algorithm"), ::OpenAPI::toJsonValue(m_processing_algorithm));
    }
    if (m_report_number_isSet) {
        obj.insert(QString("report_number"), ::OpenAPI::toJsonValue(m_report_number));
    }
    if (m_result.isSet()) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    return obj;
}

QDateTime OAIReportResponse::getCreated() const {
    return m_created;
}
void OAIReportResponse::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIReportResponse::is_created_Set() const{
    return m_created_isSet;
}

bool OAIReportResponse::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIReportResponse::getFileId() const {
    return m_file_id;
}
void OAIReportResponse::setFileId(const QString &file_id) {
    m_file_id = file_id;
    m_file_id_isSet = true;
}

bool OAIReportResponse::is_file_id_Set() const{
    return m_file_id_isSet;
}

bool OAIReportResponse::is_file_id_Valid() const{
    return m_file_id_isValid;
}

QString OAIReportResponse::getProcessingAlgorithm() const {
    return m_processing_algorithm;
}
void OAIReportResponse::setProcessingAlgorithm(const QString &processing_algorithm) {
    m_processing_algorithm = processing_algorithm;
    m_processing_algorithm_isSet = true;
}

bool OAIReportResponse::is_processing_algorithm_Set() const{
    return m_processing_algorithm_isSet;
}

bool OAIReportResponse::is_processing_algorithm_Valid() const{
    return m_processing_algorithm_isValid;
}

qint32 OAIReportResponse::getReportNumber() const {
    return m_report_number;
}
void OAIReportResponse::setReportNumber(const qint32 &report_number) {
    m_report_number = report_number;
    m_report_number_isSet = true;
}

bool OAIReportResponse::is_report_number_Set() const{
    return m_report_number_isSet;
}

bool OAIReportResponse::is_report_number_Valid() const{
    return m_report_number_isValid;
}

OAIResult OAIReportResponse::getResult() const {
    return m_result;
}
void OAIReportResponse::setResult(const OAIResult &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIReportResponse::is_result_Set() const{
    return m_result_isSet;
}

bool OAIReportResponse::is_result_Valid() const{
    return m_result_isValid;
}

bool OAIReportResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
