/**
 * API docs | logoraisr.com
 * <p style=\"font-size:110%;\">Dig into our logoraisr API reference documentation. We also offer an OpenAPI specification to allow easy integration into your systems. You can download the json file by clicking on the download button.<p><br><p style=\"font-size:110%; font-weight:bold\">OpenAPI 2.0 Validation Status</p><img src=\"https://online.swagger.io/validator?url=https://docs.logoraisr.com/\">
 *
 * The version of the OpenAPI document: v1
 * Contact: support@logoraisr.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectRequest::OAIProjectRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectRequest::OAIProjectRequest() {
    this->initializeModel();
}

OAIProjectRequest::~OAIProjectRequest() {}

void OAIProjectRequest::initializeModel() {

    m_file_id_isSet = false;
    m_file_id_isValid = false;

    m_process_isSet = false;
    m_process_isValid = false;

    m_project_title_isSet = false;
    m_project_title_isValid = false;
}

void OAIProjectRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectRequest::fromJsonObject(QJsonObject json) {

    m_file_id_isValid = ::OpenAPI::fromJsonValue(m_file_id, json[QString("file_id")]);
    m_file_id_isSet = !json[QString("file_id")].isNull() && m_file_id_isValid;

    m_process_isValid = ::OpenAPI::fromJsonValue(m_process, json[QString("process")]);
    m_process_isSet = !json[QString("process")].isNull() && m_process_isValid;

    m_project_title_isValid = ::OpenAPI::fromJsonValue(m_project_title, json[QString("project_title")]);
    m_project_title_isSet = !json[QString("project_title")].isNull() && m_project_title_isValid;
}

QString OAIProjectRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_file_id_isSet) {
        obj.insert(QString("file_id"), ::OpenAPI::toJsonValue(m_file_id));
    }
    if (m_process.isSet()) {
        obj.insert(QString("process"), ::OpenAPI::toJsonValue(m_process));
    }
    if (m_project_title_isSet) {
        obj.insert(QString("project_title"), ::OpenAPI::toJsonValue(m_project_title));
    }
    return obj;
}

QString OAIProjectRequest::getFileId() const {
    return m_file_id;
}
void OAIProjectRequest::setFileId(const QString &file_id) {
    m_file_id = file_id;
    m_file_id_isSet = true;
}

bool OAIProjectRequest::is_file_id_Set() const{
    return m_file_id_isSet;
}

bool OAIProjectRequest::is_file_id_Valid() const{
    return m_file_id_isValid;
}

OAIProcess OAIProjectRequest::getProcess() const {
    return m_process;
}
void OAIProjectRequest::setProcess(const OAIProcess &process) {
    m_process = process;
    m_process_isSet = true;
}

bool OAIProjectRequest::is_process_Set() const{
    return m_process_isSet;
}

bool OAIProjectRequest::is_process_Valid() const{
    return m_process_isValid;
}

QString OAIProjectRequest::getProjectTitle() const {
    return m_project_title;
}
void OAIProjectRequest::setProjectTitle(const QString &project_title) {
    m_project_title = project_title;
    m_project_title_isSet = true;
}

bool OAIProjectRequest::is_project_title_Set() const{
    return m_project_title_isSet;
}

bool OAIProjectRequest::is_project_title_Valid() const{
    return m_project_title_isValid;
}

bool OAIProjectRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_process.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_id_isValid && m_project_title_isValid && true;
}

} // namespace OpenAPI
