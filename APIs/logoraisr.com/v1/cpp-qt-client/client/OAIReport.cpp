/**
 * API docs | logoraisr.com
 * <p style=\"font-size:110%;\">Dig into our logoraisr API reference documentation. We also offer an OpenAPI specification to allow easy integration into your systems. You can download the json file by clicking on the download button.<p><br><p style=\"font-size:110%; font-weight:bold\">OpenAPI 2.0 Validation Status</p><img src=\"https://online.swagger.io/validator?url=https://docs.logoraisr.com/\">
 *
 * The version of the OpenAPI document: v1
 * Contact: support@logoraisr.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReport::OAIReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReport::OAIReport() {
    this->initializeModel();
}

OAIReport::~OAIReport() {}

void OAIReport::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_file_id_isSet = false;
    m_file_id_isValid = false;

    m_process_id_isSet = false;
    m_process_id_isValid = false;

    m_report_number_isSet = false;
    m_report_number_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_result_id_isSet = false;
    m_result_id_isValid = false;
}

void OAIReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReport::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_file_id_isValid = ::OpenAPI::fromJsonValue(m_file_id, json[QString("file_id")]);
    m_file_id_isSet = !json[QString("file_id")].isNull() && m_file_id_isValid;

    m_process_id_isValid = ::OpenAPI::fromJsonValue(m_process_id, json[QString("process_id")]);
    m_process_id_isSet = !json[QString("process_id")].isNull() && m_process_id_isValid;

    m_report_number_isValid = ::OpenAPI::fromJsonValue(m_report_number, json[QString("report_number")]);
    m_report_number_isSet = !json[QString("report_number")].isNull() && m_report_number_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_result_id_isValid = ::OpenAPI::fromJsonValue(m_result_id, json[QString("result_id")]);
    m_result_id_isSet = !json[QString("result_id")].isNull() && m_result_id_isValid;
}

QString OAIReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReport::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_file_id_isSet) {
        obj.insert(QString("file_id"), ::OpenAPI::toJsonValue(m_file_id));
    }
    if (m_process_id_isSet) {
        obj.insert(QString("process_id"), ::OpenAPI::toJsonValue(m_process_id));
    }
    if (m_report_number_isSet) {
        obj.insert(QString("report_number"), ::OpenAPI::toJsonValue(m_report_number));
    }
    if (m_result.isSet()) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_result_id_isSet) {
        obj.insert(QString("result_id"), ::OpenAPI::toJsonValue(m_result_id));
    }
    return obj;
}

QDateTime OAIReport::getCreated() const {
    return m_created;
}
void OAIReport::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIReport::is_created_Set() const{
    return m_created_isSet;
}

bool OAIReport::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIReport::getFileId() const {
    return m_file_id;
}
void OAIReport::setFileId(const QString &file_id) {
    m_file_id = file_id;
    m_file_id_isSet = true;
}

bool OAIReport::is_file_id_Set() const{
    return m_file_id_isSet;
}

bool OAIReport::is_file_id_Valid() const{
    return m_file_id_isValid;
}

qint32 OAIReport::getProcessId() const {
    return m_process_id;
}
void OAIReport::setProcessId(const qint32 &process_id) {
    m_process_id = process_id;
    m_process_id_isSet = true;
}

bool OAIReport::is_process_id_Set() const{
    return m_process_id_isSet;
}

bool OAIReport::is_process_id_Valid() const{
    return m_process_id_isValid;
}

qint32 OAIReport::getReportNumber() const {
    return m_report_number;
}
void OAIReport::setReportNumber(const qint32 &report_number) {
    m_report_number = report_number;
    m_report_number_isSet = true;
}

bool OAIReport::is_report_number_Set() const{
    return m_report_number_isSet;
}

bool OAIReport::is_report_number_Valid() const{
    return m_report_number_isValid;
}

OAIResult OAIReport::getResult() const {
    return m_result;
}
void OAIReport::setResult(const OAIResult &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIReport::is_result_Set() const{
    return m_result_isSet;
}

bool OAIReport::is_result_Valid() const{
    return m_result_isValid;
}

qint32 OAIReport::getResultId() const {
    return m_result_id;
}
void OAIReport::setResultId(const qint32 &result_id) {
    m_result_id = result_id;
    m_result_id_isSet = true;
}

bool OAIReport::is_result_id_Set() const{
    return m_result_id_isSet;
}

bool OAIReport::is_result_id_Valid() const{
    return m_result_id_isValid;
}

bool OAIReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_process_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_id_isValid && m_process_id_isValid && m_report_number_isValid && m_result_id_isValid && true;
}

} // namespace OpenAPI
