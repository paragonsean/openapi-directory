/**
 * API docs | logoraisr.com
 * <p style=\"font-size:110%;\">Dig into our logoraisr API reference documentation. We also offer an OpenAPI specification to allow easy integration into your systems. You can download the json file by clicking on the download button.<p><br><p style=\"font-size:110%; font-weight:bold\">OpenAPI 2.0 Validation Status</p><img src=\"https://online.swagger.io/validator?url=https://docs.logoraisr.com/\">
 *
 * The version of the OpenAPI document: v1
 * Contact: support@logoraisr.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResult::OAIResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResult::OAIResult() {
    this->initializeModel();
}

OAIResult::~OAIResult() {}

void OAIResult::initializeModel() {

    m_colors_isSet = false;
    m_colors_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_number_of_pixel_in_image_isSet = false;
    m_number_of_pixel_in_image_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResult::fromJsonObject(QJsonObject json) {

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("colors")]);
    m_colors_isSet = !json[QString("colors")].isNull() && m_colors_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_number_of_pixel_in_image_isValid = ::OpenAPI::fromJsonValue(m_number_of_pixel_in_image, json[QString("number_of_pixel_in_image")]);
    m_number_of_pixel_in_image_isSet = !json[QString("number_of_pixel_in_image")].isNull() && m_number_of_pixel_in_image_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResult::asJsonObject() const {
    QJsonObject obj;
    if (m_colors.size() > 0) {
        obj.insert(QString("colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_number_of_pixel_in_image_isSet) {
        obj.insert(QString("number_of_pixel_in_image"), ::OpenAPI::toJsonValue(m_number_of_pixel_in_image));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QList<OAIColor> OAIResult::getColors() const {
    return m_colors;
}
void OAIResult::setColors(const QList<OAIColor> &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAIResult::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAIResult::is_colors_Valid() const{
    return m_colors_isValid;
}

qint32 OAIResult::getHeight() const {
    return m_height;
}
void OAIResult::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIResult::is_height_Set() const{
    return m_height_isSet;
}

bool OAIResult::is_height_Valid() const{
    return m_height_isValid;
}

qint32 OAIResult::getNumberOfPixelInImage() const {
    return m_number_of_pixel_in_image;
}
void OAIResult::setNumberOfPixelInImage(const qint32 &number_of_pixel_in_image) {
    m_number_of_pixel_in_image = number_of_pixel_in_image;
    m_number_of_pixel_in_image_isSet = true;
}

bool OAIResult::is_number_of_pixel_in_image_Set() const{
    return m_number_of_pixel_in_image_isSet;
}

bool OAIResult::is_number_of_pixel_in_image_Valid() const{
    return m_number_of_pixel_in_image_isValid;
}

qint32 OAIResult::getWidth() const {
    return m_width;
}
void OAIResult::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIResult::is_width_Set() const{
    return m_width_isSet;
}

bool OAIResult::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_pixel_in_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
