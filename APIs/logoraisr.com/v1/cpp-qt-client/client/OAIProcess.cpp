/**
 * API docs | logoraisr.com
 * <p style=\"font-size:110%;\">Dig into our logoraisr API reference documentation. We also offer an OpenAPI specification to allow easy integration into your systems. You can download the json file by clicking on the download button.<p><br><p style=\"font-size:110%; font-weight:bold\">OpenAPI 2.0 Validation Status</p><img src=\"https://online.swagger.io/validator?url=https://docs.logoraisr.com/\">
 *
 * The version of the OpenAPI document: v1
 * Contact: support@logoraisr.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProcess.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProcess::OAIProcess(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProcess::OAIProcess() {
    this->initializeModel();
}

OAIProcess::~OAIProcess() {}

void OAIProcess::initializeModel() {

    m_crop_isSet = false;
    m_crop_isValid = false;

    m_flip_isSet = false;
    m_flip_isValid = false;

    m_mirror_isSet = false;
    m_mirror_isValid = false;

    m_processing_algorithm_isSet = false;
    m_processing_algorithm_isValid = false;

    m_resize_isSet = false;
    m_resize_isValid = false;

    m_rotate_isSet = false;
    m_rotate_isValid = false;
}

void OAIProcess::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProcess::fromJsonObject(QJsonObject json) {

    m_crop_isValid = ::OpenAPI::fromJsonValue(m_crop, json[QString("crop")]);
    m_crop_isSet = !json[QString("crop")].isNull() && m_crop_isValid;

    m_flip_isValid = ::OpenAPI::fromJsonValue(m_flip, json[QString("flip")]);
    m_flip_isSet = !json[QString("flip")].isNull() && m_flip_isValid;

    m_mirror_isValid = ::OpenAPI::fromJsonValue(m_mirror, json[QString("mirror")]);
    m_mirror_isSet = !json[QString("mirror")].isNull() && m_mirror_isValid;

    m_processing_algorithm_isValid = ::OpenAPI::fromJsonValue(m_processing_algorithm, json[QString("processing_algorithm")]);
    m_processing_algorithm_isSet = !json[QString("processing_algorithm")].isNull() && m_processing_algorithm_isValid;

    m_resize_isValid = ::OpenAPI::fromJsonValue(m_resize, json[QString("resize")]);
    m_resize_isSet = !json[QString("resize")].isNull() && m_resize_isValid;

    m_rotate_isValid = ::OpenAPI::fromJsonValue(m_rotate, json[QString("rotate")]);
    m_rotate_isSet = !json[QString("rotate")].isNull() && m_rotate_isValid;
}

QString OAIProcess::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProcess::asJsonObject() const {
    QJsonObject obj;
    if (m_crop_isSet) {
        obj.insert(QString("crop"), ::OpenAPI::toJsonValue(m_crop));
    }
    if (m_flip_isSet) {
        obj.insert(QString("flip"), ::OpenAPI::toJsonValue(m_flip));
    }
    if (m_mirror_isSet) {
        obj.insert(QString("mirror"), ::OpenAPI::toJsonValue(m_mirror));
    }
    if (m_processing_algorithm_isSet) {
        obj.insert(QString("processing_algorithm"), ::OpenAPI::toJsonValue(m_processing_algorithm));
    }
    if (m_resize_isSet) {
        obj.insert(QString("resize"), ::OpenAPI::toJsonValue(m_resize));
    }
    if (m_rotate_isSet) {
        obj.insert(QString("rotate"), ::OpenAPI::toJsonValue(m_rotate));
    }
    return obj;
}

QString OAIProcess::getCrop() const {
    return m_crop;
}
void OAIProcess::setCrop(const QString &crop) {
    m_crop = crop;
    m_crop_isSet = true;
}

bool OAIProcess::is_crop_Set() const{
    return m_crop_isSet;
}

bool OAIProcess::is_crop_Valid() const{
    return m_crop_isValid;
}

bool OAIProcess::isFlip() const {
    return m_flip;
}
void OAIProcess::setFlip(const bool &flip) {
    m_flip = flip;
    m_flip_isSet = true;
}

bool OAIProcess::is_flip_Set() const{
    return m_flip_isSet;
}

bool OAIProcess::is_flip_Valid() const{
    return m_flip_isValid;
}

bool OAIProcess::isMirror() const {
    return m_mirror;
}
void OAIProcess::setMirror(const bool &mirror) {
    m_mirror = mirror;
    m_mirror_isSet = true;
}

bool OAIProcess::is_mirror_Set() const{
    return m_mirror_isSet;
}

bool OAIProcess::is_mirror_Valid() const{
    return m_mirror_isValid;
}

QString OAIProcess::getProcessingAlgorithm() const {
    return m_processing_algorithm;
}
void OAIProcess::setProcessingAlgorithm(const QString &processing_algorithm) {
    m_processing_algorithm = processing_algorithm;
    m_processing_algorithm_isSet = true;
}

bool OAIProcess::is_processing_algorithm_Set() const{
    return m_processing_algorithm_isSet;
}

bool OAIProcess::is_processing_algorithm_Valid() const{
    return m_processing_algorithm_isValid;
}

QString OAIProcess::getResize() const {
    return m_resize;
}
void OAIProcess::setResize(const QString &resize) {
    m_resize = resize;
    m_resize_isSet = true;
}

bool OAIProcess::is_resize_Set() const{
    return m_resize_isSet;
}

bool OAIProcess::is_resize_Valid() const{
    return m_resize_isValid;
}

qint32 OAIProcess::getRotate() const {
    return m_rotate;
}
void OAIProcess::setRotate(const qint32 &rotate) {
    m_rotate = rotate;
    m_rotate_isSet = true;
}

bool OAIProcess::is_rotate_Set() const{
    return m_rotate_isSet;
}

bool OAIProcess::is_rotate_Valid() const{
    return m_rotate_isValid;
}

bool OAIProcess::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_crop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mirror_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resize_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProcess::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_processing_algorithm_isValid && true;
}

} // namespace OpenAPI
