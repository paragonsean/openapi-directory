/**
 * API docs | logoraisr.com
 * <p style=\"font-size:110%;\">Dig into our logoraisr API reference documentation. We also offer an OpenAPI specification to allow easy integration into your systems. You can download the json file by clicking on the download button.<p><br><p style=\"font-size:110%; font-weight:bold\">OpenAPI 2.0 Validation Status</p><img src=\"https://online.swagger.io/validator?url=https://docs.logoraisr.com/\">
 *
 * The version of the OpenAPI document: v1
 * Contact: support@logoraisr.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportRequest::OAIReportRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportRequest::OAIReportRequest() {
    this->initializeModel();
}

OAIReportRequest::~OAIReportRequest() {}

void OAIReportRequest::initializeModel() {

    m_file_id_isSet = false;
    m_file_id_isValid = false;

    m_process_isSet = false;
    m_process_isValid = false;
}

void OAIReportRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportRequest::fromJsonObject(QJsonObject json) {

    m_file_id_isValid = ::OpenAPI::fromJsonValue(m_file_id, json[QString("file_id")]);
    m_file_id_isSet = !json[QString("file_id")].isNull() && m_file_id_isValid;

    m_process_isValid = ::OpenAPI::fromJsonValue(m_process, json[QString("process")]);
    m_process_isSet = !json[QString("process")].isNull() && m_process_isValid;
}

QString OAIReportRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_file_id_isSet) {
        obj.insert(QString("file_id"), ::OpenAPI::toJsonValue(m_file_id));
    }
    if (m_process_isSet) {
        obj.insert(QString("process"), ::OpenAPI::toJsonValue(m_process));
    }
    return obj;
}

QString OAIReportRequest::getFileId() const {
    return m_file_id;
}
void OAIReportRequest::setFileId(const QString &file_id) {
    m_file_id = file_id;
    m_file_id_isSet = true;
}

bool OAIReportRequest::is_file_id_Set() const{
    return m_file_id_isSet;
}

bool OAIReportRequest::is_file_id_Valid() const{
    return m_file_id_isValid;
}

QString OAIReportRequest::getProcess() const {
    return m_process;
}
void OAIReportRequest::setProcess(const QString &process) {
    m_process = process;
    m_process_isSet = true;
}

bool OAIReportRequest::is_process_Set() const{
    return m_process_isSet;
}

bool OAIReportRequest::is_process_Valid() const{
    return m_process_isValid;
}

bool OAIReportRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_process_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_id_isValid && m_process_isValid && true;
}

} // namespace OpenAPI
