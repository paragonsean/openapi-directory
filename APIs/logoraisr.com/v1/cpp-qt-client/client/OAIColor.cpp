/**
 * API docs | logoraisr.com
 * <p style=\"font-size:110%;\">Dig into our logoraisr API reference documentation. We also offer an OpenAPI specification to allow easy integration into your systems. You can download the json file by clicking on the download button.<p><br><p style=\"font-size:110%; font-weight:bold\">OpenAPI 2.0 Validation Status</p><img src=\"https://online.swagger.io/validator?url=https://docs.logoraisr.com/\">
 *
 * The version of the OpenAPI document: v1
 * Contact: support@logoraisr.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColor::OAIColor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColor::OAIColor() {
    this->initializeModel();
}

OAIColor::~OAIColor() {}

void OAIColor::initializeModel() {

    m_blue_isSet = false;
    m_blue_isValid = false;

    m_green_isSet = false;
    m_green_isValid = false;

    m_hex_isSet = false;
    m_hex_isValid = false;

    m_number_of_pixel_isSet = false;
    m_number_of_pixel_isValid = false;

    m_percentage_isSet = false;
    m_percentage_isValid = false;

    m_red_isSet = false;
    m_red_isValid = false;
}

void OAIColor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColor::fromJsonObject(QJsonObject json) {

    m_blue_isValid = ::OpenAPI::fromJsonValue(m_blue, json[QString("blue")]);
    m_blue_isSet = !json[QString("blue")].isNull() && m_blue_isValid;

    m_green_isValid = ::OpenAPI::fromJsonValue(m_green, json[QString("green")]);
    m_green_isSet = !json[QString("green")].isNull() && m_green_isValid;

    m_hex_isValid = ::OpenAPI::fromJsonValue(m_hex, json[QString("hex")]);
    m_hex_isSet = !json[QString("hex")].isNull() && m_hex_isValid;

    m_number_of_pixel_isValid = ::OpenAPI::fromJsonValue(m_number_of_pixel, json[QString("number_of_pixel")]);
    m_number_of_pixel_isSet = !json[QString("number_of_pixel")].isNull() && m_number_of_pixel_isValid;

    m_percentage_isValid = ::OpenAPI::fromJsonValue(m_percentage, json[QString("percentage")]);
    m_percentage_isSet = !json[QString("percentage")].isNull() && m_percentage_isValid;

    m_red_isValid = ::OpenAPI::fromJsonValue(m_red, json[QString("red")]);
    m_red_isSet = !json[QString("red")].isNull() && m_red_isValid;
}

QString OAIColor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColor::asJsonObject() const {
    QJsonObject obj;
    if (m_blue_isSet) {
        obj.insert(QString("blue"), ::OpenAPI::toJsonValue(m_blue));
    }
    if (m_green_isSet) {
        obj.insert(QString("green"), ::OpenAPI::toJsonValue(m_green));
    }
    if (m_hex_isSet) {
        obj.insert(QString("hex"), ::OpenAPI::toJsonValue(m_hex));
    }
    if (m_number_of_pixel_isSet) {
        obj.insert(QString("number_of_pixel"), ::OpenAPI::toJsonValue(m_number_of_pixel));
    }
    if (m_percentage_isSet) {
        obj.insert(QString("percentage"), ::OpenAPI::toJsonValue(m_percentage));
    }
    if (m_red_isSet) {
        obj.insert(QString("red"), ::OpenAPI::toJsonValue(m_red));
    }
    return obj;
}

qint32 OAIColor::getBlue() const {
    return m_blue;
}
void OAIColor::setBlue(const qint32 &blue) {
    m_blue = blue;
    m_blue_isSet = true;
}

bool OAIColor::is_blue_Set() const{
    return m_blue_isSet;
}

bool OAIColor::is_blue_Valid() const{
    return m_blue_isValid;
}

qint32 OAIColor::getGreen() const {
    return m_green;
}
void OAIColor::setGreen(const qint32 &green) {
    m_green = green;
    m_green_isSet = true;
}

bool OAIColor::is_green_Set() const{
    return m_green_isSet;
}

bool OAIColor::is_green_Valid() const{
    return m_green_isValid;
}

QString OAIColor::getHex() const {
    return m_hex;
}
void OAIColor::setHex(const QString &hex) {
    m_hex = hex;
    m_hex_isSet = true;
}

bool OAIColor::is_hex_Set() const{
    return m_hex_isSet;
}

bool OAIColor::is_hex_Valid() const{
    return m_hex_isValid;
}

qint32 OAIColor::getNumberOfPixel() const {
    return m_number_of_pixel;
}
void OAIColor::setNumberOfPixel(const qint32 &number_of_pixel) {
    m_number_of_pixel = number_of_pixel;
    m_number_of_pixel_isSet = true;
}

bool OAIColor::is_number_of_pixel_Set() const{
    return m_number_of_pixel_isSet;
}

bool OAIColor::is_number_of_pixel_Valid() const{
    return m_number_of_pixel_isValid;
}

QString OAIColor::getPercentage() const {
    return m_percentage;
}
void OAIColor::setPercentage(const QString &percentage) {
    m_percentage = percentage;
    m_percentage_isSet = true;
}

bool OAIColor::is_percentage_Set() const{
    return m_percentage_isSet;
}

bool OAIColor::is_percentage_Valid() const{
    return m_percentage_isValid;
}

qint32 OAIColor::getRed() const {
    return m_red;
}
void OAIColor::setRed(const qint32 &red) {
    m_red = red;
    m_red_isSet = true;
}

bool OAIColor::is_red_Set() const{
    return m_red_isSet;
}

bool OAIColor::is_red_Valid() const{
    return m_red_isValid;
}

bool OAIColor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_green_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_pixel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_red_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
