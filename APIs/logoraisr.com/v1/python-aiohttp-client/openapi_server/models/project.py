# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.process import Process
from openapi_server import util


class Project(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, file_id: str=None, id: int=None, paypal_payment_id: str=None, process: Process=None, process_id: str=None, project_number: int=None, project_title: str=None, result_file_id: str=None):
        """Project - a model defined in OpenAPI

        :param created: The created of this Project.
        :param file_id: The file_id of this Project.
        :param id: The id of this Project.
        :param paypal_payment_id: The paypal_payment_id of this Project.
        :param process: The process of this Project.
        :param process_id: The process_id of this Project.
        :param project_number: The project_number of this Project.
        :param project_title: The project_title of this Project.
        :param result_file_id: The result_file_id of this Project.
        """
        self.openapi_types = {
            'created': datetime,
            'file_id': str,
            'id': int,
            'paypal_payment_id': str,
            'process': Process,
            'process_id': str,
            'project_number': int,
            'project_title': str,
            'result_file_id': str
        }

        self.attribute_map = {
            'created': 'created',
            'file_id': 'file_id',
            'id': 'id',
            'paypal_payment_id': 'paypal_payment_id',
            'process': 'process',
            'process_id': 'process_id',
            'project_number': 'project_number',
            'project_title': 'project_title',
            'result_file_id': 'result_file_id'
        }

        self._created = created
        self._file_id = file_id
        self._id = id
        self._paypal_payment_id = paypal_payment_id
        self._process = process
        self._process_id = process_id
        self._project_number = project_number
        self._project_title = project_title
        self._result_file_id = result_file_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Project':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Project of this Project.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this Project.

        The Date when the project was created.

        :return: The created of this Project.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Project.

        The Date when the project was created.

        :param created: The created of this Project.
        :type created: datetime
        """

        self._created = created

    @property
    def file_id(self):
        """Gets the file_id of this Project.

        Id of the file on which the process was applied.

        :return: The file_id of this Project.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this Project.

        Id of the file on which the process was applied.

        :param file_id: The file_id of this Project.
        :type file_id: str
        """

        self._file_id = file_id

    @property
    def id(self):
        """Gets the id of this Project.

        Id of the created project.

        :return: The id of this Project.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.

        Id of the created project.

        :param id: The id of this Project.
        :type id: int
        """

        self._id = id

    @property
    def paypal_payment_id(self):
        """Gets the paypal_payment_id of this Project.

        Id of the paypal payment.

        :return: The paypal_payment_id of this Project.
        :rtype: str
        """
        return self._paypal_payment_id

    @paypal_payment_id.setter
    def paypal_payment_id(self, paypal_payment_id):
        """Sets the paypal_payment_id of this Project.

        Id of the paypal payment.

        :param paypal_payment_id: The paypal_payment_id of this Project.
        :type paypal_payment_id: str
        """
        if paypal_payment_id is not None and len(paypal_payment_id) < 1:
            raise ValueError("Invalid value for `paypal_payment_id`, length must be greater than or equal to `1`")

        self._paypal_payment_id = paypal_payment_id

    @property
    def process(self):
        """Gets the process of this Project.


        :return: The process of this Project.
        :rtype: Process
        """
        return self._process

    @process.setter
    def process(self, process):
        """Sets the process of this Project.


        :param process: The process of this Project.
        :type process: Process
        """

        self._process = process

    @property
    def process_id(self):
        """Gets the process_id of this Project.

        Process which should applied. Processes are \"color-classification\".

        :return: The process_id of this Project.
        :rtype: str
        """
        return self._process_id

    @process_id.setter
    def process_id(self, process_id):
        """Sets the process_id of this Project.

        Process which should applied. Processes are \"color-classification\".

        :param process_id: The process_id of this Project.
        :type process_id: str
        """
        if process_id is None:
            raise ValueError("Invalid value for `process_id`, must not be `None`")
        if process_id is not None and len(process_id) < 1:
            raise ValueError("Invalid value for `process_id`, length must be greater than or equal to `1`")

        self._process_id = process_id

    @property
    def project_number(self):
        """Gets the project_number of this Project.

        Number of the created project.

        :return: The project_number of this Project.
        :rtype: int
        """
        return self._project_number

    @project_number.setter
    def project_number(self, project_number):
        """Sets the project_number of this Project.

        Number of the created project.

        :param project_number: The project_number of this Project.
        :type project_number: int
        """

        self._project_number = project_number

    @property
    def project_title(self):
        """Gets the project_title of this Project.

        Name of the project with which it was saved.

        :return: The project_title of this Project.
        :rtype: str
        """
        return self._project_title

    @project_title.setter
    def project_title(self, project_title):
        """Sets the project_title of this Project.

        Name of the project with which it was saved.

        :param project_title: The project_title of this Project.
        :type project_title: str
        """
        if project_title is not None and len(project_title) < 1:
            raise ValueError("Invalid value for `project_title`, length must be greater than or equal to `1`")

        self._project_title = project_title

    @property
    def result_file_id(self):
        """Gets the result_file_id of this Project.

        Id of the result file which the process created.

        :return: The result_file_id of this Project.
        :rtype: str
        """
        return self._result_file_id

    @result_file_id.setter
    def result_file_id(self, result_file_id):
        """Sets the result_file_id of this Project.

        Id of the result file which the process created.

        :param result_file_id: The result_file_id of this Project.
        :type result_file_id: str
        """

        self._result_file_id = result_file_id
