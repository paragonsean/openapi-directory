# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Process(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, crop: str=None, flip: bool=None, mirror: bool=None, processing_algorithm: str=None, resize: str=None, rotate: int=None):
        """Process - a model defined in OpenAPI

        :param crop: The crop of this Process.
        :param flip: The flip of this Process.
        :param mirror: The mirror of this Process.
        :param processing_algorithm: The processing_algorithm of this Process.
        :param resize: The resize of this Process.
        :param rotate: The rotate of this Process.
        """
        self.openapi_types = {
            'crop': str,
            'flip': bool,
            'mirror': bool,
            'processing_algorithm': str,
            'resize': str,
            'rotate': int
        }

        self.attribute_map = {
            'crop': 'crop',
            'flip': 'flip',
            'mirror': 'mirror',
            'processing_algorithm': 'processing_algorithm',
            'resize': 'resize',
            'rotate': 'rotate'
        }

        self._crop = crop
        self._flip = flip
        self._mirror = mirror
        self._processing_algorithm = processing_algorithm
        self._resize = resize
        self._rotate = rotate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Process':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Process of this Process.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def crop(self):
        """Gets the crop of this Process.

        Crops the image according to the specified mechanism. If you specify the size \"WidthexHeight\", the image will be cropped centered. If coordinates \"x1,y1,x2,y2\" are given, the image is cropped according to the coordinates. The image will be cropped to the size of the stories if \"faces\" are specified as. Example Centered: \"crop\": \"200x300\". Example Region: \"crop\": \"200,300,150,300\". Example Faces: \"crop\": \"faces\".

        :return: The crop of this Process.
        :rtype: str
        """
        return self._crop

    @crop.setter
    def crop(self, crop):
        """Sets the crop of this Process.

        Crops the image according to the specified mechanism. If you specify the size \"WidthexHeight\", the image will be cropped centered. If coordinates \"x1,y1,x2,y2\" are given, the image is cropped according to the coordinates. The image will be cropped to the size of the stories if \"faces\" are specified as. Example Centered: \"crop\": \"200x300\". Example Region: \"crop\": \"200,300,150,300\". Example Faces: \"crop\": \"faces\".

        :param crop: The crop of this Process.
        :type crop: str
        """
        if crop is not None and len(crop) > 255:
            raise ValueError("Invalid value for `crop`, length must be less than or equal to `255`")
        if crop is not None and len(crop) < 1:
            raise ValueError("Invalid value for `crop`, length must be greater than or equal to `1`")

        self._crop = crop

    @property
    def flip(self):
        """Gets the flip of this Process.

        Flips the image around the horizontal axis, from top to bottom. Example: \"flip\": true

        :return: The flip of this Process.
        :rtype: bool
        """
        return self._flip

    @flip.setter
    def flip(self, flip):
        """Sets the flip of this Process.

        Flips the image around the horizontal axis, from top to bottom. Example: \"flip\": true

        :param flip: The flip of this Process.
        :type flip: bool
        """

        self._flip = flip

    @property
    def mirror(self):
        """Gets the mirror of this Process.

        Mirrors the image around the vertical axis, i.e. from right to left. Example: \"mirror\": true

        :return: The mirror of this Process.
        :rtype: bool
        """
        return self._mirror

    @mirror.setter
    def mirror(self, mirror):
        """Sets the mirror of this Process.

        Mirrors the image around the vertical axis, i.e. from right to left. Example: \"mirror\": true

        :param mirror: The mirror of this Process.
        :type mirror: bool
        """

        self._mirror = mirror

    @property
    def processing_algorithm(self):
        """Gets the processing_algorithm of this Process.

        Schlüssel welcher Verarbeitungs-Algorithmus angewendet wird. Zur Auswahl stehen \"logo-to-vector\", \"logo-super-resolution\", \"logo-segmentation\" und \"image-processing\".

        :return: The processing_algorithm of this Process.
        :rtype: str
        """
        return self._processing_algorithm

    @processing_algorithm.setter
    def processing_algorithm(self, processing_algorithm):
        """Sets the processing_algorithm of this Process.

        Schlüssel welcher Verarbeitungs-Algorithmus angewendet wird. Zur Auswahl stehen \"logo-to-vector\", \"logo-super-resolution\", \"logo-segmentation\" und \"image-processing\".

        :param processing_algorithm: The processing_algorithm of this Process.
        :type processing_algorithm: str
        """
        if processing_algorithm is None:
            raise ValueError("Invalid value for `processing_algorithm`, must not be `None`")
        if processing_algorithm is not None and len(processing_algorithm) < 1:
            raise ValueError("Invalid value for `processing_algorithm`, length must be greater than or equal to `1`")

        self._processing_algorithm = processing_algorithm

    @property
    def resize(self):
        """Gets the resize of this Process.

        Changes the size of the image according to the specified size. Example: \"resize\": \"200x300\".

        :return: The resize of this Process.
        :rtype: str
        """
        return self._resize

    @resize.setter
    def resize(self, resize):
        """Sets the resize of this Process.

        Changes the size of the image according to the specified size. Example: \"resize\": \"200x300\".

        :param resize: The resize of this Process.
        :type resize: str
        """
        if resize is not None and len(resize) > 255:
            raise ValueError("Invalid value for `resize`, length must be less than or equal to `255`")
        if resize is not None and len(resize) < 1:
            raise ValueError("Invalid value for `resize`, length must be greater than or equal to `1`")

        self._resize = resize

    @property
    def rotate(self):
        """Gets the rotate of this Process.

        Rotates the image around the center according to the specified degree. Example: \"rotate\": 90

        :return: The rotate of this Process.
        :rtype: int
        """
        return self._rotate

    @rotate.setter
    def rotate(self, rotate):
        """Sets the rotate of this Process.

        Rotates the image around the center according to the specified degree. Example: \"rotate\": 90

        :param rotate: The rotate of this Process.
        :type rotate: int
        """
        if rotate is not None and rotate > 360:
            raise ValueError("Invalid value for `rotate`, must be a value less than or equal to `360`")
        if rotate is not None and rotate < 0:
            raise ValueError("Invalid value for `rotate`, must be a value greater than or equal to `0`")

        self._rotate = rotate
