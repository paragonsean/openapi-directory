# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.result import Result
from openapi_server import util


class ReportResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, file_id: str=None, processing_algorithm: str=None, report_number: int=None, result: Result=None):
        """ReportResponse - a model defined in OpenAPI

        :param created: The created of this ReportResponse.
        :param file_id: The file_id of this ReportResponse.
        :param processing_algorithm: The processing_algorithm of this ReportResponse.
        :param report_number: The report_number of this ReportResponse.
        :param result: The result of this ReportResponse.
        """
        self.openapi_types = {
            'created': datetime,
            'file_id': str,
            'processing_algorithm': str,
            'report_number': int,
            'result': Result
        }

        self.attribute_map = {
            'created': 'created',
            'file_id': 'file_id',
            'processing_algorithm': 'processing_algorithm',
            'report_number': 'report_number',
            'result': 'result'
        }

        self._created = created
        self._file_id = file_id
        self._processing_algorithm = processing_algorithm
        self._report_number = report_number
        self._result = result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportResponse of this ReportResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this ReportResponse.

        The Date when the project was created.

        :return: The created of this ReportResponse.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ReportResponse.

        The Date when the project was created.

        :param created: The created of this ReportResponse.
        :type created: datetime
        """

        self._created = created

    @property
    def file_id(self):
        """Gets the file_id of this ReportResponse.

        Id of the file on which the process was applied.

        :return: The file_id of this ReportResponse.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this ReportResponse.

        Id of the file on which the process was applied.

        :param file_id: The file_id of this ReportResponse.
        :type file_id: str
        """
        if file_id is not None and len(file_id) < 1:
            raise ValueError("Invalid value for `file_id`, length must be greater than or equal to `1`")

        self._file_id = file_id

    @property
    def processing_algorithm(self):
        """Gets the processing_algorithm of this ReportResponse.

        Process which was applied. Processes are \"color-classification\".

        :return: The processing_algorithm of this ReportResponse.
        :rtype: str
        """
        return self._processing_algorithm

    @processing_algorithm.setter
    def processing_algorithm(self, processing_algorithm):
        """Sets the processing_algorithm of this ReportResponse.

        Process which was applied. Processes are \"color-classification\".

        :param processing_algorithm: The processing_algorithm of this ReportResponse.
        :type processing_algorithm: str
        """
        if processing_algorithm is not None and len(processing_algorithm) < 1:
            raise ValueError("Invalid value for `processing_algorithm`, length must be greater than or equal to `1`")

        self._processing_algorithm = processing_algorithm

    @property
    def report_number(self):
        """Gets the report_number of this ReportResponse.

        Number of the report which was created.

        :return: The report_number of this ReportResponse.
        :rtype: int
        """
        return self._report_number

    @report_number.setter
    def report_number(self, report_number):
        """Sets the report_number of this ReportResponse.

        Number of the report which was created.

        :param report_number: The report_number of this ReportResponse.
        :type report_number: int
        """

        self._report_number = report_number

    @property
    def result(self):
        """Gets the result of this ReportResponse.


        :return: The result of this ReportResponse.
        :rtype: Result
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ReportResponse.


        :param result: The result of this ReportResponse.
        :type result: Result
        """

        self._result = result
