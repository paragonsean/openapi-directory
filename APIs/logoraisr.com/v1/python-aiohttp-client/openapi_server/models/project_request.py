# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.process import Process
from openapi_server import util


class ProjectRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_id: str=None, process: Process=None, project_title: str=None):
        """ProjectRequest - a model defined in OpenAPI

        :param file_id: The file_id of this ProjectRequest.
        :param process: The process of this ProjectRequest.
        :param project_title: The project_title of this ProjectRequest.
        """
        self.openapi_types = {
            'file_id': str,
            'process': Process,
            'project_title': str
        }

        self.attribute_map = {
            'file_id': 'file_id',
            'process': 'process',
            'project_title': 'project_title'
        }

        self._file_id = file_id
        self._process = process
        self._project_title = project_title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectRequest of this ProjectRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_id(self):
        """Gets the file_id of this ProjectRequest.

        Id of the file on which the process is to be applied.

        :return: The file_id of this ProjectRequest.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this ProjectRequest.

        Id of the file on which the process is to be applied.

        :param file_id: The file_id of this ProjectRequest.
        :type file_id: str
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")

        self._file_id = file_id

    @property
    def process(self):
        """Gets the process of this ProjectRequest.


        :return: The process of this ProjectRequest.
        :rtype: Process
        """
        return self._process

    @process.setter
    def process(self, process):
        """Sets the process of this ProjectRequest.


        :param process: The process of this ProjectRequest.
        :type process: Process
        """

        self._process = process

    @property
    def project_title(self):
        """Gets the project_title of this ProjectRequest.

        Name of the project with which it is saved.

        :return: The project_title of this ProjectRequest.
        :rtype: str
        """
        return self._project_title

    @project_title.setter
    def project_title(self, project_title):
        """Sets the project_title of this ProjectRequest.

        Name of the project with which it is saved.

        :param project_title: The project_title of this ProjectRequest.
        :type project_title: str
        """
        if project_title is None:
            raise ValueError("Invalid value for `project_title`, must not be `None`")
        if project_title is not None and len(project_title) < 1:
            raise ValueError("Invalid value for `project_title`, length must be greater than or equal to `1`")

        self._project_title = project_title
