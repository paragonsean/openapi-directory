# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.color import Color
from openapi_server import util


class Result(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, colors: List[Color]=None, height: int=None, number_of_pixel_in_image: int=None, width: int=None):
        """Result - a model defined in OpenAPI

        :param colors: The colors of this Result.
        :param height: The height of this Result.
        :param number_of_pixel_in_image: The number_of_pixel_in_image of this Result.
        :param width: The width of this Result.
        """
        self.openapi_types = {
            'colors': List[Color],
            'height': int,
            'number_of_pixel_in_image': int,
            'width': int
        }

        self.attribute_map = {
            'colors': 'colors',
            'height': 'height',
            'number_of_pixel_in_image': 'number_of_pixel_in_image',
            'width': 'width'
        }

        self._colors = colors
        self._height = height
        self._number_of_pixel_in_image = number_of_pixel_in_image
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Result':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Result of this Result.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def colors(self):
        """Gets the colors of this Result.


        :return: The colors of this Result.
        :rtype: List[Color]
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this Result.


        :param colors: The colors of this Result.
        :type colors: List[Color]
        """

        self._colors = colors

    @property
    def height(self):
        """Gets the height of this Result.

        Height of image.

        :return: The height of this Result.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Result.

        Height of image.

        :param height: The height of this Result.
        :type height: int
        """

        self._height = height

    @property
    def number_of_pixel_in_image(self):
        """Gets the number_of_pixel_in_image of this Result.

        Number of pixel in image.

        :return: The number_of_pixel_in_image of this Result.
        :rtype: int
        """
        return self._number_of_pixel_in_image

    @number_of_pixel_in_image.setter
    def number_of_pixel_in_image(self, number_of_pixel_in_image):
        """Sets the number_of_pixel_in_image of this Result.

        Number of pixel in image.

        :param number_of_pixel_in_image: The number_of_pixel_in_image of this Result.
        :type number_of_pixel_in_image: int
        """

        self._number_of_pixel_in_image = number_of_pixel_in_image

    @property
    def width(self):
        """Gets the width of this Result.

        Width of image.

        :return: The width of this Result.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Result.

        Width of image.

        :param width: The width of this Result.
        :type width: int
        """

        self._width = width
