# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Color(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blue: int=None, green: int=None, hex: str=None, number_of_pixel: int=None, percentage: str=None, red: int=None):
        """Color - a model defined in OpenAPI

        :param blue: The blue of this Color.
        :param green: The green of this Color.
        :param hex: The hex of this Color.
        :param number_of_pixel: The number_of_pixel of this Color.
        :param percentage: The percentage of this Color.
        :param red: The red of this Color.
        """
        self.openapi_types = {
            'blue': int,
            'green': int,
            'hex': str,
            'number_of_pixel': int,
            'percentage': str,
            'red': int
        }

        self.attribute_map = {
            'blue': 'blue',
            'green': 'green',
            'hex': 'hex',
            'number_of_pixel': 'number_of_pixel',
            'percentage': 'percentage',
            'red': 'red'
        }

        self._blue = blue
        self._green = green
        self._hex = hex
        self._number_of_pixel = number_of_pixel
        self._percentage = percentage
        self._red = red

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Color':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Color of this Color.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blue(self):
        """Gets the blue of this Color.

        RGB-Blue color value

        :return: The blue of this Color.
        :rtype: int
        """
        return self._blue

    @blue.setter
    def blue(self, blue):
        """Sets the blue of this Color.

        RGB-Blue color value

        :param blue: The blue of this Color.
        :type blue: int
        """

        self._blue = blue

    @property
    def green(self):
        """Gets the green of this Color.

        RGB-Green color value.

        :return: The green of this Color.
        :rtype: int
        """
        return self._green

    @green.setter
    def green(self, green):
        """Sets the green of this Color.

        RGB-Green color value.

        :param green: The green of this Color.
        :type green: int
        """

        self._green = green

    @property
    def hex(self):
        """Gets the hex of this Color.

        Hex-label of this color.

        :return: The hex of this Color.
        :rtype: str
        """
        return self._hex

    @hex.setter
    def hex(self, hex):
        """Sets the hex of this Color.

        Hex-label of this color.

        :param hex: The hex of this Color.
        :type hex: str
        """
        if hex is not None and len(hex) < 1:
            raise ValueError("Invalid value for `hex`, length must be greater than or equal to `1`")

        self._hex = hex

    @property
    def number_of_pixel(self):
        """Gets the number_of_pixel of this Color.

        Number of pixels that holds this color.

        :return: The number_of_pixel of this Color.
        :rtype: int
        """
        return self._number_of_pixel

    @number_of_pixel.setter
    def number_of_pixel(self, number_of_pixel):
        """Sets the number_of_pixel of this Color.

        Number of pixels that holds this color.

        :param number_of_pixel: The number_of_pixel of this Color.
        :type number_of_pixel: int
        """

        self._number_of_pixel = number_of_pixel

    @property
    def percentage(self):
        """Gets the percentage of this Color.

        Percentage of pixels that holds this color.

        :return: The percentage of this Color.
        :rtype: str
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this Color.

        Percentage of pixels that holds this color.

        :param percentage: The percentage of this Color.
        :type percentage: str
        """

        self._percentage = percentage

    @property
    def red(self):
        """Gets the red of this Color.

        RGB-Red color value.

        :return: The red of this Color.
        :rtype: int
        """
        return self._red

    @red.setter
    def red(self, red):
        """Sets the red of this Color.

        RGB-Red color value.

        :param red: The red of this Color.
        :type red: int
        """

        self._red = red
