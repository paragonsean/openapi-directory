# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.result import Result
from openapi_server import util


class Report(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, file_id: str=None, process_id: int=None, report_number: int=None, result: Result=None, result_id: int=None):
        """Report - a model defined in OpenAPI

        :param created: The created of this Report.
        :param file_id: The file_id of this Report.
        :param process_id: The process_id of this Report.
        :param report_number: The report_number of this Report.
        :param result: The result of this Report.
        :param result_id: The result_id of this Report.
        """
        self.openapi_types = {
            'created': datetime,
            'file_id': str,
            'process_id': int,
            'report_number': int,
            'result': Result,
            'result_id': int
        }

        self.attribute_map = {
            'created': 'created',
            'file_id': 'file_id',
            'process_id': 'process_id',
            'report_number': 'report_number',
            'result': 'result',
            'result_id': 'result_id'
        }

        self._created = created
        self._file_id = file_id
        self._process_id = process_id
        self._report_number = report_number
        self._result = result
        self._result_id = result_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Report':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Report of this Report.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this Report.

        The Date when the report was created.

        :return: The created of this Report.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Report.

        The Date when the report was created.

        :param created: The created of this Report.
        :type created: datetime
        """

        self._created = created

    @property
    def file_id(self):
        """Gets the file_id of this Report.

        Id of the file on which the report was applied.

        :return: The file_id of this Report.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this Report.

        Id of the file on which the report was applied.

        :param file_id: The file_id of this Report.
        :type file_id: str
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")

        self._file_id = file_id

    @property
    def process_id(self):
        """Gets the process_id of this Report.

        Process_id of the process which was applied. Processes are \"color-classification\".

        :return: The process_id of this Report.
        :rtype: int
        """
        return self._process_id

    @process_id.setter
    def process_id(self, process_id):
        """Sets the process_id of this Report.

        Process_id of the process which was applied. Processes are \"color-classification\".

        :param process_id: The process_id of this Report.
        :type process_id: int
        """
        if process_id is None:
            raise ValueError("Invalid value for `process_id`, must not be `None`")

        self._process_id = process_id

    @property
    def report_number(self):
        """Gets the report_number of this Report.

        Number of the created report.

        :return: The report_number of this Report.
        :rtype: int
        """
        return self._report_number

    @report_number.setter
    def report_number(self, report_number):
        """Sets the report_number of this Report.

        Number of the created report.

        :param report_number: The report_number of this Report.
        :type report_number: int
        """
        if report_number is None:
            raise ValueError("Invalid value for `report_number`, must not be `None`")

        self._report_number = report_number

    @property
    def result(self):
        """Gets the result of this Report.


        :return: The result of this Report.
        :rtype: Result
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Report.


        :param result: The result of this Report.
        :type result: Result
        """

        self._result = result

    @property
    def result_id(self):
        """Gets the result_id of this Report.

        Result_id of the result which was created.

        :return: The result_id of this Report.
        :rtype: int
        """
        return self._result_id

    @result_id.setter
    def result_id(self, result_id):
        """Sets the result_id of this Report.

        Result_id of the result which was created.

        :param result_id: The result_id of this Report.
        :type result_id: int
        """
        if result_id is None:
            raise ValueError("Invalid value for `result_id`, must not be `None`")

        self._result_id = result_id
