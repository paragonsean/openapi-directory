/**
 * API docs | logoraisr.com
 * <p style=\"font-size:110%;\">Dig into our logoraisr API reference documentation. We also offer an OpenAPI specification to allow easy integration into your systems. You can download the json file by clicking on the download button.<p><br><p style=\"font-size:110%; font-weight:bold\">OpenAPI 2.0 Validation Status</p><img src=\"https://online.swagger.io/validator?url=https://docs.logoraisr.com/\">
 *
 * The version of the OpenAPI document: v1
 * Contact: support@logoraisr.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Result from './Result';

/**
 * The Report model module.
 * @module model/Report
 * @version v1
 */
class Report {
    /**
     * Constructs a new <code>Report</code>.
     * @alias module:model/Report
     * @param fileId {String} Id of the file on which the report was applied.
     * @param processId {Number} Process_id of the process which was applied. Processes are \"color-classification\".
     * @param reportNumber {Number} Number of the created report.
     * @param resultId {Number} Result_id of the result which was created.
     */
    constructor(fileId, processId, reportNumber, resultId) { 
        
        Report.initialize(this, fileId, processId, reportNumber, resultId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fileId, processId, reportNumber, resultId) { 
        obj['file_id'] = fileId;
        obj['process_id'] = processId;
        obj['report_number'] = reportNumber;
        obj['result_id'] = resultId;
    }

    /**
     * Constructs a <code>Report</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Report} obj Optional instance to populate.
     * @return {module:model/Report} The populated <code>Report</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Report();

            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('file_id')) {
                obj['file_id'] = ApiClient.convertToType(data['file_id'], 'String');
            }
            if (data.hasOwnProperty('process_id')) {
                obj['process_id'] = ApiClient.convertToType(data['process_id'], 'Number');
            }
            if (data.hasOwnProperty('report_number')) {
                obj['report_number'] = ApiClient.convertToType(data['report_number'], 'Number');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = Result.constructFromObject(data['result']);
            }
            if (data.hasOwnProperty('result_id')) {
                obj['result_id'] = ApiClient.convertToType(data['result_id'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Report</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Report</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Report.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['file_id'] && !(typeof data['file_id'] === 'string' || data['file_id'] instanceof String)) {
            throw new Error("Expected the field `file_id` to be a primitive type in the JSON string but got " + data['file_id']);
        }
        // validate the optional field `result`
        if (data['result']) { // data not null
          Result.validateJSON(data['result']);
        }

        return true;
    }


}

Report.RequiredProperties = ["file_id", "process_id", "report_number", "result_id"];

/**
 * The Date when the report was created.
 * @member {Date} created
 */
Report.prototype['created'] = undefined;

/**
 * Id of the file on which the report was applied.
 * @member {String} file_id
 */
Report.prototype['file_id'] = undefined;

/**
 * Process_id of the process which was applied. Processes are \"color-classification\".
 * @member {Number} process_id
 */
Report.prototype['process_id'] = undefined;

/**
 * Number of the created report.
 * @member {Number} report_number
 */
Report.prototype['report_number'] = undefined;

/**
 * @member {module:model/Result} result
 */
Report.prototype['result'] = undefined;

/**
 * Result_id of the result which was created.
 * @member {Number} result_id
 */
Report.prototype['result_id'] = undefined;






export default Report;

