/**
 * API docs | logoraisr.com
 * <p style=\"font-size:110%;\">Dig into our logoraisr API reference documentation. We also offer an OpenAPI specification to allow easy integration into your systems. You can download the json file by clicking on the download button.<p><br><p style=\"font-size:110%; font-weight:bold\">OpenAPI 2.0 Validation Status</p><img src=\"https://online.swagger.io/validator?url=https://docs.logoraisr.com/\">
 *
 * The version of the OpenAPI document: v1
 * Contact: support@logoraisr.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Result from './Result';

/**
 * The ReportResponse model module.
 * @module model/ReportResponse
 * @version v1
 */
class ReportResponse {
    /**
     * Constructs a new <code>ReportResponse</code>.
     * @alias module:model/ReportResponse
     */
    constructor() { 
        
        ReportResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportResponse} obj Optional instance to populate.
     * @return {module:model/ReportResponse} The populated <code>ReportResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportResponse();

            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('file_id')) {
                obj['file_id'] = ApiClient.convertToType(data['file_id'], 'String');
            }
            if (data.hasOwnProperty('processing_algorithm')) {
                obj['processing_algorithm'] = ApiClient.convertToType(data['processing_algorithm'], 'String');
            }
            if (data.hasOwnProperty('report_number')) {
                obj['report_number'] = ApiClient.convertToType(data['report_number'], 'Number');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = Result.constructFromObject(data['result']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['file_id'] && !(typeof data['file_id'] === 'string' || data['file_id'] instanceof String)) {
            throw new Error("Expected the field `file_id` to be a primitive type in the JSON string but got " + data['file_id']);
        }
        // ensure the json data is a string
        if (data['processing_algorithm'] && !(typeof data['processing_algorithm'] === 'string' || data['processing_algorithm'] instanceof String)) {
            throw new Error("Expected the field `processing_algorithm` to be a primitive type in the JSON string but got " + data['processing_algorithm']);
        }
        // validate the optional field `result`
        if (data['result']) { // data not null
          Result.validateJSON(data['result']);
        }

        return true;
    }


}



/**
 * The Date when the project was created.
 * @member {Date} created
 */
ReportResponse.prototype['created'] = undefined;

/**
 * Id of the file on which the process was applied.
 * @member {String} file_id
 */
ReportResponse.prototype['file_id'] = undefined;

/**
 * Process which was applied. Processes are \"color-classification\".
 * @member {String} processing_algorithm
 */
ReportResponse.prototype['processing_algorithm'] = undefined;

/**
 * Number of the report which was created.
 * @member {Number} report_number
 */
ReportResponse.prototype['report_number'] = undefined;

/**
 * @member {module:model/Result} result
 */
ReportResponse.prototype['result'] = undefined;






export default ReportResponse;

