/**
 * API docs | logoraisr.com
 * <p style=\"font-size:110%;\">Dig into our logoraisr API reference documentation. We also offer an OpenAPI specification to allow easy integration into your systems. You can download the json file by clicking on the download button.<p><br><p style=\"font-size:110%; font-weight:bold\">OpenAPI 2.0 Validation Status</p><img src=\"https://online.swagger.io/validator?url=https://docs.logoraisr.com/\">
 *
 * The version of the OpenAPI document: v1
 * Contact: support@logoraisr.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Process model module.
 * @module model/Process
 * @version v1
 */
class Process {
    /**
     * Constructs a new <code>Process</code>.
     * @alias module:model/Process
     * @param processingAlgorithm {String} Schlüssel welcher Verarbeitungs-Algorithmus angewendet wird. Zur Auswahl stehen \"logo-to-vector\", \"logo-super-resolution\", \"logo-segmentation\" und \"image-processing\".
     */
    constructor(processingAlgorithm) { 
        
        Process.initialize(this, processingAlgorithm);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, processingAlgorithm) { 
        obj['processing_algorithm'] = processingAlgorithm;
    }

    /**
     * Constructs a <code>Process</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Process} obj Optional instance to populate.
     * @return {module:model/Process} The populated <code>Process</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Process();

            if (data.hasOwnProperty('crop')) {
                obj['crop'] = ApiClient.convertToType(data['crop'], 'String');
            }
            if (data.hasOwnProperty('flip')) {
                obj['flip'] = ApiClient.convertToType(data['flip'], 'Boolean');
            }
            if (data.hasOwnProperty('mirror')) {
                obj['mirror'] = ApiClient.convertToType(data['mirror'], 'Boolean');
            }
            if (data.hasOwnProperty('processing_algorithm')) {
                obj['processing_algorithm'] = ApiClient.convertToType(data['processing_algorithm'], 'String');
            }
            if (data.hasOwnProperty('resize')) {
                obj['resize'] = ApiClient.convertToType(data['resize'], 'String');
            }
            if (data.hasOwnProperty('rotate')) {
                obj['rotate'] = ApiClient.convertToType(data['rotate'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Process</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Process</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Process.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['crop'] && !(typeof data['crop'] === 'string' || data['crop'] instanceof String)) {
            throw new Error("Expected the field `crop` to be a primitive type in the JSON string but got " + data['crop']);
        }
        // ensure the json data is a string
        if (data['processing_algorithm'] && !(typeof data['processing_algorithm'] === 'string' || data['processing_algorithm'] instanceof String)) {
            throw new Error("Expected the field `processing_algorithm` to be a primitive type in the JSON string but got " + data['processing_algorithm']);
        }
        // ensure the json data is a string
        if (data['resize'] && !(typeof data['resize'] === 'string' || data['resize'] instanceof String)) {
            throw new Error("Expected the field `resize` to be a primitive type in the JSON string but got " + data['resize']);
        }

        return true;
    }


}

Process.RequiredProperties = ["processing_algorithm"];

/**
 * Crops the image according to the specified mechanism. If you specify the size \"WidthexHeight\", the image will be cropped centered. If coordinates \"x1,y1,x2,y2\" are given, the image is cropped according to the coordinates. The image will be cropped to the size of the stories if \"faces\" are specified as. Example Centered: \"crop\": \"200x300\". Example Region: \"crop\": \"200,300,150,300\". Example Faces: \"crop\": \"faces\".
 * @member {String} crop
 */
Process.prototype['crop'] = undefined;

/**
 * Flips the image around the horizontal axis, from top to bottom. Example: \"flip\": true
 * @member {Boolean} flip
 */
Process.prototype['flip'] = undefined;

/**
 * Mirrors the image around the vertical axis, i.e. from right to left. Example: \"mirror\": true
 * @member {Boolean} mirror
 */
Process.prototype['mirror'] = undefined;

/**
 * Schlüssel welcher Verarbeitungs-Algorithmus angewendet wird. Zur Auswahl stehen \"logo-to-vector\", \"logo-super-resolution\", \"logo-segmentation\" und \"image-processing\".
 * @member {String} processing_algorithm
 */
Process.prototype['processing_algorithm'] = undefined;

/**
 * Changes the size of the image according to the specified size. Example: \"resize\": \"200x300\".
 * @member {String} resize
 */
Process.prototype['resize'] = undefined;

/**
 * Rotates the image around the center according to the specified degree. Example: \"rotate\": 90
 * @member {Number} rotate
 */
Process.prototype['rotate'] = undefined;






export default Process;

