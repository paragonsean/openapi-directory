/*
 * API docs | logoraisr.com
 * <p style=\"font-size:110%;\">Dig into our logoraisr API reference documentation. We also offer an OpenAPI specification to allow easy integration into your systems. You can download the json file by clicking on the download button.<p><br><p style=\"font-size:110%; font-weight:bold\">OpenAPI 2.0 Validation Status</p><img src=\"https://online.swagger.io/validator?url=https://docs.logoraisr.com/\">
 *
 * The version of the OpenAPI document: v1
 * Contact: support@logoraisr.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:25.150422-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectResponse {
  public static final String SERIALIZED_NAME_PROJECT_ID = "project_id";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private Integer projectId;

  public static final String SERIALIZED_NAME_PROJECT_NUMBER = "project_number";
  @SerializedName(SERIALIZED_NAME_PROJECT_NUMBER)
  private Integer projectNumber;

  public static final String SERIALIZED_NAME_RESULT_FILE_ID = "result_file_id";
  @SerializedName(SERIALIZED_NAME_RESULT_FILE_ID)
  private UUID resultFileId;

  public ProjectResponse() {
  }

  public ProjectResponse projectId(Integer projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Id of the created project.
   * @return projectId
   */
  @javax.annotation.Nullable
  public Integer getProjectId() {
    return projectId;
  }

  public void setProjectId(Integer projectId) {
    this.projectId = projectId;
  }


  public ProjectResponse projectNumber(Integer projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  /**
   * Number of the created project.
   * @return projectNumber
   */
  @javax.annotation.Nullable
  public Integer getProjectNumber() {
    return projectNumber;
  }

  public void setProjectNumber(Integer projectNumber) {
    this.projectNumber = projectNumber;
  }


  public ProjectResponse resultFileId(UUID resultFileId) {
    this.resultFileId = resultFileId;
    return this;
  }

  /**
   * Id of the result_file. This id must be specified to create the result_file_url.
   * @return resultFileId
   */
  @javax.annotation.Nullable
  public UUID getResultFileId() {
    return resultFileId;
  }

  public void setResultFileId(UUID resultFileId) {
    this.resultFileId = resultFileId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectResponse projectResponse = (ProjectResponse) o;
    return Objects.equals(this.projectId, projectResponse.projectId) &&
        Objects.equals(this.projectNumber, projectResponse.projectNumber) &&
        Objects.equals(this.resultFileId, projectResponse.resultFileId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectId, projectNumber, resultFileId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectResponse {\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    projectNumber: ").append(toIndentedString(projectNumber)).append("\n");
    sb.append("    resultFileId: ").append(toIndentedString(resultFileId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("project_id");
    openapiFields.add("project_number");
    openapiFields.add("result_file_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectResponse is not found in the empty JSON string", ProjectResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("result_file_id") != null && !jsonObj.get("result_file_id").isJsonNull()) && !jsonObj.get("result_file_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result_file_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result_file_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectResponse>() {
           @Override
           public void write(JsonWriter out, ProjectResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectResponse
   * @throws IOException if the JSON string is invalid with respect to ProjectResponse
   */
  public static ProjectResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectResponse.class);
  }

  /**
   * Convert an instance of ProjectResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

