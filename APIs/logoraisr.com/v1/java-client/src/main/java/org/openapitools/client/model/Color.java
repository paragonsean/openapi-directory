/*
 * API docs | logoraisr.com
 * <p style=\"font-size:110%;\">Dig into our logoraisr API reference documentation. We also offer an OpenAPI specification to allow easy integration into your systems. You can download the json file by clicking on the download button.<p><br><p style=\"font-size:110%; font-weight:bold\">OpenAPI 2.0 Validation Status</p><img src=\"https://online.swagger.io/validator?url=https://docs.logoraisr.com/\">
 *
 * The version of the OpenAPI document: v1
 * Contact: support@logoraisr.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Color
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:25.150422-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Color {
  public static final String SERIALIZED_NAME_BLUE = "blue";
  @SerializedName(SERIALIZED_NAME_BLUE)
  private Integer blue;

  public static final String SERIALIZED_NAME_GREEN = "green";
  @SerializedName(SERIALIZED_NAME_GREEN)
  private Integer green;

  public static final String SERIALIZED_NAME_HEX = "hex";
  @SerializedName(SERIALIZED_NAME_HEX)
  private String hex;

  public static final String SERIALIZED_NAME_NUMBER_OF_PIXEL = "number_of_pixel";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_PIXEL)
  private Integer numberOfPixel;

  public static final String SERIALIZED_NAME_PERCENTAGE = "percentage";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE)
  private BigDecimal percentage;

  public static final String SERIALIZED_NAME_RED = "red";
  @SerializedName(SERIALIZED_NAME_RED)
  private Integer red;

  public Color() {
  }

  public Color blue(Integer blue) {
    this.blue = blue;
    return this;
  }

  /**
   * RGB-Blue color value
   * @return blue
   */
  @javax.annotation.Nullable
  public Integer getBlue() {
    return blue;
  }

  public void setBlue(Integer blue) {
    this.blue = blue;
  }


  public Color green(Integer green) {
    this.green = green;
    return this;
  }

  /**
   * RGB-Green color value.
   * @return green
   */
  @javax.annotation.Nullable
  public Integer getGreen() {
    return green;
  }

  public void setGreen(Integer green) {
    this.green = green;
  }


  public Color hex(String hex) {
    this.hex = hex;
    return this;
  }

  /**
   * Hex-label of this color.
   * @return hex
   */
  @javax.annotation.Nullable
  public String getHex() {
    return hex;
  }

  public void setHex(String hex) {
    this.hex = hex;
  }


  public Color numberOfPixel(Integer numberOfPixel) {
    this.numberOfPixel = numberOfPixel;
    return this;
  }

  /**
   * Number of pixels that holds this color.
   * @return numberOfPixel
   */
  @javax.annotation.Nullable
  public Integer getNumberOfPixel() {
    return numberOfPixel;
  }

  public void setNumberOfPixel(Integer numberOfPixel) {
    this.numberOfPixel = numberOfPixel;
  }


  public Color percentage(BigDecimal percentage) {
    this.percentage = percentage;
    return this;
  }

  /**
   * Percentage of pixels that holds this color.
   * @return percentage
   */
  @javax.annotation.Nullable
  public BigDecimal getPercentage() {
    return percentage;
  }

  public void setPercentage(BigDecimal percentage) {
    this.percentage = percentage;
  }


  public Color red(Integer red) {
    this.red = red;
    return this;
  }

  /**
   * RGB-Red color value.
   * @return red
   */
  @javax.annotation.Nullable
  public Integer getRed() {
    return red;
  }

  public void setRed(Integer red) {
    this.red = red;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Color color = (Color) o;
    return Objects.equals(this.blue, color.blue) &&
        Objects.equals(this.green, color.green) &&
        Objects.equals(this.hex, color.hex) &&
        Objects.equals(this.numberOfPixel, color.numberOfPixel) &&
        Objects.equals(this.percentage, color.percentage) &&
        Objects.equals(this.red, color.red);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blue, green, hex, numberOfPixel, percentage, red);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Color {\n");
    sb.append("    blue: ").append(toIndentedString(blue)).append("\n");
    sb.append("    green: ").append(toIndentedString(green)).append("\n");
    sb.append("    hex: ").append(toIndentedString(hex)).append("\n");
    sb.append("    numberOfPixel: ").append(toIndentedString(numberOfPixel)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    red: ").append(toIndentedString(red)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blue");
    openapiFields.add("green");
    openapiFields.add("hex");
    openapiFields.add("number_of_pixel");
    openapiFields.add("percentage");
    openapiFields.add("red");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Color
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Color.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Color is not found in the empty JSON string", Color.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Color.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Color` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hex") != null && !jsonObj.get("hex").isJsonNull()) && !jsonObj.get("hex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hex").toString()));
      }
      if ((jsonObj.get("percentage") != null && !jsonObj.get("percentage").isJsonNull()) && !jsonObj.get("percentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `percentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("percentage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Color.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Color' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Color> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Color.class));

       return (TypeAdapter<T>) new TypeAdapter<Color>() {
           @Override
           public void write(JsonWriter out, Color value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Color read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Color given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Color
   * @throws IOException if the JSON string is invalid with respect to Color
   */
  public static Color fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Color.class);
  }

  /**
   * Convert an instance of Color to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

