/*
 * API docs | logoraisr.com
 * <p style=\"font-size:110%;\">Dig into our logoraisr API reference documentation. We also offer an OpenAPI specification to allow easy integration into your systems. You can download the json file by clicking on the download button.<p><br><p style=\"font-size:110%; font-weight:bold\">OpenAPI 2.0 Validation Status</p><img src=\"https://online.swagger.io/validator?url=https://docs.logoraisr.com/\">
 *
 * The version of the OpenAPI document: v1
 * Contact: support@logoraisr.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Result;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReportResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:25.150422-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportResponse {
  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_FILE_ID = "file_id";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private String fileId;

  public static final String SERIALIZED_NAME_PROCESSING_ALGORITHM = "processing_algorithm";
  @SerializedName(SERIALIZED_NAME_PROCESSING_ALGORITHM)
  private String processingAlgorithm;

  public static final String SERIALIZED_NAME_REPORT_NUMBER = "report_number";
  @SerializedName(SERIALIZED_NAME_REPORT_NUMBER)
  private Integer reportNumber;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private Result result;

  public ReportResponse() {
  }

  public ReportResponse created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * The Date when the project was created.
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public ReportResponse fileId(String fileId) {
    this.fileId = fileId;
    return this;
  }

  /**
   * Id of the file on which the process was applied.
   * @return fileId
   */
  @javax.annotation.Nullable
  public String getFileId() {
    return fileId;
  }

  public void setFileId(String fileId) {
    this.fileId = fileId;
  }


  public ReportResponse processingAlgorithm(String processingAlgorithm) {
    this.processingAlgorithm = processingAlgorithm;
    return this;
  }

  /**
   * Process which was applied. Processes are \&quot;color-classification\&quot;.
   * @return processingAlgorithm
   */
  @javax.annotation.Nullable
  public String getProcessingAlgorithm() {
    return processingAlgorithm;
  }

  public void setProcessingAlgorithm(String processingAlgorithm) {
    this.processingAlgorithm = processingAlgorithm;
  }


  public ReportResponse reportNumber(Integer reportNumber) {
    this.reportNumber = reportNumber;
    return this;
  }

  /**
   * Number of the report which was created.
   * @return reportNumber
   */
  @javax.annotation.Nullable
  public Integer getReportNumber() {
    return reportNumber;
  }

  public void setReportNumber(Integer reportNumber) {
    this.reportNumber = reportNumber;
  }


  public ReportResponse result(Result result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nullable
  public Result getResult() {
    return result;
  }

  public void setResult(Result result) {
    this.result = result;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportResponse reportResponse = (ReportResponse) o;
    return Objects.equals(this.created, reportResponse.created) &&
        Objects.equals(this.fileId, reportResponse.fileId) &&
        Objects.equals(this.processingAlgorithm, reportResponse.processingAlgorithm) &&
        Objects.equals(this.reportNumber, reportResponse.reportNumber) &&
        Objects.equals(this.result, reportResponse.result);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, fileId, processingAlgorithm, reportNumber, result);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportResponse {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    processingAlgorithm: ").append(toIndentedString(processingAlgorithm)).append("\n");
    sb.append("    reportNumber: ").append(toIndentedString(reportNumber)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created");
    openapiFields.add("file_id");
    openapiFields.add("processing_algorithm");
    openapiFields.add("report_number");
    openapiFields.add("result");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportResponse is not found in the empty JSON string", ReportResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("file_id") != null && !jsonObj.get("file_id").isJsonNull()) && !jsonObj.get("file_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_id").toString()));
      }
      if ((jsonObj.get("processing_algorithm") != null && !jsonObj.get("processing_algorithm").isJsonNull()) && !jsonObj.get("processing_algorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processing_algorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processing_algorithm").toString()));
      }
      // validate the optional field `result`
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        Result.validateJsonElement(jsonObj.get("result"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportResponse>() {
           @Override
           public void write(JsonWriter out, ReportResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportResponse
   * @throws IOException if the JSON string is invalid with respect to ReportResponse
   */
  public static ReportResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportResponse.class);
  }

  /**
   * Convert an instance of ReportResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

