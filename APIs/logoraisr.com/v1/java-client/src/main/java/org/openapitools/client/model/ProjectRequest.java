/*
 * API docs | logoraisr.com
 * <p style=\"font-size:110%;\">Dig into our logoraisr API reference documentation. We also offer an OpenAPI specification to allow easy integration into your systems. You can download the json file by clicking on the download button.<p><br><p style=\"font-size:110%; font-weight:bold\">OpenAPI 2.0 Validation Status</p><img src=\"https://online.swagger.io/validator?url=https://docs.logoraisr.com/\">
 *
 * The version of the OpenAPI document: v1
 * Contact: support@logoraisr.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.Process;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:25.150422-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectRequest {
  public static final String SERIALIZED_NAME_FILE_ID = "file_id";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private UUID fileId;

  public static final String SERIALIZED_NAME_PROCESS = "process";
  @SerializedName(SERIALIZED_NAME_PROCESS)
  private Process process;

  public static final String SERIALIZED_NAME_PROJECT_TITLE = "project_title";
  @SerializedName(SERIALIZED_NAME_PROJECT_TITLE)
  private String projectTitle;

  public ProjectRequest() {
  }

  public ProjectRequest fileId(UUID fileId) {
    this.fileId = fileId;
    return this;
  }

  /**
   * Id of the file on which the process is to be applied.
   * @return fileId
   */
  @javax.annotation.Nonnull
  public UUID getFileId() {
    return fileId;
  }

  public void setFileId(UUID fileId) {
    this.fileId = fileId;
  }


  public ProjectRequest process(Process process) {
    this.process = process;
    return this;
  }

  /**
   * Get process
   * @return process
   */
  @javax.annotation.Nullable
  public Process getProcess() {
    return process;
  }

  public void setProcess(Process process) {
    this.process = process;
  }


  public ProjectRequest projectTitle(String projectTitle) {
    this.projectTitle = projectTitle;
    return this;
  }

  /**
   * Name of the project with which it is saved.
   * @return projectTitle
   */
  @javax.annotation.Nonnull
  public String getProjectTitle() {
    return projectTitle;
  }

  public void setProjectTitle(String projectTitle) {
    this.projectTitle = projectTitle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectRequest projectRequest = (ProjectRequest) o;
    return Objects.equals(this.fileId, projectRequest.fileId) &&
        Objects.equals(this.process, projectRequest.process) &&
        Objects.equals(this.projectTitle, projectRequest.projectTitle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileId, process, projectTitle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectRequest {\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    process: ").append(toIndentedString(process)).append("\n");
    sb.append("    projectTitle: ").append(toIndentedString(projectTitle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("file_id");
    openapiFields.add("process");
    openapiFields.add("project_title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("file_id");
    openapiRequiredFields.add("project_title");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectRequest is not found in the empty JSON string", ProjectRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProjectRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("file_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_id").toString()));
      }
      // validate the optional field `process`
      if (jsonObj.get("process") != null && !jsonObj.get("process").isJsonNull()) {
        Process.validateJsonElement(jsonObj.get("process"));
      }
      if (!jsonObj.get("project_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `project_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("project_title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectRequest>() {
           @Override
           public void write(JsonWriter out, ProjectRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectRequest
   * @throws IOException if the JSON string is invalid with respect to ProjectRequest
   */
  public static ProjectRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectRequest.class);
  }

  /**
   * Convert an instance of ProjectRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

