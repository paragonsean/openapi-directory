/**
 * Spinitron v2 API
 * ## Notes  **Tutorial demo** using this API is at [https://spinitron.com/v2-api-demo/](https://spinitron.com/v2-api-demo/). For web integration using iframes and/or JavaScript instead of an API, see [https://spinitron.github.io/v2-web-integration/](https://spinitron.github.io/v2-web-integration/).  **Your API key** is found in the Spinitron web app. Log in to Spinitron and go to *Automation & API* in the *Admin* menu.  **Authenticate** by presenting your API key using either HTTP Bearer Authorization (preferred)      curl -H 'Authorization: Bearer YOURAPIKEY' 'https://spinitron.com/api/spins'  or in the query parameter `access-token` (less secure owing to webserver log files)      curl 'https://spinitron.com/api/spins?access-token=YOURAPIKEY'  **Limit** per page of results is 20 by default and miximally 200.  **Try it out** below works to generate example cURL requests but not to get responses from Spinitron. We do not accept queries sent from web browsers. Copy-paste the cURL commands and run them from your computer.  **Cache** the data you get from the API if you are using it in web or mobile integration. It's not ok to query the API on *every* page request you serve. The [demo](https://spinitron.com/v2-api-demo/) shows how easy it can be to implement a file cache.  An extension to this API with access to all stations for partner applications is available. Contact us. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ShowLinks from './ShowLinks';

/**
 * The Show model module.
 * @module model/Show
 * @version 1.0.0
 */
class Show {
    /**
     * Constructs a new <code>Show</code>.
     * A &#x60;Show&#x60; object describes one occurrence of a radio program. A result set may contain multiple occurrences of the same show with difference &#x60;start&#x60; and &#x60;end&#x60; values.
     * @alias module:model/Show
     */
    constructor() { 
        
        Show.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Show</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Show} obj Optional instance to populate.
     * @return {module:model/Show} The populated <code>Show</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Show();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = ShowLinks.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], 'Date');
            }
            if (data.hasOwnProperty('hide_dj')) {
                obj['hide_dj'] = ApiClient.convertToType(data['hide_dj'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('one_off')) {
                obj['one_off'] = ApiClient.convertToType(data['one_off'], 'Boolean');
            }
            if (data.hasOwnProperty('since')) {
                obj['since'] = ApiClient.convertToType(data['since'], 'Number');
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'Date');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Show</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Show</code>.
     */
    static validateJSON(data) {
        // validate the optional field `_links`
        if (data['_links']) { // data not null
          ShowLinks.validateJSON(data['_links']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {module:model/ShowLinks} _links
 */
Show.prototype['_links'] = undefined;

/**
 * Program/show category
 * @member {String} category
 */
Show.prototype['category'] = undefined;

/**
 * HTML-formatted description of the playlist or program/show
 * @member {String} description
 */
Show.prototype['description'] = undefined;

/**
 * Duration in seconds
 * @member {Number} duration
 */
Show.prototype['duration'] = undefined;

/**
 * UTC datetime ISO-8601
 * @member {Date} end
 */
Show.prototype['end'] = undefined;

/**
 * Should the client application hide information about the show's DJs/hosts?
 * @member {Boolean} hide_dj
 */
Show.prototype['hide_dj'] = undefined;

/**
 * @member {Number} id
 */
Show.prototype['id'] = undefined;

/**
 * @member {String} image
 */
Show.prototype['image'] = undefined;

/**
 * Is the show a one-off in the schedule instead of repeating?
 * @member {Boolean} one_off
 */
Show.prototype['one_off'] = undefined;

/**
 * Since what year has the program/show existed?
 * @member {Number} since
 */
Show.prototype['since'] = undefined;

/**
 * UTC datetime ISO-8601
 * @member {Date} start
 */
Show.prototype['start'] = undefined;

/**
 * Station's time zone
 * @member {String} timezone
 */
Show.prototype['timezone'] = undefined;

/**
 * Program/show title
 * @member {String} title
 */
Show.prototype['title'] = undefined;

/**
 * URL to web site for the program/show
 * @member {String} url
 */
Show.prototype['url'] = undefined;






export default Show;

