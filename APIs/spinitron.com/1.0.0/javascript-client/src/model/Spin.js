/**
 * Spinitron v2 API
 * ## Notes  **Tutorial demo** using this API is at [https://spinitron.com/v2-api-demo/](https://spinitron.com/v2-api-demo/). For web integration using iframes and/or JavaScript instead of an API, see [https://spinitron.github.io/v2-web-integration/](https://spinitron.github.io/v2-web-integration/).  **Your API key** is found in the Spinitron web app. Log in to Spinitron and go to *Automation & API* in the *Admin* menu.  **Authenticate** by presenting your API key using either HTTP Bearer Authorization (preferred)      curl -H 'Authorization: Bearer YOURAPIKEY' 'https://spinitron.com/api/spins'  or in the query parameter `access-token` (less secure owing to webserver log files)      curl 'https://spinitron.com/api/spins?access-token=YOURAPIKEY'  **Limit** per page of results is 20 by default and miximally 200.  **Try it out** below works to generate example cURL requests but not to get responses from Spinitron. We do not accept queries sent from web browsers. Copy-paste the cURL commands and run them from your computer.  **Cache** the data you get from the API if you are using it in web or mobile integration. It's not ok to query the API on *every* page request you serve. The [demo](https://spinitron.com/v2-api-demo/) shows how easy it can be to implement a file cache.  An extension to this API with access to all stations for partner applications is available. Contact us. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SpinLinks from './SpinLinks';

/**
 * The Spin model module.
 * @module model/Spin
 * @version 1.0.0
 */
class Spin {
    /**
     * Constructs a new <code>Spin</code>.
     * @alias module:model/Spin
     */
    constructor() { 
        
        Spin.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Spin</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Spin} obj Optional instance to populate.
     * @return {module:model/Spin} The populated <code>Spin</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Spin();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = SpinLinks.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('artist')) {
                obj['artist'] = ApiClient.convertToType(data['artist'], 'String');
            }
            if (data.hasOwnProperty('artist-custom')) {
                obj['artist-custom'] = ApiClient.convertToType(data['artist-custom'], 'String');
            }
            if (data.hasOwnProperty('catalog-number')) {
                obj['catalog-number'] = ApiClient.convertToType(data['catalog-number'], 'String');
            }
            if (data.hasOwnProperty('classical')) {
                obj['classical'] = ApiClient.convertToType(data['classical'], 'Boolean');
            }
            if (data.hasOwnProperty('composer')) {
                obj['composer'] = ApiClient.convertToType(data['composer'], 'String');
            }
            if (data.hasOwnProperty('conductor')) {
                obj['conductor'] = ApiClient.convertToType(data['conductor'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], 'Date');
            }
            if (data.hasOwnProperty('ensemble')) {
                obj['ensemble'] = ApiClient.convertToType(data['ensemble'], 'String');
            }
            if (data.hasOwnProperty('genre')) {
                obj['genre'] = ApiClient.convertToType(data['genre'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('isrc')) {
                obj['isrc'] = ApiClient.convertToType(data['isrc'], 'String');
            }
            if (data.hasOwnProperty('iswc')) {
                obj['iswc'] = ApiClient.convertToType(data['iswc'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('label-custom')) {
                obj['label-custom'] = ApiClient.convertToType(data['label-custom'], 'String');
            }
            if (data.hasOwnProperty('local')) {
                obj['local'] = ApiClient.convertToType(data['local'], 'Boolean');
            }
            if (data.hasOwnProperty('medium')) {
                obj['medium'] = ApiClient.convertToType(data['medium'], 'String');
            }
            if (data.hasOwnProperty('new')) {
                obj['new'] = ApiClient.convertToType(data['new'], 'Boolean');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('performers')) {
                obj['performers'] = ApiClient.convertToType(data['performers'], 'String');
            }
            if (data.hasOwnProperty('playlist_id')) {
                obj['playlist_id'] = ApiClient.convertToType(data['playlist_id'], 'Number');
            }
            if (data.hasOwnProperty('release')) {
                obj['release'] = ApiClient.convertToType(data['release'], 'String');
            }
            if (data.hasOwnProperty('release-custom')) {
                obj['release-custom'] = ApiClient.convertToType(data['release-custom'], 'String');
            }
            if (data.hasOwnProperty('released')) {
                obj['released'] = ApiClient.convertToType(data['released'], 'Number');
            }
            if (data.hasOwnProperty('request')) {
                obj['request'] = ApiClient.convertToType(data['request'], 'Boolean');
            }
            if (data.hasOwnProperty('song')) {
                obj['song'] = ApiClient.convertToType(data['song'], 'String');
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'Date');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('upc')) {
                obj['upc'] = ApiClient.convertToType(data['upc'], 'String');
            }
            if (data.hasOwnProperty('va')) {
                obj['va'] = ApiClient.convertToType(data['va'], 'Boolean');
            }
            if (data.hasOwnProperty('work')) {
                obj['work'] = ApiClient.convertToType(data['work'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Spin</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Spin</code>.
     */
    static validateJSON(data) {
        // validate the optional field `_links`
        if (data['_links']) { // data not null
          SpinLinks.validateJSON(data['_links']);
        }
        // ensure the json data is a string
        if (data['artist'] && !(typeof data['artist'] === 'string' || data['artist'] instanceof String)) {
            throw new Error("Expected the field `artist` to be a primitive type in the JSON string but got " + data['artist']);
        }
        // ensure the json data is a string
        if (data['artist-custom'] && !(typeof data['artist-custom'] === 'string' || data['artist-custom'] instanceof String)) {
            throw new Error("Expected the field `artist-custom` to be a primitive type in the JSON string but got " + data['artist-custom']);
        }
        // ensure the json data is a string
        if (data['catalog-number'] && !(typeof data['catalog-number'] === 'string' || data['catalog-number'] instanceof String)) {
            throw new Error("Expected the field `catalog-number` to be a primitive type in the JSON string but got " + data['catalog-number']);
        }
        // ensure the json data is a string
        if (data['composer'] && !(typeof data['composer'] === 'string' || data['composer'] instanceof String)) {
            throw new Error("Expected the field `composer` to be a primitive type in the JSON string but got " + data['composer']);
        }
        // ensure the json data is a string
        if (data['conductor'] && !(typeof data['conductor'] === 'string' || data['conductor'] instanceof String)) {
            throw new Error("Expected the field `conductor` to be a primitive type in the JSON string but got " + data['conductor']);
        }
        // ensure the json data is a string
        if (data['ensemble'] && !(typeof data['ensemble'] === 'string' || data['ensemble'] instanceof String)) {
            throw new Error("Expected the field `ensemble` to be a primitive type in the JSON string but got " + data['ensemble']);
        }
        // ensure the json data is a string
        if (data['genre'] && !(typeof data['genre'] === 'string' || data['genre'] instanceof String)) {
            throw new Error("Expected the field `genre` to be a primitive type in the JSON string but got " + data['genre']);
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // ensure the json data is a string
        if (data['isrc'] && !(typeof data['isrc'] === 'string' || data['isrc'] instanceof String)) {
            throw new Error("Expected the field `isrc` to be a primitive type in the JSON string but got " + data['isrc']);
        }
        // ensure the json data is a string
        if (data['iswc'] && !(typeof data['iswc'] === 'string' || data['iswc'] instanceof String)) {
            throw new Error("Expected the field `iswc` to be a primitive type in the JSON string but got " + data['iswc']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['label-custom'] && !(typeof data['label-custom'] === 'string' || data['label-custom'] instanceof String)) {
            throw new Error("Expected the field `label-custom` to be a primitive type in the JSON string but got " + data['label-custom']);
        }
        // ensure the json data is a string
        if (data['medium'] && !(typeof data['medium'] === 'string' || data['medium'] instanceof String)) {
            throw new Error("Expected the field `medium` to be a primitive type in the JSON string but got " + data['medium']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['performers'] && !(typeof data['performers'] === 'string' || data['performers'] instanceof String)) {
            throw new Error("Expected the field `performers` to be a primitive type in the JSON string but got " + data['performers']);
        }
        // ensure the json data is a string
        if (data['release'] && !(typeof data['release'] === 'string' || data['release'] instanceof String)) {
            throw new Error("Expected the field `release` to be a primitive type in the JSON string but got " + data['release']);
        }
        // ensure the json data is a string
        if (data['release-custom'] && !(typeof data['release-custom'] === 'string' || data['release-custom'] instanceof String)) {
            throw new Error("Expected the field `release-custom` to be a primitive type in the JSON string but got " + data['release-custom']);
        }
        // ensure the json data is a string
        if (data['song'] && !(typeof data['song'] === 'string' || data['song'] instanceof String)) {
            throw new Error("Expected the field `song` to be a primitive type in the JSON string but got " + data['song']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }
        // ensure the json data is a string
        if (data['upc'] && !(typeof data['upc'] === 'string' || data['upc'] instanceof String)) {
            throw new Error("Expected the field `upc` to be a primitive type in the JSON string but got " + data['upc']);
        }
        // ensure the json data is a string
        if (data['work'] && !(typeof data['work'] === 'string' || data['work'] instanceof String)) {
            throw new Error("Expected the field `work` to be a primitive type in the JSON string but got " + data['work']);
        }

        return true;
    }


}



/**
 * @member {module:model/SpinLinks} _links
 */
Spin.prototype['_links'] = undefined;

/**
 * @member {String} artist
 */
Spin.prototype['artist'] = undefined;

/**
 * Station-specific custom field relating to the song's artist
 * @member {String} artist-custom
 */
Spin.prototype['artist-custom'] = undefined;

/**
 * Reference number in the record label's catalog
 * @member {String} catalog-number
 */
Spin.prototype['catalog-number'] = undefined;

/**
 * Is the track's metadata schema \"classical\" rather than \"popular\"?
 * @member {Boolean} classical
 */
Spin.prototype['classical'] = undefined;

/**
 * @member {String} composer
 */
Spin.prototype['composer'] = undefined;

/**
 * For classical music, conducor of the ensemble
 * @member {String} conductor
 */
Spin.prototype['conductor'] = undefined;

/**
 * Duration in seconds
 * @member {Number} duration
 */
Spin.prototype['duration'] = undefined;

/**
 * UTC datetime ISO-8601
 * @member {Date} end
 */
Spin.prototype['end'] = undefined;

/**
 * For classical music, orchestra, performing ensemble, choir, etc.
 * @member {String} ensemble
 */
Spin.prototype['ensemble'] = undefined;

/**
 * @member {String} genre
 */
Spin.prototype['genre'] = undefined;

/**
 * @member {Number} id
 */
Spin.prototype['id'] = undefined;

/**
 * Cover art
 * @member {String} image
 */
Spin.prototype['image'] = undefined;

/**
 * @member {String} isrc
 */
Spin.prototype['isrc'] = undefined;

/**
 * @member {String} iswc
 */
Spin.prototype['iswc'] = undefined;

/**
 * Record label, i.e. publisher of the sound recording
 * @member {String} label
 */
Spin.prototype['label'] = undefined;

/**
 * Station-specific custom field relating to the record label
 * @member {String} label-custom
 */
Spin.prototype['label-custom'] = undefined;

/**
 * Is the artist local to the station?
 * @member {Boolean} local
 */
Spin.prototype['local'] = undefined;

/**
 * Media format in which the sound recording was reased
 * @member {String} medium
 */
Spin.prototype['medium'] = undefined;

/**
 * Is this a recent release?
 * @member {Boolean} new
 */
Spin.prototype['new'] = undefined;

/**
 * HTML-formatted DJ annotation of the spin, can include images etc.
 * @member {String} note
 */
Spin.prototype['note'] = undefined;

/**
 * For classical music, featured performing artists, e.g. soloists
 * @member {String} performers
 */
Spin.prototype['performers'] = undefined;

/**
 * @member {Number} playlist_id
 */
Spin.prototype['playlist_id'] = undefined;

/**
 * @member {String} release
 */
Spin.prototype['release'] = undefined;

/**
 * Station-specific custom field relating to the release
 * @member {String} release-custom
 */
Spin.prototype['release-custom'] = undefined;

/**
 * Year of initial release
 * @member {Number} released
 */
Spin.prototype['released'] = undefined;

/**
 * Was the spin requested by a listener?
 * @member {Boolean} request
 */
Spin.prototype['request'] = undefined;

/**
 * Title of the song or track
 * @member {String} song
 */
Spin.prototype['song'] = undefined;

/**
 * UTC datetime ISO-8601
 * @member {Date} start
 */
Spin.prototype['start'] = undefined;

/**
 * Station's time zone
 * @member {String} timezone
 */
Spin.prototype['timezone'] = undefined;

/**
 * Universal Product Code of the release
 * @member {String} upc
 */
Spin.prototype['upc'] = undefined;

/**
 * Is it a \"Various Artists\" release?
 * @member {Boolean} va
 */
Spin.prototype['va'] = undefined;

/**
 * For classical music, the main compositional work the track (see `song` field) belongs to
 * @member {String} work
 */
Spin.prototype['work'] = undefined;






export default Spin;

