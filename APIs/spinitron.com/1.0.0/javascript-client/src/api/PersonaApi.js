/**
 * Spinitron v2 API
 * ## Notes  **Tutorial demo** using this API is at [https://spinitron.com/v2-api-demo/](https://spinitron.com/v2-api-demo/). For web integration using iframes and/or JavaScript instead of an API, see [https://spinitron.github.io/v2-web-integration/](https://spinitron.github.io/v2-web-integration/).  **Your API key** is found in the Spinitron web app. Log in to Spinitron and go to *Automation & API* in the *Admin* menu.  **Authenticate** by presenting your API key using either HTTP Bearer Authorization (preferred)      curl -H 'Authorization: Bearer YOURAPIKEY' 'https://spinitron.com/api/spins'  or in the query parameter `access-token` (less secure owing to webserver log files)      curl 'https://spinitron.com/api/spins?access-token=YOURAPIKEY'  **Limit** per page of results is 20 by default and miximally 200.  **Try it out** below works to generate example cURL requests but not to get responses from Spinitron. We do not accept queries sent from web browsers. Copy-paste the cURL commands and run them from your computer.  **Cache** the data you get from the API if you are using it in web or mobile integration. It's not ok to query the API on *every* page request you serve. The [demo](https://spinitron.com/v2-api-demo/) shows how easy it can be to implement a file cache.  An extension to this API with access to all stations for partner applications is available. Contact us. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Persona from '../model/Persona';
import PersonasGet200Response from '../model/PersonasGet200Response';

/**
* Persona service.
* @module api/PersonaApi
* @version 1.0.0
*/
export default class PersonaApi {

    /**
    * Constructs a new PersonaApi. 
    * @alias module:api/PersonaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the personasGet operation.
     * @callback module:api/PersonaApi~personasGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonasGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Personas
     * @param {Object} opts Optional parameters
     * @param {String} [name] Filter by Persona name
     * @param {Number} [count = 20)] Amount of items to return
     * @param {Number} [page] Offset, used together with count
     * @param {Array.<String>} [fields] Allows to select only needed fields
     * @param {Array.<String>} [expand] Allows to select extra fields
     * @param {module:api/PersonaApi~personasGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonasGet200Response}
     */
    personasGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'count': opts['count'],
        'page': opts['page'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken', 'httpBearer'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PersonasGet200Response;
      return this.apiClient.callApi(
        '/personas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the personasIdGet operation.
     * @callback module:api/PersonaApi~personasIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Persona} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Persona by id
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [fields] Allows to select only needed fields
     * @param {Array.<String>} [expand] Allows to select extra fields
     * @param {module:api/PersonaApi~personasIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Persona}
     */
    personasIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling personasIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken', 'httpBearer'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Persona;
      return this.apiClient.callApi(
        '/personas/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
