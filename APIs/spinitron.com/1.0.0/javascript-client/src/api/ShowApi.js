/**
 * Spinitron v2 API
 * ## Notes  **Tutorial demo** using this API is at [https://spinitron.com/v2-api-demo/](https://spinitron.com/v2-api-demo/). For web integration using iframes and/or JavaScript instead of an API, see [https://spinitron.github.io/v2-web-integration/](https://spinitron.github.io/v2-web-integration/).  **Your API key** is found in the Spinitron web app. Log in to Spinitron and go to *Automation & API* in the *Admin* menu.  **Authenticate** by presenting your API key using either HTTP Bearer Authorization (preferred)      curl -H 'Authorization: Bearer YOURAPIKEY' 'https://spinitron.com/api/spins'  or in the query parameter `access-token` (less secure owing to webserver log files)      curl 'https://spinitron.com/api/spins?access-token=YOURAPIKEY'  **Limit** per page of results is 20 by default and miximally 200.  **Try it out** below works to generate example cURL requests but not to get responses from Spinitron. We do not accept queries sent from web browsers. Copy-paste the cURL commands and run them from your computer.  **Cache** the data you get from the API if you are using it in web or mobile integration. It's not ok to query the API on *every* page request you serve. The [demo](https://spinitron.com/v2-api-demo/) shows how easy it can be to implement a file cache.  An extension to this API with access to all stations for partner applications is available. Contact us. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Show from '../model/Show';
import ShowsGet200Response from '../model/ShowsGet200Response';

/**
* Show service.
* @module api/ShowApi
* @version 1.0.0
*/
export default class ShowApi {

    /**
    * Constructs a new ShowApi. 
    * @alias module:api/ShowApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the showsGet operation.
     * @callback module:api/ShowApi~showsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns scheduled shows optionally filtered by {start} and/or {end} datetimes
     * **Terminology**: Spinitron defines a *show* as a radio program. A show can have one or more *schedules*, each of which may specify either an *occurence* or a *repetition*, which represents a set of occurences. Thus scheduled shows have occurences that, for example, may be displayed in a calendar.  In the response, `items` is an array of objects representing occurences of scheduled shows.  You may optionally filter `items` to a datetime *range* by including in the request {start} and/or {end} parameters, both of which must be no more than one hour in the past. An occurence starting at {end} is included in the reponse.  `itmes` can include occurences that begin *or* end within the filter range. A show that goes on air before {start} appears in `items` if it ends *after* but not *at* {start}. An occurence starting at or before {end} is included.  If the request omits the {start} parameter, the server sets its value to the current time so that the filter range's start is always defined. If the request specifies {end} then the requested range is *bounded*, otherwise it is *unbounded*.  For a bounded request, `items` includes *every* occurence of all shows occuring in the range. The only difference between objects in `items` representing a given show will be the `start` field value.  For an unbounded request, `items` includes *only one* occurence per show, specifically, the next occurrence after {start} of all shows occuring after {start}.  Use an unbounded request to get a straight list all shows. Use a bounded request to get a calendar/agenda of shows expanded into occurrences by thir shedules and repetitions.  Objects in `items` are ordered first by `datetime` and then by `id`. 
     * @param {Object} opts Optional parameters
     * @param {Date} [start] The datetime starting from items must be returned. Maximum 1 hour in past. 
     * @param {Date} [end] The ending datetime. Maximum 1 hour in past. 
     * @param {Number} [count = 20)] Amount of items to return
     * @param {Number} [page] Offset, used together with count
     * @param {Array.<String>} [fields] Allows to select only needed fields
     * @param {Array.<String>} [expand] Allows to select extra fields
     * @param {module:api/ShowApi~showsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowsGet200Response}
     */
    showsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'end': opts['end'],
        'count': opts['count'],
        'page': opts['page'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken', 'httpBearer'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ShowsGet200Response;
      return this.apiClient.callApi(
        '/shows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showsIdGet operation.
     * @callback module:api/ShowApi~showsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Show} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Show by id
     * The response object represents the next occurence of the show specified by {id}.  Status 404 is returned if a show with {id} does not exist or if it does but all its scheduled occurences elapsed in the past. 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [fields] Allows to select only needed fields
     * @param {Array.<String>} [expand] Allows to select extra fields
     * @param {module:api/ShowApi~showsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Show}
     */
    showsIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken', 'httpBearer'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Show;
      return this.apiClient.callApi(
        '/shows/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
