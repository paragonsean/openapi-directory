/**
 * Spinitron v2 API
 * ## Notes  **Tutorial demo** using this API is at [https://spinitron.com/v2-api-demo/](https://spinitron.com/v2-api-demo/). For web integration using iframes and/or JavaScript instead of an API, see [https://spinitron.github.io/v2-web-integration/](https://spinitron.github.io/v2-web-integration/).  **Your API key** is found in the Spinitron web app. Log in to Spinitron and go to *Automation & API* in the *Admin* menu.  **Authenticate** by presenting your API key using either HTTP Bearer Authorization (preferred)      curl -H 'Authorization: Bearer YOURAPIKEY' 'https://spinitron.com/api/spins'  or in the query parameter `access-token` (less secure owing to webserver log files)      curl 'https://spinitron.com/api/spins?access-token=YOURAPIKEY'  **Limit** per page of results is 20 by default and miximally 200.  **Try it out** below works to generate example cURL requests but not to get responses from Spinitron. We do not accept queries sent from web browsers. Copy-paste the cURL commands and run them from your computer.  **Cache** the data you get from the API if you are using it in web or mobile integration. It's not ok to query the API on *every* page request you serve. The [demo](https://spinitron.com/v2-api-demo/) shows how easy it can be to implement a file cache.  An extension to this API with access to all stations for partner applications is available. Contact us. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Spin from '../model/Spin';
import SpinsGet200Response from '../model/SpinsGet200Response';
import ValidationError from '../model/ValidationError';

/**
* Spin service.
* @module api/SpinApi
* @version 1.0.0
*/
export default class SpinApi {

    /**
    * Constructs a new SpinApi. 
    * @alias module:api/SpinApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the spinsGet operation.
     * @callback module:api/SpinApi~spinsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpinsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns spins optionally filtered by {start} and/or {end} datetimes
     * Get Spins optionally filtered by a datetime range. Only past Spins will be returned. 
     * @param {Object} opts Optional parameters
     * @param {Date} [start] The datetime starting from items must be returned. 
     * @param {Date} [end] The ending datetime. 
     * @param {Number} [playlistId] Filter by playlist
     * @param {Number} [showId] Filter by show
     * @param {Number} [count = 20)] Amount of items to return
     * @param {Number} [page] Offset, used together with count
     * @param {Array.<String>} [fields] Allows to select only needed fields
     * @param {Array.<String>} [expand] Allows to select extra fields
     * @param {module:api/SpinApi~spinsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpinsGet200Response}
     */
    spinsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'end': opts['end'],
        'playlist_id': opts['playlistId'],
        'show_id': opts['showId'],
        'count': opts['count'],
        'page': opts['page'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken', 'httpBearer'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = SpinsGet200Response;
      return this.apiClient.callApi(
        '/spins', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the spinsIdGet operation.
     * @callback module:api/SpinApi~spinsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Spin} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Spin by id
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [fields] Allows to select only needed fields
     * @param {Array.<String>} [expand] Allows to select extra fields
     * @param {module:api/SpinApi~spinsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Spin}
     */
    spinsIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spinsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken', 'httpBearer'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Spin;
      return this.apiClient.callApi(
        '/spins/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the spinsPost operation.
     * @callback module:api/SpinApi~spinsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Spin} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log a Spin
     * An endpoint for automation systems to log spins into the spin table.
     * @param {String} artist 
     * @param {String} song 
     * @param {Object} opts Optional parameters
     * @param {String} [composer] 
     * @param {Number} [duration] 
     * @param {String} [genre] 
     * @param {String} [isrc] 
     * @param {String} [label] 
     * @param {Boolean} [live] Only when automation params are configured with the \\\"Pass through\\\" mode. Enables \\\"live assist\\\" mode. Default mode is \\\"full automation\\\". 
     * @param {String} [release] 
     * @param {Date} [start] 
     * @param {module:api/SpinApi~spinsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Spin}
     */
    spinsPost(artist, song, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'artist' is set
      if (artist === undefined || artist === null) {
        throw new Error("Missing the required parameter 'artist' when calling spinsPost");
      }
      // verify the required parameter 'song' is set
      if (song === undefined || song === null) {
        throw new Error("Missing the required parameter 'song' when calling spinsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'artist': artist,
        'composer': opts['composer'],
        'duration': opts['duration'],
        'genre': opts['genre'],
        'isrc': opts['isrc'],
        'label': opts['label'],
        'live': opts['live'],
        'release': opts['release'],
        'song': song,
        'start': opts['start']
      };

      let authNames = ['accessToken', 'httpBearer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Spin;
      return this.apiClient.callApi(
        '/spins', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
