/**
 * Spinitron v2 API
 * ## Notes  **Tutorial demo** using this API is at [https://spinitron.com/v2-api-demo/](https://spinitron.com/v2-api-demo/). For web integration using iframes and/or JavaScript instead of an API, see [https://spinitron.github.io/v2-web-integration/](https://spinitron.github.io/v2-web-integration/).  **Your API key** is found in the Spinitron web app. Log in to Spinitron and go to *Automation & API* in the *Admin* menu.  **Authenticate** by presenting your API key using either HTTP Bearer Authorization (preferred)      curl -H 'Authorization: Bearer YOURAPIKEY' 'https://spinitron.com/api/spins'  or in the query parameter `access-token` (less secure owing to webserver log files)      curl 'https://spinitron.com/api/spins?access-token=YOURAPIKEY'  **Limit** per page of results is 20 by default and miximally 200.  **Try it out** below works to generate example cURL requests but not to get responses from Spinitron. We do not accept queries sent from web browsers. Copy-paste the cURL commands and run them from your computer.  **Cache** the data you get from the API if you are using it in web or mobile integration. It's not ok to query the API on *every* page request you serve. The [demo](https://spinitron.com/v2-api-demo/) shows how easy it can be to implement a file cache.  An extension to this API with access to all stations for partner applications is available. Contact us. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SpinitronV2Api);
  }
}(this, function(expect, SpinitronV2Api) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SpinitronV2Api.Spin();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Spin', function() {
    it('should create an instance of Spin', function() {
      // uncomment below and update the code to test Spin
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be.a(SpinitronV2Api.Spin);
    });

    it('should have the property links (base name: "_links")', function() {
      // uncomment below and update the code to test the property links
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property artist (base name: "artist")', function() {
      // uncomment below and update the code to test the property artist
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property artistCustom (base name: "artist-custom")', function() {
      // uncomment below and update the code to test the property artistCustom
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property catalogNumber (base name: "catalog-number")', function() {
      // uncomment below and update the code to test the property catalogNumber
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property classical (base name: "classical")', function() {
      // uncomment below and update the code to test the property classical
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property composer (base name: "composer")', function() {
      // uncomment below and update the code to test the property composer
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property conductor (base name: "conductor")', function() {
      // uncomment below and update the code to test the property conductor
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property duration (base name: "duration")', function() {
      // uncomment below and update the code to test the property duration
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property end (base name: "end")', function() {
      // uncomment below and update the code to test the property end
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property ensemble (base name: "ensemble")', function() {
      // uncomment below and update the code to test the property ensemble
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property genre (base name: "genre")', function() {
      // uncomment below and update the code to test the property genre
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property image (base name: "image")', function() {
      // uncomment below and update the code to test the property image
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property isrc (base name: "isrc")', function() {
      // uncomment below and update the code to test the property isrc
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property iswc (base name: "iswc")', function() {
      // uncomment below and update the code to test the property iswc
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property label (base name: "label")', function() {
      // uncomment below and update the code to test the property label
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property labelCustom (base name: "label-custom")', function() {
      // uncomment below and update the code to test the property labelCustom
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property local (base name: "local")', function() {
      // uncomment below and update the code to test the property local
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property medium (base name: "medium")', function() {
      // uncomment below and update the code to test the property medium
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property _new (base name: "new")', function() {
      // uncomment below and update the code to test the property _new
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property note (base name: "note")', function() {
      // uncomment below and update the code to test the property note
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property performers (base name: "performers")', function() {
      // uncomment below and update the code to test the property performers
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property playlistId (base name: "playlist_id")', function() {
      // uncomment below and update the code to test the property playlistId
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property release (base name: "release")', function() {
      // uncomment below and update the code to test the property release
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property releaseCustom (base name: "release-custom")', function() {
      // uncomment below and update the code to test the property releaseCustom
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property released (base name: "released")', function() {
      // uncomment below and update the code to test the property released
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property request (base name: "request")', function() {
      // uncomment below and update the code to test the property request
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property song (base name: "song")', function() {
      // uncomment below and update the code to test the property song
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property start (base name: "start")', function() {
      // uncomment below and update the code to test the property start
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property timezone (base name: "timezone")', function() {
      // uncomment below and update the code to test the property timezone
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property upc (base name: "upc")', function() {
      // uncomment below and update the code to test the property upc
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property va (base name: "va")', function() {
      // uncomment below and update the code to test the property va
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

    it('should have the property work (base name: "work")', function() {
      // uncomment below and update the code to test the property work
      //var instance = new SpinitronV2Api.Spin();
      //expect(instance).to.be();
    });

  });

}));
