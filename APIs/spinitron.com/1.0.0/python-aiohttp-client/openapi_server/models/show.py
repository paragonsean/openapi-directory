# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.show_links import ShowLinks
from openapi_server import util


class Show(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: ShowLinks=None, category: str=None, description: str=None, duration: int=None, end: datetime=None, hide_dj: bool=None, id: int=None, image: str=None, one_off: bool=None, since: int=None, start: datetime=None, timezone: str=None, title: str=None, url: str=None):
        """Show - a model defined in OpenAPI

        :param links: The links of this Show.
        :param category: The category of this Show.
        :param description: The description of this Show.
        :param duration: The duration of this Show.
        :param end: The end of this Show.
        :param hide_dj: The hide_dj of this Show.
        :param id: The id of this Show.
        :param image: The image of this Show.
        :param one_off: The one_off of this Show.
        :param since: The since of this Show.
        :param start: The start of this Show.
        :param timezone: The timezone of this Show.
        :param title: The title of this Show.
        :param url: The url of this Show.
        """
        self.openapi_types = {
            'links': ShowLinks,
            'category': str,
            'description': str,
            'duration': int,
            'end': datetime,
            'hide_dj': bool,
            'id': int,
            'image': str,
            'one_off': bool,
            'since': int,
            'start': datetime,
            'timezone': str,
            'title': str,
            'url': str
        }

        self.attribute_map = {
            'links': '_links',
            'category': 'category',
            'description': 'description',
            'duration': 'duration',
            'end': 'end',
            'hide_dj': 'hide_dj',
            'id': 'id',
            'image': 'image',
            'one_off': 'one_off',
            'since': 'since',
            'start': 'start',
            'timezone': 'timezone',
            'title': 'title',
            'url': 'url'
        }

        self._links = links
        self._category = category
        self._description = description
        self._duration = duration
        self._end = end
        self._hide_dj = hide_dj
        self._id = id
        self._image = image
        self._one_off = one_off
        self._since = since
        self._start = start
        self._timezone = timezone
        self._title = title
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Show':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Show of this Show.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this Show.


        :return: The links of this Show.
        :rtype: ShowLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Show.


        :param links: The links of this Show.
        :type links: ShowLinks
        """

        self._links = links

    @property
    def category(self):
        """Gets the category of this Show.

        Program/show category

        :return: The category of this Show.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Show.

        Program/show category

        :param category: The category of this Show.
        :type category: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this Show.

        HTML-formatted description of the playlist or program/show

        :return: The description of this Show.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Show.

        HTML-formatted description of the playlist or program/show

        :param description: The description of this Show.
        :type description: str
        """

        self._description = description

    @property
    def duration(self):
        """Gets the duration of this Show.

        Duration in seconds

        :return: The duration of this Show.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Show.

        Duration in seconds

        :param duration: The duration of this Show.
        :type duration: int
        """

        self._duration = duration

    @property
    def end(self):
        """Gets the end of this Show.

        UTC datetime ISO-8601

        :return: The end of this Show.
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Show.

        UTC datetime ISO-8601

        :param end: The end of this Show.
        :type end: datetime
        """

        self._end = end

    @property
    def hide_dj(self):
        """Gets the hide_dj of this Show.

        Should the client application hide information about the show's DJs/hosts?

        :return: The hide_dj of this Show.
        :rtype: bool
        """
        return self._hide_dj

    @hide_dj.setter
    def hide_dj(self, hide_dj):
        """Sets the hide_dj of this Show.

        Should the client application hide information about the show's DJs/hosts?

        :param hide_dj: The hide_dj of this Show.
        :type hide_dj: bool
        """

        self._hide_dj = hide_dj

    @property
    def id(self):
        """Gets the id of this Show.


        :return: The id of this Show.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Show.


        :param id: The id of this Show.
        :type id: int
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this Show.


        :return: The image of this Show.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Show.


        :param image: The image of this Show.
        :type image: str
        """

        self._image = image

    @property
    def one_off(self):
        """Gets the one_off of this Show.

        Is the show a one-off in the schedule instead of repeating?

        :return: The one_off of this Show.
        :rtype: bool
        """
        return self._one_off

    @one_off.setter
    def one_off(self, one_off):
        """Sets the one_off of this Show.

        Is the show a one-off in the schedule instead of repeating?

        :param one_off: The one_off of this Show.
        :type one_off: bool
        """

        self._one_off = one_off

    @property
    def since(self):
        """Gets the since of this Show.

        Since what year has the program/show existed?

        :return: The since of this Show.
        :rtype: int
        """
        return self._since

    @since.setter
    def since(self, since):
        """Sets the since of this Show.

        Since what year has the program/show existed?

        :param since: The since of this Show.
        :type since: int
        """

        self._since = since

    @property
    def start(self):
        """Gets the start of this Show.

        UTC datetime ISO-8601

        :return: The start of this Show.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Show.

        UTC datetime ISO-8601

        :param start: The start of this Show.
        :type start: datetime
        """

        self._start = start

    @property
    def timezone(self):
        """Gets the timezone of this Show.

        Station's time zone

        :return: The timezone of this Show.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Show.

        Station's time zone

        :param timezone: The timezone of this Show.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def title(self):
        """Gets the title of this Show.

        Program/show title

        :return: The title of this Show.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Show.

        Program/show title

        :param title: The title of this Show.
        :type title: str
        """

        self._title = title

    @property
    def url(self):
        """Gets the url of this Show.

        URL to web site for the program/show

        :return: The url of this Show.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Show.

        URL to web site for the program/show

        :param url: The url of this Show.
        :type url: str
        """

        self._url = url
