# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.spin_links import SpinLinks
from openapi_server import util


class Spin(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: SpinLinks=None, artist: str=None, artist_custom: str=None, catalog_number: str=None, classical: bool=None, composer: str=None, conductor: str=None, duration: int=None, end: datetime=None, ensemble: str=None, genre: str=None, id: int=None, image: str=None, isrc: str=None, iswc: str=None, label: str=None, label_custom: str=None, local: bool=None, medium: str=None, new: bool=None, note: str=None, performers: str=None, playlist_id: int=None, release: str=None, release_custom: str=None, released: int=None, request: bool=None, song: str=None, start: datetime=None, timezone: str=None, upc: str=None, va: bool=None, work: str=None):
        """Spin - a model defined in OpenAPI

        :param links: The links of this Spin.
        :param artist: The artist of this Spin.
        :param artist_custom: The artist_custom of this Spin.
        :param catalog_number: The catalog_number of this Spin.
        :param classical: The classical of this Spin.
        :param composer: The composer of this Spin.
        :param conductor: The conductor of this Spin.
        :param duration: The duration of this Spin.
        :param end: The end of this Spin.
        :param ensemble: The ensemble of this Spin.
        :param genre: The genre of this Spin.
        :param id: The id of this Spin.
        :param image: The image of this Spin.
        :param isrc: The isrc of this Spin.
        :param iswc: The iswc of this Spin.
        :param label: The label of this Spin.
        :param label_custom: The label_custom of this Spin.
        :param local: The local of this Spin.
        :param medium: The medium of this Spin.
        :param new: The new of this Spin.
        :param note: The note of this Spin.
        :param performers: The performers of this Spin.
        :param playlist_id: The playlist_id of this Spin.
        :param release: The release of this Spin.
        :param release_custom: The release_custom of this Spin.
        :param released: The released of this Spin.
        :param request: The request of this Spin.
        :param song: The song of this Spin.
        :param start: The start of this Spin.
        :param timezone: The timezone of this Spin.
        :param upc: The upc of this Spin.
        :param va: The va of this Spin.
        :param work: The work of this Spin.
        """
        self.openapi_types = {
            'links': SpinLinks,
            'artist': str,
            'artist_custom': str,
            'catalog_number': str,
            'classical': bool,
            'composer': str,
            'conductor': str,
            'duration': int,
            'end': datetime,
            'ensemble': str,
            'genre': str,
            'id': int,
            'image': str,
            'isrc': str,
            'iswc': str,
            'label': str,
            'label_custom': str,
            'local': bool,
            'medium': str,
            'new': bool,
            'note': str,
            'performers': str,
            'playlist_id': int,
            'release': str,
            'release_custom': str,
            'released': int,
            'request': bool,
            'song': str,
            'start': datetime,
            'timezone': str,
            'upc': str,
            'va': bool,
            'work': str
        }

        self.attribute_map = {
            'links': '_links',
            'artist': 'artist',
            'artist_custom': 'artist-custom',
            'catalog_number': 'catalog-number',
            'classical': 'classical',
            'composer': 'composer',
            'conductor': 'conductor',
            'duration': 'duration',
            'end': 'end',
            'ensemble': 'ensemble',
            'genre': 'genre',
            'id': 'id',
            'image': 'image',
            'isrc': 'isrc',
            'iswc': 'iswc',
            'label': 'label',
            'label_custom': 'label-custom',
            'local': 'local',
            'medium': 'medium',
            'new': 'new',
            'note': 'note',
            'performers': 'performers',
            'playlist_id': 'playlist_id',
            'release': 'release',
            'release_custom': 'release-custom',
            'released': 'released',
            'request': 'request',
            'song': 'song',
            'start': 'start',
            'timezone': 'timezone',
            'upc': 'upc',
            'va': 'va',
            'work': 'work'
        }

        self._links = links
        self._artist = artist
        self._artist_custom = artist_custom
        self._catalog_number = catalog_number
        self._classical = classical
        self._composer = composer
        self._conductor = conductor
        self._duration = duration
        self._end = end
        self._ensemble = ensemble
        self._genre = genre
        self._id = id
        self._image = image
        self._isrc = isrc
        self._iswc = iswc
        self._label = label
        self._label_custom = label_custom
        self._local = local
        self._medium = medium
        self._new = new
        self._note = note
        self._performers = performers
        self._playlist_id = playlist_id
        self._release = release
        self._release_custom = release_custom
        self._released = released
        self._request = request
        self._song = song
        self._start = start
        self._timezone = timezone
        self._upc = upc
        self._va = va
        self._work = work

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Spin':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Spin of this Spin.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this Spin.


        :return: The links of this Spin.
        :rtype: SpinLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Spin.


        :param links: The links of this Spin.
        :type links: SpinLinks
        """

        self._links = links

    @property
    def artist(self):
        """Gets the artist of this Spin.


        :return: The artist of this Spin.
        :rtype: str
        """
        return self._artist

    @artist.setter
    def artist(self, artist):
        """Sets the artist of this Spin.


        :param artist: The artist of this Spin.
        :type artist: str
        """

        self._artist = artist

    @property
    def artist_custom(self):
        """Gets the artist_custom of this Spin.

        Station-specific custom field relating to the song's artist

        :return: The artist_custom of this Spin.
        :rtype: str
        """
        return self._artist_custom

    @artist_custom.setter
    def artist_custom(self, artist_custom):
        """Sets the artist_custom of this Spin.

        Station-specific custom field relating to the song's artist

        :param artist_custom: The artist_custom of this Spin.
        :type artist_custom: str
        """

        self._artist_custom = artist_custom

    @property
    def catalog_number(self):
        """Gets the catalog_number of this Spin.

        Reference number in the record label's catalog

        :return: The catalog_number of this Spin.
        :rtype: str
        """
        return self._catalog_number

    @catalog_number.setter
    def catalog_number(self, catalog_number):
        """Sets the catalog_number of this Spin.

        Reference number in the record label's catalog

        :param catalog_number: The catalog_number of this Spin.
        :type catalog_number: str
        """

        self._catalog_number = catalog_number

    @property
    def classical(self):
        """Gets the classical of this Spin.

        Is the track's metadata schema \"classical\" rather than \"popular\"?

        :return: The classical of this Spin.
        :rtype: bool
        """
        return self._classical

    @classical.setter
    def classical(self, classical):
        """Sets the classical of this Spin.

        Is the track's metadata schema \"classical\" rather than \"popular\"?

        :param classical: The classical of this Spin.
        :type classical: bool
        """

        self._classical = classical

    @property
    def composer(self):
        """Gets the composer of this Spin.


        :return: The composer of this Spin.
        :rtype: str
        """
        return self._composer

    @composer.setter
    def composer(self, composer):
        """Sets the composer of this Spin.


        :param composer: The composer of this Spin.
        :type composer: str
        """

        self._composer = composer

    @property
    def conductor(self):
        """Gets the conductor of this Spin.

        For classical music, conducor of the ensemble

        :return: The conductor of this Spin.
        :rtype: str
        """
        return self._conductor

    @conductor.setter
    def conductor(self, conductor):
        """Sets the conductor of this Spin.

        For classical music, conducor of the ensemble

        :param conductor: The conductor of this Spin.
        :type conductor: str
        """

        self._conductor = conductor

    @property
    def duration(self):
        """Gets the duration of this Spin.

        Duration in seconds

        :return: The duration of this Spin.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Spin.

        Duration in seconds

        :param duration: The duration of this Spin.
        :type duration: int
        """

        self._duration = duration

    @property
    def end(self):
        """Gets the end of this Spin.

        UTC datetime ISO-8601

        :return: The end of this Spin.
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Spin.

        UTC datetime ISO-8601

        :param end: The end of this Spin.
        :type end: datetime
        """

        self._end = end

    @property
    def ensemble(self):
        """Gets the ensemble of this Spin.

        For classical music, orchestra, performing ensemble, choir, etc.

        :return: The ensemble of this Spin.
        :rtype: str
        """
        return self._ensemble

    @ensemble.setter
    def ensemble(self, ensemble):
        """Sets the ensemble of this Spin.

        For classical music, orchestra, performing ensemble, choir, etc.

        :param ensemble: The ensemble of this Spin.
        :type ensemble: str
        """

        self._ensemble = ensemble

    @property
    def genre(self):
        """Gets the genre of this Spin.


        :return: The genre of this Spin.
        :rtype: str
        """
        return self._genre

    @genre.setter
    def genre(self, genre):
        """Sets the genre of this Spin.


        :param genre: The genre of this Spin.
        :type genre: str
        """

        self._genre = genre

    @property
    def id(self):
        """Gets the id of this Spin.


        :return: The id of this Spin.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Spin.


        :param id: The id of this Spin.
        :type id: int
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this Spin.

        Cover art

        :return: The image of this Spin.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Spin.

        Cover art

        :param image: The image of this Spin.
        :type image: str
        """

        self._image = image

    @property
    def isrc(self):
        """Gets the isrc of this Spin.


        :return: The isrc of this Spin.
        :rtype: str
        """
        return self._isrc

    @isrc.setter
    def isrc(self, isrc):
        """Sets the isrc of this Spin.


        :param isrc: The isrc of this Spin.
        :type isrc: str
        """

        self._isrc = isrc

    @property
    def iswc(self):
        """Gets the iswc of this Spin.


        :return: The iswc of this Spin.
        :rtype: str
        """
        return self._iswc

    @iswc.setter
    def iswc(self, iswc):
        """Sets the iswc of this Spin.


        :param iswc: The iswc of this Spin.
        :type iswc: str
        """

        self._iswc = iswc

    @property
    def label(self):
        """Gets the label of this Spin.

        Record label, i.e. publisher of the sound recording

        :return: The label of this Spin.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Spin.

        Record label, i.e. publisher of the sound recording

        :param label: The label of this Spin.
        :type label: str
        """

        self._label = label

    @property
    def label_custom(self):
        """Gets the label_custom of this Spin.

        Station-specific custom field relating to the record label

        :return: The label_custom of this Spin.
        :rtype: str
        """
        return self._label_custom

    @label_custom.setter
    def label_custom(self, label_custom):
        """Sets the label_custom of this Spin.

        Station-specific custom field relating to the record label

        :param label_custom: The label_custom of this Spin.
        :type label_custom: str
        """

        self._label_custom = label_custom

    @property
    def local(self):
        """Gets the local of this Spin.

        Is the artist local to the station?

        :return: The local of this Spin.
        :rtype: bool
        """
        return self._local

    @local.setter
    def local(self, local):
        """Sets the local of this Spin.

        Is the artist local to the station?

        :param local: The local of this Spin.
        :type local: bool
        """

        self._local = local

    @property
    def medium(self):
        """Gets the medium of this Spin.

        Media format in which the sound recording was reased

        :return: The medium of this Spin.
        :rtype: str
        """
        return self._medium

    @medium.setter
    def medium(self, medium):
        """Sets the medium of this Spin.

        Media format in which the sound recording was reased

        :param medium: The medium of this Spin.
        :type medium: str
        """

        self._medium = medium

    @property
    def new(self):
        """Gets the new of this Spin.

        Is this a recent release?

        :return: The new of this Spin.
        :rtype: bool
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this Spin.

        Is this a recent release?

        :param new: The new of this Spin.
        :type new: bool
        """

        self._new = new

    @property
    def note(self):
        """Gets the note of this Spin.

        HTML-formatted DJ annotation of the spin, can include images etc.

        :return: The note of this Spin.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Spin.

        HTML-formatted DJ annotation of the spin, can include images etc.

        :param note: The note of this Spin.
        :type note: str
        """

        self._note = note

    @property
    def performers(self):
        """Gets the performers of this Spin.

        For classical music, featured performing artists, e.g. soloists

        :return: The performers of this Spin.
        :rtype: str
        """
        return self._performers

    @performers.setter
    def performers(self, performers):
        """Sets the performers of this Spin.

        For classical music, featured performing artists, e.g. soloists

        :param performers: The performers of this Spin.
        :type performers: str
        """

        self._performers = performers

    @property
    def playlist_id(self):
        """Gets the playlist_id of this Spin.


        :return: The playlist_id of this Spin.
        :rtype: int
        """
        return self._playlist_id

    @playlist_id.setter
    def playlist_id(self, playlist_id):
        """Sets the playlist_id of this Spin.


        :param playlist_id: The playlist_id of this Spin.
        :type playlist_id: int
        """

        self._playlist_id = playlist_id

    @property
    def release(self):
        """Gets the release of this Spin.


        :return: The release of this Spin.
        :rtype: str
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this Spin.


        :param release: The release of this Spin.
        :type release: str
        """

        self._release = release

    @property
    def release_custom(self):
        """Gets the release_custom of this Spin.

        Station-specific custom field relating to the release

        :return: The release_custom of this Spin.
        :rtype: str
        """
        return self._release_custom

    @release_custom.setter
    def release_custom(self, release_custom):
        """Sets the release_custom of this Spin.

        Station-specific custom field relating to the release

        :param release_custom: The release_custom of this Spin.
        :type release_custom: str
        """

        self._release_custom = release_custom

    @property
    def released(self):
        """Gets the released of this Spin.

        Year of initial release

        :return: The released of this Spin.
        :rtype: int
        """
        return self._released

    @released.setter
    def released(self, released):
        """Sets the released of this Spin.

        Year of initial release

        :param released: The released of this Spin.
        :type released: int
        """

        self._released = released

    @property
    def request(self):
        """Gets the request of this Spin.

        Was the spin requested by a listener?

        :return: The request of this Spin.
        :rtype: bool
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this Spin.

        Was the spin requested by a listener?

        :param request: The request of this Spin.
        :type request: bool
        """

        self._request = request

    @property
    def song(self):
        """Gets the song of this Spin.

        Title of the song or track

        :return: The song of this Spin.
        :rtype: str
        """
        return self._song

    @song.setter
    def song(self, song):
        """Sets the song of this Spin.

        Title of the song or track

        :param song: The song of this Spin.
        :type song: str
        """

        self._song = song

    @property
    def start(self):
        """Gets the start of this Spin.

        UTC datetime ISO-8601

        :return: The start of this Spin.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Spin.

        UTC datetime ISO-8601

        :param start: The start of this Spin.
        :type start: datetime
        """

        self._start = start

    @property
    def timezone(self):
        """Gets the timezone of this Spin.

        Station's time zone

        :return: The timezone of this Spin.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Spin.

        Station's time zone

        :param timezone: The timezone of this Spin.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def upc(self):
        """Gets the upc of this Spin.

        Universal Product Code of the release

        :return: The upc of this Spin.
        :rtype: str
        """
        return self._upc

    @upc.setter
    def upc(self, upc):
        """Sets the upc of this Spin.

        Universal Product Code of the release

        :param upc: The upc of this Spin.
        :type upc: str
        """

        self._upc = upc

    @property
    def va(self):
        """Gets the va of this Spin.

        Is it a \"Various Artists\" release?

        :return: The va of this Spin.
        :rtype: bool
        """
        return self._va

    @va.setter
    def va(self, va):
        """Sets the va of this Spin.

        Is it a \"Various Artists\" release?

        :param va: The va of this Spin.
        :type va: bool
        """

        self._va = va

    @property
    def work(self):
        """Gets the work of this Spin.

        For classical music, the main compositional work the track (see `song` field) belongs to

        :return: The work of this Spin.
        :rtype: str
        """
        return self._work

    @work.setter
    def work(self, work):
        """Sets the work of this Spin.

        For classical music, the main compositional work the track (see `song` field) belongs to

        :param work: The work of this Spin.
        :type work: str
        """

        self._work = work
