# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Pagination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_page: int=None, page_count: int=None, per_page: int=None, total_count: int=None):
        """Pagination - a model defined in OpenAPI

        :param current_page: The current_page of this Pagination.
        :param page_count: The page_count of this Pagination.
        :param per_page: The per_page of this Pagination.
        :param total_count: The total_count of this Pagination.
        """
        self.openapi_types = {
            'current_page': int,
            'page_count': int,
            'per_page': int,
            'total_count': int
        }

        self.attribute_map = {
            'current_page': 'currentPage',
            'page_count': 'pageCount',
            'per_page': 'perPage',
            'total_count': 'totalCount'
        }

        self._current_page = current_page
        self._page_count = page_count
        self._per_page = per_page
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Pagination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pagination of this Pagination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_page(self):
        """Gets the current_page of this Pagination.


        :return: The current_page of this Pagination.
        :rtype: int
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """Sets the current_page of this Pagination.


        :param current_page: The current_page of this Pagination.
        :type current_page: int
        """

        self._current_page = current_page

    @property
    def page_count(self):
        """Gets the page_count of this Pagination.


        :return: The page_count of this Pagination.
        :rtype: int
        """
        return self._page_count

    @page_count.setter
    def page_count(self, page_count):
        """Sets the page_count of this Pagination.


        :param page_count: The page_count of this Pagination.
        :type page_count: int
        """

        self._page_count = page_count

    @property
    def per_page(self):
        """Gets the per_page of this Pagination.


        :return: The per_page of this Pagination.
        :rtype: int
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """Sets the per_page of this Pagination.


        :param per_page: The per_page of this Pagination.
        :type per_page: int
        """

        self._per_page = per_page

    @property
    def total_count(self):
        """Gets the total_count of this Pagination.


        :return: The total_count of this Pagination.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this Pagination.


        :param total_count: The total_count of this Pagination.
        :type total_count: int
        """

        self._total_count = total_count
