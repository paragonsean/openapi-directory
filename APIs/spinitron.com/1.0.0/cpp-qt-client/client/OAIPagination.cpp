/**
 * Spinitron v2 API
 * ## Notes  **Tutorial demo** using this API is at [https://spinitron.com/v2-api-demo/](https://spinitron.com/v2-api-demo/). For web integration using iframes and/or JavaScript instead of an API, see [https://spinitron.github.io/v2-web-integration/](https://spinitron.github.io/v2-web-integration/).  **Your API key** is found in the Spinitron web app. Log in to Spinitron and go to *Automation & API* in the *Admin* menu.  **Authenticate** by presenting your API key using either HTTP Bearer Authorization (preferred)      curl -H 'Authorization: Bearer YOURAPIKEY' 'https://spinitron.com/api/spins'  or in the query parameter `access-token` (less secure owing to webserver log files)      curl 'https://spinitron.com/api/spins?access-token=YOURAPIKEY'  **Limit** per page of results is 20 by default and miximally 200.  **Try it out** below works to generate example cURL requests but not to get responses from Spinitron. We do not accept queries sent from web browsers. Copy-paste the cURL commands and run them from your computer.  **Cache** the data you get from the API if you are using it in web or mobile integration. It's not ok to query the API on *every* page request you serve. The [demo](https://spinitron.com/v2-api-demo/) shows how easy it can be to implement a file cache.  An extension to this API with access to all stations for partner applications is available. Contact us. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPagination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPagination::OAIPagination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPagination::OAIPagination() {
    this->initializeModel();
}

OAIPagination::~OAIPagination() {}

void OAIPagination::initializeModel() {

    m_current_page_isSet = false;
    m_current_page_isValid = false;

    m_page_count_isSet = false;
    m_page_count_isValid = false;

    m_per_page_isSet = false;
    m_per_page_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;
}

void OAIPagination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPagination::fromJsonObject(QJsonObject json) {

    m_current_page_isValid = ::OpenAPI::fromJsonValue(m_current_page, json[QString("currentPage")]);
    m_current_page_isSet = !json[QString("currentPage")].isNull() && m_current_page_isValid;

    m_page_count_isValid = ::OpenAPI::fromJsonValue(m_page_count, json[QString("pageCount")]);
    m_page_count_isSet = !json[QString("pageCount")].isNull() && m_page_count_isValid;

    m_per_page_isValid = ::OpenAPI::fromJsonValue(m_per_page, json[QString("perPage")]);
    m_per_page_isSet = !json[QString("perPage")].isNull() && m_per_page_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("totalCount")]);
    m_total_count_isSet = !json[QString("totalCount")].isNull() && m_total_count_isValid;
}

QString OAIPagination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPagination::asJsonObject() const {
    QJsonObject obj;
    if (m_current_page_isSet) {
        obj.insert(QString("currentPage"), ::OpenAPI::toJsonValue(m_current_page));
    }
    if (m_page_count_isSet) {
        obj.insert(QString("pageCount"), ::OpenAPI::toJsonValue(m_page_count));
    }
    if (m_per_page_isSet) {
        obj.insert(QString("perPage"), ::OpenAPI::toJsonValue(m_per_page));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("totalCount"), ::OpenAPI::toJsonValue(m_total_count));
    }
    return obj;
}

qint32 OAIPagination::getCurrentPage() const {
    return m_current_page;
}
void OAIPagination::setCurrentPage(const qint32 &current_page) {
    m_current_page = current_page;
    m_current_page_isSet = true;
}

bool OAIPagination::is_current_page_Set() const{
    return m_current_page_isSet;
}

bool OAIPagination::is_current_page_Valid() const{
    return m_current_page_isValid;
}

qint32 OAIPagination::getPageCount() const {
    return m_page_count;
}
void OAIPagination::setPageCount(const qint32 &page_count) {
    m_page_count = page_count;
    m_page_count_isSet = true;
}

bool OAIPagination::is_page_count_Set() const{
    return m_page_count_isSet;
}

bool OAIPagination::is_page_count_Valid() const{
    return m_page_count_isValid;
}

qint32 OAIPagination::getPerPage() const {
    return m_per_page;
}
void OAIPagination::setPerPage(const qint32 &per_page) {
    m_per_page = per_page;
    m_per_page_isSet = true;
}

bool OAIPagination::is_per_page_Set() const{
    return m_per_page_isSet;
}

bool OAIPagination::is_per_page_Valid() const{
    return m_per_page_isValid;
}

qint32 OAIPagination::getTotalCount() const {
    return m_total_count;
}
void OAIPagination::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIPagination::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIPagination::is_total_count_Valid() const{
    return m_total_count_isValid;
}

bool OAIPagination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPagination::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
