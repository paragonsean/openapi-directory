/**
 * Spinitron v2 API
 * ## Notes  **Tutorial demo** using this API is at [https://spinitron.com/v2-api-demo/](https://spinitron.com/v2-api-demo/). For web integration using iframes and/or JavaScript instead of an API, see [https://spinitron.github.io/v2-web-integration/](https://spinitron.github.io/v2-web-integration/).  **Your API key** is found in the Spinitron web app. Log in to Spinitron and go to *Automation & API* in the *Admin* menu.  **Authenticate** by presenting your API key using either HTTP Bearer Authorization (preferred)      curl -H 'Authorization: Bearer YOURAPIKEY' 'https://spinitron.com/api/spins'  or in the query parameter `access-token` (less secure owing to webserver log files)      curl 'https://spinitron.com/api/spins?access-token=YOURAPIKEY'  **Limit** per page of results is 20 by default and miximally 200.  **Try it out** below works to generate example cURL requests but not to get responses from Spinitron. We do not accept queries sent from web browsers. Copy-paste the cURL commands and run them from your computer.  **Cache** the data you get from the API if you are using it in web or mobile integration. It's not ok to query the API on *every* page request you serve. The [demo](https://spinitron.com/v2-api-demo/) shows how easy it can be to implement a file cache.  An extension to this API with access to all stations for partner applications is available. Contact us. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISpin.h
 *
 * 
 */

#ifndef OAISpin_H
#define OAISpin_H

#include <QJsonObject>

#include "OAISpin__links.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISpin__links;

class OAISpin : public OAIObject {
public:
    OAISpin();
    OAISpin(QString json);
    ~OAISpin() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISpin__links getLinks() const;
    void setLinks(const OAISpin__links &_links);
    bool is__links_Set() const;
    bool is__links_Valid() const;

    QString getArtist() const;
    void setArtist(const QString &artist);
    bool is_artist_Set() const;
    bool is_artist_Valid() const;

    QString getArtistCustom() const;
    void setArtistCustom(const QString &artist_custom);
    bool is_artist_custom_Set() const;
    bool is_artist_custom_Valid() const;

    QString getCatalogNumber() const;
    void setCatalogNumber(const QString &catalog_number);
    bool is_catalog_number_Set() const;
    bool is_catalog_number_Valid() const;

    bool isClassical() const;
    void setClassical(const bool &classical);
    bool is_classical_Set() const;
    bool is_classical_Valid() const;

    QString getComposer() const;
    void setComposer(const QString &composer);
    bool is_composer_Set() const;
    bool is_composer_Valid() const;

    QString getConductor() const;
    void setConductor(const QString &conductor);
    bool is_conductor_Set() const;
    bool is_conductor_Valid() const;

    qint32 getDuration() const;
    void setDuration(const qint32 &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    QDateTime getEnd() const;
    void setEnd(const QDateTime &end);
    bool is_end_Set() const;
    bool is_end_Valid() const;

    QString getEnsemble() const;
    void setEnsemble(const QString &ensemble);
    bool is_ensemble_Set() const;
    bool is_ensemble_Valid() const;

    QString getGenre() const;
    void setGenre(const QString &genre);
    bool is_genre_Set() const;
    bool is_genre_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getImage() const;
    void setImage(const QString &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    QString getIsrc() const;
    void setIsrc(const QString &isrc);
    bool is_isrc_Set() const;
    bool is_isrc_Valid() const;

    QString getIswc() const;
    void setIswc(const QString &iswc);
    bool is_iswc_Set() const;
    bool is_iswc_Valid() const;

    QString getLabel() const;
    void setLabel(const QString &label);
    bool is_label_Set() const;
    bool is_label_Valid() const;

    QString getLabelCustom() const;
    void setLabelCustom(const QString &label_custom);
    bool is_label_custom_Set() const;
    bool is_label_custom_Valid() const;

    bool isLocal() const;
    void setLocal(const bool &local);
    bool is_local_Set() const;
    bool is_local_Valid() const;

    QString getMedium() const;
    void setMedium(const QString &medium);
    bool is_medium_Set() const;
    bool is_medium_Valid() const;

    bool isRNew() const;
    void setRNew(const bool &r_new);
    bool is_r_new_Set() const;
    bool is_r_new_Valid() const;

    QString getNote() const;
    void setNote(const QString &note);
    bool is_note_Set() const;
    bool is_note_Valid() const;

    QString getPerformers() const;
    void setPerformers(const QString &performers);
    bool is_performers_Set() const;
    bool is_performers_Valid() const;

    qint32 getPlaylistId() const;
    void setPlaylistId(const qint32 &playlist_id);
    bool is_playlist_id_Set() const;
    bool is_playlist_id_Valid() const;

    QString getRelease() const;
    void setRelease(const QString &release);
    bool is_release_Set() const;
    bool is_release_Valid() const;

    QString getReleaseCustom() const;
    void setReleaseCustom(const QString &release_custom);
    bool is_release_custom_Set() const;
    bool is_release_custom_Valid() const;

    qint32 getReleased() const;
    void setReleased(const qint32 &released);
    bool is_released_Set() const;
    bool is_released_Valid() const;

    bool isRequest() const;
    void setRequest(const bool &request);
    bool is_request_Set() const;
    bool is_request_Valid() const;

    QString getSong() const;
    void setSong(const QString &song);
    bool is_song_Set() const;
    bool is_song_Valid() const;

    QDateTime getStart() const;
    void setStart(const QDateTime &start);
    bool is_start_Set() const;
    bool is_start_Valid() const;

    QString getTimezone() const;
    void setTimezone(const QString &timezone);
    bool is_timezone_Set() const;
    bool is_timezone_Valid() const;

    QString getUpc() const;
    void setUpc(const QString &upc);
    bool is_upc_Set() const;
    bool is_upc_Valid() const;

    bool isVa() const;
    void setVa(const bool &va);
    bool is_va_Set() const;
    bool is_va_Valid() const;

    QString getWork() const;
    void setWork(const QString &work);
    bool is_work_Set() const;
    bool is_work_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISpin__links m__links;
    bool m__links_isSet;
    bool m__links_isValid;

    QString m_artist;
    bool m_artist_isSet;
    bool m_artist_isValid;

    QString m_artist_custom;
    bool m_artist_custom_isSet;
    bool m_artist_custom_isValid;

    QString m_catalog_number;
    bool m_catalog_number_isSet;
    bool m_catalog_number_isValid;

    bool m_classical;
    bool m_classical_isSet;
    bool m_classical_isValid;

    QString m_composer;
    bool m_composer_isSet;
    bool m_composer_isValid;

    QString m_conductor;
    bool m_conductor_isSet;
    bool m_conductor_isValid;

    qint32 m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    QDateTime m_end;
    bool m_end_isSet;
    bool m_end_isValid;

    QString m_ensemble;
    bool m_ensemble_isSet;
    bool m_ensemble_isValid;

    QString m_genre;
    bool m_genre_isSet;
    bool m_genre_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    QString m_isrc;
    bool m_isrc_isSet;
    bool m_isrc_isValid;

    QString m_iswc;
    bool m_iswc_isSet;
    bool m_iswc_isValid;

    QString m_label;
    bool m_label_isSet;
    bool m_label_isValid;

    QString m_label_custom;
    bool m_label_custom_isSet;
    bool m_label_custom_isValid;

    bool m_local;
    bool m_local_isSet;
    bool m_local_isValid;

    QString m_medium;
    bool m_medium_isSet;
    bool m_medium_isValid;

    bool m_r_new;
    bool m_r_new_isSet;
    bool m_r_new_isValid;

    QString m_note;
    bool m_note_isSet;
    bool m_note_isValid;

    QString m_performers;
    bool m_performers_isSet;
    bool m_performers_isValid;

    qint32 m_playlist_id;
    bool m_playlist_id_isSet;
    bool m_playlist_id_isValid;

    QString m_release;
    bool m_release_isSet;
    bool m_release_isValid;

    QString m_release_custom;
    bool m_release_custom_isSet;
    bool m_release_custom_isValid;

    qint32 m_released;
    bool m_released_isSet;
    bool m_released_isValid;

    bool m_request;
    bool m_request_isSet;
    bool m_request_isValid;

    QString m_song;
    bool m_song_isSet;
    bool m_song_isValid;

    QDateTime m_start;
    bool m_start_isSet;
    bool m_start_isValid;

    QString m_timezone;
    bool m_timezone_isSet;
    bool m_timezone_isValid;

    QString m_upc;
    bool m_upc_isSet;
    bool m_upc_isValid;

    bool m_va;
    bool m_va_isSet;
    bool m_va_isValid;

    QString m_work;
    bool m_work_isSet;
    bool m_work_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISpin)

#endif // OAISpin_H
