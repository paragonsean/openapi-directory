/**
 * Spinitron v2 API
 * ## Notes  **Tutorial demo** using this API is at [https://spinitron.com/v2-api-demo/](https://spinitron.com/v2-api-demo/). For web integration using iframes and/or JavaScript instead of an API, see [https://spinitron.github.io/v2-web-integration/](https://spinitron.github.io/v2-web-integration/).  **Your API key** is found in the Spinitron web app. Log in to Spinitron and go to *Automation & API* in the *Admin* menu.  **Authenticate** by presenting your API key using either HTTP Bearer Authorization (preferred)      curl -H 'Authorization: Bearer YOURAPIKEY' 'https://spinitron.com/api/spins'  or in the query parameter `access-token` (less secure owing to webserver log files)      curl 'https://spinitron.com/api/spins?access-token=YOURAPIKEY'  **Limit** per page of results is 20 by default and miximally 200.  **Try it out** below works to generate example cURL requests but not to get responses from Spinitron. We do not accept queries sent from web browsers. Copy-paste the cURL commands and run them from your computer.  **Cache** the data you get from the API if you are using it in web or mobile integration. It's not ok to query the API on *every* page request you serve. The [demo](https://spinitron.com/v2-api-demo/) shows how easy it can be to implement a file cache.  An extension to this API with access to all stations for partner applications is available. Contact us. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersona.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPersona::OAIPersona(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPersona::OAIPersona() {
    this->initializeModel();
}

OAIPersona::~OAIPersona() {}

void OAIPersona::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_bio_isSet = false;
    m_bio_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_since_isSet = false;
    m_since_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAIPersona::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPersona::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_bio_isValid = ::OpenAPI::fromJsonValue(m_bio, json[QString("bio")]);
    m_bio_isSet = !json[QString("bio")].isNull() && m_bio_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_since_isValid = ::OpenAPI::fromJsonValue(m_since, json[QString("since")]);
    m_since_isSet = !json[QString("since")].isNull() && m_since_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAIPersona::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPersona::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_bio_isSet) {
        obj.insert(QString("bio"), ::OpenAPI::toJsonValue(m_bio));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_since_isSet) {
        obj.insert(QString("since"), ::OpenAPI::toJsonValue(m_since));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

OAIPersona__links OAIPersona::getLinks() const {
    return m__links;
}
void OAIPersona::setLinks(const OAIPersona__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIPersona::is__links_Set() const{
    return m__links_isSet;
}

bool OAIPersona::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIPersona::getBio() const {
    return m_bio;
}
void OAIPersona::setBio(const QString &bio) {
    m_bio = bio;
    m_bio_isSet = true;
}

bool OAIPersona::is_bio_Set() const{
    return m_bio_isSet;
}

bool OAIPersona::is_bio_Valid() const{
    return m_bio_isValid;
}

QString OAIPersona::getEmail() const {
    return m_email;
}
void OAIPersona::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIPersona::is_email_Set() const{
    return m_email_isSet;
}

bool OAIPersona::is_email_Valid() const{
    return m_email_isValid;
}

qint32 OAIPersona::getId() const {
    return m_id;
}
void OAIPersona::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPersona::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPersona::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPersona::getImage() const {
    return m_image;
}
void OAIPersona::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIPersona::is_image_Set() const{
    return m_image_isSet;
}

bool OAIPersona::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIPersona::getName() const {
    return m_name;
}
void OAIPersona::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPersona::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPersona::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIPersona::getSince() const {
    return m_since;
}
void OAIPersona::setSince(const qint32 &since) {
    m_since = since;
    m_since_isSet = true;
}

bool OAIPersona::is_since_Set() const{
    return m_since_isSet;
}

bool OAIPersona::is_since_Valid() const{
    return m_since_isValid;
}

QString OAIPersona::getWebsite() const {
    return m_website;
}
void OAIPersona::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIPersona::is_website_Set() const{
    return m_website_isSet;
}

bool OAIPersona::is_website_Valid() const{
    return m_website_isValid;
}

bool OAIPersona::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_since_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPersona::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
