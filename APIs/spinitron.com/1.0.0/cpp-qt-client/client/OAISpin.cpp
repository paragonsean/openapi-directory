/**
 * Spinitron v2 API
 * ## Notes  **Tutorial demo** using this API is at [https://spinitron.com/v2-api-demo/](https://spinitron.com/v2-api-demo/). For web integration using iframes and/or JavaScript instead of an API, see [https://spinitron.github.io/v2-web-integration/](https://spinitron.github.io/v2-web-integration/).  **Your API key** is found in the Spinitron web app. Log in to Spinitron and go to *Automation & API* in the *Admin* menu.  **Authenticate** by presenting your API key using either HTTP Bearer Authorization (preferred)      curl -H 'Authorization: Bearer YOURAPIKEY' 'https://spinitron.com/api/spins'  or in the query parameter `access-token` (less secure owing to webserver log files)      curl 'https://spinitron.com/api/spins?access-token=YOURAPIKEY'  **Limit** per page of results is 20 by default and miximally 200.  **Try it out** below works to generate example cURL requests but not to get responses from Spinitron. We do not accept queries sent from web browsers. Copy-paste the cURL commands and run them from your computer.  **Cache** the data you get from the API if you are using it in web or mobile integration. It's not ok to query the API on *every* page request you serve. The [demo](https://spinitron.com/v2-api-demo/) shows how easy it can be to implement a file cache.  An extension to this API with access to all stations for partner applications is available. Contact us. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpin.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpin::OAISpin(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpin::OAISpin() {
    this->initializeModel();
}

OAISpin::~OAISpin() {}

void OAISpin::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_artist_isSet = false;
    m_artist_isValid = false;

    m_artist_custom_isSet = false;
    m_artist_custom_isValid = false;

    m_catalog_number_isSet = false;
    m_catalog_number_isValid = false;

    m_classical_isSet = false;
    m_classical_isValid = false;

    m_composer_isSet = false;
    m_composer_isValid = false;

    m_conductor_isSet = false;
    m_conductor_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_ensemble_isSet = false;
    m_ensemble_isValid = false;

    m_genre_isSet = false;
    m_genre_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_isrc_isSet = false;
    m_isrc_isValid = false;

    m_iswc_isSet = false;
    m_iswc_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_label_custom_isSet = false;
    m_label_custom_isValid = false;

    m_local_isSet = false;
    m_local_isValid = false;

    m_medium_isSet = false;
    m_medium_isValid = false;

    m_r_new_isSet = false;
    m_r_new_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_performers_isSet = false;
    m_performers_isValid = false;

    m_playlist_id_isSet = false;
    m_playlist_id_isValid = false;

    m_release_isSet = false;
    m_release_isValid = false;

    m_release_custom_isSet = false;
    m_release_custom_isValid = false;

    m_released_isSet = false;
    m_released_isValid = false;

    m_request_isSet = false;
    m_request_isValid = false;

    m_song_isSet = false;
    m_song_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_upc_isSet = false;
    m_upc_isValid = false;

    m_va_isSet = false;
    m_va_isValid = false;

    m_work_isSet = false;
    m_work_isValid = false;
}

void OAISpin::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpin::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_artist_isValid = ::OpenAPI::fromJsonValue(m_artist, json[QString("artist")]);
    m_artist_isSet = !json[QString("artist")].isNull() && m_artist_isValid;

    m_artist_custom_isValid = ::OpenAPI::fromJsonValue(m_artist_custom, json[QString("artist-custom")]);
    m_artist_custom_isSet = !json[QString("artist-custom")].isNull() && m_artist_custom_isValid;

    m_catalog_number_isValid = ::OpenAPI::fromJsonValue(m_catalog_number, json[QString("catalog-number")]);
    m_catalog_number_isSet = !json[QString("catalog-number")].isNull() && m_catalog_number_isValid;

    m_classical_isValid = ::OpenAPI::fromJsonValue(m_classical, json[QString("classical")]);
    m_classical_isSet = !json[QString("classical")].isNull() && m_classical_isValid;

    m_composer_isValid = ::OpenAPI::fromJsonValue(m_composer, json[QString("composer")]);
    m_composer_isSet = !json[QString("composer")].isNull() && m_composer_isValid;

    m_conductor_isValid = ::OpenAPI::fromJsonValue(m_conductor, json[QString("conductor")]);
    m_conductor_isSet = !json[QString("conductor")].isNull() && m_conductor_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_ensemble_isValid = ::OpenAPI::fromJsonValue(m_ensemble, json[QString("ensemble")]);
    m_ensemble_isSet = !json[QString("ensemble")].isNull() && m_ensemble_isValid;

    m_genre_isValid = ::OpenAPI::fromJsonValue(m_genre, json[QString("genre")]);
    m_genre_isSet = !json[QString("genre")].isNull() && m_genre_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_isrc_isValid = ::OpenAPI::fromJsonValue(m_isrc, json[QString("isrc")]);
    m_isrc_isSet = !json[QString("isrc")].isNull() && m_isrc_isValid;

    m_iswc_isValid = ::OpenAPI::fromJsonValue(m_iswc, json[QString("iswc")]);
    m_iswc_isSet = !json[QString("iswc")].isNull() && m_iswc_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_label_custom_isValid = ::OpenAPI::fromJsonValue(m_label_custom, json[QString("label-custom")]);
    m_label_custom_isSet = !json[QString("label-custom")].isNull() && m_label_custom_isValid;

    m_local_isValid = ::OpenAPI::fromJsonValue(m_local, json[QString("local")]);
    m_local_isSet = !json[QString("local")].isNull() && m_local_isValid;

    m_medium_isValid = ::OpenAPI::fromJsonValue(m_medium, json[QString("medium")]);
    m_medium_isSet = !json[QString("medium")].isNull() && m_medium_isValid;

    m_r_new_isValid = ::OpenAPI::fromJsonValue(m_r_new, json[QString("new")]);
    m_r_new_isSet = !json[QString("new")].isNull() && m_r_new_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_performers_isValid = ::OpenAPI::fromJsonValue(m_performers, json[QString("performers")]);
    m_performers_isSet = !json[QString("performers")].isNull() && m_performers_isValid;

    m_playlist_id_isValid = ::OpenAPI::fromJsonValue(m_playlist_id, json[QString("playlist_id")]);
    m_playlist_id_isSet = !json[QString("playlist_id")].isNull() && m_playlist_id_isValid;

    m_release_isValid = ::OpenAPI::fromJsonValue(m_release, json[QString("release")]);
    m_release_isSet = !json[QString("release")].isNull() && m_release_isValid;

    m_release_custom_isValid = ::OpenAPI::fromJsonValue(m_release_custom, json[QString("release-custom")]);
    m_release_custom_isSet = !json[QString("release-custom")].isNull() && m_release_custom_isValid;

    m_released_isValid = ::OpenAPI::fromJsonValue(m_released, json[QString("released")]);
    m_released_isSet = !json[QString("released")].isNull() && m_released_isValid;

    m_request_isValid = ::OpenAPI::fromJsonValue(m_request, json[QString("request")]);
    m_request_isSet = !json[QString("request")].isNull() && m_request_isValid;

    m_song_isValid = ::OpenAPI::fromJsonValue(m_song, json[QString("song")]);
    m_song_isSet = !json[QString("song")].isNull() && m_song_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_upc_isValid = ::OpenAPI::fromJsonValue(m_upc, json[QString("upc")]);
    m_upc_isSet = !json[QString("upc")].isNull() && m_upc_isValid;

    m_va_isValid = ::OpenAPI::fromJsonValue(m_va, json[QString("va")]);
    m_va_isSet = !json[QString("va")].isNull() && m_va_isValid;

    m_work_isValid = ::OpenAPI::fromJsonValue(m_work, json[QString("work")]);
    m_work_isSet = !json[QString("work")].isNull() && m_work_isValid;
}

QString OAISpin::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpin::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_artist_isSet) {
        obj.insert(QString("artist"), ::OpenAPI::toJsonValue(m_artist));
    }
    if (m_artist_custom_isSet) {
        obj.insert(QString("artist-custom"), ::OpenAPI::toJsonValue(m_artist_custom));
    }
    if (m_catalog_number_isSet) {
        obj.insert(QString("catalog-number"), ::OpenAPI::toJsonValue(m_catalog_number));
    }
    if (m_classical_isSet) {
        obj.insert(QString("classical"), ::OpenAPI::toJsonValue(m_classical));
    }
    if (m_composer_isSet) {
        obj.insert(QString("composer"), ::OpenAPI::toJsonValue(m_composer));
    }
    if (m_conductor_isSet) {
        obj.insert(QString("conductor"), ::OpenAPI::toJsonValue(m_conductor));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_ensemble_isSet) {
        obj.insert(QString("ensemble"), ::OpenAPI::toJsonValue(m_ensemble));
    }
    if (m_genre_isSet) {
        obj.insert(QString("genre"), ::OpenAPI::toJsonValue(m_genre));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_isrc_isSet) {
        obj.insert(QString("isrc"), ::OpenAPI::toJsonValue(m_isrc));
    }
    if (m_iswc_isSet) {
        obj.insert(QString("iswc"), ::OpenAPI::toJsonValue(m_iswc));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_label_custom_isSet) {
        obj.insert(QString("label-custom"), ::OpenAPI::toJsonValue(m_label_custom));
    }
    if (m_local_isSet) {
        obj.insert(QString("local"), ::OpenAPI::toJsonValue(m_local));
    }
    if (m_medium_isSet) {
        obj.insert(QString("medium"), ::OpenAPI::toJsonValue(m_medium));
    }
    if (m_r_new_isSet) {
        obj.insert(QString("new"), ::OpenAPI::toJsonValue(m_r_new));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_performers_isSet) {
        obj.insert(QString("performers"), ::OpenAPI::toJsonValue(m_performers));
    }
    if (m_playlist_id_isSet) {
        obj.insert(QString("playlist_id"), ::OpenAPI::toJsonValue(m_playlist_id));
    }
    if (m_release_isSet) {
        obj.insert(QString("release"), ::OpenAPI::toJsonValue(m_release));
    }
    if (m_release_custom_isSet) {
        obj.insert(QString("release-custom"), ::OpenAPI::toJsonValue(m_release_custom));
    }
    if (m_released_isSet) {
        obj.insert(QString("released"), ::OpenAPI::toJsonValue(m_released));
    }
    if (m_request_isSet) {
        obj.insert(QString("request"), ::OpenAPI::toJsonValue(m_request));
    }
    if (m_song_isSet) {
        obj.insert(QString("song"), ::OpenAPI::toJsonValue(m_song));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_upc_isSet) {
        obj.insert(QString("upc"), ::OpenAPI::toJsonValue(m_upc));
    }
    if (m_va_isSet) {
        obj.insert(QString("va"), ::OpenAPI::toJsonValue(m_va));
    }
    if (m_work_isSet) {
        obj.insert(QString("work"), ::OpenAPI::toJsonValue(m_work));
    }
    return obj;
}

OAISpin__links OAISpin::getLinks() const {
    return m__links;
}
void OAISpin::setLinks(const OAISpin__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAISpin::is__links_Set() const{
    return m__links_isSet;
}

bool OAISpin::is__links_Valid() const{
    return m__links_isValid;
}

QString OAISpin::getArtist() const {
    return m_artist;
}
void OAISpin::setArtist(const QString &artist) {
    m_artist = artist;
    m_artist_isSet = true;
}

bool OAISpin::is_artist_Set() const{
    return m_artist_isSet;
}

bool OAISpin::is_artist_Valid() const{
    return m_artist_isValid;
}

QString OAISpin::getArtistCustom() const {
    return m_artist_custom;
}
void OAISpin::setArtistCustom(const QString &artist_custom) {
    m_artist_custom = artist_custom;
    m_artist_custom_isSet = true;
}

bool OAISpin::is_artist_custom_Set() const{
    return m_artist_custom_isSet;
}

bool OAISpin::is_artist_custom_Valid() const{
    return m_artist_custom_isValid;
}

QString OAISpin::getCatalogNumber() const {
    return m_catalog_number;
}
void OAISpin::setCatalogNumber(const QString &catalog_number) {
    m_catalog_number = catalog_number;
    m_catalog_number_isSet = true;
}

bool OAISpin::is_catalog_number_Set() const{
    return m_catalog_number_isSet;
}

bool OAISpin::is_catalog_number_Valid() const{
    return m_catalog_number_isValid;
}

bool OAISpin::isClassical() const {
    return m_classical;
}
void OAISpin::setClassical(const bool &classical) {
    m_classical = classical;
    m_classical_isSet = true;
}

bool OAISpin::is_classical_Set() const{
    return m_classical_isSet;
}

bool OAISpin::is_classical_Valid() const{
    return m_classical_isValid;
}

QString OAISpin::getComposer() const {
    return m_composer;
}
void OAISpin::setComposer(const QString &composer) {
    m_composer = composer;
    m_composer_isSet = true;
}

bool OAISpin::is_composer_Set() const{
    return m_composer_isSet;
}

bool OAISpin::is_composer_Valid() const{
    return m_composer_isValid;
}

QString OAISpin::getConductor() const {
    return m_conductor;
}
void OAISpin::setConductor(const QString &conductor) {
    m_conductor = conductor;
    m_conductor_isSet = true;
}

bool OAISpin::is_conductor_Set() const{
    return m_conductor_isSet;
}

bool OAISpin::is_conductor_Valid() const{
    return m_conductor_isValid;
}

qint32 OAISpin::getDuration() const {
    return m_duration;
}
void OAISpin::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAISpin::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAISpin::is_duration_Valid() const{
    return m_duration_isValid;
}

QDateTime OAISpin::getEnd() const {
    return m_end;
}
void OAISpin::setEnd(const QDateTime &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAISpin::is_end_Set() const{
    return m_end_isSet;
}

bool OAISpin::is_end_Valid() const{
    return m_end_isValid;
}

QString OAISpin::getEnsemble() const {
    return m_ensemble;
}
void OAISpin::setEnsemble(const QString &ensemble) {
    m_ensemble = ensemble;
    m_ensemble_isSet = true;
}

bool OAISpin::is_ensemble_Set() const{
    return m_ensemble_isSet;
}

bool OAISpin::is_ensemble_Valid() const{
    return m_ensemble_isValid;
}

QString OAISpin::getGenre() const {
    return m_genre;
}
void OAISpin::setGenre(const QString &genre) {
    m_genre = genre;
    m_genre_isSet = true;
}

bool OAISpin::is_genre_Set() const{
    return m_genre_isSet;
}

bool OAISpin::is_genre_Valid() const{
    return m_genre_isValid;
}

qint32 OAISpin::getId() const {
    return m_id;
}
void OAISpin::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISpin::is_id_Set() const{
    return m_id_isSet;
}

bool OAISpin::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISpin::getImage() const {
    return m_image;
}
void OAISpin::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAISpin::is_image_Set() const{
    return m_image_isSet;
}

bool OAISpin::is_image_Valid() const{
    return m_image_isValid;
}

QString OAISpin::getIsrc() const {
    return m_isrc;
}
void OAISpin::setIsrc(const QString &isrc) {
    m_isrc = isrc;
    m_isrc_isSet = true;
}

bool OAISpin::is_isrc_Set() const{
    return m_isrc_isSet;
}

bool OAISpin::is_isrc_Valid() const{
    return m_isrc_isValid;
}

QString OAISpin::getIswc() const {
    return m_iswc;
}
void OAISpin::setIswc(const QString &iswc) {
    m_iswc = iswc;
    m_iswc_isSet = true;
}

bool OAISpin::is_iswc_Set() const{
    return m_iswc_isSet;
}

bool OAISpin::is_iswc_Valid() const{
    return m_iswc_isValid;
}

QString OAISpin::getLabel() const {
    return m_label;
}
void OAISpin::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAISpin::is_label_Set() const{
    return m_label_isSet;
}

bool OAISpin::is_label_Valid() const{
    return m_label_isValid;
}

QString OAISpin::getLabelCustom() const {
    return m_label_custom;
}
void OAISpin::setLabelCustom(const QString &label_custom) {
    m_label_custom = label_custom;
    m_label_custom_isSet = true;
}

bool OAISpin::is_label_custom_Set() const{
    return m_label_custom_isSet;
}

bool OAISpin::is_label_custom_Valid() const{
    return m_label_custom_isValid;
}

bool OAISpin::isLocal() const {
    return m_local;
}
void OAISpin::setLocal(const bool &local) {
    m_local = local;
    m_local_isSet = true;
}

bool OAISpin::is_local_Set() const{
    return m_local_isSet;
}

bool OAISpin::is_local_Valid() const{
    return m_local_isValid;
}

QString OAISpin::getMedium() const {
    return m_medium;
}
void OAISpin::setMedium(const QString &medium) {
    m_medium = medium;
    m_medium_isSet = true;
}

bool OAISpin::is_medium_Set() const{
    return m_medium_isSet;
}

bool OAISpin::is_medium_Valid() const{
    return m_medium_isValid;
}

bool OAISpin::isRNew() const {
    return m_r_new;
}
void OAISpin::setRNew(const bool &r_new) {
    m_r_new = r_new;
    m_r_new_isSet = true;
}

bool OAISpin::is_r_new_Set() const{
    return m_r_new_isSet;
}

bool OAISpin::is_r_new_Valid() const{
    return m_r_new_isValid;
}

QString OAISpin::getNote() const {
    return m_note;
}
void OAISpin::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAISpin::is_note_Set() const{
    return m_note_isSet;
}

bool OAISpin::is_note_Valid() const{
    return m_note_isValid;
}

QString OAISpin::getPerformers() const {
    return m_performers;
}
void OAISpin::setPerformers(const QString &performers) {
    m_performers = performers;
    m_performers_isSet = true;
}

bool OAISpin::is_performers_Set() const{
    return m_performers_isSet;
}

bool OAISpin::is_performers_Valid() const{
    return m_performers_isValid;
}

qint32 OAISpin::getPlaylistId() const {
    return m_playlist_id;
}
void OAISpin::setPlaylistId(const qint32 &playlist_id) {
    m_playlist_id = playlist_id;
    m_playlist_id_isSet = true;
}

bool OAISpin::is_playlist_id_Set() const{
    return m_playlist_id_isSet;
}

bool OAISpin::is_playlist_id_Valid() const{
    return m_playlist_id_isValid;
}

QString OAISpin::getRelease() const {
    return m_release;
}
void OAISpin::setRelease(const QString &release) {
    m_release = release;
    m_release_isSet = true;
}

bool OAISpin::is_release_Set() const{
    return m_release_isSet;
}

bool OAISpin::is_release_Valid() const{
    return m_release_isValid;
}

QString OAISpin::getReleaseCustom() const {
    return m_release_custom;
}
void OAISpin::setReleaseCustom(const QString &release_custom) {
    m_release_custom = release_custom;
    m_release_custom_isSet = true;
}

bool OAISpin::is_release_custom_Set() const{
    return m_release_custom_isSet;
}

bool OAISpin::is_release_custom_Valid() const{
    return m_release_custom_isValid;
}

qint32 OAISpin::getReleased() const {
    return m_released;
}
void OAISpin::setReleased(const qint32 &released) {
    m_released = released;
    m_released_isSet = true;
}

bool OAISpin::is_released_Set() const{
    return m_released_isSet;
}

bool OAISpin::is_released_Valid() const{
    return m_released_isValid;
}

bool OAISpin::isRequest() const {
    return m_request;
}
void OAISpin::setRequest(const bool &request) {
    m_request = request;
    m_request_isSet = true;
}

bool OAISpin::is_request_Set() const{
    return m_request_isSet;
}

bool OAISpin::is_request_Valid() const{
    return m_request_isValid;
}

QString OAISpin::getSong() const {
    return m_song;
}
void OAISpin::setSong(const QString &song) {
    m_song = song;
    m_song_isSet = true;
}

bool OAISpin::is_song_Set() const{
    return m_song_isSet;
}

bool OAISpin::is_song_Valid() const{
    return m_song_isValid;
}

QDateTime OAISpin::getStart() const {
    return m_start;
}
void OAISpin::setStart(const QDateTime &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAISpin::is_start_Set() const{
    return m_start_isSet;
}

bool OAISpin::is_start_Valid() const{
    return m_start_isValid;
}

QString OAISpin::getTimezone() const {
    return m_timezone;
}
void OAISpin::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAISpin::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAISpin::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAISpin::getUpc() const {
    return m_upc;
}
void OAISpin::setUpc(const QString &upc) {
    m_upc = upc;
    m_upc_isSet = true;
}

bool OAISpin::is_upc_Set() const{
    return m_upc_isSet;
}

bool OAISpin::is_upc_Valid() const{
    return m_upc_isValid;
}

bool OAISpin::isVa() const {
    return m_va;
}
void OAISpin::setVa(const bool &va) {
    m_va = va;
    m_va_isSet = true;
}

bool OAISpin::is_va_Set() const{
    return m_va_isSet;
}

bool OAISpin::is_va_Valid() const{
    return m_va_isValid;
}

QString OAISpin::getWork() const {
    return m_work;
}
void OAISpin::setWork(const QString &work) {
    m_work = work;
    m_work_isSet = true;
}

bool OAISpin::is_work_Set() const{
    return m_work_isSet;
}

bool OAISpin::is_work_Valid() const{
    return m_work_isValid;
}

bool OAISpin::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_custom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classical_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_composer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conductor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ensemble_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_genre_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isrc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iswc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_custom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_medium_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_new_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playlist_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_custom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_released_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_song_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_va_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpin::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
