/**
 * Spinitron v2 API
 * ## Notes  **Tutorial demo** using this API is at [https://spinitron.com/v2-api-demo/](https://spinitron.com/v2-api-demo/). For web integration using iframes and/or JavaScript instead of an API, see [https://spinitron.github.io/v2-web-integration/](https://spinitron.github.io/v2-web-integration/).  **Your API key** is found in the Spinitron web app. Log in to Spinitron and go to *Automation & API* in the *Admin* menu.  **Authenticate** by presenting your API key using either HTTP Bearer Authorization (preferred)      curl -H 'Authorization: Bearer YOURAPIKEY' 'https://spinitron.com/api/spins'  or in the query parameter `access-token` (less secure owing to webserver log files)      curl 'https://spinitron.com/api/spins?access-token=YOURAPIKEY'  **Limit** per page of results is 20 by default and miximally 200.  **Try it out** below works to generate example cURL requests but not to get responses from Spinitron. We do not accept queries sent from web browsers. Copy-paste the cURL commands and run them from your computer.  **Cache** the data you get from the API if you are using it in web or mobile integration. It's not ok to query the API on *every* page request you serve. The [demo](https://spinitron.com/v2-api-demo/) shows how easy it can be to implement a file cache.  An extension to this API with access to all stations for partner applications is available. Contact us. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaylist.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaylist::OAIPlaylist(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaylist::OAIPlaylist() {
    this->initializeModel();
}

OAIPlaylist::~OAIPlaylist() {}

void OAIPlaylist::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_automation_isSet = false;
    m_automation_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_episode_description_isSet = false;
    m_episode_description_isValid = false;

    m_episode_name_isSet = false;
    m_episode_name_isValid = false;

    m_hide_dj_isSet = false;
    m_hide_dj_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_persona_id_isSet = false;
    m_persona_id_isValid = false;

    m_show_id_isSet = false;
    m_show_id_isValid = false;

    m_since_isSet = false;
    m_since_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIPlaylist::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaylist::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_automation_isValid = ::OpenAPI::fromJsonValue(m_automation, json[QString("automation")]);
    m_automation_isSet = !json[QString("automation")].isNull() && m_automation_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_episode_description_isValid = ::OpenAPI::fromJsonValue(m_episode_description, json[QString("episode_description")]);
    m_episode_description_isSet = !json[QString("episode_description")].isNull() && m_episode_description_isValid;

    m_episode_name_isValid = ::OpenAPI::fromJsonValue(m_episode_name, json[QString("episode_name")]);
    m_episode_name_isSet = !json[QString("episode_name")].isNull() && m_episode_name_isValid;

    m_hide_dj_isValid = ::OpenAPI::fromJsonValue(m_hide_dj, json[QString("hide_dj")]);
    m_hide_dj_isSet = !json[QString("hide_dj")].isNull() && m_hide_dj_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_persona_id_isValid = ::OpenAPI::fromJsonValue(m_persona_id, json[QString("persona_id")]);
    m_persona_id_isSet = !json[QString("persona_id")].isNull() && m_persona_id_isValid;

    m_show_id_isValid = ::OpenAPI::fromJsonValue(m_show_id, json[QString("show_id")]);
    m_show_id_isSet = !json[QString("show_id")].isNull() && m_show_id_isValid;

    m_since_isValid = ::OpenAPI::fromJsonValue(m_since, json[QString("since")]);
    m_since_isSet = !json[QString("since")].isNull() && m_since_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIPlaylist::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaylist::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_automation_isSet) {
        obj.insert(QString("automation"), ::OpenAPI::toJsonValue(m_automation));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_episode_description_isSet) {
        obj.insert(QString("episode_description"), ::OpenAPI::toJsonValue(m_episode_description));
    }
    if (m_episode_name_isSet) {
        obj.insert(QString("episode_name"), ::OpenAPI::toJsonValue(m_episode_name));
    }
    if (m_hide_dj_isSet) {
        obj.insert(QString("hide_dj"), ::OpenAPI::toJsonValue(m_hide_dj));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_persona_id_isSet) {
        obj.insert(QString("persona_id"), ::OpenAPI::toJsonValue(m_persona_id));
    }
    if (m_show_id_isSet) {
        obj.insert(QString("show_id"), ::OpenAPI::toJsonValue(m_show_id));
    }
    if (m_since_isSet) {
        obj.insert(QString("since"), ::OpenAPI::toJsonValue(m_since));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIPlaylist__links OAIPlaylist::getLinks() const {
    return m__links;
}
void OAIPlaylist::setLinks(const OAIPlaylist__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIPlaylist::is__links_Set() const{
    return m__links_isSet;
}

bool OAIPlaylist::is__links_Valid() const{
    return m__links_isValid;
}

bool OAIPlaylist::isAutomation() const {
    return m_automation;
}
void OAIPlaylist::setAutomation(const bool &automation) {
    m_automation = automation;
    m_automation_isSet = true;
}

bool OAIPlaylist::is_automation_Set() const{
    return m_automation_isSet;
}

bool OAIPlaylist::is_automation_Valid() const{
    return m_automation_isValid;
}

QString OAIPlaylist::getCategory() const {
    return m_category;
}
void OAIPlaylist::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIPlaylist::is_category_Set() const{
    return m_category_isSet;
}

bool OAIPlaylist::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIPlaylist::getDescription() const {
    return m_description;
}
void OAIPlaylist::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPlaylist::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPlaylist::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIPlaylist::getDuration() const {
    return m_duration;
}
void OAIPlaylist::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIPlaylist::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIPlaylist::is_duration_Valid() const{
    return m_duration_isValid;
}

QDateTime OAIPlaylist::getEnd() const {
    return m_end;
}
void OAIPlaylist::setEnd(const QDateTime &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIPlaylist::is_end_Set() const{
    return m_end_isSet;
}

bool OAIPlaylist::is_end_Valid() const{
    return m_end_isValid;
}

QString OAIPlaylist::getEpisodeDescription() const {
    return m_episode_description;
}
void OAIPlaylist::setEpisodeDescription(const QString &episode_description) {
    m_episode_description = episode_description;
    m_episode_description_isSet = true;
}

bool OAIPlaylist::is_episode_description_Set() const{
    return m_episode_description_isSet;
}

bool OAIPlaylist::is_episode_description_Valid() const{
    return m_episode_description_isValid;
}

QString OAIPlaylist::getEpisodeName() const {
    return m_episode_name;
}
void OAIPlaylist::setEpisodeName(const QString &episode_name) {
    m_episode_name = episode_name;
    m_episode_name_isSet = true;
}

bool OAIPlaylist::is_episode_name_Set() const{
    return m_episode_name_isSet;
}

bool OAIPlaylist::is_episode_name_Valid() const{
    return m_episode_name_isValid;
}

bool OAIPlaylist::isHideDj() const {
    return m_hide_dj;
}
void OAIPlaylist::setHideDj(const bool &hide_dj) {
    m_hide_dj = hide_dj;
    m_hide_dj_isSet = true;
}

bool OAIPlaylist::is_hide_dj_Set() const{
    return m_hide_dj_isSet;
}

bool OAIPlaylist::is_hide_dj_Valid() const{
    return m_hide_dj_isValid;
}

qint32 OAIPlaylist::getId() const {
    return m_id;
}
void OAIPlaylist::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPlaylist::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPlaylist::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPlaylist::getImage() const {
    return m_image;
}
void OAIPlaylist::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIPlaylist::is_image_Set() const{
    return m_image_isSet;
}

bool OAIPlaylist::is_image_Valid() const{
    return m_image_isValid;
}

qint32 OAIPlaylist::getPersonaId() const {
    return m_persona_id;
}
void OAIPlaylist::setPersonaId(const qint32 &persona_id) {
    m_persona_id = persona_id;
    m_persona_id_isSet = true;
}

bool OAIPlaylist::is_persona_id_Set() const{
    return m_persona_id_isSet;
}

bool OAIPlaylist::is_persona_id_Valid() const{
    return m_persona_id_isValid;
}

qint32 OAIPlaylist::getShowId() const {
    return m_show_id;
}
void OAIPlaylist::setShowId(const qint32 &show_id) {
    m_show_id = show_id;
    m_show_id_isSet = true;
}

bool OAIPlaylist::is_show_id_Set() const{
    return m_show_id_isSet;
}

bool OAIPlaylist::is_show_id_Valid() const{
    return m_show_id_isValid;
}

qint32 OAIPlaylist::getSince() const {
    return m_since;
}
void OAIPlaylist::setSince(const qint32 &since) {
    m_since = since;
    m_since_isSet = true;
}

bool OAIPlaylist::is_since_Set() const{
    return m_since_isSet;
}

bool OAIPlaylist::is_since_Valid() const{
    return m_since_isValid;
}

QDateTime OAIPlaylist::getStart() const {
    return m_start;
}
void OAIPlaylist::setStart(const QDateTime &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIPlaylist::is_start_Set() const{
    return m_start_isSet;
}

bool OAIPlaylist::is_start_Valid() const{
    return m_start_isValid;
}

QString OAIPlaylist::getTimezone() const {
    return m_timezone;
}
void OAIPlaylist::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIPlaylist::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIPlaylist::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAIPlaylist::getTitle() const {
    return m_title;
}
void OAIPlaylist::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPlaylist::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPlaylist::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIPlaylist::getUrl() const {
    return m_url;
}
void OAIPlaylist::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPlaylist::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPlaylist::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIPlaylist::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_automation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_episode_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_episode_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_dj_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_persona_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_since_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaylist::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
