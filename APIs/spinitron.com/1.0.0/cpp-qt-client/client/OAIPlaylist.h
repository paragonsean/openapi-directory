/**
 * Spinitron v2 API
 * ## Notes  **Tutorial demo** using this API is at [https://spinitron.com/v2-api-demo/](https://spinitron.com/v2-api-demo/). For web integration using iframes and/or JavaScript instead of an API, see [https://spinitron.github.io/v2-web-integration/](https://spinitron.github.io/v2-web-integration/).  **Your API key** is found in the Spinitron web app. Log in to Spinitron and go to *Automation & API* in the *Admin* menu.  **Authenticate** by presenting your API key using either HTTP Bearer Authorization (preferred)      curl -H 'Authorization: Bearer YOURAPIKEY' 'https://spinitron.com/api/spins'  or in the query parameter `access-token` (less secure owing to webserver log files)      curl 'https://spinitron.com/api/spins?access-token=YOURAPIKEY'  **Limit** per page of results is 20 by default and miximally 200.  **Try it out** below works to generate example cURL requests but not to get responses from Spinitron. We do not accept queries sent from web browsers. Copy-paste the cURL commands and run them from your computer.  **Cache** the data you get from the API if you are using it in web or mobile integration. It's not ok to query the API on *every* page request you serve. The [demo](https://spinitron.com/v2-api-demo/) shows how easy it can be to implement a file cache.  An extension to this API with access to all stations for partner applications is available. Contact us. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPlaylist.h
 *
 * 
 */

#ifndef OAIPlaylist_H
#define OAIPlaylist_H

#include <QJsonObject>

#include "OAIPlaylist__links.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPlaylist__links;

class OAIPlaylist : public OAIObject {
public:
    OAIPlaylist();
    OAIPlaylist(QString json);
    ~OAIPlaylist() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIPlaylist__links getLinks() const;
    void setLinks(const OAIPlaylist__links &_links);
    bool is__links_Set() const;
    bool is__links_Valid() const;

    bool isAutomation() const;
    void setAutomation(const bool &automation);
    bool is_automation_Set() const;
    bool is_automation_Valid() const;

    QString getCategory() const;
    void setCategory(const QString &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    qint32 getDuration() const;
    void setDuration(const qint32 &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    QDateTime getEnd() const;
    void setEnd(const QDateTime &end);
    bool is_end_Set() const;
    bool is_end_Valid() const;

    QString getEpisodeDescription() const;
    void setEpisodeDescription(const QString &episode_description);
    bool is_episode_description_Set() const;
    bool is_episode_description_Valid() const;

    QString getEpisodeName() const;
    void setEpisodeName(const QString &episode_name);
    bool is_episode_name_Set() const;
    bool is_episode_name_Valid() const;

    bool isHideDj() const;
    void setHideDj(const bool &hide_dj);
    bool is_hide_dj_Set() const;
    bool is_hide_dj_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getImage() const;
    void setImage(const QString &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    qint32 getPersonaId() const;
    void setPersonaId(const qint32 &persona_id);
    bool is_persona_id_Set() const;
    bool is_persona_id_Valid() const;

    qint32 getShowId() const;
    void setShowId(const qint32 &show_id);
    bool is_show_id_Set() const;
    bool is_show_id_Valid() const;

    qint32 getSince() const;
    void setSince(const qint32 &since);
    bool is_since_Set() const;
    bool is_since_Valid() const;

    QDateTime getStart() const;
    void setStart(const QDateTime &start);
    bool is_start_Set() const;
    bool is_start_Valid() const;

    QString getTimezone() const;
    void setTimezone(const QString &timezone);
    bool is_timezone_Set() const;
    bool is_timezone_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIPlaylist__links m__links;
    bool m__links_isSet;
    bool m__links_isValid;

    bool m_automation;
    bool m_automation_isSet;
    bool m_automation_isValid;

    QString m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    qint32 m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    QDateTime m_end;
    bool m_end_isSet;
    bool m_end_isValid;

    QString m_episode_description;
    bool m_episode_description_isSet;
    bool m_episode_description_isValid;

    QString m_episode_name;
    bool m_episode_name_isSet;
    bool m_episode_name_isValid;

    bool m_hide_dj;
    bool m_hide_dj_isSet;
    bool m_hide_dj_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    qint32 m_persona_id;
    bool m_persona_id_isSet;
    bool m_persona_id_isValid;

    qint32 m_show_id;
    bool m_show_id_isSet;
    bool m_show_id_isValid;

    qint32 m_since;
    bool m_since_isSet;
    bool m_since_isValid;

    QDateTime m_start;
    bool m_start_isSet;
    bool m_start_isValid;

    QString m_timezone;
    bool m_timezone_isSet;
    bool m_timezone_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPlaylist)

#endif // OAIPlaylist_H
