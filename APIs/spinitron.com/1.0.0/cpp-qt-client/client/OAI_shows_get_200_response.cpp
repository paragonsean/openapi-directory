/**
 * Spinitron v2 API
 * ## Notes  **Tutorial demo** using this API is at [https://spinitron.com/v2-api-demo/](https://spinitron.com/v2-api-demo/). For web integration using iframes and/or JavaScript instead of an API, see [https://spinitron.github.io/v2-web-integration/](https://spinitron.github.io/v2-web-integration/).  **Your API key** is found in the Spinitron web app. Log in to Spinitron and go to *Automation & API* in the *Admin* menu.  **Authenticate** by presenting your API key using either HTTP Bearer Authorization (preferred)      curl -H 'Authorization: Bearer YOURAPIKEY' 'https://spinitron.com/api/spins'  or in the query parameter `access-token` (less secure owing to webserver log files)      curl 'https://spinitron.com/api/spins?access-token=YOURAPIKEY'  **Limit** per page of results is 20 by default and miximally 200.  **Try it out** below works to generate example cURL requests but not to get responses from Spinitron. We do not accept queries sent from web browsers. Copy-paste the cURL commands and run them from your computer.  **Cache** the data you get from the API if you are using it in web or mobile integration. It's not ok to query the API on *every* page request you serve. The [demo](https://spinitron.com/v2-api-demo/) shows how easy it can be to implement a file cache.  An extension to this API with access to all stations for partner applications is available. Contact us. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_shows_get_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_shows_get_200_response::OAI_shows_get_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_shows_get_200_response::OAI_shows_get_200_response() {
    this->initializeModel();
}

OAI_shows_get_200_response::~OAI_shows_get_200_response() {}

void OAI_shows_get_200_response::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m__meta_isSet = false;
    m__meta_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;
}

void OAI_shows_get_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_shows_get_200_response::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m__meta_isValid = ::OpenAPI::fromJsonValue(m__meta, json[QString("_meta")]);
    m__meta_isSet = !json[QString("_meta")].isNull() && m__meta_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;
}

QString OAI_shows_get_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_shows_get_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m__meta.isSet()) {
        obj.insert(QString("_meta"), ::OpenAPI::toJsonValue(m__meta));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    return obj;
}

OAIBaseIndexResponse__links OAI_shows_get_200_response::getLinks() const {
    return m__links;
}
void OAI_shows_get_200_response::setLinks(const OAIBaseIndexResponse__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAI_shows_get_200_response::is__links_Set() const{
    return m__links_isSet;
}

bool OAI_shows_get_200_response::is__links_Valid() const{
    return m__links_isValid;
}

OAIPagination OAI_shows_get_200_response::getMeta() const {
    return m__meta;
}
void OAI_shows_get_200_response::setMeta(const OAIPagination &_meta) {
    m__meta = _meta;
    m__meta_isSet = true;
}

bool OAI_shows_get_200_response::is__meta_Set() const{
    return m__meta_isSet;
}

bool OAI_shows_get_200_response::is__meta_Valid() const{
    return m__meta_isValid;
}

QList<OAIShow> OAI_shows_get_200_response::getItems() const {
    return m_items;
}
void OAI_shows_get_200_response::setItems(const QList<OAIShow> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAI_shows_get_200_response::is_items_Set() const{
    return m_items_isSet;
}

bool OAI_shows_get_200_response::is_items_Valid() const{
    return m_items_isValid;
}

bool OAI_shows_get_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m__meta.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_shows_get_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
