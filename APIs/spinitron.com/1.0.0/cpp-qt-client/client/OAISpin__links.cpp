/**
 * Spinitron v2 API
 * ## Notes  **Tutorial demo** using this API is at [https://spinitron.com/v2-api-demo/](https://spinitron.com/v2-api-demo/). For web integration using iframes and/or JavaScript instead of an API, see [https://spinitron.github.io/v2-web-integration/](https://spinitron.github.io/v2-web-integration/).  **Your API key** is found in the Spinitron web app. Log in to Spinitron and go to *Automation & API* in the *Admin* menu.  **Authenticate** by presenting your API key using either HTTP Bearer Authorization (preferred)      curl -H 'Authorization: Bearer YOURAPIKEY' 'https://spinitron.com/api/spins'  or in the query parameter `access-token` (less secure owing to webserver log files)      curl 'https://spinitron.com/api/spins?access-token=YOURAPIKEY'  **Limit** per page of results is 20 by default and miximally 200.  **Try it out** below works to generate example cURL requests but not to get responses from Spinitron. We do not accept queries sent from web browsers. Copy-paste the cURL commands and run them from your computer.  **Cache** the data you get from the API if you are using it in web or mobile integration. It's not ok to query the API on *every* page request you serve. The [demo](https://spinitron.com/v2-api-demo/) shows how easy it can be to implement a file cache.  An extension to this API with access to all stations for partner applications is available. Contact us. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpin__links.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpin__links::OAISpin__links(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpin__links::OAISpin__links() {
    this->initializeModel();
}

OAISpin__links::~OAISpin__links() {}

void OAISpin__links::initializeModel() {

    m_playlist_isSet = false;
    m_playlist_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;
}

void OAISpin__links::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpin__links::fromJsonObject(QJsonObject json) {

    m_playlist_isValid = ::OpenAPI::fromJsonValue(m_playlist, json[QString("playlist")]);
    m_playlist_isSet = !json[QString("playlist")].isNull() && m_playlist_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;
}

QString OAISpin__links::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpin__links::asJsonObject() const {
    QJsonObject obj;
    if (m_playlist.isSet()) {
        obj.insert(QString("playlist"), ::OpenAPI::toJsonValue(m_playlist));
    }
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    return obj;
}

OAILink OAISpin__links::getPlaylist() const {
    return m_playlist;
}
void OAISpin__links::setPlaylist(const OAILink &playlist) {
    m_playlist = playlist;
    m_playlist_isSet = true;
}

bool OAISpin__links::is_playlist_Set() const{
    return m_playlist_isSet;
}

bool OAISpin__links::is_playlist_Valid() const{
    return m_playlist_isValid;
}

OAILink OAISpin__links::getSelf() const {
    return m_self;
}
void OAISpin__links::setSelf(const OAILink &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAISpin__links::is_self_Set() const{
    return m_self_isSet;
}

bool OAISpin__links::is_self_Valid() const{
    return m_self_isValid;
}

bool OAISpin__links::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_playlist.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpin__links::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
