/**
 * Spinitron v2 API
 * ## Notes  **Tutorial demo** using this API is at [https://spinitron.com/v2-api-demo/](https://spinitron.com/v2-api-demo/). For web integration using iframes and/or JavaScript instead of an API, see [https://spinitron.github.io/v2-web-integration/](https://spinitron.github.io/v2-web-integration/).  **Your API key** is found in the Spinitron web app. Log in to Spinitron and go to *Automation & API* in the *Admin* menu.  **Authenticate** by presenting your API key using either HTTP Bearer Authorization (preferred)      curl -H 'Authorization: Bearer YOURAPIKEY' 'https://spinitron.com/api/spins'  or in the query parameter `access-token` (less secure owing to webserver log files)      curl 'https://spinitron.com/api/spins?access-token=YOURAPIKEY'  **Limit** per page of results is 20 by default and miximally 200.  **Try it out** below works to generate example cURL requests but not to get responses from Spinitron. We do not accept queries sent from web browsers. Copy-paste the cURL commands and run them from your computer.  **Cache** the data you get from the API if you are using it in web or mobile integration. It's not ok to query the API on *every* page request you serve. The [demo](https://spinitron.com/v2-api-demo/) shows how easy it can be to implement a file cache.  An extension to this API with access to all stations for partner applications is available. Contact us. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISpinApi_H
#define OAI_OAISpinApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAISpin.h"
#include "OAIValidationError.h"
#include "OAI_spins_get_200_response.h"
#include <QString>
#include <QDateTime>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISpinApi : public QObject {
    Q_OBJECT

public:
    OAISpinApi(const int timeOut = 0);
    ~OAISpinApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  start QDateTime [optional]
    * @param[in]  end QDateTime [optional]
    * @param[in]  playlist_id qint32 [optional]
    * @param[in]  show_id qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  expand QList<QString> [optional]
    */
    virtual void spinsGet(const ::OpenAPI::OptionalParam<QDateTime> &start = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &playlist_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &show_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &expand = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  expand QList<QString> [optional]
    */
    virtual void spinsIdGet(const qint32 &id, const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &expand = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  artist QString [required]
    * @param[in]  song QString [required]
    * @param[in]  composer QString [optional]
    * @param[in]  duration qint32 [optional]
    * @param[in]  genre QString [optional]
    * @param[in]  isrc QString [optional]
    * @param[in]  label QString [optional]
    * @param[in]  live bool [optional]
    * @param[in]  release QString [optional]
    * @param[in]  start QDateTime [optional]
    */
    virtual void spinsPost(const QString &artist, const QString &song, const ::OpenAPI::OptionalParam<QString> &composer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &duration = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &genre = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &isrc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &live = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &release = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &start = ::OpenAPI::OptionalParam<QDateTime>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void spinsGetCallback(OAIHttpRequestWorker *worker);
    void spinsIdGetCallback(OAIHttpRequestWorker *worker);
    void spinsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void spinsGetSignal(OAI_spins_get_200_response summary);
    void spinsIdGetSignal(OAISpin summary);
    void spinsPostSignal(OAISpin summary);


    void spinsGetSignalFull(OAIHttpRequestWorker *worker, OAI_spins_get_200_response summary);
    void spinsIdGetSignalFull(OAIHttpRequestWorker *worker, OAISpin summary);
    void spinsPostSignalFull(OAIHttpRequestWorker *worker, OAISpin summary);

    Q_DECL_DEPRECATED_X("Use spinsGetSignalError() instead")
    void spinsGetSignalE(OAI_spins_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void spinsGetSignalError(OAI_spins_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spinsIdGetSignalError() instead")
    void spinsIdGetSignalE(OAISpin summary, QNetworkReply::NetworkError error_type, QString error_str);
    void spinsIdGetSignalError(OAISpin summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spinsPostSignalError() instead")
    void spinsPostSignalE(OAISpin summary, QNetworkReply::NetworkError error_type, QString error_str);
    void spinsPostSignalError(OAISpin summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use spinsGetSignalErrorFull() instead")
    void spinsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void spinsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spinsIdGetSignalErrorFull() instead")
    void spinsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void spinsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spinsPostSignalErrorFull() instead")
    void spinsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void spinsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
