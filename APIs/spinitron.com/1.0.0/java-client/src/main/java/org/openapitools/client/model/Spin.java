/*
 * Spinitron v2 API
 * ## Notes  **Tutorial demo** using this API is at [https://spinitron.com/v2-api-demo/](https://spinitron.com/v2-api-demo/). For web integration using iframes and/or JavaScript instead of an API, see [https://spinitron.github.io/v2-web-integration/](https://spinitron.github.io/v2-web-integration/).  **Your API key** is found in the Spinitron web app. Log in to Spinitron and go to *Automation & API* in the *Admin* menu.  **Authenticate** by presenting your API key using either HTTP Bearer Authorization (preferred)      curl -H 'Authorization: Bearer YOURAPIKEY' 'https://spinitron.com/api/spins'  or in the query parameter `access-token` (less secure owing to webserver log files)      curl 'https://spinitron.com/api/spins?access-token=YOURAPIKEY'  **Limit** per page of results is 20 by default and miximally 200.  **Try it out** below works to generate example cURL requests but not to get responses from Spinitron. We do not accept queries sent from web browsers. Copy-paste the cURL commands and run them from your computer.  **Cache** the data you get from the API if you are using it in web or mobile integration. It's not ok to query the API on *every* page request you serve. The [demo](https://spinitron.com/v2-api-demo/) shows how easy it can be to implement a file cache.  An extension to this API with access to all stations for partner applications is available. Contact us. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.SpinLinks;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Spin
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:01.111575-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Spin {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private SpinLinks links;

  public static final String SERIALIZED_NAME_ARTIST = "artist";
  @SerializedName(SERIALIZED_NAME_ARTIST)
  private String artist;

  public static final String SERIALIZED_NAME_ARTIST_CUSTOM = "artist-custom";
  @SerializedName(SERIALIZED_NAME_ARTIST_CUSTOM)
  private String artistCustom;

  public static final String SERIALIZED_NAME_CATALOG_NUMBER = "catalog-number";
  @SerializedName(SERIALIZED_NAME_CATALOG_NUMBER)
  private String catalogNumber;

  public static final String SERIALIZED_NAME_CLASSICAL = "classical";
  @SerializedName(SERIALIZED_NAME_CLASSICAL)
  private Boolean classical;

  public static final String SERIALIZED_NAME_COMPOSER = "composer";
  @SerializedName(SERIALIZED_NAME_COMPOSER)
  private String composer;

  public static final String SERIALIZED_NAME_CONDUCTOR = "conductor";
  @SerializedName(SERIALIZED_NAME_CONDUCTOR)
  private String conductor;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private OffsetDateTime end;

  public static final String SERIALIZED_NAME_ENSEMBLE = "ensemble";
  @SerializedName(SERIALIZED_NAME_ENSEMBLE)
  private String ensemble;

  public static final String SERIALIZED_NAME_GENRE = "genre";
  @SerializedName(SERIALIZED_NAME_GENRE)
  private String genre;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_ISRC = "isrc";
  @SerializedName(SERIALIZED_NAME_ISRC)
  private String isrc;

  public static final String SERIALIZED_NAME_ISWC = "iswc";
  @SerializedName(SERIALIZED_NAME_ISWC)
  private String iswc;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_LABEL_CUSTOM = "label-custom";
  @SerializedName(SERIALIZED_NAME_LABEL_CUSTOM)
  private String labelCustom;

  public static final String SERIALIZED_NAME_LOCAL = "local";
  @SerializedName(SERIALIZED_NAME_LOCAL)
  private Boolean local;

  public static final String SERIALIZED_NAME_MEDIUM = "medium";
  @SerializedName(SERIALIZED_NAME_MEDIUM)
  private String medium;

  public static final String SERIALIZED_NAME_NEW = "new";
  @SerializedName(SERIALIZED_NAME_NEW)
  private Boolean _new;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_PERFORMERS = "performers";
  @SerializedName(SERIALIZED_NAME_PERFORMERS)
  private String performers;

  public static final String SERIALIZED_NAME_PLAYLIST_ID = "playlist_id";
  @SerializedName(SERIALIZED_NAME_PLAYLIST_ID)
  private Integer playlistId;

  public static final String SERIALIZED_NAME_RELEASE = "release";
  @SerializedName(SERIALIZED_NAME_RELEASE)
  private String release;

  public static final String SERIALIZED_NAME_RELEASE_CUSTOM = "release-custom";
  @SerializedName(SERIALIZED_NAME_RELEASE_CUSTOM)
  private String releaseCustom;

  public static final String SERIALIZED_NAME_RELEASED = "released";
  @SerializedName(SERIALIZED_NAME_RELEASED)
  private Integer released;

  public static final String SERIALIZED_NAME_REQUEST = "request";
  @SerializedName(SERIALIZED_NAME_REQUEST)
  private Boolean request;

  public static final String SERIALIZED_NAME_SONG = "song";
  @SerializedName(SERIALIZED_NAME_SONG)
  private String song;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private OffsetDateTime start;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_UPC = "upc";
  @SerializedName(SERIALIZED_NAME_UPC)
  private String upc;

  public static final String SERIALIZED_NAME_VA = "va";
  @SerializedName(SERIALIZED_NAME_VA)
  private Boolean va;

  public static final String SERIALIZED_NAME_WORK = "work";
  @SerializedName(SERIALIZED_NAME_WORK)
  private String work;

  public Spin() {
  }

  public Spin links(SpinLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public SpinLinks getLinks() {
    return links;
  }

  public void setLinks(SpinLinks links) {
    this.links = links;
  }


  public Spin artist(String artist) {
    this.artist = artist;
    return this;
  }

  /**
   * Get artist
   * @return artist
   */
  @javax.annotation.Nullable
  public String getArtist() {
    return artist;
  }

  public void setArtist(String artist) {
    this.artist = artist;
  }


  public Spin artistCustom(String artistCustom) {
    this.artistCustom = artistCustom;
    return this;
  }

  /**
   * Station-specific custom field relating to the song&#39;s artist
   * @return artistCustom
   */
  @javax.annotation.Nullable
  public String getArtistCustom() {
    return artistCustom;
  }

  public void setArtistCustom(String artistCustom) {
    this.artistCustom = artistCustom;
  }


  public Spin catalogNumber(String catalogNumber) {
    this.catalogNumber = catalogNumber;
    return this;
  }

  /**
   * Reference number in the record label&#39;s catalog
   * @return catalogNumber
   */
  @javax.annotation.Nullable
  public String getCatalogNumber() {
    return catalogNumber;
  }

  public void setCatalogNumber(String catalogNumber) {
    this.catalogNumber = catalogNumber;
  }


  public Spin classical(Boolean classical) {
    this.classical = classical;
    return this;
  }

  /**
   * Is the track&#39;s metadata schema \&quot;classical\&quot; rather than \&quot;popular\&quot;?
   * @return classical
   */
  @javax.annotation.Nullable
  public Boolean getClassical() {
    return classical;
  }

  public void setClassical(Boolean classical) {
    this.classical = classical;
  }


  public Spin composer(String composer) {
    this.composer = composer;
    return this;
  }

  /**
   * Get composer
   * @return composer
   */
  @javax.annotation.Nullable
  public String getComposer() {
    return composer;
  }

  public void setComposer(String composer) {
    this.composer = composer;
  }


  public Spin conductor(String conductor) {
    this.conductor = conductor;
    return this;
  }

  /**
   * For classical music, conducor of the ensemble
   * @return conductor
   */
  @javax.annotation.Nullable
  public String getConductor() {
    return conductor;
  }

  public void setConductor(String conductor) {
    this.conductor = conductor;
  }


  public Spin duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Duration in seconds
   * @return duration
   */
  @javax.annotation.Nullable
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public Spin end(OffsetDateTime end) {
    this.end = end;
    return this;
  }

  /**
   * UTC datetime ISO-8601
   * @return end
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEnd() {
    return end;
  }

  public void setEnd(OffsetDateTime end) {
    this.end = end;
  }


  public Spin ensemble(String ensemble) {
    this.ensemble = ensemble;
    return this;
  }

  /**
   * For classical music, orchestra, performing ensemble, choir, etc.
   * @return ensemble
   */
  @javax.annotation.Nullable
  public String getEnsemble() {
    return ensemble;
  }

  public void setEnsemble(String ensemble) {
    this.ensemble = ensemble;
  }


  public Spin genre(String genre) {
    this.genre = genre;
    return this;
  }

  /**
   * Get genre
   * @return genre
   */
  @javax.annotation.Nullable
  public String getGenre() {
    return genre;
  }

  public void setGenre(String genre) {
    this.genre = genre;
  }


  public Spin id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Spin image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Cover art
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public Spin isrc(String isrc) {
    this.isrc = isrc;
    return this;
  }

  /**
   * Get isrc
   * @return isrc
   */
  @javax.annotation.Nullable
  public String getIsrc() {
    return isrc;
  }

  public void setIsrc(String isrc) {
    this.isrc = isrc;
  }


  public Spin iswc(String iswc) {
    this.iswc = iswc;
    return this;
  }

  /**
   * Get iswc
   * @return iswc
   */
  @javax.annotation.Nullable
  public String getIswc() {
    return iswc;
  }

  public void setIswc(String iswc) {
    this.iswc = iswc;
  }


  public Spin label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Record label, i.e. publisher of the sound recording
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public Spin labelCustom(String labelCustom) {
    this.labelCustom = labelCustom;
    return this;
  }

  /**
   * Station-specific custom field relating to the record label
   * @return labelCustom
   */
  @javax.annotation.Nullable
  public String getLabelCustom() {
    return labelCustom;
  }

  public void setLabelCustom(String labelCustom) {
    this.labelCustom = labelCustom;
  }


  public Spin local(Boolean local) {
    this.local = local;
    return this;
  }

  /**
   * Is the artist local to the station?
   * @return local
   */
  @javax.annotation.Nullable
  public Boolean getLocal() {
    return local;
  }

  public void setLocal(Boolean local) {
    this.local = local;
  }


  public Spin medium(String medium) {
    this.medium = medium;
    return this;
  }

  /**
   * Media format in which the sound recording was reased
   * @return medium
   */
  @javax.annotation.Nullable
  public String getMedium() {
    return medium;
  }

  public void setMedium(String medium) {
    this.medium = medium;
  }


  public Spin _new(Boolean _new) {
    this._new = _new;
    return this;
  }

  /**
   * Is this a recent release?
   * @return _new
   */
  @javax.annotation.Nullable
  public Boolean getNew() {
    return _new;
  }

  public void setNew(Boolean _new) {
    this._new = _new;
  }


  public Spin note(String note) {
    this.note = note;
    return this;
  }

  /**
   * HTML-formatted DJ annotation of the spin, can include images etc.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public Spin performers(String performers) {
    this.performers = performers;
    return this;
  }

  /**
   * For classical music, featured performing artists, e.g. soloists
   * @return performers
   */
  @javax.annotation.Nullable
  public String getPerformers() {
    return performers;
  }

  public void setPerformers(String performers) {
    this.performers = performers;
  }


  public Spin playlistId(Integer playlistId) {
    this.playlistId = playlistId;
    return this;
  }

  /**
   * Get playlistId
   * @return playlistId
   */
  @javax.annotation.Nullable
  public Integer getPlaylistId() {
    return playlistId;
  }

  public void setPlaylistId(Integer playlistId) {
    this.playlistId = playlistId;
  }


  public Spin release(String release) {
    this.release = release;
    return this;
  }

  /**
   * Get release
   * @return release
   */
  @javax.annotation.Nullable
  public String getRelease() {
    return release;
  }

  public void setRelease(String release) {
    this.release = release;
  }


  public Spin releaseCustom(String releaseCustom) {
    this.releaseCustom = releaseCustom;
    return this;
  }

  /**
   * Station-specific custom field relating to the release
   * @return releaseCustom
   */
  @javax.annotation.Nullable
  public String getReleaseCustom() {
    return releaseCustom;
  }

  public void setReleaseCustom(String releaseCustom) {
    this.releaseCustom = releaseCustom;
  }


  public Spin released(Integer released) {
    this.released = released;
    return this;
  }

  /**
   * Year of initial release
   * @return released
   */
  @javax.annotation.Nullable
  public Integer getReleased() {
    return released;
  }

  public void setReleased(Integer released) {
    this.released = released;
  }


  public Spin request(Boolean request) {
    this.request = request;
    return this;
  }

  /**
   * Was the spin requested by a listener?
   * @return request
   */
  @javax.annotation.Nullable
  public Boolean getRequest() {
    return request;
  }

  public void setRequest(Boolean request) {
    this.request = request;
  }


  public Spin song(String song) {
    this.song = song;
    return this;
  }

  /**
   * Title of the song or track
   * @return song
   */
  @javax.annotation.Nullable
  public String getSong() {
    return song;
  }

  public void setSong(String song) {
    this.song = song;
  }


  public Spin start(OffsetDateTime start) {
    this.start = start;
    return this;
  }

  /**
   * UTC datetime ISO-8601
   * @return start
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStart() {
    return start;
  }

  public void setStart(OffsetDateTime start) {
    this.start = start;
  }


  public Spin timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Station&#39;s time zone
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public Spin upc(String upc) {
    this.upc = upc;
    return this;
  }

  /**
   * Universal Product Code of the release
   * @return upc
   */
  @javax.annotation.Nullable
  public String getUpc() {
    return upc;
  }

  public void setUpc(String upc) {
    this.upc = upc;
  }


  public Spin va(Boolean va) {
    this.va = va;
    return this;
  }

  /**
   * Is it a \&quot;Various Artists\&quot; release?
   * @return va
   */
  @javax.annotation.Nullable
  public Boolean getVa() {
    return va;
  }

  public void setVa(Boolean va) {
    this.va = va;
  }


  public Spin work(String work) {
    this.work = work;
    return this;
  }

  /**
   * For classical music, the main compositional work the track (see &#x60;song&#x60; field) belongs to
   * @return work
   */
  @javax.annotation.Nullable
  public String getWork() {
    return work;
  }

  public void setWork(String work) {
    this.work = work;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Spin spin = (Spin) o;
    return Objects.equals(this.links, spin.links) &&
        Objects.equals(this.artist, spin.artist) &&
        Objects.equals(this.artistCustom, spin.artistCustom) &&
        Objects.equals(this.catalogNumber, spin.catalogNumber) &&
        Objects.equals(this.classical, spin.classical) &&
        Objects.equals(this.composer, spin.composer) &&
        Objects.equals(this.conductor, spin.conductor) &&
        Objects.equals(this.duration, spin.duration) &&
        Objects.equals(this.end, spin.end) &&
        Objects.equals(this.ensemble, spin.ensemble) &&
        Objects.equals(this.genre, spin.genre) &&
        Objects.equals(this.id, spin.id) &&
        Objects.equals(this.image, spin.image) &&
        Objects.equals(this.isrc, spin.isrc) &&
        Objects.equals(this.iswc, spin.iswc) &&
        Objects.equals(this.label, spin.label) &&
        Objects.equals(this.labelCustom, spin.labelCustom) &&
        Objects.equals(this.local, spin.local) &&
        Objects.equals(this.medium, spin.medium) &&
        Objects.equals(this._new, spin._new) &&
        Objects.equals(this.note, spin.note) &&
        Objects.equals(this.performers, spin.performers) &&
        Objects.equals(this.playlistId, spin.playlistId) &&
        Objects.equals(this.release, spin.release) &&
        Objects.equals(this.releaseCustom, spin.releaseCustom) &&
        Objects.equals(this.released, spin.released) &&
        Objects.equals(this.request, spin.request) &&
        Objects.equals(this.song, spin.song) &&
        Objects.equals(this.start, spin.start) &&
        Objects.equals(this.timezone, spin.timezone) &&
        Objects.equals(this.upc, spin.upc) &&
        Objects.equals(this.va, spin.va) &&
        Objects.equals(this.work, spin.work);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, artist, artistCustom, catalogNumber, classical, composer, conductor, duration, end, ensemble, genre, id, image, isrc, iswc, label, labelCustom, local, medium, _new, note, performers, playlistId, release, releaseCustom, released, request, song, start, timezone, upc, va, work);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Spin {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    artist: ").append(toIndentedString(artist)).append("\n");
    sb.append("    artistCustom: ").append(toIndentedString(artistCustom)).append("\n");
    sb.append("    catalogNumber: ").append(toIndentedString(catalogNumber)).append("\n");
    sb.append("    classical: ").append(toIndentedString(classical)).append("\n");
    sb.append("    composer: ").append(toIndentedString(composer)).append("\n");
    sb.append("    conductor: ").append(toIndentedString(conductor)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    ensemble: ").append(toIndentedString(ensemble)).append("\n");
    sb.append("    genre: ").append(toIndentedString(genre)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    isrc: ").append(toIndentedString(isrc)).append("\n");
    sb.append("    iswc: ").append(toIndentedString(iswc)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    labelCustom: ").append(toIndentedString(labelCustom)).append("\n");
    sb.append("    local: ").append(toIndentedString(local)).append("\n");
    sb.append("    medium: ").append(toIndentedString(medium)).append("\n");
    sb.append("    _new: ").append(toIndentedString(_new)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    performers: ").append(toIndentedString(performers)).append("\n");
    sb.append("    playlistId: ").append(toIndentedString(playlistId)).append("\n");
    sb.append("    release: ").append(toIndentedString(release)).append("\n");
    sb.append("    releaseCustom: ").append(toIndentedString(releaseCustom)).append("\n");
    sb.append("    released: ").append(toIndentedString(released)).append("\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    song: ").append(toIndentedString(song)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    upc: ").append(toIndentedString(upc)).append("\n");
    sb.append("    va: ").append(toIndentedString(va)).append("\n");
    sb.append("    work: ").append(toIndentedString(work)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("artist");
    openapiFields.add("artist-custom");
    openapiFields.add("catalog-number");
    openapiFields.add("classical");
    openapiFields.add("composer");
    openapiFields.add("conductor");
    openapiFields.add("duration");
    openapiFields.add("end");
    openapiFields.add("ensemble");
    openapiFields.add("genre");
    openapiFields.add("id");
    openapiFields.add("image");
    openapiFields.add("isrc");
    openapiFields.add("iswc");
    openapiFields.add("label");
    openapiFields.add("label-custom");
    openapiFields.add("local");
    openapiFields.add("medium");
    openapiFields.add("new");
    openapiFields.add("note");
    openapiFields.add("performers");
    openapiFields.add("playlist_id");
    openapiFields.add("release");
    openapiFields.add("release-custom");
    openapiFields.add("released");
    openapiFields.add("request");
    openapiFields.add("song");
    openapiFields.add("start");
    openapiFields.add("timezone");
    openapiFields.add("upc");
    openapiFields.add("va");
    openapiFields.add("work");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Spin
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Spin.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Spin is not found in the empty JSON string", Spin.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Spin.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Spin` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `_links`
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        SpinLinks.validateJsonElement(jsonObj.get("_links"));
      }
      if ((jsonObj.get("artist") != null && !jsonObj.get("artist").isJsonNull()) && !jsonObj.get("artist").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artist` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artist").toString()));
      }
      if ((jsonObj.get("artist-custom") != null && !jsonObj.get("artist-custom").isJsonNull()) && !jsonObj.get("artist-custom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artist-custom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artist-custom").toString()));
      }
      if ((jsonObj.get("catalog-number") != null && !jsonObj.get("catalog-number").isJsonNull()) && !jsonObj.get("catalog-number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catalog-number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catalog-number").toString()));
      }
      if ((jsonObj.get("composer") != null && !jsonObj.get("composer").isJsonNull()) && !jsonObj.get("composer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `composer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("composer").toString()));
      }
      if ((jsonObj.get("conductor") != null && !jsonObj.get("conductor").isJsonNull()) && !jsonObj.get("conductor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conductor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conductor").toString()));
      }
      if ((jsonObj.get("ensemble") != null && !jsonObj.get("ensemble").isJsonNull()) && !jsonObj.get("ensemble").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ensemble` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ensemble").toString()));
      }
      if ((jsonObj.get("genre") != null && !jsonObj.get("genre").isJsonNull()) && !jsonObj.get("genre").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `genre` to be a primitive type in the JSON string but got `%s`", jsonObj.get("genre").toString()));
      }
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if ((jsonObj.get("isrc") != null && !jsonObj.get("isrc").isJsonNull()) && !jsonObj.get("isrc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isrc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isrc").toString()));
      }
      if ((jsonObj.get("iswc") != null && !jsonObj.get("iswc").isJsonNull()) && !jsonObj.get("iswc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iswc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iswc").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("label-custom") != null && !jsonObj.get("label-custom").isJsonNull()) && !jsonObj.get("label-custom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label-custom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label-custom").toString()));
      }
      if ((jsonObj.get("medium") != null && !jsonObj.get("medium").isJsonNull()) && !jsonObj.get("medium").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `medium` to be a primitive type in the JSON string but got `%s`", jsonObj.get("medium").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("performers") != null && !jsonObj.get("performers").isJsonNull()) && !jsonObj.get("performers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `performers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("performers").toString()));
      }
      if ((jsonObj.get("release") != null && !jsonObj.get("release").isJsonNull()) && !jsonObj.get("release").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release").toString()));
      }
      if ((jsonObj.get("release-custom") != null && !jsonObj.get("release-custom").isJsonNull()) && !jsonObj.get("release-custom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release-custom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release-custom").toString()));
      }
      if ((jsonObj.get("song") != null && !jsonObj.get("song").isJsonNull()) && !jsonObj.get("song").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `song` to be a primitive type in the JSON string but got `%s`", jsonObj.get("song").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("upc") != null && !jsonObj.get("upc").isJsonNull()) && !jsonObj.get("upc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upc").toString()));
      }
      if ((jsonObj.get("work") != null && !jsonObj.get("work").isJsonNull()) && !jsonObj.get("work").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `work` to be a primitive type in the JSON string but got `%s`", jsonObj.get("work").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Spin.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Spin' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Spin> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Spin.class));

       return (TypeAdapter<T>) new TypeAdapter<Spin>() {
           @Override
           public void write(JsonWriter out, Spin value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Spin read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Spin given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Spin
   * @throws IOException if the JSON string is invalid with respect to Spin
   */
  public static Spin fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Spin.class);
  }

  /**
   * Convert an instance of Spin to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

