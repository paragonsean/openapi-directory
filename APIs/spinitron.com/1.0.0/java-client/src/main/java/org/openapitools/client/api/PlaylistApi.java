/*
 * Spinitron v2 API
 * ## Notes  **Tutorial demo** using this API is at [https://spinitron.com/v2-api-demo/](https://spinitron.com/v2-api-demo/). For web integration using iframes and/or JavaScript instead of an API, see [https://spinitron.github.io/v2-web-integration/](https://spinitron.github.io/v2-web-integration/).  **Your API key** is found in the Spinitron web app. Log in to Spinitron and go to *Automation & API* in the *Admin* menu.  **Authenticate** by presenting your API key using either HTTP Bearer Authorization (preferred)      curl -H 'Authorization: Bearer YOURAPIKEY' 'https://spinitron.com/api/spins'  or in the query parameter `access-token` (less secure owing to webserver log files)      curl 'https://spinitron.com/api/spins?access-token=YOURAPIKEY'  **Limit** per page of results is 20 by default and miximally 200.  **Try it out** below works to generate example cURL requests but not to get responses from Spinitron. We do not accept queries sent from web browsers. Copy-paste the cURL commands and run them from your computer.  **Cache** the data you get from the API if you are using it in web or mobile integration. It's not ok to query the API on *every* page request you serve. The [demo](https://spinitron.com/v2-api-demo/) shows how easy it can be to implement a file cache.  An extension to this API with access to all stations for partner applications is available. Contact us. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Playlist;
import org.openapitools.client.model.PlaylistsGet200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlaylistApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PlaylistApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlaylistApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for playlistsGet
     * @param start The datetime starting from items must be returned. Maximum 1 hour in future.  (optional)
     * @param end The ending datetime. Maximum 1 hour in future.  (optional)
     * @param showId Filter by show (optional)
     * @param personaId Filter by persona (optional)
     * @param count Amount of items to return (optional, default to 20)
     * @param page Offset, used together with count (optional)
     * @param fields Allows to select only needed fields (optional)
     * @param expand Allows to select extra fields (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The playlists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playlistsGetCall(OffsetDateTime start, OffsetDateTime end, Integer showId, Integer personaId, Integer count, Integer page, List<String> fields, List<String> expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (showId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_id", showId));
        }

        if (personaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("persona_id", personaId));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (expand != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken", "httpBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playlistsGetValidateBeforeCall(OffsetDateTime start, OffsetDateTime end, Integer showId, Integer personaId, Integer count, Integer page, List<String> fields, List<String> expand, final ApiCallback _callback) throws ApiException {
        return playlistsGetCall(start, end, showId, personaId, count, page, fields, expand, _callback);

    }

    /**
     * Returns playlists optionally filtered by {start} and/or {end} datetimes
     * Get Playlists optionally filtered by a datetime range. Only past Playlists will be returned (with allowed tolerance equals 1 hour in future).  Ordered chronologically from newest to oldest. 
     * @param start The datetime starting from items must be returned. Maximum 1 hour in future.  (optional)
     * @param end The ending datetime. Maximum 1 hour in future.  (optional)
     * @param showId Filter by show (optional)
     * @param personaId Filter by persona (optional)
     * @param count Amount of items to return (optional, default to 20)
     * @param page Offset, used together with count (optional)
     * @param fields Allows to select only needed fields (optional)
     * @param expand Allows to select extra fields (optional)
     * @return PlaylistsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The playlists </td><td>  -  </td></tr>
     </table>
     */
    public PlaylistsGet200Response playlistsGet(OffsetDateTime start, OffsetDateTime end, Integer showId, Integer personaId, Integer count, Integer page, List<String> fields, List<String> expand) throws ApiException {
        ApiResponse<PlaylistsGet200Response> localVarResp = playlistsGetWithHttpInfo(start, end, showId, personaId, count, page, fields, expand);
        return localVarResp.getData();
    }

    /**
     * Returns playlists optionally filtered by {start} and/or {end} datetimes
     * Get Playlists optionally filtered by a datetime range. Only past Playlists will be returned (with allowed tolerance equals 1 hour in future).  Ordered chronologically from newest to oldest. 
     * @param start The datetime starting from items must be returned. Maximum 1 hour in future.  (optional)
     * @param end The ending datetime. Maximum 1 hour in future.  (optional)
     * @param showId Filter by show (optional)
     * @param personaId Filter by persona (optional)
     * @param count Amount of items to return (optional, default to 20)
     * @param page Offset, used together with count (optional)
     * @param fields Allows to select only needed fields (optional)
     * @param expand Allows to select extra fields (optional)
     * @return ApiResponse&lt;PlaylistsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The playlists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlaylistsGet200Response> playlistsGetWithHttpInfo(OffsetDateTime start, OffsetDateTime end, Integer showId, Integer personaId, Integer count, Integer page, List<String> fields, List<String> expand) throws ApiException {
        okhttp3.Call localVarCall = playlistsGetValidateBeforeCall(start, end, showId, personaId, count, page, fields, expand, null);
        Type localVarReturnType = new TypeToken<PlaylistsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns playlists optionally filtered by {start} and/or {end} datetimes (asynchronously)
     * Get Playlists optionally filtered by a datetime range. Only past Playlists will be returned (with allowed tolerance equals 1 hour in future).  Ordered chronologically from newest to oldest. 
     * @param start The datetime starting from items must be returned. Maximum 1 hour in future.  (optional)
     * @param end The ending datetime. Maximum 1 hour in future.  (optional)
     * @param showId Filter by show (optional)
     * @param personaId Filter by persona (optional)
     * @param count Amount of items to return (optional, default to 20)
     * @param page Offset, used together with count (optional)
     * @param fields Allows to select only needed fields (optional)
     * @param expand Allows to select extra fields (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The playlists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playlistsGetAsync(OffsetDateTime start, OffsetDateTime end, Integer showId, Integer personaId, Integer count, Integer page, List<String> fields, List<String> expand, final ApiCallback<PlaylistsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = playlistsGetValidateBeforeCall(start, end, showId, personaId, count, page, fields, expand, _callback);
        Type localVarReturnType = new TypeToken<PlaylistsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for playlistsIdGet
     * @param id  (required)
     * @param fields Allows to select only needed fields (optional)
     * @param expand Allows to select extra fields (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The playlist </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Playlist not found or is in the future </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playlistsIdGetCall(Integer id, List<String> fields, List<String> expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (expand != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken", "httpBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playlistsIdGetValidateBeforeCall(Integer id, List<String> fields, List<String> expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling playlistsIdGet(Async)");
        }

        return playlistsIdGetCall(id, fields, expand, _callback);

    }

    /**
     * Get a Playlist by id
     * The response object represents the playlist specified by {id}.  Status 404 is returned if a playlist with {id} does not exist or if it does but starts in the future (with allowed tolerance equals 1 hour in future). 
     * @param id  (required)
     * @param fields Allows to select only needed fields (optional)
     * @param expand Allows to select extra fields (optional)
     * @return Playlist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The playlist </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Playlist not found or is in the future </td><td>  -  </td></tr>
     </table>
     */
    public Playlist playlistsIdGet(Integer id, List<String> fields, List<String> expand) throws ApiException {
        ApiResponse<Playlist> localVarResp = playlistsIdGetWithHttpInfo(id, fields, expand);
        return localVarResp.getData();
    }

    /**
     * Get a Playlist by id
     * The response object represents the playlist specified by {id}.  Status 404 is returned if a playlist with {id} does not exist or if it does but starts in the future (with allowed tolerance equals 1 hour in future). 
     * @param id  (required)
     * @param fields Allows to select only needed fields (optional)
     * @param expand Allows to select extra fields (optional)
     * @return ApiResponse&lt;Playlist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The playlist </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Playlist not found or is in the future </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Playlist> playlistsIdGetWithHttpInfo(Integer id, List<String> fields, List<String> expand) throws ApiException {
        okhttp3.Call localVarCall = playlistsIdGetValidateBeforeCall(id, fields, expand, null);
        Type localVarReturnType = new TypeToken<Playlist>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Playlist by id (asynchronously)
     * The response object represents the playlist specified by {id}.  Status 404 is returned if a playlist with {id} does not exist or if it does but starts in the future (with allowed tolerance equals 1 hour in future). 
     * @param id  (required)
     * @param fields Allows to select only needed fields (optional)
     * @param expand Allows to select extra fields (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The playlist </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Playlist not found or is in the future </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playlistsIdGetAsync(Integer id, List<String> fields, List<String> expand, final ApiCallback<Playlist> _callback) throws ApiException {

        okhttp3.Call localVarCall = playlistsIdGetValidateBeforeCall(id, fields, expand, _callback);
        Type localVarReturnType = new TypeToken<Playlist>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
