/*
 * Spinitron v2 API
 * ## Notes  **Tutorial demo** using this API is at [https://spinitron.com/v2-api-demo/](https://spinitron.com/v2-api-demo/). For web integration using iframes and/or JavaScript instead of an API, see [https://spinitron.github.io/v2-web-integration/](https://spinitron.github.io/v2-web-integration/).  **Your API key** is found in the Spinitron web app. Log in to Spinitron and go to *Automation & API* in the *Admin* menu.  **Authenticate** by presenting your API key using either HTTP Bearer Authorization (preferred)      curl -H 'Authorization: Bearer YOURAPIKEY' 'https://spinitron.com/api/spins'  or in the query parameter `access-token` (less secure owing to webserver log files)      curl 'https://spinitron.com/api/spins?access-token=YOURAPIKEY'  **Limit** per page of results is 20 by default and miximally 200.  **Try it out** below works to generate example cURL requests but not to get responses from Spinitron. We do not accept queries sent from web browsers. Copy-paste the cURL commands and run them from your computer.  **Cache** the data you get from the API if you are using it in web or mobile integration. It's not ok to query the API on *every* page request you serve. The [demo](https://spinitron.com/v2-api-demo/) shows how easy it can be to implement a file cache.  An extension to this API with access to all stations for partner applications is available. Contact us. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Spin;
import org.openapitools.client.model.SpinsGet200Response;
import org.openapitools.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SpinApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SpinApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SpinApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for spinsGet
     * @param start The datetime starting from items must be returned.  (optional)
     * @param end The ending datetime.  (optional)
     * @param playlistId Filter by playlist (optional)
     * @param showId Filter by show (optional)
     * @param count Amount of items to return (optional, default to 20)
     * @param page Offset, used together with count (optional)
     * @param fields Allows to select only needed fields (optional)
     * @param expand Allows to select extra fields (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The spins </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spinsGetCall(OffsetDateTime start, OffsetDateTime end, Integer playlistId, Integer showId, Integer count, Integer page, List<String> fields, List<String> expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spins";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (playlistId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("playlist_id", playlistId));
        }

        if (showId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_id", showId));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (expand != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken", "httpBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call spinsGetValidateBeforeCall(OffsetDateTime start, OffsetDateTime end, Integer playlistId, Integer showId, Integer count, Integer page, List<String> fields, List<String> expand, final ApiCallback _callback) throws ApiException {
        return spinsGetCall(start, end, playlistId, showId, count, page, fields, expand, _callback);

    }

    /**
     * Returns spins optionally filtered by {start} and/or {end} datetimes
     * Get Spins optionally filtered by a datetime range. Only past Spins will be returned. 
     * @param start The datetime starting from items must be returned.  (optional)
     * @param end The ending datetime.  (optional)
     * @param playlistId Filter by playlist (optional)
     * @param showId Filter by show (optional)
     * @param count Amount of items to return (optional, default to 20)
     * @param page Offset, used together with count (optional)
     * @param fields Allows to select only needed fields (optional)
     * @param expand Allows to select extra fields (optional)
     * @return SpinsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The spins </td><td>  -  </td></tr>
     </table>
     */
    public SpinsGet200Response spinsGet(OffsetDateTime start, OffsetDateTime end, Integer playlistId, Integer showId, Integer count, Integer page, List<String> fields, List<String> expand) throws ApiException {
        ApiResponse<SpinsGet200Response> localVarResp = spinsGetWithHttpInfo(start, end, playlistId, showId, count, page, fields, expand);
        return localVarResp.getData();
    }

    /**
     * Returns spins optionally filtered by {start} and/or {end} datetimes
     * Get Spins optionally filtered by a datetime range. Only past Spins will be returned. 
     * @param start The datetime starting from items must be returned.  (optional)
     * @param end The ending datetime.  (optional)
     * @param playlistId Filter by playlist (optional)
     * @param showId Filter by show (optional)
     * @param count Amount of items to return (optional, default to 20)
     * @param page Offset, used together with count (optional)
     * @param fields Allows to select only needed fields (optional)
     * @param expand Allows to select extra fields (optional)
     * @return ApiResponse&lt;SpinsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The spins </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SpinsGet200Response> spinsGetWithHttpInfo(OffsetDateTime start, OffsetDateTime end, Integer playlistId, Integer showId, Integer count, Integer page, List<String> fields, List<String> expand) throws ApiException {
        okhttp3.Call localVarCall = spinsGetValidateBeforeCall(start, end, playlistId, showId, count, page, fields, expand, null);
        Type localVarReturnType = new TypeToken<SpinsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns spins optionally filtered by {start} and/or {end} datetimes (asynchronously)
     * Get Spins optionally filtered by a datetime range. Only past Spins will be returned. 
     * @param start The datetime starting from items must be returned.  (optional)
     * @param end The ending datetime.  (optional)
     * @param playlistId Filter by playlist (optional)
     * @param showId Filter by show (optional)
     * @param count Amount of items to return (optional, default to 20)
     * @param page Offset, used together with count (optional)
     * @param fields Allows to select only needed fields (optional)
     * @param expand Allows to select extra fields (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The spins </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spinsGetAsync(OffsetDateTime start, OffsetDateTime end, Integer playlistId, Integer showId, Integer count, Integer page, List<String> fields, List<String> expand, final ApiCallback<SpinsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = spinsGetValidateBeforeCall(start, end, playlistId, showId, count, page, fields, expand, _callback);
        Type localVarReturnType = new TypeToken<SpinsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for spinsIdGet
     * @param id  (required)
     * @param fields Allows to select only needed fields (optional)
     * @param expand Allows to select extra fields (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The spin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Spin not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spinsIdGetCall(Integer id, List<String> fields, List<String> expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spins/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (expand != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken", "httpBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call spinsIdGetValidateBeforeCall(Integer id, List<String> fields, List<String> expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling spinsIdGet(Async)");
        }

        return spinsIdGetCall(id, fields, expand, _callback);

    }

    /**
     * Get a Spin by id
     * 
     * @param id  (required)
     * @param fields Allows to select only needed fields (optional)
     * @param expand Allows to select extra fields (optional)
     * @return Spin
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The spin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Spin not found </td><td>  -  </td></tr>
     </table>
     */
    public Spin spinsIdGet(Integer id, List<String> fields, List<String> expand) throws ApiException {
        ApiResponse<Spin> localVarResp = spinsIdGetWithHttpInfo(id, fields, expand);
        return localVarResp.getData();
    }

    /**
     * Get a Spin by id
     * 
     * @param id  (required)
     * @param fields Allows to select only needed fields (optional)
     * @param expand Allows to select extra fields (optional)
     * @return ApiResponse&lt;Spin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The spin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Spin not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Spin> spinsIdGetWithHttpInfo(Integer id, List<String> fields, List<String> expand) throws ApiException {
        okhttp3.Call localVarCall = spinsIdGetValidateBeforeCall(id, fields, expand, null);
        Type localVarReturnType = new TypeToken<Spin>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Spin by id (asynchronously)
     * 
     * @param id  (required)
     * @param fields Allows to select only needed fields (optional)
     * @param expand Allows to select extra fields (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The spin </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Spin not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spinsIdGetAsync(Integer id, List<String> fields, List<String> expand, final ApiCallback<Spin> _callback) throws ApiException {

        okhttp3.Call localVarCall = spinsIdGetValidateBeforeCall(id, fields, expand, _callback);
        Type localVarReturnType = new TypeToken<Spin>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for spinsPost
     * @param artist  (required)
     * @param song  (required)
     * @param composer  (optional)
     * @param duration  (optional)
     * @param genre  (optional)
     * @param isrc  (optional)
     * @param label  (optional)
     * @param live Only when automation params are configured with the \\\&quot;Pass through\\\&quot; mode. Enables \\\&quot;live assist\\\&quot; mode. Default mode is \\\&quot;full automation\\\&quot;.  (optional)
     * @param release  (optional)
     * @param start  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The new created Spin. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Failed to create the object for unknown reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spinsPostCall(String artist, String song, String composer, Integer duration, String genre, String isrc, String label, Boolean live, String release, OffsetDateTime start, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spins";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (artist != null) {
            localVarFormParams.put("artist", artist);
        }

        if (composer != null) {
            localVarFormParams.put("composer", composer);
        }

        if (duration != null) {
            localVarFormParams.put("duration", duration);
        }

        if (genre != null) {
            localVarFormParams.put("genre", genre);
        }

        if (isrc != null) {
            localVarFormParams.put("isrc", isrc);
        }

        if (label != null) {
            localVarFormParams.put("label", label);
        }

        if (live != null) {
            localVarFormParams.put("live", live);
        }

        if (release != null) {
            localVarFormParams.put("release", release);
        }

        if (song != null) {
            localVarFormParams.put("song", song);
        }

        if (start != null) {
            localVarFormParams.put("start", start);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken", "httpBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call spinsPostValidateBeforeCall(String artist, String song, String composer, Integer duration, String genre, String isrc, String label, Boolean live, String release, OffsetDateTime start, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'artist' is set
        if (artist == null) {
            throw new ApiException("Missing the required parameter 'artist' when calling spinsPost(Async)");
        }

        // verify the required parameter 'song' is set
        if (song == null) {
            throw new ApiException("Missing the required parameter 'song' when calling spinsPost(Async)");
        }

        return spinsPostCall(artist, song, composer, duration, genre, isrc, label, live, release, start, _callback);

    }

    /**
     * Log a Spin
     * An endpoint for automation systems to log spins into the spin table.
     * @param artist  (required)
     * @param song  (required)
     * @param composer  (optional)
     * @param duration  (optional)
     * @param genre  (optional)
     * @param isrc  (optional)
     * @param label  (optional)
     * @param live Only when automation params are configured with the \\\&quot;Pass through\\\&quot; mode. Enables \\\&quot;live assist\\\&quot; mode. Default mode is \\\&quot;full automation\\\&quot;.  (optional)
     * @param release  (optional)
     * @param start  (optional)
     * @return Spin
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The new created Spin. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Failed to create the object for unknown reason. </td><td>  -  </td></tr>
     </table>
     */
    public Spin spinsPost(String artist, String song, String composer, Integer duration, String genre, String isrc, String label, Boolean live, String release, OffsetDateTime start) throws ApiException {
        ApiResponse<Spin> localVarResp = spinsPostWithHttpInfo(artist, song, composer, duration, genre, isrc, label, live, release, start);
        return localVarResp.getData();
    }

    /**
     * Log a Spin
     * An endpoint for automation systems to log spins into the spin table.
     * @param artist  (required)
     * @param song  (required)
     * @param composer  (optional)
     * @param duration  (optional)
     * @param genre  (optional)
     * @param isrc  (optional)
     * @param label  (optional)
     * @param live Only when automation params are configured with the \\\&quot;Pass through\\\&quot; mode. Enables \\\&quot;live assist\\\&quot; mode. Default mode is \\\&quot;full automation\\\&quot;.  (optional)
     * @param release  (optional)
     * @param start  (optional)
     * @return ApiResponse&lt;Spin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The new created Spin. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Failed to create the object for unknown reason. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Spin> spinsPostWithHttpInfo(String artist, String song, String composer, Integer duration, String genre, String isrc, String label, Boolean live, String release, OffsetDateTime start) throws ApiException {
        okhttp3.Call localVarCall = spinsPostValidateBeforeCall(artist, song, composer, duration, genre, isrc, label, live, release, start, null);
        Type localVarReturnType = new TypeToken<Spin>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Log a Spin (asynchronously)
     * An endpoint for automation systems to log spins into the spin table.
     * @param artist  (required)
     * @param song  (required)
     * @param composer  (optional)
     * @param duration  (optional)
     * @param genre  (optional)
     * @param isrc  (optional)
     * @param label  (optional)
     * @param live Only when automation params are configured with the \\\&quot;Pass through\\\&quot; mode. Enables \\\&quot;live assist\\\&quot; mode. Default mode is \\\&quot;full automation\\\&quot;.  (optional)
     * @param release  (optional)
     * @param start  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The new created Spin. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Failed to create the object for unknown reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spinsPostAsync(String artist, String song, String composer, Integer duration, String genre, String isrc, String label, Boolean live, String release, OffsetDateTime start, final ApiCallback<Spin> _callback) throws ApiException {

        okhttp3.Call localVarCall = spinsPostValidateBeforeCall(artist, song, composer, duration, genre, isrc, label, live, release, start, _callback);
        Type localVarReturnType = new TypeToken<Spin>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
