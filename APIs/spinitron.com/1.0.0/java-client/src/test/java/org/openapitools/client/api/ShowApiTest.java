/*
 * Spinitron v2 API
 * ## Notes  **Tutorial demo** using this API is at [https://spinitron.com/v2-api-demo/](https://spinitron.com/v2-api-demo/). For web integration using iframes and/or JavaScript instead of an API, see [https://spinitron.github.io/v2-web-integration/](https://spinitron.github.io/v2-web-integration/).  **Your API key** is found in the Spinitron web app. Log in to Spinitron and go to *Automation & API* in the *Admin* menu.  **Authenticate** by presenting your API key using either HTTP Bearer Authorization (preferred)      curl -H 'Authorization: Bearer YOURAPIKEY' 'https://spinitron.com/api/spins'  or in the query parameter `access-token` (less secure owing to webserver log files)      curl 'https://spinitron.com/api/spins?access-token=YOURAPIKEY'  **Limit** per page of results is 20 by default and miximally 200.  **Try it out** below works to generate example cURL requests but not to get responses from Spinitron. We do not accept queries sent from web browsers. Copy-paste the cURL commands and run them from your computer.  **Cache** the data you get from the API if you are using it in web or mobile integration. It's not ok to query the API on *every* page request you serve. The [demo](https://spinitron.com/v2-api-demo/) shows how easy it can be to implement a file cache.  An extension to this API with access to all stations for partner applications is available. Contact us. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Show;
import org.openapitools.client.model.ShowsGet200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ShowApi
 */
@Disabled
public class ShowApiTest {

    private final ShowApi api = new ShowApi();

    /**
     * Returns scheduled shows optionally filtered by {start} and/or {end} datetimes
     *
     * **Terminology**: Spinitron defines a *show* as a radio program. A show can have one or more *schedules*, each of which may specify either an *occurence* or a *repetition*, which represents a set of occurences. Thus scheduled shows have occurences that, for example, may be displayed in a calendar.  In the response, &#x60;items&#x60; is an array of objects representing occurences of scheduled shows.  You may optionally filter &#x60;items&#x60; to a datetime *range* by including in the request {start} and/or {end} parameters, both of which must be no more than one hour in the past. An occurence starting at {end} is included in the reponse.  &#x60;itmes&#x60; can include occurences that begin *or* end within the filter range. A show that goes on air before {start} appears in &#x60;items&#x60; if it ends *after* but not *at* {start}. An occurence starting at or before {end} is included.  If the request omits the {start} parameter, the server sets its value to the current time so that the filter range&#39;s start is always defined. If the request specifies {end} then the requested range is *bounded*, otherwise it is *unbounded*.  For a bounded request, &#x60;items&#x60; includes *every* occurence of all shows occuring in the range. The only difference between objects in &#x60;items&#x60; representing a given show will be the &#x60;start&#x60; field value.  For an unbounded request, &#x60;items&#x60; includes *only one* occurence per show, specifically, the next occurrence after {start} of all shows occuring after {start}.  Use an unbounded request to get a straight list all shows. Use a bounded request to get a calendar/agenda of shows expanded into occurrences by thir shedules and repetitions.  Objects in &#x60;items&#x60; are ordered first by &#x60;datetime&#x60; and then by &#x60;id&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void showsGetTest() throws ApiException {
        OffsetDateTime start = null;
        OffsetDateTime end = null;
        Integer count = null;
        Integer page = null;
        List<String> fields = null;
        List<String> expand = null;
        ShowsGet200Response response = api.showsGet(start, end, count, page, fields, expand);
        // TODO: test validations
    }

    /**
     * Get a Show by id
     *
     * The response object represents the next occurence of the show specified by {id}.  Status 404 is returned if a show with {id} does not exist or if it does but all its scheduled occurences elapsed in the past. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void showsIdGetTest() throws ApiException {
        Integer id = null;
        List<String> fields = null;
        List<String> expand = null;
        Show response = api.showsIdGet(id, fields, expand);
        // TODO: test validations
    }

}
