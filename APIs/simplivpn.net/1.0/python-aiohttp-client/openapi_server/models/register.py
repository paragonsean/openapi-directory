# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Register(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _await: bool=None, password: str=None, username: str=None):
        """Register - a model defined in OpenAPI

        :param _await: The _await of this Register.
        :param password: The password of this Register.
        :param username: The username of this Register.
        """
        self.openapi_types = {
            '_await': bool,
            'password': str,
            'username': str
        }

        self.attribute_map = {
            '_await': 'await',
            'password': 'password',
            'username': 'username'
        }

        self.__await = _await
        self._password = password
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Register':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Register of this Register.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _await(self):
        """Gets the _await of this Register.


        :return: The _await of this Register.
        :rtype: bool
        """
        return self.__await

    @_await.setter
    def _await(self, _await):
        """Sets the _await of this Register.


        :param _await: The _await of this Register.
        :type _await: bool
        """

        self.__await = _await

    @property
    def password(self):
        """Gets the password of this Register.


        :return: The password of this Register.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Register.


        :param password: The password of this Register.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")
        if password is not None and len(password) < 1:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `1`")

        self._password = password

    @property
    def username(self):
        """Gets the username of this Register.


        :return: The username of this Register.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Register.


        :param username: The username of this Register.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")
        if username is not None and len(username) < 1:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")

        self._username = username
