/*
 * SimpliVPNAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DisableUser;
import org.openapitools.client.model.EnableUser;
import org.openapitools.client.model.Register;
import org.openapitools.client.model.UserLogin;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SimpliVpnapiApi
 */
@Disabled
public class SimpliVpnapiApiTest {

    private final SimpliVpnapiApi api = new SimpliVpnapiApi();

    /**
     * DisableUser
     *
     * This route allows you to disable a user&#39;s vpn access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableUserTest() throws ApiException {
        DisableUser disableUser = null;
        api.disableUser(disableUser);
        // TODO: test validations
    }

    /**
     * EnableUser
     *
     * This route allows you to enable a user&#39;s vpn access. This route can only be called using your user&#39;s Bearer Auth token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableUserTest() throws ApiException {
        EnableUser enableUser = null;
        api.enableUser(enableUser);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServerSummariesTest() throws ApiException {
        api.getServerSummaries();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServersTest() throws ApiException {
        api.getServers();
        // TODO: test validations
    }

    /**
     * Login
     *
     * This route allows you to login a user. The response will give you a Bearer auth token to use with all rquests pertaining to the user. This token expires in 7 days, so for every request you should check if you get an unauthorized responsve and re-validate the login if needed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loginTest() throws ApiException {
        UserLogin userLogin = null;
        api.login(userLogin);
        // TODO: test validations
    }

    /**
     * Register
     *
     * This route allows VPN Admin user&#39;s with an api key to register a vpn user account. This route can only be called using your api key supplied to you from SimpliVPN. Before calling this you should use your api key to call the /UsernameAvailable route to make sure the username you want is available first. All subsequent user requests following can be done using the user&#39;s api token, their token&#39;s expire every 7 days, so you should occasionally check them and if you get unauthorized, refresh their token by calling /login route. This route will also auto-enable a new user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerTest() throws ApiException {
        Register register = null;
        api.register(register);
        // TODO: test validations
    }

    /**
     * UsernameAvailable
     *
     * This route allows VPN Admin user&#39;s to check if a specific username is available before registering an account username. This route can only be called using your api key supplied to you from SimpliVPN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usernameAvailableTest() throws ApiException {
        EnableUser enableUser = null;
        api.usernameAvailable(enableUser);
        // TODO: test validations
    }

}
