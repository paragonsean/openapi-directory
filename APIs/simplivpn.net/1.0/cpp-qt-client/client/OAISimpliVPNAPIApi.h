/**
 * SimpliVPNAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISimpliVPNAPIApi_H
#define OAI_OAISimpliVPNAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDisableUser.h"
#include "OAIEnableUser.h"
#include "OAIRegister.h"
#include "OAIUserLogin.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISimpliVPNAPIApi : public QObject {
    Q_OBJECT

public:
    OAISimpliVPNAPIApi(const int timeOut = 0);
    ~OAISimpliVPNAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_disable_user OAIDisableUser [required]
    */
    virtual void disableUser(const OAIDisableUser &oai_disable_user);

    /**
    * @param[in]  oai_enable_user OAIEnableUser [required]
    */
    virtual void enableUser(const OAIEnableUser &oai_enable_user);


    virtual void getServerSummaries();


    virtual void getServers();

    /**
    * @param[in]  oai_user_login OAIUserLogin [required]
    */
    virtual void login(const OAIUserLogin &oai_user_login);

    /**
    * @param[in]  oai_register OAIRegister [required]
    */
    virtual void r_register(const OAIRegister &oai_register);

    /**
    * @param[in]  oai_enable_user OAIEnableUser [required]
    */
    virtual void usernameAvailable(const OAIEnableUser &oai_enable_user);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void disableUserCallback(OAIHttpRequestWorker *worker);
    void enableUserCallback(OAIHttpRequestWorker *worker);
    void getServerSummariesCallback(OAIHttpRequestWorker *worker);
    void getServersCallback(OAIHttpRequestWorker *worker);
    void loginCallback(OAIHttpRequestWorker *worker);
    void r_registerCallback(OAIHttpRequestWorker *worker);
    void usernameAvailableCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void disableUserSignal();
    void enableUserSignal();
    void getServerSummariesSignal();
    void getServersSignal();
    void loginSignal();
    void r_registerSignal();
    void usernameAvailableSignal();


    void disableUserSignalFull(OAIHttpRequestWorker *worker);
    void enableUserSignalFull(OAIHttpRequestWorker *worker);
    void getServerSummariesSignalFull(OAIHttpRequestWorker *worker);
    void getServersSignalFull(OAIHttpRequestWorker *worker);
    void loginSignalFull(OAIHttpRequestWorker *worker);
    void r_registerSignalFull(OAIHttpRequestWorker *worker);
    void usernameAvailableSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use disableUserSignalError() instead")
    void disableUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disableUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableUserSignalError() instead")
    void enableUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enableUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServerSummariesSignalError() instead")
    void getServerSummariesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getServerSummariesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServersSignalError() instead")
    void getServersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getServersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginSignalError() instead")
    void loginSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void loginSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use r_registerSignalError() instead")
    void r_registerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void r_registerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usernameAvailableSignalError() instead")
    void usernameAvailableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usernameAvailableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use disableUserSignalErrorFull() instead")
    void disableUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableUserSignalErrorFull() instead")
    void enableUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServerSummariesSignalErrorFull() instead")
    void getServerSummariesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServerSummariesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServersSignalErrorFull() instead")
    void getServersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginSignalErrorFull() instead")
    void loginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use r_registerSignalErrorFull() instead")
    void r_registerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void r_registerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usernameAvailableSignalErrorFull() instead")
    void usernameAvailableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usernameAvailableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
