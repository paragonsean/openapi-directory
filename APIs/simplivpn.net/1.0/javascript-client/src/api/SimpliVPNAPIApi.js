/**
 * SimpliVPNAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DisableUser from '../model/DisableUser';
import EnableUser from '../model/EnableUser';
import Register from '../model/Register';
import UserLogin from '../model/UserLogin';

/**
* SimpliVPNAPI service.
* @module api/SimpliVPNAPIApi
* @version 1.0
*/
export default class SimpliVPNAPIApi {

    /**
    * Constructs a new SimpliVPNAPIApi. 
    * @alias module:api/SimpliVPNAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the disableUser operation.
     * @callback module:api/SimpliVPNAPIApi~disableUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DisableUser
     * This route allows you to disable a user's vpn access.
     * @param {module:model/DisableUser} disableUser 
     * @param {module:api/SimpliVPNAPIApi~disableUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disableUser(disableUser, callback) {
      let postBody = disableUser;
      // verify the required parameter 'disableUser' is set
      if (disableUser === undefined || disableUser === null) {
        throw new Error("Missing the required parameter 'disableUser' when calling disableUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/disable-user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableUser operation.
     * @callback module:api/SimpliVPNAPIApi~enableUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EnableUser
     * This route allows you to enable a user's vpn access. This route can only be called using your user's Bearer Auth token.
     * @param {module:model/EnableUser} enableUser 
     * @param {module:api/SimpliVPNAPIApi~enableUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enableUser(enableUser, callback) {
      let postBody = enableUser;
      // verify the required parameter 'enableUser' is set
      if (enableUser === undefined || enableUser === null) {
        throw new Error("Missing the required parameter 'enableUser' when calling enableUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/enable-user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServerSummaries operation.
     * @callback module:api/SimpliVPNAPIApi~getServerSummariesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SimpliVPNAPIApi~getServerSummariesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getServerSummaries(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/server-summaries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServers operation.
     * @callback module:api/SimpliVPNAPIApi~getServersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SimpliVPNAPIApi~getServersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getServers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/servers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/SimpliVPNAPIApi~loginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login
     * This route allows you to login a user. The response will give you a Bearer auth token to use with all rquests pertaining to the user. This token expires in 7 days, so for every request you should check if you get an unauthorized responsve and re-validate the login if needed.
     * @param {module:model/UserLogin} userLogin 
     * @param {module:api/SimpliVPNAPIApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    login(userLogin, callback) {
      let postBody = userLogin;
      // verify the required parameter 'userLogin' is set
      if (userLogin === undefined || userLogin === null) {
        throw new Error("Missing the required parameter 'userLogin' when calling login");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the register operation.
     * @callback module:api/SimpliVPNAPIApi~registerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register
     * This route allows VPN Admin user's with an api key to register a vpn user account. This route can only be called using your api key supplied to you from SimpliVPN. Before calling this you should use your api key to call the /UsernameAvailable route to make sure the username you want is available first. All subsequent user requests following can be done using the user's api token, their token's expire every 7 days, so you should occasionally check them and if you get unauthorized, refresh their token by calling /login route. This route will also auto-enable a new user.
     * @param {module:model/Register} register 
     * @param {module:api/SimpliVPNAPIApi~registerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    register(register, callback) {
      let postBody = register;
      // verify the required parameter 'register' is set
      if (register === undefined || register === null) {
        throw new Error("Missing the required parameter 'register' when calling register");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usernameAvailable operation.
     * @callback module:api/SimpliVPNAPIApi~usernameAvailableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UsernameAvailable
     * This route allows VPN Admin user's to check if a specific username is available before registering an account username. This route can only be called using your api key supplied to you from SimpliVPN.
     * @param {module:model/EnableUser} enableUser 
     * @param {module:api/SimpliVPNAPIApi~usernameAvailableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usernameAvailable(enableUser, callback) {
      let postBody = enableUser;
      // verify the required parameter 'enableUser' is set
      if (enableUser === undefined || enableUser === null) {
        throw new Error("Missing the required parameter 'enableUser' when calling usernameAvailable");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/username-available', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
