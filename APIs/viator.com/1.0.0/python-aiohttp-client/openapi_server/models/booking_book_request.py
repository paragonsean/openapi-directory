# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.booking_book_request_booker import BookingBookRequestBooker
from openapi_server.models.booking_book_request_items_inner import BookingBookRequestItemsInner
from openapi_server.models.booking_book_request_partner_detail import BookingBookRequestPartnerDetail
from openapi_server import util


class BookingBookRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, booker: BookingBookRequestBooker=None, currency_code: str=None, demo: bool=None, items: List[BookingBookRequestItemsInner]=None, partner_detail: BookingBookRequestPartnerDetail=None):
        """BookingBookRequest - a model defined in OpenAPI

        :param booker: The booker of this BookingBookRequest.
        :param currency_code: The currency_code of this BookingBookRequest.
        :param demo: The demo of this BookingBookRequest.
        :param items: The items of this BookingBookRequest.
        :param partner_detail: The partner_detail of this BookingBookRequest.
        """
        self.openapi_types = {
            'booker': BookingBookRequestBooker,
            'currency_code': str,
            'demo': bool,
            'items': List[BookingBookRequestItemsInner],
            'partner_detail': BookingBookRequestPartnerDetail
        }

        self.attribute_map = {
            'booker': 'booker',
            'currency_code': 'currencyCode',
            'demo': 'demo',
            'items': 'items',
            'partner_detail': 'partnerDetail'
        }

        self._booker = booker
        self._currency_code = currency_code
        self._demo = demo
        self._items = items
        self._partner_detail = partner_detail

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookingBookRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The bookingBook_request of this BookingBookRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def booker(self):
        """Gets the booker of this BookingBookRequest.


        :return: The booker of this BookingBookRequest.
        :rtype: BookingBookRequestBooker
        """
        return self._booker

    @booker.setter
    def booker(self, booker):
        """Sets the booker of this BookingBookRequest.


        :param booker: The booker of this BookingBookRequest.
        :type booker: BookingBookRequestBooker
        """

        self._booker = booker

    @property
    def currency_code(self):
        """Gets the currency_code of this BookingBookRequest.

        **currency code** for the currency the booking will be submitted in (you will be billed in this currency)

        :return: The currency_code of this BookingBookRequest.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this BookingBookRequest.

        **currency code** for the currency the booking will be submitted in (you will be billed in this currency)

        :param currency_code: The currency_code of this BookingBookRequest.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def demo(self):
        """Gets the demo of this BookingBookRequest.

        **specifier**: `true` if this is a *demo* booking only (demos do not send any notifications, are automatically confirmed and OnRequest products become freesale products. Default value is true. Production must have `demo` set to `false`.

        :return: The demo of this BookingBookRequest.
        :rtype: bool
        """
        return self._demo

    @demo.setter
    def demo(self, demo):
        """Sets the demo of this BookingBookRequest.

        **specifier**: `true` if this is a *demo* booking only (demos do not send any notifications, are automatically confirmed and OnRequest products become freesale products. Default value is true. Production must have `demo` set to `false`.

        :param demo: The demo of this BookingBookRequest.
        :type demo: bool
        """

        self._demo = demo

    @property
    def items(self):
        """Gets the items of this BookingBookRequest.

        **array** of items to be booked

        :return: The items of this BookingBookRequest.
        :rtype: List[BookingBookRequestItemsInner]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this BookingBookRequest.

        **array** of items to be booked

        :param items: The items of this BookingBookRequest.
        :type items: List[BookingBookRequestItemsInner]
        """

        self._items = items

    @property
    def partner_detail(self):
        """Gets the partner_detail of this BookingBookRequest.


        :return: The partner_detail of this BookingBookRequest.
        :rtype: BookingBookRequestPartnerDetail
        """
        return self._partner_detail

    @partner_detail.setter
    def partner_detail(self, partner_detail):
        """Sets the partner_detail of this BookingBookRequest.


        :param partner_detail: The partner_detail of this BookingBookRequest.
        :type partner_detail: BookingBookRequestPartnerDetail
        """

        self._partner_detail = partner_detail
