# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Product200ResponseAllOfDataBookingQuestionsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, question_id: int=None, required: bool=None, sort_order: int=None, string_question_id: str=None, sub_title: str=None, title: str=None):
        """Product200ResponseAllOfDataBookingQuestionsInner - a model defined in OpenAPI

        :param message: The message of this Product200ResponseAllOfDataBookingQuestionsInner.
        :param question_id: The question_id of this Product200ResponseAllOfDataBookingQuestionsInner.
        :param required: The required of this Product200ResponseAllOfDataBookingQuestionsInner.
        :param sort_order: The sort_order of this Product200ResponseAllOfDataBookingQuestionsInner.
        :param string_question_id: The string_question_id of this Product200ResponseAllOfDataBookingQuestionsInner.
        :param sub_title: The sub_title of this Product200ResponseAllOfDataBookingQuestionsInner.
        :param title: The title of this Product200ResponseAllOfDataBookingQuestionsInner.
        """
        self.openapi_types = {
            'message': str,
            'question_id': int,
            'required': bool,
            'sort_order': int,
            'string_question_id': str,
            'sub_title': str,
            'title': str
        }

        self.attribute_map = {
            'message': 'message',
            'question_id': 'questionId',
            'required': 'required',
            'sort_order': 'sortOrder',
            'string_question_id': 'stringQuestionId',
            'sub_title': 'subTitle',
            'title': 'title'
        }

        self._message = message
        self._question_id = question_id
        self._required = required
        self._sort_order = sort_order
        self._string_question_id = string_question_id
        self._sub_title = sub_title
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Product200ResponseAllOfDataBookingQuestionsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The product_200_response_allOf_data_bookingQuestions_inner of this Product200ResponseAllOfDataBookingQuestionsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this Product200ResponseAllOfDataBookingQuestionsInner.

        **natural-language instructions** for *this* booking question - **note**: see [Booking questions](#section/Appendices/Booking-questions) for more information 

        :return: The message of this Product200ResponseAllOfDataBookingQuestionsInner.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Product200ResponseAllOfDataBookingQuestionsInner.

        **natural-language instructions** for *this* booking question - **note**: see [Booking questions](#section/Appendices/Booking-questions) for more information 

        :param message: The message of this Product200ResponseAllOfDataBookingQuestionsInner.
        :type message: str
        """

        self._message = message

    @property
    def question_id(self):
        """Gets the question_id of this Product200ResponseAllOfDataBookingQuestionsInner.

        **unique numeric identifier** for *this* booking question - **note**: see [Booking questions](#section/Appendices/Booking-questions) for more information 

        :return: The question_id of this Product200ResponseAllOfDataBookingQuestionsInner.
        :rtype: int
        """
        return self._question_id

    @question_id.setter
    def question_id(self, question_id):
        """Sets the question_id of this Product200ResponseAllOfDataBookingQuestionsInner.

        **unique numeric identifier** for *this* booking question - **note**: see [Booking questions](#section/Appendices/Booking-questions) for more information 

        :param question_id: The question_id of this Product200ResponseAllOfDataBookingQuestionsInner.
        :type question_id: int
        """

        self._question_id = question_id

    @property
    def required(self):
        """Gets the required of this Product200ResponseAllOfDataBookingQuestionsInner.

        **boolean indicator**: - `true` if the answer to *this* booking question &lt;u&gt;must&lt;/u&gt; be included in the request object to the b service when booking *this* product - **note**: see [Booking questions](#section/Appendices/Booking-questions) for more information 

        :return: The required of this Product200ResponseAllOfDataBookingQuestionsInner.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this Product200ResponseAllOfDataBookingQuestionsInner.

        **boolean indicator**: - `true` if the answer to *this* booking question &lt;u&gt;must&lt;/u&gt; be included in the request object to the b service when booking *this* product - **note**: see [Booking questions](#section/Appendices/Booking-questions) for more information 

        :param required: The required of this Product200ResponseAllOfDataBookingQuestionsInner.
        :type required: bool
        """

        self._required = required

    @property
    def sort_order(self):
        """Gets the sort_order of this Product200ResponseAllOfDataBookingQuestionsInner.

        **sort order** for *this* booking question

        :return: The sort_order of this Product200ResponseAllOfDataBookingQuestionsInner.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this Product200ResponseAllOfDataBookingQuestionsInner.

        **sort order** for *this* booking question

        :param sort_order: The sort_order of this Product200ResponseAllOfDataBookingQuestionsInner.
        :type sort_order: int
        """

        self._sort_order = sort_order

    @property
    def string_question_id(self):
        """Gets the string_question_id of this Product200ResponseAllOfDataBookingQuestionsInner.

        **unique alphanumeric identifier** for the booking question - **note**: see [Booking questions](#section/Appendices/Booking-questions) for more information 

        :return: The string_question_id of this Product200ResponseAllOfDataBookingQuestionsInner.
        :rtype: str
        """
        return self._string_question_id

    @string_question_id.setter
    def string_question_id(self, string_question_id):
        """Sets the string_question_id of this Product200ResponseAllOfDataBookingQuestionsInner.

        **unique alphanumeric identifier** for the booking question - **note**: see [Booking questions](#section/Appendices/Booking-questions) for more information 

        :param string_question_id: The string_question_id of this Product200ResponseAllOfDataBookingQuestionsInner.
        :type string_question_id: str
        """

        self._string_question_id = string_question_id

    @property
    def sub_title(self):
        """Gets the sub_title of this Product200ResponseAllOfDataBookingQuestionsInner.

        **natural-language subtitle** for *this* booking question - **note**: see [Booking questions](#section/Appendices/Booking-questions) for more information 

        :return: The sub_title of this Product200ResponseAllOfDataBookingQuestionsInner.
        :rtype: str
        """
        return self._sub_title

    @sub_title.setter
    def sub_title(self, sub_title):
        """Sets the sub_title of this Product200ResponseAllOfDataBookingQuestionsInner.

        **natural-language subtitle** for *this* booking question - **note**: see [Booking questions](#section/Appendices/Booking-questions) for more information 

        :param sub_title: The sub_title of this Product200ResponseAllOfDataBookingQuestionsInner.
        :type sub_title: str
        """

        self._sub_title = sub_title

    @property
    def title(self):
        """Gets the title of this Product200ResponseAllOfDataBookingQuestionsInner.

        **natural-language title** for *this* booking question - **note**: see [Booking questions](#section/Appendices/Booking-questions) for more information 

        :return: The title of this Product200ResponseAllOfDataBookingQuestionsInner.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Product200ResponseAllOfDataBookingQuestionsInner.

        **natural-language title** for *this* booking question - **note**: see [Booking questions](#section/Appendices/Booking-questions) for more information 

        :param title: The title of this Product200ResponseAllOfDataBookingQuestionsInner.
        :type title: str
        """

        self._title = title
