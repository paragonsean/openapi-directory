# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product200_response_all_of_data import Product200ResponseAllOfData
from openapi_server import util


class Product200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_stamp: str=None, error_codes: List[str]=None, error_message: List[object]=None, error_message_text: str=None, error_name: str=None, error_reference: str=None, error_type: str=None, extra_info: object=None, extra_object: object=None, success: bool=None, total_count: int=None, vmid: str=None, data: Product200ResponseAllOfData=None):
        """Product200Response - a model defined in OpenAPI

        :param date_stamp: The date_stamp of this Product200Response.
        :param error_codes: The error_codes of this Product200Response.
        :param error_message: The error_message of this Product200Response.
        :param error_message_text: The error_message_text of this Product200Response.
        :param error_name: The error_name of this Product200Response.
        :param error_reference: The error_reference of this Product200Response.
        :param error_type: The error_type of this Product200Response.
        :param extra_info: The extra_info of this Product200Response.
        :param extra_object: The extra_object of this Product200Response.
        :param success: The success of this Product200Response.
        :param total_count: The total_count of this Product200Response.
        :param vmid: The vmid of this Product200Response.
        :param data: The data of this Product200Response.
        """
        self.openapi_types = {
            'date_stamp': str,
            'error_codes': List[str],
            'error_message': List[object],
            'error_message_text': str,
            'error_name': str,
            'error_reference': str,
            'error_type': str,
            'extra_info': object,
            'extra_object': object,
            'success': bool,
            'total_count': int,
            'vmid': str,
            'data': Product200ResponseAllOfData
        }

        self.attribute_map = {
            'date_stamp': 'dateStamp',
            'error_codes': 'errorCodes',
            'error_message': 'errorMessage',
            'error_message_text': 'errorMessageText',
            'error_name': 'errorName',
            'error_reference': 'errorReference',
            'error_type': 'errorType',
            'extra_info': 'extraInfo',
            'extra_object': 'extraObject',
            'success': 'success',
            'total_count': 'totalCount',
            'vmid': 'vmid',
            'data': 'data'
        }

        self._date_stamp = date_stamp
        self._error_codes = error_codes
        self._error_message = error_message
        self._error_message_text = error_message_text
        self._error_name = error_name
        self._error_reference = error_reference
        self._error_type = error_type
        self._extra_info = extra_info
        self._extra_object = extra_object
        self._success = success
        self._total_count = total_count
        self._vmid = vmid
        self._data = data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Product200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The product_200_response of this Product200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_stamp(self):
        """Gets the date_stamp of this Product200Response.

        **timestamp** of *this* response

        :return: The date_stamp of this Product200Response.
        :rtype: str
        """
        return self._date_stamp

    @date_stamp.setter
    def date_stamp(self, date_stamp):
        """Sets the date_stamp of this Product200Response.

        **timestamp** of *this* response

        :param date_stamp: The date_stamp of this Product200Response.
        :type date_stamp: str
        """

        self._date_stamp = date_stamp

    @property
    def error_codes(self):
        """Gets the error_codes of this Product200Response.

        **array** of error codes pertaining to *this* error - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes 

        :return: The error_codes of this Product200Response.
        :rtype: List[str]
        """
        return self._error_codes

    @error_codes.setter
    def error_codes(self, error_codes):
        """Sets the error_codes of this Product200Response.

        **array** of error codes pertaining to *this* error - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes 

        :param error_codes: The error_codes of this Product200Response.
        :type error_codes: List[str]
        """

        self._error_codes = error_codes

    @property
    def error_message(self):
        """Gets the error_message of this Product200Response.

        **array** of error message strings

        :return: The error_message of this Product200Response.
        :rtype: List[object]
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this Product200Response.

        **array** of error message strings

        :param error_message: The error_message of this Product200Response.
        :type error_message: List[object]
        """

        self._error_message = error_message

    @property
    def error_message_text(self):
        """Gets the error_message_text of this Product200Response.

        **array** of error message strings in plain text

        :return: The error_message_text of this Product200Response.
        :rtype: str
        """
        return self._error_message_text

    @error_message_text.setter
    def error_message_text(self, error_message_text):
        """Sets the error_message_text of this Product200Response.

        **array** of error message strings in plain text

        :param error_message_text: The error_message_text of this Product200Response.
        :type error_message_text: str
        """

        self._error_message_text = error_message_text

    @property
    def error_name(self):
        """Gets the error_name of this Product200Response.

        **name** of *this* type of error

        :return: The error_name of this Product200Response.
        :rtype: str
        """
        return self._error_name

    @error_name.setter
    def error_name(self, error_name):
        """Sets the error_name of this Product200Response.

        **name** of *this* type of error

        :param error_name: The error_name of this Product200Response.
        :type error_name: str
        """

        self._error_name = error_name

    @property
    def error_reference(self):
        """Gets the error_reference of this Product200Response.

        **reference number** of *this* error

        :return: The error_reference of this Product200Response.
        :rtype: str
        """
        return self._error_reference

    @error_reference.setter
    def error_reference(self, error_reference):
        """Sets the error_reference of this Product200Response.

        **reference number** of *this* error

        :param error_reference: The error_reference of this Product200Response.
        :type error_reference: str
        """

        self._error_reference = error_reference

    @property
    def error_type(self):
        """Gets the error_type of this Product200Response.

        **code** specifying the type of error

        :return: The error_type of this Product200Response.
        :rtype: str
        """
        return self._error_type

    @error_type.setter
    def error_type(self, error_type):
        """Sets the error_type of this Product200Response.

        **code** specifying the type of error

        :param error_type: The error_type of this Product200Response.
        :type error_type: str
        """

        self._error_type = error_type

    @property
    def extra_info(self):
        """Gets the extra_info of this Product200Response.

        ignore (Viator only)

        :return: The extra_info of this Product200Response.
        :rtype: object
        """
        return self._extra_info

    @extra_info.setter
    def extra_info(self, extra_info):
        """Sets the extra_info of this Product200Response.

        ignore (Viator only)

        :param extra_info: The extra_info of this Product200Response.
        :type extra_info: object
        """

        self._extra_info = extra_info

    @property
    def extra_object(self):
        """Gets the extra_object of this Product200Response.

        ignore (Viator only)

        :return: The extra_object of this Product200Response.
        :rtype: object
        """
        return self._extra_object

    @extra_object.setter
    def extra_object(self, extra_object):
        """Sets the extra_object of this Product200Response.

        ignore (Viator only)

        :param extra_object: The extra_object of this Product200Response.
        :type extra_object: object
        """

        self._extra_object = extra_object

    @property
    def success(self):
        """Gets the success of this Product200Response.

        **boolean indicator** of *this* request's outcome - `true`: the request was successful with no errors - `false`: an error was encountered 

        :return: The success of this Product200Response.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this Product200Response.

        **boolean indicator** of *this* request's outcome - `true`: the request was successful with no errors - `false`: an error was encountered 

        :param success: The success of this Product200Response.
        :type success: bool
        """

        self._success = success

    @property
    def total_count(self):
        """Gets the total_count of this Product200Response.

        **number** of results available for *this* service 

        :return: The total_count of this Product200Response.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this Product200Response.

        **number** of results available for *this* service 

        :param total_count: The total_count of this Product200Response.
        :type total_count: int
        """

        self._total_count = total_count

    @property
    def vmid(self):
        """Gets the vmid of this Product200Response.

        **unique numeric id** of the server that processed *this* request

        :return: The vmid of this Product200Response.
        :rtype: str
        """
        return self._vmid

    @vmid.setter
    def vmid(self, vmid):
        """Sets the vmid of this Product200Response.

        **unique numeric id** of the server that processed *this* request

        :param vmid: The vmid of this Product200Response.
        :type vmid: str
        """

        self._vmid = vmid

    @property
    def data(self):
        """Gets the data of this Product200Response.


        :return: The data of this Product200Response.
        :rtype: Product200ResponseAllOfData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Product200Response.


        :param data: The data of this Product200Response.
        :type data: Product200ResponseAllOfData
        """

        self._data = data
