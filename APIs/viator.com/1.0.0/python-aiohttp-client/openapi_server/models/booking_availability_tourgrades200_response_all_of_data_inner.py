# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.booking_availability_tourgrades200_response_all_of_data_inner_age_bands_required_inner_inner import BookingAvailabilityTourgrades200ResponseAllOfDataInnerAgeBandsRequiredInnerInner
from openapi_server import util


class BookingAvailabilityTourgrades200ResponseAllOfDataInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, age_bands: List[object]=None, age_bands_required: List[List[BookingAvailabilityTourgrades200ResponseAllOfDataInnerAgeBandsRequiredInnerInner]]=None, available: bool=None, booking_date: str=None, currency_code: str=None, default_language_code: str=None, grade_code: str=None, grade_departure_time: str=None, grade_description: str=None, grade_title: str=None, lang_services: object=None, merchant_net_price: float=None, merchant_net_price_formatted: str=None, retail_price: float=None, retail_price_formatted: str=None, sort_order: int=None, unavailable_reason: str=None):
        """BookingAvailabilityTourgrades200ResponseAllOfDataInner - a model defined in OpenAPI

        :param age_bands: The age_bands of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :param age_bands_required: The age_bands_required of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :param available: The available of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :param booking_date: The booking_date of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :param currency_code: The currency_code of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :param default_language_code: The default_language_code of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :param grade_code: The grade_code of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :param grade_departure_time: The grade_departure_time of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :param grade_description: The grade_description of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :param grade_title: The grade_title of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :param lang_services: The lang_services of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :param merchant_net_price: The merchant_net_price of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :param merchant_net_price_formatted: The merchant_net_price_formatted of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :param retail_price: The retail_price of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :param retail_price_formatted: The retail_price_formatted of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :param sort_order: The sort_order of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :param unavailable_reason: The unavailable_reason of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        """
        self.openapi_types = {
            'age_bands': List[object],
            'age_bands_required': List[List[BookingAvailabilityTourgrades200ResponseAllOfDataInnerAgeBandsRequiredInnerInner]],
            'available': bool,
            'booking_date': str,
            'currency_code': str,
            'default_language_code': str,
            'grade_code': str,
            'grade_departure_time': str,
            'grade_description': str,
            'grade_title': str,
            'lang_services': object,
            'merchant_net_price': float,
            'merchant_net_price_formatted': str,
            'retail_price': float,
            'retail_price_formatted': str,
            'sort_order': int,
            'unavailable_reason': str
        }

        self.attribute_map = {
            'age_bands': 'ageBands',
            'age_bands_required': 'ageBandsRequired',
            'available': 'available',
            'booking_date': 'bookingDate',
            'currency_code': 'currencyCode',
            'default_language_code': 'defaultLanguageCode',
            'grade_code': 'gradeCode',
            'grade_departure_time': 'gradeDepartureTime',
            'grade_description': 'gradeDescription',
            'grade_title': 'gradeTitle',
            'lang_services': 'langServices',
            'merchant_net_price': 'merchantNetPrice',
            'merchant_net_price_formatted': 'merchantNetPriceFormatted',
            'retail_price': 'retailPrice',
            'retail_price_formatted': 'retailPriceFormatted',
            'sort_order': 'sortOrder',
            'unavailable_reason': 'unavailableReason'
        }

        self._age_bands = age_bands
        self._age_bands_required = age_bands_required
        self._available = available
        self._booking_date = booking_date
        self._currency_code = currency_code
        self._default_language_code = default_language_code
        self._grade_code = grade_code
        self._grade_departure_time = grade_departure_time
        self._grade_description = grade_description
        self._grade_title = grade_title
        self._lang_services = lang_services
        self._merchant_net_price = merchant_net_price
        self._merchant_net_price_formatted = merchant_net_price_formatted
        self._retail_price = retail_price
        self._retail_price_formatted = retail_price_formatted
        self._sort_order = sort_order
        self._unavailable_reason = unavailable_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookingAvailabilityTourgrades200ResponseAllOfDataInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The bookingAvailabilityTourgrades_200_response_allOf_data_inner of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def age_bands(self):
        """Gets the age_bands of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **array** of age band objects describing the age bands and respective passenger counts allowed to book *this* tour grade; `null` if `ageBandsRequired` is filled and `available` is `false`

        :return: The age_bands of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :rtype: List[object]
        """
        return self._age_bands

    @age_bands.setter
    def age_bands(self, age_bands):
        """Sets the age_bands of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **array** of age band objects describing the age bands and respective passenger counts allowed to book *this* tour grade; `null` if `ageBandsRequired` is filled and `available` is `false`

        :param age_bands: The age_bands of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :type age_bands: List[object]
        """

        self._age_bands = age_bands

    @property
    def age_bands_required(self):
        """Gets the age_bands_required of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **array of arrays** of age band objects describing the traveler mixes eligible to book *this* tour grade; `null` if `ageBands` is filled and `available` is `true` - **note**: multiple objects; structure will depend on available tour grades – see response sample for an example, but the exact result you receive will differ 

        :return: The age_bands_required of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :rtype: List[List[BookingAvailabilityTourgrades200ResponseAllOfDataInnerAgeBandsRequiredInnerInner]]
        """
        return self._age_bands_required

    @age_bands_required.setter
    def age_bands_required(self, age_bands_required):
        """Sets the age_bands_required of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **array of arrays** of age band objects describing the traveler mixes eligible to book *this* tour grade; `null` if `ageBands` is filled and `available` is `true` - **note**: multiple objects; structure will depend on available tour grades – see response sample for an example, but the exact result you receive will differ 

        :param age_bands_required: The age_bands_required of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :type age_bands_required: List[List[BookingAvailabilityTourgrades200ResponseAllOfDataInnerAgeBandsRequiredInnerInner]]
        """

        self._age_bands_required = age_bands_required

    @property
    def available(self):
        """Gets the available of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **indicator** - `true` if this tour grade is available to be booked according to the traveler mix specified

        :return: The available of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **indicator** - `true` if this tour grade is available to be booked according to the traveler mix specified

        :param available: The available of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :type available: bool
        """

        self._available = available

    @property
    def booking_date(self):
        """Gets the booking_date of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **date** on which *this* tour grade operates

        :return: The booking_date of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._booking_date

    @booking_date.setter
    def booking_date(self, booking_date):
        """Sets the booking_date of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **date** on which *this* tour grade operates

        :param booking_date: The booking_date of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :type booking_date: str
        """

        self._booking_date = booking_date

    @property
    def currency_code(self):
        """Gets the currency_code of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **currency code for the specified currency** (will be `'ERROR'` if `available` is `false`)

        :return: The currency_code of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **currency code for the specified currency** (will be `'ERROR'` if `available` is `false`)

        :param currency_code: The currency_code of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def default_language_code(self):
        """Gets the default_language_code of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **language code for standard langauge** for *this* product

        :return: The default_language_code of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._default_language_code

    @default_language_code.setter
    def default_language_code(self, default_language_code):
        """Sets the default_language_code of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **language code for standard langauge** for *this* product

        :param default_language_code: The default_language_code of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :type default_language_code: str
        """

        self._default_language_code = default_language_code

    @property
    def grade_code(self):
        """Gets the grade_code of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **alphanumeric identifier** of *this* tour grade

        :return: The grade_code of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._grade_code

    @grade_code.setter
    def grade_code(self, grade_code):
        """Sets the grade_code of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **alphanumeric identifier** of *this* tour grade

        :param grade_code: The grade_code of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :type grade_code: str
        """

        self._grade_code = grade_code

    @property
    def grade_departure_time(self):
        """Gets the grade_departure_time of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **time** of *this* product

        :return: The grade_departure_time of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._grade_departure_time

    @grade_departure_time.setter
    def grade_departure_time(self, grade_departure_time):
        """Sets the grade_departure_time of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **time** of *this* product

        :param grade_departure_time: The grade_departure_time of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :type grade_departure_time: str
        """

        self._grade_departure_time = grade_departure_time

    @property
    def grade_description(self):
        """Gets the grade_description of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **natural-language description** of the tour grade

        :return: The grade_description of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._grade_description

    @grade_description.setter
    def grade_description(self, grade_description):
        """Sets the grade_description of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **natural-language description** of the tour grade

        :param grade_description: The grade_description of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :type grade_description: str
        """

        self._grade_description = grade_description

    @property
    def grade_title(self):
        """Gets the grade_title of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **natural-language title** of the tour grade

        :return: The grade_title of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._grade_title

    @grade_title.setter
    def grade_title(self, grade_title):
        """Sets the grade_title of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **natural-language title** of the tour grade

        :param grade_title: The grade_title of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :type grade_title: str
        """

        self._grade_title = grade_title

    @property
    def lang_services(self):
        """Gets the lang_services of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **object** detailing language services available for *this* product** (will be `null` if `available` is `false`)

        :return: The lang_services of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :rtype: object
        """
        return self._lang_services

    @lang_services.setter
    def lang_services(self, lang_services):
        """Sets the lang_services of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **object** detailing language services available for *this* product** (will be `null` if `available` is `false`)

        :param lang_services: The lang_services of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :type lang_services: object
        """

        self._lang_services = lang_services

    @property
    def merchant_net_price(self):
        """Gets the merchant_net_price of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **numeric merchant net rate** for *this* tour grade **Note**: will be `0` if `available` is `false` - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :return: The merchant_net_price of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :rtype: float
        """
        return self._merchant_net_price

    @merchant_net_price.setter
    def merchant_net_price(self, merchant_net_price):
        """Sets the merchant_net_price of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **numeric merchant net rate** for *this* tour grade **Note**: will be `0` if `available` is `false` - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :param merchant_net_price: The merchant_net_price of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :type merchant_net_price: float
        """

        self._merchant_net_price = merchant_net_price

    @property
    def merchant_net_price_formatted(self):
        """Gets the merchant_net_price_formatted of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **currency-formatted merchant net rate** for *this* tour grade **Note**: will be empty if `available` is `false` - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :return: The merchant_net_price_formatted of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._merchant_net_price_formatted

    @merchant_net_price_formatted.setter
    def merchant_net_price_formatted(self, merchant_net_price_formatted):
        """Sets the merchant_net_price_formatted of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **currency-formatted merchant net rate** for *this* tour grade **Note**: will be empty if `available` is `false` - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :param merchant_net_price_formatted: The merchant_net_price_formatted of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :type merchant_net_price_formatted: str
        """

        self._merchant_net_price_formatted = merchant_net_price_formatted

    @property
    def retail_price(self):
        """Gets the retail_price of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **numeric suggested retail price** for *this* tour grade **Note**: will be `0` if `available` is `false` - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :return: The retail_price of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :rtype: float
        """
        return self._retail_price

    @retail_price.setter
    def retail_price(self, retail_price):
        """Sets the retail_price of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **numeric suggested retail price** for *this* tour grade **Note**: will be `0` if `available` is `false` - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :param retail_price: The retail_price of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :type retail_price: float
        """

        self._retail_price = retail_price

    @property
    def retail_price_formatted(self):
        """Gets the retail_price_formatted of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **currency-formatted suggested retail price** for *this* tour grade **Note**: (will be '' if `available` is `false`) - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :return: The retail_price_formatted of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._retail_price_formatted

    @retail_price_formatted.setter
    def retail_price_formatted(self, retail_price_formatted):
        """Sets the retail_price_formatted of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **currency-formatted suggested retail price** for *this* tour grade **Note**: (will be '' if `available` is `false`) - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :param retail_price_formatted: The retail_price_formatted of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :type retail_price_formatted: str
        """

        self._retail_price_formatted = retail_price_formatted

    @property
    def sort_order(self):
        """Gets the sort_order of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **sort order** for *this* tour grade availability object

        :return: The sort_order of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **sort order** for *this* tour grade availability object

        :param sort_order: The sort_order of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :type sort_order: int
        """

        self._sort_order = sort_order

    @property
    def unavailable_reason(self):
        """Gets the unavailable_reason of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **enum specifier of reason for product unavailability** (will be `null` if `available` is `true`)

        :return: The unavailable_reason of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._unavailable_reason

    @unavailable_reason.setter
    def unavailable_reason(self, unavailable_reason):
        """Sets the unavailable_reason of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.

        **enum specifier of reason for product unavailability** (will be `null` if `available` is `true`)

        :param unavailable_reason: The unavailable_reason of this BookingAvailabilityTourgrades200ResponseAllOfDataInner.
        :type unavailable_reason: str
        """

        self._unavailable_reason = unavailable_reason
