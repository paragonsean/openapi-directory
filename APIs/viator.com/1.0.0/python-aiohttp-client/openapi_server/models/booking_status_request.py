# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BookingStatusRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, booking_date_from: str=None, booking_date_to: str=None, distributor_item_refs: List[str]=None, distributor_refs: List[str]=None, item_ids: List[int]=None, lead_first_name: str=None, lead_surname: str=None, test: bool=None):
        """BookingStatusRequest - a model defined in OpenAPI

        :param booking_date_from: The booking_date_from of this BookingStatusRequest.
        :param booking_date_to: The booking_date_to of this BookingStatusRequest.
        :param distributor_item_refs: The distributor_item_refs of this BookingStatusRequest.
        :param distributor_refs: The distributor_refs of this BookingStatusRequest.
        :param item_ids: The item_ids of this BookingStatusRequest.
        :param lead_first_name: The lead_first_name of this BookingStatusRequest.
        :param lead_surname: The lead_surname of this BookingStatusRequest.
        :param test: The test of this BookingStatusRequest.
        """
        self.openapi_types = {
            'booking_date_from': str,
            'booking_date_to': str,
            'distributor_item_refs': List[str],
            'distributor_refs': List[str],
            'item_ids': List[int],
            'lead_first_name': str,
            'lead_surname': str,
            'test': bool
        }

        self.attribute_map = {
            'booking_date_from': 'bookingDateFrom',
            'booking_date_to': 'bookingDateTo',
            'distributor_item_refs': 'distributorItemRefs',
            'distributor_refs': 'distributorRefs',
            'item_ids': 'itemIds',
            'lead_first_name': 'leadFirstName',
            'lead_surname': 'leadSurname',
            'test': 'test'
        }

        self._booking_date_from = booking_date_from
        self._booking_date_to = booking_date_to
        self._distributor_item_refs = distributor_item_refs
        self._distributor_refs = distributor_refs
        self._item_ids = item_ids
        self._lead_first_name = lead_first_name
        self._lead_surname = lead_surname
        self._test = test

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookingStatusRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The bookingStatus_request of this BookingStatusRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def booking_date_from(self):
        """Gets the booking_date_from of this BookingStatusRequest.

        **earliest date** for *this* booking (must be in the future)

        :return: The booking_date_from of this BookingStatusRequest.
        :rtype: str
        """
        return self._booking_date_from

    @booking_date_from.setter
    def booking_date_from(self, booking_date_from):
        """Sets the booking_date_from of this BookingStatusRequest.

        **earliest date** for *this* booking (must be in the future)

        :param booking_date_from: The booking_date_from of this BookingStatusRequest.
        :type booking_date_from: str
        """

        self._booking_date_from = booking_date_from

    @property
    def booking_date_to(self):
        """Gets the booking_date_to of this BookingStatusRequest.

        **latest date** for *this* booking (must be in the future)

        :return: The booking_date_to of this BookingStatusRequest.
        :rtype: str
        """
        return self._booking_date_to

    @booking_date_to.setter
    def booking_date_to(self, booking_date_to):
        """Sets the booking_date_to of this BookingStatusRequest.

        **latest date** for *this* booking (must be in the future)

        :param booking_date_to: The booking_date_to of this BookingStatusRequest.
        :type booking_date_to: str
        """

        self._booking_date_to = booking_date_to

    @property
    def distributor_item_refs(self):
        """Gets the distributor_item_refs of this BookingStatusRequest.

        **array** of partner-defined distributor item reference identifiers e.g. `['refItem1','refItem2','refItem3']`

        :return: The distributor_item_refs of this BookingStatusRequest.
        :rtype: List[str]
        """
        return self._distributor_item_refs

    @distributor_item_refs.setter
    def distributor_item_refs(self, distributor_item_refs):
        """Sets the distributor_item_refs of this BookingStatusRequest.

        **array** of partner-defined distributor item reference identifiers e.g. `['refItem1','refItem2','refItem3']`

        :param distributor_item_refs: The distributor_item_refs of this BookingStatusRequest.
        :type distributor_item_refs: List[str]
        """

        self._distributor_item_refs = distributor_item_refs

    @property
    def distributor_refs(self):
        """Gets the distributor_refs of this BookingStatusRequest.

        **array** of partner-defined distributor reference identifiers

        :return: The distributor_refs of this BookingStatusRequest.
        :rtype: List[str]
        """
        return self._distributor_refs

    @distributor_refs.setter
    def distributor_refs(self, distributor_refs):
        """Sets the distributor_refs of this BookingStatusRequest.

        **array** of partner-defined distributor reference identifiers

        :param distributor_refs: The distributor_refs of this BookingStatusRequest.
        :type distributor_refs: List[str]
        """

        self._distributor_refs = distributor_refs

    @property
    def item_ids(self):
        """Gets the item_ids of this BookingStatusRequest.

        **array** of item identifiers to check

        :return: The item_ids of this BookingStatusRequest.
        :rtype: List[int]
        """
        return self._item_ids

    @item_ids.setter
    def item_ids(self, item_ids):
        """Sets the item_ids of this BookingStatusRequest.

        **array** of item identifiers to check

        :param item_ids: The item_ids of this BookingStatusRequest.
        :type item_ids: List[int]
        """

        self._item_ids = item_ids

    @property
    def lead_first_name(self):
        """Gets the lead_first_name of this BookingStatusRequest.

        **first name** of the lead traveler

        :return: The lead_first_name of this BookingStatusRequest.
        :rtype: str
        """
        return self._lead_first_name

    @lead_first_name.setter
    def lead_first_name(self, lead_first_name):
        """Sets the lead_first_name of this BookingStatusRequest.

        **first name** of the lead traveler

        :param lead_first_name: The lead_first_name of this BookingStatusRequest.
        :type lead_first_name: str
        """

        self._lead_first_name = lead_first_name

    @property
    def lead_surname(self):
        """Gets the lead_surname of this BookingStatusRequest.

        **surname** of the lead traveler

        :return: The lead_surname of this BookingStatusRequest.
        :rtype: str
        """
        return self._lead_surname

    @lead_surname.setter
    def lead_surname(self, lead_surname):
        """Sets the lead_surname of this BookingStatusRequest.

        **surname** of the lead traveler

        :param lead_surname: The lead_surname of this BookingStatusRequest.
        :type lead_surname: str
        """

        self._lead_surname = lead_surname

    @property
    def test(self):
        """Gets the test of this BookingStatusRequest.

        **specifier**: - `true`: bypass the poll limit in the prelive environment only (recommended for testing) - `false`: (default) 

        :return: The test of this BookingStatusRequest.
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this BookingStatusRequest.

        **specifier**: - `true`: bypass the poll limit in the prelive environment only (recommended for testing) - `false`: (default) 

        :param test: The test of this BookingStatusRequest.
        :type test: bool
        """

        self._test = test
