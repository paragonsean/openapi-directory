# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Product200ResponseAllOfDataTourGradesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_code: str=None, default_language_code: str=None, grade_code: str=None, grade_departure_time: str=None, grade_description: str=None, grade_title: str=None, lang_services: Dict[str, str]=None, merchant_net_price_from: float=None, merchant_net_price_from_formatted: str=None, price_from: float=None, price_from_formatted: str=None, sort_order: int=None):
        """Product200ResponseAllOfDataTourGradesInner - a model defined in OpenAPI

        :param currency_code: The currency_code of this Product200ResponseAllOfDataTourGradesInner.
        :param default_language_code: The default_language_code of this Product200ResponseAllOfDataTourGradesInner.
        :param grade_code: The grade_code of this Product200ResponseAllOfDataTourGradesInner.
        :param grade_departure_time: The grade_departure_time of this Product200ResponseAllOfDataTourGradesInner.
        :param grade_description: The grade_description of this Product200ResponseAllOfDataTourGradesInner.
        :param grade_title: The grade_title of this Product200ResponseAllOfDataTourGradesInner.
        :param lang_services: The lang_services of this Product200ResponseAllOfDataTourGradesInner.
        :param merchant_net_price_from: The merchant_net_price_from of this Product200ResponseAllOfDataTourGradesInner.
        :param merchant_net_price_from_formatted: The merchant_net_price_from_formatted of this Product200ResponseAllOfDataTourGradesInner.
        :param price_from: The price_from of this Product200ResponseAllOfDataTourGradesInner.
        :param price_from_formatted: The price_from_formatted of this Product200ResponseAllOfDataTourGradesInner.
        :param sort_order: The sort_order of this Product200ResponseAllOfDataTourGradesInner.
        """
        self.openapi_types = {
            'currency_code': str,
            'default_language_code': str,
            'grade_code': str,
            'grade_departure_time': str,
            'grade_description': str,
            'grade_title': str,
            'lang_services': Dict[str, str],
            'merchant_net_price_from': float,
            'merchant_net_price_from_formatted': str,
            'price_from': float,
            'price_from_formatted': str,
            'sort_order': int
        }

        self.attribute_map = {
            'currency_code': 'currencyCode',
            'default_language_code': 'defaultLanguageCode',
            'grade_code': 'gradeCode',
            'grade_departure_time': 'gradeDepartureTime',
            'grade_description': 'gradeDescription',
            'grade_title': 'gradeTitle',
            'lang_services': 'langServices',
            'merchant_net_price_from': 'merchantNetPriceFrom',
            'merchant_net_price_from_formatted': 'merchantNetPriceFromFormatted',
            'price_from': 'priceFrom',
            'price_from_formatted': 'priceFromFormatted',
            'sort_order': 'sortOrder'
        }

        self._currency_code = currency_code
        self._default_language_code = default_language_code
        self._grade_code = grade_code
        self._grade_departure_time = grade_departure_time
        self._grade_description = grade_description
        self._grade_title = grade_title
        self._lang_services = lang_services
        self._merchant_net_price_from = merchant_net_price_from
        self._merchant_net_price_from_formatted = merchant_net_price_from_formatted
        self._price_from = price_from
        self._price_from_formatted = price_from_formatted
        self._sort_order = sort_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Product200ResponseAllOfDataTourGradesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The product_200_response_allOf_data_tourGrades_inner of this Product200ResponseAllOfDataTourGradesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_code(self):
        """Gets the currency_code of this Product200ResponseAllOfDataTourGradesInner.

        **currency code** of the currency *this* product's tour grades prices are shown in

        :return: The currency_code of this Product200ResponseAllOfDataTourGradesInner.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Product200ResponseAllOfDataTourGradesInner.

        **currency code** of the currency *this* product's tour grades prices are shown in

        :param currency_code: The currency_code of this Product200ResponseAllOfDataTourGradesInner.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def default_language_code(self):
        """Gets the default_language_code of this Product200ResponseAllOfDataTourGradesInner.

        **language code** of the standard language for *this* tour grade

        :return: The default_language_code of this Product200ResponseAllOfDataTourGradesInner.
        :rtype: str
        """
        return self._default_language_code

    @default_language_code.setter
    def default_language_code(self, default_language_code):
        """Sets the default_language_code of this Product200ResponseAllOfDataTourGradesInner.

        **language code** of the standard language for *this* tour grade

        :param default_language_code: The default_language_code of this Product200ResponseAllOfDataTourGradesInner.
        :type default_language_code: str
        """

        self._default_language_code = default_language_code

    @property
    def grade_code(self):
        """Gets the grade_code of this Product200ResponseAllOfDataTourGradesInner.

        **unique alphanumeric identifier** of *this* tour grade

        :return: The grade_code of this Product200ResponseAllOfDataTourGradesInner.
        :rtype: str
        """
        return self._grade_code

    @grade_code.setter
    def grade_code(self, grade_code):
        """Sets the grade_code of this Product200ResponseAllOfDataTourGradesInner.

        **unique alphanumeric identifier** of *this* tour grade

        :param grade_code: The grade_code of this Product200ResponseAllOfDataTourGradesInner.
        :type grade_code: str
        """

        self._grade_code = grade_code

    @property
    def grade_departure_time(self):
        """Gets the grade_departure_time of this Product200ResponseAllOfDataTourGradesInner.

        **departure time** for *this* tour grade if available

        :return: The grade_departure_time of this Product200ResponseAllOfDataTourGradesInner.
        :rtype: str
        """
        return self._grade_departure_time

    @grade_departure_time.setter
    def grade_departure_time(self, grade_departure_time):
        """Sets the grade_departure_time of this Product200ResponseAllOfDataTourGradesInner.

        **departure time** for *this* tour grade if available

        :param grade_departure_time: The grade_departure_time of this Product200ResponseAllOfDataTourGradesInner.
        :type grade_departure_time: str
        """

        self._grade_departure_time = grade_departure_time

    @property
    def grade_description(self):
        """Gets the grade_description of this Product200ResponseAllOfDataTourGradesInner.

        **natural-language description** of *this* tour grade

        :return: The grade_description of this Product200ResponseAllOfDataTourGradesInner.
        :rtype: str
        """
        return self._grade_description

    @grade_description.setter
    def grade_description(self, grade_description):
        """Sets the grade_description of this Product200ResponseAllOfDataTourGradesInner.

        **natural-language description** of *this* tour grade

        :param grade_description: The grade_description of this Product200ResponseAllOfDataTourGradesInner.
        :type grade_description: str
        """

        self._grade_description = grade_description

    @property
    def grade_title(self):
        """Gets the grade_title of this Product200ResponseAllOfDataTourGradesInner.

        **natural-language description** of *this* tour grade

        :return: The grade_title of this Product200ResponseAllOfDataTourGradesInner.
        :rtype: str
        """
        return self._grade_title

    @grade_title.setter
    def grade_title(self, grade_title):
        """Sets the grade_title of this Product200ResponseAllOfDataTourGradesInner.

        **natural-language description** of *this* tour grade

        :param grade_title: The grade_title of this Product200ResponseAllOfDataTourGradesInner.
        :type grade_title: str
        """

        self._grade_title = grade_title

    @property
    def lang_services(self):
        """Gets the lang_services of this Product200ResponseAllOfDataTourGradesInner.

        **dictionary** of language service codes and their natural-language descriptors

        :return: The lang_services of this Product200ResponseAllOfDataTourGradesInner.
        :rtype: Dict[str, str]
        """
        return self._lang_services

    @lang_services.setter
    def lang_services(self, lang_services):
        """Sets the lang_services of this Product200ResponseAllOfDataTourGradesInner.

        **dictionary** of language service codes and their natural-language descriptors

        :param lang_services: The lang_services of this Product200ResponseAllOfDataTourGradesInner.
        :type lang_services: Dict[str, str]
        """

        self._lang_services = lang_services

    @property
    def merchant_net_price_from(self):
        """Gets the merchant_net_price_from of this Product200ResponseAllOfDataTourGradesInner.

        Numeric 'from' (lowest possible) price that Viator will invoice the merchant for the sale of this product, excluding the transaction fee; i.e. the merchant net rate  For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing) 

        :return: The merchant_net_price_from of this Product200ResponseAllOfDataTourGradesInner.
        :rtype: float
        """
        return self._merchant_net_price_from

    @merchant_net_price_from.setter
    def merchant_net_price_from(self, merchant_net_price_from):
        """Sets the merchant_net_price_from of this Product200ResponseAllOfDataTourGradesInner.

        Numeric 'from' (lowest possible) price that Viator will invoice the merchant for the sale of this product, excluding the transaction fee; i.e. the merchant net rate  For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing) 

        :param merchant_net_price_from: The merchant_net_price_from of this Product200ResponseAllOfDataTourGradesInner.
        :type merchant_net_price_from: float
        """

        self._merchant_net_price_from = merchant_net_price_from

    @property
    def merchant_net_price_from_formatted(self):
        """Gets the merchant_net_price_from_formatted of this Product200ResponseAllOfDataTourGradesInner.

        Currency-formatted 'from' (lowest possible) price that Viator will invoice the merchant for the sale of this product, excluding the transaction fee (i.e. the merchant net rate)  For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing) 

        :return: The merchant_net_price_from_formatted of this Product200ResponseAllOfDataTourGradesInner.
        :rtype: str
        """
        return self._merchant_net_price_from_formatted

    @merchant_net_price_from_formatted.setter
    def merchant_net_price_from_formatted(self, merchant_net_price_from_formatted):
        """Sets the merchant_net_price_from_formatted of this Product200ResponseAllOfDataTourGradesInner.

        Currency-formatted 'from' (lowest possible) price that Viator will invoice the merchant for the sale of this product, excluding the transaction fee (i.e. the merchant net rate)  For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing) 

        :param merchant_net_price_from_formatted: The merchant_net_price_from_formatted of this Product200ResponseAllOfDataTourGradesInner.
        :type merchant_net_price_from_formatted: str
        """

        self._merchant_net_price_from_formatted = merchant_net_price_from_formatted

    @property
    def price_from(self):
        """Gets the price_from of this Product200ResponseAllOfDataTourGradesInner.

        **numeric suggested retail price** for *this* tour grade - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :return: The price_from of this Product200ResponseAllOfDataTourGradesInner.
        :rtype: float
        """
        return self._price_from

    @price_from.setter
    def price_from(self, price_from):
        """Sets the price_from of this Product200ResponseAllOfDataTourGradesInner.

        **numeric suggested retail price** for *this* tour grade - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :param price_from: The price_from of this Product200ResponseAllOfDataTourGradesInner.
        :type price_from: float
        """

        self._price_from = price_from

    @property
    def price_from_formatted(self):
        """Gets the price_from_formatted of this Product200ResponseAllOfDataTourGradesInner.

        **currency-formatted suggested retail price** for *this* tour grade - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :return: The price_from_formatted of this Product200ResponseAllOfDataTourGradesInner.
        :rtype: str
        """
        return self._price_from_formatted

    @price_from_formatted.setter
    def price_from_formatted(self, price_from_formatted):
        """Sets the price_from_formatted of this Product200ResponseAllOfDataTourGradesInner.

        **currency-formatted suggested retail price** for *this* tour grade - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :param price_from_formatted: The price_from_formatted of this Product200ResponseAllOfDataTourGradesInner.
        :type price_from_formatted: str
        """

        self._price_from_formatted = price_from_formatted

    @property
    def sort_order(self):
        """Gets the sort_order of this Product200ResponseAllOfDataTourGradesInner.

        **sort order** of *this* tour grade

        :return: The sort_order of this Product200ResponseAllOfDataTourGradesInner.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this Product200ResponseAllOfDataTourGradesInner.

        **sort order** of *this* tour grade

        :param sort_order: The sort_order of this Product200ResponseAllOfDataTourGradesInner.
        :type sort_order: int
        """

        self._sort_order = sort_order
