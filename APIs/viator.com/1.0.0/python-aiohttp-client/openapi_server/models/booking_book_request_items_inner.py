# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.booking_book_request_items_inner_booking_question_answers_inner import BookingBookRequestItemsInnerBookingQuestionAnswersInner
from openapi_server.models.booking_book_request_items_inner_partner_item_detail import BookingBookRequestItemsInnerPartnerItemDetail
from openapi_server.models.booking_book_request_items_inner_travellers_inner import BookingBookRequestItemsInnerTravellersInner
from openapi_server import util


class BookingBookRequestItemsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, booking_question_answers: List[BookingBookRequestItemsInnerBookingQuestionAnswersInner]=None, hotel_id: str=None, language_option_code: str=None, partner_item_detail: BookingBookRequestItemsInnerPartnerItemDetail=None, pickup_point: str=None, product_code: str=None, special_requirements: str=None, tour_grade_code: str=None, travel_date: str=None, travellers: List[BookingBookRequestItemsInnerTravellersInner]=None):
        """BookingBookRequestItemsInner - a model defined in OpenAPI

        :param booking_question_answers: The booking_question_answers of this BookingBookRequestItemsInner.
        :param hotel_id: The hotel_id of this BookingBookRequestItemsInner.
        :param language_option_code: The language_option_code of this BookingBookRequestItemsInner.
        :param partner_item_detail: The partner_item_detail of this BookingBookRequestItemsInner.
        :param pickup_point: The pickup_point of this BookingBookRequestItemsInner.
        :param product_code: The product_code of this BookingBookRequestItemsInner.
        :param special_requirements: The special_requirements of this BookingBookRequestItemsInner.
        :param tour_grade_code: The tour_grade_code of this BookingBookRequestItemsInner.
        :param travel_date: The travel_date of this BookingBookRequestItemsInner.
        :param travellers: The travellers of this BookingBookRequestItemsInner.
        """
        self.openapi_types = {
            'booking_question_answers': List[BookingBookRequestItemsInnerBookingQuestionAnswersInner],
            'hotel_id': str,
            'language_option_code': str,
            'partner_item_detail': BookingBookRequestItemsInnerPartnerItemDetail,
            'pickup_point': str,
            'product_code': str,
            'special_requirements': str,
            'tour_grade_code': str,
            'travel_date': str,
            'travellers': List[BookingBookRequestItemsInnerTravellersInner]
        }

        self.attribute_map = {
            'booking_question_answers': 'bookingQuestionAnswers',
            'hotel_id': 'hotelId',
            'language_option_code': 'languageOptionCode',
            'partner_item_detail': 'partnerItemDetail',
            'pickup_point': 'pickupPoint',
            'product_code': 'productCode',
            'special_requirements': 'specialRequirements',
            'tour_grade_code': 'tourGradeCode',
            'travel_date': 'travelDate',
            'travellers': 'travellers'
        }

        self._booking_question_answers = booking_question_answers
        self._hotel_id = hotel_id
        self._language_option_code = language_option_code
        self._partner_item_detail = partner_item_detail
        self._pickup_point = pickup_point
        self._product_code = product_code
        self._special_requirements = special_requirements
        self._tour_grade_code = tour_grade_code
        self._travel_date = travel_date
        self._travellers = travellers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookingBookRequestItemsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The bookingBook_request_items_inner of this BookingBookRequestItemsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def booking_question_answers(self):
        """Gets the booking_question_answers of this BookingBookRequestItemsInner.

        **array** of objects containing booking questions and the answers provided for them for *this* product - If a booking question is available in the `bookingQuestions` array in the response from [/product](#operation/product) for *this* product, the matching `bookingQuestionAnswers` must be passed to *this* service.  - If a product does not have any booking questions, you can omit the `bookingQuestionAnswers` array in your request.  - Any invalid or unrequired booking-question answers that are passed to *this* service will be ignored (and, no exceptions will be raised)  - You will need to include this array if [/product](#operation/product) returns any questions in the `bookingQuestions` array. 

        :return: The booking_question_answers of this BookingBookRequestItemsInner.
        :rtype: List[BookingBookRequestItemsInnerBookingQuestionAnswersInner]
        """
        return self._booking_question_answers

    @booking_question_answers.setter
    def booking_question_answers(self, booking_question_answers):
        """Sets the booking_question_answers of this BookingBookRequestItemsInner.

        **array** of objects containing booking questions and the answers provided for them for *this* product - If a booking question is available in the `bookingQuestions` array in the response from [/product](#operation/product) for *this* product, the matching `bookingQuestionAnswers` must be passed to *this* service.  - If a product does not have any booking questions, you can omit the `bookingQuestionAnswers` array in your request.  - Any invalid or unrequired booking-question answers that are passed to *this* service will be ignored (and, no exceptions will be raised)  - You will need to include this array if [/product](#operation/product) returns any questions in the `bookingQuestions` array. 

        :param booking_question_answers: The booking_question_answers of this BookingBookRequestItemsInner.
        :type booking_question_answers: List[BookingBookRequestItemsInnerBookingQuestionAnswersInner]
        """

        self._booking_question_answers = booking_question_answers

    @property
    def hotel_id(self):
        """Gets the hotel_id of this BookingBookRequestItemsInner.

        **specifer** of the hotel If [/product](#operation/product) returns `hotelPickup`: `true` and a list of hotels is available for *this* product in [/booking/hotels](#operation/bookingHotels), a `hotelId` must be captured (as per the hotel service id field); or, use an alternative `hotelId`, such as:    - `\"notBooked\"`: the customer has not yet booked their hotel  - `\"notListed\"`: the customer's hotel is not listed   If the customer chooses one of these options, the product supplier may need to correspond with the user to find out their pick-up location. The best way to do this is by enabling [Closed-Loop-Communication (CLC)](#section/Merchant-APIs/Supplier-communications). 

        :return: The hotel_id of this BookingBookRequestItemsInner.
        :rtype: str
        """
        return self._hotel_id

    @hotel_id.setter
    def hotel_id(self, hotel_id):
        """Sets the hotel_id of this BookingBookRequestItemsInner.

        **specifer** of the hotel If [/product](#operation/product) returns `hotelPickup`: `true` and a list of hotels is available for *this* product in [/booking/hotels](#operation/bookingHotels), a `hotelId` must be captured (as per the hotel service id field); or, use an alternative `hotelId`, such as:    - `\"notBooked\"`: the customer has not yet booked their hotel  - `\"notListed\"`: the customer's hotel is not listed   If the customer chooses one of these options, the product supplier may need to correspond with the user to find out their pick-up location. The best way to do this is by enabling [Closed-Loop-Communication (CLC)](#section/Merchant-APIs/Supplier-communications). 

        :param hotel_id: The hotel_id of this BookingBookRequestItemsInner.
        :type hotel_id: str
        """

        self._hotel_id = hotel_id

    @property
    def language_option_code(self):
        """Gets the language_option_code of this BookingBookRequestItemsInner.

        **specifier** of language service provided for this product that has been chosen for this booking (usually in the format langcode/Service eg en/SERVICE_GUIDE. If the product details service [/product](#operation/product) for the product returns a langService, this must be provided.)

        :return: The language_option_code of this BookingBookRequestItemsInner.
        :rtype: str
        """
        return self._language_option_code

    @language_option_code.setter
    def language_option_code(self, language_option_code):
        """Sets the language_option_code of this BookingBookRequestItemsInner.

        **specifier** of language service provided for this product that has been chosen for this booking (usually in the format langcode/Service eg en/SERVICE_GUIDE. If the product details service [/product](#operation/product) for the product returns a langService, this must be provided.)

        :param language_option_code: The language_option_code of this BookingBookRequestItemsInner.
        :type language_option_code: str
        """

        self._language_option_code = language_option_code

    @property
    def partner_item_detail(self):
        """Gets the partner_item_detail of this BookingBookRequestItemsInner.


        :return: The partner_item_detail of this BookingBookRequestItemsInner.
        :rtype: BookingBookRequestItemsInnerPartnerItemDetail
        """
        return self._partner_item_detail

    @partner_item_detail.setter
    def partner_item_detail(self, partner_item_detail):
        """Sets the partner_item_detail of this BookingBookRequestItemsInner.


        :param partner_item_detail: The partner_item_detail of this BookingBookRequestItemsInner.
        :type partner_item_detail: BookingBookRequestItemsInnerPartnerItemDetail
        """

        self._partner_item_detail = partner_item_detail

    @property
    def pickup_point(self):
        """Gets the pickup_point of this BookingBookRequestItemsInner.

        **details** about the hotel pick-up point (must be provided if the `hotelId` selected by the user is `'notListed'` or if no hotels are returned for *this* product in [/booking/hotels](#operation/bookingHotels) where `hotelPickup` is `true`.

        :return: The pickup_point of this BookingBookRequestItemsInner.
        :rtype: str
        """
        return self._pickup_point

    @pickup_point.setter
    def pickup_point(self, pickup_point):
        """Sets the pickup_point of this BookingBookRequestItemsInner.

        **details** about the hotel pick-up point (must be provided if the `hotelId` selected by the user is `'notListed'` or if no hotels are returned for *this* product in [/booking/hotels](#operation/bookingHotels) where `hotelPickup` is `true`.

        :param pickup_point: The pickup_point of this BookingBookRequestItemsInner.
        :type pickup_point: str
        """

        self._pickup_point = pickup_point

    @property
    def product_code(self):
        """Gets the product_code of this BookingBookRequestItemsInner.

        **unique alphanumeric identifier** of the product to be booked

        :return: The product_code of this BookingBookRequestItemsInner.
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this BookingBookRequestItemsInner.

        **unique alphanumeric identifier** of the product to be booked

        :param product_code: The product_code of this BookingBookRequestItemsInner.
        :type product_code: str
        """

        self._product_code = product_code

    @property
    def special_requirements(self):
        """Gets the special_requirements of this BookingBookRequestItemsInner.

        **text field** to capture any additional requirements for the booking, such as dietary requirements or if a wheelchair is required

        :return: The special_requirements of this BookingBookRequestItemsInner.
        :rtype: str
        """
        return self._special_requirements

    @special_requirements.setter
    def special_requirements(self, special_requirements):
        """Sets the special_requirements of this BookingBookRequestItemsInner.

        **text field** to capture any additional requirements for the booking, such as dietary requirements or if a wheelchair is required

        :param special_requirements: The special_requirements of this BookingBookRequestItemsInner.
        :type special_requirements: str
        """

        self._special_requirements = special_requirements

    @property
    def tour_grade_code(self):
        """Gets the tour_grade_code of this BookingBookRequestItemsInner.

        **specifier** of the tour grade to be booked (if tour grades are supplied in [/product](#operation/product), you must allow the customer to select a tour grade code. If no tour grades are available for *this* product, set this to `'DEFAULT'`.)

        :return: The tour_grade_code of this BookingBookRequestItemsInner.
        :rtype: str
        """
        return self._tour_grade_code

    @tour_grade_code.setter
    def tour_grade_code(self, tour_grade_code):
        """Sets the tour_grade_code of this BookingBookRequestItemsInner.

        **specifier** of the tour grade to be booked (if tour grades are supplied in [/product](#operation/product), you must allow the customer to select a tour grade code. If no tour grades are available for *this* product, set this to `'DEFAULT'`.)

        :param tour_grade_code: The tour_grade_code of this BookingBookRequestItemsInner.
        :type tour_grade_code: str
        """

        self._tour_grade_code = tour_grade_code

    @property
    def travel_date(self):
        """Gets the travel_date of this BookingBookRequestItemsInner.

        **date** of travel for the item in format yyyy-mm-dd

        :return: The travel_date of this BookingBookRequestItemsInner.
        :rtype: str
        """
        return self._travel_date

    @travel_date.setter
    def travel_date(self, travel_date):
        """Sets the travel_date of this BookingBookRequestItemsInner.

        **date** of travel for the item in format yyyy-mm-dd

        :param travel_date: The travel_date of this BookingBookRequestItemsInner.
        :type travel_date: str
        """

        self._travel_date = travel_date

    @property
    def travellers(self):
        """Gets the travellers of this BookingBookRequestItemsInner.

        **array** of traveler names, details and whether they are the lead traveller

        :return: The travellers of this BookingBookRequestItemsInner.
        :rtype: List[BookingBookRequestItemsInnerTravellersInner]
        """
        return self._travellers

    @travellers.setter
    def travellers(self, travellers):
        """Sets the travellers of this BookingBookRequestItemsInner.

        **array** of traveler names, details and whether they are the lead traveller

        :param travellers: The travellers of this BookingBookRequestItemsInner.
        :type travellers: List[BookingBookRequestItemsInnerTravellersInner]
        """

        self._travellers = travellers
