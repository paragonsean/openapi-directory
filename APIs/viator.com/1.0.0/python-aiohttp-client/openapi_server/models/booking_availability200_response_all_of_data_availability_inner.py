# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BookingAvailability200ResponseAllOfDataAvailabilityInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available: bool=None, booking_date: str=None, currency_code: str=None, grade_code: str=None, merchant_net_price: float=None, merchant_net_price_formatted: str=None, retail_price: float=None, retail_price_formatted: str=None, sort_order: int=None, unavailable_reason: str=None):
        """BookingAvailability200ResponseAllOfDataAvailabilityInner - a model defined in OpenAPI

        :param available: The available of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :param booking_date: The booking_date of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :param currency_code: The currency_code of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :param grade_code: The grade_code of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :param merchant_net_price: The merchant_net_price of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :param merchant_net_price_formatted: The merchant_net_price_formatted of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :param retail_price: The retail_price of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :param retail_price_formatted: The retail_price_formatted of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :param sort_order: The sort_order of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :param unavailable_reason: The unavailable_reason of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        """
        self.openapi_types = {
            'available': bool,
            'booking_date': str,
            'currency_code': str,
            'grade_code': str,
            'merchant_net_price': float,
            'merchant_net_price_formatted': str,
            'retail_price': float,
            'retail_price_formatted': str,
            'sort_order': int,
            'unavailable_reason': str
        }

        self.attribute_map = {
            'available': 'available',
            'booking_date': 'bookingDate',
            'currency_code': 'currencyCode',
            'grade_code': 'gradeCode',
            'merchant_net_price': 'merchantNetPrice',
            'merchant_net_price_formatted': 'merchantNetPriceFormatted',
            'retail_price': 'retailPrice',
            'retail_price_formatted': 'retailPriceFormatted',
            'sort_order': 'sortOrder',
            'unavailable_reason': 'unavailableReason'
        }

        self._available = available
        self._booking_date = booking_date
        self._currency_code = currency_code
        self._grade_code = grade_code
        self._merchant_net_price = merchant_net_price
        self._merchant_net_price_formatted = merchant_net_price_formatted
        self._retail_price = retail_price
        self._retail_price_formatted = retail_price_formatted
        self._sort_order = sort_order
        self._unavailable_reason = unavailable_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookingAvailability200ResponseAllOfDataAvailabilityInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The bookingAvailability_200_response_allOf_data_availability_inner of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available(self):
        """Gets the available of this BookingAvailability200ResponseAllOfDataAvailabilityInner.

        **indicator** - `true` if *this* tour grade is available to book

        :return: The available of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this BookingAvailability200ResponseAllOfDataAvailabilityInner.

        **indicator** - `true` if *this* tour grade is available to book

        :param available: The available of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :type available: bool
        """

        self._available = available

    @property
    def booking_date(self):
        """Gets the booking_date of this BookingAvailability200ResponseAllOfDataAvailabilityInner.

        **date** on which *this* tour grade is available to be booked

        :return: The booking_date of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :rtype: str
        """
        return self._booking_date

    @booking_date.setter
    def booking_date(self, booking_date):
        """Sets the booking_date of this BookingAvailability200ResponseAllOfDataAvailabilityInner.

        **date** on which *this* tour grade is available to be booked

        :param booking_date: The booking_date of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :type booking_date: str
        """

        self._booking_date = booking_date

    @property
    def currency_code(self):
        """Gets the currency_code of this BookingAvailability200ResponseAllOfDataAvailabilityInner.

        **currency code** of the currency in which product pricing is displayed

        :return: The currency_code of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this BookingAvailability200ResponseAllOfDataAvailabilityInner.

        **currency code** of the currency in which product pricing is displayed

        :param currency_code: The currency_code of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def grade_code(self):
        """Gets the grade_code of this BookingAvailability200ResponseAllOfDataAvailabilityInner.

        **alphanumeric identifier** for *this* tour grade

        :return: The grade_code of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :rtype: str
        """
        return self._grade_code

    @grade_code.setter
    def grade_code(self, grade_code):
        """Sets the grade_code of this BookingAvailability200ResponseAllOfDataAvailabilityInner.

        **alphanumeric identifier** for *this* tour grade

        :param grade_code: The grade_code of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :type grade_code: str
        """

        self._grade_code = grade_code

    @property
    def merchant_net_price(self):
        """Gets the merchant_net_price of this BookingAvailability200ResponseAllOfDataAvailabilityInner.

        **numeric merchant net rate** for *this* tour grade - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :return: The merchant_net_price of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :rtype: float
        """
        return self._merchant_net_price

    @merchant_net_price.setter
    def merchant_net_price(self, merchant_net_price):
        """Sets the merchant_net_price of this BookingAvailability200ResponseAllOfDataAvailabilityInner.

        **numeric merchant net rate** for *this* tour grade - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :param merchant_net_price: The merchant_net_price of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :type merchant_net_price: float
        """

        self._merchant_net_price = merchant_net_price

    @property
    def merchant_net_price_formatted(self):
        """Gets the merchant_net_price_formatted of this BookingAvailability200ResponseAllOfDataAvailabilityInner.

        **currency-formatted merchant net rate** for *this* tour grade - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :return: The merchant_net_price_formatted of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :rtype: str
        """
        return self._merchant_net_price_formatted

    @merchant_net_price_formatted.setter
    def merchant_net_price_formatted(self, merchant_net_price_formatted):
        """Sets the merchant_net_price_formatted of this BookingAvailability200ResponseAllOfDataAvailabilityInner.

        **currency-formatted merchant net rate** for *this* tour grade - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :param merchant_net_price_formatted: The merchant_net_price_formatted of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :type merchant_net_price_formatted: str
        """

        self._merchant_net_price_formatted = merchant_net_price_formatted

    @property
    def retail_price(self):
        """Gets the retail_price of this BookingAvailability200ResponseAllOfDataAvailabilityInner.

        **numeric suggested retail price** for *this* tour grade - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :return: The retail_price of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :rtype: float
        """
        return self._retail_price

    @retail_price.setter
    def retail_price(self, retail_price):
        """Sets the retail_price of this BookingAvailability200ResponseAllOfDataAvailabilityInner.

        **numeric suggested retail price** for *this* tour grade - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :param retail_price: The retail_price of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :type retail_price: float
        """

        self._retail_price = retail_price

    @property
    def retail_price_formatted(self):
        """Gets the retail_price_formatted of this BookingAvailability200ResponseAllOfDataAvailabilityInner.

        **currency-formatted suggested retail price** for *this* tour grade - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :return: The retail_price_formatted of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :rtype: str
        """
        return self._retail_price_formatted

    @retail_price_formatted.setter
    def retail_price_formatted(self, retail_price_formatted):
        """Sets the retail_price_formatted of this BookingAvailability200ResponseAllOfDataAvailabilityInner.

        **currency-formatted suggested retail price** for *this* tour grade - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :param retail_price_formatted: The retail_price_formatted of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :type retail_price_formatted: str
        """

        self._retail_price_formatted = retail_price_formatted

    @property
    def sort_order(self):
        """Gets the sort_order of this BookingAvailability200ResponseAllOfDataAvailabilityInner.

        **sort order** of this tour grade availability object

        :return: The sort_order of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this BookingAvailability200ResponseAllOfDataAvailabilityInner.

        **sort order** of this tour grade availability object

        :param sort_order: The sort_order of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :type sort_order: int
        """

        self._sort_order = sort_order

    @property
    def unavailable_reason(self):
        """Gets the unavailable_reason of this BookingAvailability200ResponseAllOfDataAvailabilityInner.

        **natural-language explanation** as to why *this* tour grade is not available to be booked

        :return: The unavailable_reason of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :rtype: str
        """
        return self._unavailable_reason

    @unavailable_reason.setter
    def unavailable_reason(self, unavailable_reason):
        """Sets the unavailable_reason of this BookingAvailability200ResponseAllOfDataAvailabilityInner.

        **natural-language explanation** as to why *this* tour grade is not available to be booked

        :param unavailable_reason: The unavailable_reason of this BookingAvailability200ResponseAllOfDataAvailabilityInner.
        :type unavailable_reason: str
        """

        self._unavailable_reason = unavailable_reason
