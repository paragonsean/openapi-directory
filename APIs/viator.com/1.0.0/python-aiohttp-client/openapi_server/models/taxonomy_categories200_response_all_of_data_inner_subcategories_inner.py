# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_id: int=None, sortorder: int=None, sub_category_url_name: str=None, subcategory_id: int=None, subcategory_name: str=None):
        """TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner - a model defined in OpenAPI

        :param category_id: The category_id of this TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner.
        :param sortorder: The sortorder of this TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner.
        :param sub_category_url_name: The sub_category_url_name of this TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner.
        :param subcategory_id: The subcategory_id of this TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner.
        :param subcategory_name: The subcategory_name of this TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner.
        """
        self.openapi_types = {
            'category_id': int,
            'sortorder': int,
            'sub_category_url_name': str,
            'subcategory_id': int,
            'subcategory_name': str
        }

        self.attribute_map = {
            'category_id': 'categoryId',
            'sortorder': 'sortorder',
            'sub_category_url_name': 'subCategoryUrlName',
            'subcategory_id': 'subcategoryId',
            'subcategory_name': 'subcategoryName'
        }

        self._category_id = category_id
        self._sortorder = sortorder
        self._sub_category_url_name = sub_category_url_name
        self._subcategory_id = subcategory_id
        self._subcategory_name = subcategory_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The taxonomyCategories_200_response_allOf_data_inner_subcategories_inner of this TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_id(self):
        """Gets the category_id of this TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner.

        **unique numeric identifier** of *this* product category

        :return: The category_id of this TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner.

        **unique numeric identifier** of *this* product category

        :param category_id: The category_id of this TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner.
        :type category_id: int
        """

        self._category_id = category_id

    @property
    def sortorder(self):
        """Gets the sortorder of this TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner.

        **sort order** (suggested) of the subcategory within the category

        :return: The sortorder of this TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner.
        :rtype: int
        """
        return self._sortorder

    @sortorder.setter
    def sortorder(self, sortorder):
        """Sets the sortorder of this TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner.

        **sort order** (suggested) of the subcategory within the category

        :param sortorder: The sortorder of this TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner.
        :type sortorder: int
        """

        self._sortorder = sortorder

    @property
    def sub_category_url_name(self):
        """Gets the sub_category_url_name of this TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner.

        **URL-formatted name** of *this* product subcategory

        :return: The sub_category_url_name of this TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner.
        :rtype: str
        """
        return self._sub_category_url_name

    @sub_category_url_name.setter
    def sub_category_url_name(self, sub_category_url_name):
        """Sets the sub_category_url_name of this TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner.

        **URL-formatted name** of *this* product subcategory

        :param sub_category_url_name: The sub_category_url_name of this TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner.
        :type sub_category_url_name: str
        """

        self._sub_category_url_name = sub_category_url_name

    @property
    def subcategory_id(self):
        """Gets the subcategory_id of this TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner.

        **unique numeric identifier** of *this* product subcategory

        :return: The subcategory_id of this TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner.
        :rtype: int
        """
        return self._subcategory_id

    @subcategory_id.setter
    def subcategory_id(self, subcategory_id):
        """Sets the subcategory_id of this TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner.

        **unique numeric identifier** of *this* product subcategory

        :param subcategory_id: The subcategory_id of this TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner.
        :type subcategory_id: int
        """

        self._subcategory_id = subcategory_id

    @property
    def subcategory_name(self):
        """Gets the subcategory_name of this TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner.

        **natural-language name** of *this* product subcategory

        :return: The subcategory_name of this TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner.
        :rtype: str
        """
        return self._subcategory_name

    @subcategory_name.setter
    def subcategory_name(self, subcategory_name):
        """Sets the subcategory_name of this TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner.

        **natural-language name** of *this* product subcategory

        :param subcategory_name: The subcategory_name of this TaxonomyCategories200ResponseAllOfDataInnerSubcategoriesInner.
        :type subcategory_name: str
        """

        self._subcategory_name = subcategory_name
