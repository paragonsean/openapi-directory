# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.available_products200_response_all_of_data_inner_pas_tour_grades_value import AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue
from openapi_server import util


class AvailableProducts200ResponseAllOfDataInnerPas(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, incomplete_quote: bool=None, product_code: str=None, removed_child_ages: List[str]=None, tour_grades: Dict[str, AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue]=None, traveller_mix: str=None):
        """AvailableProducts200ResponseAllOfDataInnerPas - a model defined in OpenAPI

        :param incomplete_quote: The incomplete_quote of this AvailableProducts200ResponseAllOfDataInnerPas.
        :param product_code: The product_code of this AvailableProducts200ResponseAllOfDataInnerPas.
        :param removed_child_ages: The removed_child_ages of this AvailableProducts200ResponseAllOfDataInnerPas.
        :param tour_grades: The tour_grades of this AvailableProducts200ResponseAllOfDataInnerPas.
        :param traveller_mix: The traveller_mix of this AvailableProducts200ResponseAllOfDataInnerPas.
        """
        self.openapi_types = {
            'incomplete_quote': bool,
            'product_code': str,
            'removed_child_ages': List[str],
            'tour_grades': Dict[str, AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue],
            'traveller_mix': str
        }

        self.attribute_map = {
            'incomplete_quote': 'incompleteQuote',
            'product_code': 'productCode',
            'removed_child_ages': 'removedChildAges',
            'tour_grades': 'tourGrades',
            'traveller_mix': 'travellerMix'
        }

        self._incomplete_quote = incomplete_quote
        self._product_code = product_code
        self._removed_child_ages = removed_child_ages
        self._tour_grades = tour_grades
        self._traveller_mix = traveller_mix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailableProducts200ResponseAllOfDataInnerPas':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The availableProducts_200_response_allOf_data_inner_pas of this AvailableProducts200ResponseAllOfDataInnerPas.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def incomplete_quote(self):
        """Gets the incomplete_quote of this AvailableProducts200ResponseAllOfDataInnerPas.

        ignore (Viator only)

        :return: The incomplete_quote of this AvailableProducts200ResponseAllOfDataInnerPas.
        :rtype: bool
        """
        return self._incomplete_quote

    @incomplete_quote.setter
    def incomplete_quote(self, incomplete_quote):
        """Sets the incomplete_quote of this AvailableProducts200ResponseAllOfDataInnerPas.

        ignore (Viator only)

        :param incomplete_quote: The incomplete_quote of this AvailableProducts200ResponseAllOfDataInnerPas.
        :type incomplete_quote: bool
        """

        self._incomplete_quote = incomplete_quote

    @property
    def product_code(self):
        """Gets the product_code of this AvailableProducts200ResponseAllOfDataInnerPas.

        **unique alphanumeric identifier** of *this* product

        :return: The product_code of this AvailableProducts200ResponseAllOfDataInnerPas.
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this AvailableProducts200ResponseAllOfDataInnerPas.

        **unique alphanumeric identifier** of *this* product

        :param product_code: The product_code of this AvailableProducts200ResponseAllOfDataInnerPas.
        :type product_code: str
        """

        self._product_code = product_code

    @property
    def removed_child_ages(self):
        """Gets the removed_child_ages of this AvailableProducts200ResponseAllOfDataInnerPas.

        ignore (Viator only)

        :return: The removed_child_ages of this AvailableProducts200ResponseAllOfDataInnerPas.
        :rtype: List[str]
        """
        return self._removed_child_ages

    @removed_child_ages.setter
    def removed_child_ages(self, removed_child_ages):
        """Sets the removed_child_ages of this AvailableProducts200ResponseAllOfDataInnerPas.

        ignore (Viator only)

        :param removed_child_ages: The removed_child_ages of this AvailableProducts200ResponseAllOfDataInnerPas.
        :type removed_child_ages: List[str]
        """

        self._removed_child_ages = removed_child_ages

    @property
    def tour_grades(self):
        """Gets the tour_grades of this AvailableProducts200ResponseAllOfDataInnerPas.

        **dictionary** of tour grade alphanumeric codes to tour grade objects

        :return: The tour_grades of this AvailableProducts200ResponseAllOfDataInnerPas.
        :rtype: Dict[str, AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue]
        """
        return self._tour_grades

    @tour_grades.setter
    def tour_grades(self, tour_grades):
        """Sets the tour_grades of this AvailableProducts200ResponseAllOfDataInnerPas.

        **dictionary** of tour grade alphanumeric codes to tour grade objects

        :param tour_grades: The tour_grades of this AvailableProducts200ResponseAllOfDataInnerPas.
        :type tour_grades: Dict[str, AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue]
        """

        self._tour_grades = tour_grades

    @property
    def traveller_mix(self):
        """Gets the traveller_mix of this AvailableProducts200ResponseAllOfDataInnerPas.

        **alphanumeric code** indicating the combination of adults and children being enquired about

        :return: The traveller_mix of this AvailableProducts200ResponseAllOfDataInnerPas.
        :rtype: str
        """
        return self._traveller_mix

    @traveller_mix.setter
    def traveller_mix(self, traveller_mix):
        """Sets the traveller_mix of this AvailableProducts200ResponseAllOfDataInnerPas.

        **alphanumeric code** indicating the combination of adults and children being enquired about

        :param traveller_mix: The traveller_mix of this AvailableProducts200ResponseAllOfDataInnerPas.
        :type traveller_mix: str
        """

        self._traveller_mix = traveller_mix
