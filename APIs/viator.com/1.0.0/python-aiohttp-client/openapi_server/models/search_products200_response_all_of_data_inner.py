# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.booking_engine_id import BookingEngineId
from openapi_server.models.translation_level import TranslationLevel
from openapi_server import util


class SearchProducts200ResponseAllOfDataInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admission: str=None, available: bool=None, booking_engine_id: BookingEngineId=None, cat_ids: List[int]=None, code: str=None, currency_code: str=None, duration: str=None, essential: str=None, merchant_cancellable: bool=None, merchant_net_price_from: float=None, merchant_net_price_from_formatted: str=None, on_request_period: int=None, on_sale: bool=None, panorama_count: int=None, pas: object=None, photo_count: int=None, price: float=None, price_formatted: str=None, primary_destination_id: int=None, primary_destination_name: str=None, primary_destination_url_name: str=None, primary_group_id: int=None, product_url_name: str=None, rating: float=None, review_count: int=None, rrp: int=None, rrpformatted: str=None, saving_amount: str=None, saving_amount_formated: str=None, short_description: str=None, short_title: str=None, sort_order: int=None, special_offer_available: bool=None, special_reservation: bool=None, special_reservation_details: str=None, ssl_supported: object=None, sub_cat_ids: List[int]=None, supplier_code: str=None, supplier_name: str=None, thumbnail_hi_res_url: str=None, thumbnail_url: str=None, title: str=None, translation_level: TranslationLevel=None, unique_short_description: str=None, video_count: int=None, web_url: str=None):
        """SearchProducts200ResponseAllOfDataInner - a model defined in OpenAPI

        :param admission: The admission of this SearchProducts200ResponseAllOfDataInner.
        :param available: The available of this SearchProducts200ResponseAllOfDataInner.
        :param booking_engine_id: The booking_engine_id of this SearchProducts200ResponseAllOfDataInner.
        :param cat_ids: The cat_ids of this SearchProducts200ResponseAllOfDataInner.
        :param code: The code of this SearchProducts200ResponseAllOfDataInner.
        :param currency_code: The currency_code of this SearchProducts200ResponseAllOfDataInner.
        :param duration: The duration of this SearchProducts200ResponseAllOfDataInner.
        :param essential: The essential of this SearchProducts200ResponseAllOfDataInner.
        :param merchant_cancellable: The merchant_cancellable of this SearchProducts200ResponseAllOfDataInner.
        :param merchant_net_price_from: The merchant_net_price_from of this SearchProducts200ResponseAllOfDataInner.
        :param merchant_net_price_from_formatted: The merchant_net_price_from_formatted of this SearchProducts200ResponseAllOfDataInner.
        :param on_request_period: The on_request_period of this SearchProducts200ResponseAllOfDataInner.
        :param on_sale: The on_sale of this SearchProducts200ResponseAllOfDataInner.
        :param panorama_count: The panorama_count of this SearchProducts200ResponseAllOfDataInner.
        :param pas: The pas of this SearchProducts200ResponseAllOfDataInner.
        :param photo_count: The photo_count of this SearchProducts200ResponseAllOfDataInner.
        :param price: The price of this SearchProducts200ResponseAllOfDataInner.
        :param price_formatted: The price_formatted of this SearchProducts200ResponseAllOfDataInner.
        :param primary_destination_id: The primary_destination_id of this SearchProducts200ResponseAllOfDataInner.
        :param primary_destination_name: The primary_destination_name of this SearchProducts200ResponseAllOfDataInner.
        :param primary_destination_url_name: The primary_destination_url_name of this SearchProducts200ResponseAllOfDataInner.
        :param primary_group_id: The primary_group_id of this SearchProducts200ResponseAllOfDataInner.
        :param product_url_name: The product_url_name of this SearchProducts200ResponseAllOfDataInner.
        :param rating: The rating of this SearchProducts200ResponseAllOfDataInner.
        :param review_count: The review_count of this SearchProducts200ResponseAllOfDataInner.
        :param rrp: The rrp of this SearchProducts200ResponseAllOfDataInner.
        :param rrpformatted: The rrpformatted of this SearchProducts200ResponseAllOfDataInner.
        :param saving_amount: The saving_amount of this SearchProducts200ResponseAllOfDataInner.
        :param saving_amount_formated: The saving_amount_formated of this SearchProducts200ResponseAllOfDataInner.
        :param short_description: The short_description of this SearchProducts200ResponseAllOfDataInner.
        :param short_title: The short_title of this SearchProducts200ResponseAllOfDataInner.
        :param sort_order: The sort_order of this SearchProducts200ResponseAllOfDataInner.
        :param special_offer_available: The special_offer_available of this SearchProducts200ResponseAllOfDataInner.
        :param special_reservation: The special_reservation of this SearchProducts200ResponseAllOfDataInner.
        :param special_reservation_details: The special_reservation_details of this SearchProducts200ResponseAllOfDataInner.
        :param ssl_supported: The ssl_supported of this SearchProducts200ResponseAllOfDataInner.
        :param sub_cat_ids: The sub_cat_ids of this SearchProducts200ResponseAllOfDataInner.
        :param supplier_code: The supplier_code of this SearchProducts200ResponseAllOfDataInner.
        :param supplier_name: The supplier_name of this SearchProducts200ResponseAllOfDataInner.
        :param thumbnail_hi_res_url: The thumbnail_hi_res_url of this SearchProducts200ResponseAllOfDataInner.
        :param thumbnail_url: The thumbnail_url of this SearchProducts200ResponseAllOfDataInner.
        :param title: The title of this SearchProducts200ResponseAllOfDataInner.
        :param translation_level: The translation_level of this SearchProducts200ResponseAllOfDataInner.
        :param unique_short_description: The unique_short_description of this SearchProducts200ResponseAllOfDataInner.
        :param video_count: The video_count of this SearchProducts200ResponseAllOfDataInner.
        :param web_url: The web_url of this SearchProducts200ResponseAllOfDataInner.
        """
        self.openapi_types = {
            'admission': str,
            'available': bool,
            'booking_engine_id': BookingEngineId,
            'cat_ids': List[int],
            'code': str,
            'currency_code': str,
            'duration': str,
            'essential': str,
            'merchant_cancellable': bool,
            'merchant_net_price_from': float,
            'merchant_net_price_from_formatted': str,
            'on_request_period': int,
            'on_sale': bool,
            'panorama_count': int,
            'pas': object,
            'photo_count': int,
            'price': float,
            'price_formatted': str,
            'primary_destination_id': int,
            'primary_destination_name': str,
            'primary_destination_url_name': str,
            'primary_group_id': int,
            'product_url_name': str,
            'rating': float,
            'review_count': int,
            'rrp': int,
            'rrpformatted': str,
            'saving_amount': str,
            'saving_amount_formated': str,
            'short_description': str,
            'short_title': str,
            'sort_order': int,
            'special_offer_available': bool,
            'special_reservation': bool,
            'special_reservation_details': str,
            'ssl_supported': object,
            'sub_cat_ids': List[int],
            'supplier_code': str,
            'supplier_name': str,
            'thumbnail_hi_res_url': str,
            'thumbnail_url': str,
            'title': str,
            'translation_level': TranslationLevel,
            'unique_short_description': str,
            'video_count': int,
            'web_url': str
        }

        self.attribute_map = {
            'admission': 'admission',
            'available': 'available',
            'booking_engine_id': 'bookingEngineId',
            'cat_ids': 'catIds',
            'code': 'code',
            'currency_code': 'currencyCode',
            'duration': 'duration',
            'essential': 'essential',
            'merchant_cancellable': 'merchantCancellable',
            'merchant_net_price_from': 'merchantNetPriceFrom',
            'merchant_net_price_from_formatted': 'merchantNetPriceFromFormatted',
            'on_request_period': 'onRequestPeriod',
            'on_sale': 'onSale',
            'panorama_count': 'panoramaCount',
            'pas': 'pas',
            'photo_count': 'photoCount',
            'price': 'price',
            'price_formatted': 'priceFormatted',
            'primary_destination_id': 'primaryDestinationId',
            'primary_destination_name': 'primaryDestinationName',
            'primary_destination_url_name': 'primaryDestinationUrlName',
            'primary_group_id': 'primaryGroupId',
            'product_url_name': 'productUrlName',
            'rating': 'rating',
            'review_count': 'reviewCount',
            'rrp': 'rrp',
            'rrpformatted': 'rrpformatted',
            'saving_amount': 'savingAmount',
            'saving_amount_formated': 'savingAmountFormated',
            'short_description': 'shortDescription',
            'short_title': 'shortTitle',
            'sort_order': 'sortOrder',
            'special_offer_available': 'specialOfferAvailable',
            'special_reservation': 'specialReservation',
            'special_reservation_details': 'specialReservationDetails',
            'ssl_supported': 'sslSupported',
            'sub_cat_ids': 'subCatIds',
            'supplier_code': 'supplierCode',
            'supplier_name': 'supplierName',
            'thumbnail_hi_res_url': 'thumbnailHiResURL',
            'thumbnail_url': 'thumbnailURL',
            'title': 'title',
            'translation_level': 'translationLevel',
            'unique_short_description': 'uniqueShortDescription',
            'video_count': 'videoCount',
            'web_url': 'webURL'
        }

        self._admission = admission
        self._available = available
        self._booking_engine_id = booking_engine_id
        self._cat_ids = cat_ids
        self._code = code
        self._currency_code = currency_code
        self._duration = duration
        self._essential = essential
        self._merchant_cancellable = merchant_cancellable
        self._merchant_net_price_from = merchant_net_price_from
        self._merchant_net_price_from_formatted = merchant_net_price_from_formatted
        self._on_request_period = on_request_period
        self._on_sale = on_sale
        self._panorama_count = panorama_count
        self._pas = pas
        self._photo_count = photo_count
        self._price = price
        self._price_formatted = price_formatted
        self._primary_destination_id = primary_destination_id
        self._primary_destination_name = primary_destination_name
        self._primary_destination_url_name = primary_destination_url_name
        self._primary_group_id = primary_group_id
        self._product_url_name = product_url_name
        self._rating = rating
        self._review_count = review_count
        self._rrp = rrp
        self._rrpformatted = rrpformatted
        self._saving_amount = saving_amount
        self._saving_amount_formated = saving_amount_formated
        self._short_description = short_description
        self._short_title = short_title
        self._sort_order = sort_order
        self._special_offer_available = special_offer_available
        self._special_reservation = special_reservation
        self._special_reservation_details = special_reservation_details
        self._ssl_supported = ssl_supported
        self._sub_cat_ids = sub_cat_ids
        self._supplier_code = supplier_code
        self._supplier_name = supplier_name
        self._thumbnail_hi_res_url = thumbnail_hi_res_url
        self._thumbnail_url = thumbnail_url
        self._title = title
        self._translation_level = translation_level
        self._unique_short_description = unique_short_description
        self._video_count = video_count
        self._web_url = web_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchProducts200ResponseAllOfDataInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The searchProducts_200_response_allOf_data_inner of this SearchProducts200ResponseAllOfDataInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admission(self):
        """Gets the admission of this SearchProducts200ResponseAllOfDataInner.

        ignore (Viator only)

        :return: The admission of this SearchProducts200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._admission

    @admission.setter
    def admission(self, admission):
        """Sets the admission of this SearchProducts200ResponseAllOfDataInner.

        ignore (Viator only)

        :param admission: The admission of this SearchProducts200ResponseAllOfDataInner.
        :type admission: str
        """

        self._admission = admission

    @property
    def available(self):
        """Gets the available of this SearchProducts200ResponseAllOfDataInner.

        ignore (Viator only)

        :return: The available of this SearchProducts200ResponseAllOfDataInner.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this SearchProducts200ResponseAllOfDataInner.

        ignore (Viator only)

        :param available: The available of this SearchProducts200ResponseAllOfDataInner.
        :type available: bool
        """

        self._available = available

    @property
    def booking_engine_id(self):
        """Gets the booking_engine_id of this SearchProducts200ResponseAllOfDataInner.


        :return: The booking_engine_id of this SearchProducts200ResponseAllOfDataInner.
        :rtype: BookingEngineId
        """
        return self._booking_engine_id

    @booking_engine_id.setter
    def booking_engine_id(self, booking_engine_id):
        """Sets the booking_engine_id of this SearchProducts200ResponseAllOfDataInner.


        :param booking_engine_id: The booking_engine_id of this SearchProducts200ResponseAllOfDataInner.
        :type booking_engine_id: BookingEngineId
        """

        self._booking_engine_id = booking_engine_id

    @property
    def cat_ids(self):
        """Gets the cat_ids of this SearchProducts200ResponseAllOfDataInner.

        **list** of unique numeric category identifiers for *this* product - the `categoryId` for the destination is available from the [/taxonomy/categories](#operation/taxonomyCategories) service 

        :return: The cat_ids of this SearchProducts200ResponseAllOfDataInner.
        :rtype: List[int]
        """
        return self._cat_ids

    @cat_ids.setter
    def cat_ids(self, cat_ids):
        """Sets the cat_ids of this SearchProducts200ResponseAllOfDataInner.

        **list** of unique numeric category identifiers for *this* product - the `categoryId` for the destination is available from the [/taxonomy/categories](#operation/taxonomyCategories) service 

        :param cat_ids: The cat_ids of this SearchProducts200ResponseAllOfDataInner.
        :type cat_ids: List[int]
        """

        self._cat_ids = cat_ids

    @property
    def code(self):
        """Gets the code of this SearchProducts200ResponseAllOfDataInner.

        **unique alphanumeric identifier** of *this* product

        :return: The code of this SearchProducts200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this SearchProducts200ResponseAllOfDataInner.

        **unique alphanumeric identifier** of *this* product

        :param code: The code of this SearchProducts200ResponseAllOfDataInner.
        :type code: str
        """

        self._code = code

    @property
    def currency_code(self):
        """Gets the currency_code of this SearchProducts200ResponseAllOfDataInner.

        **indicator** of the currency in which *this* product's prices are displayed

        :return: The currency_code of this SearchProducts200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this SearchProducts200ResponseAllOfDataInner.

        **indicator** of the currency in which *this* product's prices are displayed

        :param currency_code: The currency_code of this SearchProducts200ResponseAllOfDataInner.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def duration(self):
        """Gets the duration of this SearchProducts200ResponseAllOfDataInner.

        **natural-language description** of the duration of *this* product

        :return: The duration of this SearchProducts200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this SearchProducts200ResponseAllOfDataInner.

        **natural-language description** of the duration of *this* product

        :param duration: The duration of this SearchProducts200ResponseAllOfDataInner.
        :type duration: str
        """

        self._duration = duration

    @property
    def essential(self):
        """Gets the essential of this SearchProducts200ResponseAllOfDataInner.

        ignore (Viator only)

        :return: The essential of this SearchProducts200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._essential

    @essential.setter
    def essential(self, essential):
        """Sets the essential of this SearchProducts200ResponseAllOfDataInner.

        ignore (Viator only)

        :param essential: The essential of this SearchProducts200ResponseAllOfDataInner.
        :type essential: str
        """

        self._essential = essential

    @property
    def merchant_cancellable(self):
        """Gets the merchant_cancellable of this SearchProducts200ResponseAllOfDataInner.

        ignore (Viator only)       For cancellation information regarding the booking, please refer to the `merchantTermsAndConditions` object 

        :return: The merchant_cancellable of this SearchProducts200ResponseAllOfDataInner.
        :rtype: bool
        """
        return self._merchant_cancellable

    @merchant_cancellable.setter
    def merchant_cancellable(self, merchant_cancellable):
        """Sets the merchant_cancellable of this SearchProducts200ResponseAllOfDataInner.

        ignore (Viator only)       For cancellation information regarding the booking, please refer to the `merchantTermsAndConditions` object 

        :param merchant_cancellable: The merchant_cancellable of this SearchProducts200ResponseAllOfDataInner.
        :type merchant_cancellable: bool
        """

        self._merchant_cancellable = merchant_cancellable

    @property
    def merchant_net_price_from(self):
        """Gets the merchant_net_price_from of this SearchProducts200ResponseAllOfDataInner.

        Numeric 'from' (lowest possible) price that Viator will invoice the merchant for the sale of this product, excluding the transaction fee; i.e. the merchant net rate  For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing) 

        :return: The merchant_net_price_from of this SearchProducts200ResponseAllOfDataInner.
        :rtype: float
        """
        return self._merchant_net_price_from

    @merchant_net_price_from.setter
    def merchant_net_price_from(self, merchant_net_price_from):
        """Sets the merchant_net_price_from of this SearchProducts200ResponseAllOfDataInner.

        Numeric 'from' (lowest possible) price that Viator will invoice the merchant for the sale of this product, excluding the transaction fee; i.e. the merchant net rate  For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing) 

        :param merchant_net_price_from: The merchant_net_price_from of this SearchProducts200ResponseAllOfDataInner.
        :type merchant_net_price_from: float
        """

        self._merchant_net_price_from = merchant_net_price_from

    @property
    def merchant_net_price_from_formatted(self):
        """Gets the merchant_net_price_from_formatted of this SearchProducts200ResponseAllOfDataInner.

        Currency-formatted 'from' (lowest possible) price that Viator will invoice the merchant for the sale of this product, excluding the transaction fee (i.e. the merchant net rate)  For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing) 

        :return: The merchant_net_price_from_formatted of this SearchProducts200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._merchant_net_price_from_formatted

    @merchant_net_price_from_formatted.setter
    def merchant_net_price_from_formatted(self, merchant_net_price_from_formatted):
        """Sets the merchant_net_price_from_formatted of this SearchProducts200ResponseAllOfDataInner.

        Currency-formatted 'from' (lowest possible) price that Viator will invoice the merchant for the sale of this product, excluding the transaction fee (i.e. the merchant net rate)  For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing) 

        :param merchant_net_price_from_formatted: The merchant_net_price_from_formatted of this SearchProducts200ResponseAllOfDataInner.
        :type merchant_net_price_from_formatted: str
        """

        self._merchant_net_price_from_formatted = merchant_net_price_from_formatted

    @property
    def on_request_period(self):
        """Gets the on_request_period of this SearchProducts200ResponseAllOfDataInner.

        **number** of hours before the travel date that *this* product will be 'on-request' for - this field will contain a value if the `bookingEngineId` is `'FreesaleOnRequestBE'` - an `onRequestPeriod` of 48 hours means that *this* product is freesale up until 48 hours before the travel date, and is on-request for 48 hours or less until the travel date - **note**: 'hours in advance' (the number of hours a product is available for booking before the travel date) may also affect this; however, this value is not available in the API 

        :return: The on_request_period of this SearchProducts200ResponseAllOfDataInner.
        :rtype: int
        """
        return self._on_request_period

    @on_request_period.setter
    def on_request_period(self, on_request_period):
        """Sets the on_request_period of this SearchProducts200ResponseAllOfDataInner.

        **number** of hours before the travel date that *this* product will be 'on-request' for - this field will contain a value if the `bookingEngineId` is `'FreesaleOnRequestBE'` - an `onRequestPeriod` of 48 hours means that *this* product is freesale up until 48 hours before the travel date, and is on-request for 48 hours or less until the travel date - **note**: 'hours in advance' (the number of hours a product is available for booking before the travel date) may also affect this; however, this value is not available in the API 

        :param on_request_period: The on_request_period of this SearchProducts200ResponseAllOfDataInner.
        :type on_request_period: int
        """

        self._on_request_period = on_request_period

    @property
    def on_sale(self):
        """Gets the on_sale of this SearchProducts200ResponseAllOfDataInner.

        Ignore (Viator only) 

        :return: The on_sale of this SearchProducts200ResponseAllOfDataInner.
        :rtype: bool
        """
        return self._on_sale

    @on_sale.setter
    def on_sale(self, on_sale):
        """Sets the on_sale of this SearchProducts200ResponseAllOfDataInner.

        Ignore (Viator only) 

        :param on_sale: The on_sale of this SearchProducts200ResponseAllOfDataInner.
        :type on_sale: bool
        """

        self._on_sale = on_sale

    @property
    def panorama_count(self):
        """Gets the panorama_count of this SearchProducts200ResponseAllOfDataInner.

        **number** of panoramic images available for *this* product

        :return: The panorama_count of this SearchProducts200ResponseAllOfDataInner.
        :rtype: int
        """
        return self._panorama_count

    @panorama_count.setter
    def panorama_count(self, panorama_count):
        """Sets the panorama_count of this SearchProducts200ResponseAllOfDataInner.

        **number** of panoramic images available for *this* product

        :param panorama_count: The panorama_count of this SearchProducts200ResponseAllOfDataInner.
        :type panorama_count: int
        """

        self._panorama_count = panorama_count

    @property
    def pas(self):
        """Gets the pas of this SearchProducts200ResponseAllOfDataInner.

        **object** detailing product availability - `pas` stands for Product Availability Schema 

        :return: The pas of this SearchProducts200ResponseAllOfDataInner.
        :rtype: object
        """
        return self._pas

    @pas.setter
    def pas(self, pas):
        """Sets the pas of this SearchProducts200ResponseAllOfDataInner.

        **object** detailing product availability - `pas` stands for Product Availability Schema 

        :param pas: The pas of this SearchProducts200ResponseAllOfDataInner.
        :type pas: object
        """

        self._pas = pas

    @property
    def photo_count(self):
        """Gets the photo_count of this SearchProducts200ResponseAllOfDataInner.

        **number** of user photos published for *this* product

        :return: The photo_count of this SearchProducts200ResponseAllOfDataInner.
        :rtype: int
        """
        return self._photo_count

    @photo_count.setter
    def photo_count(self, photo_count):
        """Sets the photo_count of this SearchProducts200ResponseAllOfDataInner.

        **number** of user photos published for *this* product

        :param photo_count: The photo_count of this SearchProducts200ResponseAllOfDataInner.
        :type photo_count: int
        """

        self._photo_count = photo_count

    @property
    def price(self):
        """Gets the price of this SearchProducts200ResponseAllOfDataInner.

        **suggested sell ('from') price** for this product in the currency set in the `currencyCode` parameter. This is the cheapest sell price, taking into consideration off-peak periods and discounts on larger groups.     - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :return: The price of this SearchProducts200ResponseAllOfDataInner.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this SearchProducts200ResponseAllOfDataInner.

        **suggested sell ('from') price** for this product in the currency set in the `currencyCode` parameter. This is the cheapest sell price, taking into consideration off-peak periods and discounts on larger groups.     - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :param price: The price of this SearchProducts200ResponseAllOfDataInner.
        :type price: float
        """

        self._price = price

    @property
    def price_formatted(self):
        """Gets the price_formatted of this SearchProducts200ResponseAllOfDataInner.

        **currency-formatted suggested sell ('from') price** for this product in the currency set in the `currencyCode` parameter  - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :return: The price_formatted of this SearchProducts200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._price_formatted

    @price_formatted.setter
    def price_formatted(self, price_formatted):
        """Sets the price_formatted of this SearchProducts200ResponseAllOfDataInner.

        **currency-formatted suggested sell ('from') price** for this product in the currency set in the `currencyCode` parameter  - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :param price_formatted: The price_formatted of this SearchProducts200ResponseAllOfDataInner.
        :type price_formatted: str
        """

        self._price_formatted = price_formatted

    @property
    def primary_destination_id(self):
        """Gets the primary_destination_id of this SearchProducts200ResponseAllOfDataInner.

        **unique numeric identifier** of *this* product's primary destination

        :return: The primary_destination_id of this SearchProducts200ResponseAllOfDataInner.
        :rtype: int
        """
        return self._primary_destination_id

    @primary_destination_id.setter
    def primary_destination_id(self, primary_destination_id):
        """Sets the primary_destination_id of this SearchProducts200ResponseAllOfDataInner.

        **unique numeric identifier** of *this* product's primary destination

        :param primary_destination_id: The primary_destination_id of this SearchProducts200ResponseAllOfDataInner.
        :type primary_destination_id: int
        """

        self._primary_destination_id = primary_destination_id

    @property
    def primary_destination_name(self):
        """Gets the primary_destination_name of this SearchProducts200ResponseAllOfDataInner.

        **natural-language name** of *this* product's primary destination

        :return: The primary_destination_name of this SearchProducts200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._primary_destination_name

    @primary_destination_name.setter
    def primary_destination_name(self, primary_destination_name):
        """Sets the primary_destination_name of this SearchProducts200ResponseAllOfDataInner.

        **natural-language name** of *this* product's primary destination

        :param primary_destination_name: The primary_destination_name of this SearchProducts200ResponseAllOfDataInner.
        :type primary_destination_name: str
        """

        self._primary_destination_name = primary_destination_name

    @property
    def primary_destination_url_name(self):
        """Gets the primary_destination_url_name of this SearchProducts200ResponseAllOfDataInner.

        **URL-formatted name** of *this* product's primary destination

        :return: The primary_destination_url_name of this SearchProducts200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._primary_destination_url_name

    @primary_destination_url_name.setter
    def primary_destination_url_name(self, primary_destination_url_name):
        """Sets the primary_destination_url_name of this SearchProducts200ResponseAllOfDataInner.

        **URL-formatted name** of *this* product's primary destination

        :param primary_destination_url_name: The primary_destination_url_name of this SearchProducts200ResponseAllOfDataInner.
        :type primary_destination_url_name: str
        """

        self._primary_destination_url_name = primary_destination_url_name

    @property
    def primary_group_id(self):
        """Gets the primary_group_id of this SearchProducts200ResponseAllOfDataInner.

        ignore (Viator only)

        :return: The primary_group_id of this SearchProducts200ResponseAllOfDataInner.
        :rtype: int
        """
        return self._primary_group_id

    @primary_group_id.setter
    def primary_group_id(self, primary_group_id):
        """Sets the primary_group_id of this SearchProducts200ResponseAllOfDataInner.

        ignore (Viator only)

        :param primary_group_id: The primary_group_id of this SearchProducts200ResponseAllOfDataInner.
        :type primary_group_id: int
        """

        self._primary_group_id = primary_group_id

    @property
    def product_url_name(self):
        """Gets the product_url_name of this SearchProducts200ResponseAllOfDataInner.

        **URL-formatted name** of *this* product

        :return: The product_url_name of this SearchProducts200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._product_url_name

    @product_url_name.setter
    def product_url_name(self, product_url_name):
        """Sets the product_url_name of this SearchProducts200ResponseAllOfDataInner.

        **URL-formatted name** of *this* product

        :param product_url_name: The product_url_name of this SearchProducts200ResponseAllOfDataInner.
        :type product_url_name: str
        """

        self._product_url_name = product_url_name

    @property
    def rating(self):
        """Gets the rating of this SearchProducts200ResponseAllOfDataInner.

        **average user rating** of *this* product  users rate products by assigning a star-rating from 1-5; this value shows the average of the star ratings provided by users;  the `ratingCounts` associative array in this response provides a breakdown of how many submissions for each star rating have been received 

        :return: The rating of this SearchProducts200ResponseAllOfDataInner.
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this SearchProducts200ResponseAllOfDataInner.

        **average user rating** of *this* product  users rate products by assigning a star-rating from 1-5; this value shows the average of the star ratings provided by users;  the `ratingCounts` associative array in this response provides a breakdown of how many submissions for each star rating have been received 

        :param rating: The rating of this SearchProducts200ResponseAllOfDataInner.
        :type rating: float
        """

        self._rating = rating

    @property
    def review_count(self):
        """Gets the review_count of this SearchProducts200ResponseAllOfDataInner.

        **number** of user reviews that have been submitted by users for *this* product  If your account has been configured to limit the number of reviews you can receive, this value will never be higher than that. Otherwise, this value will show the total number of reviews available for this product. If there are more than 24 reviews available, you will need to use the [/product/reviews](#operation/productReviews) service to retrieve the remainder of the reviews. 

        :return: The review_count of this SearchProducts200ResponseAllOfDataInner.
        :rtype: int
        """
        return self._review_count

    @review_count.setter
    def review_count(self, review_count):
        """Sets the review_count of this SearchProducts200ResponseAllOfDataInner.

        **number** of user reviews that have been submitted by users for *this* product  If your account has been configured to limit the number of reviews you can receive, this value will never be higher than that. Otherwise, this value will show the total number of reviews available for this product. If there are more than 24 reviews available, you will need to use the [/product/reviews](#operation/productReviews) service to retrieve the remainder of the reviews. 

        :param review_count: The review_count of this SearchProducts200ResponseAllOfDataInner.
        :type review_count: int
        """

        self._review_count = review_count

    @property
    def rrp(self):
        """Gets the rrp of this SearchProducts200ResponseAllOfDataInner.

        **numeric original price** for this product if the product is on special / a discount has been applied. `0` if there is no discount on this product. See [Special offers and on-sale pricing](#section/Key-concepts/Special-offers-and-on-sale-pricing) for more information.

        :return: The rrp of this SearchProducts200ResponseAllOfDataInner.
        :rtype: int
        """
        return self._rrp

    @rrp.setter
    def rrp(self, rrp):
        """Sets the rrp of this SearchProducts200ResponseAllOfDataInner.

        **numeric original price** for this product if the product is on special / a discount has been applied. `0` if there is no discount on this product. See [Special offers and on-sale pricing](#section/Key-concepts/Special-offers-and-on-sale-pricing) for more information.

        :param rrp: The rrp of this SearchProducts200ResponseAllOfDataInner.
        :type rrp: int
        """

        self._rrp = rrp

    @property
    def rrpformatted(self):
        """Gets the rrpformatted of this SearchProducts200ResponseAllOfDataInner.

        **currency-formatted original price** for this product if the product is on special / a discount has been applied. Empty string if there is no discount on this product. See [Special offers and on-sale pricing](#section/Key-concepts/Special-offers-and-on-sale-pricing) for more information.

        :return: The rrpformatted of this SearchProducts200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._rrpformatted

    @rrpformatted.setter
    def rrpformatted(self, rrpformatted):
        """Sets the rrpformatted of this SearchProducts200ResponseAllOfDataInner.

        **currency-formatted original price** for this product if the product is on special / a discount has been applied. Empty string if there is no discount on this product. See [Special offers and on-sale pricing](#section/Key-concepts/Special-offers-and-on-sale-pricing) for more information.

        :param rrpformatted: The rrpformatted of this SearchProducts200ResponseAllOfDataInner.
        :type rrpformatted: str
        """

        self._rrpformatted = rrpformatted

    @property
    def saving_amount(self):
        """Gets the saving_amount of this SearchProducts200ResponseAllOfDataInner.

        Ignore (Viator only) 

        :return: The saving_amount of this SearchProducts200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._saving_amount

    @saving_amount.setter
    def saving_amount(self, saving_amount):
        """Sets the saving_amount of this SearchProducts200ResponseAllOfDataInner.

        Ignore (Viator only) 

        :param saving_amount: The saving_amount of this SearchProducts200ResponseAllOfDataInner.
        :type saving_amount: str
        """

        self._saving_amount = saving_amount

    @property
    def saving_amount_formated(self):
        """Gets the saving_amount_formated of this SearchProducts200ResponseAllOfDataInner.

        Ignore (Viator only) 

        :return: The saving_amount_formated of this SearchProducts200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._saving_amount_formated

    @saving_amount_formated.setter
    def saving_amount_formated(self, saving_amount_formated):
        """Sets the saving_amount_formated of this SearchProducts200ResponseAllOfDataInner.

        Ignore (Viator only) 

        :param saving_amount_formated: The saving_amount_formated of this SearchProducts200ResponseAllOfDataInner.
        :type saving_amount_formated: str
        """

        self._saving_amount_formated = saving_amount_formated

    @property
    def short_description(self):
        """Gets the short_description of this SearchProducts200ResponseAllOfDataInner.

        **HTML-formatted natural-language description** of *this* product

        :return: The short_description of this SearchProducts200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this SearchProducts200ResponseAllOfDataInner.

        **HTML-formatted natural-language description** of *this* product

        :param short_description: The short_description of this SearchProducts200ResponseAllOfDataInner.
        :type short_description: str
        """

        self._short_description = short_description

    @property
    def short_title(self):
        """Gets the short_title of this SearchProducts200ResponseAllOfDataInner.

        **short natural-language title** of *this* product (for use when there is a need to conserve space)

        :return: The short_title of this SearchProducts200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._short_title

    @short_title.setter
    def short_title(self, short_title):
        """Sets the short_title of this SearchProducts200ResponseAllOfDataInner.

        **short natural-language title** of *this* product (for use when there is a need to conserve space)

        :param short_title: The short_title of this SearchProducts200ResponseAllOfDataInner.
        :type short_title: str
        """

        self._short_title = short_title

    @property
    def sort_order(self):
        """Gets the sort_order of this SearchProducts200ResponseAllOfDataInner.

        **sort order** for *this* product

        :return: The sort_order of this SearchProducts200ResponseAllOfDataInner.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this SearchProducts200ResponseAllOfDataInner.

        **sort order** for *this* product

        :param sort_order: The sort_order of this SearchProducts200ResponseAllOfDataInner.
        :type sort_order: int
        """

        self._sort_order = sort_order

    @property
    def special_offer_available(self):
        """Gets the special_offer_available of this SearchProducts200ResponseAllOfDataInner.

        ignore (Viator only)

        :return: The special_offer_available of this SearchProducts200ResponseAllOfDataInner.
        :rtype: bool
        """
        return self._special_offer_available

    @special_offer_available.setter
    def special_offer_available(self, special_offer_available):
        """Sets the special_offer_available of this SearchProducts200ResponseAllOfDataInner.

        ignore (Viator only)

        :param special_offer_available: The special_offer_available of this SearchProducts200ResponseAllOfDataInner.
        :type special_offer_available: bool
        """

        self._special_offer_available = special_offer_available

    @property
    def special_reservation(self):
        """Gets the special_reservation of this SearchProducts200ResponseAllOfDataInner.

        ignore (Viator only)

        :return: The special_reservation of this SearchProducts200ResponseAllOfDataInner.
        :rtype: bool
        """
        return self._special_reservation

    @special_reservation.setter
    def special_reservation(self, special_reservation):
        """Sets the special_reservation of this SearchProducts200ResponseAllOfDataInner.

        ignore (Viator only)

        :param special_reservation: The special_reservation of this SearchProducts200ResponseAllOfDataInner.
        :type special_reservation: bool
        """

        self._special_reservation = special_reservation

    @property
    def special_reservation_details(self):
        """Gets the special_reservation_details of this SearchProducts200ResponseAllOfDataInner.

        ignore (Viator only)

        :return: The special_reservation_details of this SearchProducts200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._special_reservation_details

    @special_reservation_details.setter
    def special_reservation_details(self, special_reservation_details):
        """Sets the special_reservation_details of this SearchProducts200ResponseAllOfDataInner.

        ignore (Viator only)

        :param special_reservation_details: The special_reservation_details of this SearchProducts200ResponseAllOfDataInner.
        :type special_reservation_details: str
        """

        self._special_reservation_details = special_reservation_details

    @property
    def ssl_supported(self):
        """Gets the ssl_supported of this SearchProducts200ResponseAllOfDataInner.

        ignore (Viator only)

        :return: The ssl_supported of this SearchProducts200ResponseAllOfDataInner.
        :rtype: object
        """
        return self._ssl_supported

    @ssl_supported.setter
    def ssl_supported(self, ssl_supported):
        """Sets the ssl_supported of this SearchProducts200ResponseAllOfDataInner.

        ignore (Viator only)

        :param ssl_supported: The ssl_supported of this SearchProducts200ResponseAllOfDataInner.
        :type ssl_supported: object
        """

        self._ssl_supported = ssl_supported

    @property
    def sub_cat_ids(self):
        """Gets the sub_cat_ids of this SearchProducts200ResponseAllOfDataInner.

        **list** of unique numeric subcategory identifiers for *this* product - the `subcategoryId` for the destination is available from the [/taxonomy/categories](#operation/taxonomyCategories) service 

        :return: The sub_cat_ids of this SearchProducts200ResponseAllOfDataInner.
        :rtype: List[int]
        """
        return self._sub_cat_ids

    @sub_cat_ids.setter
    def sub_cat_ids(self, sub_cat_ids):
        """Sets the sub_cat_ids of this SearchProducts200ResponseAllOfDataInner.

        **list** of unique numeric subcategory identifiers for *this* product - the `subcategoryId` for the destination is available from the [/taxonomy/categories](#operation/taxonomyCategories) service 

        :param sub_cat_ids: The sub_cat_ids of this SearchProducts200ResponseAllOfDataInner.
        :type sub_cat_ids: List[int]
        """

        self._sub_cat_ids = sub_cat_ids

    @property
    def supplier_code(self):
        """Gets the supplier_code of this SearchProducts200ResponseAllOfDataInner.

        **unique identifier** of *this* product's supplier in text string format

        :return: The supplier_code of this SearchProducts200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._supplier_code

    @supplier_code.setter
    def supplier_code(self, supplier_code):
        """Sets the supplier_code of this SearchProducts200ResponseAllOfDataInner.

        **unique identifier** of *this* product's supplier in text string format

        :param supplier_code: The supplier_code of this SearchProducts200ResponseAllOfDataInner.
        :type supplier_code: str
        """

        self._supplier_code = supplier_code

    @property
    def supplier_name(self):
        """Gets the supplier_name of this SearchProducts200ResponseAllOfDataInner.

        **natural-language name** of *this* product's supplier

        :return: The supplier_name of this SearchProducts200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._supplier_name

    @supplier_name.setter
    def supplier_name(self, supplier_name):
        """Sets the supplier_name of this SearchProducts200ResponseAllOfDataInner.

        **natural-language name** of *this* product's supplier

        :param supplier_name: The supplier_name of this SearchProducts200ResponseAllOfDataInner.
        :type supplier_name: str
        """

        self._supplier_name = supplier_name

    @property
    def thumbnail_hi_res_url(self):
        """Gets the thumbnail_hi_res_url of this SearchProducts200ResponseAllOfDataInner.

        **URL** for the high resolution thumbnail for *this* product

        :return: The thumbnail_hi_res_url of this SearchProducts200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._thumbnail_hi_res_url

    @thumbnail_hi_res_url.setter
    def thumbnail_hi_res_url(self, thumbnail_hi_res_url):
        """Sets the thumbnail_hi_res_url of this SearchProducts200ResponseAllOfDataInner.

        **URL** for the high resolution thumbnail for *this* product

        :param thumbnail_hi_res_url: The thumbnail_hi_res_url of this SearchProducts200ResponseAllOfDataInner.
        :type thumbnail_hi_res_url: str
        """

        self._thumbnail_hi_res_url = thumbnail_hi_res_url

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this SearchProducts200ResponseAllOfDataInner.

        **URL** for *this* product's thumbnail image

        :return: The thumbnail_url of this SearchProducts200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this SearchProducts200ResponseAllOfDataInner.

        **URL** for *this* product's thumbnail image

        :param thumbnail_url: The thumbnail_url of this SearchProducts200ResponseAllOfDataInner.
        :type thumbnail_url: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def title(self):
        """Gets the title of this SearchProducts200ResponseAllOfDataInner.

        **natural-language title** of *this* product

        :return: The title of this SearchProducts200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SearchProducts200ResponseAllOfDataInner.

        **natural-language title** of *this* product

        :param title: The title of this SearchProducts200ResponseAllOfDataInner.
        :type title: str
        """

        self._title = title

    @property
    def translation_level(self):
        """Gets the translation_level of this SearchProducts200ResponseAllOfDataInner.


        :return: The translation_level of this SearchProducts200ResponseAllOfDataInner.
        :rtype: TranslationLevel
        """
        return self._translation_level

    @translation_level.setter
    def translation_level(self, translation_level):
        """Sets the translation_level of this SearchProducts200ResponseAllOfDataInner.


        :param translation_level: The translation_level of this SearchProducts200ResponseAllOfDataInner.
        :type translation_level: TranslationLevel
        """

        self._translation_level = translation_level

    @property
    def unique_short_description(self):
        """Gets the unique_short_description of this SearchProducts200ResponseAllOfDataInner.

        ignore (Viator only)

        :return: The unique_short_description of this SearchProducts200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._unique_short_description

    @unique_short_description.setter
    def unique_short_description(self, unique_short_description):
        """Sets the unique_short_description of this SearchProducts200ResponseAllOfDataInner.

        ignore (Viator only)

        :param unique_short_description: The unique_short_description of this SearchProducts200ResponseAllOfDataInner.
        :type unique_short_description: str
        """

        self._unique_short_description = unique_short_description

    @property
    def video_count(self):
        """Gets the video_count of this SearchProducts200ResponseAllOfDataInner.

        ignore (Viator only) – videos are not available to partners

        :return: The video_count of this SearchProducts200ResponseAllOfDataInner.
        :rtype: int
        """
        return self._video_count

    @video_count.setter
    def video_count(self, video_count):
        """Sets the video_count of this SearchProducts200ResponseAllOfDataInner.

        ignore (Viator only) – videos are not available to partners

        :param video_count: The video_count of this SearchProducts200ResponseAllOfDataInner.
        :type video_count: int
        """

        self._video_count = video_count

    @property
    def web_url(self):
        """Gets the web_url of this SearchProducts200ResponseAllOfDataInner.

        ignore (Viator only)

        :return: The web_url of this SearchProducts200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._web_url

    @web_url.setter
    def web_url(self, web_url):
        """Sets the web_url of this SearchProducts200ResponseAllOfDataInner.

        ignore (Viator only)

        :param web_url: The web_url of this SearchProducts200ResponseAllOfDataInner.
        :type web_url: str
        """

        self._web_url = web_url
