# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BookingStatusItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amended: bool=None, cancelled: bool=None, confirmed: bool=None, failed: bool=None, level: str=None, pending: bool=None, status: int=None, text: str=None, type: str=None):
        """BookingStatusItem - a model defined in OpenAPI

        :param amended: The amended of this BookingStatusItem.
        :param cancelled: The cancelled of this BookingStatusItem.
        :param confirmed: The confirmed of this BookingStatusItem.
        :param failed: The failed of this BookingStatusItem.
        :param level: The level of this BookingStatusItem.
        :param pending: The pending of this BookingStatusItem.
        :param status: The status of this BookingStatusItem.
        :param text: The text of this BookingStatusItem.
        :param type: The type of this BookingStatusItem.
        """
        self.openapi_types = {
            'amended': bool,
            'cancelled': bool,
            'confirmed': bool,
            'failed': bool,
            'level': str,
            'pending': bool,
            'status': int,
            'text': str,
            'type': str
        }

        self.attribute_map = {
            'amended': 'amended',
            'cancelled': 'cancelled',
            'confirmed': 'confirmed',
            'failed': 'failed',
            'level': 'level',
            'pending': 'pending',
            'status': 'status',
            'text': 'text',
            'type': 'type'
        }

        self._amended = amended
        self._cancelled = cancelled
        self._confirmed = confirmed
        self._failed = failed
        self._level = level
        self._pending = pending
        self._status = status
        self._text = text
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookingStatusItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The bookingStatus_item of this BookingStatusItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amended(self):
        """Gets the amended of this BookingStatusItem.

        **indicator**: `true` if *this* item's booking has been amended

        :return: The amended of this BookingStatusItem.
        :rtype: bool
        """
        return self._amended

    @amended.setter
    def amended(self, amended):
        """Sets the amended of this BookingStatusItem.

        **indicator**: `true` if *this* item's booking has been amended

        :param amended: The amended of this BookingStatusItem.
        :type amended: bool
        """

        self._amended = amended

    @property
    def cancelled(self):
        """Gets the cancelled of this BookingStatusItem.

        **indicator**: `true` if *this* item's booking has been cancelled

        :return: The cancelled of this BookingStatusItem.
        :rtype: bool
        """
        return self._cancelled

    @cancelled.setter
    def cancelled(self, cancelled):
        """Sets the cancelled of this BookingStatusItem.

        **indicator**: `true` if *this* item's booking has been cancelled

        :param cancelled: The cancelled of this BookingStatusItem.
        :type cancelled: bool
        """

        self._cancelled = cancelled

    @property
    def confirmed(self):
        """Gets the confirmed of this BookingStatusItem.

        **indicator**: `true` if *this* item's booking is confirmed

        :return: The confirmed of this BookingStatusItem.
        :rtype: bool
        """
        return self._confirmed

    @confirmed.setter
    def confirmed(self, confirmed):
        """Sets the confirmed of this BookingStatusItem.

        **indicator**: `true` if *this* item's booking is confirmed

        :param confirmed: The confirmed of this BookingStatusItem.
        :type confirmed: bool
        """

        self._confirmed = confirmed

    @property
    def failed(self):
        """Gets the failed of this BookingStatusItem.

        **indicator**: `true` if *this* item's booking has failed

        :return: The failed of this BookingStatusItem.
        :rtype: bool
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this BookingStatusItem.

        **indicator**: `true` if *this* item's booking has failed

        :param failed: The failed of this BookingStatusItem.
        :type failed: bool
        """

        self._failed = failed

    @property
    def level(self):
        """Gets the level of this BookingStatusItem.

        **level** of *this* item's booking status

        :return: The level of this BookingStatusItem.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this BookingStatusItem.

        **level** of *this* item's booking status

        :param level: The level of this BookingStatusItem.
        :type level: str
        """
        allowed_values = ["ITEM", "ITINERARY"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def pending(self):
        """Gets the pending of this BookingStatusItem.

        **indicator**: `true` if *this* item's booking is pending

        :return: The pending of this BookingStatusItem.
        :rtype: bool
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this BookingStatusItem.

        **indicator**: `true` if *this* item's booking is pending

        :param pending: The pending of this BookingStatusItem.
        :type pending: bool
        """

        self._pending = pending

    @property
    def status(self):
        """Gets the status of this BookingStatusItem.

        **numeric identifier** of *this* item's booking status

        :return: The status of this BookingStatusItem.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BookingStatusItem.

        **numeric identifier** of *this* item's booking status

        :param status: The status of this BookingStatusItem.
        :type status: int
        """

        self._status = status

    @property
    def text(self):
        """Gets the text of this BookingStatusItem.

        **natural-language description** of *this* item's booking status; e.g., 'Waiting to be booked'

        :return: The text of this BookingStatusItem.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this BookingStatusItem.

        **natural-language description** of *this* item's booking status; e.g., 'Waiting to be booked'

        :param text: The text of this BookingStatusItem.
        :type text: str
        """

        self._text = text

    @property
    def type(self):
        """Gets the type of this BookingStatusItem.

        **specifier** of *this* item's booking status * See: [bookingStatus fields and meanings](#section/Appendices/bookingStatus-field-values-and-meanings) 

        :return: The type of this BookingStatusItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BookingStatusItem.

        **specifier** of *this* item's booking status * See: [bookingStatus fields and meanings](#section/Appendices/bookingStatus-field-values-and-meanings) 

        :param type: The type of this BookingStatusItem.
        :type type: str
        """
        allowed_values = ["WAITING", "CONFIRMED", "UNAVAILABLE", "PENDING", "FAILED", "CANCELLED", "EXPIRED", "AMENDED", "PENDING_AMEND", "REJECTED", "ON_HOLD"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
