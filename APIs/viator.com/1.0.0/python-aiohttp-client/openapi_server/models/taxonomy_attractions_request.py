# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TaxonomyAttractionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dest_id: int=None, sort_order: str=None, top_x: str=None):
        """TaxonomyAttractionsRequest - a model defined in OpenAPI

        :param dest_id: The dest_id of this TaxonomyAttractionsRequest.
        :param sort_order: The sort_order of this TaxonomyAttractionsRequest.
        :param top_x: The top_x of this TaxonomyAttractionsRequest.
        """
        self.openapi_types = {
            'dest_id': int,
            'sort_order': str,
            'top_x': str
        }

        self.attribute_map = {
            'dest_id': 'destId',
            'sort_order': 'sortOrder',
            'top_x': 'topX'
        }

        self._dest_id = dest_id
        self._sort_order = sort_order
        self._top_x = top_x

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxonomyAttractionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The taxonomyAttractions_request of this TaxonomyAttractionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dest_id(self):
        """Gets the dest_id of this TaxonomyAttractionsRequest.

        **unique numeric identifier** of the destination in which to search for attractions

        :return: The dest_id of this TaxonomyAttractionsRequest.
        :rtype: int
        """
        return self._dest_id

    @dest_id.setter
    def dest_id(self, dest_id):
        """Sets the dest_id of this TaxonomyAttractionsRequest.

        **unique numeric identifier** of the destination in which to search for attractions

        :param dest_id: The dest_id of this TaxonomyAttractionsRequest.
        :type dest_id: int
        """

        self._dest_id = dest_id

    @property
    def sort_order(self):
        """Gets the sort_order of this TaxonomyAttractionsRequest.

        **sort order** in which to return the results that is *one of*:   * `\"SEO_PUBLISHED_DATE_D\"`: publish date (descending)   * `\"SEO_PUBLISHED_DATE_A\"`: publish date (ascending)   * `\"SEO_REVIEW_AVG_RATING_D\"`: traveler rating (high→low)   * `\"SEO_REVIEW_AVG_RATING_A\"`: traveler rating (low→high)   * `\"SEO_ALPHABETICAL\"`: alphabetical (A→Z) 

        :return: The sort_order of this TaxonomyAttractionsRequest.
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this TaxonomyAttractionsRequest.

        **sort order** in which to return the results that is *one of*:   * `\"SEO_PUBLISHED_DATE_D\"`: publish date (descending)   * `\"SEO_PUBLISHED_DATE_A\"`: publish date (ascending)   * `\"SEO_REVIEW_AVG_RATING_D\"`: traveler rating (high→low)   * `\"SEO_REVIEW_AVG_RATING_A\"`: traveler rating (low→high)   * `\"SEO_ALPHABETICAL\"`: alphabetical (A→Z) 

        :param sort_order: The sort_order of this TaxonomyAttractionsRequest.
        :type sort_order: str
        """
        allowed_values = ["SEO_PUBLISHED_DATE_D", "SEO_PUBLISHED_DATE_A", "SEO_REVIEW_AVG_RATING_D", "SEO_REVIEW_AVG_RATING_A", "SEO_ALPHABETICAL"]  # noqa: E501
        if sort_order not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_order` ({0}), must be one of {1}"
                .format(sort_order, allowed_values)
            )

        self._sort_order = sort_order

    @property
    def top_x(self):
        """Gets the top_x of this TaxonomyAttractionsRequest.

        **start and end rows** to return in the format {start}-{end} - e.g. `'1-10'`, `'11-20'`  **Note**:  - the maximum number of rows per request is 100; therefore, `'100-400'` will return the same as `'100-200'` - if `topX` is not specified, the default is `'1-100'` 

        :return: The top_x of this TaxonomyAttractionsRequest.
        :rtype: str
        """
        return self._top_x

    @top_x.setter
    def top_x(self, top_x):
        """Sets the top_x of this TaxonomyAttractionsRequest.

        **start and end rows** to return in the format {start}-{end} - e.g. `'1-10'`, `'11-20'`  **Note**:  - the maximum number of rows per request is 100; therefore, `'100-400'` will return the same as `'100-200'` - if `topX` is not specified, the default is `'1-100'` 

        :param top_x: The top_x of this TaxonomyAttractionsRequest.
        :type top_x: str
        """

        self._top_x = top_x
