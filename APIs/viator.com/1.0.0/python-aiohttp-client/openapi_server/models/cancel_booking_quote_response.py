# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.refund_details import RefundDetails
from openapi_server import util


class CancelBookingQuoteResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, booking_id: str=None, refund_details: RefundDetails=None, status: str=None):
        """CancelBookingQuoteResponse - a model defined in OpenAPI

        :param booking_id: The booking_id of this CancelBookingQuoteResponse.
        :param refund_details: The refund_details of this CancelBookingQuoteResponse.
        :param status: The status of this CancelBookingQuoteResponse.
        """
        self.openapi_types = {
            'booking_id': str,
            'refund_details': RefundDetails,
            'status': str
        }

        self.attribute_map = {
            'booking_id': 'bookingId',
            'refund_details': 'refundDetails',
            'status': 'status'
        }

        self._booking_id = booking_id
        self._refund_details = refund_details
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CancelBookingQuoteResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CancelBookingQuoteResponse of this CancelBookingQuoteResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def booking_id(self):
        """Gets the booking_id of this CancelBookingQuoteResponse.

        The booking reference number, prepended with `BR-`

        :return: The booking_id of this CancelBookingQuoteResponse.
        :rtype: str
        """
        return self._booking_id

    @booking_id.setter
    def booking_id(self, booking_id):
        """Sets the booking_id of this CancelBookingQuoteResponse.

        The booking reference number, prepended with `BR-`

        :param booking_id: The booking_id of this CancelBookingQuoteResponse.
        :type booking_id: str
        """

        self._booking_id = booking_id

    @property
    def refund_details(self):
        """Gets the refund_details of this CancelBookingQuoteResponse.


        :return: The refund_details of this CancelBookingQuoteResponse.
        :rtype: RefundDetails
        """
        return self._refund_details

    @refund_details.setter
    def refund_details(self, refund_details):
        """Sets the refund_details of this CancelBookingQuoteResponse.


        :param refund_details: The refund_details of this CancelBookingQuoteResponse.
        :type refund_details: RefundDetails
        """

        self._refund_details = refund_details

    @property
    def status(self):
        """Gets the status of this CancelBookingQuoteResponse.

        String indicating the cancellation status of this itinerary item:    * `CANCELLABLE` - this booking is available to be cancelled   * `CANCELLED` - this booking has already been cancelled   * `NOT_CANCELLABLE` - this booking cannot be cancelled (because the product's operation date is now in the past) 

        :return: The status of this CancelBookingQuoteResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CancelBookingQuoteResponse.

        String indicating the cancellation status of this itinerary item:    * `CANCELLABLE` - this booking is available to be cancelled   * `CANCELLED` - this booking has already been cancelled   * `NOT_CANCELLABLE` - this booking cannot be cancelled (because the product's operation date is now in the past) 

        :param status: The status of this CancelBookingQuoteResponse.
        :type status: str
        """
        allowed_values = ["CANCELLABLE", "CANCELLED", "NOT_CANCELLABLE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
