# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.booking_calculateprice_request_items_inner_travellers_inner import BookingCalculatepriceRequestItemsInnerTravellersInner
from openapi_server import util


class BookingCalculatepriceRequestItemsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, product_code: str=None, tour_grade_code: str=None, travel_date: str=None, travellers: List[BookingCalculatepriceRequestItemsInnerTravellersInner]=None):
        """BookingCalculatepriceRequestItemsInner - a model defined in OpenAPI

        :param product_code: The product_code of this BookingCalculatepriceRequestItemsInner.
        :param tour_grade_code: The tour_grade_code of this BookingCalculatepriceRequestItemsInner.
        :param travel_date: The travel_date of this BookingCalculatepriceRequestItemsInner.
        :param travellers: The travellers of this BookingCalculatepriceRequestItemsInner.
        """
        self.openapi_types = {
            'product_code': str,
            'tour_grade_code': str,
            'travel_date': str,
            'travellers': List[BookingCalculatepriceRequestItemsInnerTravellersInner]
        }

        self.attribute_map = {
            'product_code': 'productCode',
            'tour_grade_code': 'tourGradeCode',
            'travel_date': 'travelDate',
            'travellers': 'travellers'
        }

        self._product_code = product_code
        self._tour_grade_code = tour_grade_code
        self._travel_date = travel_date
        self._travellers = travellers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookingCalculatepriceRequestItemsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The bookingCalculateprice_request_items_inner of this BookingCalculatepriceRequestItemsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_code(self):
        """Gets the product_code of this BookingCalculatepriceRequestItemsInner.

        **unique alphanumeric identifier** of the product the total price for which you which to calculate

        :return: The product_code of this BookingCalculatepriceRequestItemsInner.
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this BookingCalculatepriceRequestItemsInner.

        **unique alphanumeric identifier** of the product the total price for which you which to calculate

        :param product_code: The product_code of this BookingCalculatepriceRequestItemsInner.
        :type product_code: str
        """

        self._product_code = product_code

    @property
    def tour_grade_code(self):
        """Gets the tour_grade_code of this BookingCalculatepriceRequestItemsInner.

        **alphanumeric identifier** for the tour grade for which to calculate the total price

        :return: The tour_grade_code of this BookingCalculatepriceRequestItemsInner.
        :rtype: str
        """
        return self._tour_grade_code

    @tour_grade_code.setter
    def tour_grade_code(self, tour_grade_code):
        """Sets the tour_grade_code of this BookingCalculatepriceRequestItemsInner.

        **alphanumeric identifier** for the tour grade for which to calculate the total price

        :param tour_grade_code: The tour_grade_code of this BookingCalculatepriceRequestItemsInner.
        :type tour_grade_code: str
        """

        self._tour_grade_code = tour_grade_code

    @property
    def travel_date(self):
        """Gets the travel_date of this BookingCalculatepriceRequestItemsInner.

        **date** for which to calculate the total price (must be in the future)

        :return: The travel_date of this BookingCalculatepriceRequestItemsInner.
        :rtype: str
        """
        return self._travel_date

    @travel_date.setter
    def travel_date(self, travel_date):
        """Sets the travel_date of this BookingCalculatepriceRequestItemsInner.

        **date** for which to calculate the total price (must be in the future)

        :param travel_date: The travel_date of this BookingCalculatepriceRequestItemsInner.
        :type travel_date: str
        """

        self._travel_date = travel_date

    @property
    def travellers(self):
        """Gets the travellers of this BookingCalculatepriceRequestItemsInner.

        **array of objects** detailing the age bands for which to calculate the total price

        :return: The travellers of this BookingCalculatepriceRequestItemsInner.
        :rtype: List[BookingCalculatepriceRequestItemsInnerTravellersInner]
        """
        return self._travellers

    @travellers.setter
    def travellers(self, travellers):
        """Sets the travellers of this BookingCalculatepriceRequestItemsInner.

        **array of objects** detailing the age bands for which to calculate the total price

        :param travellers: The travellers of this BookingCalculatepriceRequestItemsInner.
        :type travellers: List[BookingCalculatepriceRequestItemsInnerTravellersInner]
        """

        self._travellers = travellers
