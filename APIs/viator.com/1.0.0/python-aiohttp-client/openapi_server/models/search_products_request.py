# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchProductsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cat_id: int=None, currency_code: str=None, dest_id: int=None, end_date: str=None, seo_id: str=None, sort_order: str=None, start_date: str=None, sub_cat_id: int=None, top_x: str=None):
        """SearchProductsRequest - a model defined in OpenAPI

        :param cat_id: The cat_id of this SearchProductsRequest.
        :param currency_code: The currency_code of this SearchProductsRequest.
        :param dest_id: The dest_id of this SearchProductsRequest.
        :param end_date: The end_date of this SearchProductsRequest.
        :param seo_id: The seo_id of this SearchProductsRequest.
        :param sort_order: The sort_order of this SearchProductsRequest.
        :param start_date: The start_date of this SearchProductsRequest.
        :param sub_cat_id: The sub_cat_id of this SearchProductsRequest.
        :param top_x: The top_x of this SearchProductsRequest.
        """
        self.openapi_types = {
            'cat_id': int,
            'currency_code': str,
            'dest_id': int,
            'end_date': str,
            'seo_id': str,
            'sort_order': str,
            'start_date': str,
            'sub_cat_id': int,
            'top_x': str
        }

        self.attribute_map = {
            'cat_id': 'catId',
            'currency_code': 'currencyCode',
            'dest_id': 'destId',
            'end_date': 'endDate',
            'seo_id': 'seoId',
            'sort_order': 'sortOrder',
            'start_date': 'startDate',
            'sub_cat_id': 'subCatId',
            'top_x': 'topX'
        }

        self._cat_id = cat_id
        self._currency_code = currency_code
        self._dest_id = dest_id
        self._end_date = end_date
        self._seo_id = seo_id
        self._sort_order = sort_order
        self._start_date = start_date
        self._sub_cat_id = sub_cat_id
        self._top_x = top_x

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchProductsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The searchProducts_request of this SearchProductsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cat_id(self):
        """Gets the cat_id of this SearchProductsRequest.

        **unique numeric identifier** of *this* product category to search within - `categoryId` can be retrieved from the [/taxonomy/categories](#operation/taxonomyCategories) service - at present, it is not possible to use `catId` in conjunction with `seoId` 

        :return: The cat_id of this SearchProductsRequest.
        :rtype: int
        """
        return self._cat_id

    @cat_id.setter
    def cat_id(self, cat_id):
        """Sets the cat_id of this SearchProductsRequest.

        **unique numeric identifier** of *this* product category to search within - `categoryId` can be retrieved from the [/taxonomy/categories](#operation/taxonomyCategories) service - at present, it is not possible to use `catId` in conjunction with `seoId` 

        :param cat_id: The cat_id of this SearchProductsRequest.
        :type cat_id: int
        """

        self._cat_id = cat_id

    @property
    def currency_code(self):
        """Gets the currency_code of this SearchProductsRequest.

        **currency** in which to display product prices

        :return: The currency_code of this SearchProductsRequest.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this SearchProductsRequest.

        **currency** in which to display product prices

        :param currency_code: The currency_code of this SearchProductsRequest.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def dest_id(self):
        """Gets the dest_id of this SearchProductsRequest.

        **unique numeric identifier** of the destination in which to search for products - `destinationId` is available from the [/taxonomy/destinations](#operation/taxonomyDestinations) service - use **EITHER** `destId` **OR** `seoId`, but not both 

        :return: The dest_id of this SearchProductsRequest.
        :rtype: int
        """
        return self._dest_id

    @dest_id.setter
    def dest_id(self, dest_id):
        """Sets the dest_id of this SearchProductsRequest.

        **unique numeric identifier** of the destination in which to search for products - `destinationId` is available from the [/taxonomy/destinations](#operation/taxonomyDestinations) service - use **EITHER** `destId` **OR** `seoId`, but not both 

        :param dest_id: The dest_id of this SearchProductsRequest.
        :type dest_id: int
        """

        self._dest_id = dest_id

    @property
    def end_date(self):
        """Gets the end_date of this SearchProductsRequest.

        **end date delimiter** for the search (must be in the future) - e.g., `'2019-10-21'` 

        :return: The end_date of this SearchProductsRequest.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this SearchProductsRequest.

        **end date delimiter** for the search (must be in the future) - e.g., `'2019-10-21'` 

        :param end_date: The end_date of this SearchProductsRequest.
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def seo_id(self):
        """Gets the seo_id of this SearchProductsRequest.

        **search restriction specifier** for products associated with an attraction uniquely identified by `seoId` - use **EITHER** `destId` **OR** `seoId`, but not both 

        :return: The seo_id of this SearchProductsRequest.
        :rtype: str
        """
        return self._seo_id

    @seo_id.setter
    def seo_id(self, seo_id):
        """Sets the seo_id of this SearchProductsRequest.

        **search restriction specifier** for products associated with an attraction uniquely identified by `seoId` - use **EITHER** `destId` **OR** `seoId`, but not both 

        :param seo_id: The seo_id of this SearchProductsRequest.
        :type seo_id: str
        """

        self._seo_id = seo_id

    @property
    def sort_order(self):
        """Gets the sort_order of this SearchProductsRequest.

        **sort order** in which to return the results that is *one of*:    - `\"TOP_SELLERS\"`: the top sellers   - `\"REVIEW_AVG_RATING_A\"`: ascending by average traveler rating (low -&gt; high)   - `\"REVIEW_AVG_RATING_D\"`: descending by average traveler rating (high -&gt; low)   - `\"PRICE_FROM_A\"`: ascending by price (low -&gt; high)   - `\"PRICE_FROM_D\"`: descending by price (high -&gt; low)  

        :return: The sort_order of this SearchProductsRequest.
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this SearchProductsRequest.

        **sort order** in which to return the results that is *one of*:    - `\"TOP_SELLERS\"`: the top sellers   - `\"REVIEW_AVG_RATING_A\"`: ascending by average traveler rating (low -&gt; high)   - `\"REVIEW_AVG_RATING_D\"`: descending by average traveler rating (high -&gt; low)   - `\"PRICE_FROM_A\"`: ascending by price (low -&gt; high)   - `\"PRICE_FROM_D\"`: descending by price (high -&gt; low)  

        :param sort_order: The sort_order of this SearchProductsRequest.
        :type sort_order: str
        """
        allowed_values = ["TOP_SELLERS", "REVIEW_AVG_RATING_A", "REVIEW_AVG_RATING_D", "PRICE_FROM_A", "PRICE_FROM_D"]  # noqa: E501
        if sort_order not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_order` ({0}), must be one of {1}"
                .format(sort_order, allowed_values)
            )

        self._sort_order = sort_order

    @property
    def start_date(self):
        """Gets the start_date of this SearchProductsRequest.

        **start date delimiter** for the search (must be in the future) - e.g., `'2018-10-21'` 

        :return: The start_date of this SearchProductsRequest.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this SearchProductsRequest.

        **start date delimiter** for the search (must be in the future) - e.g., `'2018-10-21'` 

        :param start_date: The start_date of this SearchProductsRequest.
        :type start_date: str
        """

        self._start_date = start_date

    @property
    def sub_cat_id(self):
        """Gets the sub_cat_id of this SearchProductsRequest.

        **unique numeric identifier** of *this* product subcategory to search within - `subcategoryId` can be retrieved from the [/taxonomy/categories](#operation/taxonomyCategories) service - at present, it is not possible to use `subCatId` in conjunction with `seoId` 

        :return: The sub_cat_id of this SearchProductsRequest.
        :rtype: int
        """
        return self._sub_cat_id

    @sub_cat_id.setter
    def sub_cat_id(self, sub_cat_id):
        """Sets the sub_cat_id of this SearchProductsRequest.

        **unique numeric identifier** of *this* product subcategory to search within - `subcategoryId` can be retrieved from the [/taxonomy/categories](#operation/taxonomyCategories) service - at present, it is not possible to use `subCatId` in conjunction with `seoId` 

        :param sub_cat_id: The sub_cat_id of this SearchProductsRequest.
        :type sub_cat_id: int
        """

        self._sub_cat_id = sub_cat_id

    @property
    def top_x(self):
        """Gets the top_x of this SearchProductsRequest.

        **start and end rows** to return in the format {start}-{end} - e.g. `'1-10'`, `'11-20'`  **Note**:  - the maximum number of rows per request is 100; therefore, `'100-400'` will return the same as `'100-200'` - if `topX` is not specified, the default is `'1-100'` 

        :return: The top_x of this SearchProductsRequest.
        :rtype: str
        """
        return self._top_x

    @top_x.setter
    def top_x(self, top_x):
        """Sets the top_x of this SearchProductsRequest.

        **start and end rows** to return in the format {start}-{end} - e.g. `'1-10'`, `'11-20'`  **Note**:  - the maximum number of rows per request is 100; therefore, `'100-400'` will return the same as `'100-200'` - if `topX` is not specified, the default is `'1-100'` 

        :param top_x: The top_x of this SearchProductsRequest.
        :type top_x: str
        """

        self._top_x = top_x
