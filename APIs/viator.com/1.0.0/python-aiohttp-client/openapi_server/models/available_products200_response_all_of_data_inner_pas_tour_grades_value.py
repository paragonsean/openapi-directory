# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.available_products200_response_all_of_data_inner_pas_tour_grades_value_avail_dates_inner import AvailableProducts200ResponseAllOfDataInnerPasTourGradesValueAvailDatesInner
from openapi_server import util


class AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avail_dates: List[AvailableProducts200ResponseAllOfDataInnerPasTourGradesValueAvailDatesInner]=None, booking_engine: str=None, description: str=None, language_services: Dict[str, List[object]]=None, sapi: bool=None, title: str=None, tour_grade_code: str=None):
        """AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue - a model defined in OpenAPI

        :param avail_dates: The avail_dates of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.
        :param booking_engine: The booking_engine of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.
        :param description: The description of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.
        :param language_services: The language_services of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.
        :param sapi: The sapi of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.
        :param title: The title of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.
        :param tour_grade_code: The tour_grade_code of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.
        """
        self.openapi_types = {
            'avail_dates': List[AvailableProducts200ResponseAllOfDataInnerPasTourGradesValueAvailDatesInner],
            'booking_engine': str,
            'description': str,
            'language_services': Dict[str, List[object]],
            'sapi': bool,
            'title': str,
            'tour_grade_code': str
        }

        self.attribute_map = {
            'avail_dates': 'availDates',
            'booking_engine': 'bookingEngine',
            'description': 'description',
            'language_services': 'languageServices',
            'sapi': 'sapi',
            'title': 'title',
            'tour_grade_code': 'tourGradeCode'
        }

        self._avail_dates = avail_dates
        self._booking_engine = booking_engine
        self._description = description
        self._language_services = language_services
        self._sapi = sapi
        self._title = title
        self._tour_grade_code = tour_grade_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The availableProducts_200_response_allOf_data_inner_pas_tourGrades_value of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avail_dates(self):
        """Gets the avail_dates of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.

        **array of objects** with availability and pricing information for *this* tour grade

        :return: The avail_dates of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.
        :rtype: List[AvailableProducts200ResponseAllOfDataInnerPasTourGradesValueAvailDatesInner]
        """
        return self._avail_dates

    @avail_dates.setter
    def avail_dates(self, avail_dates):
        """Sets the avail_dates of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.

        **array of objects** with availability and pricing information for *this* tour grade

        :param avail_dates: The avail_dates of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.
        :type avail_dates: List[AvailableProducts200ResponseAllOfDataInnerPasTourGradesValueAvailDatesInner]
        """

        self._avail_dates = avail_dates

    @property
    def booking_engine(self):
        """Gets the booking_engine of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.

        **booking modality specifier** for *this* tour grade

        :return: The booking_engine of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.
        :rtype: str
        """
        return self._booking_engine

    @booking_engine.setter
    def booking_engine(self, booking_engine):
        """Sets the booking_engine of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.

        **booking modality specifier** for *this* tour grade

        :param booking_engine: The booking_engine of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.
        :type booking_engine: str
        """

        self._booking_engine = booking_engine

    @property
    def description(self):
        """Gets the description of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.

        **natural-language description** of *this* tour grade

        :return: The description of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.

        **natural-language description** of *this* tour grade

        :param description: The description of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.
        :type description: str
        """

        self._description = description

    @property
    def language_services(self):
        """Gets the language_services of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.

        **dictionary** of language codes to array of textual language service descriptors available for *this* tour grade

        :return: The language_services of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.
        :rtype: Dict[str, List[object]]
        """
        return self._language_services

    @language_services.setter
    def language_services(self, language_services):
        """Sets the language_services of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.

        **dictionary** of language codes to array of textual language service descriptors available for *this* tour grade

        :param language_services: The language_services of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.
        :type language_services: Dict[str, List[object]]
        """

        self._language_services = language_services

    @property
    def sapi(self):
        """Gets the sapi of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.

        ignore (Viator only)

        :return: The sapi of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.
        :rtype: bool
        """
        return self._sapi

    @sapi.setter
    def sapi(self, sapi):
        """Sets the sapi of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.

        ignore (Viator only)

        :param sapi: The sapi of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.
        :type sapi: bool
        """

        self._sapi = sapi

    @property
    def title(self):
        """Gets the title of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.

        **natural-language title** of *this* tour grade

        :return: The title of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.

        **natural-language title** of *this* tour grade

        :param title: The title of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.
        :type title: str
        """

        self._title = title

    @property
    def tour_grade_code(self):
        """Gets the tour_grade_code of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.

        **alphanumeric identifier** for *this* tour grade

        :return: The tour_grade_code of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.
        :rtype: str
        """
        return self._tour_grade_code

    @tour_grade_code.setter
    def tour_grade_code(self, tour_grade_code):
        """Sets the tour_grade_code of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.

        **alphanumeric identifier** for *this* tour grade

        :param tour_grade_code: The tour_grade_code of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValue.
        :type tour_grade_code: str
        """

        self._tour_grade_code = tour_grade_code
