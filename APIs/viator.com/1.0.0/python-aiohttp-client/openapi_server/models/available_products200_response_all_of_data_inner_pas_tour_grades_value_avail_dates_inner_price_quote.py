# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AvailableProducts200ResponseAllOfDataInnerPasTourGradesValueAvailDatesInnerPriceQuote(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, general_retail_price: str=None, merchant_net_price: str=None, retail_price: str=None):
        """AvailableProducts200ResponseAllOfDataInnerPasTourGradesValueAvailDatesInnerPriceQuote - a model defined in OpenAPI

        :param general_retail_price: The general_retail_price of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValueAvailDatesInnerPriceQuote.
        :param merchant_net_price: The merchant_net_price of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValueAvailDatesInnerPriceQuote.
        :param retail_price: The retail_price of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValueAvailDatesInnerPriceQuote.
        """
        self.openapi_types = {
            'general_retail_price': str,
            'merchant_net_price': str,
            'retail_price': str
        }

        self.attribute_map = {
            'general_retail_price': 'generalRetailPrice',
            'merchant_net_price': 'merchantNetPrice',
            'retail_price': 'retailPrice'
        }

        self._general_retail_price = general_retail_price
        self._merchant_net_price = merchant_net_price
        self._retail_price = retail_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailableProducts200ResponseAllOfDataInnerPasTourGradesValueAvailDatesInnerPriceQuote':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The availableProducts_200_response_allOf_data_inner_pas_tourGrades_value_availDates_inner_priceQuote of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValueAvailDatesInnerPriceQuote.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def general_retail_price(self):
        """Gets the general_retail_price of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValueAvailDatesInnerPriceQuote.

        **general retail price** of *this* tour grade formatted according to the example

        :return: The general_retail_price of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValueAvailDatesInnerPriceQuote.
        :rtype: str
        """
        return self._general_retail_price

    @general_retail_price.setter
    def general_retail_price(self, general_retail_price):
        """Sets the general_retail_price of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValueAvailDatesInnerPriceQuote.

        **general retail price** of *this* tour grade formatted according to the example

        :param general_retail_price: The general_retail_price of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValueAvailDatesInnerPriceQuote.
        :type general_retail_price: str
        """

        self._general_retail_price = general_retail_price

    @property
    def merchant_net_price(self):
        """Gets the merchant_net_price of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValueAvailDatesInnerPriceQuote.

        ignore (Viator only)

        :return: The merchant_net_price of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValueAvailDatesInnerPriceQuote.
        :rtype: str
        """
        return self._merchant_net_price

    @merchant_net_price.setter
    def merchant_net_price(self, merchant_net_price):
        """Sets the merchant_net_price of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValueAvailDatesInnerPriceQuote.

        ignore (Viator only)

        :param merchant_net_price: The merchant_net_price of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValueAvailDatesInnerPriceQuote.
        :type merchant_net_price: str
        """

        self._merchant_net_price = merchant_net_price

    @property
    def retail_price(self):
        """Gets the retail_price of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValueAvailDatesInnerPriceQuote.

        **retail price** of *this* tour grade formatted according to the example

        :return: The retail_price of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValueAvailDatesInnerPriceQuote.
        :rtype: str
        """
        return self._retail_price

    @retail_price.setter
    def retail_price(self, retail_price):
        """Sets the retail_price of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValueAvailDatesInnerPriceQuote.

        **retail price** of *this* tour grade formatted according to the example

        :param retail_price: The retail_price of this AvailableProducts200ResponseAllOfDataInnerPasTourGradesValueAvailDatesInnerPriceQuote.
        :type retail_price: str
        """

        self._retail_price = retail_price
