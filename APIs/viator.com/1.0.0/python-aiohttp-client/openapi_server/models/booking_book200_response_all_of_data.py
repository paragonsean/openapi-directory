# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.booking_book200_response_all_of_data_item_summaries_inner import BookingBook200ResponseAllOfDataItemSummariesInner
from openapi_server.models.booking_status_itinerary import BookingStatusItinerary
from openapi_server import util


class BookingBook200ResponseAllOfData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, booker_email: str=None, booking_date: str=None, booking_status: BookingStatusItinerary=None, currency_code: str=None, distributor_ref: str=None, exchange_rate: int=None, has_voucher: bool=None, item_summaries: List[BookingBook200ResponseAllOfDataItemSummariesInner]=None, itinerary_id: int=None, omni_pre_rule_list: str=None, paypal_redirect_url: str=None, rules_applied: str=None, security_token: str=None, sort_order: int=None, total_price: float=None, total_price_formatted: str=None, total_price_usd: float=None, user_id: str=None, voucher_key: str=None, voucher_url: str=None):
        """BookingBook200ResponseAllOfData - a model defined in OpenAPI

        :param booker_email: The booker_email of this BookingBook200ResponseAllOfData.
        :param booking_date: The booking_date of this BookingBook200ResponseAllOfData.
        :param booking_status: The booking_status of this BookingBook200ResponseAllOfData.
        :param currency_code: The currency_code of this BookingBook200ResponseAllOfData.
        :param distributor_ref: The distributor_ref of this BookingBook200ResponseAllOfData.
        :param exchange_rate: The exchange_rate of this BookingBook200ResponseAllOfData.
        :param has_voucher: The has_voucher of this BookingBook200ResponseAllOfData.
        :param item_summaries: The item_summaries of this BookingBook200ResponseAllOfData.
        :param itinerary_id: The itinerary_id of this BookingBook200ResponseAllOfData.
        :param omni_pre_rule_list: The omni_pre_rule_list of this BookingBook200ResponseAllOfData.
        :param paypal_redirect_url: The paypal_redirect_url of this BookingBook200ResponseAllOfData.
        :param rules_applied: The rules_applied of this BookingBook200ResponseAllOfData.
        :param security_token: The security_token of this BookingBook200ResponseAllOfData.
        :param sort_order: The sort_order of this BookingBook200ResponseAllOfData.
        :param total_price: The total_price of this BookingBook200ResponseAllOfData.
        :param total_price_formatted: The total_price_formatted of this BookingBook200ResponseAllOfData.
        :param total_price_usd: The total_price_usd of this BookingBook200ResponseAllOfData.
        :param user_id: The user_id of this BookingBook200ResponseAllOfData.
        :param voucher_key: The voucher_key of this BookingBook200ResponseAllOfData.
        :param voucher_url: The voucher_url of this BookingBook200ResponseAllOfData.
        """
        self.openapi_types = {
            'booker_email': str,
            'booking_date': str,
            'booking_status': BookingStatusItinerary,
            'currency_code': str,
            'distributor_ref': str,
            'exchange_rate': int,
            'has_voucher': bool,
            'item_summaries': List[BookingBook200ResponseAllOfDataItemSummariesInner],
            'itinerary_id': int,
            'omni_pre_rule_list': str,
            'paypal_redirect_url': str,
            'rules_applied': str,
            'security_token': str,
            'sort_order': int,
            'total_price': float,
            'total_price_formatted': str,
            'total_price_usd': float,
            'user_id': str,
            'voucher_key': str,
            'voucher_url': str
        }

        self.attribute_map = {
            'booker_email': 'bookerEmail',
            'booking_date': 'bookingDate',
            'booking_status': 'bookingStatus',
            'currency_code': 'currencyCode',
            'distributor_ref': 'distributorRef',
            'exchange_rate': 'exchangeRate',
            'has_voucher': 'hasVoucher',
            'item_summaries': 'itemSummaries',
            'itinerary_id': 'itineraryId',
            'omni_pre_rule_list': 'omniPreRuleList',
            'paypal_redirect_url': 'paypalRedirectURL',
            'rules_applied': 'rulesApplied',
            'security_token': 'securityToken',
            'sort_order': 'sortOrder',
            'total_price': 'totalPrice',
            'total_price_formatted': 'totalPriceFormatted',
            'total_price_usd': 'totalPriceUSD',
            'user_id': 'userId',
            'voucher_key': 'voucherKey',
            'voucher_url': 'voucherURL'
        }

        self._booker_email = booker_email
        self._booking_date = booking_date
        self._booking_status = booking_status
        self._currency_code = currency_code
        self._distributor_ref = distributor_ref
        self._exchange_rate = exchange_rate
        self._has_voucher = has_voucher
        self._item_summaries = item_summaries
        self._itinerary_id = itinerary_id
        self._omni_pre_rule_list = omni_pre_rule_list
        self._paypal_redirect_url = paypal_redirect_url
        self._rules_applied = rules_applied
        self._security_token = security_token
        self._sort_order = sort_order
        self._total_price = total_price
        self._total_price_formatted = total_price_formatted
        self._total_price_usd = total_price_usd
        self._user_id = user_id
        self._voucher_key = voucher_key
        self._voucher_url = voucher_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookingBook200ResponseAllOfData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The bookingBook_200_response_allOf_data of this BookingBook200ResponseAllOfData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def booker_email(self):
        """Gets the booker_email of this BookingBook200ResponseAllOfData.

        **email address** of the entity that made *this* booking

        :return: The booker_email of this BookingBook200ResponseAllOfData.
        :rtype: str
        """
        return self._booker_email

    @booker_email.setter
    def booker_email(self, booker_email):
        """Sets the booker_email of this BookingBook200ResponseAllOfData.

        **email address** of the entity that made *this* booking

        :param booker_email: The booker_email of this BookingBook200ResponseAllOfData.
        :type booker_email: str
        """

        self._booker_email = booker_email

    @property
    def booking_date(self):
        """Gets the booking_date of this BookingBook200ResponseAllOfData.

        **date** of *this* booking

        :return: The booking_date of this BookingBook200ResponseAllOfData.
        :rtype: str
        """
        return self._booking_date

    @booking_date.setter
    def booking_date(self, booking_date):
        """Sets the booking_date of this BookingBook200ResponseAllOfData.

        **date** of *this* booking

        :param booking_date: The booking_date of this BookingBook200ResponseAllOfData.
        :type booking_date: str
        """

        self._booking_date = booking_date

    @property
    def booking_status(self):
        """Gets the booking_status of this BookingBook200ResponseAllOfData.


        :return: The booking_status of this BookingBook200ResponseAllOfData.
        :rtype: BookingStatusItinerary
        """
        return self._booking_status

    @booking_status.setter
    def booking_status(self, booking_status):
        """Sets the booking_status of this BookingBook200ResponseAllOfData.


        :param booking_status: The booking_status of this BookingBook200ResponseAllOfData.
        :type booking_status: BookingStatusItinerary
        """

        self._booking_status = booking_status

    @property
    def currency_code(self):
        """Gets the currency_code of this BookingBook200ResponseAllOfData.

        **currency code** of the currency in which *this* booking was made

        :return: The currency_code of this BookingBook200ResponseAllOfData.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this BookingBook200ResponseAllOfData.

        **currency code** of the currency in which *this* booking was made

        :param currency_code: The currency_code of this BookingBook200ResponseAllOfData.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def distributor_ref(self):
        """Gets the distributor_ref of this BookingBook200ResponseAllOfData.

        ignore (Viator only)

        :return: The distributor_ref of this BookingBook200ResponseAllOfData.
        :rtype: str
        """
        return self._distributor_ref

    @distributor_ref.setter
    def distributor_ref(self, distributor_ref):
        """Sets the distributor_ref of this BookingBook200ResponseAllOfData.

        ignore (Viator only)

        :param distributor_ref: The distributor_ref of this BookingBook200ResponseAllOfData.
        :type distributor_ref: str
        """

        self._distributor_ref = distributor_ref

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this BookingBook200ResponseAllOfData.

        ignore (Viator only)

        :return: The exchange_rate of this BookingBook200ResponseAllOfData.
        :rtype: int
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this BookingBook200ResponseAllOfData.

        ignore (Viator only)

        :param exchange_rate: The exchange_rate of this BookingBook200ResponseAllOfData.
        :type exchange_rate: int
        """

        self._exchange_rate = exchange_rate

    @property
    def has_voucher(self):
        """Gets the has_voucher of this BookingBook200ResponseAllOfData.

        ignore (Viator only)

        :return: The has_voucher of this BookingBook200ResponseAllOfData.
        :rtype: bool
        """
        return self._has_voucher

    @has_voucher.setter
    def has_voucher(self, has_voucher):
        """Sets the has_voucher of this BookingBook200ResponseAllOfData.

        ignore (Viator only)

        :param has_voucher: The has_voucher of this BookingBook200ResponseAllOfData.
        :type has_voucher: bool
        """

        self._has_voucher = has_voucher

    @property
    def item_summaries(self):
        """Gets the item_summaries of this BookingBook200ResponseAllOfData.

        **array** of item summaries

        :return: The item_summaries of this BookingBook200ResponseAllOfData.
        :rtype: List[BookingBook200ResponseAllOfDataItemSummariesInner]
        """
        return self._item_summaries

    @item_summaries.setter
    def item_summaries(self, item_summaries):
        """Sets the item_summaries of this BookingBook200ResponseAllOfData.

        **array** of item summaries

        :param item_summaries: The item_summaries of this BookingBook200ResponseAllOfData.
        :type item_summaries: List[BookingBook200ResponseAllOfDataItemSummariesInner]
        """

        self._item_summaries = item_summaries

    @property
    def itinerary_id(self):
        """Gets the itinerary_id of this BookingBook200ResponseAllOfData.

        ignore (Viator only)

        :return: The itinerary_id of this BookingBook200ResponseAllOfData.
        :rtype: int
        """
        return self._itinerary_id

    @itinerary_id.setter
    def itinerary_id(self, itinerary_id):
        """Sets the itinerary_id of this BookingBook200ResponseAllOfData.

        ignore (Viator only)

        :param itinerary_id: The itinerary_id of this BookingBook200ResponseAllOfData.
        :type itinerary_id: int
        """

        self._itinerary_id = itinerary_id

    @property
    def omni_pre_rule_list(self):
        """Gets the omni_pre_rule_list of this BookingBook200ResponseAllOfData.

        ignore (Viator only)

        :return: The omni_pre_rule_list of this BookingBook200ResponseAllOfData.
        :rtype: str
        """
        return self._omni_pre_rule_list

    @omni_pre_rule_list.setter
    def omni_pre_rule_list(self, omni_pre_rule_list):
        """Sets the omni_pre_rule_list of this BookingBook200ResponseAllOfData.

        ignore (Viator only)

        :param omni_pre_rule_list: The omni_pre_rule_list of this BookingBook200ResponseAllOfData.
        :type omni_pre_rule_list: str
        """

        self._omni_pre_rule_list = omni_pre_rule_list

    @property
    def paypal_redirect_url(self):
        """Gets the paypal_redirect_url of this BookingBook200ResponseAllOfData.

        ignore (Viator only)

        :return: The paypal_redirect_url of this BookingBook200ResponseAllOfData.
        :rtype: str
        """
        return self._paypal_redirect_url

    @paypal_redirect_url.setter
    def paypal_redirect_url(self, paypal_redirect_url):
        """Sets the paypal_redirect_url of this BookingBook200ResponseAllOfData.

        ignore (Viator only)

        :param paypal_redirect_url: The paypal_redirect_url of this BookingBook200ResponseAllOfData.
        :type paypal_redirect_url: str
        """

        self._paypal_redirect_url = paypal_redirect_url

    @property
    def rules_applied(self):
        """Gets the rules_applied of this BookingBook200ResponseAllOfData.

        ignore (Viator only)

        :return: The rules_applied of this BookingBook200ResponseAllOfData.
        :rtype: str
        """
        return self._rules_applied

    @rules_applied.setter
    def rules_applied(self, rules_applied):
        """Sets the rules_applied of this BookingBook200ResponseAllOfData.

        ignore (Viator only)

        :param rules_applied: The rules_applied of this BookingBook200ResponseAllOfData.
        :type rules_applied: str
        """

        self._rules_applied = rules_applied

    @property
    def security_token(self):
        """Gets the security_token of this BookingBook200ResponseAllOfData.

        ignore (Viator only)

        :return: The security_token of this BookingBook200ResponseAllOfData.
        :rtype: str
        """
        return self._security_token

    @security_token.setter
    def security_token(self, security_token):
        """Sets the security_token of this BookingBook200ResponseAllOfData.

        ignore (Viator only)

        :param security_token: The security_token of this BookingBook200ResponseAllOfData.
        :type security_token: str
        """

        self._security_token = security_token

    @property
    def sort_order(self):
        """Gets the sort_order of this BookingBook200ResponseAllOfData.

        **sort order** for *this* object

        :return: The sort_order of this BookingBook200ResponseAllOfData.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this BookingBook200ResponseAllOfData.

        **sort order** for *this* object

        :param sort_order: The sort_order of this BookingBook200ResponseAllOfData.
        :type sort_order: int
        """

        self._sort_order = sort_order

    @property
    def total_price(self):
        """Gets the total_price of this BookingBook200ResponseAllOfData.

        **numeric merchant total price** for *this* booking - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :return: The total_price of this BookingBook200ResponseAllOfData.
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this BookingBook200ResponseAllOfData.

        **numeric merchant total price** for *this* booking - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :param total_price: The total_price of this BookingBook200ResponseAllOfData.
        :type total_price: float
        """

        self._total_price = total_price

    @property
    def total_price_formatted(self):
        """Gets the total_price_formatted of this BookingBook200ResponseAllOfData.

        **currency-formatted merchant total price** for *this* booking - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :return: The total_price_formatted of this BookingBook200ResponseAllOfData.
        :rtype: str
        """
        return self._total_price_formatted

    @total_price_formatted.setter
    def total_price_formatted(self, total_price_formatted):
        """Sets the total_price_formatted of this BookingBook200ResponseAllOfData.

        **currency-formatted merchant total price** for *this* booking - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :param total_price_formatted: The total_price_formatted of this BookingBook200ResponseAllOfData.
        :type total_price_formatted: str
        """

        self._total_price_formatted = total_price_formatted

    @property
    def total_price_usd(self):
        """Gets the total_price_usd of this BookingBook200ResponseAllOfData.

        **numeric merchant total price** of *this* booking in USD

        :return: The total_price_usd of this BookingBook200ResponseAllOfData.
        :rtype: float
        """
        return self._total_price_usd

    @total_price_usd.setter
    def total_price_usd(self, total_price_usd):
        """Sets the total_price_usd of this BookingBook200ResponseAllOfData.

        **numeric merchant total price** of *this* booking in USD

        :param total_price_usd: The total_price_usd of this BookingBook200ResponseAllOfData.
        :type total_price_usd: float
        """

        self._total_price_usd = total_price_usd

    @property
    def user_id(self):
        """Gets the user_id of this BookingBook200ResponseAllOfData.

        ignore (Viator only)

        :return: The user_id of this BookingBook200ResponseAllOfData.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this BookingBook200ResponseAllOfData.

        ignore (Viator only)

        :param user_id: The user_id of this BookingBook200ResponseAllOfData.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def voucher_key(self):
        """Gets the voucher_key of this BookingBook200ResponseAllOfData.

        Unique reference for the voucher for this booking that can be used as a request parameter to search for existing bookings using the [/booking/mybookings](#operation/bookingMybookings) and [/booking/pastbooking](#operation/bookingPastbooking) endpoints

        :return: The voucher_key of this BookingBook200ResponseAllOfData.
        :rtype: str
        """
        return self._voucher_key

    @voucher_key.setter
    def voucher_key(self, voucher_key):
        """Sets the voucher_key of this BookingBook200ResponseAllOfData.

        Unique reference for the voucher for this booking that can be used as a request parameter to search for existing bookings using the [/booking/mybookings](#operation/bookingMybookings) and [/booking/pastbooking](#operation/bookingPastbooking) endpoints

        :param voucher_key: The voucher_key of this BookingBook200ResponseAllOfData.
        :type voucher_key: str
        """

        self._voucher_key = voucher_key

    @property
    def voucher_url(self):
        """Gets the voucher_url of this BookingBook200ResponseAllOfData.

        **URL of the voucher** for *this* product (if available). The customer can access this URL to retrieve their voucher.

        :return: The voucher_url of this BookingBook200ResponseAllOfData.
        :rtype: str
        """
        return self._voucher_url

    @voucher_url.setter
    def voucher_url(self, voucher_url):
        """Sets the voucher_url of this BookingBook200ResponseAllOfData.

        **URL of the voucher** for *this* product (if available). The customer can access this URL to retrieve their voucher.

        :param voucher_url: The voucher_url of this BookingBook200ResponseAllOfData.
        :type voucher_url: str
        """

        self._voucher_url = voucher_url
