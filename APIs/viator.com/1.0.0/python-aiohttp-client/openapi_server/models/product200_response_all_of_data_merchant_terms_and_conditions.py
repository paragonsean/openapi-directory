# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product200_response_all_of_data_merchant_terms_and_conditions_cancellation_from_tour_date_inner import Product200ResponseAllOfDataMerchantTermsAndConditionsCancellationFromTourDateInner
from openapi_server import util


class Product200ResponseAllOfDataMerchantTermsAndConditions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_refundable: int=None, cancellation_from_tour_date: List[Product200ResponseAllOfDataMerchantTermsAndConditionsCancellationFromTourDateInner]=None, merchant_terms_and_conditions_type: int=None, terms_and_conditions: str=None):
        """Product200ResponseAllOfDataMerchantTermsAndConditions - a model defined in OpenAPI

        :param amount_refundable: The amount_refundable of this Product200ResponseAllOfDataMerchantTermsAndConditions.
        :param cancellation_from_tour_date: The cancellation_from_tour_date of this Product200ResponseAllOfDataMerchantTermsAndConditions.
        :param merchant_terms_and_conditions_type: The merchant_terms_and_conditions_type of this Product200ResponseAllOfDataMerchantTermsAndConditions.
        :param terms_and_conditions: The terms_and_conditions of this Product200ResponseAllOfDataMerchantTermsAndConditions.
        """
        self.openapi_types = {
            'amount_refundable': int,
            'cancellation_from_tour_date': List[Product200ResponseAllOfDataMerchantTermsAndConditionsCancellationFromTourDateInner],
            'merchant_terms_and_conditions_type': int,
            'terms_and_conditions': str
        }

        self.attribute_map = {
            'amount_refundable': 'amountRefundable',
            'cancellation_from_tour_date': 'cancellationFromTourDate',
            'merchant_terms_and_conditions_type': 'merchantTermsAndConditionsType',
            'terms_and_conditions': 'termsAndConditions'
        }

        self._amount_refundable = amount_refundable
        self._cancellation_from_tour_date = cancellation_from_tour_date
        self._merchant_terms_and_conditions_type = merchant_terms_and_conditions_type
        self._terms_and_conditions = terms_and_conditions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Product200ResponseAllOfDataMerchantTermsAndConditions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The product_200_response_allOf_data_merchantTermsAndConditions of this Product200ResponseAllOfDataMerchantTermsAndConditions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_refundable(self):
        """Gets the amount_refundable of this Product200ResponseAllOfDataMerchantTermsAndConditions.

        Usually shows the total amount refundable if the cancellation is processed now. `null` in /product as no booking has been made.

        :return: The amount_refundable of this Product200ResponseAllOfDataMerchantTermsAndConditions.
        :rtype: int
        """
        return self._amount_refundable

    @amount_refundable.setter
    def amount_refundable(self, amount_refundable):
        """Sets the amount_refundable of this Product200ResponseAllOfDataMerchantTermsAndConditions.

        Usually shows the total amount refundable if the cancellation is processed now. `null` in /product as no booking has been made.

        :param amount_refundable: The amount_refundable of this Product200ResponseAllOfDataMerchantTermsAndConditions.
        :type amount_refundable: int
        """

        self._amount_refundable = amount_refundable

    @property
    def cancellation_from_tour_date(self):
        """Gets the cancellation_from_tour_date of this Product200ResponseAllOfDataMerchantTermsAndConditions.


        :return: The cancellation_from_tour_date of this Product200ResponseAllOfDataMerchantTermsAndConditions.
        :rtype: List[Product200ResponseAllOfDataMerchantTermsAndConditionsCancellationFromTourDateInner]
        """
        return self._cancellation_from_tour_date

    @cancellation_from_tour_date.setter
    def cancellation_from_tour_date(self, cancellation_from_tour_date):
        """Sets the cancellation_from_tour_date of this Product200ResponseAllOfDataMerchantTermsAndConditions.


        :param cancellation_from_tour_date: The cancellation_from_tour_date of this Product200ResponseAllOfDataMerchantTermsAndConditions.
        :type cancellation_from_tour_date: List[Product200ResponseAllOfDataMerchantTermsAndConditionsCancellationFromTourDateInner]
        """

        self._cancellation_from_tour_date = cancellation_from_tour_date

    @property
    def merchant_terms_and_conditions_type(self):
        """Gets the merchant_terms_and_conditions_type of this Product200ResponseAllOfDataMerchantTermsAndConditions.

        **numeric identifier** for the merchant terms and conditions type for *this* product

        :return: The merchant_terms_and_conditions_type of this Product200ResponseAllOfDataMerchantTermsAndConditions.
        :rtype: int
        """
        return self._merchant_terms_and_conditions_type

    @merchant_terms_and_conditions_type.setter
    def merchant_terms_and_conditions_type(self, merchant_terms_and_conditions_type):
        """Sets the merchant_terms_and_conditions_type of this Product200ResponseAllOfDataMerchantTermsAndConditions.

        **numeric identifier** for the merchant terms and conditions type for *this* product

        :param merchant_terms_and_conditions_type: The merchant_terms_and_conditions_type of this Product200ResponseAllOfDataMerchantTermsAndConditions.
        :type merchant_terms_and_conditions_type: int
        """

        self._merchant_terms_and_conditions_type = merchant_terms_and_conditions_type

    @property
    def terms_and_conditions(self):
        """Gets the terms_and_conditions of this Product200ResponseAllOfDataMerchantTermsAndConditions.

        **natural-language description** of the terms and conditions for *this* product

        :return: The terms_and_conditions of this Product200ResponseAllOfDataMerchantTermsAndConditions.
        :rtype: str
        """
        return self._terms_and_conditions

    @terms_and_conditions.setter
    def terms_and_conditions(self, terms_and_conditions):
        """Sets the terms_and_conditions of this Product200ResponseAllOfDataMerchantTermsAndConditions.

        **natural-language description** of the terms and conditions for *this* product

        :param terms_and_conditions: The terms_and_conditions of this Product200ResponseAllOfDataMerchantTermsAndConditions.
        :type terms_and_conditions: str
        """

        self._terms_and_conditions = terms_and_conditions
