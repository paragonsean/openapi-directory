# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchFreetextResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, search_type: str=None, sort_order: int=None):
        """SearchFreetextResponse - a model defined in OpenAPI

        :param search_type: The search_type of this SearchFreetextResponse.
        :param sort_order: The sort_order of this SearchFreetextResponse.
        """
        self.openapi_types = {
            'search_type': str,
            'sort_order': int
        }

        self.attribute_map = {
            'search_type': 'searchType',
            'sort_order': 'sortOrder'
        }

        self._search_type = search_type
        self._sort_order = sort_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchFreetextResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchFreetextResponse of this SearchFreetextResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def search_type(self):
        """Gets the search_type of this SearchFreetextResponse.

        **indicator** of the entity type for *this* result that is *one of*:   - `\"PRODUCT\"`: a tour / activity   - `\"DESTINATION\"`: continent, country, city, region   - `\"ATTRACTION\"`: an attraction within a destination (only available to partners with SEO access)   - `\"RECOMMENDATION\"`: an attraction within a destination (only available to partners with SEO access) 

        :return: The search_type of this SearchFreetextResponse.
        :rtype: str
        """
        return self._search_type

    @search_type.setter
    def search_type(self, search_type):
        """Sets the search_type of this SearchFreetextResponse.

        **indicator** of the entity type for *this* result that is *one of*:   - `\"PRODUCT\"`: a tour / activity   - `\"DESTINATION\"`: continent, country, city, region   - `\"ATTRACTION\"`: an attraction within a destination (only available to partners with SEO access)   - `\"RECOMMENDATION\"`: an attraction within a destination (only available to partners with SEO access) 

        :param search_type: The search_type of this SearchFreetextResponse.
        :type search_type: str
        """
        allowed_values = ["PRODUCT", "DESTINATION", "ATTRACTION", "RECOMMENDATION"]  # noqa: E501
        if search_type not in allowed_values:
            raise ValueError(
                "Invalid value for `search_type` ({0}), must be one of {1}"
                .format(search_type, allowed_values)
            )

        self._search_type = search_type

    @property
    def sort_order(self):
        """Gets the sort_order of this SearchFreetextResponse.

        **sort order** for *this* data object

        :return: The sort_order of this SearchFreetextResponse.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this SearchFreetextResponse.

        **sort order** for *this* data object

        :param sort_order: The sort_order of this SearchFreetextResponse.
        :type sort_order: int
        """

        self._sort_order = sort_order
