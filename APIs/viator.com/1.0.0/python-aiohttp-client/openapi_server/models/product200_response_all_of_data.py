# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.booking_engine_id import BookingEngineId
from openapi_server.models.photo_object import PhotoObject
from openapi_server.models.product200_response_all_of_data_age_bands_inner import Product200ResponseAllOfDataAgeBandsInner
from openapi_server.models.product200_response_all_of_data_booking_questions_inner import Product200ResponseAllOfDataBookingQuestionsInner
from openapi_server.models.product200_response_all_of_data_merchant_terms_and_conditions import Product200ResponseAllOfDataMerchantTermsAndConditions
from openapi_server.models.product200_response_all_of_data_passenger_attributes_inner import Product200ResponseAllOfDataPassengerAttributesInner
from openapi_server.models.product200_response_all_of_data_product_photos_inner import Product200ResponseAllOfDataProductPhotosInner
from openapi_server.models.product200_response_all_of_data_tour_grades_inner import Product200ResponseAllOfDataTourGradesInner
from openapi_server.models.rating_counts import RatingCounts
from openapi_server.models.review_object import ReviewObject
from openapi_server.models.translation_level import TranslationLevel
from openapi_server import util


class Product200ResponseAllOfData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_info: List[str]=None, admission: str=None, age_bands: List[Product200ResponseAllOfDataAgeBandsInner]=None, all_traveller_names_required: bool=None, apple_pass_supported: bool=None, available: bool=None, booking_engine_id: BookingEngineId=None, booking_questions: List[Product200ResponseAllOfDataBookingQuestionsInner]=None, cat_ids: List[int]=None, city: str=None, code: str=None, country: str=None, currency_code: str=None, departure_point: str=None, departure_time: str=None, departure_time_comments: str=None, description: str=None, destination_id: int=None, duration: str=None, essential: str=None, exclusions: List[str]=None, highlights: int=None, hotel_pickup: bool=None, inclusions: List[str]=None, itinerary: str=None, location: str=None, map_url: str=None, max_traveller_count: int=None, merchant_cancellable: bool=None, merchant_net_price_from: float=None, merchant_net_price_from_formatted: str=None, merchant_terms_and_conditions: Product200ResponseAllOfDataMerchantTermsAndConditions=None, on_request_period: int=None, on_sale: bool=None, operates: str=None, panorama_count: int=None, pas: object=None, passenger_attributes: List[Product200ResponseAllOfDataPassengerAttributesInner]=None, photo_count: int=None, price: float=None, price_formatted: str=None, primary_destination_id: int=None, primary_destination_name: str=None, primary_destination_url_name: str=None, primary_group_id: str=None, product_photos: List[Product200ResponseAllOfDataProductPhotosInner]=None, product_url_name: str=None, rating: float=None, rating_counts: RatingCounts=None, region: str=None, return_details: str=None, review_count: int=None, reviews: List[ReviewObject]=None, rrp: int=None, rrp_formatted: str=None, sales_points: List[str]=None, saving_amount: str=None, saving_amount_formated: str=None, short_description: str=None, short_title: str=None, special_offer: str=None, special_offer_available: bool=None, special_reservation: bool=None, special_reservation_details: str=None, ssl_supported: bool=None, sub_cat_ids: List[int]=None, supplier_code: str=None, supplier_name: str=None, thumbnail_hi_res_url: str=None, thumbnail_url: str=None, title: str=None, tour_grades: List[Product200ResponseAllOfDataTourGradesInner]=None, tour_grades_available: bool=None, translation_level: TranslationLevel=None, user_photos: List[PhotoObject]=None, video_count: int=None, videos: str=None, voucher_option: str=None, voucher_requirements: object=None, web_url: str=None):
        """Product200ResponseAllOfData - a model defined in OpenAPI

        :param additional_info: The additional_info of this Product200ResponseAllOfData.
        :param admission: The admission of this Product200ResponseAllOfData.
        :param age_bands: The age_bands of this Product200ResponseAllOfData.
        :param all_traveller_names_required: The all_traveller_names_required of this Product200ResponseAllOfData.
        :param apple_pass_supported: The apple_pass_supported of this Product200ResponseAllOfData.
        :param available: The available of this Product200ResponseAllOfData.
        :param booking_engine_id: The booking_engine_id of this Product200ResponseAllOfData.
        :param booking_questions: The booking_questions of this Product200ResponseAllOfData.
        :param cat_ids: The cat_ids of this Product200ResponseAllOfData.
        :param city: The city of this Product200ResponseAllOfData.
        :param code: The code of this Product200ResponseAllOfData.
        :param country: The country of this Product200ResponseAllOfData.
        :param currency_code: The currency_code of this Product200ResponseAllOfData.
        :param departure_point: The departure_point of this Product200ResponseAllOfData.
        :param departure_time: The departure_time of this Product200ResponseAllOfData.
        :param departure_time_comments: The departure_time_comments of this Product200ResponseAllOfData.
        :param description: The description of this Product200ResponseAllOfData.
        :param destination_id: The destination_id of this Product200ResponseAllOfData.
        :param duration: The duration of this Product200ResponseAllOfData.
        :param essential: The essential of this Product200ResponseAllOfData.
        :param exclusions: The exclusions of this Product200ResponseAllOfData.
        :param highlights: The highlights of this Product200ResponseAllOfData.
        :param hotel_pickup: The hotel_pickup of this Product200ResponseAllOfData.
        :param inclusions: The inclusions of this Product200ResponseAllOfData.
        :param itinerary: The itinerary of this Product200ResponseAllOfData.
        :param location: The location of this Product200ResponseAllOfData.
        :param map_url: The map_url of this Product200ResponseAllOfData.
        :param max_traveller_count: The max_traveller_count of this Product200ResponseAllOfData.
        :param merchant_cancellable: The merchant_cancellable of this Product200ResponseAllOfData.
        :param merchant_net_price_from: The merchant_net_price_from of this Product200ResponseAllOfData.
        :param merchant_net_price_from_formatted: The merchant_net_price_from_formatted of this Product200ResponseAllOfData.
        :param merchant_terms_and_conditions: The merchant_terms_and_conditions of this Product200ResponseAllOfData.
        :param on_request_period: The on_request_period of this Product200ResponseAllOfData.
        :param on_sale: The on_sale of this Product200ResponseAllOfData.
        :param operates: The operates of this Product200ResponseAllOfData.
        :param panorama_count: The panorama_count of this Product200ResponseAllOfData.
        :param pas: The pas of this Product200ResponseAllOfData.
        :param passenger_attributes: The passenger_attributes of this Product200ResponseAllOfData.
        :param photo_count: The photo_count of this Product200ResponseAllOfData.
        :param price: The price of this Product200ResponseAllOfData.
        :param price_formatted: The price_formatted of this Product200ResponseAllOfData.
        :param primary_destination_id: The primary_destination_id of this Product200ResponseAllOfData.
        :param primary_destination_name: The primary_destination_name of this Product200ResponseAllOfData.
        :param primary_destination_url_name: The primary_destination_url_name of this Product200ResponseAllOfData.
        :param primary_group_id: The primary_group_id of this Product200ResponseAllOfData.
        :param product_photos: The product_photos of this Product200ResponseAllOfData.
        :param product_url_name: The product_url_name of this Product200ResponseAllOfData.
        :param rating: The rating of this Product200ResponseAllOfData.
        :param rating_counts: The rating_counts of this Product200ResponseAllOfData.
        :param region: The region of this Product200ResponseAllOfData.
        :param return_details: The return_details of this Product200ResponseAllOfData.
        :param review_count: The review_count of this Product200ResponseAllOfData.
        :param reviews: The reviews of this Product200ResponseAllOfData.
        :param rrp: The rrp of this Product200ResponseAllOfData.
        :param rrp_formatted: The rrp_formatted of this Product200ResponseAllOfData.
        :param sales_points: The sales_points of this Product200ResponseAllOfData.
        :param saving_amount: The saving_amount of this Product200ResponseAllOfData.
        :param saving_amount_formated: The saving_amount_formated of this Product200ResponseAllOfData.
        :param short_description: The short_description of this Product200ResponseAllOfData.
        :param short_title: The short_title of this Product200ResponseAllOfData.
        :param special_offer: The special_offer of this Product200ResponseAllOfData.
        :param special_offer_available: The special_offer_available of this Product200ResponseAllOfData.
        :param special_reservation: The special_reservation of this Product200ResponseAllOfData.
        :param special_reservation_details: The special_reservation_details of this Product200ResponseAllOfData.
        :param ssl_supported: The ssl_supported of this Product200ResponseAllOfData.
        :param sub_cat_ids: The sub_cat_ids of this Product200ResponseAllOfData.
        :param supplier_code: The supplier_code of this Product200ResponseAllOfData.
        :param supplier_name: The supplier_name of this Product200ResponseAllOfData.
        :param thumbnail_hi_res_url: The thumbnail_hi_res_url of this Product200ResponseAllOfData.
        :param thumbnail_url: The thumbnail_url of this Product200ResponseAllOfData.
        :param title: The title of this Product200ResponseAllOfData.
        :param tour_grades: The tour_grades of this Product200ResponseAllOfData.
        :param tour_grades_available: The tour_grades_available of this Product200ResponseAllOfData.
        :param translation_level: The translation_level of this Product200ResponseAllOfData.
        :param user_photos: The user_photos of this Product200ResponseAllOfData.
        :param video_count: The video_count of this Product200ResponseAllOfData.
        :param videos: The videos of this Product200ResponseAllOfData.
        :param voucher_option: The voucher_option of this Product200ResponseAllOfData.
        :param voucher_requirements: The voucher_requirements of this Product200ResponseAllOfData.
        :param web_url: The web_url of this Product200ResponseAllOfData.
        """
        self.openapi_types = {
            'additional_info': List[str],
            'admission': str,
            'age_bands': List[Product200ResponseAllOfDataAgeBandsInner],
            'all_traveller_names_required': bool,
            'apple_pass_supported': bool,
            'available': bool,
            'booking_engine_id': BookingEngineId,
            'booking_questions': List[Product200ResponseAllOfDataBookingQuestionsInner],
            'cat_ids': List[int],
            'city': str,
            'code': str,
            'country': str,
            'currency_code': str,
            'departure_point': str,
            'departure_time': str,
            'departure_time_comments': str,
            'description': str,
            'destination_id': int,
            'duration': str,
            'essential': str,
            'exclusions': List[str],
            'highlights': int,
            'hotel_pickup': bool,
            'inclusions': List[str],
            'itinerary': str,
            'location': str,
            'map_url': str,
            'max_traveller_count': int,
            'merchant_cancellable': bool,
            'merchant_net_price_from': float,
            'merchant_net_price_from_formatted': str,
            'merchant_terms_and_conditions': Product200ResponseAllOfDataMerchantTermsAndConditions,
            'on_request_period': int,
            'on_sale': bool,
            'operates': str,
            'panorama_count': int,
            'pas': object,
            'passenger_attributes': List[Product200ResponseAllOfDataPassengerAttributesInner],
            'photo_count': int,
            'price': float,
            'price_formatted': str,
            'primary_destination_id': int,
            'primary_destination_name': str,
            'primary_destination_url_name': str,
            'primary_group_id': str,
            'product_photos': List[Product200ResponseAllOfDataProductPhotosInner],
            'product_url_name': str,
            'rating': float,
            'rating_counts': RatingCounts,
            'region': str,
            'return_details': str,
            'review_count': int,
            'reviews': List[ReviewObject],
            'rrp': int,
            'rrp_formatted': str,
            'sales_points': List[str],
            'saving_amount': str,
            'saving_amount_formated': str,
            'short_description': str,
            'short_title': str,
            'special_offer': str,
            'special_offer_available': bool,
            'special_reservation': bool,
            'special_reservation_details': str,
            'ssl_supported': bool,
            'sub_cat_ids': List[int],
            'supplier_code': str,
            'supplier_name': str,
            'thumbnail_hi_res_url': str,
            'thumbnail_url': str,
            'title': str,
            'tour_grades': List[Product200ResponseAllOfDataTourGradesInner],
            'tour_grades_available': bool,
            'translation_level': TranslationLevel,
            'user_photos': List[PhotoObject],
            'video_count': int,
            'videos': str,
            'voucher_option': str,
            'voucher_requirements': object,
            'web_url': str
        }

        self.attribute_map = {
            'additional_info': 'additionalInfo',
            'admission': 'admission',
            'age_bands': 'ageBands',
            'all_traveller_names_required': 'allTravellerNamesRequired',
            'apple_pass_supported': 'applePassSupported',
            'available': 'available',
            'booking_engine_id': 'bookingEngineId',
            'booking_questions': 'bookingQuestions',
            'cat_ids': 'catIds',
            'city': 'city',
            'code': 'code',
            'country': 'country',
            'currency_code': 'currencyCode',
            'departure_point': 'departurePoint',
            'departure_time': 'departureTime',
            'departure_time_comments': 'departureTimeComments',
            'description': 'description',
            'destination_id': 'destinationId',
            'duration': 'duration',
            'essential': 'essential',
            'exclusions': 'exclusions',
            'highlights': 'highlights',
            'hotel_pickup': 'hotelPickup',
            'inclusions': 'inclusions',
            'itinerary': 'itinerary',
            'location': 'location',
            'map_url': 'mapURL',
            'max_traveller_count': 'maxTravellerCount',
            'merchant_cancellable': 'merchantCancellable',
            'merchant_net_price_from': 'merchantNetPriceFrom',
            'merchant_net_price_from_formatted': 'merchantNetPriceFromFormatted',
            'merchant_terms_and_conditions': 'merchantTermsAndConditions',
            'on_request_period': 'onRequestPeriod',
            'on_sale': 'onSale',
            'operates': 'operates',
            'panorama_count': 'panoramaCount',
            'pas': 'pas',
            'passenger_attributes': 'passengerAttributes',
            'photo_count': 'photoCount',
            'price': 'price',
            'price_formatted': 'priceFormatted',
            'primary_destination_id': 'primaryDestinationId',
            'primary_destination_name': 'primaryDestinationName',
            'primary_destination_url_name': 'primaryDestinationUrlName',
            'primary_group_id': 'primaryGroupId',
            'product_photos': 'productPhotos',
            'product_url_name': 'productUrlName',
            'rating': 'rating',
            'rating_counts': 'ratingCounts',
            'region': 'region',
            'return_details': 'returnDetails',
            'review_count': 'reviewCount',
            'reviews': 'reviews',
            'rrp': 'rrp',
            'rrp_formatted': 'rrpFormatted',
            'sales_points': 'salesPoints',
            'saving_amount': 'savingAmount',
            'saving_amount_formated': 'savingAmountFormated',
            'short_description': 'shortDescription',
            'short_title': 'shortTitle',
            'special_offer': 'specialOffer',
            'special_offer_available': 'specialOfferAvailable',
            'special_reservation': 'specialReservation',
            'special_reservation_details': 'specialReservationDetails',
            'ssl_supported': 'sslSupported',
            'sub_cat_ids': 'subCatIds',
            'supplier_code': 'supplierCode',
            'supplier_name': 'supplierName',
            'thumbnail_hi_res_url': 'thumbnailHiResURL',
            'thumbnail_url': 'thumbnailURL',
            'title': 'title',
            'tour_grades': 'tourGrades',
            'tour_grades_available': 'tourGradesAvailable',
            'translation_level': 'translationLevel',
            'user_photos': 'userPhotos',
            'video_count': 'videoCount',
            'videos': 'videos',
            'voucher_option': 'voucherOption',
            'voucher_requirements': 'voucherRequirements',
            'web_url': 'webURL'
        }

        self._additional_info = additional_info
        self._admission = admission
        self._age_bands = age_bands
        self._all_traveller_names_required = all_traveller_names_required
        self._apple_pass_supported = apple_pass_supported
        self._available = available
        self._booking_engine_id = booking_engine_id
        self._booking_questions = booking_questions
        self._cat_ids = cat_ids
        self._city = city
        self._code = code
        self._country = country
        self._currency_code = currency_code
        self._departure_point = departure_point
        self._departure_time = departure_time
        self._departure_time_comments = departure_time_comments
        self._description = description
        self._destination_id = destination_id
        self._duration = duration
        self._essential = essential
        self._exclusions = exclusions
        self._highlights = highlights
        self._hotel_pickup = hotel_pickup
        self._inclusions = inclusions
        self._itinerary = itinerary
        self._location = location
        self._map_url = map_url
        self._max_traveller_count = max_traveller_count
        self._merchant_cancellable = merchant_cancellable
        self._merchant_net_price_from = merchant_net_price_from
        self._merchant_net_price_from_formatted = merchant_net_price_from_formatted
        self._merchant_terms_and_conditions = merchant_terms_and_conditions
        self._on_request_period = on_request_period
        self._on_sale = on_sale
        self._operates = operates
        self._panorama_count = panorama_count
        self._pas = pas
        self._passenger_attributes = passenger_attributes
        self._photo_count = photo_count
        self._price = price
        self._price_formatted = price_formatted
        self._primary_destination_id = primary_destination_id
        self._primary_destination_name = primary_destination_name
        self._primary_destination_url_name = primary_destination_url_name
        self._primary_group_id = primary_group_id
        self._product_photos = product_photos
        self._product_url_name = product_url_name
        self._rating = rating
        self._rating_counts = rating_counts
        self._region = region
        self._return_details = return_details
        self._review_count = review_count
        self._reviews = reviews
        self._rrp = rrp
        self._rrp_formatted = rrp_formatted
        self._sales_points = sales_points
        self._saving_amount = saving_amount
        self._saving_amount_formated = saving_amount_formated
        self._short_description = short_description
        self._short_title = short_title
        self._special_offer = special_offer
        self._special_offer_available = special_offer_available
        self._special_reservation = special_reservation
        self._special_reservation_details = special_reservation_details
        self._ssl_supported = ssl_supported
        self._sub_cat_ids = sub_cat_ids
        self._supplier_code = supplier_code
        self._supplier_name = supplier_name
        self._thumbnail_hi_res_url = thumbnail_hi_res_url
        self._thumbnail_url = thumbnail_url
        self._title = title
        self._tour_grades = tour_grades
        self._tour_grades_available = tour_grades_available
        self._translation_level = translation_level
        self._user_photos = user_photos
        self._video_count = video_count
        self._videos = videos
        self._voucher_option = voucher_option
        self._voucher_requirements = voucher_requirements
        self._web_url = web_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Product200ResponseAllOfData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The product_200_response_allOf_data of this Product200ResponseAllOfData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_info(self):
        """Gets the additional_info of this Product200ResponseAllOfData.

        **array** of HTML-formatted clauses providing additional information about *this* product, such as: - when the confirmation will be received (i.e. at time of booking, or within 48 hours of booking etc) - accessibility options; such as whether wheelchair access is available - particulars about the pick-up location and process - **Note**: may contain basic HTML mark-up tags – e.g., br, li, b, u, p, i, ul and ol 

        :return: The additional_info of this Product200ResponseAllOfData.
        :rtype: List[str]
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this Product200ResponseAllOfData.

        **array** of HTML-formatted clauses providing additional information about *this* product, such as: - when the confirmation will be received (i.e. at time of booking, or within 48 hours of booking etc) - accessibility options; such as whether wheelchair access is available - particulars about the pick-up location and process - **Note**: may contain basic HTML mark-up tags – e.g., br, li, b, u, p, i, ul and ol 

        :param additional_info: The additional_info of this Product200ResponseAllOfData.
        :type additional_info: List[str]
        """

        self._additional_info = additional_info

    @property
    def admission(self):
        """Gets the admission of this Product200ResponseAllOfData.

        ignore (Viator only)

        :return: The admission of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._admission

    @admission.setter
    def admission(self, admission):
        """Sets the admission of this Product200ResponseAllOfData.

        ignore (Viator only)

        :param admission: The admission of this Product200ResponseAllOfData.
        :type admission: str
        """

        self._admission = admission

    @property
    def age_bands(self):
        """Gets the age_bands of this Product200ResponseAllOfData.

        **array** of age band objects detailing the age bands available for *this* product    - **note**: only the age bands listed here can book this product using the [/booking/book](#operation/bookingBook) service 

        :return: The age_bands of this Product200ResponseAllOfData.
        :rtype: List[Product200ResponseAllOfDataAgeBandsInner]
        """
        return self._age_bands

    @age_bands.setter
    def age_bands(self, age_bands):
        """Sets the age_bands of this Product200ResponseAllOfData.

        **array** of age band objects detailing the age bands available for *this* product    - **note**: only the age bands listed here can book this product using the [/booking/book](#operation/bookingBook) service 

        :param age_bands: The age_bands of this Product200ResponseAllOfData.
        :type age_bands: List[Product200ResponseAllOfDataAgeBandsInner]
        """

        self._age_bands = age_bands

    @property
    def all_traveller_names_required(self):
        """Gets the all_traveller_names_required of this Product200ResponseAllOfData.

        **indicator**: `true` if all traveler names are required.&lt;br /&gt;**Note**: if set to `true`, then all passenger names must be included in the booking request, and all must be unique. Placeholder names cannot be used.

        :return: The all_traveller_names_required of this Product200ResponseAllOfData.
        :rtype: bool
        """
        return self._all_traveller_names_required

    @all_traveller_names_required.setter
    def all_traveller_names_required(self, all_traveller_names_required):
        """Sets the all_traveller_names_required of this Product200ResponseAllOfData.

        **indicator**: `true` if all traveler names are required.&lt;br /&gt;**Note**: if set to `true`, then all passenger names must be included in the booking request, and all must be unique. Placeholder names cannot be used.

        :param all_traveller_names_required: The all_traveller_names_required of this Product200ResponseAllOfData.
        :type all_traveller_names_required: bool
        """

        self._all_traveller_names_required = all_traveller_names_required

    @property
    def apple_pass_supported(self):
        """Gets the apple_pass_supported of this Product200ResponseAllOfData.

        **indicator**: `true` if Apple Wallet is supported

        :return: The apple_pass_supported of this Product200ResponseAllOfData.
        :rtype: bool
        """
        return self._apple_pass_supported

    @apple_pass_supported.setter
    def apple_pass_supported(self, apple_pass_supported):
        """Sets the apple_pass_supported of this Product200ResponseAllOfData.

        **indicator**: `true` if Apple Wallet is supported

        :param apple_pass_supported: The apple_pass_supported of this Product200ResponseAllOfData.
        :type apple_pass_supported: bool
        """

        self._apple_pass_supported = apple_pass_supported

    @property
    def available(self):
        """Gets the available of this Product200ResponseAllOfData.

        ignore (Viator only)

        :return: The available of this Product200ResponseAllOfData.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this Product200ResponseAllOfData.

        ignore (Viator only)

        :param available: The available of this Product200ResponseAllOfData.
        :type available: bool
        """

        self._available = available

    @property
    def booking_engine_id(self):
        """Gets the booking_engine_id of this Product200ResponseAllOfData.


        :return: The booking_engine_id of this Product200ResponseAllOfData.
        :rtype: BookingEngineId
        """
        return self._booking_engine_id

    @booking_engine_id.setter
    def booking_engine_id(self, booking_engine_id):
        """Sets the booking_engine_id of this Product200ResponseAllOfData.


        :param booking_engine_id: The booking_engine_id of this Product200ResponseAllOfData.
        :type booking_engine_id: BookingEngineId
        """

        self._booking_engine_id = booking_engine_id

    @property
    def booking_questions(self):
        """Gets the booking_questions of this Product200ResponseAllOfData.


        :return: The booking_questions of this Product200ResponseAllOfData.
        :rtype: List[Product200ResponseAllOfDataBookingQuestionsInner]
        """
        return self._booking_questions

    @booking_questions.setter
    def booking_questions(self, booking_questions):
        """Sets the booking_questions of this Product200ResponseAllOfData.


        :param booking_questions: The booking_questions of this Product200ResponseAllOfData.
        :type booking_questions: List[Product200ResponseAllOfDataBookingQuestionsInner]
        """

        self._booking_questions = booking_questions

    @property
    def cat_ids(self):
        """Gets the cat_ids of this Product200ResponseAllOfData.

        **list** of unique numeric category identifiers that *this* product falls under - `categoryId` is available from the [/taxonomy/categories](#operation/taxonomyCategories) service 

        :return: The cat_ids of this Product200ResponseAllOfData.
        :rtype: List[int]
        """
        return self._cat_ids

    @cat_ids.setter
    def cat_ids(self, cat_ids):
        """Sets the cat_ids of this Product200ResponseAllOfData.

        **list** of unique numeric category identifiers that *this* product falls under - `categoryId` is available from the [/taxonomy/categories](#operation/taxonomyCategories) service 

        :param cat_ids: The cat_ids of this Product200ResponseAllOfData.
        :type cat_ids: List[int]
        """

        self._cat_ids = cat_ids

    @property
    def city(self):
        """Gets the city of this Product200ResponseAllOfData.

        **name** of city or destination that *this* product operates in

        :return: The city of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Product200ResponseAllOfData.

        **name** of city or destination that *this* product operates in

        :param city: The city of this Product200ResponseAllOfData.
        :type city: str
        """

        self._city = city

    @property
    def code(self):
        """Gets the code of this Product200ResponseAllOfData.

        **unique alphanumeric identifier** of *this* product

        :return: The code of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Product200ResponseAllOfData.

        **unique alphanumeric identifier** of *this* product

        :param code: The code of this Product200ResponseAllOfData.
        :type code: str
        """

        self._code = code

    @property
    def country(self):
        """Gets the country of this Product200ResponseAllOfData.

        **natural-language name** of the country in which *this* product operates

        :return: The country of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Product200ResponseAllOfData.

        **natural-language name** of the country in which *this* product operates

        :param country: The country of this Product200ResponseAllOfData.
        :type country: str
        """

        self._country = country

    @property
    def currency_code(self):
        """Gets the currency_code of this Product200ResponseAllOfData.

        **currency** in which to display *this* product's pricing details

        :return: The currency_code of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Product200ResponseAllOfData.

        **currency** in which to display *this* product's pricing details

        :param currency_code: The currency_code of this Product200ResponseAllOfData.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def departure_point(self):
        """Gets the departure_point of this Product200ResponseAllOfData.

        **HTML-formatted natural-language description** of *this* product's departure location

        :return: The departure_point of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._departure_point

    @departure_point.setter
    def departure_point(self, departure_point):
        """Sets the departure_point of this Product200ResponseAllOfData.

        **HTML-formatted natural-language description** of *this* product's departure location

        :param departure_point: The departure_point of this Product200ResponseAllOfData.
        :type departure_point: str
        """

        self._departure_point = departure_point

    @property
    def departure_time(self):
        """Gets the departure_time of this Product200ResponseAllOfData.

        **HTML-formatted natural-language description** of *this* product's departure times - may contain basic HTML mark-up tags; e.g., br, li, b, u, p, i, ul and ol 

        :return: The departure_time of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._departure_time

    @departure_time.setter
    def departure_time(self, departure_time):
        """Sets the departure_time of this Product200ResponseAllOfData.

        **HTML-formatted natural-language description** of *this* product's departure times - may contain basic HTML mark-up tags; e.g., br, li, b, u, p, i, ul and ol 

        :param departure_time: The departure_time of this Product200ResponseAllOfData.
        :type departure_time: str
        """

        self._departure_time = departure_time

    @property
    def departure_time_comments(self):
        """Gets the departure_time_comments of this Product200ResponseAllOfData.

        **HTML-formatted natural-language description** of extra information pertaining to product departure times

        :return: The departure_time_comments of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._departure_time_comments

    @departure_time_comments.setter
    def departure_time_comments(self, departure_time_comments):
        """Sets the departure_time_comments of this Product200ResponseAllOfData.

        **HTML-formatted natural-language description** of extra information pertaining to product departure times

        :param departure_time_comments: The departure_time_comments of this Product200ResponseAllOfData.
        :type departure_time_comments: str
        """

        self._departure_time_comments = departure_time_comments

    @property
    def description(self):
        """Gets the description of this Product200ResponseAllOfData.

        **HTML-formatted natural-language description** of *this* product (extended)

        :return: The description of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Product200ResponseAllOfData.

        **HTML-formatted natural-language description** of *this* product (extended)

        :param description: The description of this Product200ResponseAllOfData.
        :type description: str
        """

        self._description = description

    @property
    def destination_id(self):
        """Gets the destination_id of this Product200ResponseAllOfData.

        **unique numeric identifier** of the destination in which *this* product is located - `destinationId` is available from the [/taxonomy/destinations](#operation/taxonomyDestinations) service 

        :return: The destination_id of this Product200ResponseAllOfData.
        :rtype: int
        """
        return self._destination_id

    @destination_id.setter
    def destination_id(self, destination_id):
        """Sets the destination_id of this Product200ResponseAllOfData.

        **unique numeric identifier** of the destination in which *this* product is located - `destinationId` is available from the [/taxonomy/destinations](#operation/taxonomyDestinations) service 

        :param destination_id: The destination_id of this Product200ResponseAllOfData.
        :type destination_id: int
        """

        self._destination_id = destination_id

    @property
    def duration(self):
        """Gets the duration of this Product200ResponseAllOfData.

        **natural-language description** of *this* product's duration

        :return: The duration of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Product200ResponseAllOfData.

        **natural-language description** of *this* product's duration

        :param duration: The duration of this Product200ResponseAllOfData.
        :type duration: str
        """

        self._duration = duration

    @property
    def essential(self):
        """Gets the essential of this Product200ResponseAllOfData.

        ignore (Viator only)

        :return: The essential of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._essential

    @essential.setter
    def essential(self, essential):
        """Sets the essential of this Product200ResponseAllOfData.

        ignore (Viator only)

        :param essential: The essential of this Product200ResponseAllOfData.
        :type essential: str
        """

        self._essential = essential

    @property
    def exclusions(self):
        """Gets the exclusions of this Product200ResponseAllOfData.

        **array** of HTML-formatted natural-language exclusions for *this* product - may contain basic HTML mark-up - e.g., br, li, b, u, p, i, ul and ol 

        :return: The exclusions of this Product200ResponseAllOfData.
        :rtype: List[str]
        """
        return self._exclusions

    @exclusions.setter
    def exclusions(self, exclusions):
        """Sets the exclusions of this Product200ResponseAllOfData.

        **array** of HTML-formatted natural-language exclusions for *this* product - may contain basic HTML mark-up - e.g., br, li, b, u, p, i, ul and ol 

        :param exclusions: The exclusions of this Product200ResponseAllOfData.
        :type exclusions: List[str]
        """

        self._exclusions = exclusions

    @property
    def highlights(self):
        """Gets the highlights of this Product200ResponseAllOfData.

        ignore (Viator only)

        :return: The highlights of this Product200ResponseAllOfData.
        :rtype: int
        """
        return self._highlights

    @highlights.setter
    def highlights(self, highlights):
        """Sets the highlights of this Product200ResponseAllOfData.

        ignore (Viator only)

        :param highlights: The highlights of this Product200ResponseAllOfData.
        :type highlights: int
        """

        self._highlights = highlights

    @property
    def hotel_pickup(self):
        """Gets the hotel_pickup of this Product200ResponseAllOfData.

        **indicator**: `true` if *this* product offers hotel pick-up; if so, you will need to collect the user's hotel details

        :return: The hotel_pickup of this Product200ResponseAllOfData.
        :rtype: bool
        """
        return self._hotel_pickup

    @hotel_pickup.setter
    def hotel_pickup(self, hotel_pickup):
        """Sets the hotel_pickup of this Product200ResponseAllOfData.

        **indicator**: `true` if *this* product offers hotel pick-up; if so, you will need to collect the user's hotel details

        :param hotel_pickup: The hotel_pickup of this Product200ResponseAllOfData.
        :type hotel_pickup: bool
        """

        self._hotel_pickup = hotel_pickup

    @property
    def inclusions(self):
        """Gets the inclusions of this Product200ResponseAllOfData.

        **array** of HTML-formatted features included in *this* product - may contain basic HTML mark-up tags; e.g., br, li, b, u, p, i, ul and ol 

        :return: The inclusions of this Product200ResponseAllOfData.
        :rtype: List[str]
        """
        return self._inclusions

    @inclusions.setter
    def inclusions(self, inclusions):
        """Sets the inclusions of this Product200ResponseAllOfData.

        **array** of HTML-formatted features included in *this* product - may contain basic HTML mark-up tags; e.g., br, li, b, u, p, i, ul and ol 

        :param inclusions: The inclusions of this Product200ResponseAllOfData.
        :type inclusions: List[str]
        """

        self._inclusions = inclusions

    @property
    def itinerary(self):
        """Gets the itinerary of this Product200ResponseAllOfData.

        **HTML-formatted description** of the itinerary of *this* tour if available - may contain basic HTML tags; e.g., br, li, b, u, p, i, ul and ol 

        :return: The itinerary of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._itinerary

    @itinerary.setter
    def itinerary(self, itinerary):
        """Sets the itinerary of this Product200ResponseAllOfData.

        **HTML-formatted description** of the itinerary of *this* tour if available - may contain basic HTML tags; e.g., br, li, b, u, p, i, ul and ol 

        :param itinerary: The itinerary of this Product200ResponseAllOfData.
        :type itinerary: str
        """

        self._itinerary = itinerary

    @property
    def location(self):
        """Gets the location of this Product200ResponseAllOfData.

        **natural-language description** of *this* product's location -  can be a combination of the country and city, or a custom location 

        :return: The location of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Product200ResponseAllOfData.

        **natural-language description** of *this* product's location -  can be a combination of the country and city, or a custom location 

        :param location: The location of this Product200ResponseAllOfData.
        :type location: str
        """

        self._location = location

    @property
    def map_url(self):
        """Gets the map_url of this Product200ResponseAllOfData.

        **URL** of this product's map (usually an image)

        :return: The map_url of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._map_url

    @map_url.setter
    def map_url(self, map_url):
        """Sets the map_url of this Product200ResponseAllOfData.

        **URL** of this product's map (usually an image)

        :param map_url: The map_url of this Product200ResponseAllOfData.
        :type map_url: str
        """

        self._map_url = map_url

    @property
    def max_traveller_count(self):
        """Gets the max_traveller_count of this Product200ResponseAllOfData.

        **maximum number of travelers** allowed per-booking for *this* product

        :return: The max_traveller_count of this Product200ResponseAllOfData.
        :rtype: int
        """
        return self._max_traveller_count

    @max_traveller_count.setter
    def max_traveller_count(self, max_traveller_count):
        """Sets the max_traveller_count of this Product200ResponseAllOfData.

        **maximum number of travelers** allowed per-booking for *this* product

        :param max_traveller_count: The max_traveller_count of this Product200ResponseAllOfData.
        :type max_traveller_count: int
        """

        self._max_traveller_count = max_traveller_count

    @property
    def merchant_cancellable(self):
        """Gets the merchant_cancellable of this Product200ResponseAllOfData.

        ignore (Viator only)         For cancellation information regarding the booking, please refer to the `merchantTermsAndConditions` object 

        :return: The merchant_cancellable of this Product200ResponseAllOfData.
        :rtype: bool
        """
        return self._merchant_cancellable

    @merchant_cancellable.setter
    def merchant_cancellable(self, merchant_cancellable):
        """Sets the merchant_cancellable of this Product200ResponseAllOfData.

        ignore (Viator only)         For cancellation information regarding the booking, please refer to the `merchantTermsAndConditions` object 

        :param merchant_cancellable: The merchant_cancellable of this Product200ResponseAllOfData.
        :type merchant_cancellable: bool
        """

        self._merchant_cancellable = merchant_cancellable

    @property
    def merchant_net_price_from(self):
        """Gets the merchant_net_price_from of this Product200ResponseAllOfData.

        Numeric 'from' (lowest possible) price that Viator will invoice the merchant for the sale of this product, excluding the transaction fee; i.e. the merchant net rate  For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing) 

        :return: The merchant_net_price_from of this Product200ResponseAllOfData.
        :rtype: float
        """
        return self._merchant_net_price_from

    @merchant_net_price_from.setter
    def merchant_net_price_from(self, merchant_net_price_from):
        """Sets the merchant_net_price_from of this Product200ResponseAllOfData.

        Numeric 'from' (lowest possible) price that Viator will invoice the merchant for the sale of this product, excluding the transaction fee; i.e. the merchant net rate  For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing) 

        :param merchant_net_price_from: The merchant_net_price_from of this Product200ResponseAllOfData.
        :type merchant_net_price_from: float
        """

        self._merchant_net_price_from = merchant_net_price_from

    @property
    def merchant_net_price_from_formatted(self):
        """Gets the merchant_net_price_from_formatted of this Product200ResponseAllOfData.

        Currency-formatted 'from' (lowest possible) price that Viator will invoice the merchant for the sale of this product, excluding the transaction fee (i.e. the merchant net rate)  For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing) 

        :return: The merchant_net_price_from_formatted of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._merchant_net_price_from_formatted

    @merchant_net_price_from_formatted.setter
    def merchant_net_price_from_formatted(self, merchant_net_price_from_formatted):
        """Sets the merchant_net_price_from_formatted of this Product200ResponseAllOfData.

        Currency-formatted 'from' (lowest possible) price that Viator will invoice the merchant for the sale of this product, excluding the transaction fee (i.e. the merchant net rate)  For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing) 

        :param merchant_net_price_from_formatted: The merchant_net_price_from_formatted of this Product200ResponseAllOfData.
        :type merchant_net_price_from_formatted: str
        """

        self._merchant_net_price_from_formatted = merchant_net_price_from_formatted

    @property
    def merchant_terms_and_conditions(self):
        """Gets the merchant_terms_and_conditions of this Product200ResponseAllOfData.


        :return: The merchant_terms_and_conditions of this Product200ResponseAllOfData.
        :rtype: Product200ResponseAllOfDataMerchantTermsAndConditions
        """
        return self._merchant_terms_and_conditions

    @merchant_terms_and_conditions.setter
    def merchant_terms_and_conditions(self, merchant_terms_and_conditions):
        """Sets the merchant_terms_and_conditions of this Product200ResponseAllOfData.


        :param merchant_terms_and_conditions: The merchant_terms_and_conditions of this Product200ResponseAllOfData.
        :type merchant_terms_and_conditions: Product200ResponseAllOfDataMerchantTermsAndConditions
        """

        self._merchant_terms_and_conditions = merchant_terms_and_conditions

    @property
    def on_request_period(self):
        """Gets the on_request_period of this Product200ResponseAllOfData.

        **number** of hours before the travel date that *this* product will be 'on-request' for - this field will contain a value if the `bookingEngineId` is `'FreesaleOnRequestBE'` - an `onRequestPeriod` of 48 hours means that *this* product is freesale up until 48 hours before the travel date, and is on-request for 48 hours or less until the travel date - **note**: 'hours in advance' (the number of hours a product is available for booking before the travel date) may also affect this; however, this value is not available in the API 

        :return: The on_request_period of this Product200ResponseAllOfData.
        :rtype: int
        """
        return self._on_request_period

    @on_request_period.setter
    def on_request_period(self, on_request_period):
        """Sets the on_request_period of this Product200ResponseAllOfData.

        **number** of hours before the travel date that *this* product will be 'on-request' for - this field will contain a value if the `bookingEngineId` is `'FreesaleOnRequestBE'` - an `onRequestPeriod` of 48 hours means that *this* product is freesale up until 48 hours before the travel date, and is on-request for 48 hours or less until the travel date - **note**: 'hours in advance' (the number of hours a product is available for booking before the travel date) may also affect this; however, this value is not available in the API 

        :param on_request_period: The on_request_period of this Product200ResponseAllOfData.
        :type on_request_period: int
        """

        self._on_request_period = on_request_period

    @property
    def on_sale(self):
        """Gets the on_sale of this Product200ResponseAllOfData.

        Ignore (Viator only) 

        :return: The on_sale of this Product200ResponseAllOfData.
        :rtype: bool
        """
        return self._on_sale

    @on_sale.setter
    def on_sale(self, on_sale):
        """Sets the on_sale of this Product200ResponseAllOfData.

        Ignore (Viator only) 

        :param on_sale: The on_sale of this Product200ResponseAllOfData.
        :type on_sale: bool
        """

        self._on_sale = on_sale

    @property
    def operates(self):
        """Gets the operates of this Product200ResponseAllOfData.

        **HTML-formatted natural-language description** of *this* product's operation frequency

        :return: The operates of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._operates

    @operates.setter
    def operates(self, operates):
        """Sets the operates of this Product200ResponseAllOfData.

        **HTML-formatted natural-language description** of *this* product's operation frequency

        :param operates: The operates of this Product200ResponseAllOfData.
        :type operates: str
        """

        self._operates = operates

    @property
    def panorama_count(self):
        """Gets the panorama_count of this Product200ResponseAllOfData.

        **number** of panoramic images available for *this* product

        :return: The panorama_count of this Product200ResponseAllOfData.
        :rtype: int
        """
        return self._panorama_count

    @panorama_count.setter
    def panorama_count(self, panorama_count):
        """Sets the panorama_count of this Product200ResponseAllOfData.

        **number** of panoramic images available for *this* product

        :param panorama_count: The panorama_count of this Product200ResponseAllOfData.
        :type panorama_count: int
        """

        self._panorama_count = panorama_count

    @property
    def pas(self):
        """Gets the pas of this Product200ResponseAllOfData.

        ignore (Viator only)

        :return: The pas of this Product200ResponseAllOfData.
        :rtype: object
        """
        return self._pas

    @pas.setter
    def pas(self, pas):
        """Sets the pas of this Product200ResponseAllOfData.

        ignore (Viator only)

        :param pas: The pas of this Product200ResponseAllOfData.
        :type pas: object
        """

        self._pas = pas

    @property
    def passenger_attributes(self):
        """Gets the passenger_attributes of this Product200ResponseAllOfData.

        ignore (Viator only)

        :return: The passenger_attributes of this Product200ResponseAllOfData.
        :rtype: List[Product200ResponseAllOfDataPassengerAttributesInner]
        """
        return self._passenger_attributes

    @passenger_attributes.setter
    def passenger_attributes(self, passenger_attributes):
        """Sets the passenger_attributes of this Product200ResponseAllOfData.

        ignore (Viator only)

        :param passenger_attributes: The passenger_attributes of this Product200ResponseAllOfData.
        :type passenger_attributes: List[Product200ResponseAllOfDataPassengerAttributesInner]
        """

        self._passenger_attributes = passenger_attributes

    @property
    def photo_count(self):
        """Gets the photo_count of this Product200ResponseAllOfData.

        **number** of user photos available for *this* product

        :return: The photo_count of this Product200ResponseAllOfData.
        :rtype: int
        """
        return self._photo_count

    @photo_count.setter
    def photo_count(self, photo_count):
        """Sets the photo_count of this Product200ResponseAllOfData.

        **number** of user photos available for *this* product

        :param photo_count: The photo_count of this Product200ResponseAllOfData.
        :type photo_count: int
        """

        self._photo_count = photo_count

    @property
    def price(self):
        """Gets the price of this Product200ResponseAllOfData.

        **suggested sell ('from') price** for this product in the currency set in the `currencyCode` parameter. This is the cheapest sell price, taking into consideration off-peak periods and discounts on larger groups.     - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :return: The price of this Product200ResponseAllOfData.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Product200ResponseAllOfData.

        **suggested sell ('from') price** for this product in the currency set in the `currencyCode` parameter. This is the cheapest sell price, taking into consideration off-peak periods and discounts on larger groups.     - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :param price: The price of this Product200ResponseAllOfData.
        :type price: float
        """

        self._price = price

    @property
    def price_formatted(self):
        """Gets the price_formatted of this Product200ResponseAllOfData.

        **currency-formatted suggested sell ('from') price** for this product in the currency set in the `currencyCode` parameter  - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :return: The price_formatted of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._price_formatted

    @price_formatted.setter
    def price_formatted(self, price_formatted):
        """Sets the price_formatted of this Product200ResponseAllOfData.

        **currency-formatted suggested sell ('from') price** for this product in the currency set in the `currencyCode` parameter  - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing) 

        :param price_formatted: The price_formatted of this Product200ResponseAllOfData.
        :type price_formatted: str
        """

        self._price_formatted = price_formatted

    @property
    def primary_destination_id(self):
        """Gets the primary_destination_id of this Product200ResponseAllOfData.

        **unique numeric identifier** of *this* product's primary destination

        :return: The primary_destination_id of this Product200ResponseAllOfData.
        :rtype: int
        """
        return self._primary_destination_id

    @primary_destination_id.setter
    def primary_destination_id(self, primary_destination_id):
        """Sets the primary_destination_id of this Product200ResponseAllOfData.

        **unique numeric identifier** of *this* product's primary destination

        :param primary_destination_id: The primary_destination_id of this Product200ResponseAllOfData.
        :type primary_destination_id: int
        """

        self._primary_destination_id = primary_destination_id

    @property
    def primary_destination_name(self):
        """Gets the primary_destination_name of this Product200ResponseAllOfData.

        **natural-language name** of *this* product's primary destination

        :return: The primary_destination_name of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._primary_destination_name

    @primary_destination_name.setter
    def primary_destination_name(self, primary_destination_name):
        """Sets the primary_destination_name of this Product200ResponseAllOfData.

        **natural-language name** of *this* product's primary destination

        :param primary_destination_name: The primary_destination_name of this Product200ResponseAllOfData.
        :type primary_destination_name: str
        """

        self._primary_destination_name = primary_destination_name

    @property
    def primary_destination_url_name(self):
        """Gets the primary_destination_url_name of this Product200ResponseAllOfData.

        **URL-formatted name** of the destination in which *this* product is located

        :return: The primary_destination_url_name of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._primary_destination_url_name

    @primary_destination_url_name.setter
    def primary_destination_url_name(self, primary_destination_url_name):
        """Sets the primary_destination_url_name of this Product200ResponseAllOfData.

        **URL-formatted name** of the destination in which *this* product is located

        :param primary_destination_url_name: The primary_destination_url_name of this Product200ResponseAllOfData.
        :type primary_destination_url_name: str
        """

        self._primary_destination_url_name = primary_destination_url_name

    @property
    def primary_group_id(self):
        """Gets the primary_group_id of this Product200ResponseAllOfData.

        ignore (Viator only)

        :return: The primary_group_id of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._primary_group_id

    @primary_group_id.setter
    def primary_group_id(self, primary_group_id):
        """Sets the primary_group_id of this Product200ResponseAllOfData.

        ignore (Viator only)

        :param primary_group_id: The primary_group_id of this Product200ResponseAllOfData.
        :type primary_group_id: str
        """

        self._primary_group_id = primary_group_id

    @property
    def product_photos(self):
        """Gets the product_photos of this Product200ResponseAllOfData.

        **array** of image objects detailing images available for *this* product

        :return: The product_photos of this Product200ResponseAllOfData.
        :rtype: List[Product200ResponseAllOfDataProductPhotosInner]
        """
        return self._product_photos

    @product_photos.setter
    def product_photos(self, product_photos):
        """Sets the product_photos of this Product200ResponseAllOfData.

        **array** of image objects detailing images available for *this* product

        :param product_photos: The product_photos of this Product200ResponseAllOfData.
        :type product_photos: List[Product200ResponseAllOfDataProductPhotosInner]
        """

        self._product_photos = product_photos

    @property
    def product_url_name(self):
        """Gets the product_url_name of this Product200ResponseAllOfData.

        **URL-formatted name** of *this* product

        :return: The product_url_name of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._product_url_name

    @product_url_name.setter
    def product_url_name(self, product_url_name):
        """Sets the product_url_name of this Product200ResponseAllOfData.

        **URL-formatted name** of *this* product

        :param product_url_name: The product_url_name of this Product200ResponseAllOfData.
        :type product_url_name: str
        """

        self._product_url_name = product_url_name

    @property
    def rating(self):
        """Gets the rating of this Product200ResponseAllOfData.

        **average user rating** of *this* product  users rate products by assigning a star-rating from 1-5; this value shows the average of the star ratings provided by users;  the `ratingCounts` associative array in this response provides a breakdown of how many submissions for each star rating have been received 

        :return: The rating of this Product200ResponseAllOfData.
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this Product200ResponseAllOfData.

        **average user rating** of *this* product  users rate products by assigning a star-rating from 1-5; this value shows the average of the star ratings provided by users;  the `ratingCounts` associative array in this response provides a breakdown of how many submissions for each star rating have been received 

        :param rating: The rating of this Product200ResponseAllOfData.
        :type rating: float
        """

        self._rating = rating

    @property
    def rating_counts(self):
        """Gets the rating_counts of this Product200ResponseAllOfData.


        :return: The rating_counts of this Product200ResponseAllOfData.
        :rtype: RatingCounts
        """
        return self._rating_counts

    @rating_counts.setter
    def rating_counts(self, rating_counts):
        """Sets the rating_counts of this Product200ResponseAllOfData.


        :param rating_counts: The rating_counts of this Product200ResponseAllOfData.
        :type rating_counts: RatingCounts
        """

        self._rating_counts = rating_counts

    @property
    def region(self):
        """Gets the region of this Product200ResponseAllOfData.

        **natural-language name** of the region in which *this* product operates

        :return: The region of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Product200ResponseAllOfData.

        **natural-language name** of the region in which *this* product operates

        :param region: The region of this Product200ResponseAllOfData.
        :type region: str
        """

        self._region = region

    @property
    def return_details(self):
        """Gets the return_details of this Product200ResponseAllOfData.

        **HTML-formatted natural-language description** of *this* product's drop-off details (if available)

        :return: The return_details of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._return_details

    @return_details.setter
    def return_details(self, return_details):
        """Sets the return_details of this Product200ResponseAllOfData.

        **HTML-formatted natural-language description** of *this* product's drop-off details (if available)

        :param return_details: The return_details of this Product200ResponseAllOfData.
        :type return_details: str
        """

        self._return_details = return_details

    @property
    def review_count(self):
        """Gets the review_count of this Product200ResponseAllOfData.

        **number** of user reviews that have been submitted by users for *this* product  If your account has been configured to limit the number of reviews you can receive, this value will never be higher than that. Otherwise, this value will show the total number of reviews available for this product. If there are more than 24 reviews available, you will need to use the [/product/reviews](#operation/productReviews) service to retrieve the remainder of the reviews. 

        :return: The review_count of this Product200ResponseAllOfData.
        :rtype: int
        """
        return self._review_count

    @review_count.setter
    def review_count(self, review_count):
        """Sets the review_count of this Product200ResponseAllOfData.

        **number** of user reviews that have been submitted by users for *this* product  If your account has been configured to limit the number of reviews you can receive, this value will never be higher than that. Otherwise, this value will show the total number of reviews available for this product. If there are more than 24 reviews available, you will need to use the [/product/reviews](#operation/productReviews) service to retrieve the remainder of the reviews. 

        :param review_count: The review_count of this Product200ResponseAllOfData.
        :type review_count: int
        """

        self._review_count = review_count

    @property
    def reviews(self):
        """Gets the reviews of this Product200ResponseAllOfData.

        **array** of user review objects  The number of reviews returned here will either be the number of reviews you are entitled to according to your account configuration; or, if you are not limited in the number of reviews you can receive, will be a maxiumum of 24 reviews. If the value of `reviewCount` in this response exceeds 24, you can use the [/product/reviews](#operation/productReviews) endpoint to retrieve the remainder of the reviews. 

        :return: The reviews of this Product200ResponseAllOfData.
        :rtype: List[ReviewObject]
        """
        return self._reviews

    @reviews.setter
    def reviews(self, reviews):
        """Sets the reviews of this Product200ResponseAllOfData.

        **array** of user review objects  The number of reviews returned here will either be the number of reviews you are entitled to according to your account configuration; or, if you are not limited in the number of reviews you can receive, will be a maxiumum of 24 reviews. If the value of `reviewCount` in this response exceeds 24, you can use the [/product/reviews](#operation/productReviews) endpoint to retrieve the remainder of the reviews. 

        :param reviews: The reviews of this Product200ResponseAllOfData.
        :type reviews: List[ReviewObject]
        """

        self._reviews = reviews

    @property
    def rrp(self):
        """Gets the rrp of this Product200ResponseAllOfData.

        **numeric original price** for this product if the product is on special / a discount has been applied. `0` if there is no discount on this product. See [Special offers and on-sale pricing](#section/Key-concepts/Special-offers-and-on-sale-pricing) for more information.

        :return: The rrp of this Product200ResponseAllOfData.
        :rtype: int
        """
        return self._rrp

    @rrp.setter
    def rrp(self, rrp):
        """Sets the rrp of this Product200ResponseAllOfData.

        **numeric original price** for this product if the product is on special / a discount has been applied. `0` if there is no discount on this product. See [Special offers and on-sale pricing](#section/Key-concepts/Special-offers-and-on-sale-pricing) for more information.

        :param rrp: The rrp of this Product200ResponseAllOfData.
        :type rrp: int
        """

        self._rrp = rrp

    @property
    def rrp_formatted(self):
        """Gets the rrp_formatted of this Product200ResponseAllOfData.

        **currency-formatted original price** for this product if the product is on special / a discount has been applied. Empty string if there is no discount on this product. See [Special offers and on-sale pricing](#section/Key-concepts/Special-offers-and-on-sale-pricing) for more information.

        :return: The rrp_formatted of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._rrp_formatted

    @rrp_formatted.setter
    def rrp_formatted(self, rrp_formatted):
        """Sets the rrp_formatted of this Product200ResponseAllOfData.

        **currency-formatted original price** for this product if the product is on special / a discount has been applied. Empty string if there is no discount on this product. See [Special offers and on-sale pricing](#section/Key-concepts/Special-offers-and-on-sale-pricing) for more information.

        :param rrp_formatted: The rrp_formatted of this Product200ResponseAllOfData.
        :type rrp_formatted: str
        """

        self._rrp_formatted = rrp_formatted

    @property
    def sales_points(self):
        """Gets the sales_points of this Product200ResponseAllOfData.

        ignore (Viator only)  **Note**: The information that was previously returned in this field is available in the `additionalInfo`, `inclusions` and `description` fields 

        :return: The sales_points of this Product200ResponseAllOfData.
        :rtype: List[str]
        """
        return self._sales_points

    @sales_points.setter
    def sales_points(self, sales_points):
        """Sets the sales_points of this Product200ResponseAllOfData.

        ignore (Viator only)  **Note**: The information that was previously returned in this field is available in the `additionalInfo`, `inclusions` and `description` fields 

        :param sales_points: The sales_points of this Product200ResponseAllOfData.
        :type sales_points: List[str]
        """

        self._sales_points = sales_points

    @property
    def saving_amount(self):
        """Gets the saving_amount of this Product200ResponseAllOfData.

        Ignore (Viator only) 

        :return: The saving_amount of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._saving_amount

    @saving_amount.setter
    def saving_amount(self, saving_amount):
        """Sets the saving_amount of this Product200ResponseAllOfData.

        Ignore (Viator only) 

        :param saving_amount: The saving_amount of this Product200ResponseAllOfData.
        :type saving_amount: str
        """

        self._saving_amount = saving_amount

    @property
    def saving_amount_formated(self):
        """Gets the saving_amount_formated of this Product200ResponseAllOfData.

        Ignore (Viator only) 

        :return: The saving_amount_formated of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._saving_amount_formated

    @saving_amount_formated.setter
    def saving_amount_formated(self, saving_amount_formated):
        """Sets the saving_amount_formated of this Product200ResponseAllOfData.

        Ignore (Viator only) 

        :param saving_amount_formated: The saving_amount_formated of this Product200ResponseAllOfData.
        :type saving_amount_formated: str
        """

        self._saving_amount_formated = saving_amount_formated

    @property
    def short_description(self):
        """Gets the short_description of this Product200ResponseAllOfData.

        **natural-language description** (shortened) of *this* product

        :return: The short_description of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this Product200ResponseAllOfData.

        **natural-language description** (shortened) of *this* product

        :param short_description: The short_description of this Product200ResponseAllOfData.
        :type short_description: str
        """

        self._short_description = short_description

    @property
    def short_title(self):
        """Gets the short_title of this Product200ResponseAllOfData.

        **natural-language title** (shortened) of *this* product

        :return: The short_title of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._short_title

    @short_title.setter
    def short_title(self, short_title):
        """Sets the short_title of this Product200ResponseAllOfData.

        **natural-language title** (shortened) of *this* product

        :param short_title: The short_title of this Product200ResponseAllOfData.
        :type short_title: str
        """

        self._short_title = short_title

    @property
    def special_offer(self):
        """Gets the special_offer of this Product200ResponseAllOfData.

        **natural-language description** of any special offers available for *this* product when `specialOfferAvailable` is `true`. - empty string if there are no specials available - See [Special offers and on-sale pricing](#section/Key-concepts/Special-offers-and-on-sale-pricing) for more information. 

        :return: The special_offer of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._special_offer

    @special_offer.setter
    def special_offer(self, special_offer):
        """Sets the special_offer of this Product200ResponseAllOfData.

        **natural-language description** of any special offers available for *this* product when `specialOfferAvailable` is `true`. - empty string if there are no specials available - See [Special offers and on-sale pricing](#section/Key-concepts/Special-offers-and-on-sale-pricing) for more information. 

        :param special_offer: The special_offer of this Product200ResponseAllOfData.
        :type special_offer: str
        """

        self._special_offer = special_offer

    @property
    def special_offer_available(self):
        """Gets the special_offer_available of this Product200ResponseAllOfData.

        **indicator**: `true` if a special offer is available for *this* product. If `true` the `specialOffer` field will contain a text string providing details of the special offer which you may wish to display in your product search results. E.g. 'Book by May 27 to save 34% off our previously offered price!'. See [Special offers and on-sale pricing](#section/Key-concepts/Special-offers-and-on-sale-pricing) for more information.

        :return: The special_offer_available of this Product200ResponseAllOfData.
        :rtype: bool
        """
        return self._special_offer_available

    @special_offer_available.setter
    def special_offer_available(self, special_offer_available):
        """Sets the special_offer_available of this Product200ResponseAllOfData.

        **indicator**: `true` if a special offer is available for *this* product. If `true` the `specialOffer` field will contain a text string providing details of the special offer which you may wish to display in your product search results. E.g. 'Book by May 27 to save 34% off our previously offered price!'. See [Special offers and on-sale pricing](#section/Key-concepts/Special-offers-and-on-sale-pricing) for more information.

        :param special_offer_available: The special_offer_available of this Product200ResponseAllOfData.
        :type special_offer_available: bool
        """

        self._special_offer_available = special_offer_available

    @property
    def special_reservation(self):
        """Gets the special_reservation of this Product200ResponseAllOfData.

        ignore (Viator only)

        :return: The special_reservation of this Product200ResponseAllOfData.
        :rtype: bool
        """
        return self._special_reservation

    @special_reservation.setter
    def special_reservation(self, special_reservation):
        """Sets the special_reservation of this Product200ResponseAllOfData.

        ignore (Viator only)

        :param special_reservation: The special_reservation of this Product200ResponseAllOfData.
        :type special_reservation: bool
        """

        self._special_reservation = special_reservation

    @property
    def special_reservation_details(self):
        """Gets the special_reservation_details of this Product200ResponseAllOfData.

        ignore (Viator only)

        :return: The special_reservation_details of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._special_reservation_details

    @special_reservation_details.setter
    def special_reservation_details(self, special_reservation_details):
        """Sets the special_reservation_details of this Product200ResponseAllOfData.

        ignore (Viator only)

        :param special_reservation_details: The special_reservation_details of this Product200ResponseAllOfData.
        :type special_reservation_details: str
        """

        self._special_reservation_details = special_reservation_details

    @property
    def ssl_supported(self):
        """Gets the ssl_supported of this Product200ResponseAllOfData.

        ignore (Viator only)

        :return: The ssl_supported of this Product200ResponseAllOfData.
        :rtype: bool
        """
        return self._ssl_supported

    @ssl_supported.setter
    def ssl_supported(self, ssl_supported):
        """Sets the ssl_supported of this Product200ResponseAllOfData.

        ignore (Viator only)

        :param ssl_supported: The ssl_supported of this Product200ResponseAllOfData.
        :type ssl_supported: bool
        """

        self._ssl_supported = ssl_supported

    @property
    def sub_cat_ids(self):
        """Gets the sub_cat_ids of this Product200ResponseAllOfData.

        **list** of unique numeric subcategory identifiers that *this* product falls under - `subcategoryId` is available from the [/taxonomy/categories](#operation/taxonomyCategories) service 

        :return: The sub_cat_ids of this Product200ResponseAllOfData.
        :rtype: List[int]
        """
        return self._sub_cat_ids

    @sub_cat_ids.setter
    def sub_cat_ids(self, sub_cat_ids):
        """Sets the sub_cat_ids of this Product200ResponseAllOfData.

        **list** of unique numeric subcategory identifiers that *this* product falls under - `subcategoryId` is available from the [/taxonomy/categories](#operation/taxonomyCategories) service 

        :param sub_cat_ids: The sub_cat_ids of this Product200ResponseAllOfData.
        :type sub_cat_ids: List[int]
        """

        self._sub_cat_ids = sub_cat_ids

    @property
    def supplier_code(self):
        """Gets the supplier_code of this Product200ResponseAllOfData.

        **unique identification code** of *this* product's supplier

        :return: The supplier_code of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._supplier_code

    @supplier_code.setter
    def supplier_code(self, supplier_code):
        """Sets the supplier_code of this Product200ResponseAllOfData.

        **unique identification code** of *this* product's supplier

        :param supplier_code: The supplier_code of this Product200ResponseAllOfData.
        :type supplier_code: str
        """

        self._supplier_code = supplier_code

    @property
    def supplier_name(self):
        """Gets the supplier_name of this Product200ResponseAllOfData.

        **name** of *this* product's supplier

        :return: The supplier_name of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._supplier_name

    @supplier_name.setter
    def supplier_name(self, supplier_name):
        """Sets the supplier_name of this Product200ResponseAllOfData.

        **name** of *this* product's supplier

        :param supplier_name: The supplier_name of this Product200ResponseAllOfData.
        :type supplier_name: str
        """

        self._supplier_name = supplier_name

    @property
    def thumbnail_hi_res_url(self):
        """Gets the thumbnail_hi_res_url of this Product200ResponseAllOfData.

        **URL** of *this* product's high-resolution thumbnail image

        :return: The thumbnail_hi_res_url of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._thumbnail_hi_res_url

    @thumbnail_hi_res_url.setter
    def thumbnail_hi_res_url(self, thumbnail_hi_res_url):
        """Sets the thumbnail_hi_res_url of this Product200ResponseAllOfData.

        **URL** of *this* product's high-resolution thumbnail image

        :param thumbnail_hi_res_url: The thumbnail_hi_res_url of this Product200ResponseAllOfData.
        :type thumbnail_hi_res_url: str
        """

        self._thumbnail_hi_res_url = thumbnail_hi_res_url

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this Product200ResponseAllOfData.

        **URL** for *this* product's thumbnail image

        :return: The thumbnail_url of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this Product200ResponseAllOfData.

        **URL** for *this* product's thumbnail image

        :param thumbnail_url: The thumbnail_url of this Product200ResponseAllOfData.
        :type thumbnail_url: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def title(self):
        """Gets the title of this Product200ResponseAllOfData.

        **natural-language title** of *this* product

        :return: The title of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Product200ResponseAllOfData.

        **natural-language title** of *this* product

        :param title: The title of this Product200ResponseAllOfData.
        :type title: str
        """

        self._title = title

    @property
    def tour_grades(self):
        """Gets the tour_grades of this Product200ResponseAllOfData.

        **array** of tour grade objects available for *this* product

        :return: The tour_grades of this Product200ResponseAllOfData.
        :rtype: List[Product200ResponseAllOfDataTourGradesInner]
        """
        return self._tour_grades

    @tour_grades.setter
    def tour_grades(self, tour_grades):
        """Sets the tour_grades of this Product200ResponseAllOfData.

        **array** of tour grade objects available for *this* product

        :param tour_grades: The tour_grades of this Product200ResponseAllOfData.
        :type tour_grades: List[Product200ResponseAllOfDataTourGradesInner]
        """

        self._tour_grades = tour_grades

    @property
    def tour_grades_available(self):
        """Gets the tour_grades_available of this Product200ResponseAllOfData.

        **indicator**:  - `true`: tour grades are available for this product, meaning you will need to display these tour grades to the user and include a tour grade when booking *this* product - `false`: only a default tour grade is available for *this* product 

        :return: The tour_grades_available of this Product200ResponseAllOfData.
        :rtype: bool
        """
        return self._tour_grades_available

    @tour_grades_available.setter
    def tour_grades_available(self, tour_grades_available):
        """Sets the tour_grades_available of this Product200ResponseAllOfData.

        **indicator**:  - `true`: tour grades are available for this product, meaning you will need to display these tour grades to the user and include a tour grade when booking *this* product - `false`: only a default tour grade is available for *this* product 

        :param tour_grades_available: The tour_grades_available of this Product200ResponseAllOfData.
        :type tour_grades_available: bool
        """

        self._tour_grades_available = tour_grades_available

    @property
    def translation_level(self):
        """Gets the translation_level of this Product200ResponseAllOfData.


        :return: The translation_level of this Product200ResponseAllOfData.
        :rtype: TranslationLevel
        """
        return self._translation_level

    @translation_level.setter
    def translation_level(self, translation_level):
        """Sets the translation_level of this Product200ResponseAllOfData.


        :param translation_level: The translation_level of this Product200ResponseAllOfData.
        :type translation_level: TranslationLevel
        """

        self._translation_level = translation_level

    @property
    def user_photos(self):
        """Gets the user_photos of this Product200ResponseAllOfData.

        **array** of user photo objects

        :return: The user_photos of this Product200ResponseAllOfData.
        :rtype: List[PhotoObject]
        """
        return self._user_photos

    @user_photos.setter
    def user_photos(self, user_photos):
        """Sets the user_photos of this Product200ResponseAllOfData.

        **array** of user photo objects

        :param user_photos: The user_photos of this Product200ResponseAllOfData.
        :type user_photos: List[PhotoObject]
        """

        self._user_photos = user_photos

    @property
    def video_count(self):
        """Gets the video_count of this Product200ResponseAllOfData.

        ignore (Viator only) – videos are not available to partners

        :return: The video_count of this Product200ResponseAllOfData.
        :rtype: int
        """
        return self._video_count

    @video_count.setter
    def video_count(self, video_count):
        """Sets the video_count of this Product200ResponseAllOfData.

        ignore (Viator only) – videos are not available to partners

        :param video_count: The video_count of this Product200ResponseAllOfData.
        :type video_count: int
        """

        self._video_count = video_count

    @property
    def videos(self):
        """Gets the videos of this Product200ResponseAllOfData.

        ignore (Viator only) – videos are not available to partners

        :return: The videos of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._videos

    @videos.setter
    def videos(self, videos):
        """Sets the videos of this Product200ResponseAllOfData.

        ignore (Viator only) – videos are not available to partners

        :param videos: The videos of this Product200ResponseAllOfData.
        :type videos: str
        """

        self._videos = videos

    @property
    def voucher_option(self):
        """Gets the voucher_option of this Product200ResponseAllOfData.

        **specifier** of the type(s) of vouchers that can be used:    - `VOUCHER_PAPER_ONLY` - *only* printed paper vouchers accepted   - `VOUCHER_E` - e-vouchers + printed paper vouchers accepted 

        :return: The voucher_option of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._voucher_option

    @voucher_option.setter
    def voucher_option(self, voucher_option):
        """Sets the voucher_option of this Product200ResponseAllOfData.

        **specifier** of the type(s) of vouchers that can be used:    - `VOUCHER_PAPER_ONLY` - *only* printed paper vouchers accepted   - `VOUCHER_E` - e-vouchers + printed paper vouchers accepted 

        :param voucher_option: The voucher_option of this Product200ResponseAllOfData.
        :type voucher_option: str
        """

        self._voucher_option = voucher_option

    @property
    def voucher_requirements(self):
        """Gets the voucher_requirements of this Product200ResponseAllOfData.

        **natural-language description** of any requirements pertaining to the use of the voucher

        :return: The voucher_requirements of this Product200ResponseAllOfData.
        :rtype: object
        """
        return self._voucher_requirements

    @voucher_requirements.setter
    def voucher_requirements(self, voucher_requirements):
        """Sets the voucher_requirements of this Product200ResponseAllOfData.

        **natural-language description** of any requirements pertaining to the use of the voucher

        :param voucher_requirements: The voucher_requirements of this Product200ResponseAllOfData.
        :type voucher_requirements: object
        """

        self._voucher_requirements = voucher_requirements

    @property
    def web_url(self):
        """Gets the web_url of this Product200ResponseAllOfData.

        ignore (Viator only)

        :return: The web_url of this Product200ResponseAllOfData.
        :rtype: str
        """
        return self._web_url

    @web_url.setter
    def web_url(self, web_url):
        """Sets the web_url of this Product200ResponseAllOfData.

        ignore (Viator only)

        :param web_url: The web_url of this Product200ResponseAllOfData.
        :type web_url: str
        """

        self._web_url = web_url
