# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CancelBookingResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, booking_id: str=None, reason: str=None, status: str=None):
        """CancelBookingResponse - a model defined in OpenAPI

        :param booking_id: The booking_id of this CancelBookingResponse.
        :param reason: The reason of this CancelBookingResponse.
        :param status: The status of this CancelBookingResponse.
        """
        self.openapi_types = {
            'booking_id': str,
            'reason': str,
            'status': str
        }

        self.attribute_map = {
            'booking_id': 'bookingId',
            'reason': 'reason',
            'status': 'status'
        }

        self._booking_id = booking_id
        self._reason = reason
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CancelBookingResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CancelBookingResponse of this CancelBookingResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def booking_id(self):
        """Gets the booking_id of this CancelBookingResponse.

        Booking reference number for this booking, prepended with `BR-`

        :return: The booking_id of this CancelBookingResponse.
        :rtype: str
        """
        return self._booking_id

    @booking_id.setter
    def booking_id(self, booking_id):
        """Sets the booking_id of this CancelBookingResponse.

        Booking reference number for this booking, prepended with `BR-`

        :param booking_id: The booking_id of this CancelBookingResponse.
        :type booking_id: str
        """

        self._booking_id = booking_id

    @property
    def reason(self):
        """Gets the reason of this CancelBookingResponse.


        :return: The reason of this CancelBookingResponse.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this CancelBookingResponse.


        :param reason: The reason of this CancelBookingResponse.
        :type reason: str
        """
        allowed_values = ["ALREADY_CANCELLED", "NOT_CANCELLABLE"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason

    @property
    def status(self):
        """Gets the status of this CancelBookingResponse.

        String indicating the outcome of the booking cancellation request.    * `ACCEPTED`: The cancellation was successful   * `DECLINED`: The cancellation failed 

        :return: The status of this CancelBookingResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CancelBookingResponse.

        String indicating the outcome of the booking cancellation request.    * `ACCEPTED`: The cancellation was successful   * `DECLINED`: The cancellation failed 

        :param status: The status of this CancelBookingResponse.
        :type status: str
        """
        allowed_values = ["ACCEPTED", "DECLINED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
