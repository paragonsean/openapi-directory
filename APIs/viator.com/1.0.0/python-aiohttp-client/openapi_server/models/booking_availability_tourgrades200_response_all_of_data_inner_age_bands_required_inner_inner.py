# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BookingAvailabilityTourgrades200ResponseAllOfDataInnerAgeBandsRequiredInnerInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, band_id: int=None, maximum_count_required: int=None, minimum_count_required: int=None):
        """BookingAvailabilityTourgrades200ResponseAllOfDataInnerAgeBandsRequiredInnerInner - a model defined in OpenAPI

        :param band_id: The band_id of this BookingAvailabilityTourgrades200ResponseAllOfDataInnerAgeBandsRequiredInnerInner.
        :param maximum_count_required: The maximum_count_required of this BookingAvailabilityTourgrades200ResponseAllOfDataInnerAgeBandsRequiredInnerInner.
        :param minimum_count_required: The minimum_count_required of this BookingAvailabilityTourgrades200ResponseAllOfDataInnerAgeBandsRequiredInnerInner.
        """
        self.openapi_types = {
            'band_id': int,
            'maximum_count_required': int,
            'minimum_count_required': int
        }

        self.attribute_map = {
            'band_id': 'bandId',
            'maximum_count_required': 'maximumCountRequired',
            'minimum_count_required': 'minimumCountRequired'
        }

        self._band_id = band_id
        self._maximum_count_required = maximum_count_required
        self._minimum_count_required = minimum_count_required

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookingAvailabilityTourgrades200ResponseAllOfDataInnerAgeBandsRequiredInnerInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The bookingAvailabilityTourgrades_200_response_allOf_data_inner_ageBandsRequired_inner_inner of this BookingAvailabilityTourgrades200ResponseAllOfDataInnerAgeBandsRequiredInnerInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def band_id(self):
        """Gets the band_id of this BookingAvailabilityTourgrades200ResponseAllOfDataInnerAgeBandsRequiredInnerInner.

        **unique numeric identifier** for the age band - See: [Working with age bands](#section/Appendices/Working-with-age-bands) 

        :return: The band_id of this BookingAvailabilityTourgrades200ResponseAllOfDataInnerAgeBandsRequiredInnerInner.
        :rtype: int
        """
        return self._band_id

    @band_id.setter
    def band_id(self, band_id):
        """Sets the band_id of this BookingAvailabilityTourgrades200ResponseAllOfDataInnerAgeBandsRequiredInnerInner.

        **unique numeric identifier** for the age band - See: [Working with age bands](#section/Appendices/Working-with-age-bands) 

        :param band_id: The band_id of this BookingAvailabilityTourgrades200ResponseAllOfDataInnerAgeBandsRequiredInnerInner.
        :type band_id: int
        """

        self._band_id = band_id

    @property
    def maximum_count_required(self):
        """Gets the maximum_count_required of this BookingAvailabilityTourgrades200ResponseAllOfDataInnerAgeBandsRequiredInnerInner.

        **maximum number** of passengers from *this* age band allowable for *this* tour grade

        :return: The maximum_count_required of this BookingAvailabilityTourgrades200ResponseAllOfDataInnerAgeBandsRequiredInnerInner.
        :rtype: int
        """
        return self._maximum_count_required

    @maximum_count_required.setter
    def maximum_count_required(self, maximum_count_required):
        """Sets the maximum_count_required of this BookingAvailabilityTourgrades200ResponseAllOfDataInnerAgeBandsRequiredInnerInner.

        **maximum number** of passengers from *this* age band allowable for *this* tour grade

        :param maximum_count_required: The maximum_count_required of this BookingAvailabilityTourgrades200ResponseAllOfDataInnerAgeBandsRequiredInnerInner.
        :type maximum_count_required: int
        """

        self._maximum_count_required = maximum_count_required

    @property
    def minimum_count_required(self):
        """Gets the minimum_count_required of this BookingAvailabilityTourgrades200ResponseAllOfDataInnerAgeBandsRequiredInnerInner.

        **minimum number** of passengers from *this* age band required for *this* tour grade

        :return: The minimum_count_required of this BookingAvailabilityTourgrades200ResponseAllOfDataInnerAgeBandsRequiredInnerInner.
        :rtype: int
        """
        return self._minimum_count_required

    @minimum_count_required.setter
    def minimum_count_required(self, minimum_count_required):
        """Sets the minimum_count_required of this BookingAvailabilityTourgrades200ResponseAllOfDataInnerAgeBandsRequiredInnerInner.

        **minimum number** of passengers from *this* age band required for *this* tour grade

        :param minimum_count_required: The minimum_count_required of this BookingAvailabilityTourgrades200ResponseAllOfDataInnerAgeBandsRequiredInnerInner.
        :type minimum_count_required: int
        """

        self._minimum_count_required = minimum_count_required
