# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Product200ResponseAllOfDataAgeBandsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adult: bool=None, age_from: int=None, age_to: int=None, band_id: int=None, count: int=None, description: str=None, plural_description: str=None, sort_order: int=None, treat_as_adult: bool=None):
        """Product200ResponseAllOfDataAgeBandsInner - a model defined in OpenAPI

        :param adult: The adult of this Product200ResponseAllOfDataAgeBandsInner.
        :param age_from: The age_from of this Product200ResponseAllOfDataAgeBandsInner.
        :param age_to: The age_to of this Product200ResponseAllOfDataAgeBandsInner.
        :param band_id: The band_id of this Product200ResponseAllOfDataAgeBandsInner.
        :param count: The count of this Product200ResponseAllOfDataAgeBandsInner.
        :param description: The description of this Product200ResponseAllOfDataAgeBandsInner.
        :param plural_description: The plural_description of this Product200ResponseAllOfDataAgeBandsInner.
        :param sort_order: The sort_order of this Product200ResponseAllOfDataAgeBandsInner.
        :param treat_as_adult: The treat_as_adult of this Product200ResponseAllOfDataAgeBandsInner.
        """
        self.openapi_types = {
            'adult': bool,
            'age_from': int,
            'age_to': int,
            'band_id': int,
            'count': int,
            'description': str,
            'plural_description': str,
            'sort_order': int,
            'treat_as_adult': bool
        }

        self.attribute_map = {
            'adult': 'adult',
            'age_from': 'ageFrom',
            'age_to': 'ageTo',
            'band_id': 'bandId',
            'count': 'count',
            'description': 'description',
            'plural_description': 'pluralDescription',
            'sort_order': 'sortOrder',
            'treat_as_adult': 'treatAsAdult'
        }

        self._adult = adult
        self._age_from = age_from
        self._age_to = age_to
        self._band_id = band_id
        self._count = count
        self._description = description
        self._plural_description = plural_description
        self._sort_order = sort_order
        self._treat_as_adult = treat_as_adult

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Product200ResponseAllOfDataAgeBandsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The product_200_response_allOf_data_ageBands_inner of this Product200ResponseAllOfDataAgeBandsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adult(self):
        """Gets the adult of this Product200ResponseAllOfDataAgeBandsInner.

        **indicator**: `true` if *this* age band describes adults (not children)

        :return: The adult of this Product200ResponseAllOfDataAgeBandsInner.
        :rtype: bool
        """
        return self._adult

    @adult.setter
    def adult(self, adult):
        """Sets the adult of this Product200ResponseAllOfDataAgeBandsInner.

        **indicator**: `true` if *this* age band describes adults (not children)

        :param adult: The adult of this Product200ResponseAllOfDataAgeBandsInner.
        :type adult: bool
        """

        self._adult = adult

    @property
    def age_from(self):
        """Gets the age_from of this Product200ResponseAllOfDataAgeBandsInner.

        **numeric lower age limit** of the age range defined by *this* age band

        :return: The age_from of this Product200ResponseAllOfDataAgeBandsInner.
        :rtype: int
        """
        return self._age_from

    @age_from.setter
    def age_from(self, age_from):
        """Sets the age_from of this Product200ResponseAllOfDataAgeBandsInner.

        **numeric lower age limit** of the age range defined by *this* age band

        :param age_from: The age_from of this Product200ResponseAllOfDataAgeBandsInner.
        :type age_from: int
        """

        self._age_from = age_from

    @property
    def age_to(self):
        """Gets the age_to of this Product200ResponseAllOfDataAgeBandsInner.

        **numeric upper age limit** of the age range included in *this* age band

        :return: The age_to of this Product200ResponseAllOfDataAgeBandsInner.
        :rtype: int
        """
        return self._age_to

    @age_to.setter
    def age_to(self, age_to):
        """Sets the age_to of this Product200ResponseAllOfDataAgeBandsInner.

        **numeric upper age limit** of the age range included in *this* age band

        :param age_to: The age_to of this Product200ResponseAllOfDataAgeBandsInner.
        :type age_to: int
        """

        self._age_to = age_to

    @property
    def band_id(self):
        """Gets the band_id of this Product200ResponseAllOfDataAgeBandsInner.

        **unique numeric identifier** for the age band - See: [Working with age bands](#section/Appendices/Working-with-age-bands) 

        :return: The band_id of this Product200ResponseAllOfDataAgeBandsInner.
        :rtype: int
        """
        return self._band_id

    @band_id.setter
    def band_id(self, band_id):
        """Sets the band_id of this Product200ResponseAllOfDataAgeBandsInner.

        **unique numeric identifier** for the age band - See: [Working with age bands](#section/Appendices/Working-with-age-bands) 

        :param band_id: The band_id of this Product200ResponseAllOfDataAgeBandsInner.
        :type band_id: int
        """

        self._band_id = band_id

    @property
    def count(self):
        """Gets the count of this Product200ResponseAllOfDataAgeBandsInner.

        **number** of participants in *this* age band required to book the product

        :return: The count of this Product200ResponseAllOfDataAgeBandsInner.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Product200ResponseAllOfDataAgeBandsInner.

        **number** of participants in *this* age band required to book the product

        :param count: The count of this Product200ResponseAllOfDataAgeBandsInner.
        :type count: int
        """

        self._count = count

    @property
    def description(self):
        """Gets the description of this Product200ResponseAllOfDataAgeBandsInner.

        **natural-language description** (singular) of *this* age band

        :return: The description of this Product200ResponseAllOfDataAgeBandsInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Product200ResponseAllOfDataAgeBandsInner.

        **natural-language description** (singular) of *this* age band

        :param description: The description of this Product200ResponseAllOfDataAgeBandsInner.
        :type description: str
        """

        self._description = description

    @property
    def plural_description(self):
        """Gets the plural_description of this Product200ResponseAllOfDataAgeBandsInner.

        **natural-language description** (plural) of *this* age band

        :return: The plural_description of this Product200ResponseAllOfDataAgeBandsInner.
        :rtype: str
        """
        return self._plural_description

    @plural_description.setter
    def plural_description(self, plural_description):
        """Sets the plural_description of this Product200ResponseAllOfDataAgeBandsInner.

        **natural-language description** (plural) of *this* age band

        :param plural_description: The plural_description of this Product200ResponseAllOfDataAgeBandsInner.
        :type plural_description: str
        """

        self._plural_description = plural_description

    @property
    def sort_order(self):
        """Gets the sort_order of this Product200ResponseAllOfDataAgeBandsInner.

        **sort order** for *this* age band object

        :return: The sort_order of this Product200ResponseAllOfDataAgeBandsInner.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this Product200ResponseAllOfDataAgeBandsInner.

        **sort order** for *this* age band object

        :param sort_order: The sort_order of this Product200ResponseAllOfDataAgeBandsInner.
        :type sort_order: int
        """

        self._sort_order = sort_order

    @property
    def treat_as_adult(self):
        """Gets the treat_as_adult of this Product200ResponseAllOfDataAgeBandsInner.

        **indicator**: `true` if members of this age band are considered to be adults

        :return: The treat_as_adult of this Product200ResponseAllOfDataAgeBandsInner.
        :rtype: bool
        """
        return self._treat_as_adult

    @treat_as_adult.setter
    def treat_as_adult(self, treat_as_adult):
        """Sets the treat_as_adult of this Product200ResponseAllOfDataAgeBandsInner.

        **indicator**: `true` if members of this age band are considered to be adults

        :param treat_as_adult: The treat_as_adult of this Product200ResponseAllOfDataAgeBandsInner.
        :type treat_as_adult: bool
        """

        self._treat_as_adult = treat_as_adult
