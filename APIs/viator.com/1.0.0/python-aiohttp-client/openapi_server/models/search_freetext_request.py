# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sort_order import SortOrder
from openapi_server import util


class SearchFreetextRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_code: str=None, dest_id: int=None, search_types: List[str]=None, sort_order: SortOrder=None, text: str=None, top_x: str=None):
        """SearchFreetextRequest - a model defined in OpenAPI

        :param currency_code: The currency_code of this SearchFreetextRequest.
        :param dest_id: The dest_id of this SearchFreetextRequest.
        :param search_types: The search_types of this SearchFreetextRequest.
        :param sort_order: The sort_order of this SearchFreetextRequest.
        :param text: The text of this SearchFreetextRequest.
        :param top_x: The top_x of this SearchFreetextRequest.
        """
        self.openapi_types = {
            'currency_code': str,
            'dest_id': int,
            'search_types': List[str],
            'sort_order': SortOrder,
            'text': str,
            'top_x': str
        }

        self.attribute_map = {
            'currency_code': 'currencyCode',
            'dest_id': 'destId',
            'search_types': 'searchTypes',
            'sort_order': 'sortOrder',
            'text': 'text',
            'top_x': 'topX'
        }

        self._currency_code = currency_code
        self._dest_id = dest_id
        self._search_types = search_types
        self._sort_order = sort_order
        self._text = text
        self._top_x = top_x

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchFreetextRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The searchFreetext_request of this SearchFreetextRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_code(self):
        """Gets the currency_code of this SearchFreetextRequest.

        **currency code** for the currency in which to display product pricing information

        :return: The currency_code of this SearchFreetextRequest.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this SearchFreetextRequest.

        **currency code** for the currency in which to display product pricing information

        :param currency_code: The currency_code of this SearchFreetextRequest.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def dest_id(self):
        """Gets the dest_id of this SearchFreetextRequest.

        **unique numeric identifier** of the destination to search within  - `destinationId` can be retrieved from the [/taxonomy/destinations](#operation/taxonomyDestinations) service 

        :return: The dest_id of this SearchFreetextRequest.
        :rtype: int
        """
        return self._dest_id

    @dest_id.setter
    def dest_id(self, dest_id):
        """Sets the dest_id of this SearchFreetextRequest.

        **unique numeric identifier** of the destination to search within  - `destinationId` can be retrieved from the [/taxonomy/destinations](#operation/taxonomyDestinations) service 

        :param dest_id: The dest_id of this SearchFreetextRequest.
        :type dest_id: int
        """

        self._dest_id = dest_id

    @property
    def search_types(self):
        """Gets the search_types of this SearchFreetextRequest.

        **array** of search domain specifiers where each item is *one of*:   - `\"PRODUCT\"`: a tour / activity   - `\"DESTINATION\"`: continent, country, city, region   - `\"ATTRACTION\"`: an attraction within a destination (only available to partners with SEO access)   - `\"RECOMMENDATION\"`: an attraction within a destination (only available to partners with SEO access) 

        :return: The search_types of this SearchFreetextRequest.
        :rtype: List[str]
        """
        return self._search_types

    @search_types.setter
    def search_types(self, search_types):
        """Sets the search_types of this SearchFreetextRequest.

        **array** of search domain specifiers where each item is *one of*:   - `\"PRODUCT\"`: a tour / activity   - `\"DESTINATION\"`: continent, country, city, region   - `\"ATTRACTION\"`: an attraction within a destination (only available to partners with SEO access)   - `\"RECOMMENDATION\"`: an attraction within a destination (only available to partners with SEO access) 

        :param search_types: The search_types of this SearchFreetextRequest.
        :type search_types: List[str]
        """
        allowed_values = ["PRODUCT", "DESTINATION", "ATTRACTION", "RECOMMENDATION"]  # noqa: E501
        if not set(search_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `search_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(search_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._search_types = search_types

    @property
    def sort_order(self):
        """Gets the sort_order of this SearchFreetextRequest.


        :return: The sort_order of this SearchFreetextRequest.
        :rtype: SortOrder
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this SearchFreetextRequest.


        :param sort_order: The sort_order of this SearchFreetextRequest.
        :type sort_order: SortOrder
        """

        self._sort_order = sort_order

    @property
    def text(self):
        """Gets the text of this SearchFreetextRequest.

        **text** to search for

        :return: The text of this SearchFreetextRequest.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this SearchFreetextRequest.

        **text** to search for

        :param text: The text of this SearchFreetextRequest.
        :type text: str
        """

        self._text = text

    @property
    def top_x(self):
        """Gets the top_x of this SearchFreetextRequest.

        **start and end rows** to return in the format {start}-{end} - e.g. `'1-10'`, `'11-20'`  **Note**:  - the maximum number of rows per request is 100; therefore, `'100-400'` will return the same as `'100-200'` - if `topX` is not specified, the default is `'1-100'` 

        :return: The top_x of this SearchFreetextRequest.
        :rtype: str
        """
        return self._top_x

    @top_x.setter
    def top_x(self, top_x):
        """Sets the top_x of this SearchFreetextRequest.

        **start and end rows** to return in the format {start}-{end} - e.g. `'1-10'`, `'11-20'`  **Note**:  - the maximum number of rows per request is 100; therefore, `'100-400'` will return the same as `'100-200'` - if `topX` is not specified, the default is `'1-100'` 

        :param top_x: The top_x of this SearchFreetextRequest.
        :type top_x: str
        """

        self._top_x = top_x
