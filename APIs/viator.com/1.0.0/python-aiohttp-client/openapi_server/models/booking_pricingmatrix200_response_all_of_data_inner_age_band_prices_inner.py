# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.booking_pricingmatrix200_response_all_of_data_inner_age_band_prices_inner_prices_inner import BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInnerPricesInner
from openapi_server import util


class BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, band_id: int=None, maximum_count_required: int=None, minimum_count_required: int=None, prices: List[BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInnerPricesInner]=None, sort_order: int=None):
        """BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner - a model defined in OpenAPI

        :param band_id: The band_id of this BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner.
        :param maximum_count_required: The maximum_count_required of this BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner.
        :param minimum_count_required: The minimum_count_required of this BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner.
        :param prices: The prices of this BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner.
        :param sort_order: The sort_order of this BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner.
        """
        self.openapi_types = {
            'band_id': int,
            'maximum_count_required': int,
            'minimum_count_required': int,
            'prices': List[BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInnerPricesInner],
            'sort_order': int
        }

        self.attribute_map = {
            'band_id': 'bandId',
            'maximum_count_required': 'maximumCountRequired',
            'minimum_count_required': 'minimumCountRequired',
            'prices': 'prices',
            'sort_order': 'sortOrder'
        }

        self._band_id = band_id
        self._maximum_count_required = maximum_count_required
        self._minimum_count_required = minimum_count_required
        self._prices = prices
        self._sort_order = sort_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The bookingPricingmatrix_200_response_allOf_data_inner_ageBandPrices_inner of this BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def band_id(self):
        """Gets the band_id of this BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner.

        **unique numeric identifier** for the age band - See: [Working with age bands](#section/Appendices/Working-with-age-bands) 

        :return: The band_id of this BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner.
        :rtype: int
        """
        return self._band_id

    @band_id.setter
    def band_id(self, band_id):
        """Sets the band_id of this BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner.

        **unique numeric identifier** for the age band - See: [Working with age bands](#section/Appendices/Working-with-age-bands) 

        :param band_id: The band_id of this BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner.
        :type band_id: int
        """

        self._band_id = band_id

    @property
    def maximum_count_required(self):
        """Gets the maximum_count_required of this BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner.

        **maximum number of travelers** that this pricing schedule can be applied to - use this field to specify the largest group size you are interested in making a booking for 

        :return: The maximum_count_required of this BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner.
        :rtype: int
        """
        return self._maximum_count_required

    @maximum_count_required.setter
    def maximum_count_required(self, maximum_count_required):
        """Sets the maximum_count_required of this BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner.

        **maximum number of travelers** that this pricing schedule can be applied to - use this field to specify the largest group size you are interested in making a booking for 

        :param maximum_count_required: The maximum_count_required of this BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner.
        :type maximum_count_required: int
        """

        self._maximum_count_required = maximum_count_required

    @property
    def minimum_count_required(self):
        """Gets the minimum_count_required of this BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner.

        **minimum number of travelers** that this pricing schedule can be applied to - use this field to specify the smallest group size you are interested in making a booking for 

        :return: The minimum_count_required of this BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner.
        :rtype: int
        """
        return self._minimum_count_required

    @minimum_count_required.setter
    def minimum_count_required(self, minimum_count_required):
        """Sets the minimum_count_required of this BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner.

        **minimum number of travelers** that this pricing schedule can be applied to - use this field to specify the smallest group size you are interested in making a booking for 

        :param minimum_count_required: The minimum_count_required of this BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner.
        :type minimum_count_required: int
        """

        self._minimum_count_required = minimum_count_required

    @property
    def prices(self):
        """Gets the prices of this BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner.

        **array** of prices available for *this* age band (based on the min and max count required)

        :return: The prices of this BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner.
        :rtype: List[BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInnerPricesInner]
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """Sets the prices of this BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner.

        **array** of prices available for *this* age band (based on the min and max count required)

        :param prices: The prices of this BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner.
        :type prices: List[BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInnerPricesInner]
        """

        self._prices = prices

    @property
    def sort_order(self):
        """Gets the sort_order of this BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner.

        **sort order** for *this* age band

        :return: The sort_order of this BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner.

        **sort order** for *this* age band

        :param sort_order: The sort_order of this BookingPricingmatrix200ResponseAllOfDataInnerAgeBandPricesInner.
        :type sort_order: int
        """

        self._sort_order = sort_order
