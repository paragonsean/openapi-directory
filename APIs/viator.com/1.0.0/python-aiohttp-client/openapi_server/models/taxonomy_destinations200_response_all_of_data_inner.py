# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destination_type import DestinationType
from openapi_server import util


class TaxonomyDestinations200ResponseAllOfDataInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_currency_code: str=None, destination_id: int=None, destination_name: str=None, destination_type: DestinationType=None, destination_url_name: str=None, iata_code: str=None, latitude: float=None, longitude: float=None, lookup_id: str=None, parent_id: int=None, selectable: bool=None, sort_order: int=None, time_zone: str=None):
        """TaxonomyDestinations200ResponseAllOfDataInner - a model defined in OpenAPI

        :param default_currency_code: The default_currency_code of this TaxonomyDestinations200ResponseAllOfDataInner.
        :param destination_id: The destination_id of this TaxonomyDestinations200ResponseAllOfDataInner.
        :param destination_name: The destination_name of this TaxonomyDestinations200ResponseAllOfDataInner.
        :param destination_type: The destination_type of this TaxonomyDestinations200ResponseAllOfDataInner.
        :param destination_url_name: The destination_url_name of this TaxonomyDestinations200ResponseAllOfDataInner.
        :param iata_code: The iata_code of this TaxonomyDestinations200ResponseAllOfDataInner.
        :param latitude: The latitude of this TaxonomyDestinations200ResponseAllOfDataInner.
        :param longitude: The longitude of this TaxonomyDestinations200ResponseAllOfDataInner.
        :param lookup_id: The lookup_id of this TaxonomyDestinations200ResponseAllOfDataInner.
        :param parent_id: The parent_id of this TaxonomyDestinations200ResponseAllOfDataInner.
        :param selectable: The selectable of this TaxonomyDestinations200ResponseAllOfDataInner.
        :param sort_order: The sort_order of this TaxonomyDestinations200ResponseAllOfDataInner.
        :param time_zone: The time_zone of this TaxonomyDestinations200ResponseAllOfDataInner.
        """
        self.openapi_types = {
            'default_currency_code': str,
            'destination_id': int,
            'destination_name': str,
            'destination_type': DestinationType,
            'destination_url_name': str,
            'iata_code': str,
            'latitude': float,
            'longitude': float,
            'lookup_id': str,
            'parent_id': int,
            'selectable': bool,
            'sort_order': int,
            'time_zone': str
        }

        self.attribute_map = {
            'default_currency_code': 'defaultCurrencyCode',
            'destination_id': 'destinationId',
            'destination_name': 'destinationName',
            'destination_type': 'destinationType',
            'destination_url_name': 'destinationUrlName',
            'iata_code': 'iataCode',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'lookup_id': 'lookupId',
            'parent_id': 'parentId',
            'selectable': 'selectable',
            'sort_order': 'sortOrder',
            'time_zone': 'timeZone'
        }

        self._default_currency_code = default_currency_code
        self._destination_id = destination_id
        self._destination_name = destination_name
        self._destination_type = destination_type
        self._destination_url_name = destination_url_name
        self._iata_code = iata_code
        self._latitude = latitude
        self._longitude = longitude
        self._lookup_id = lookup_id
        self._parent_id = parent_id
        self._selectable = selectable
        self._sort_order = sort_order
        self._time_zone = time_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxonomyDestinations200ResponseAllOfDataInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The taxonomyDestinations_200_response_allOf_data_inner of this TaxonomyDestinations200ResponseAllOfDataInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_currency_code(self):
        """Gets the default_currency_code of this TaxonomyDestinations200ResponseAllOfDataInner.

        **currency code** for the currency in which pricing is displayed

        :return: The default_currency_code of this TaxonomyDestinations200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._default_currency_code

    @default_currency_code.setter
    def default_currency_code(self, default_currency_code):
        """Sets the default_currency_code of this TaxonomyDestinations200ResponseAllOfDataInner.

        **currency code** for the currency in which pricing is displayed

        :param default_currency_code: The default_currency_code of this TaxonomyDestinations200ResponseAllOfDataInner.
        :type default_currency_code: str
        """

        self._default_currency_code = default_currency_code

    @property
    def destination_id(self):
        """Gets the destination_id of this TaxonomyDestinations200ResponseAllOfDataInner.

        **unique numeric identifier** of the destination - use this value as the `destId` input field for other Viator API services 

        :return: The destination_id of this TaxonomyDestinations200ResponseAllOfDataInner.
        :rtype: int
        """
        return self._destination_id

    @destination_id.setter
    def destination_id(self, destination_id):
        """Sets the destination_id of this TaxonomyDestinations200ResponseAllOfDataInner.

        **unique numeric identifier** of the destination - use this value as the `destId` input field for other Viator API services 

        :param destination_id: The destination_id of this TaxonomyDestinations200ResponseAllOfDataInner.
        :type destination_id: int
        """

        self._destination_id = destination_id

    @property
    def destination_name(self):
        """Gets the destination_name of this TaxonomyDestinations200ResponseAllOfDataInner.

        **natural-language name** of the destination

        :return: The destination_name of this TaxonomyDestinations200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._destination_name

    @destination_name.setter
    def destination_name(self, destination_name):
        """Sets the destination_name of this TaxonomyDestinations200ResponseAllOfDataInner.

        **natural-language name** of the destination

        :param destination_name: The destination_name of this TaxonomyDestinations200ResponseAllOfDataInner.
        :type destination_name: str
        """

        self._destination_name = destination_name

    @property
    def destination_type(self):
        """Gets the destination_type of this TaxonomyDestinations200ResponseAllOfDataInner.


        :return: The destination_type of this TaxonomyDestinations200ResponseAllOfDataInner.
        :rtype: DestinationType
        """
        return self._destination_type

    @destination_type.setter
    def destination_type(self, destination_type):
        """Sets the destination_type of this TaxonomyDestinations200ResponseAllOfDataInner.


        :param destination_type: The destination_type of this TaxonomyDestinations200ResponseAllOfDataInner.
        :type destination_type: DestinationType
        """

        self._destination_type = destination_type

    @property
    def destination_url_name(self):
        """Gets the destination_url_name of this TaxonomyDestinations200ResponseAllOfDataInner.

        ignore - (Viator only)

        :return: The destination_url_name of this TaxonomyDestinations200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._destination_url_name

    @destination_url_name.setter
    def destination_url_name(self, destination_url_name):
        """Sets the destination_url_name of this TaxonomyDestinations200ResponseAllOfDataInner.

        ignore - (Viator only)

        :param destination_url_name: The destination_url_name of this TaxonomyDestinations200ResponseAllOfDataInner.
        :type destination_url_name: str
        """

        self._destination_url_name = destination_url_name

    @property
    def iata_code(self):
        """Gets the iata_code of this TaxonomyDestinations200ResponseAllOfDataInner.

        **IATA airport code** for the destination - a three-letter code defined by the International Air Transport Association (IATA) used to identify many airports around the world - the IATA code is also known as an 'IATA location identifier', 'IATA station code' or simply a 'location identifier' - the IATA code is &lt;u&gt;not available&lt;/u&gt; for destinations with a destination type of `'COUNTRY'` or `'REGION'`, as there could be more than one airport within a destination 

        :return: The iata_code of this TaxonomyDestinations200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._iata_code

    @iata_code.setter
    def iata_code(self, iata_code):
        """Sets the iata_code of this TaxonomyDestinations200ResponseAllOfDataInner.

        **IATA airport code** for the destination - a three-letter code defined by the International Air Transport Association (IATA) used to identify many airports around the world - the IATA code is also known as an 'IATA location identifier', 'IATA station code' or simply a 'location identifier' - the IATA code is &lt;u&gt;not available&lt;/u&gt; for destinations with a destination type of `'COUNTRY'` or `'REGION'`, as there could be more than one airport within a destination 

        :param iata_code: The iata_code of this TaxonomyDestinations200ResponseAllOfDataInner.
        :type iata_code: str
        """

        self._iata_code = iata_code

    @property
    def latitude(self):
        """Gets the latitude of this TaxonomyDestinations200ResponseAllOfDataInner.

        **latitude component** of the destination's geolocation

        :return: The latitude of this TaxonomyDestinations200ResponseAllOfDataInner.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this TaxonomyDestinations200ResponseAllOfDataInner.

        **latitude component** of the destination's geolocation

        :param latitude: The latitude of this TaxonomyDestinations200ResponseAllOfDataInner.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this TaxonomyDestinations200ResponseAllOfDataInner.

        **longitude component** of the destination's geolocation

        :return: The longitude of this TaxonomyDestinations200ResponseAllOfDataInner.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this TaxonomyDestinations200ResponseAllOfDataInner.

        **longitude component** of the destination's geolocation

        :param longitude: The longitude of this TaxonomyDestinations200ResponseAllOfDataInner.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def lookup_id(self):
        """Gets the lookup_id of this TaxonomyDestinations200ResponseAllOfDataInner.

        **hierarchy location specifier** for the destination that is a concatenation of all `parentId` and `destinationId` codes - e.g. `'8.77.673'` for Chicago - format: [top level `parentId`].[any additional `parentId`].[`destinationId`] 

        :return: The lookup_id of this TaxonomyDestinations200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._lookup_id

    @lookup_id.setter
    def lookup_id(self, lookup_id):
        """Sets the lookup_id of this TaxonomyDestinations200ResponseAllOfDataInner.

        **hierarchy location specifier** for the destination that is a concatenation of all `parentId` and `destinationId` codes - e.g. `'8.77.673'` for Chicago - format: [top level `parentId`].[any additional `parentId`].[`destinationId`] 

        :param lookup_id: The lookup_id of this TaxonomyDestinations200ResponseAllOfDataInner.
        :type lookup_id: str
        """

        self._lookup_id = lookup_id

    @property
    def parent_id(self):
        """Gets the parent_id of this TaxonomyDestinations200ResponseAllOfDataInner.

        **unique numeric identifier** of the destination's parent destination

        :return: The parent_id of this TaxonomyDestinations200ResponseAllOfDataInner.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this TaxonomyDestinations200ResponseAllOfDataInner.

        **unique numeric identifier** of the destination's parent destination

        :param parent_id: The parent_id of this TaxonomyDestinations200ResponseAllOfDataInner.
        :type parent_id: int
        """

        self._parent_id = parent_id

    @property
    def selectable(self):
        """Gets the selectable of this TaxonomyDestinations200ResponseAllOfDataInner.

        ignore - (Viator only)

        :return: The selectable of this TaxonomyDestinations200ResponseAllOfDataInner.
        :rtype: bool
        """
        return self._selectable

    @selectable.setter
    def selectable(self, selectable):
        """Sets the selectable of this TaxonomyDestinations200ResponseAllOfDataInner.

        ignore - (Viator only)

        :param selectable: The selectable of this TaxonomyDestinations200ResponseAllOfDataInner.
        :type selectable: bool
        """

        self._selectable = selectable

    @property
    def sort_order(self):
        """Gets the sort_order of this TaxonomyDestinations200ResponseAllOfDataInner.

        **sort order** for this response

        :return: The sort_order of this TaxonomyDestinations200ResponseAllOfDataInner.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this TaxonomyDestinations200ResponseAllOfDataInner.

        **sort order** for this response

        :param sort_order: The sort_order of this TaxonomyDestinations200ResponseAllOfDataInner.
        :type sort_order: int
        """

        self._sort_order = sort_order

    @property
    def time_zone(self):
        """Gets the time_zone of this TaxonomyDestinations200ResponseAllOfDataInner.

        **time zone** of the destination

        :return: The time_zone of this TaxonomyDestinations200ResponseAllOfDataInner.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this TaxonomyDestinations200ResponseAllOfDataInner.

        **time zone** of the destination

        :param time_zone: The time_zone of this TaxonomyDestinations200ResponseAllOfDataInner.
        :type time_zone: str
        """

        self._time_zone = time_zone
