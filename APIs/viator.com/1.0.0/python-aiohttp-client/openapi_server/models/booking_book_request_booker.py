# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BookingBookRequestBooker(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cell_phone: str=None, cell_phone_country_code: str=None, email: str=None, firstname: str=None, home_phone: str=None, surname: str=None, title: str=None):
        """BookingBookRequestBooker - a model defined in OpenAPI

        :param cell_phone: The cell_phone of this BookingBookRequestBooker.
        :param cell_phone_country_code: The cell_phone_country_code of this BookingBookRequestBooker.
        :param email: The email of this BookingBookRequestBooker.
        :param firstname: The firstname of this BookingBookRequestBooker.
        :param home_phone: The home_phone of this BookingBookRequestBooker.
        :param surname: The surname of this BookingBookRequestBooker.
        :param title: The title of this BookingBookRequestBooker.
        """
        self.openapi_types = {
            'cell_phone': str,
            'cell_phone_country_code': str,
            'email': str,
            'firstname': str,
            'home_phone': str,
            'surname': str,
            'title': str
        }

        self.attribute_map = {
            'cell_phone': 'cellPhone',
            'cell_phone_country_code': 'cellPhoneCountryCode',
            'email': 'email',
            'firstname': 'firstname',
            'home_phone': 'homePhone',
            'surname': 'surname',
            'title': 'title'
        }

        self._cell_phone = cell_phone
        self._cell_phone_country_code = cell_phone_country_code
        self._email = email
        self._firstname = firstname
        self._home_phone = home_phone
        self._surname = surname
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookingBookRequestBooker':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The bookingBook_request_booker of this BookingBookRequestBooker.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cell_phone(self):
        """Gets the cell_phone of this BookingBookRequestBooker.

        **telephone number** of the lead traveler  **Note**:    * Must be included to enable CLC communications   * See [Supplier communications](#section/Merchant-APIs/Supplier-communications) for more information 

        :return: The cell_phone of this BookingBookRequestBooker.
        :rtype: str
        """
        return self._cell_phone

    @cell_phone.setter
    def cell_phone(self, cell_phone):
        """Sets the cell_phone of this BookingBookRequestBooker.

        **telephone number** of the lead traveler  **Note**:    * Must be included to enable CLC communications   * See [Supplier communications](#section/Merchant-APIs/Supplier-communications) for more information 

        :param cell_phone: The cell_phone of this BookingBookRequestBooker.
        :type cell_phone: str
        """

        self._cell_phone = cell_phone

    @property
    def cell_phone_country_code(self):
        """Gets the cell_phone_country_code of this BookingBookRequestBooker.

        **country code** for the telephone number of the lead traveler  **Note**:     * Must be included to enable CLC communications.    * See [Supplier communications](#section/Merchant-APIs/Supplier-communications) for more information 

        :return: The cell_phone_country_code of this BookingBookRequestBooker.
        :rtype: str
        """
        return self._cell_phone_country_code

    @cell_phone_country_code.setter
    def cell_phone_country_code(self, cell_phone_country_code):
        """Sets the cell_phone_country_code of this BookingBookRequestBooker.

        **country code** for the telephone number of the lead traveler  **Note**:     * Must be included to enable CLC communications.    * See [Supplier communications](#section/Merchant-APIs/Supplier-communications) for more information 

        :param cell_phone_country_code: The cell_phone_country_code of this BookingBookRequestBooker.
        :type cell_phone_country_code: str
        """

        self._cell_phone_country_code = cell_phone_country_code

    @property
    def email(self):
        """Gets the email of this BookingBookRequestBooker.

        **email address** of the primary contact

        :return: The email of this BookingBookRequestBooker.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this BookingBookRequestBooker.

        **email address** of the primary contact

        :param email: The email of this BookingBookRequestBooker.
        :type email: str
        """

        self._email = email

    @property
    def firstname(self):
        """Gets the firstname of this BookingBookRequestBooker.

        **first name** of the primary contact 

        :return: The firstname of this BookingBookRequestBooker.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this BookingBookRequestBooker.

        **first name** of the primary contact 

        :param firstname: The firstname of this BookingBookRequestBooker.
        :type firstname: str
        """
        if firstname is None:
            raise ValueError("Invalid value for `firstname`, must not be `None`")

        self._firstname = firstname

    @property
    def home_phone(self):
        """Gets the home_phone of this BookingBookRequestBooker.

        **phone number** (home) of the primary contact

        :return: The home_phone of this BookingBookRequestBooker.
        :rtype: str
        """
        return self._home_phone

    @home_phone.setter
    def home_phone(self, home_phone):
        """Sets the home_phone of this BookingBookRequestBooker.

        **phone number** (home) of the primary contact

        :param home_phone: The home_phone of this BookingBookRequestBooker.
        :type home_phone: str
        """

        self._home_phone = home_phone

    @property
    def surname(self):
        """Gets the surname of this BookingBookRequestBooker.

        **surname** of the primary contact

        :return: The surname of this BookingBookRequestBooker.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this BookingBookRequestBooker.

        **surname** of the primary contact

        :param surname: The surname of this BookingBookRequestBooker.
        :type surname: str
        """
        if surname is None:
            raise ValueError("Invalid value for `surname`, must not be `None`")

        self._surname = surname

    @property
    def title(self):
        """Gets the title of this BookingBookRequestBooker.

        **title** of the primary contact

        :return: The title of this BookingBookRequestBooker.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this BookingBookRequestBooker.

        **title** of the primary contact

        :param title: The title of this BookingBookRequestBooker.
        :type title: str
        """

        self._title = title
