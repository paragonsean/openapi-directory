# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.booking_availability_tourgrades_request_age_bands_inner import BookingAvailabilityTourgradesRequestAgeBandsInner
from openapi_server import util


class BookingAvailabilityTourgradesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, age_bands: List[BookingAvailabilityTourgradesRequestAgeBandsInner]=None, booking_date: str=None, currency_code: str=None, product_code: str=None):
        """BookingAvailabilityTourgradesRequest - a model defined in OpenAPI

        :param age_bands: The age_bands of this BookingAvailabilityTourgradesRequest.
        :param booking_date: The booking_date of this BookingAvailabilityTourgradesRequest.
        :param currency_code: The currency_code of this BookingAvailabilityTourgradesRequest.
        :param product_code: The product_code of this BookingAvailabilityTourgradesRequest.
        """
        self.openapi_types = {
            'age_bands': List[BookingAvailabilityTourgradesRequestAgeBandsInner],
            'booking_date': str,
            'currency_code': str,
            'product_code': str
        }

        self.attribute_map = {
            'age_bands': 'ageBands',
            'booking_date': 'bookingDate',
            'currency_code': 'currencyCode',
            'product_code': 'productCode'
        }

        self._age_bands = age_bands
        self._booking_date = booking_date
        self._currency_code = currency_code
        self._product_code = product_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookingAvailabilityTourgradesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The bookingAvailabilityTourgrades_request of this BookingAvailabilityTourgradesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def age_bands(self):
        """Gets the age_bands of this BookingAvailabilityTourgradesRequest.

        **array** of ageBand objects

        :return: The age_bands of this BookingAvailabilityTourgradesRequest.
        :rtype: List[BookingAvailabilityTourgradesRequestAgeBandsInner]
        """
        return self._age_bands

    @age_bands.setter
    def age_bands(self, age_bands):
        """Sets the age_bands of this BookingAvailabilityTourgradesRequest.

        **array** of ageBand objects

        :param age_bands: The age_bands of this BookingAvailabilityTourgradesRequest.
        :type age_bands: List[BookingAvailabilityTourgradesRequestAgeBandsInner]
        """

        self._age_bands = age_bands

    @property
    def booking_date(self):
        """Gets the booking_date of this BookingAvailabilityTourgradesRequest.

        **date** to enquire about available tour grades for *this* product (must be in the future)

        :return: The booking_date of this BookingAvailabilityTourgradesRequest.
        :rtype: str
        """
        return self._booking_date

    @booking_date.setter
    def booking_date(self, booking_date):
        """Sets the booking_date of this BookingAvailabilityTourgradesRequest.

        **date** to enquire about available tour grades for *this* product (must be in the future)

        :param booking_date: The booking_date of this BookingAvailabilityTourgradesRequest.
        :type booking_date: str
        """

        self._booking_date = booking_date

    @property
    def currency_code(self):
        """Gets the currency_code of this BookingAvailabilityTourgradesRequest.

        **currency code** for the currency in which to display pricing information

        :return: The currency_code of this BookingAvailabilityTourgradesRequest.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this BookingAvailabilityTourgradesRequest.

        **currency code** for the currency in which to display pricing information

        :param currency_code: The currency_code of this BookingAvailabilityTourgradesRequest.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def product_code(self):
        """Gets the product_code of this BookingAvailabilityTourgradesRequest.


        :return: The product_code of this BookingAvailabilityTourgradesRequest.
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this BookingAvailabilityTourgradesRequest.


        :param product_code: The product_code of this BookingAvailabilityTourgradesRequest.
        :type product_code: str
        """

        self._product_code = product_code
