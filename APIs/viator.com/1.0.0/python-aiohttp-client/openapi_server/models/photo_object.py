# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PhotoObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caption: str=None, editors_pick: bool=None, owner_avatar_url: str=None, owner_country: str=None, owner_id: int=None, owner_name: str=None, photo_hi_res_url: str=None, photo_id: int=None, photo_medium_res_url: str=None, photo_url: str=None, product_code: str=None, product_title: str=None, product_url_name: str=None, sort_order: int=None, ssl_supported: bool=None, thumbnail_url: str=None, time_uploaded: str=None, title: str=None):
        """PhotoObject - a model defined in OpenAPI

        :param caption: The caption of this PhotoObject.
        :param editors_pick: The editors_pick of this PhotoObject.
        :param owner_avatar_url: The owner_avatar_url of this PhotoObject.
        :param owner_country: The owner_country of this PhotoObject.
        :param owner_id: The owner_id of this PhotoObject.
        :param owner_name: The owner_name of this PhotoObject.
        :param photo_hi_res_url: The photo_hi_res_url of this PhotoObject.
        :param photo_id: The photo_id of this PhotoObject.
        :param photo_medium_res_url: The photo_medium_res_url of this PhotoObject.
        :param photo_url: The photo_url of this PhotoObject.
        :param product_code: The product_code of this PhotoObject.
        :param product_title: The product_title of this PhotoObject.
        :param product_url_name: The product_url_name of this PhotoObject.
        :param sort_order: The sort_order of this PhotoObject.
        :param ssl_supported: The ssl_supported of this PhotoObject.
        :param thumbnail_url: The thumbnail_url of this PhotoObject.
        :param time_uploaded: The time_uploaded of this PhotoObject.
        :param title: The title of this PhotoObject.
        """
        self.openapi_types = {
            'caption': str,
            'editors_pick': bool,
            'owner_avatar_url': str,
            'owner_country': str,
            'owner_id': int,
            'owner_name': str,
            'photo_hi_res_url': str,
            'photo_id': int,
            'photo_medium_res_url': str,
            'photo_url': str,
            'product_code': str,
            'product_title': str,
            'product_url_name': str,
            'sort_order': int,
            'ssl_supported': bool,
            'thumbnail_url': str,
            'time_uploaded': str,
            'title': str
        }

        self.attribute_map = {
            'caption': 'caption',
            'editors_pick': 'editorsPick',
            'owner_avatar_url': 'ownerAvatarURL',
            'owner_country': 'ownerCountry',
            'owner_id': 'ownerId',
            'owner_name': 'ownerName',
            'photo_hi_res_url': 'photoHiResURL',
            'photo_id': 'photoId',
            'photo_medium_res_url': 'photoMediumResURL',
            'photo_url': 'photoURL',
            'product_code': 'productCode',
            'product_title': 'productTitle',
            'product_url_name': 'productUrlName',
            'sort_order': 'sortOrder',
            'ssl_supported': 'sslSupported',
            'thumbnail_url': 'thumbnailURL',
            'time_uploaded': 'timeUploaded',
            'title': 'title'
        }

        self._caption = caption
        self._editors_pick = editors_pick
        self._owner_avatar_url = owner_avatar_url
        self._owner_country = owner_country
        self._owner_id = owner_id
        self._owner_name = owner_name
        self._photo_hi_res_url = photo_hi_res_url
        self._photo_id = photo_id
        self._photo_medium_res_url = photo_medium_res_url
        self._photo_url = photo_url
        self._product_code = product_code
        self._product_title = product_title
        self._product_url_name = product_url_name
        self._sort_order = sort_order
        self._ssl_supported = ssl_supported
        self._thumbnail_url = thumbnail_url
        self._time_uploaded = time_uploaded
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PhotoObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The photoObject of this PhotoObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caption(self):
        """Gets the caption of this PhotoObject.

        **HTML-formatted caption** for *this* photograph - may contain basic HTML mark-up - e.g., br, li, b, u, p, i, ul and ol 

        :return: The caption of this PhotoObject.
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this PhotoObject.

        **HTML-formatted caption** for *this* photograph - may contain basic HTML mark-up - e.g., br, li, b, u, p, i, ul and ol 

        :param caption: The caption of this PhotoObject.
        :type caption: str
        """

        self._caption = caption

    @property
    def editors_pick(self):
        """Gets the editors_pick of this PhotoObject.

        **indicator**: `true` if *this* photograph has been tagged as an *editor's pick*; i.e., can be given preference for display

        :return: The editors_pick of this PhotoObject.
        :rtype: bool
        """
        return self._editors_pick

    @editors_pick.setter
    def editors_pick(self, editors_pick):
        """Sets the editors_pick of this PhotoObject.

        **indicator**: `true` if *this* photograph has been tagged as an *editor's pick*; i.e., can be given preference for display

        :param editors_pick: The editors_pick of this PhotoObject.
        :type editors_pick: bool
        """

        self._editors_pick = editors_pick

    @property
    def owner_avatar_url(self):
        """Gets the owner_avatar_url of this PhotoObject.

        **URL** for the avatar image of the user that submitted *this* photograph

        :return: The owner_avatar_url of this PhotoObject.
        :rtype: str
        """
        return self._owner_avatar_url

    @owner_avatar_url.setter
    def owner_avatar_url(self, owner_avatar_url):
        """Sets the owner_avatar_url of this PhotoObject.

        **URL** for the avatar image of the user that submitted *this* photograph

        :param owner_avatar_url: The owner_avatar_url of this PhotoObject.
        :type owner_avatar_url: str
        """

        self._owner_avatar_url = owner_avatar_url

    @property
    def owner_country(self):
        """Gets the owner_country of this PhotoObject.

        **country** in which the owner of *this* photograph is located

        :return: The owner_country of this PhotoObject.
        :rtype: str
        """
        return self._owner_country

    @owner_country.setter
    def owner_country(self, owner_country):
        """Sets the owner_country of this PhotoObject.

        **country** in which the owner of *this* photograph is located

        :param owner_country: The owner_country of this PhotoObject.
        :type owner_country: str
        """

        self._owner_country = owner_country

    @property
    def owner_id(self):
        """Gets the owner_id of this PhotoObject.

        **unique numeric identifier** of the user that owns the photograph

        :return: The owner_id of this PhotoObject.
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this PhotoObject.

        **unique numeric identifier** of the user that owns the photograph

        :param owner_id: The owner_id of this PhotoObject.
        :type owner_id: int
        """

        self._owner_id = owner_id

    @property
    def owner_name(self):
        """Gets the owner_name of this PhotoObject.

        **handle** of the user that submitted *this* photograph; e.g., 'Husker1k'

        :return: The owner_name of this PhotoObject.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this PhotoObject.

        **handle** of the user that submitted *this* photograph; e.g., 'Husker1k'

        :param owner_name: The owner_name of this PhotoObject.
        :type owner_name: str
        """

        self._owner_name = owner_name

    @property
    def photo_hi_res_url(self):
        """Gets the photo_hi_res_url of this PhotoObject.

        **URL** of the high-resolution version of *this* photograph

        :return: The photo_hi_res_url of this PhotoObject.
        :rtype: str
        """
        return self._photo_hi_res_url

    @photo_hi_res_url.setter
    def photo_hi_res_url(self, photo_hi_res_url):
        """Sets the photo_hi_res_url of this PhotoObject.

        **URL** of the high-resolution version of *this* photograph

        :param photo_hi_res_url: The photo_hi_res_url of this PhotoObject.
        :type photo_hi_res_url: str
        """

        self._photo_hi_res_url = photo_hi_res_url

    @property
    def photo_id(self):
        """Gets the photo_id of this PhotoObject.

        **unique numeric identifier** of *this* photograph

        :return: The photo_id of this PhotoObject.
        :rtype: int
        """
        return self._photo_id

    @photo_id.setter
    def photo_id(self, photo_id):
        """Sets the photo_id of this PhotoObject.

        **unique numeric identifier** of *this* photograph

        :param photo_id: The photo_id of this PhotoObject.
        :type photo_id: int
        """

        self._photo_id = photo_id

    @property
    def photo_medium_res_url(self):
        """Gets the photo_medium_res_url of this PhotoObject.

        **URL** of the medium-resolution version of *this* photograph

        :return: The photo_medium_res_url of this PhotoObject.
        :rtype: str
        """
        return self._photo_medium_res_url

    @photo_medium_res_url.setter
    def photo_medium_res_url(self, photo_medium_res_url):
        """Sets the photo_medium_res_url of this PhotoObject.

        **URL** of the medium-resolution version of *this* photograph

        :param photo_medium_res_url: The photo_medium_res_url of this PhotoObject.
        :type photo_medium_res_url: str
        """

        self._photo_medium_res_url = photo_medium_res_url

    @property
    def photo_url(self):
        """Gets the photo_url of this PhotoObject.

        **URL** for the standard-resolution version of *this* photograph

        :return: The photo_url of this PhotoObject.
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this PhotoObject.

        **URL** for the standard-resolution version of *this* photograph

        :param photo_url: The photo_url of this PhotoObject.
        :type photo_url: str
        """

        self._photo_url = photo_url

    @property
    def product_code(self):
        """Gets the product_code of this PhotoObject.

        **product code** for the product that *this* photograph is of

        :return: The product_code of this PhotoObject.
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this PhotoObject.

        **product code** for the product that *this* photograph is of

        :param product_code: The product_code of this PhotoObject.
        :type product_code: str
        """

        self._product_code = product_code

    @property
    def product_title(self):
        """Gets the product_title of this PhotoObject.

        **natural-language title** of the product associated with *this* photograph; e.g., 'Sydney and Bondi Hop-on Hop-off Tour'

        :return: The product_title of this PhotoObject.
        :rtype: str
        """
        return self._product_title

    @product_title.setter
    def product_title(self, product_title):
        """Sets the product_title of this PhotoObject.

        **natural-language title** of the product associated with *this* photograph; e.g., 'Sydney and Bondi Hop-on Hop-off Tour'

        :param product_title: The product_title of this PhotoObject.
        :type product_title: str
        """

        self._product_title = product_title

    @property
    def product_url_name(self):
        """Gets the product_url_name of this PhotoObject.

        **URL-formatted title** of the product associated with *this* photograph; e.g., `Sydney-and-Bondi-Hop-on-Hop-off-Tour`

        :return: The product_url_name of this PhotoObject.
        :rtype: str
        """
        return self._product_url_name

    @product_url_name.setter
    def product_url_name(self, product_url_name):
        """Sets the product_url_name of this PhotoObject.

        **URL-formatted title** of the product associated with *this* photograph; e.g., `Sydney-and-Bondi-Hop-on-Hop-off-Tour`

        :param product_url_name: The product_url_name of this PhotoObject.
        :type product_url_name: str
        """

        self._product_url_name = product_url_name

    @property
    def sort_order(self):
        """Gets the sort_order of this PhotoObject.

        **sort order** for *this* photograph; e.g., `3`

        :return: The sort_order of this PhotoObject.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this PhotoObject.

        **sort order** for *this* photograph; e.g., `3`

        :param sort_order: The sort_order of this PhotoObject.
        :type sort_order: int
        """

        self._sort_order = sort_order

    @property
    def ssl_supported(self):
        """Gets the ssl_supported of this PhotoObject.

        ignore (Viator only)

        :return: The ssl_supported of this PhotoObject.
        :rtype: bool
        """
        return self._ssl_supported

    @ssl_supported.setter
    def ssl_supported(self, ssl_supported):
        """Sets the ssl_supported of this PhotoObject.

        ignore (Viator only)

        :param ssl_supported: The ssl_supported of this PhotoObject.
        :type ssl_supported: bool
        """

        self._ssl_supported = ssl_supported

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this PhotoObject.

        **URL** of *this* product's thumbnail image

        :return: The thumbnail_url of this PhotoObject.
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this PhotoObject.

        **URL** of *this* product's thumbnail image

        :param thumbnail_url: The thumbnail_url of this PhotoObject.
        :type thumbnail_url: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def time_uploaded(self):
        """Gets the time_uploaded of this PhotoObject.

        **date** on which *this* photograph was submitted

        :return: The time_uploaded of this PhotoObject.
        :rtype: str
        """
        return self._time_uploaded

    @time_uploaded.setter
    def time_uploaded(self, time_uploaded):
        """Sets the time_uploaded of this PhotoObject.

        **date** on which *this* photograph was submitted

        :param time_uploaded: The time_uploaded of this PhotoObject.
        :type time_uploaded: str
        """

        self._time_uploaded = time_uploaded

    @property
    def title(self):
        """Gets the title of this PhotoObject.

        **title** of *this* photograph

        :return: The title of this PhotoObject.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PhotoObject.

        **title** of *this* photograph

        :param title: The title of this PhotoObject.
        :type title: str
        """

        self._title = title
