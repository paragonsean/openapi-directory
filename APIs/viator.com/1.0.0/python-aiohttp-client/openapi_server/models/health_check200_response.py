# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HealthCheck200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_good: bool=None, capi_ok: bool=None, db_ok: bool=None, memcached_ok: bool=None, message: str=None):
        """HealthCheck200Response - a model defined in OpenAPI

        :param all_good: The all_good of this HealthCheck200Response.
        :param capi_ok: The capi_ok of this HealthCheck200Response.
        :param db_ok: The db_ok of this HealthCheck200Response.
        :param memcached_ok: The memcached_ok of this HealthCheck200Response.
        :param message: The message of this HealthCheck200Response.
        """
        self.openapi_types = {
            'all_good': bool,
            'capi_ok': bool,
            'db_ok': bool,
            'memcached_ok': bool,
            'message': str
        }

        self.attribute_map = {
            'all_good': 'allGood',
            'capi_ok': 'capiOk',
            'db_ok': 'dbOk',
            'memcached_ok': 'memcachedOk',
            'message': 'message'
        }

        self._all_good = all_good
        self._capi_ok = capi_ok
        self._db_ok = db_ok
        self._memcached_ok = memcached_ok
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HealthCheck200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The healthCheck_200_response of this HealthCheck200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_good(self):
        """Gets the all_good of this HealthCheck200Response.

        **indicator**: `true` signifies health

        :return: The all_good of this HealthCheck200Response.
        :rtype: bool
        """
        return self._all_good

    @all_good.setter
    def all_good(self, all_good):
        """Sets the all_good of this HealthCheck200Response.

        **indicator**: `true` signifies health

        :param all_good: The all_good of this HealthCheck200Response.
        :type all_good: bool
        """

        self._all_good = all_good

    @property
    def capi_ok(self):
        """Gets the capi_ok of this HealthCheck200Response.

        **indicator**: `true` signifies health

        :return: The capi_ok of this HealthCheck200Response.
        :rtype: bool
        """
        return self._capi_ok

    @capi_ok.setter
    def capi_ok(self, capi_ok):
        """Sets the capi_ok of this HealthCheck200Response.

        **indicator**: `true` signifies health

        :param capi_ok: The capi_ok of this HealthCheck200Response.
        :type capi_ok: bool
        """

        self._capi_ok = capi_ok

    @property
    def db_ok(self):
        """Gets the db_ok of this HealthCheck200Response.

        **indicator**: `true` signifies health

        :return: The db_ok of this HealthCheck200Response.
        :rtype: bool
        """
        return self._db_ok

    @db_ok.setter
    def db_ok(self, db_ok):
        """Sets the db_ok of this HealthCheck200Response.

        **indicator**: `true` signifies health

        :param db_ok: The db_ok of this HealthCheck200Response.
        :type db_ok: bool
        """

        self._db_ok = db_ok

    @property
    def memcached_ok(self):
        """Gets the memcached_ok of this HealthCheck200Response.

        **indicator**: `true` signifies health

        :return: The memcached_ok of this HealthCheck200Response.
        :rtype: bool
        """
        return self._memcached_ok

    @memcached_ok.setter
    def memcached_ok(self, memcached_ok):
        """Sets the memcached_ok of this HealthCheck200Response.

        **indicator**: `true` signifies health

        :param memcached_ok: The memcached_ok of this HealthCheck200Response.
        :type memcached_ok: bool
        """

        self._memcached_ok = memcached_ok

    @property
    def message(self):
        """Gets the message of this HealthCheck200Response.

        **natural-language description** of any issues regarding the health of the API

        :return: The message of this HealthCheck200Response.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this HealthCheck200Response.

        **natural-language description** of any issues regarding the health of the API

        :param message: The message of this HealthCheck200Response.
        :type message: str
        """

        self._message = message
