/**
 * Events
 * API for accessing CRM object events.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExternalUnifiedEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExternalUnifiedEvent::OAIExternalUnifiedEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExternalUnifiedEvent::OAIExternalUnifiedEvent() {
    this->initializeModel();
}

OAIExternalUnifiedEvent::~OAIExternalUnifiedEvent() {}

void OAIExternalUnifiedEvent::initializeModel() {

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;

    m_occurred_at_isSet = false;
    m_occurred_at_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAIExternalUnifiedEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExternalUnifiedEvent::fromJsonObject(QJsonObject json) {

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("objectType")]);
    m_object_type_isSet = !json[QString("objectType")].isNull() && m_object_type_isValid;

    m_occurred_at_isValid = ::OpenAPI::fromJsonValue(m_occurred_at, json[QString("occurredAt")]);
    m_occurred_at_isSet = !json[QString("occurredAt")].isNull() && m_occurred_at_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAIExternalUnifiedEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExternalUnifiedEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("objectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    if (m_occurred_at_isSet) {
        obj.insert(QString("occurredAt"), ::OpenAPI::toJsonValue(m_occurred_at));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

QString OAIExternalUnifiedEvent::getEventType() const {
    return m_event_type;
}
void OAIExternalUnifiedEvent::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIExternalUnifiedEvent::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIExternalUnifiedEvent::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAIExternalUnifiedEvent::getId() const {
    return m_id;
}
void OAIExternalUnifiedEvent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIExternalUnifiedEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIExternalUnifiedEvent::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIExternalUnifiedEvent::getObjectId() const {
    return m_object_id;
}
void OAIExternalUnifiedEvent::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIExternalUnifiedEvent::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIExternalUnifiedEvent::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QString OAIExternalUnifiedEvent::getObjectType() const {
    return m_object_type;
}
void OAIExternalUnifiedEvent::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIExternalUnifiedEvent::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIExternalUnifiedEvent::is_object_type_Valid() const{
    return m_object_type_isValid;
}

QDateTime OAIExternalUnifiedEvent::getOccurredAt() const {
    return m_occurred_at;
}
void OAIExternalUnifiedEvent::setOccurredAt(const QDateTime &occurred_at) {
    m_occurred_at = occurred_at;
    m_occurred_at_isSet = true;
}

bool OAIExternalUnifiedEvent::is_occurred_at_Set() const{
    return m_occurred_at_isSet;
}

bool OAIExternalUnifiedEvent::is_occurred_at_Valid() const{
    return m_occurred_at_isValid;
}

QMap<QString, QString> OAIExternalUnifiedEvent::getProperties() const {
    return m_properties;
}
void OAIExternalUnifiedEvent::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIExternalUnifiedEvent::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIExternalUnifiedEvent::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAIExternalUnifiedEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occurred_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExternalUnifiedEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_type_isValid && m_id_isValid && m_object_id_isValid && m_object_type_isValid && m_occurred_at_isValid && true;
}

} // namespace OpenAPI
