# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExternalUnifiedEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_type: str=None, id: str=None, object_id: str=None, object_type: str=None, occurred_at: datetime=None, properties: Dict[str, str]=None):
        """ExternalUnifiedEvent - a model defined in OpenAPI

        :param event_type: The event_type of this ExternalUnifiedEvent.
        :param id: The id of this ExternalUnifiedEvent.
        :param object_id: The object_id of this ExternalUnifiedEvent.
        :param object_type: The object_type of this ExternalUnifiedEvent.
        :param occurred_at: The occurred_at of this ExternalUnifiedEvent.
        :param properties: The properties of this ExternalUnifiedEvent.
        """
        self.openapi_types = {
            'event_type': str,
            'id': str,
            'object_id': str,
            'object_type': str,
            'occurred_at': datetime,
            'properties': Dict[str, str]
        }

        self.attribute_map = {
            'event_type': 'eventType',
            'id': 'id',
            'object_id': 'objectId',
            'object_type': 'objectType',
            'occurred_at': 'occurredAt',
            'properties': 'properties'
        }

        self._event_type = event_type
        self._id = id
        self._object_id = object_id
        self._object_type = object_type
        self._occurred_at = occurred_at
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExternalUnifiedEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExternalUnifiedEvent of this ExternalUnifiedEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_type(self):
        """Gets the event_type of this ExternalUnifiedEvent.

        The format of the `eventType` string is `ae{appId}_{eventTypeLabel}`, `pe{portalId}_{eventTypeLabel}`, or just `e_{eventTypeLabel}` for HubSpot events.

        :return: The event_type of this ExternalUnifiedEvent.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this ExternalUnifiedEvent.

        The format of the `eventType` string is `ae{appId}_{eventTypeLabel}`, `pe{portalId}_{eventTypeLabel}`, or just `e_{eventTypeLabel}` for HubSpot events.

        :param event_type: The event_type of this ExternalUnifiedEvent.
        :type event_type: str
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")

        self._event_type = event_type

    @property
    def id(self):
        """Gets the id of this ExternalUnifiedEvent.

        A unique identifier for the event.

        :return: The id of this ExternalUnifiedEvent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExternalUnifiedEvent.

        A unique identifier for the event.

        :param id: The id of this ExternalUnifiedEvent.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def object_id(self):
        """Gets the object_id of this ExternalUnifiedEvent.

        The objectId of the object which did the event.

        :return: The object_id of this ExternalUnifiedEvent.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this ExternalUnifiedEvent.

        The objectId of the object which did the event.

        :param object_id: The object_id of this ExternalUnifiedEvent.
        :type object_id: str
        """
        if object_id is None:
            raise ValueError("Invalid value for `object_id`, must not be `None`")

        self._object_id = object_id

    @property
    def object_type(self):
        """Gets the object_type of this ExternalUnifiedEvent.

        The objectType for the object which did the event.

        :return: The object_type of this ExternalUnifiedEvent.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this ExternalUnifiedEvent.

        The objectType for the object which did the event.

        :param object_type: The object_type of this ExternalUnifiedEvent.
        :type object_type: str
        """
        if object_type is None:
            raise ValueError("Invalid value for `object_type`, must not be `None`")

        self._object_type = object_type

    @property
    def occurred_at(self):
        """Gets the occurred_at of this ExternalUnifiedEvent.

        An ISO 8601 timestamp when the event occurred.

        :return: The occurred_at of this ExternalUnifiedEvent.
        :rtype: datetime
        """
        return self._occurred_at

    @occurred_at.setter
    def occurred_at(self, occurred_at):
        """Sets the occurred_at of this ExternalUnifiedEvent.

        An ISO 8601 timestamp when the event occurred.

        :param occurred_at: The occurred_at of this ExternalUnifiedEvent.
        :type occurred_at: datetime
        """
        if occurred_at is None:
            raise ValueError("Invalid value for `occurred_at`, must not be `None`")

        self._occurred_at = occurred_at

    @property
    def properties(self):
        """Gets the properties of this ExternalUnifiedEvent.


        :return: The properties of this ExternalUnifiedEvent.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ExternalUnifiedEvent.


        :param properties: The properties of this ExternalUnifiedEvent.
        :type properties: Dict[str, str]
        """

        self._properties = properties
