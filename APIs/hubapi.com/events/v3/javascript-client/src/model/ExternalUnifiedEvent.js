/**
 * Events
 * API for accessing CRM object events.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExternalUnifiedEvent model module.
 * @module model/ExternalUnifiedEvent
 * @version v3
 */
class ExternalUnifiedEvent {
    /**
     * Constructs a new <code>ExternalUnifiedEvent</code>.
     * Used to represent any event. With this format, the &#x60;objectType&#x60; and &#x60;eventType&#x60; values are stringified CRM types. Example object: &lt;br/&gt; &#x60;&#x60;&#x60;  {       \&quot;objectType\&quot;: \&quot;CONTACT\&quot;,       \&quot;objectId\&quot;: 208451632,       \&quot;eventType\&quot;: \&quot;e_visited_page\&quot;,       \&quot;occurredAt\&quot;: 1567377501421,       \&quot;id\&quot;: \&quot;leviathan-be3335d3-46f1-3985-988e-ff38e6e7b9d8\&quot;,       \&quot;properties\&quot;: {           \&quot;hs_url\&quot;: \&quot;https://some-website.com/\&quot;,           \&quot;hs_title\&quot;: \&quot;Home\&quot;,           \&quot;hs_referrer\&quot;: \&quot;https://some-other-website.com/blog/why-we-love-big-data-and-you-should-too\&quot;,           \&quot;hs_userAgent\&quot;: \&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.80 Safari/537.36\&quot;,           \&quot;hs_city\&quot;: \&quot;lund\&quot;,           \&quot;hs_region\&quot;: \&quot;m\&quot;,           \&quot;hs_country\&quot;: \&quot;se\&quot;,           \&quot;hs_session_id\&quot; : \&quot;leviathan-be3335d3-46f1-3985-988e-ff38e6e7b9d8\&quot;,           \&quot;hs_session_source\&quot; : \&quot;DIRECT\&quot;       }   }       &#x60;&#x60;&#x60;
     * @alias module:model/ExternalUnifiedEvent
     * @param eventType {String} The format of the `eventType` string is `ae{appId}_{eventTypeLabel}`, `pe{portalId}_{eventTypeLabel}`, or just `e_{eventTypeLabel}` for HubSpot events.
     * @param id {String} A unique identifier for the event.
     * @param objectId {String} The objectId of the object which did the event.
     * @param objectType {String} The objectType for the object which did the event.
     * @param occurredAt {Date} An ISO 8601 timestamp when the event occurred.
     */
    constructor(eventType, id, objectId, objectType, occurredAt) { 
        
        ExternalUnifiedEvent.initialize(this, eventType, id, objectId, objectType, occurredAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eventType, id, objectId, objectType, occurredAt) { 
        obj['eventType'] = eventType;
        obj['id'] = id;
        obj['objectId'] = objectId;
        obj['objectType'] = objectType;
        obj['occurredAt'] = occurredAt;
    }

    /**
     * Constructs a <code>ExternalUnifiedEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExternalUnifiedEvent} obj Optional instance to populate.
     * @return {module:model/ExternalUnifiedEvent} The populated <code>ExternalUnifiedEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExternalUnifiedEvent();

            if (data.hasOwnProperty('eventType')) {
                obj['eventType'] = ApiClient.convertToType(data['eventType'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('objectId')) {
                obj['objectId'] = ApiClient.convertToType(data['objectId'], 'String');
            }
            if (data.hasOwnProperty('objectType')) {
                obj['objectType'] = ApiClient.convertToType(data['objectType'], 'String');
            }
            if (data.hasOwnProperty('occurredAt')) {
                obj['occurredAt'] = ApiClient.convertToType(data['occurredAt'], 'Date');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExternalUnifiedEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExternalUnifiedEvent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ExternalUnifiedEvent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['eventType'] && !(typeof data['eventType'] === 'string' || data['eventType'] instanceof String)) {
            throw new Error("Expected the field `eventType` to be a primitive type in the JSON string but got " + data['eventType']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['objectId'] && !(typeof data['objectId'] === 'string' || data['objectId'] instanceof String)) {
            throw new Error("Expected the field `objectId` to be a primitive type in the JSON string but got " + data['objectId']);
        }
        // ensure the json data is a string
        if (data['objectType'] && !(typeof data['objectType'] === 'string' || data['objectType'] instanceof String)) {
            throw new Error("Expected the field `objectType` to be a primitive type in the JSON string but got " + data['objectType']);
        }

        return true;
    }


}

ExternalUnifiedEvent.RequiredProperties = ["eventType", "id", "objectId", "objectType", "occurredAt"];

/**
 * The format of the `eventType` string is `ae{appId}_{eventTypeLabel}`, `pe{portalId}_{eventTypeLabel}`, or just `e_{eventTypeLabel}` for HubSpot events.
 * @member {String} eventType
 */
ExternalUnifiedEvent.prototype['eventType'] = undefined;

/**
 * A unique identifier for the event.
 * @member {String} id
 */
ExternalUnifiedEvent.prototype['id'] = undefined;

/**
 * The objectId of the object which did the event.
 * @member {String} objectId
 */
ExternalUnifiedEvent.prototype['objectId'] = undefined;

/**
 * The objectType for the object which did the event.
 * @member {String} objectType
 */
ExternalUnifiedEvent.prototype['objectType'] = undefined;

/**
 * An ISO 8601 timestamp when the event occurred.
 * @member {Date} occurredAt
 */
ExternalUnifiedEvent.prototype['occurredAt'] = undefined;

/**
 * @member {Object.<String, String>} properties
 */
ExternalUnifiedEvent.prototype['properties'] = undefined;






export default ExternalUnifiedEvent;

