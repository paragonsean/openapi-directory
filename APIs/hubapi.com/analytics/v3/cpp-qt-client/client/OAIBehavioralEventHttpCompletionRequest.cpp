/**
 * Events Send Event Completions
 * HTTP API for triggering instances of custom behavioral events
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBehavioralEventHttpCompletionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBehavioralEventHttpCompletionRequest::OAIBehavioralEventHttpCompletionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBehavioralEventHttpCompletionRequest::OAIBehavioralEventHttpCompletionRequest() {
    this->initializeModel();
}

OAIBehavioralEventHttpCompletionRequest::~OAIBehavioralEventHttpCompletionRequest() {}

void OAIBehavioralEventHttpCompletionRequest::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_event_name_isSet = false;
    m_event_name_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_occurred_at_isSet = false;
    m_occurred_at_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_utk_isSet = false;
    m_utk_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIBehavioralEventHttpCompletionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBehavioralEventHttpCompletionRequest::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_event_name_isValid = ::OpenAPI::fromJsonValue(m_event_name, json[QString("eventName")]);
    m_event_name_isSet = !json[QString("eventName")].isNull() && m_event_name_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_occurred_at_isValid = ::OpenAPI::fromJsonValue(m_occurred_at, json[QString("occurredAt")]);
    m_occurred_at_isSet = !json[QString("occurredAt")].isNull() && m_occurred_at_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_utk_isValid = ::OpenAPI::fromJsonValue(m_utk, json[QString("utk")]);
    m_utk_isSet = !json[QString("utk")].isNull() && m_utk_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIBehavioralEventHttpCompletionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBehavioralEventHttpCompletionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_event_name_isSet) {
        obj.insert(QString("eventName"), ::OpenAPI::toJsonValue(m_event_name));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_occurred_at_isSet) {
        obj.insert(QString("occurredAt"), ::OpenAPI::toJsonValue(m_occurred_at));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_utk_isSet) {
        obj.insert(QString("utk"), ::OpenAPI::toJsonValue(m_utk));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAIBehavioralEventHttpCompletionRequest::getEmail() const {
    return m_email;
}
void OAIBehavioralEventHttpCompletionRequest::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIBehavioralEventHttpCompletionRequest::is_email_Set() const{
    return m_email_isSet;
}

bool OAIBehavioralEventHttpCompletionRequest::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIBehavioralEventHttpCompletionRequest::getEventName() const {
    return m_event_name;
}
void OAIBehavioralEventHttpCompletionRequest::setEventName(const QString &event_name) {
    m_event_name = event_name;
    m_event_name_isSet = true;
}

bool OAIBehavioralEventHttpCompletionRequest::is_event_name_Set() const{
    return m_event_name_isSet;
}

bool OAIBehavioralEventHttpCompletionRequest::is_event_name_Valid() const{
    return m_event_name_isValid;
}

QString OAIBehavioralEventHttpCompletionRequest::getObjectId() const {
    return m_object_id;
}
void OAIBehavioralEventHttpCompletionRequest::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIBehavioralEventHttpCompletionRequest::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIBehavioralEventHttpCompletionRequest::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QDateTime OAIBehavioralEventHttpCompletionRequest::getOccurredAt() const {
    return m_occurred_at;
}
void OAIBehavioralEventHttpCompletionRequest::setOccurredAt(const QDateTime &occurred_at) {
    m_occurred_at = occurred_at;
    m_occurred_at_isSet = true;
}

bool OAIBehavioralEventHttpCompletionRequest::is_occurred_at_Set() const{
    return m_occurred_at_isSet;
}

bool OAIBehavioralEventHttpCompletionRequest::is_occurred_at_Valid() const{
    return m_occurred_at_isValid;
}

QMap<QString, QString> OAIBehavioralEventHttpCompletionRequest::getProperties() const {
    return m_properties;
}
void OAIBehavioralEventHttpCompletionRequest::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIBehavioralEventHttpCompletionRequest::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIBehavioralEventHttpCompletionRequest::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIBehavioralEventHttpCompletionRequest::getUtk() const {
    return m_utk;
}
void OAIBehavioralEventHttpCompletionRequest::setUtk(const QString &utk) {
    m_utk = utk;
    m_utk_isSet = true;
}

bool OAIBehavioralEventHttpCompletionRequest::is_utk_Set() const{
    return m_utk_isSet;
}

bool OAIBehavioralEventHttpCompletionRequest::is_utk_Valid() const{
    return m_utk_isValid;
}

QString OAIBehavioralEventHttpCompletionRequest::getUuid() const {
    return m_uuid;
}
void OAIBehavioralEventHttpCompletionRequest::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIBehavioralEventHttpCompletionRequest::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIBehavioralEventHttpCompletionRequest::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIBehavioralEventHttpCompletionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occurred_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_utk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBehavioralEventHttpCompletionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_name_isValid && true;
}

} // namespace OpenAPI
