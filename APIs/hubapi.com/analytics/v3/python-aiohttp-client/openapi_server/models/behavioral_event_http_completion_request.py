# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BehavioralEventHttpCompletionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, event_name: str=None, object_id: str=None, occurred_at: datetime=None, properties: Dict[str, str]=None, utk: str=None, uuid: str=None):
        """BehavioralEventHttpCompletionRequest - a model defined in OpenAPI

        :param email: The email of this BehavioralEventHttpCompletionRequest.
        :param event_name: The event_name of this BehavioralEventHttpCompletionRequest.
        :param object_id: The object_id of this BehavioralEventHttpCompletionRequest.
        :param occurred_at: The occurred_at of this BehavioralEventHttpCompletionRequest.
        :param properties: The properties of this BehavioralEventHttpCompletionRequest.
        :param utk: The utk of this BehavioralEventHttpCompletionRequest.
        :param uuid: The uuid of this BehavioralEventHttpCompletionRequest.
        """
        self.openapi_types = {
            'email': str,
            'event_name': str,
            'object_id': str,
            'occurred_at': datetime,
            'properties': Dict[str, str],
            'utk': str,
            'uuid': str
        }

        self.attribute_map = {
            'email': 'email',
            'event_name': 'eventName',
            'object_id': 'objectId',
            'occurred_at': 'occurredAt',
            'properties': 'properties',
            'utk': 'utk',
            'uuid': 'uuid'
        }

        self._email = email
        self._event_name = event_name
        self._object_id = object_id
        self._occurred_at = occurred_at
        self._properties = properties
        self._utk = utk
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BehavioralEventHttpCompletionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BehavioralEventHttpCompletionRequest of this BehavioralEventHttpCompletionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this BehavioralEventHttpCompletionRequest.

        Email of visitor

        :return: The email of this BehavioralEventHttpCompletionRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this BehavioralEventHttpCompletionRequest.

        Email of visitor

        :param email: The email of this BehavioralEventHttpCompletionRequest.
        :type email: str
        """

        self._email = email

    @property
    def event_name(self):
        """Gets the event_name of this BehavioralEventHttpCompletionRequest.

        Internal name of the event-type to trigger

        :return: The event_name of this BehavioralEventHttpCompletionRequest.
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this BehavioralEventHttpCompletionRequest.

        Internal name of the event-type to trigger

        :param event_name: The event_name of this BehavioralEventHttpCompletionRequest.
        :type event_name: str
        """
        if event_name is None:
            raise ValueError("Invalid value for `event_name`, must not be `None`")

        self._event_name = event_name

    @property
    def object_id(self):
        """Gets the object_id of this BehavioralEventHttpCompletionRequest.

        The object id that this event occurred on. Could be a contact id or a visitor id.

        :return: The object_id of this BehavioralEventHttpCompletionRequest.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this BehavioralEventHttpCompletionRequest.

        The object id that this event occurred on. Could be a contact id or a visitor id.

        :param object_id: The object_id of this BehavioralEventHttpCompletionRequest.
        :type object_id: str
        """

        self._object_id = object_id

    @property
    def occurred_at(self):
        """Gets the occurred_at of this BehavioralEventHttpCompletionRequest.

        The time when this event occurred (if any). If this isn't set, the current time will be used

        :return: The occurred_at of this BehavioralEventHttpCompletionRequest.
        :rtype: datetime
        """
        return self._occurred_at

    @occurred_at.setter
    def occurred_at(self, occurred_at):
        """Sets the occurred_at of this BehavioralEventHttpCompletionRequest.

        The time when this event occurred (if any). If this isn't set, the current time will be used

        :param occurred_at: The occurred_at of this BehavioralEventHttpCompletionRequest.
        :type occurred_at: datetime
        """

        self._occurred_at = occurred_at

    @property
    def properties(self):
        """Gets the properties of this BehavioralEventHttpCompletionRequest.

        Map of properties for the event in the format property internal name - property value

        :return: The properties of this BehavioralEventHttpCompletionRequest.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this BehavioralEventHttpCompletionRequest.

        Map of properties for the event in the format property internal name - property value

        :param properties: The properties of this BehavioralEventHttpCompletionRequest.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def utk(self):
        """Gets the utk of this BehavioralEventHttpCompletionRequest.

        User token

        :return: The utk of this BehavioralEventHttpCompletionRequest.
        :rtype: str
        """
        return self._utk

    @utk.setter
    def utk(self, utk):
        """Sets the utk of this BehavioralEventHttpCompletionRequest.

        User token

        :param utk: The utk of this BehavioralEventHttpCompletionRequest.
        :type utk: str
        """

        self._utk = utk

    @property
    def uuid(self):
        """Gets the uuid of this BehavioralEventHttpCompletionRequest.


        :return: The uuid of this BehavioralEventHttpCompletionRequest.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this BehavioralEventHttpCompletionRequest.


        :param uuid: The uuid of this BehavioralEventHttpCompletionRequest.
        :type uuid: str
        """

        self._uuid = uuid
