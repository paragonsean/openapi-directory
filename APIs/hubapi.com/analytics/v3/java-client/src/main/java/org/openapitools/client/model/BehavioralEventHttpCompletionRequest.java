/*
 * Events Send Event Completions
 * HTTP API for triggering instances of custom behavioral events
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BehavioralEventHttpCompletionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:13.719494-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BehavioralEventHttpCompletionRequest {
  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EVENT_NAME = "eventName";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  private String eventName;

  public static final String SERIALIZED_NAME_OBJECT_ID = "objectId";
  @SerializedName(SERIALIZED_NAME_OBJECT_ID)
  private String objectId;

  public static final String SERIALIZED_NAME_OCCURRED_AT = "occurredAt";
  @SerializedName(SERIALIZED_NAME_OCCURRED_AT)
  private OffsetDateTime occurredAt;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, String> properties = new HashMap<>();

  public static final String SERIALIZED_NAME_UTK = "utk";
  @SerializedName(SERIALIZED_NAME_UTK)
  private String utk;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public BehavioralEventHttpCompletionRequest() {
  }

  public BehavioralEventHttpCompletionRequest email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Email of visitor
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public BehavioralEventHttpCompletionRequest eventName(String eventName) {
    this.eventName = eventName;
    return this;
  }

  /**
   * Internal name of the event-type to trigger
   * @return eventName
   */
  @javax.annotation.Nonnull
  public String getEventName() {
    return eventName;
  }

  public void setEventName(String eventName) {
    this.eventName = eventName;
  }


  public BehavioralEventHttpCompletionRequest objectId(String objectId) {
    this.objectId = objectId;
    return this;
  }

  /**
   * The object id that this event occurred on. Could be a contact id or a visitor id.
   * @return objectId
   */
  @javax.annotation.Nullable
  public String getObjectId() {
    return objectId;
  }

  public void setObjectId(String objectId) {
    this.objectId = objectId;
  }


  public BehavioralEventHttpCompletionRequest occurredAt(OffsetDateTime occurredAt) {
    this.occurredAt = occurredAt;
    return this;
  }

  /**
   * The time when this event occurred (if any). If this isn&#39;t set, the current time will be used
   * @return occurredAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getOccurredAt() {
    return occurredAt;
  }

  public void setOccurredAt(OffsetDateTime occurredAt) {
    this.occurredAt = occurredAt;
  }


  public BehavioralEventHttpCompletionRequest properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public BehavioralEventHttpCompletionRequest putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * Map of properties for the event in the format property internal name - property value
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }


  public BehavioralEventHttpCompletionRequest utk(String utk) {
    this.utk = utk;
    return this;
  }

  /**
   * User token
   * @return utk
   */
  @javax.annotation.Nullable
  public String getUtk() {
    return utk;
  }

  public void setUtk(String utk) {
    this.utk = utk;
  }


  public BehavioralEventHttpCompletionRequest uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * Get uuid
   * @return uuid
   */
  @javax.annotation.Nullable
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BehavioralEventHttpCompletionRequest behavioralEventHttpCompletionRequest = (BehavioralEventHttpCompletionRequest) o;
    return Objects.equals(this.email, behavioralEventHttpCompletionRequest.email) &&
        Objects.equals(this.eventName, behavioralEventHttpCompletionRequest.eventName) &&
        Objects.equals(this.objectId, behavioralEventHttpCompletionRequest.objectId) &&
        Objects.equals(this.occurredAt, behavioralEventHttpCompletionRequest.occurredAt) &&
        Objects.equals(this.properties, behavioralEventHttpCompletionRequest.properties) &&
        Objects.equals(this.utk, behavioralEventHttpCompletionRequest.utk) &&
        Objects.equals(this.uuid, behavioralEventHttpCompletionRequest.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, eventName, objectId, occurredAt, properties, utk, uuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BehavioralEventHttpCompletionRequest {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    objectId: ").append(toIndentedString(objectId)).append("\n");
    sb.append("    occurredAt: ").append(toIndentedString(occurredAt)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    utk: ").append(toIndentedString(utk)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email");
    openapiFields.add("eventName");
    openapiFields.add("objectId");
    openapiFields.add("occurredAt");
    openapiFields.add("properties");
    openapiFields.add("utk");
    openapiFields.add("uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("eventName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BehavioralEventHttpCompletionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BehavioralEventHttpCompletionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BehavioralEventHttpCompletionRequest is not found in the empty JSON string", BehavioralEventHttpCompletionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BehavioralEventHttpCompletionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BehavioralEventHttpCompletionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BehavioralEventHttpCompletionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("eventName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventName").toString()));
      }
      if ((jsonObj.get("objectId") != null && !jsonObj.get("objectId").isJsonNull()) && !jsonObj.get("objectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectId").toString()));
      }
      if ((jsonObj.get("utk") != null && !jsonObj.get("utk").isJsonNull()) && !jsonObj.get("utk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `utk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("utk").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BehavioralEventHttpCompletionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BehavioralEventHttpCompletionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BehavioralEventHttpCompletionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BehavioralEventHttpCompletionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BehavioralEventHttpCompletionRequest>() {
           @Override
           public void write(JsonWriter out, BehavioralEventHttpCompletionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BehavioralEventHttpCompletionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BehavioralEventHttpCompletionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BehavioralEventHttpCompletionRequest
   * @throws IOException if the JSON string is invalid with respect to BehavioralEventHttpCompletionRequest
   */
  public static BehavioralEventHttpCompletionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BehavioralEventHttpCompletionRequest.class);
  }

  /**
   * Convert an instance of BehavioralEventHttpCompletionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

