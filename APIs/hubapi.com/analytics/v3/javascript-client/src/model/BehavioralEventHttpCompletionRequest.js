/**
 * Events Send Event Completions
 * HTTP API for triggering instances of custom behavioral events
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BehavioralEventHttpCompletionRequest model module.
 * @module model/BehavioralEventHttpCompletionRequest
 * @version v3
 */
class BehavioralEventHttpCompletionRequest {
    /**
     * Constructs a new <code>BehavioralEventHttpCompletionRequest</code>.
     * @alias module:model/BehavioralEventHttpCompletionRequest
     * @param eventName {String} Internal name of the event-type to trigger
     */
    constructor(eventName) { 
        
        BehavioralEventHttpCompletionRequest.initialize(this, eventName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eventName) { 
        obj['eventName'] = eventName;
    }

    /**
     * Constructs a <code>BehavioralEventHttpCompletionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BehavioralEventHttpCompletionRequest} obj Optional instance to populate.
     * @return {module:model/BehavioralEventHttpCompletionRequest} The populated <code>BehavioralEventHttpCompletionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BehavioralEventHttpCompletionRequest();

            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('eventName')) {
                obj['eventName'] = ApiClient.convertToType(data['eventName'], 'String');
            }
            if (data.hasOwnProperty('objectId')) {
                obj['objectId'] = ApiClient.convertToType(data['objectId'], 'String');
            }
            if (data.hasOwnProperty('occurredAt')) {
                obj['occurredAt'] = ApiClient.convertToType(data['occurredAt'], 'Date');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('utk')) {
                obj['utk'] = ApiClient.convertToType(data['utk'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BehavioralEventHttpCompletionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BehavioralEventHttpCompletionRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BehavioralEventHttpCompletionRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['eventName'] && !(typeof data['eventName'] === 'string' || data['eventName'] instanceof String)) {
            throw new Error("Expected the field `eventName` to be a primitive type in the JSON string but got " + data['eventName']);
        }
        // ensure the json data is a string
        if (data['objectId'] && !(typeof data['objectId'] === 'string' || data['objectId'] instanceof String)) {
            throw new Error("Expected the field `objectId` to be a primitive type in the JSON string but got " + data['objectId']);
        }
        // ensure the json data is a string
        if (data['utk'] && !(typeof data['utk'] === 'string' || data['utk'] instanceof String)) {
            throw new Error("Expected the field `utk` to be a primitive type in the JSON string but got " + data['utk']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }

        return true;
    }


}

BehavioralEventHttpCompletionRequest.RequiredProperties = ["eventName"];

/**
 * Email of visitor
 * @member {String} email
 */
BehavioralEventHttpCompletionRequest.prototype['email'] = undefined;

/**
 * Internal name of the event-type to trigger
 * @member {String} eventName
 */
BehavioralEventHttpCompletionRequest.prototype['eventName'] = undefined;

/**
 * The object id that this event occurred on. Could be a contact id or a visitor id.
 * @member {String} objectId
 */
BehavioralEventHttpCompletionRequest.prototype['objectId'] = undefined;

/**
 * The time when this event occurred (if any). If this isn't set, the current time will be used
 * @member {Date} occurredAt
 */
BehavioralEventHttpCompletionRequest.prototype['occurredAt'] = undefined;

/**
 * Map of properties for the event in the format property internal name - property value
 * @member {Object.<String, String>} properties
 */
BehavioralEventHttpCompletionRequest.prototype['properties'] = undefined;

/**
 * User token
 * @member {String} utk
 */
BehavioralEventHttpCompletionRequest.prototype['utk'] = undefined;

/**
 * @member {String} uuid
 */
BehavioralEventHttpCompletionRequest.prototype['uuid'] = undefined;






export default BehavioralEventHttpCompletionRequest;

