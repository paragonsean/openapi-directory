/*
 * Marketing Events
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.MarketingEventCreateRequestParams;
import org.openapitools.client.model.MarketingEventDefaultResponse;
import org.openapitools.client.model.MarketingEventPublicDefaultResponse;
import org.openapitools.client.model.MarketingEventPublicReadResponse;
import org.openapitools.client.model.MarketingEventUpdateRequestParams;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BasicApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BasicApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BasicApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteMarketingV3MarketingEventsEventsExternalEventIdArchive
     * @param externalEventId The id of the marketing event to delete (required)
     * @param externalAccountId The account id associated with the marketing event (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMarketingV3MarketingEventsEventsExternalEventIdArchiveCall(String externalEventId, String externalAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/marketing/v3/marketing-events/events/{externalEventId}"
            .replace("{" + "externalEventId" + "}", localVarApiClient.escapeString(externalEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (externalAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("externalAccountId", externalAccountId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMarketingV3MarketingEventsEventsExternalEventIdArchiveValidateBeforeCall(String externalEventId, String externalAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalEventId' is set
        if (externalEventId == null) {
            throw new ApiException("Missing the required parameter 'externalEventId' when calling deleteMarketingV3MarketingEventsEventsExternalEventIdArchive(Async)");
        }

        // verify the required parameter 'externalAccountId' is set
        if (externalAccountId == null) {
            throw new ApiException("Missing the required parameter 'externalAccountId' when calling deleteMarketingV3MarketingEventsEventsExternalEventIdArchive(Async)");
        }

        return deleteMarketingV3MarketingEventsEventsExternalEventIdArchiveCall(externalEventId, externalAccountId, _callback);

    }

    /**
     * Delete a marketing event
     * Deletes an existing Marketing Event with the specified id, if one exists.
     * @param externalEventId The id of the marketing event to delete (required)
     * @param externalAccountId The account id associated with the marketing event (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMarketingV3MarketingEventsEventsExternalEventIdArchive(String externalEventId, String externalAccountId) throws ApiException {
        deleteMarketingV3MarketingEventsEventsExternalEventIdArchiveWithHttpInfo(externalEventId, externalAccountId);
    }

    /**
     * Delete a marketing event
     * Deletes an existing Marketing Event with the specified id, if one exists.
     * @param externalEventId The id of the marketing event to delete (required)
     * @param externalAccountId The account id associated with the marketing event (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMarketingV3MarketingEventsEventsExternalEventIdArchiveWithHttpInfo(String externalEventId, String externalAccountId) throws ApiException {
        okhttp3.Call localVarCall = deleteMarketingV3MarketingEventsEventsExternalEventIdArchiveValidateBeforeCall(externalEventId, externalAccountId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a marketing event (asynchronously)
     * Deletes an existing Marketing Event with the specified id, if one exists.
     * @param externalEventId The id of the marketing event to delete (required)
     * @param externalAccountId The account id associated with the marketing event (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMarketingV3MarketingEventsEventsExternalEventIdArchiveAsync(String externalEventId, String externalAccountId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMarketingV3MarketingEventsEventsExternalEventIdArchiveValidateBeforeCall(externalEventId, externalAccountId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarketingV3MarketingEventsEventsExternalEventIdGetById
     * @param externalEventId The id of the marketing event to return (required)
     * @param externalAccountId The account id associated with the marketing event (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketingV3MarketingEventsEventsExternalEventIdGetByIdCall(String externalEventId, String externalAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/marketing/v3/marketing-events/events/{externalEventId}"
            .replace("{" + "externalEventId" + "}", localVarApiClient.escapeString(externalEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (externalAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("externalAccountId", externalAccountId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketingV3MarketingEventsEventsExternalEventIdGetByIdValidateBeforeCall(String externalEventId, String externalAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalEventId' is set
        if (externalEventId == null) {
            throw new ApiException("Missing the required parameter 'externalEventId' when calling getMarketingV3MarketingEventsEventsExternalEventIdGetById(Async)");
        }

        // verify the required parameter 'externalAccountId' is set
        if (externalAccountId == null) {
            throw new ApiException("Missing the required parameter 'externalAccountId' when calling getMarketingV3MarketingEventsEventsExternalEventIdGetById(Async)");
        }

        return getMarketingV3MarketingEventsEventsExternalEventIdGetByIdCall(externalEventId, externalAccountId, _callback);

    }

    /**
     * Get a marketing event
     * Returns the details of the Marketing Event with the specified id, if one exists.
     * @param externalEventId The id of the marketing event to return (required)
     * @param externalAccountId The account id associated with the marketing event (required)
     * @return MarketingEventPublicReadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public MarketingEventPublicReadResponse getMarketingV3MarketingEventsEventsExternalEventIdGetById(String externalEventId, String externalAccountId) throws ApiException {
        ApiResponse<MarketingEventPublicReadResponse> localVarResp = getMarketingV3MarketingEventsEventsExternalEventIdGetByIdWithHttpInfo(externalEventId, externalAccountId);
        return localVarResp.getData();
    }

    /**
     * Get a marketing event
     * Returns the details of the Marketing Event with the specified id, if one exists.
     * @param externalEventId The id of the marketing event to return (required)
     * @param externalAccountId The account id associated with the marketing event (required)
     * @return ApiResponse&lt;MarketingEventPublicReadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MarketingEventPublicReadResponse> getMarketingV3MarketingEventsEventsExternalEventIdGetByIdWithHttpInfo(String externalEventId, String externalAccountId) throws ApiException {
        okhttp3.Call localVarCall = getMarketingV3MarketingEventsEventsExternalEventIdGetByIdValidateBeforeCall(externalEventId, externalAccountId, null);
        Type localVarReturnType = new TypeToken<MarketingEventPublicReadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a marketing event (asynchronously)
     * Returns the details of the Marketing Event with the specified id, if one exists.
     * @param externalEventId The id of the marketing event to return (required)
     * @param externalAccountId The account id associated with the marketing event (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketingV3MarketingEventsEventsExternalEventIdGetByIdAsync(String externalEventId, String externalAccountId, final ApiCallback<MarketingEventPublicReadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketingV3MarketingEventsEventsExternalEventIdGetByIdValidateBeforeCall(externalEventId, externalAccountId, _callback);
        Type localVarReturnType = new TypeToken<MarketingEventPublicReadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchMarketingV3MarketingEventsEventsExternalEventIdUpdate
     * @param externalEventId The id of the marketing event to update (required)
     * @param externalAccountId The account id associated with the marketing event (required)
     * @param marketingEventUpdateRequestParams The details of the marketing event to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchMarketingV3MarketingEventsEventsExternalEventIdUpdateCall(String externalEventId, String externalAccountId, MarketingEventUpdateRequestParams marketingEventUpdateRequestParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = marketingEventUpdateRequestParams;

        // create path and map variables
        String localVarPath = "/marketing/v3/marketing-events/events/{externalEventId}"
            .replace("{" + "externalEventId" + "}", localVarApiClient.escapeString(externalEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (externalAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("externalAccountId", externalAccountId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchMarketingV3MarketingEventsEventsExternalEventIdUpdateValidateBeforeCall(String externalEventId, String externalAccountId, MarketingEventUpdateRequestParams marketingEventUpdateRequestParams, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalEventId' is set
        if (externalEventId == null) {
            throw new ApiException("Missing the required parameter 'externalEventId' when calling patchMarketingV3MarketingEventsEventsExternalEventIdUpdate(Async)");
        }

        // verify the required parameter 'externalAccountId' is set
        if (externalAccountId == null) {
            throw new ApiException("Missing the required parameter 'externalAccountId' when calling patchMarketingV3MarketingEventsEventsExternalEventIdUpdate(Async)");
        }

        // verify the required parameter 'marketingEventUpdateRequestParams' is set
        if (marketingEventUpdateRequestParams == null) {
            throw new ApiException("Missing the required parameter 'marketingEventUpdateRequestParams' when calling patchMarketingV3MarketingEventsEventsExternalEventIdUpdate(Async)");
        }

        return patchMarketingV3MarketingEventsEventsExternalEventIdUpdateCall(externalEventId, externalAccountId, marketingEventUpdateRequestParams, _callback);

    }

    /**
     * Update a marketing event
     * Updates an existing Marketing Event with the specified id, if one exists.
     * @param externalEventId The id of the marketing event to update (required)
     * @param externalAccountId The account id associated with the marketing event (required)
     * @param marketingEventUpdateRequestParams The details of the marketing event to update (required)
     * @return MarketingEventPublicDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public MarketingEventPublicDefaultResponse patchMarketingV3MarketingEventsEventsExternalEventIdUpdate(String externalEventId, String externalAccountId, MarketingEventUpdateRequestParams marketingEventUpdateRequestParams) throws ApiException {
        ApiResponse<MarketingEventPublicDefaultResponse> localVarResp = patchMarketingV3MarketingEventsEventsExternalEventIdUpdateWithHttpInfo(externalEventId, externalAccountId, marketingEventUpdateRequestParams);
        return localVarResp.getData();
    }

    /**
     * Update a marketing event
     * Updates an existing Marketing Event with the specified id, if one exists.
     * @param externalEventId The id of the marketing event to update (required)
     * @param externalAccountId The account id associated with the marketing event (required)
     * @param marketingEventUpdateRequestParams The details of the marketing event to update (required)
     * @return ApiResponse&lt;MarketingEventPublicDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MarketingEventPublicDefaultResponse> patchMarketingV3MarketingEventsEventsExternalEventIdUpdateWithHttpInfo(String externalEventId, String externalAccountId, MarketingEventUpdateRequestParams marketingEventUpdateRequestParams) throws ApiException {
        okhttp3.Call localVarCall = patchMarketingV3MarketingEventsEventsExternalEventIdUpdateValidateBeforeCall(externalEventId, externalAccountId, marketingEventUpdateRequestParams, null);
        Type localVarReturnType = new TypeToken<MarketingEventPublicDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a marketing event (asynchronously)
     * Updates an existing Marketing Event with the specified id, if one exists.
     * @param externalEventId The id of the marketing event to update (required)
     * @param externalAccountId The account id associated with the marketing event (required)
     * @param marketingEventUpdateRequestParams The details of the marketing event to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchMarketingV3MarketingEventsEventsExternalEventIdUpdateAsync(String externalEventId, String externalAccountId, MarketingEventUpdateRequestParams marketingEventUpdateRequestParams, final ApiCallback<MarketingEventPublicDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchMarketingV3MarketingEventsEventsExternalEventIdUpdateValidateBeforeCall(externalEventId, externalAccountId, marketingEventUpdateRequestParams, _callback);
        Type localVarReturnType = new TypeToken<MarketingEventPublicDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postMarketingV3MarketingEventsEventsCreate
     * @param marketingEventCreateRequestParams The details of the marketing event to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postMarketingV3MarketingEventsEventsCreateCall(MarketingEventCreateRequestParams marketingEventCreateRequestParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = marketingEventCreateRequestParams;

        // create path and map variables
        String localVarPath = "/marketing/v3/marketing-events/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postMarketingV3MarketingEventsEventsCreateValidateBeforeCall(MarketingEventCreateRequestParams marketingEventCreateRequestParams, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marketingEventCreateRequestParams' is set
        if (marketingEventCreateRequestParams == null) {
            throw new ApiException("Missing the required parameter 'marketingEventCreateRequestParams' when calling postMarketingV3MarketingEventsEventsCreate(Async)");
        }

        return postMarketingV3MarketingEventsEventsCreateCall(marketingEventCreateRequestParams, _callback);

    }

    /**
     * Create a marketing event
     * Creates a new marketing event in HubSpot
     * @param marketingEventCreateRequestParams The details of the marketing event to create (required)
     * @return MarketingEventDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public MarketingEventDefaultResponse postMarketingV3MarketingEventsEventsCreate(MarketingEventCreateRequestParams marketingEventCreateRequestParams) throws ApiException {
        ApiResponse<MarketingEventDefaultResponse> localVarResp = postMarketingV3MarketingEventsEventsCreateWithHttpInfo(marketingEventCreateRequestParams);
        return localVarResp.getData();
    }

    /**
     * Create a marketing event
     * Creates a new marketing event in HubSpot
     * @param marketingEventCreateRequestParams The details of the marketing event to create (required)
     * @return ApiResponse&lt;MarketingEventDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MarketingEventDefaultResponse> postMarketingV3MarketingEventsEventsCreateWithHttpInfo(MarketingEventCreateRequestParams marketingEventCreateRequestParams) throws ApiException {
        okhttp3.Call localVarCall = postMarketingV3MarketingEventsEventsCreateValidateBeforeCall(marketingEventCreateRequestParams, null);
        Type localVarReturnType = new TypeToken<MarketingEventDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a marketing event (asynchronously)
     * Creates a new marketing event in HubSpot
     * @param marketingEventCreateRequestParams The details of the marketing event to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postMarketingV3MarketingEventsEventsCreateAsync(MarketingEventCreateRequestParams marketingEventCreateRequestParams, final ApiCallback<MarketingEventDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postMarketingV3MarketingEventsEventsCreateValidateBeforeCall(marketingEventCreateRequestParams, _callback);
        Type localVarReturnType = new TypeToken<MarketingEventDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel
     * @param externalEventId The id of the marketing event to mark as cancelled (required)
     * @param externalAccountId The account id associated with the marketing event (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelCall(String externalEventId, String externalAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/marketing/v3/marketing-events/events/{externalEventId}/cancel"
            .replace("{" + "externalEventId" + "}", localVarApiClient.escapeString(externalEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (externalAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("externalAccountId", externalAccountId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelValidateBeforeCall(String externalEventId, String externalAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalEventId' is set
        if (externalEventId == null) {
            throw new ApiException("Missing the required parameter 'externalEventId' when calling postMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel(Async)");
        }

        // verify the required parameter 'externalAccountId' is set
        if (externalAccountId == null) {
            throw new ApiException("Missing the required parameter 'externalAccountId' when calling postMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel(Async)");
        }

        return postMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelCall(externalEventId, externalAccountId, _callback);

    }

    /**
     * Mark a marketing event as cancelled
     * Mark a marketing event as cancelled.
     * @param externalEventId The id of the marketing event to mark as cancelled (required)
     * @param externalAccountId The account id associated with the marketing event (required)
     * @return MarketingEventDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public MarketingEventDefaultResponse postMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel(String externalEventId, String externalAccountId) throws ApiException {
        ApiResponse<MarketingEventDefaultResponse> localVarResp = postMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelWithHttpInfo(externalEventId, externalAccountId);
        return localVarResp.getData();
    }

    /**
     * Mark a marketing event as cancelled
     * Mark a marketing event as cancelled.
     * @param externalEventId The id of the marketing event to mark as cancelled (required)
     * @param externalAccountId The account id associated with the marketing event (required)
     * @return ApiResponse&lt;MarketingEventDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MarketingEventDefaultResponse> postMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelWithHttpInfo(String externalEventId, String externalAccountId) throws ApiException {
        okhttp3.Call localVarCall = postMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelValidateBeforeCall(externalEventId, externalAccountId, null);
        Type localVarReturnType = new TypeToken<MarketingEventDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark a marketing event as cancelled (asynchronously)
     * Mark a marketing event as cancelled.
     * @param externalEventId The id of the marketing event to mark as cancelled (required)
     * @param externalAccountId The account id associated with the marketing event (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelAsync(String externalEventId, String externalAccountId, final ApiCallback<MarketingEventDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelValidateBeforeCall(externalEventId, externalAccountId, _callback);
        Type localVarReturnType = new TypeToken<MarketingEventDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putMarketingV3MarketingEventsEventsExternalEventIdReplace
     * @param externalEventId The id of the marketing event to upsert (required)
     * @param marketingEventCreateRequestParams The details of the marketing event to upsert (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putMarketingV3MarketingEventsEventsExternalEventIdReplaceCall(String externalEventId, MarketingEventCreateRequestParams marketingEventCreateRequestParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = marketingEventCreateRequestParams;

        // create path and map variables
        String localVarPath = "/marketing/v3/marketing-events/events/{externalEventId}"
            .replace("{" + "externalEventId" + "}", localVarApiClient.escapeString(externalEventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putMarketingV3MarketingEventsEventsExternalEventIdReplaceValidateBeforeCall(String externalEventId, MarketingEventCreateRequestParams marketingEventCreateRequestParams, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalEventId' is set
        if (externalEventId == null) {
            throw new ApiException("Missing the required parameter 'externalEventId' when calling putMarketingV3MarketingEventsEventsExternalEventIdReplace(Async)");
        }

        // verify the required parameter 'marketingEventCreateRequestParams' is set
        if (marketingEventCreateRequestParams == null) {
            throw new ApiException("Missing the required parameter 'marketingEventCreateRequestParams' when calling putMarketingV3MarketingEventsEventsExternalEventIdReplace(Async)");
        }

        return putMarketingV3MarketingEventsEventsExternalEventIdReplaceCall(externalEventId, marketingEventCreateRequestParams, _callback);

    }

    /**
     * Create or update a marketing event
     * Upsets a Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.
     * @param externalEventId The id of the marketing event to upsert (required)
     * @param marketingEventCreateRequestParams The details of the marketing event to upsert (required)
     * @return MarketingEventPublicDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public MarketingEventPublicDefaultResponse putMarketingV3MarketingEventsEventsExternalEventIdReplace(String externalEventId, MarketingEventCreateRequestParams marketingEventCreateRequestParams) throws ApiException {
        ApiResponse<MarketingEventPublicDefaultResponse> localVarResp = putMarketingV3MarketingEventsEventsExternalEventIdReplaceWithHttpInfo(externalEventId, marketingEventCreateRequestParams);
        return localVarResp.getData();
    }

    /**
     * Create or update a marketing event
     * Upsets a Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.
     * @param externalEventId The id of the marketing event to upsert (required)
     * @param marketingEventCreateRequestParams The details of the marketing event to upsert (required)
     * @return ApiResponse&lt;MarketingEventPublicDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MarketingEventPublicDefaultResponse> putMarketingV3MarketingEventsEventsExternalEventIdReplaceWithHttpInfo(String externalEventId, MarketingEventCreateRequestParams marketingEventCreateRequestParams) throws ApiException {
        okhttp3.Call localVarCall = putMarketingV3MarketingEventsEventsExternalEventIdReplaceValidateBeforeCall(externalEventId, marketingEventCreateRequestParams, null);
        Type localVarReturnType = new TypeToken<MarketingEventPublicDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a marketing event (asynchronously)
     * Upsets a Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.
     * @param externalEventId The id of the marketing event to upsert (required)
     * @param marketingEventCreateRequestParams The details of the marketing event to upsert (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putMarketingV3MarketingEventsEventsExternalEventIdReplaceAsync(String externalEventId, MarketingEventCreateRequestParams marketingEventCreateRequestParams, final ApiCallback<MarketingEventPublicDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putMarketingV3MarketingEventsEventsExternalEventIdReplaceValidateBeforeCall(externalEventId, marketingEventCreateRequestParams, _callback);
        Type localVarReturnType = new TypeToken<MarketingEventPublicDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
