/*
 * Marketing Events
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PropertyValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MarketingEventPublicReadResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:32.104131-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MarketingEventPublicReadResponse {
  public static final String SERIALIZED_NAME_ATTENDEES = "attendees";
  @SerializedName(SERIALIZED_NAME_ATTENDEES)
  private Integer attendees;

  public static final String SERIALIZED_NAME_CANCELLATIONS = "cancellations";
  @SerializedName(SERIALIZED_NAME_CANCELLATIONS)
  private Integer cancellations;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CUSTOM_PROPERTIES = "customProperties";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PROPERTIES)
  private List<PropertyValue> customProperties = new ArrayList<>();

  public static final String SERIALIZED_NAME_END_DATE_TIME = "endDateTime";
  @SerializedName(SERIALIZED_NAME_END_DATE_TIME)
  private OffsetDateTime endDateTime;

  public static final String SERIALIZED_NAME_EVENT_CANCELLED = "eventCancelled";
  @SerializedName(SERIALIZED_NAME_EVENT_CANCELLED)
  private Boolean eventCancelled;

  public static final String SERIALIZED_NAME_EVENT_DESCRIPTION = "eventDescription";
  @SerializedName(SERIALIZED_NAME_EVENT_DESCRIPTION)
  private String eventDescription;

  public static final String SERIALIZED_NAME_EVENT_NAME = "eventName";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  private String eventName;

  public static final String SERIALIZED_NAME_EVENT_ORGANIZER = "eventOrganizer";
  @SerializedName(SERIALIZED_NAME_EVENT_ORGANIZER)
  private String eventOrganizer;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_EVENT_URL = "eventUrl";
  @SerializedName(SERIALIZED_NAME_EVENT_URL)
  private String eventUrl;

  public static final String SERIALIZED_NAME_EXTERNAL_EVENT_ID = "externalEventId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_EVENT_ID)
  private String externalEventId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NO_SHOWS = "noShows";
  @SerializedName(SERIALIZED_NAME_NO_SHOWS)
  private Integer noShows;

  public static final String SERIALIZED_NAME_REGISTRANTS = "registrants";
  @SerializedName(SERIALIZED_NAME_REGISTRANTS)
  private Integer registrants;

  public static final String SERIALIZED_NAME_START_DATE_TIME = "startDateTime";
  @SerializedName(SERIALIZED_NAME_START_DATE_TIME)
  private OffsetDateTime startDateTime;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public MarketingEventPublicReadResponse() {
  }

  public MarketingEventPublicReadResponse attendees(Integer attendees) {
    this.attendees = attendees;
    return this;
  }

  /**
   * The number of HubSpot contacts that attended this marketing event.
   * @return attendees
   */
  @javax.annotation.Nonnull
  public Integer getAttendees() {
    return attendees;
  }

  public void setAttendees(Integer attendees) {
    this.attendees = attendees;
  }


  public MarketingEventPublicReadResponse cancellations(Integer cancellations) {
    this.cancellations = cancellations;
    return this;
  }

  /**
   * The number of HubSpot contacts that registered for this marketing event, but later cancelled their registration.
   * @return cancellations
   */
  @javax.annotation.Nonnull
  public Integer getCancellations() {
    return cancellations;
  }

  public void setCancellations(Integer cancellations) {
    this.cancellations = cancellations;
  }


  public MarketingEventPublicReadResponse createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * 
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public MarketingEventPublicReadResponse customProperties(List<PropertyValue> customProperties) {
    this.customProperties = customProperties;
    return this;
  }

  public MarketingEventPublicReadResponse addCustomPropertiesItem(PropertyValue customPropertiesItem) {
    if (this.customProperties == null) {
      this.customProperties = new ArrayList<>();
    }
    this.customProperties.add(customPropertiesItem);
    return this;
  }

  /**
   * A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account&#39;s definition of the MarketingEvent Object. If they don&#39;t they will be filtered out and not set. In order to do this you&#39;ll need to create a new PropertyGroup on the HubSpot account&#39;s MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts. 
   * @return customProperties
   */
  @javax.annotation.Nullable
  public List<PropertyValue> getCustomProperties() {
    return customProperties;
  }

  public void setCustomProperties(List<PropertyValue> customProperties) {
    this.customProperties = customProperties;
  }


  public MarketingEventPublicReadResponse endDateTime(OffsetDateTime endDateTime) {
    this.endDateTime = endDateTime;
    return this;
  }

  /**
   * The end date and time of the marketing event.
   * @return endDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDateTime() {
    return endDateTime;
  }

  public void setEndDateTime(OffsetDateTime endDateTime) {
    this.endDateTime = endDateTime;
  }


  public MarketingEventPublicReadResponse eventCancelled(Boolean eventCancelled) {
    this.eventCancelled = eventCancelled;
    return this;
  }

  /**
   * Indicates if the marketing event has been cancelled.
   * @return eventCancelled
   */
  @javax.annotation.Nullable
  public Boolean getEventCancelled() {
    return eventCancelled;
  }

  public void setEventCancelled(Boolean eventCancelled) {
    this.eventCancelled = eventCancelled;
  }


  public MarketingEventPublicReadResponse eventDescription(String eventDescription) {
    this.eventDescription = eventDescription;
    return this;
  }

  /**
   * The description of the marketing event.
   * @return eventDescription
   */
  @javax.annotation.Nullable
  public String getEventDescription() {
    return eventDescription;
  }

  public void setEventDescription(String eventDescription) {
    this.eventDescription = eventDescription;
  }


  public MarketingEventPublicReadResponse eventName(String eventName) {
    this.eventName = eventName;
    return this;
  }

  /**
   * The name of the marketing event.
   * @return eventName
   */
  @javax.annotation.Nonnull
  public String getEventName() {
    return eventName;
  }

  public void setEventName(String eventName) {
    this.eventName = eventName;
  }


  public MarketingEventPublicReadResponse eventOrganizer(String eventOrganizer) {
    this.eventOrganizer = eventOrganizer;
    return this;
  }

  /**
   * The name of the organizer of the marketing event.
   * @return eventOrganizer
   */
  @javax.annotation.Nonnull
  public String getEventOrganizer() {
    return eventOrganizer;
  }

  public void setEventOrganizer(String eventOrganizer) {
    this.eventOrganizer = eventOrganizer;
  }


  public MarketingEventPublicReadResponse eventType(String eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * The type of the marketing event.
   * @return eventType
   */
  @javax.annotation.Nullable
  public String getEventType() {
    return eventType;
  }

  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public MarketingEventPublicReadResponse eventUrl(String eventUrl) {
    this.eventUrl = eventUrl;
    return this;
  }

  /**
   * A URL in the external event application where the marketing event can be managed.
   * @return eventUrl
   */
  @javax.annotation.Nullable
  public String getEventUrl() {
    return eventUrl;
  }

  public void setEventUrl(String eventUrl) {
    this.eventUrl = eventUrl;
  }


  public MarketingEventPublicReadResponse externalEventId(String externalEventId) {
    this.externalEventId = externalEventId;
    return this;
  }

  /**
   * The id of the marketing event in the external event application.
   * @return externalEventId
   */
  @javax.annotation.Nonnull
  public String getExternalEventId() {
    return externalEventId;
  }

  public void setExternalEventId(String externalEventId) {
    this.externalEventId = externalEventId;
  }


  public MarketingEventPublicReadResponse id(String id) {
    this.id = id;
    return this;
  }

  /**
   * 
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MarketingEventPublicReadResponse noShows(Integer noShows) {
    this.noShows = noShows;
    return this;
  }

  /**
   * The number of HubSpot contacts that registered for this marketing event, but did not attend. This field only had a value when the event is over.
   * @return noShows
   */
  @javax.annotation.Nonnull
  public Integer getNoShows() {
    return noShows;
  }

  public void setNoShows(Integer noShows) {
    this.noShows = noShows;
  }


  public MarketingEventPublicReadResponse registrants(Integer registrants) {
    this.registrants = registrants;
    return this;
  }

  /**
   * The number of HubSpot contacts that registered for this marketing event.
   * @return registrants
   */
  @javax.annotation.Nonnull
  public Integer getRegistrants() {
    return registrants;
  }

  public void setRegistrants(Integer registrants) {
    this.registrants = registrants;
  }


  public MarketingEventPublicReadResponse startDateTime(OffsetDateTime startDateTime) {
    this.startDateTime = startDateTime;
    return this;
  }

  /**
   * The start date and time of the marketing event.
   * @return startDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDateTime() {
    return startDateTime;
  }

  public void setStartDateTime(OffsetDateTime startDateTime) {
    this.startDateTime = startDateTime;
  }


  public MarketingEventPublicReadResponse updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * 
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketingEventPublicReadResponse marketingEventPublicReadResponse = (MarketingEventPublicReadResponse) o;
    return Objects.equals(this.attendees, marketingEventPublicReadResponse.attendees) &&
        Objects.equals(this.cancellations, marketingEventPublicReadResponse.cancellations) &&
        Objects.equals(this.createdAt, marketingEventPublicReadResponse.createdAt) &&
        Objects.equals(this.customProperties, marketingEventPublicReadResponse.customProperties) &&
        Objects.equals(this.endDateTime, marketingEventPublicReadResponse.endDateTime) &&
        Objects.equals(this.eventCancelled, marketingEventPublicReadResponse.eventCancelled) &&
        Objects.equals(this.eventDescription, marketingEventPublicReadResponse.eventDescription) &&
        Objects.equals(this.eventName, marketingEventPublicReadResponse.eventName) &&
        Objects.equals(this.eventOrganizer, marketingEventPublicReadResponse.eventOrganizer) &&
        Objects.equals(this.eventType, marketingEventPublicReadResponse.eventType) &&
        Objects.equals(this.eventUrl, marketingEventPublicReadResponse.eventUrl) &&
        Objects.equals(this.externalEventId, marketingEventPublicReadResponse.externalEventId) &&
        Objects.equals(this.id, marketingEventPublicReadResponse.id) &&
        Objects.equals(this.noShows, marketingEventPublicReadResponse.noShows) &&
        Objects.equals(this.registrants, marketingEventPublicReadResponse.registrants) &&
        Objects.equals(this.startDateTime, marketingEventPublicReadResponse.startDateTime) &&
        Objects.equals(this.updatedAt, marketingEventPublicReadResponse.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attendees, cancellations, createdAt, customProperties, endDateTime, eventCancelled, eventDescription, eventName, eventOrganizer, eventType, eventUrl, externalEventId, id, noShows, registrants, startDateTime, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketingEventPublicReadResponse {\n");
    sb.append("    attendees: ").append(toIndentedString(attendees)).append("\n");
    sb.append("    cancellations: ").append(toIndentedString(cancellations)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customProperties: ").append(toIndentedString(customProperties)).append("\n");
    sb.append("    endDateTime: ").append(toIndentedString(endDateTime)).append("\n");
    sb.append("    eventCancelled: ").append(toIndentedString(eventCancelled)).append("\n");
    sb.append("    eventDescription: ").append(toIndentedString(eventDescription)).append("\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    eventOrganizer: ").append(toIndentedString(eventOrganizer)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    eventUrl: ").append(toIndentedString(eventUrl)).append("\n");
    sb.append("    externalEventId: ").append(toIndentedString(externalEventId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    noShows: ").append(toIndentedString(noShows)).append("\n");
    sb.append("    registrants: ").append(toIndentedString(registrants)).append("\n");
    sb.append("    startDateTime: ").append(toIndentedString(startDateTime)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attendees");
    openapiFields.add("cancellations");
    openapiFields.add("createdAt");
    openapiFields.add("customProperties");
    openapiFields.add("endDateTime");
    openapiFields.add("eventCancelled");
    openapiFields.add("eventDescription");
    openapiFields.add("eventName");
    openapiFields.add("eventOrganizer");
    openapiFields.add("eventType");
    openapiFields.add("eventUrl");
    openapiFields.add("externalEventId");
    openapiFields.add("id");
    openapiFields.add("noShows");
    openapiFields.add("registrants");
    openapiFields.add("startDateTime");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("attendees");
    openapiRequiredFields.add("cancellations");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("eventName");
    openapiRequiredFields.add("eventOrganizer");
    openapiRequiredFields.add("externalEventId");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("noShows");
    openapiRequiredFields.add("registrants");
    openapiRequiredFields.add("updatedAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MarketingEventPublicReadResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MarketingEventPublicReadResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MarketingEventPublicReadResponse is not found in the empty JSON string", MarketingEventPublicReadResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MarketingEventPublicReadResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MarketingEventPublicReadResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MarketingEventPublicReadResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("customProperties") != null && !jsonObj.get("customProperties").isJsonNull()) {
        JsonArray jsonArraycustomProperties = jsonObj.getAsJsonArray("customProperties");
        if (jsonArraycustomProperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customProperties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customProperties` to be an array in the JSON string but got `%s`", jsonObj.get("customProperties").toString()));
          }

          // validate the optional field `customProperties` (array)
          for (int i = 0; i < jsonArraycustomProperties.size(); i++) {
            PropertyValue.validateJsonElement(jsonArraycustomProperties.get(i));
          };
        }
      }
      if ((jsonObj.get("eventDescription") != null && !jsonObj.get("eventDescription").isJsonNull()) && !jsonObj.get("eventDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventDescription").toString()));
      }
      if (!jsonObj.get("eventName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventName").toString()));
      }
      if (!jsonObj.get("eventOrganizer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventOrganizer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventOrganizer").toString()));
      }
      if ((jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) && !jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
      if ((jsonObj.get("eventUrl") != null && !jsonObj.get("eventUrl").isJsonNull()) && !jsonObj.get("eventUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventUrl").toString()));
      }
      if (!jsonObj.get("externalEventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalEventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalEventId").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MarketingEventPublicReadResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MarketingEventPublicReadResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MarketingEventPublicReadResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MarketingEventPublicReadResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<MarketingEventPublicReadResponse>() {
           @Override
           public void write(JsonWriter out, MarketingEventPublicReadResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MarketingEventPublicReadResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MarketingEventPublicReadResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MarketingEventPublicReadResponse
   * @throws IOException if the JSON string is invalid with respect to MarketingEventPublicReadResponse
   */
  public static MarketingEventPublicReadResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MarketingEventPublicReadResponse.class);
  }

  /**
   * Convert an instance of MarketingEventPublicReadResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

