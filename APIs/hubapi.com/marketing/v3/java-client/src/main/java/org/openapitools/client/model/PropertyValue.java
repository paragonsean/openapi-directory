/*
 * Marketing Events
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PropertyValue
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:32.104131-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PropertyValue {
  public static final String SERIALIZED_NAME_IS_LARGE_VALUE = "isLargeValue";
  @SerializedName(SERIALIZED_NAME_IS_LARGE_VALUE)
  private Boolean isLargeValue;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERSISTENCE_TIMESTAMP = "persistenceTimestamp";
  @SerializedName(SERIALIZED_NAME_PERSISTENCE_TIMESTAMP)
  private Long persistenceTimestamp;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_SELECTED_BY_USER = "selectedByUser";
  @SerializedName(SERIALIZED_NAME_SELECTED_BY_USER)
  private Boolean selectedByUser;

  public static final String SERIALIZED_NAME_SELECTED_BY_USER_TIMESTAMP = "selectedByUserTimestamp";
  @SerializedName(SERIALIZED_NAME_SELECTED_BY_USER_TIMESTAMP)
  private Long selectedByUserTimestamp;

  /**
   * 
   */
  @JsonAdapter(SourceEnum.Adapter.class)
  public enum SourceEnum {
    IMPORT("IMPORT"),
    
    API("API"),
    
    FORM("FORM"),
    
    ANALYTICS("ANALYTICS"),
    
    MIGRATION("MIGRATION"),
    
    SALESFORCE("SALESFORCE"),
    
    INTEGRATION("INTEGRATION"),
    
    CONTACTS_WEB("CONTACTS_WEB"),
    
    WAL_INCREMENTAL("WAL_INCREMENTAL"),
    
    TASK("TASK"),
    
    EMAIL("EMAIL"),
    
    WORKFLOWS("WORKFLOWS"),
    
    CALCULATED("CALCULATED"),
    
    SOCIAL("SOCIAL"),
    
    BATCH_UPDATE("BATCH_UPDATE"),
    
    SIGNALS("SIGNALS"),
    
    BIDEN("BIDEN"),
    
    DEFAULT("DEFAULT"),
    
    COMPANIES("COMPANIES"),
    
    DEALS("DEALS"),
    
    ASSISTS("ASSISTS"),
    
    PRESENTATIONS("PRESENTATIONS"),
    
    TALLY("TALLY"),
    
    SIDEKICK("SIDEKICK"),
    
    CRM_UI("CRM_UI"),
    
    MERGE_CONTACTS("MERGE_CONTACTS"),
    
    PORTAL_USER_ASSOCIATOR("PORTAL_USER_ASSOCIATOR"),
    
    INTEGRATIONS_PLATFORM("INTEGRATIONS_PLATFORM"),
    
    BCC_TO_CRM("BCC_TO_CRM"),
    
    FORWARD_TO_CRM("FORWARD_TO_CRM"),
    
    ENGAGEMENTS("ENGAGEMENTS"),
    
    SALES("SALES"),
    
    HEISENBERG("HEISENBERG"),
    
    LEADIN("LEADIN"),
    
    GMAIL_INTEGRATION("GMAIL_INTEGRATION"),
    
    ACADEMY("ACADEMY"),
    
    SALES_MESSAGES("SALES_MESSAGES"),
    
    AVATARS_SERVICE("AVATARS_SERVICE"),
    
    MERGE_COMPANIES("MERGE_COMPANIES"),
    
    SEQUENCES("SEQUENCES"),
    
    COMPANY_FAMILIES("COMPANY_FAMILIES"),
    
    MOBILE_IOS("MOBILE_IOS"),
    
    MOBILE_ANDROID("MOBILE_ANDROID"),
    
    CONTACTS("CONTACTS"),
    
    ASSOCIATIONS("ASSOCIATIONS"),
    
    EXTENSION("EXTENSION"),
    
    SUCCESS("SUCCESS"),
    
    BOT("BOT"),
    
    INTEGRATIONS_SYNC("INTEGRATIONS_SYNC"),
    
    AUTOMATION_PLATFORM("AUTOMATION_PLATFORM"),
    
    CONVERSATIONS("CONVERSATIONS"),
    
    EMAIL_INTEGRATION("EMAIL_INTEGRATION"),
    
    CONTENT_MEMBERSHIP("CONTENT_MEMBERSHIP"),
    
    QUOTES("QUOTES"),
    
    BET_ASSIGNMENT("BET_ASSIGNMENT"),
    
    QUOTAS("QUOTAS"),
    
    BET_CRM_CONNECTOR("BET_CRM_CONNECTOR"),
    
    MEETINGS("MEETINGS"),
    
    MERGE_OBJECTS("MERGE_OBJECTS"),
    
    RECYCLING_BIN("RECYCLING_BIN"),
    
    ADS("ADS"),
    
    AI_GROUP("AI_GROUP"),
    
    COMMUNICATOR("COMMUNICATOR"),
    
    SETTINGS("SETTINGS"),
    
    PROPERTY_SETTINGS("PROPERTY_SETTINGS"),
    
    PIPELINE_SETTINGS("PIPELINE_SETTINGS"),
    
    COMPANY_INSIGHTS("COMPANY_INSIGHTS"),
    
    BEHAVIORAL_EVENTS("BEHAVIORAL_EVENTS"),
    
    PAYMENTS("PAYMENTS"),
    
    GOALS("GOALS"),
    
    PORTAL_OBJECT_SYNC("PORTAL_OBJECT_SYNC"),
    
    APPROVALS("APPROVALS"),
    
    FILE_MANAGER("FILE_MANAGER"),
    
    MARKETPLACE("MARKETPLACE"),
    
    INTERNAL_PROCESSING("INTERNAL_PROCESSING"),
    
    FORECASTING("FORECASTING"),
    
    SLACK_INTEGRATION("SLACK_INTEGRATION"),
    
    CRM_UI_BULK_ACTION("CRM_UI_BULK_ACTION"),
    
    WORKFLOW_CONTACT_DELETE_ACTION("WORKFLOW_CONTACT_DELETE_ACTION");

    private String value;

    SourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceEnum fromValue(String value) {
      for (SourceEnum b : SourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private SourceEnum source;

  public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private String sourceId;

  public static final String SERIALIZED_NAME_SOURCE_LABEL = "sourceLabel";
  @SerializedName(SERIALIZED_NAME_SOURCE_LABEL)
  private String sourceLabel;

  public static final String SERIALIZED_NAME_SOURCE_METADATA = "sourceMetadata";
  @SerializedName(SERIALIZED_NAME_SOURCE_METADATA)
  private String sourceMetadata;

  public static final String SERIALIZED_NAME_SOURCE_VID = "sourceVid";
  @SerializedName(SERIALIZED_NAME_SOURCE_VID)
  private List<Long> sourceVid = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Long timestamp;

  public static final String SERIALIZED_NAME_UPDATED_BY_USER_ID = "updatedByUserId";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY_USER_ID)
  private Integer updatedByUserId;

  public static final String SERIALIZED_NAME_USE_TIMESTAMP_AS_PERSISTENCE_TIMESTAMP = "useTimestampAsPersistenceTimestamp";
  @SerializedName(SERIALIZED_NAME_USE_TIMESTAMP_AS_PERSISTENCE_TIMESTAMP)
  private Boolean useTimestampAsPersistenceTimestamp;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public PropertyValue() {
  }

  public PropertyValue isLargeValue(Boolean isLargeValue) {
    this.isLargeValue = isLargeValue;
    return this;
  }

  /**
   * Get isLargeValue
   * @return isLargeValue
   */
  @javax.annotation.Nullable
  public Boolean getIsLargeValue() {
    return isLargeValue;
  }

  public void setIsLargeValue(Boolean isLargeValue) {
    this.isLargeValue = isLargeValue;
  }


  public PropertyValue name(String name) {
    this.name = name;
    return this;
  }

  /**
   * 
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PropertyValue persistenceTimestamp(Long persistenceTimestamp) {
    this.persistenceTimestamp = persistenceTimestamp;
    return this;
  }

  /**
   * Get persistenceTimestamp
   * @return persistenceTimestamp
   */
  @javax.annotation.Nullable
  public Long getPersistenceTimestamp() {
    return persistenceTimestamp;
  }

  public void setPersistenceTimestamp(Long persistenceTimestamp) {
    this.persistenceTimestamp = persistenceTimestamp;
  }


  public PropertyValue requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * 
   * @return requestId
   */
  @javax.annotation.Nonnull
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public PropertyValue selectedByUser(Boolean selectedByUser) {
    this.selectedByUser = selectedByUser;
    return this;
  }

  /**
   * 
   * @return selectedByUser
   */
  @javax.annotation.Nonnull
  public Boolean getSelectedByUser() {
    return selectedByUser;
  }

  public void setSelectedByUser(Boolean selectedByUser) {
    this.selectedByUser = selectedByUser;
  }


  public PropertyValue selectedByUserTimestamp(Long selectedByUserTimestamp) {
    this.selectedByUserTimestamp = selectedByUserTimestamp;
    return this;
  }

  /**
   * 
   * @return selectedByUserTimestamp
   */
  @javax.annotation.Nonnull
  public Long getSelectedByUserTimestamp() {
    return selectedByUserTimestamp;
  }

  public void setSelectedByUserTimestamp(Long selectedByUserTimestamp) {
    this.selectedByUserTimestamp = selectedByUserTimestamp;
  }


  public PropertyValue source(SourceEnum source) {
    this.source = source;
    return this;
  }

  /**
   * 
   * @return source
   */
  @javax.annotation.Nonnull
  public SourceEnum getSource() {
    return source;
  }

  public void setSource(SourceEnum source) {
    this.source = source;
  }


  public PropertyValue sourceId(String sourceId) {
    this.sourceId = sourceId;
    return this;
  }

  /**
   * 
   * @return sourceId
   */
  @javax.annotation.Nonnull
  public String getSourceId() {
    return sourceId;
  }

  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }


  public PropertyValue sourceLabel(String sourceLabel) {
    this.sourceLabel = sourceLabel;
    return this;
  }

  /**
   * 
   * @return sourceLabel
   */
  @javax.annotation.Nonnull
  public String getSourceLabel() {
    return sourceLabel;
  }

  public void setSourceLabel(String sourceLabel) {
    this.sourceLabel = sourceLabel;
  }


  public PropertyValue sourceMetadata(String sourceMetadata) {
    this.sourceMetadata = sourceMetadata;
    return this;
  }

  /**
   * Source metadata encoded as a base64 string. For example: &#x60;ZXhhbXBsZSBzdHJpbmc&#x3D;&#x60;
   * @return sourceMetadata
   */
  @javax.annotation.Nonnull
  public String getSourceMetadata() {
    return sourceMetadata;
  }

  public void setSourceMetadata(String sourceMetadata) {
    this.sourceMetadata = sourceMetadata;
  }


  public PropertyValue sourceVid(List<Long> sourceVid) {
    this.sourceVid = sourceVid;
    return this;
  }

  public PropertyValue addSourceVidItem(Long sourceVidItem) {
    if (this.sourceVid == null) {
      this.sourceVid = new ArrayList<>();
    }
    this.sourceVid.add(sourceVidItem);
    return this;
  }

  /**
   * 
   * @return sourceVid
   */
  @javax.annotation.Nonnull
  public List<Long> getSourceVid() {
    return sourceVid;
  }

  public void setSourceVid(List<Long> sourceVid) {
    this.sourceVid = sourceVid;
  }


  public PropertyValue timestamp(Long timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * 
   * @return timestamp
   */
  @javax.annotation.Nonnull
  public Long getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Long timestamp) {
    this.timestamp = timestamp;
  }


  public PropertyValue updatedByUserId(Integer updatedByUserId) {
    this.updatedByUserId = updatedByUserId;
    return this;
  }

  /**
   * Get updatedByUserId
   * @return updatedByUserId
   */
  @javax.annotation.Nullable
  public Integer getUpdatedByUserId() {
    return updatedByUserId;
  }

  public void setUpdatedByUserId(Integer updatedByUserId) {
    this.updatedByUserId = updatedByUserId;
  }


  public PropertyValue useTimestampAsPersistenceTimestamp(Boolean useTimestampAsPersistenceTimestamp) {
    this.useTimestampAsPersistenceTimestamp = useTimestampAsPersistenceTimestamp;
    return this;
  }

  /**
   * Get useTimestampAsPersistenceTimestamp
   * @return useTimestampAsPersistenceTimestamp
   */
  @javax.annotation.Nullable
  public Boolean getUseTimestampAsPersistenceTimestamp() {
    return useTimestampAsPersistenceTimestamp;
  }

  public void setUseTimestampAsPersistenceTimestamp(Boolean useTimestampAsPersistenceTimestamp) {
    this.useTimestampAsPersistenceTimestamp = useTimestampAsPersistenceTimestamp;
  }


  public PropertyValue value(String value) {
    this.value = value;
    return this;
  }

  /**
   * 
   * @return value
   */
  @javax.annotation.Nonnull
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyValue propertyValue = (PropertyValue) o;
    return Objects.equals(this.isLargeValue, propertyValue.isLargeValue) &&
        Objects.equals(this.name, propertyValue.name) &&
        Objects.equals(this.persistenceTimestamp, propertyValue.persistenceTimestamp) &&
        Objects.equals(this.requestId, propertyValue.requestId) &&
        Objects.equals(this.selectedByUser, propertyValue.selectedByUser) &&
        Objects.equals(this.selectedByUserTimestamp, propertyValue.selectedByUserTimestamp) &&
        Objects.equals(this.source, propertyValue.source) &&
        Objects.equals(this.sourceId, propertyValue.sourceId) &&
        Objects.equals(this.sourceLabel, propertyValue.sourceLabel) &&
        Objects.equals(this.sourceMetadata, propertyValue.sourceMetadata) &&
        Objects.equals(this.sourceVid, propertyValue.sourceVid) &&
        Objects.equals(this.timestamp, propertyValue.timestamp) &&
        Objects.equals(this.updatedByUserId, propertyValue.updatedByUserId) &&
        Objects.equals(this.useTimestampAsPersistenceTimestamp, propertyValue.useTimestampAsPersistenceTimestamp) &&
        Objects.equals(this.value, propertyValue.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isLargeValue, name, persistenceTimestamp, requestId, selectedByUser, selectedByUserTimestamp, source, sourceId, sourceLabel, sourceMetadata, sourceVid, timestamp, updatedByUserId, useTimestampAsPersistenceTimestamp, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyValue {\n");
    sb.append("    isLargeValue: ").append(toIndentedString(isLargeValue)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    persistenceTimestamp: ").append(toIndentedString(persistenceTimestamp)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    selectedByUser: ").append(toIndentedString(selectedByUser)).append("\n");
    sb.append("    selectedByUserTimestamp: ").append(toIndentedString(selectedByUserTimestamp)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    sourceLabel: ").append(toIndentedString(sourceLabel)).append("\n");
    sb.append("    sourceMetadata: ").append(toIndentedString(sourceMetadata)).append("\n");
    sb.append("    sourceVid: ").append(toIndentedString(sourceVid)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    updatedByUserId: ").append(toIndentedString(updatedByUserId)).append("\n");
    sb.append("    useTimestampAsPersistenceTimestamp: ").append(toIndentedString(useTimestampAsPersistenceTimestamp)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isLargeValue");
    openapiFields.add("name");
    openapiFields.add("persistenceTimestamp");
    openapiFields.add("requestId");
    openapiFields.add("selectedByUser");
    openapiFields.add("selectedByUserTimestamp");
    openapiFields.add("source");
    openapiFields.add("sourceId");
    openapiFields.add("sourceLabel");
    openapiFields.add("sourceMetadata");
    openapiFields.add("sourceVid");
    openapiFields.add("timestamp");
    openapiFields.add("updatedByUserId");
    openapiFields.add("useTimestampAsPersistenceTimestamp");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("requestId");
    openapiRequiredFields.add("selectedByUser");
    openapiRequiredFields.add("selectedByUserTimestamp");
    openapiRequiredFields.add("source");
    openapiRequiredFields.add("sourceId");
    openapiRequiredFields.add("sourceLabel");
    openapiRequiredFields.add("sourceMetadata");
    openapiRequiredFields.add("sourceVid");
    openapiRequiredFields.add("timestamp");
    openapiRequiredFields.add("value");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PropertyValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PropertyValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PropertyValue is not found in the empty JSON string", PropertyValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PropertyValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PropertyValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PropertyValue.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      if (!jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      // validate the required field `source`
      SourceEnum.validateJsonElement(jsonObj.get("source"));
      if (!jsonObj.get("sourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceId").toString()));
      }
      if (!jsonObj.get("sourceLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceLabel").toString()));
      }
      if (!jsonObj.get("sourceMetadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceMetadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceMetadata").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("sourceVid") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("sourceVid").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceVid` to be an array in the JSON string but got `%s`", jsonObj.get("sourceVid").toString()));
      }
      if (!jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PropertyValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PropertyValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PropertyValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PropertyValue.class));

       return (TypeAdapter<T>) new TypeAdapter<PropertyValue>() {
           @Override
           public void write(JsonWriter out, PropertyValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PropertyValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PropertyValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PropertyValue
   * @throws IOException if the JSON string is invalid with respect to PropertyValue
   */
  public static PropertyValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PropertyValue.class);
  }

  /**
   * Convert an instance of PropertyValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

