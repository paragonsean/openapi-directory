/*
 * Marketing Events
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BatchInputMarketingEventEmailSubscriber;
import org.openapitools.client.model.BatchInputMarketingEventSubscriber;
import org.openapitools.client.model.BatchResponseSubscriberEmailResponse;
import org.openapitools.client.model.BatchResponseSubscriberVidResponse;
import org.openapitools.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AttendanceSubscriberStateChangesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AttendanceSubscriberStateChangesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AttendanceSubscriberStateChangesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreate
     * @param externalEventId The id of the marketing event (required)
     * @param subscriberState The new subscriber state for the HubSpot contacts and the specified marketing event. For example: &#39;register&#39;, &#39;attend&#39; or &#39;cancel&#39;. (required)
     * @param batchInputMarketingEventSubscriber The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended. (required)
     * @param externalAccountId The account id associated with the marketing event (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreateCall(String externalEventId, String subscriberState, BatchInputMarketingEventSubscriber batchInputMarketingEventSubscriber, String externalAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchInputMarketingEventSubscriber;

        // create path and map variables
        String localVarPath = "/marketing/v3/marketing-events/attendance/{externalEventId}/{subscriberState}/create"
            .replace("{" + "externalEventId" + "}", localVarApiClient.escapeString(externalEventId.toString()))
            .replace("{" + "subscriberState" + "}", localVarApiClient.escapeString(subscriberState.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (externalAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("externalAccountId", externalAccountId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreateValidateBeforeCall(String externalEventId, String subscriberState, BatchInputMarketingEventSubscriber batchInputMarketingEventSubscriber, String externalAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalEventId' is set
        if (externalEventId == null) {
            throw new ApiException("Missing the required parameter 'externalEventId' when calling postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreate(Async)");
        }

        // verify the required parameter 'subscriberState' is set
        if (subscriberState == null) {
            throw new ApiException("Missing the required parameter 'subscriberState' when calling postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreate(Async)");
        }

        // verify the required parameter 'batchInputMarketingEventSubscriber' is set
        if (batchInputMarketingEventSubscriber == null) {
            throw new ApiException("Missing the required parameter 'batchInputMarketingEventSubscriber' when calling postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreate(Async)");
        }

        return postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreateCall(externalEventId, subscriberState, batchInputMarketingEventSubscriber, externalAccountId, _callback);

    }

    /**
     * Record
     * Record a subscription state between multiple HubSpot contacts and a marketing event, using HubSpot contact ids.
     * @param externalEventId The id of the marketing event (required)
     * @param subscriberState The new subscriber state for the HubSpot contacts and the specified marketing event. For example: &#39;register&#39;, &#39;attend&#39; or &#39;cancel&#39;. (required)
     * @param batchInputMarketingEventSubscriber The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended. (required)
     * @param externalAccountId The account id associated with the marketing event (optional)
     * @return BatchResponseSubscriberVidResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public BatchResponseSubscriberVidResponse postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreate(String externalEventId, String subscriberState, BatchInputMarketingEventSubscriber batchInputMarketingEventSubscriber, String externalAccountId) throws ApiException {
        ApiResponse<BatchResponseSubscriberVidResponse> localVarResp = postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreateWithHttpInfo(externalEventId, subscriberState, batchInputMarketingEventSubscriber, externalAccountId);
        return localVarResp.getData();
    }

    /**
     * Record
     * Record a subscription state between multiple HubSpot contacts and a marketing event, using HubSpot contact ids.
     * @param externalEventId The id of the marketing event (required)
     * @param subscriberState The new subscriber state for the HubSpot contacts and the specified marketing event. For example: &#39;register&#39;, &#39;attend&#39; or &#39;cancel&#39;. (required)
     * @param batchInputMarketingEventSubscriber The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended. (required)
     * @param externalAccountId The account id associated with the marketing event (optional)
     * @return ApiResponse&lt;BatchResponseSubscriberVidResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchResponseSubscriberVidResponse> postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreateWithHttpInfo(String externalEventId, String subscriberState, BatchInputMarketingEventSubscriber batchInputMarketingEventSubscriber, String externalAccountId) throws ApiException {
        okhttp3.Call localVarCall = postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreateValidateBeforeCall(externalEventId, subscriberState, batchInputMarketingEventSubscriber, externalAccountId, null);
        Type localVarReturnType = new TypeToken<BatchResponseSubscriberVidResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Record (asynchronously)
     * Record a subscription state between multiple HubSpot contacts and a marketing event, using HubSpot contact ids.
     * @param externalEventId The id of the marketing event (required)
     * @param subscriberState The new subscriber state for the HubSpot contacts and the specified marketing event. For example: &#39;register&#39;, &#39;attend&#39; or &#39;cancel&#39;. (required)
     * @param batchInputMarketingEventSubscriber The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended. (required)
     * @param externalAccountId The account id associated with the marketing event (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreateAsync(String externalEventId, String subscriberState, BatchInputMarketingEventSubscriber batchInputMarketingEventSubscriber, String externalAccountId, final ApiCallback<BatchResponseSubscriberVidResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreateValidateBeforeCall(externalEventId, subscriberState, batchInputMarketingEventSubscriber, externalAccountId, _callback);
        Type localVarReturnType = new TypeToken<BatchResponseSubscriberVidResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmail
     * @param externalEventId The id of the marketing event (required)
     * @param subscriberState The new subscriber state for the HubSpot contacts and the specified marketing event. For example: &#39;register&#39;, &#39;attend&#39; or &#39;cancel&#39;. (required)
     * @param batchInputMarketingEventEmailSubscriber The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended. (required)
     * @param externalAccountId The account id associated with the marketing event (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmailCall(String externalEventId, String subscriberState, BatchInputMarketingEventEmailSubscriber batchInputMarketingEventEmailSubscriber, String externalAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchInputMarketingEventEmailSubscriber;

        // create path and map variables
        String localVarPath = "/marketing/v3/marketing-events/attendance/{externalEventId}/{subscriberState}/email-create"
            .replace("{" + "externalEventId" + "}", localVarApiClient.escapeString(externalEventId.toString()))
            .replace("{" + "subscriberState" + "}", localVarApiClient.escapeString(subscriberState.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (externalAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("externalAccountId", externalAccountId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmailValidateBeforeCall(String externalEventId, String subscriberState, BatchInputMarketingEventEmailSubscriber batchInputMarketingEventEmailSubscriber, String externalAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalEventId' is set
        if (externalEventId == null) {
            throw new ApiException("Missing the required parameter 'externalEventId' when calling postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmail(Async)");
        }

        // verify the required parameter 'subscriberState' is set
        if (subscriberState == null) {
            throw new ApiException("Missing the required parameter 'subscriberState' when calling postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmail(Async)");
        }

        // verify the required parameter 'batchInputMarketingEventEmailSubscriber' is set
        if (batchInputMarketingEventEmailSubscriber == null) {
            throw new ApiException("Missing the required parameter 'batchInputMarketingEventEmailSubscriber' when calling postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmail(Async)");
        }

        return postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmailCall(externalEventId, subscriberState, batchInputMarketingEventEmailSubscriber, externalAccountId, _callback);

    }

    /**
     * Record
     * Record a subscription state between multiple HubSpot contacts and a marketing event, using contact email addresses. If contact is not present it will be automatically created.
     * @param externalEventId The id of the marketing event (required)
     * @param subscriberState The new subscriber state for the HubSpot contacts and the specified marketing event. For example: &#39;register&#39;, &#39;attend&#39; or &#39;cancel&#39;. (required)
     * @param batchInputMarketingEventEmailSubscriber The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended. (required)
     * @param externalAccountId The account id associated with the marketing event (optional)
     * @return BatchResponseSubscriberEmailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public BatchResponseSubscriberEmailResponse postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmail(String externalEventId, String subscriberState, BatchInputMarketingEventEmailSubscriber batchInputMarketingEventEmailSubscriber, String externalAccountId) throws ApiException {
        ApiResponse<BatchResponseSubscriberEmailResponse> localVarResp = postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmailWithHttpInfo(externalEventId, subscriberState, batchInputMarketingEventEmailSubscriber, externalAccountId);
        return localVarResp.getData();
    }

    /**
     * Record
     * Record a subscription state between multiple HubSpot contacts and a marketing event, using contact email addresses. If contact is not present it will be automatically created.
     * @param externalEventId The id of the marketing event (required)
     * @param subscriberState The new subscriber state for the HubSpot contacts and the specified marketing event. For example: &#39;register&#39;, &#39;attend&#39; or &#39;cancel&#39;. (required)
     * @param batchInputMarketingEventEmailSubscriber The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended. (required)
     * @param externalAccountId The account id associated with the marketing event (optional)
     * @return ApiResponse&lt;BatchResponseSubscriberEmailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchResponseSubscriberEmailResponse> postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmailWithHttpInfo(String externalEventId, String subscriberState, BatchInputMarketingEventEmailSubscriber batchInputMarketingEventEmailSubscriber, String externalAccountId) throws ApiException {
        okhttp3.Call localVarCall = postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmailValidateBeforeCall(externalEventId, subscriberState, batchInputMarketingEventEmailSubscriber, externalAccountId, null);
        Type localVarReturnType = new TypeToken<BatchResponseSubscriberEmailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Record (asynchronously)
     * Record a subscription state between multiple HubSpot contacts and a marketing event, using contact email addresses. If contact is not present it will be automatically created.
     * @param externalEventId The id of the marketing event (required)
     * @param subscriberState The new subscriber state for the HubSpot contacts and the specified marketing event. For example: &#39;register&#39;, &#39;attend&#39; or &#39;cancel&#39;. (required)
     * @param batchInputMarketingEventEmailSubscriber The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended. (required)
     * @param externalAccountId The account id associated with the marketing event (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmailAsync(String externalEventId, String subscriberState, BatchInputMarketingEventEmailSubscriber batchInputMarketingEventEmailSubscriber, String externalAccountId, final ApiCallback<BatchResponseSubscriberEmailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmailValidateBeforeCall(externalEventId, subscriberState, batchInputMarketingEventEmailSubscriber, externalAccountId, _callback);
        Type localVarReturnType = new TypeToken<BatchResponseSubscriberEmailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
