/*
 * Marketing Events
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MarketingEventEmailSubscriber
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:32.104131-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MarketingEventEmailSubscriber {
  public static final String SERIALIZED_NAME_CONTACT_PROPERTIES = "contactProperties";
  @SerializedName(SERIALIZED_NAME_CONTACT_PROPERTIES)
  private Map<String, String> contactProperties = new HashMap<>();

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_INTERACTION_DATE_TIME = "interactionDateTime";
  @SerializedName(SERIALIZED_NAME_INTERACTION_DATE_TIME)
  private Long interactionDateTime;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, String> properties = new HashMap<>();

  public MarketingEventEmailSubscriber() {
  }

  public MarketingEventEmailSubscriber contactProperties(Map<String, String> contactProperties) {
    this.contactProperties = contactProperties;
    return this;
  }

  public MarketingEventEmailSubscriber putContactPropertiesItem(String key, String contactPropertiesItem) {
    if (this.contactProperties == null) {
      this.contactProperties = new HashMap<>();
    }
    this.contactProperties.put(key, contactPropertiesItem);
    return this;
  }

  /**
   * Get contactProperties
   * @return contactProperties
   */
  @javax.annotation.Nullable
  public Map<String, String> getContactProperties() {
    return contactProperties;
  }

  public void setContactProperties(Map<String, String> contactProperties) {
    this.contactProperties = contactProperties;
  }


  public MarketingEventEmailSubscriber email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email address of the contact in HubSpot to associate with the event.
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public MarketingEventEmailSubscriber interactionDateTime(Long interactionDateTime) {
    this.interactionDateTime = interactionDateTime;
    return this;
  }

  /**
   * The date and time at which the contact subscribed to the event.
   * @return interactionDateTime
   */
  @javax.annotation.Nonnull
  public Long getInteractionDateTime() {
    return interactionDateTime;
  }

  public void setInteractionDateTime(Long interactionDateTime) {
    this.interactionDateTime = interactionDateTime;
  }


  public MarketingEventEmailSubscriber properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public MarketingEventEmailSubscriber putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * Get properties
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketingEventEmailSubscriber marketingEventEmailSubscriber = (MarketingEventEmailSubscriber) o;
    return Objects.equals(this.contactProperties, marketingEventEmailSubscriber.contactProperties) &&
        Objects.equals(this.email, marketingEventEmailSubscriber.email) &&
        Objects.equals(this.interactionDateTime, marketingEventEmailSubscriber.interactionDateTime) &&
        Objects.equals(this.properties, marketingEventEmailSubscriber.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactProperties, email, interactionDateTime, properties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketingEventEmailSubscriber {\n");
    sb.append("    contactProperties: ").append(toIndentedString(contactProperties)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    interactionDateTime: ").append(toIndentedString(interactionDateTime)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contactProperties");
    openapiFields.add("email");
    openapiFields.add("interactionDateTime");
    openapiFields.add("properties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("interactionDateTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MarketingEventEmailSubscriber
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MarketingEventEmailSubscriber.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MarketingEventEmailSubscriber is not found in the empty JSON string", MarketingEventEmailSubscriber.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MarketingEventEmailSubscriber.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MarketingEventEmailSubscriber` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MarketingEventEmailSubscriber.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MarketingEventEmailSubscriber.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MarketingEventEmailSubscriber' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MarketingEventEmailSubscriber> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MarketingEventEmailSubscriber.class));

       return (TypeAdapter<T>) new TypeAdapter<MarketingEventEmailSubscriber>() {
           @Override
           public void write(JsonWriter out, MarketingEventEmailSubscriber value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MarketingEventEmailSubscriber read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MarketingEventEmailSubscriber given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MarketingEventEmailSubscriber
   * @throws IOException if the JSON string is invalid with respect to MarketingEventEmailSubscriber
   */
  public static MarketingEventEmailSubscriber fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MarketingEventEmailSubscriber.class);
  }

  /**
   * Convert an instance of MarketingEventEmailSubscriber to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

