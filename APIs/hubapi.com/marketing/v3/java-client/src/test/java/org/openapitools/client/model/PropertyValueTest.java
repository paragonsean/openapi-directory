/*
 * Marketing Events
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for PropertyValue
 */
public class PropertyValueTest {
    private final PropertyValue model = new PropertyValue();

    /**
     * Model tests for PropertyValue
     */
    @Test
    public void testPropertyValue() {
        // TODO: test PropertyValue
    }

    /**
     * Test the property 'isLargeValue'
     */
    @Test
    public void isLargeValueTest() {
        // TODO: test isLargeValue
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'persistenceTimestamp'
     */
    @Test
    public void persistenceTimestampTest() {
        // TODO: test persistenceTimestamp
    }

    /**
     * Test the property 'requestId'
     */
    @Test
    public void requestIdTest() {
        // TODO: test requestId
    }

    /**
     * Test the property 'selectedByUser'
     */
    @Test
    public void selectedByUserTest() {
        // TODO: test selectedByUser
    }

    /**
     * Test the property 'selectedByUserTimestamp'
     */
    @Test
    public void selectedByUserTimestampTest() {
        // TODO: test selectedByUserTimestamp
    }

    /**
     * Test the property 'source'
     */
    @Test
    public void sourceTest() {
        // TODO: test source
    }

    /**
     * Test the property 'sourceId'
     */
    @Test
    public void sourceIdTest() {
        // TODO: test sourceId
    }

    /**
     * Test the property 'sourceLabel'
     */
    @Test
    public void sourceLabelTest() {
        // TODO: test sourceLabel
    }

    /**
     * Test the property 'sourceMetadata'
     */
    @Test
    public void sourceMetadataTest() {
        // TODO: test sourceMetadata
    }

    /**
     * Test the property 'sourceVid'
     */
    @Test
    public void sourceVidTest() {
        // TODO: test sourceVid
    }

    /**
     * Test the property 'timestamp'
     */
    @Test
    public void timestampTest() {
        // TODO: test timestamp
    }

    /**
     * Test the property 'updatedByUserId'
     */
    @Test
    public void updatedByUserIdTest() {
        // TODO: test updatedByUserId
    }

    /**
     * Test the property 'useTimestampAsPersistenceTimestamp'
     */
    @Test
    public void useTimestampAsPersistenceTimestampTest() {
        // TODO: test useTimestampAsPersistenceTimestamp
    }

    /**
     * Test the property 'value'
     */
    @Test
    public void valueTest() {
        // TODO: test value
    }

}
