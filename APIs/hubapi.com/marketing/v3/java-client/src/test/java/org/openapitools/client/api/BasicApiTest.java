/*
 * Marketing Events
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.MarketingEventCreateRequestParams;
import org.openapitools.client.model.MarketingEventDefaultResponse;
import org.openapitools.client.model.MarketingEventPublicDefaultResponse;
import org.openapitools.client.model.MarketingEventPublicReadResponse;
import org.openapitools.client.model.MarketingEventUpdateRequestParams;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BasicApi
 */
@Disabled
public class BasicApiTest {

    private final BasicApi api = new BasicApi();

    /**
     * Delete a marketing event
     *
     * Deletes an existing Marketing Event with the specified id, if one exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMarketingV3MarketingEventsEventsExternalEventIdArchiveTest() throws ApiException {
        String externalEventId = null;
        String externalAccountId = null;
        api.deleteMarketingV3MarketingEventsEventsExternalEventIdArchive(externalEventId, externalAccountId);
        // TODO: test validations
    }

    /**
     * Get a marketing event
     *
     * Returns the details of the Marketing Event with the specified id, if one exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMarketingV3MarketingEventsEventsExternalEventIdGetByIdTest() throws ApiException {
        String externalEventId = null;
        String externalAccountId = null;
        MarketingEventPublicReadResponse response = api.getMarketingV3MarketingEventsEventsExternalEventIdGetById(externalEventId, externalAccountId);
        // TODO: test validations
    }

    /**
     * Update a marketing event
     *
     * Updates an existing Marketing Event with the specified id, if one exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchMarketingV3MarketingEventsEventsExternalEventIdUpdateTest() throws ApiException {
        String externalEventId = null;
        String externalAccountId = null;
        MarketingEventUpdateRequestParams marketingEventUpdateRequestParams = null;
        MarketingEventPublicDefaultResponse response = api.patchMarketingV3MarketingEventsEventsExternalEventIdUpdate(externalEventId, externalAccountId, marketingEventUpdateRequestParams);
        // TODO: test validations
    }

    /**
     * Create a marketing event
     *
     * Creates a new marketing event in HubSpot
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postMarketingV3MarketingEventsEventsCreateTest() throws ApiException {
        MarketingEventCreateRequestParams marketingEventCreateRequestParams = null;
        MarketingEventDefaultResponse response = api.postMarketingV3MarketingEventsEventsCreate(marketingEventCreateRequestParams);
        // TODO: test validations
    }

    /**
     * Mark a marketing event as cancelled
     *
     * Mark a marketing event as cancelled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelTest() throws ApiException {
        String externalEventId = null;
        String externalAccountId = null;
        MarketingEventDefaultResponse response = api.postMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel(externalEventId, externalAccountId);
        // TODO: test validations
    }

    /**
     * Create or update a marketing event
     *
     * Upsets a Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putMarketingV3MarketingEventsEventsExternalEventIdReplaceTest() throws ApiException {
        String externalEventId = null;
        MarketingEventCreateRequestParams marketingEventCreateRequestParams = null;
        MarketingEventPublicDefaultResponse response = api.putMarketingV3MarketingEventsEventsExternalEventIdReplace(externalEventId, marketingEventCreateRequestParams);
        // TODO: test validations
    }

}
