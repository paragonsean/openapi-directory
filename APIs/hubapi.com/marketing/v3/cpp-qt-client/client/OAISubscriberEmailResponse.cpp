/**
 * Marketing Events
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriberEmailResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriberEmailResponse::OAISubscriberEmailResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriberEmailResponse::OAISubscriberEmailResponse() {
    this->initializeModel();
}

OAISubscriberEmailResponse::~OAISubscriberEmailResponse() {}

void OAISubscriberEmailResponse::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_vid_isSet = false;
    m_vid_isValid = false;
}

void OAISubscriberEmailResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriberEmailResponse::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_vid_isValid = ::OpenAPI::fromJsonValue(m_vid, json[QString("vid")]);
    m_vid_isSet = !json[QString("vid")].isNull() && m_vid_isValid;
}

QString OAISubscriberEmailResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriberEmailResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_vid_isSet) {
        obj.insert(QString("vid"), ::OpenAPI::toJsonValue(m_vid));
    }
    return obj;
}

QString OAISubscriberEmailResponse::getEmail() const {
    return m_email;
}
void OAISubscriberEmailResponse::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAISubscriberEmailResponse::is_email_Set() const{
    return m_email_isSet;
}

bool OAISubscriberEmailResponse::is_email_Valid() const{
    return m_email_isValid;
}

qint32 OAISubscriberEmailResponse::getVid() const {
    return m_vid;
}
void OAISubscriberEmailResponse::setVid(const qint32 &vid) {
    m_vid = vid;
    m_vid_isSet = true;
}

bool OAISubscriberEmailResponse::is_vid_Set() const{
    return m_vid_isSet;
}

bool OAISubscriberEmailResponse::is_vid_Valid() const{
    return m_vid_isValid;
}

bool OAISubscriberEmailResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriberEmailResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && m_vid_isValid && true;
}

} // namespace OpenAPI
