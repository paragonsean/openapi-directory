/**
 * Marketing Events
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchResponseSubscriberEmailResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchResponseSubscriberEmailResponse::OAIBatchResponseSubscriberEmailResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchResponseSubscriberEmailResponse::OAIBatchResponseSubscriberEmailResponse() {
    this->initializeModel();
}

OAIBatchResponseSubscriberEmailResponse::~OAIBatchResponseSubscriberEmailResponse() {}

void OAIBatchResponseSubscriberEmailResponse::initializeModel() {

    m_completed_at_isSet = false;
    m_completed_at_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_num_errors_isSet = false;
    m_num_errors_isValid = false;

    m_requested_at_isSet = false;
    m_requested_at_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIBatchResponseSubscriberEmailResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchResponseSubscriberEmailResponse::fromJsonObject(QJsonObject json) {

    m_completed_at_isValid = ::OpenAPI::fromJsonValue(m_completed_at, json[QString("completedAt")]);
    m_completed_at_isSet = !json[QString("completedAt")].isNull() && m_completed_at_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_num_errors_isValid = ::OpenAPI::fromJsonValue(m_num_errors, json[QString("numErrors")]);
    m_num_errors_isSet = !json[QString("numErrors")].isNull() && m_num_errors_isValid;

    m_requested_at_isValid = ::OpenAPI::fromJsonValue(m_requested_at, json[QString("requestedAt")]);
    m_requested_at_isSet = !json[QString("requestedAt")].isNull() && m_requested_at_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("startedAt")]);
    m_started_at_isSet = !json[QString("startedAt")].isNull() && m_started_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIBatchResponseSubscriberEmailResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchResponseSubscriberEmailResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_completed_at_isSet) {
        obj.insert(QString("completedAt"), ::OpenAPI::toJsonValue(m_completed_at));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_num_errors_isSet) {
        obj.insert(QString("numErrors"), ::OpenAPI::toJsonValue(m_num_errors));
    }
    if (m_requested_at_isSet) {
        obj.insert(QString("requestedAt"), ::OpenAPI::toJsonValue(m_requested_at));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("startedAt"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QDateTime OAIBatchResponseSubscriberEmailResponse::getCompletedAt() const {
    return m_completed_at;
}
void OAIBatchResponseSubscriberEmailResponse::setCompletedAt(const QDateTime &completed_at) {
    m_completed_at = completed_at;
    m_completed_at_isSet = true;
}

bool OAIBatchResponseSubscriberEmailResponse::is_completed_at_Set() const{
    return m_completed_at_isSet;
}

bool OAIBatchResponseSubscriberEmailResponse::is_completed_at_Valid() const{
    return m_completed_at_isValid;
}

QList<OAIStandardError> OAIBatchResponseSubscriberEmailResponse::getErrors() const {
    return m_errors;
}
void OAIBatchResponseSubscriberEmailResponse::setErrors(const QList<OAIStandardError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIBatchResponseSubscriberEmailResponse::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIBatchResponseSubscriberEmailResponse::is_errors_Valid() const{
    return m_errors_isValid;
}

QMap<QString, QString> OAIBatchResponseSubscriberEmailResponse::getLinks() const {
    return m_links;
}
void OAIBatchResponseSubscriberEmailResponse::setLinks(const QMap<QString, QString> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIBatchResponseSubscriberEmailResponse::is_links_Set() const{
    return m_links_isSet;
}

bool OAIBatchResponseSubscriberEmailResponse::is_links_Valid() const{
    return m_links_isValid;
}

qint32 OAIBatchResponseSubscriberEmailResponse::getNumErrors() const {
    return m_num_errors;
}
void OAIBatchResponseSubscriberEmailResponse::setNumErrors(const qint32 &num_errors) {
    m_num_errors = num_errors;
    m_num_errors_isSet = true;
}

bool OAIBatchResponseSubscriberEmailResponse::is_num_errors_Set() const{
    return m_num_errors_isSet;
}

bool OAIBatchResponseSubscriberEmailResponse::is_num_errors_Valid() const{
    return m_num_errors_isValid;
}

QDateTime OAIBatchResponseSubscriberEmailResponse::getRequestedAt() const {
    return m_requested_at;
}
void OAIBatchResponseSubscriberEmailResponse::setRequestedAt(const QDateTime &requested_at) {
    m_requested_at = requested_at;
    m_requested_at_isSet = true;
}

bool OAIBatchResponseSubscriberEmailResponse::is_requested_at_Set() const{
    return m_requested_at_isSet;
}

bool OAIBatchResponseSubscriberEmailResponse::is_requested_at_Valid() const{
    return m_requested_at_isValid;
}

QList<OAISubscriberEmailResponse> OAIBatchResponseSubscriberEmailResponse::getResults() const {
    return m_results;
}
void OAIBatchResponseSubscriberEmailResponse::setResults(const QList<OAISubscriberEmailResponse> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIBatchResponseSubscriberEmailResponse::is_results_Set() const{
    return m_results_isSet;
}

bool OAIBatchResponseSubscriberEmailResponse::is_results_Valid() const{
    return m_results_isValid;
}

QDateTime OAIBatchResponseSubscriberEmailResponse::getStartedAt() const {
    return m_started_at;
}
void OAIBatchResponseSubscriberEmailResponse::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIBatchResponseSubscriberEmailResponse::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIBatchResponseSubscriberEmailResponse::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QString OAIBatchResponseSubscriberEmailResponse::getStatus() const {
    return m_status;
}
void OAIBatchResponseSubscriberEmailResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBatchResponseSubscriberEmailResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBatchResponseSubscriberEmailResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIBatchResponseSubscriberEmailResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchResponseSubscriberEmailResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_completed_at_isValid && m_results_isValid && m_started_at_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
