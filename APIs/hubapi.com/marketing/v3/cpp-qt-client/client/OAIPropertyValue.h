/**
 * Marketing Events
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPropertyValue.h
 *
 * 
 */

#ifndef OAIPropertyValue_H
#define OAIPropertyValue_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPropertyValue : public OAIObject {
public:
    OAIPropertyValue();
    OAIPropertyValue(QString json);
    ~OAIPropertyValue() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isIsLargeValue() const;
    void setIsLargeValue(const bool &is_large_value);
    bool is_is_large_value_Set() const;
    bool is_is_large_value_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint64 getPersistenceTimestamp() const;
    void setPersistenceTimestamp(const qint64 &persistence_timestamp);
    bool is_persistence_timestamp_Set() const;
    bool is_persistence_timestamp_Valid() const;

    QString getRequestId() const;
    void setRequestId(const QString &request_id);
    bool is_request_id_Set() const;
    bool is_request_id_Valid() const;

    bool isSelectedByUser() const;
    void setSelectedByUser(const bool &selected_by_user);
    bool is_selected_by_user_Set() const;
    bool is_selected_by_user_Valid() const;

    qint64 getSelectedByUserTimestamp() const;
    void setSelectedByUserTimestamp(const qint64 &selected_by_user_timestamp);
    bool is_selected_by_user_timestamp_Set() const;
    bool is_selected_by_user_timestamp_Valid() const;

    QString getSource() const;
    void setSource(const QString &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    QString getSourceId() const;
    void setSourceId(const QString &source_id);
    bool is_source_id_Set() const;
    bool is_source_id_Valid() const;

    QString getSourceLabel() const;
    void setSourceLabel(const QString &source_label);
    bool is_source_label_Set() const;
    bool is_source_label_Valid() const;

    QString getSourceMetadata() const;
    void setSourceMetadata(const QString &source_metadata);
    bool is_source_metadata_Set() const;
    bool is_source_metadata_Valid() const;

    QList<qint64> getSourceVid() const;
    void setSourceVid(const QList<qint64> &source_vid);
    bool is_source_vid_Set() const;
    bool is_source_vid_Valid() const;

    qint64 getTimestamp() const;
    void setTimestamp(const qint64 &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    qint32 getUpdatedByUserId() const;
    void setUpdatedByUserId(const qint32 &updated_by_user_id);
    bool is_updated_by_user_id_Set() const;
    bool is_updated_by_user_id_Valid() const;

    bool isUseTimestampAsPersistenceTimestamp() const;
    void setUseTimestampAsPersistenceTimestamp(const bool &use_timestamp_as_persistence_timestamp);
    bool is_use_timestamp_as_persistence_timestamp_Set() const;
    bool is_use_timestamp_as_persistence_timestamp_Valid() const;

    QString getValue() const;
    void setValue(const QString &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_is_large_value;
    bool m_is_large_value_isSet;
    bool m_is_large_value_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint64 m_persistence_timestamp;
    bool m_persistence_timestamp_isSet;
    bool m_persistence_timestamp_isValid;

    QString m_request_id;
    bool m_request_id_isSet;
    bool m_request_id_isValid;

    bool m_selected_by_user;
    bool m_selected_by_user_isSet;
    bool m_selected_by_user_isValid;

    qint64 m_selected_by_user_timestamp;
    bool m_selected_by_user_timestamp_isSet;
    bool m_selected_by_user_timestamp_isValid;

    QString m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    QString m_source_id;
    bool m_source_id_isSet;
    bool m_source_id_isValid;

    QString m_source_label;
    bool m_source_label_isSet;
    bool m_source_label_isValid;

    QString m_source_metadata;
    bool m_source_metadata_isSet;
    bool m_source_metadata_isValid;

    QList<qint64> m_source_vid;
    bool m_source_vid_isSet;
    bool m_source_vid_isValid;

    qint64 m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    qint32 m_updated_by_user_id;
    bool m_updated_by_user_id_isSet;
    bool m_updated_by_user_id_isValid;

    bool m_use_timestamp_as_persistence_timestamp;
    bool m_use_timestamp_as_persistence_timestamp_isSet;
    bool m_use_timestamp_as_persistence_timestamp_isValid;

    QString m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPropertyValue)

#endif // OAIPropertyValue_H
