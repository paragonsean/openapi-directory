/**
 * Marketing Events
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBasicApi_H
#define OAI_OAIBasicApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIMarketingEventCreateRequestParams.h"
#include "OAIMarketingEventDefaultResponse.h"
#include "OAIMarketingEventPublicDefaultResponse.h"
#include "OAIMarketingEventPublicReadResponse.h"
#include "OAIMarketingEventUpdateRequestParams.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBasicApi : public QObject {
    Q_OBJECT

public:
    OAIBasicApi(const int timeOut = 0);
    ~OAIBasicApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  external_event_id QString [required]
    * @param[in]  external_account_id QString [required]
    */
    virtual void delete_marketing_v3_marketingEvents_events_externalEventIdArchive(const QString &external_event_id, const QString &external_account_id);

    /**
    * @param[in]  external_event_id QString [required]
    * @param[in]  external_account_id QString [required]
    */
    virtual void get_marketing_v3_marketingEvents_events_externalEventIdGetById(const QString &external_event_id, const QString &external_account_id);

    /**
    * @param[in]  external_event_id QString [required]
    * @param[in]  external_account_id QString [required]
    * @param[in]  oai_marketing_event_update_request_params OAIMarketingEventUpdateRequestParams [required]
    */
    virtual void patch_marketing_v3_marketingEvents_events_externalEventIdUpdate(const QString &external_event_id, const QString &external_account_id, const OAIMarketingEventUpdateRequestParams &oai_marketing_event_update_request_params);

    /**
    * @param[in]  oai_marketing_event_create_request_params OAIMarketingEventCreateRequestParams [required]
    */
    virtual void post_marketing_v3_marketingEvents_eventsCreate(const OAIMarketingEventCreateRequestParams &oai_marketing_event_create_request_params);

    /**
    * @param[in]  external_event_id QString [required]
    * @param[in]  external_account_id QString [required]
    */
    virtual void post_marketing_v3_marketingEvents_events_externalEventId_cancelDoCancel(const QString &external_event_id, const QString &external_account_id);

    /**
    * @param[in]  external_event_id QString [required]
    * @param[in]  oai_marketing_event_create_request_params OAIMarketingEventCreateRequestParams [required]
    */
    virtual void put_marketing_v3_marketingEvents_events_externalEventIdReplace(const QString &external_event_id, const OAIMarketingEventCreateRequestParams &oai_marketing_event_create_request_params);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void delete_marketing_v3_marketingEvents_events_externalEventIdArchiveCallback(OAIHttpRequestWorker *worker);
    void get_marketing_v3_marketingEvents_events_externalEventIdGetByIdCallback(OAIHttpRequestWorker *worker);
    void patch_marketing_v3_marketingEvents_events_externalEventIdUpdateCallback(OAIHttpRequestWorker *worker);
    void post_marketing_v3_marketingEvents_eventsCreateCallback(OAIHttpRequestWorker *worker);
    void post_marketing_v3_marketingEvents_events_externalEventId_cancelDoCancelCallback(OAIHttpRequestWorker *worker);
    void put_marketing_v3_marketingEvents_events_externalEventIdReplaceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void delete_marketing_v3_marketingEvents_events_externalEventIdArchiveSignal();
    void get_marketing_v3_marketingEvents_events_externalEventIdGetByIdSignal(OAIMarketingEventPublicReadResponse summary);
    void patch_marketing_v3_marketingEvents_events_externalEventIdUpdateSignal(OAIMarketingEventPublicDefaultResponse summary);
    void post_marketing_v3_marketingEvents_eventsCreateSignal(OAIMarketingEventDefaultResponse summary);
    void post_marketing_v3_marketingEvents_events_externalEventId_cancelDoCancelSignal(OAIMarketingEventDefaultResponse summary);
    void put_marketing_v3_marketingEvents_events_externalEventIdReplaceSignal(OAIMarketingEventPublicDefaultResponse summary);


    void delete_marketing_v3_marketingEvents_events_externalEventIdArchiveSignalFull(OAIHttpRequestWorker *worker);
    void get_marketing_v3_marketingEvents_events_externalEventIdGetByIdSignalFull(OAIHttpRequestWorker *worker, OAIMarketingEventPublicReadResponse summary);
    void patch_marketing_v3_marketingEvents_events_externalEventIdUpdateSignalFull(OAIHttpRequestWorker *worker, OAIMarketingEventPublicDefaultResponse summary);
    void post_marketing_v3_marketingEvents_eventsCreateSignalFull(OAIHttpRequestWorker *worker, OAIMarketingEventDefaultResponse summary);
    void post_marketing_v3_marketingEvents_events_externalEventId_cancelDoCancelSignalFull(OAIHttpRequestWorker *worker, OAIMarketingEventDefaultResponse summary);
    void put_marketing_v3_marketingEvents_events_externalEventIdReplaceSignalFull(OAIHttpRequestWorker *worker, OAIMarketingEventPublicDefaultResponse summary);

    Q_DECL_DEPRECATED_X("Use delete_marketing_v3_marketingEvents_events_externalEventIdArchiveSignalError() instead")
    void delete_marketing_v3_marketingEvents_events_externalEventIdArchiveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delete_marketing_v3_marketingEvents_events_externalEventIdArchiveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_marketing_v3_marketingEvents_events_externalEventIdGetByIdSignalError() instead")
    void get_marketing_v3_marketingEvents_events_externalEventIdGetByIdSignalE(OAIMarketingEventPublicReadResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_marketing_v3_marketingEvents_events_externalEventIdGetByIdSignalError(OAIMarketingEventPublicReadResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patch_marketing_v3_marketingEvents_events_externalEventIdUpdateSignalError() instead")
    void patch_marketing_v3_marketingEvents_events_externalEventIdUpdateSignalE(OAIMarketingEventPublicDefaultResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patch_marketing_v3_marketingEvents_events_externalEventIdUpdateSignalError(OAIMarketingEventPublicDefaultResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use post_marketing_v3_marketingEvents_eventsCreateSignalError() instead")
    void post_marketing_v3_marketingEvents_eventsCreateSignalE(OAIMarketingEventDefaultResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void post_marketing_v3_marketingEvents_eventsCreateSignalError(OAIMarketingEventDefaultResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use post_marketing_v3_marketingEvents_events_externalEventId_cancelDoCancelSignalError() instead")
    void post_marketing_v3_marketingEvents_events_externalEventId_cancelDoCancelSignalE(OAIMarketingEventDefaultResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void post_marketing_v3_marketingEvents_events_externalEventId_cancelDoCancelSignalError(OAIMarketingEventDefaultResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use put_marketing_v3_marketingEvents_events_externalEventIdReplaceSignalError() instead")
    void put_marketing_v3_marketingEvents_events_externalEventIdReplaceSignalE(OAIMarketingEventPublicDefaultResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void put_marketing_v3_marketingEvents_events_externalEventIdReplaceSignalError(OAIMarketingEventPublicDefaultResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use delete_marketing_v3_marketingEvents_events_externalEventIdArchiveSignalErrorFull() instead")
    void delete_marketing_v3_marketingEvents_events_externalEventIdArchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delete_marketing_v3_marketingEvents_events_externalEventIdArchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_marketing_v3_marketingEvents_events_externalEventIdGetByIdSignalErrorFull() instead")
    void get_marketing_v3_marketingEvents_events_externalEventIdGetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_marketing_v3_marketingEvents_events_externalEventIdGetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patch_marketing_v3_marketingEvents_events_externalEventIdUpdateSignalErrorFull() instead")
    void patch_marketing_v3_marketingEvents_events_externalEventIdUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patch_marketing_v3_marketingEvents_events_externalEventIdUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use post_marketing_v3_marketingEvents_eventsCreateSignalErrorFull() instead")
    void post_marketing_v3_marketingEvents_eventsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void post_marketing_v3_marketingEvents_eventsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use post_marketing_v3_marketingEvents_events_externalEventId_cancelDoCancelSignalErrorFull() instead")
    void post_marketing_v3_marketingEvents_events_externalEventId_cancelDoCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void post_marketing_v3_marketingEvents_events_externalEventId_cancelDoCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use put_marketing_v3_marketingEvents_events_externalEventIdReplaceSignalErrorFull() instead")
    void put_marketing_v3_marketingEvents_events_externalEventIdReplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void put_marketing_v3_marketingEvents_events_externalEventIdReplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
