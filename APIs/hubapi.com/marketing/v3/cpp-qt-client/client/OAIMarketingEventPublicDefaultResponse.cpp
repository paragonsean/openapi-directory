/**
 * Marketing Events
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarketingEventPublicDefaultResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarketingEventPublicDefaultResponse::OAIMarketingEventPublicDefaultResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarketingEventPublicDefaultResponse::OAIMarketingEventPublicDefaultResponse() {
    this->initializeModel();
}

OAIMarketingEventPublicDefaultResponse::~OAIMarketingEventPublicDefaultResponse() {}

void OAIMarketingEventPublicDefaultResponse::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_custom_properties_isSet = false;
    m_custom_properties_isValid = false;

    m_end_date_time_isSet = false;
    m_end_date_time_isValid = false;

    m_event_cancelled_isSet = false;
    m_event_cancelled_isValid = false;

    m_event_description_isSet = false;
    m_event_description_isValid = false;

    m_event_name_isSet = false;
    m_event_name_isValid = false;

    m_event_organizer_isSet = false;
    m_event_organizer_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_event_url_isSet = false;
    m_event_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_start_date_time_isSet = false;
    m_start_date_time_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIMarketingEventPublicDefaultResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarketingEventPublicDefaultResponse::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_custom_properties_isValid = ::OpenAPI::fromJsonValue(m_custom_properties, json[QString("customProperties")]);
    m_custom_properties_isSet = !json[QString("customProperties")].isNull() && m_custom_properties_isValid;

    m_end_date_time_isValid = ::OpenAPI::fromJsonValue(m_end_date_time, json[QString("endDateTime")]);
    m_end_date_time_isSet = !json[QString("endDateTime")].isNull() && m_end_date_time_isValid;

    m_event_cancelled_isValid = ::OpenAPI::fromJsonValue(m_event_cancelled, json[QString("eventCancelled")]);
    m_event_cancelled_isSet = !json[QString("eventCancelled")].isNull() && m_event_cancelled_isValid;

    m_event_description_isValid = ::OpenAPI::fromJsonValue(m_event_description, json[QString("eventDescription")]);
    m_event_description_isSet = !json[QString("eventDescription")].isNull() && m_event_description_isValid;

    m_event_name_isValid = ::OpenAPI::fromJsonValue(m_event_name, json[QString("eventName")]);
    m_event_name_isSet = !json[QString("eventName")].isNull() && m_event_name_isValid;

    m_event_organizer_isValid = ::OpenAPI::fromJsonValue(m_event_organizer, json[QString("eventOrganizer")]);
    m_event_organizer_isSet = !json[QString("eventOrganizer")].isNull() && m_event_organizer_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_event_url_isValid = ::OpenAPI::fromJsonValue(m_event_url, json[QString("eventUrl")]);
    m_event_url_isSet = !json[QString("eventUrl")].isNull() && m_event_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_start_date_time_isValid = ::OpenAPI::fromJsonValue(m_start_date_time, json[QString("startDateTime")]);
    m_start_date_time_isSet = !json[QString("startDateTime")].isNull() && m_start_date_time_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIMarketingEventPublicDefaultResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarketingEventPublicDefaultResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_custom_properties.size() > 0) {
        obj.insert(QString("customProperties"), ::OpenAPI::toJsonValue(m_custom_properties));
    }
    if (m_end_date_time_isSet) {
        obj.insert(QString("endDateTime"), ::OpenAPI::toJsonValue(m_end_date_time));
    }
    if (m_event_cancelled_isSet) {
        obj.insert(QString("eventCancelled"), ::OpenAPI::toJsonValue(m_event_cancelled));
    }
    if (m_event_description_isSet) {
        obj.insert(QString("eventDescription"), ::OpenAPI::toJsonValue(m_event_description));
    }
    if (m_event_name_isSet) {
        obj.insert(QString("eventName"), ::OpenAPI::toJsonValue(m_event_name));
    }
    if (m_event_organizer_isSet) {
        obj.insert(QString("eventOrganizer"), ::OpenAPI::toJsonValue(m_event_organizer));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_event_url_isSet) {
        obj.insert(QString("eventUrl"), ::OpenAPI::toJsonValue(m_event_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_start_date_time_isSet) {
        obj.insert(QString("startDateTime"), ::OpenAPI::toJsonValue(m_start_date_time));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QDateTime OAIMarketingEventPublicDefaultResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIMarketingEventPublicDefaultResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIMarketingEventPublicDefaultResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIMarketingEventPublicDefaultResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<OAIPropertyValue> OAIMarketingEventPublicDefaultResponse::getCustomProperties() const {
    return m_custom_properties;
}
void OAIMarketingEventPublicDefaultResponse::setCustomProperties(const QList<OAIPropertyValue> &custom_properties) {
    m_custom_properties = custom_properties;
    m_custom_properties_isSet = true;
}

bool OAIMarketingEventPublicDefaultResponse::is_custom_properties_Set() const{
    return m_custom_properties_isSet;
}

bool OAIMarketingEventPublicDefaultResponse::is_custom_properties_Valid() const{
    return m_custom_properties_isValid;
}

QDateTime OAIMarketingEventPublicDefaultResponse::getEndDateTime() const {
    return m_end_date_time;
}
void OAIMarketingEventPublicDefaultResponse::setEndDateTime(const QDateTime &end_date_time) {
    m_end_date_time = end_date_time;
    m_end_date_time_isSet = true;
}

bool OAIMarketingEventPublicDefaultResponse::is_end_date_time_Set() const{
    return m_end_date_time_isSet;
}

bool OAIMarketingEventPublicDefaultResponse::is_end_date_time_Valid() const{
    return m_end_date_time_isValid;
}

bool OAIMarketingEventPublicDefaultResponse::isEventCancelled() const {
    return m_event_cancelled;
}
void OAIMarketingEventPublicDefaultResponse::setEventCancelled(const bool &event_cancelled) {
    m_event_cancelled = event_cancelled;
    m_event_cancelled_isSet = true;
}

bool OAIMarketingEventPublicDefaultResponse::is_event_cancelled_Set() const{
    return m_event_cancelled_isSet;
}

bool OAIMarketingEventPublicDefaultResponse::is_event_cancelled_Valid() const{
    return m_event_cancelled_isValid;
}

QString OAIMarketingEventPublicDefaultResponse::getEventDescription() const {
    return m_event_description;
}
void OAIMarketingEventPublicDefaultResponse::setEventDescription(const QString &event_description) {
    m_event_description = event_description;
    m_event_description_isSet = true;
}

bool OAIMarketingEventPublicDefaultResponse::is_event_description_Set() const{
    return m_event_description_isSet;
}

bool OAIMarketingEventPublicDefaultResponse::is_event_description_Valid() const{
    return m_event_description_isValid;
}

QString OAIMarketingEventPublicDefaultResponse::getEventName() const {
    return m_event_name;
}
void OAIMarketingEventPublicDefaultResponse::setEventName(const QString &event_name) {
    m_event_name = event_name;
    m_event_name_isSet = true;
}

bool OAIMarketingEventPublicDefaultResponse::is_event_name_Set() const{
    return m_event_name_isSet;
}

bool OAIMarketingEventPublicDefaultResponse::is_event_name_Valid() const{
    return m_event_name_isValid;
}

QString OAIMarketingEventPublicDefaultResponse::getEventOrganizer() const {
    return m_event_organizer;
}
void OAIMarketingEventPublicDefaultResponse::setEventOrganizer(const QString &event_organizer) {
    m_event_organizer = event_organizer;
    m_event_organizer_isSet = true;
}

bool OAIMarketingEventPublicDefaultResponse::is_event_organizer_Set() const{
    return m_event_organizer_isSet;
}

bool OAIMarketingEventPublicDefaultResponse::is_event_organizer_Valid() const{
    return m_event_organizer_isValid;
}

QString OAIMarketingEventPublicDefaultResponse::getEventType() const {
    return m_event_type;
}
void OAIMarketingEventPublicDefaultResponse::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIMarketingEventPublicDefaultResponse::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIMarketingEventPublicDefaultResponse::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAIMarketingEventPublicDefaultResponse::getEventUrl() const {
    return m_event_url;
}
void OAIMarketingEventPublicDefaultResponse::setEventUrl(const QString &event_url) {
    m_event_url = event_url;
    m_event_url_isSet = true;
}

bool OAIMarketingEventPublicDefaultResponse::is_event_url_Set() const{
    return m_event_url_isSet;
}

bool OAIMarketingEventPublicDefaultResponse::is_event_url_Valid() const{
    return m_event_url_isValid;
}

QString OAIMarketingEventPublicDefaultResponse::getId() const {
    return m_id;
}
void OAIMarketingEventPublicDefaultResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMarketingEventPublicDefaultResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMarketingEventPublicDefaultResponse::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIMarketingEventPublicDefaultResponse::getStartDateTime() const {
    return m_start_date_time;
}
void OAIMarketingEventPublicDefaultResponse::setStartDateTime(const QDateTime &start_date_time) {
    m_start_date_time = start_date_time;
    m_start_date_time_isSet = true;
}

bool OAIMarketingEventPublicDefaultResponse::is_start_date_time_Set() const{
    return m_start_date_time_isSet;
}

bool OAIMarketingEventPublicDefaultResponse::is_start_date_time_Valid() const{
    return m_start_date_time_isValid;
}

QDateTime OAIMarketingEventPublicDefaultResponse::getUpdatedAt() const {
    return m_updated_at;
}
void OAIMarketingEventPublicDefaultResponse::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIMarketingEventPublicDefaultResponse::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIMarketingEventPublicDefaultResponse::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIMarketingEventPublicDefaultResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_cancelled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_organizer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarketingEventPublicDefaultResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_event_name_isValid && m_event_organizer_isValid && m_id_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
