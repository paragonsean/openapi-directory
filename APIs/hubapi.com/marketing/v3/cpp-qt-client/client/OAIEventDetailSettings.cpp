/**
 * Marketing Events
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventDetailSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventDetailSettings::OAIEventDetailSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventDetailSettings::OAIEventDetailSettings() {
    this->initializeModel();
}

OAIEventDetailSettings::~OAIEventDetailSettings() {}

void OAIEventDetailSettings::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_event_details_url_isSet = false;
    m_event_details_url_isValid = false;
}

void OAIEventDetailSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventDetailSettings::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_event_details_url_isValid = ::OpenAPI::fromJsonValue(m_event_details_url, json[QString("eventDetailsUrl")]);
    m_event_details_url_isSet = !json[QString("eventDetailsUrl")].isNull() && m_event_details_url_isValid;
}

QString OAIEventDetailSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventDetailSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_event_details_url_isSet) {
        obj.insert(QString("eventDetailsUrl"), ::OpenAPI::toJsonValue(m_event_details_url));
    }
    return obj;
}

qint32 OAIEventDetailSettings::getAppId() const {
    return m_app_id;
}
void OAIEventDetailSettings::setAppId(const qint32 &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIEventDetailSettings::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIEventDetailSettings::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIEventDetailSettings::getEventDetailsUrl() const {
    return m_event_details_url;
}
void OAIEventDetailSettings::setEventDetailsUrl(const QString &event_details_url) {
    m_event_details_url = event_details_url;
    m_event_details_url_isSet = true;
}

bool OAIEventDetailSettings::is_event_details_url_Set() const{
    return m_event_details_url_isSet;
}

bool OAIEventDetailSettings::is_event_details_url_Valid() const{
    return m_event_details_url_isValid;
}

bool OAIEventDetailSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_details_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventDetailSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_id_isValid && m_event_details_url_isValid && true;
}

} // namespace OpenAPI
