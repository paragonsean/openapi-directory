/**
 * Marketing Events
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarketingEventEmailSubscriber.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarketingEventEmailSubscriber::OAIMarketingEventEmailSubscriber(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarketingEventEmailSubscriber::OAIMarketingEventEmailSubscriber() {
    this->initializeModel();
}

OAIMarketingEventEmailSubscriber::~OAIMarketingEventEmailSubscriber() {}

void OAIMarketingEventEmailSubscriber::initializeModel() {

    m_contact_properties_isSet = false;
    m_contact_properties_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_interaction_date_time_isSet = false;
    m_interaction_date_time_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAIMarketingEventEmailSubscriber::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarketingEventEmailSubscriber::fromJsonObject(QJsonObject json) {

    m_contact_properties_isValid = ::OpenAPI::fromJsonValue(m_contact_properties, json[QString("contactProperties")]);
    m_contact_properties_isSet = !json[QString("contactProperties")].isNull() && m_contact_properties_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_interaction_date_time_isValid = ::OpenAPI::fromJsonValue(m_interaction_date_time, json[QString("interactionDateTime")]);
    m_interaction_date_time_isSet = !json[QString("interactionDateTime")].isNull() && m_interaction_date_time_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAIMarketingEventEmailSubscriber::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarketingEventEmailSubscriber::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_properties.size() > 0) {
        obj.insert(QString("contactProperties"), ::OpenAPI::toJsonValue(m_contact_properties));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_interaction_date_time_isSet) {
        obj.insert(QString("interactionDateTime"), ::OpenAPI::toJsonValue(m_interaction_date_time));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

QMap<QString, QString> OAIMarketingEventEmailSubscriber::getContactProperties() const {
    return m_contact_properties;
}
void OAIMarketingEventEmailSubscriber::setContactProperties(const QMap<QString, QString> &contact_properties) {
    m_contact_properties = contact_properties;
    m_contact_properties_isSet = true;
}

bool OAIMarketingEventEmailSubscriber::is_contact_properties_Set() const{
    return m_contact_properties_isSet;
}

bool OAIMarketingEventEmailSubscriber::is_contact_properties_Valid() const{
    return m_contact_properties_isValid;
}

QString OAIMarketingEventEmailSubscriber::getEmail() const {
    return m_email;
}
void OAIMarketingEventEmailSubscriber::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIMarketingEventEmailSubscriber::is_email_Set() const{
    return m_email_isSet;
}

bool OAIMarketingEventEmailSubscriber::is_email_Valid() const{
    return m_email_isValid;
}

qint64 OAIMarketingEventEmailSubscriber::getInteractionDateTime() const {
    return m_interaction_date_time;
}
void OAIMarketingEventEmailSubscriber::setInteractionDateTime(const qint64 &interaction_date_time) {
    m_interaction_date_time = interaction_date_time;
    m_interaction_date_time_isSet = true;
}

bool OAIMarketingEventEmailSubscriber::is_interaction_date_time_Set() const{
    return m_interaction_date_time_isSet;
}

bool OAIMarketingEventEmailSubscriber::is_interaction_date_time_Valid() const{
    return m_interaction_date_time_isValid;
}

QMap<QString, QString> OAIMarketingEventEmailSubscriber::getProperties() const {
    return m_properties;
}
void OAIMarketingEventEmailSubscriber::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIMarketingEventEmailSubscriber::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIMarketingEventEmailSubscriber::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAIMarketingEventEmailSubscriber::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interaction_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarketingEventEmailSubscriber::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && m_interaction_date_time_isValid && true;
}

} // namespace OpenAPI
