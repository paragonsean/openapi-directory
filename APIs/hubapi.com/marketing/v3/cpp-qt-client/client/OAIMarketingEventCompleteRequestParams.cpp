/**
 * Marketing Events
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarketingEventCompleteRequestParams.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarketingEventCompleteRequestParams::OAIMarketingEventCompleteRequestParams(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarketingEventCompleteRequestParams::OAIMarketingEventCompleteRequestParams() {
    this->initializeModel();
}

OAIMarketingEventCompleteRequestParams::~OAIMarketingEventCompleteRequestParams() {}

void OAIMarketingEventCompleteRequestParams::initializeModel() {

    m_end_date_time_isSet = false;
    m_end_date_time_isValid = false;

    m_start_date_time_isSet = false;
    m_start_date_time_isValid = false;
}

void OAIMarketingEventCompleteRequestParams::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarketingEventCompleteRequestParams::fromJsonObject(QJsonObject json) {

    m_end_date_time_isValid = ::OpenAPI::fromJsonValue(m_end_date_time, json[QString("endDateTime")]);
    m_end_date_time_isSet = !json[QString("endDateTime")].isNull() && m_end_date_time_isValid;

    m_start_date_time_isValid = ::OpenAPI::fromJsonValue(m_start_date_time, json[QString("startDateTime")]);
    m_start_date_time_isSet = !json[QString("startDateTime")].isNull() && m_start_date_time_isValid;
}

QString OAIMarketingEventCompleteRequestParams::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarketingEventCompleteRequestParams::asJsonObject() const {
    QJsonObject obj;
    if (m_end_date_time_isSet) {
        obj.insert(QString("endDateTime"), ::OpenAPI::toJsonValue(m_end_date_time));
    }
    if (m_start_date_time_isSet) {
        obj.insert(QString("startDateTime"), ::OpenAPI::toJsonValue(m_start_date_time));
    }
    return obj;
}

QDateTime OAIMarketingEventCompleteRequestParams::getEndDateTime() const {
    return m_end_date_time;
}
void OAIMarketingEventCompleteRequestParams::setEndDateTime(const QDateTime &end_date_time) {
    m_end_date_time = end_date_time;
    m_end_date_time_isSet = true;
}

bool OAIMarketingEventCompleteRequestParams::is_end_date_time_Set() const{
    return m_end_date_time_isSet;
}

bool OAIMarketingEventCompleteRequestParams::is_end_date_time_Valid() const{
    return m_end_date_time_isValid;
}

QDateTime OAIMarketingEventCompleteRequestParams::getStartDateTime() const {
    return m_start_date_time;
}
void OAIMarketingEventCompleteRequestParams::setStartDateTime(const QDateTime &start_date_time) {
    m_start_date_time = start_date_time;
    m_start_date_time_isSet = true;
}

bool OAIMarketingEventCompleteRequestParams::is_start_date_time_Set() const{
    return m_start_date_time_isSet;
}

bool OAIMarketingEventCompleteRequestParams::is_start_date_time_Valid() const{
    return m_start_date_time_isValid;
}

bool OAIMarketingEventCompleteRequestParams::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarketingEventCompleteRequestParams::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_date_time_isValid && m_start_date_time_isValid && true;
}

} // namespace OpenAPI
