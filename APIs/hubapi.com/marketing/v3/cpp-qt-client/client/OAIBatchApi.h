/**
 * Marketing Events
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBatchApi_H
#define OAI_OAIBatchApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBatchInputMarketingEventCreateRequestParams.h"
#include "OAIBatchInputMarketingEventExternalUniqueIdentifier.h"
#include "OAIBatchResponseMarketingEventPublicDefaultResponse.h"
#include "OAIError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBatchApi : public QObject {
    Q_OBJECT

public:
    OAIBatchApi(const int timeOut = 0);
    ~OAIBatchApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_batch_input_marketing_event_external_unique_identifier OAIBatchInputMarketingEventExternalUniqueIdentifier [required]
    */
    virtual void post_marketing_v3_marketingEvents_events_deleteArchive(const OAIBatchInputMarketingEventExternalUniqueIdentifier &oai_batch_input_marketing_event_external_unique_identifier);

    /**
    * @param[in]  oai_batch_input_marketing_event_create_request_params OAIBatchInputMarketingEventCreateRequestParams [required]
    */
    virtual void post_marketing_v3_marketingEvents_events_upsertDoUpsert(const OAIBatchInputMarketingEventCreateRequestParams &oai_batch_input_marketing_event_create_request_params);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void post_marketing_v3_marketingEvents_events_deleteArchiveCallback(OAIHttpRequestWorker *worker);
    void post_marketing_v3_marketingEvents_events_upsertDoUpsertCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void post_marketing_v3_marketingEvents_events_deleteArchiveSignal(OAIError summary);
    void post_marketing_v3_marketingEvents_events_upsertDoUpsertSignal(OAIBatchResponseMarketingEventPublicDefaultResponse summary);


    void post_marketing_v3_marketingEvents_events_deleteArchiveSignalFull(OAIHttpRequestWorker *worker, OAIError summary);
    void post_marketing_v3_marketingEvents_events_upsertDoUpsertSignalFull(OAIHttpRequestWorker *worker, OAIBatchResponseMarketingEventPublicDefaultResponse summary);

    Q_DECL_DEPRECATED_X("Use post_marketing_v3_marketingEvents_events_deleteArchiveSignalError() instead")
    void post_marketing_v3_marketingEvents_events_deleteArchiveSignalE(OAIError summary, QNetworkReply::NetworkError error_type, QString error_str);
    void post_marketing_v3_marketingEvents_events_deleteArchiveSignalError(OAIError summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use post_marketing_v3_marketingEvents_events_upsertDoUpsertSignalError() instead")
    void post_marketing_v3_marketingEvents_events_upsertDoUpsertSignalE(OAIBatchResponseMarketingEventPublicDefaultResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void post_marketing_v3_marketingEvents_events_upsertDoUpsertSignalError(OAIBatchResponseMarketingEventPublicDefaultResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use post_marketing_v3_marketingEvents_events_deleteArchiveSignalErrorFull() instead")
    void post_marketing_v3_marketingEvents_events_deleteArchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void post_marketing_v3_marketingEvents_events_deleteArchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use post_marketing_v3_marketingEvents_events_upsertDoUpsertSignalErrorFull() instead")
    void post_marketing_v3_marketingEvents_events_upsertDoUpsertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void post_marketing_v3_marketingEvents_events_upsertDoUpsertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
