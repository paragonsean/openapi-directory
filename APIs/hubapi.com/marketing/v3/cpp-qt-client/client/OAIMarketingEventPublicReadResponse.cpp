/**
 * Marketing Events
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarketingEventPublicReadResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarketingEventPublicReadResponse::OAIMarketingEventPublicReadResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarketingEventPublicReadResponse::OAIMarketingEventPublicReadResponse() {
    this->initializeModel();
}

OAIMarketingEventPublicReadResponse::~OAIMarketingEventPublicReadResponse() {}

void OAIMarketingEventPublicReadResponse::initializeModel() {

    m_attendees_isSet = false;
    m_attendees_isValid = false;

    m_cancellations_isSet = false;
    m_cancellations_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_custom_properties_isSet = false;
    m_custom_properties_isValid = false;

    m_end_date_time_isSet = false;
    m_end_date_time_isValid = false;

    m_event_cancelled_isSet = false;
    m_event_cancelled_isValid = false;

    m_event_description_isSet = false;
    m_event_description_isValid = false;

    m_event_name_isSet = false;
    m_event_name_isValid = false;

    m_event_organizer_isSet = false;
    m_event_organizer_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_event_url_isSet = false;
    m_event_url_isValid = false;

    m_external_event_id_isSet = false;
    m_external_event_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_no_shows_isSet = false;
    m_no_shows_isValid = false;

    m_registrants_isSet = false;
    m_registrants_isValid = false;

    m_start_date_time_isSet = false;
    m_start_date_time_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIMarketingEventPublicReadResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarketingEventPublicReadResponse::fromJsonObject(QJsonObject json) {

    m_attendees_isValid = ::OpenAPI::fromJsonValue(m_attendees, json[QString("attendees")]);
    m_attendees_isSet = !json[QString("attendees")].isNull() && m_attendees_isValid;

    m_cancellations_isValid = ::OpenAPI::fromJsonValue(m_cancellations, json[QString("cancellations")]);
    m_cancellations_isSet = !json[QString("cancellations")].isNull() && m_cancellations_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_custom_properties_isValid = ::OpenAPI::fromJsonValue(m_custom_properties, json[QString("customProperties")]);
    m_custom_properties_isSet = !json[QString("customProperties")].isNull() && m_custom_properties_isValid;

    m_end_date_time_isValid = ::OpenAPI::fromJsonValue(m_end_date_time, json[QString("endDateTime")]);
    m_end_date_time_isSet = !json[QString("endDateTime")].isNull() && m_end_date_time_isValid;

    m_event_cancelled_isValid = ::OpenAPI::fromJsonValue(m_event_cancelled, json[QString("eventCancelled")]);
    m_event_cancelled_isSet = !json[QString("eventCancelled")].isNull() && m_event_cancelled_isValid;

    m_event_description_isValid = ::OpenAPI::fromJsonValue(m_event_description, json[QString("eventDescription")]);
    m_event_description_isSet = !json[QString("eventDescription")].isNull() && m_event_description_isValid;

    m_event_name_isValid = ::OpenAPI::fromJsonValue(m_event_name, json[QString("eventName")]);
    m_event_name_isSet = !json[QString("eventName")].isNull() && m_event_name_isValid;

    m_event_organizer_isValid = ::OpenAPI::fromJsonValue(m_event_organizer, json[QString("eventOrganizer")]);
    m_event_organizer_isSet = !json[QString("eventOrganizer")].isNull() && m_event_organizer_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_event_url_isValid = ::OpenAPI::fromJsonValue(m_event_url, json[QString("eventUrl")]);
    m_event_url_isSet = !json[QString("eventUrl")].isNull() && m_event_url_isValid;

    m_external_event_id_isValid = ::OpenAPI::fromJsonValue(m_external_event_id, json[QString("externalEventId")]);
    m_external_event_id_isSet = !json[QString("externalEventId")].isNull() && m_external_event_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_no_shows_isValid = ::OpenAPI::fromJsonValue(m_no_shows, json[QString("noShows")]);
    m_no_shows_isSet = !json[QString("noShows")].isNull() && m_no_shows_isValid;

    m_registrants_isValid = ::OpenAPI::fromJsonValue(m_registrants, json[QString("registrants")]);
    m_registrants_isSet = !json[QString("registrants")].isNull() && m_registrants_isValid;

    m_start_date_time_isValid = ::OpenAPI::fromJsonValue(m_start_date_time, json[QString("startDateTime")]);
    m_start_date_time_isSet = !json[QString("startDateTime")].isNull() && m_start_date_time_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIMarketingEventPublicReadResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarketingEventPublicReadResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_attendees_isSet) {
        obj.insert(QString("attendees"), ::OpenAPI::toJsonValue(m_attendees));
    }
    if (m_cancellations_isSet) {
        obj.insert(QString("cancellations"), ::OpenAPI::toJsonValue(m_cancellations));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_custom_properties.size() > 0) {
        obj.insert(QString("customProperties"), ::OpenAPI::toJsonValue(m_custom_properties));
    }
    if (m_end_date_time_isSet) {
        obj.insert(QString("endDateTime"), ::OpenAPI::toJsonValue(m_end_date_time));
    }
    if (m_event_cancelled_isSet) {
        obj.insert(QString("eventCancelled"), ::OpenAPI::toJsonValue(m_event_cancelled));
    }
    if (m_event_description_isSet) {
        obj.insert(QString("eventDescription"), ::OpenAPI::toJsonValue(m_event_description));
    }
    if (m_event_name_isSet) {
        obj.insert(QString("eventName"), ::OpenAPI::toJsonValue(m_event_name));
    }
    if (m_event_organizer_isSet) {
        obj.insert(QString("eventOrganizer"), ::OpenAPI::toJsonValue(m_event_organizer));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_event_url_isSet) {
        obj.insert(QString("eventUrl"), ::OpenAPI::toJsonValue(m_event_url));
    }
    if (m_external_event_id_isSet) {
        obj.insert(QString("externalEventId"), ::OpenAPI::toJsonValue(m_external_event_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_no_shows_isSet) {
        obj.insert(QString("noShows"), ::OpenAPI::toJsonValue(m_no_shows));
    }
    if (m_registrants_isSet) {
        obj.insert(QString("registrants"), ::OpenAPI::toJsonValue(m_registrants));
    }
    if (m_start_date_time_isSet) {
        obj.insert(QString("startDateTime"), ::OpenAPI::toJsonValue(m_start_date_time));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

qint32 OAIMarketingEventPublicReadResponse::getAttendees() const {
    return m_attendees;
}
void OAIMarketingEventPublicReadResponse::setAttendees(const qint32 &attendees) {
    m_attendees = attendees;
    m_attendees_isSet = true;
}

bool OAIMarketingEventPublicReadResponse::is_attendees_Set() const{
    return m_attendees_isSet;
}

bool OAIMarketingEventPublicReadResponse::is_attendees_Valid() const{
    return m_attendees_isValid;
}

qint32 OAIMarketingEventPublicReadResponse::getCancellations() const {
    return m_cancellations;
}
void OAIMarketingEventPublicReadResponse::setCancellations(const qint32 &cancellations) {
    m_cancellations = cancellations;
    m_cancellations_isSet = true;
}

bool OAIMarketingEventPublicReadResponse::is_cancellations_Set() const{
    return m_cancellations_isSet;
}

bool OAIMarketingEventPublicReadResponse::is_cancellations_Valid() const{
    return m_cancellations_isValid;
}

QDateTime OAIMarketingEventPublicReadResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIMarketingEventPublicReadResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIMarketingEventPublicReadResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIMarketingEventPublicReadResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<OAIPropertyValue> OAIMarketingEventPublicReadResponse::getCustomProperties() const {
    return m_custom_properties;
}
void OAIMarketingEventPublicReadResponse::setCustomProperties(const QList<OAIPropertyValue> &custom_properties) {
    m_custom_properties = custom_properties;
    m_custom_properties_isSet = true;
}

bool OAIMarketingEventPublicReadResponse::is_custom_properties_Set() const{
    return m_custom_properties_isSet;
}

bool OAIMarketingEventPublicReadResponse::is_custom_properties_Valid() const{
    return m_custom_properties_isValid;
}

QDateTime OAIMarketingEventPublicReadResponse::getEndDateTime() const {
    return m_end_date_time;
}
void OAIMarketingEventPublicReadResponse::setEndDateTime(const QDateTime &end_date_time) {
    m_end_date_time = end_date_time;
    m_end_date_time_isSet = true;
}

bool OAIMarketingEventPublicReadResponse::is_end_date_time_Set() const{
    return m_end_date_time_isSet;
}

bool OAIMarketingEventPublicReadResponse::is_end_date_time_Valid() const{
    return m_end_date_time_isValid;
}

bool OAIMarketingEventPublicReadResponse::isEventCancelled() const {
    return m_event_cancelled;
}
void OAIMarketingEventPublicReadResponse::setEventCancelled(const bool &event_cancelled) {
    m_event_cancelled = event_cancelled;
    m_event_cancelled_isSet = true;
}

bool OAIMarketingEventPublicReadResponse::is_event_cancelled_Set() const{
    return m_event_cancelled_isSet;
}

bool OAIMarketingEventPublicReadResponse::is_event_cancelled_Valid() const{
    return m_event_cancelled_isValid;
}

QString OAIMarketingEventPublicReadResponse::getEventDescription() const {
    return m_event_description;
}
void OAIMarketingEventPublicReadResponse::setEventDescription(const QString &event_description) {
    m_event_description = event_description;
    m_event_description_isSet = true;
}

bool OAIMarketingEventPublicReadResponse::is_event_description_Set() const{
    return m_event_description_isSet;
}

bool OAIMarketingEventPublicReadResponse::is_event_description_Valid() const{
    return m_event_description_isValid;
}

QString OAIMarketingEventPublicReadResponse::getEventName() const {
    return m_event_name;
}
void OAIMarketingEventPublicReadResponse::setEventName(const QString &event_name) {
    m_event_name = event_name;
    m_event_name_isSet = true;
}

bool OAIMarketingEventPublicReadResponse::is_event_name_Set() const{
    return m_event_name_isSet;
}

bool OAIMarketingEventPublicReadResponse::is_event_name_Valid() const{
    return m_event_name_isValid;
}

QString OAIMarketingEventPublicReadResponse::getEventOrganizer() const {
    return m_event_organizer;
}
void OAIMarketingEventPublicReadResponse::setEventOrganizer(const QString &event_organizer) {
    m_event_organizer = event_organizer;
    m_event_organizer_isSet = true;
}

bool OAIMarketingEventPublicReadResponse::is_event_organizer_Set() const{
    return m_event_organizer_isSet;
}

bool OAIMarketingEventPublicReadResponse::is_event_organizer_Valid() const{
    return m_event_organizer_isValid;
}

QString OAIMarketingEventPublicReadResponse::getEventType() const {
    return m_event_type;
}
void OAIMarketingEventPublicReadResponse::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIMarketingEventPublicReadResponse::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIMarketingEventPublicReadResponse::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAIMarketingEventPublicReadResponse::getEventUrl() const {
    return m_event_url;
}
void OAIMarketingEventPublicReadResponse::setEventUrl(const QString &event_url) {
    m_event_url = event_url;
    m_event_url_isSet = true;
}

bool OAIMarketingEventPublicReadResponse::is_event_url_Set() const{
    return m_event_url_isSet;
}

bool OAIMarketingEventPublicReadResponse::is_event_url_Valid() const{
    return m_event_url_isValid;
}

QString OAIMarketingEventPublicReadResponse::getExternalEventId() const {
    return m_external_event_id;
}
void OAIMarketingEventPublicReadResponse::setExternalEventId(const QString &external_event_id) {
    m_external_event_id = external_event_id;
    m_external_event_id_isSet = true;
}

bool OAIMarketingEventPublicReadResponse::is_external_event_id_Set() const{
    return m_external_event_id_isSet;
}

bool OAIMarketingEventPublicReadResponse::is_external_event_id_Valid() const{
    return m_external_event_id_isValid;
}

QString OAIMarketingEventPublicReadResponse::getId() const {
    return m_id;
}
void OAIMarketingEventPublicReadResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMarketingEventPublicReadResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMarketingEventPublicReadResponse::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIMarketingEventPublicReadResponse::getNoShows() const {
    return m_no_shows;
}
void OAIMarketingEventPublicReadResponse::setNoShows(const qint32 &no_shows) {
    m_no_shows = no_shows;
    m_no_shows_isSet = true;
}

bool OAIMarketingEventPublicReadResponse::is_no_shows_Set() const{
    return m_no_shows_isSet;
}

bool OAIMarketingEventPublicReadResponse::is_no_shows_Valid() const{
    return m_no_shows_isValid;
}

qint32 OAIMarketingEventPublicReadResponse::getRegistrants() const {
    return m_registrants;
}
void OAIMarketingEventPublicReadResponse::setRegistrants(const qint32 &registrants) {
    m_registrants = registrants;
    m_registrants_isSet = true;
}

bool OAIMarketingEventPublicReadResponse::is_registrants_Set() const{
    return m_registrants_isSet;
}

bool OAIMarketingEventPublicReadResponse::is_registrants_Valid() const{
    return m_registrants_isValid;
}

QDateTime OAIMarketingEventPublicReadResponse::getStartDateTime() const {
    return m_start_date_time;
}
void OAIMarketingEventPublicReadResponse::setStartDateTime(const QDateTime &start_date_time) {
    m_start_date_time = start_date_time;
    m_start_date_time_isSet = true;
}

bool OAIMarketingEventPublicReadResponse::is_start_date_time_Set() const{
    return m_start_date_time_isSet;
}

bool OAIMarketingEventPublicReadResponse::is_start_date_time_Valid() const{
    return m_start_date_time_isValid;
}

QDateTime OAIMarketingEventPublicReadResponse::getUpdatedAt() const {
    return m_updated_at;
}
void OAIMarketingEventPublicReadResponse::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIMarketingEventPublicReadResponse::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIMarketingEventPublicReadResponse::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIMarketingEventPublicReadResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attendees_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancellations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_cancelled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_organizer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_shows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registrants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarketingEventPublicReadResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attendees_isValid && m_cancellations_isValid && m_created_at_isValid && m_event_name_isValid && m_event_organizer_isValid && m_external_event_id_isValid && m_id_isValid && m_no_shows_isValid && m_registrants_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
