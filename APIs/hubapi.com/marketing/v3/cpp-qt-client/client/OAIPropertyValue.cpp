/**
 * Marketing Events
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPropertyValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPropertyValue::OAIPropertyValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPropertyValue::OAIPropertyValue() {
    this->initializeModel();
}

OAIPropertyValue::~OAIPropertyValue() {}

void OAIPropertyValue::initializeModel() {

    m_is_large_value_isSet = false;
    m_is_large_value_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_persistence_timestamp_isSet = false;
    m_persistence_timestamp_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_selected_by_user_isSet = false;
    m_selected_by_user_isValid = false;

    m_selected_by_user_timestamp_isSet = false;
    m_selected_by_user_timestamp_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_source_label_isSet = false;
    m_source_label_isValid = false;

    m_source_metadata_isSet = false;
    m_source_metadata_isValid = false;

    m_source_vid_isSet = false;
    m_source_vid_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_updated_by_user_id_isSet = false;
    m_updated_by_user_id_isValid = false;

    m_use_timestamp_as_persistence_timestamp_isSet = false;
    m_use_timestamp_as_persistence_timestamp_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIPropertyValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPropertyValue::fromJsonObject(QJsonObject json) {

    m_is_large_value_isValid = ::OpenAPI::fromJsonValue(m_is_large_value, json[QString("isLargeValue")]);
    m_is_large_value_isSet = !json[QString("isLargeValue")].isNull() && m_is_large_value_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_persistence_timestamp_isValid = ::OpenAPI::fromJsonValue(m_persistence_timestamp, json[QString("persistenceTimestamp")]);
    m_persistence_timestamp_isSet = !json[QString("persistenceTimestamp")].isNull() && m_persistence_timestamp_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_selected_by_user_isValid = ::OpenAPI::fromJsonValue(m_selected_by_user, json[QString("selectedByUser")]);
    m_selected_by_user_isSet = !json[QString("selectedByUser")].isNull() && m_selected_by_user_isValid;

    m_selected_by_user_timestamp_isValid = ::OpenAPI::fromJsonValue(m_selected_by_user_timestamp, json[QString("selectedByUserTimestamp")]);
    m_selected_by_user_timestamp_isSet = !json[QString("selectedByUserTimestamp")].isNull() && m_selected_by_user_timestamp_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("sourceId")]);
    m_source_id_isSet = !json[QString("sourceId")].isNull() && m_source_id_isValid;

    m_source_label_isValid = ::OpenAPI::fromJsonValue(m_source_label, json[QString("sourceLabel")]);
    m_source_label_isSet = !json[QString("sourceLabel")].isNull() && m_source_label_isValid;

    m_source_metadata_isValid = ::OpenAPI::fromJsonValue(m_source_metadata, json[QString("sourceMetadata")]);
    m_source_metadata_isSet = !json[QString("sourceMetadata")].isNull() && m_source_metadata_isValid;

    m_source_vid_isValid = ::OpenAPI::fromJsonValue(m_source_vid, json[QString("sourceVid")]);
    m_source_vid_isSet = !json[QString("sourceVid")].isNull() && m_source_vid_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_updated_by_user_id_isValid = ::OpenAPI::fromJsonValue(m_updated_by_user_id, json[QString("updatedByUserId")]);
    m_updated_by_user_id_isSet = !json[QString("updatedByUserId")].isNull() && m_updated_by_user_id_isValid;

    m_use_timestamp_as_persistence_timestamp_isValid = ::OpenAPI::fromJsonValue(m_use_timestamp_as_persistence_timestamp, json[QString("useTimestampAsPersistenceTimestamp")]);
    m_use_timestamp_as_persistence_timestamp_isSet = !json[QString("useTimestampAsPersistenceTimestamp")].isNull() && m_use_timestamp_as_persistence_timestamp_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIPropertyValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPropertyValue::asJsonObject() const {
    QJsonObject obj;
    if (m_is_large_value_isSet) {
        obj.insert(QString("isLargeValue"), ::OpenAPI::toJsonValue(m_is_large_value));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_persistence_timestamp_isSet) {
        obj.insert(QString("persistenceTimestamp"), ::OpenAPI::toJsonValue(m_persistence_timestamp));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_selected_by_user_isSet) {
        obj.insert(QString("selectedByUser"), ::OpenAPI::toJsonValue(m_selected_by_user));
    }
    if (m_selected_by_user_timestamp_isSet) {
        obj.insert(QString("selectedByUserTimestamp"), ::OpenAPI::toJsonValue(m_selected_by_user_timestamp));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("sourceId"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_source_label_isSet) {
        obj.insert(QString("sourceLabel"), ::OpenAPI::toJsonValue(m_source_label));
    }
    if (m_source_metadata_isSet) {
        obj.insert(QString("sourceMetadata"), ::OpenAPI::toJsonValue(m_source_metadata));
    }
    if (m_source_vid.size() > 0) {
        obj.insert(QString("sourceVid"), ::OpenAPI::toJsonValue(m_source_vid));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_updated_by_user_id_isSet) {
        obj.insert(QString("updatedByUserId"), ::OpenAPI::toJsonValue(m_updated_by_user_id));
    }
    if (m_use_timestamp_as_persistence_timestamp_isSet) {
        obj.insert(QString("useTimestampAsPersistenceTimestamp"), ::OpenAPI::toJsonValue(m_use_timestamp_as_persistence_timestamp));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

bool OAIPropertyValue::isIsLargeValue() const {
    return m_is_large_value;
}
void OAIPropertyValue::setIsLargeValue(const bool &is_large_value) {
    m_is_large_value = is_large_value;
    m_is_large_value_isSet = true;
}

bool OAIPropertyValue::is_is_large_value_Set() const{
    return m_is_large_value_isSet;
}

bool OAIPropertyValue::is_is_large_value_Valid() const{
    return m_is_large_value_isValid;
}

QString OAIPropertyValue::getName() const {
    return m_name;
}
void OAIPropertyValue::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPropertyValue::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPropertyValue::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIPropertyValue::getPersistenceTimestamp() const {
    return m_persistence_timestamp;
}
void OAIPropertyValue::setPersistenceTimestamp(const qint64 &persistence_timestamp) {
    m_persistence_timestamp = persistence_timestamp;
    m_persistence_timestamp_isSet = true;
}

bool OAIPropertyValue::is_persistence_timestamp_Set() const{
    return m_persistence_timestamp_isSet;
}

bool OAIPropertyValue::is_persistence_timestamp_Valid() const{
    return m_persistence_timestamp_isValid;
}

QString OAIPropertyValue::getRequestId() const {
    return m_request_id;
}
void OAIPropertyValue::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIPropertyValue::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIPropertyValue::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIPropertyValue::isSelectedByUser() const {
    return m_selected_by_user;
}
void OAIPropertyValue::setSelectedByUser(const bool &selected_by_user) {
    m_selected_by_user = selected_by_user;
    m_selected_by_user_isSet = true;
}

bool OAIPropertyValue::is_selected_by_user_Set() const{
    return m_selected_by_user_isSet;
}

bool OAIPropertyValue::is_selected_by_user_Valid() const{
    return m_selected_by_user_isValid;
}

qint64 OAIPropertyValue::getSelectedByUserTimestamp() const {
    return m_selected_by_user_timestamp;
}
void OAIPropertyValue::setSelectedByUserTimestamp(const qint64 &selected_by_user_timestamp) {
    m_selected_by_user_timestamp = selected_by_user_timestamp;
    m_selected_by_user_timestamp_isSet = true;
}

bool OAIPropertyValue::is_selected_by_user_timestamp_Set() const{
    return m_selected_by_user_timestamp_isSet;
}

bool OAIPropertyValue::is_selected_by_user_timestamp_Valid() const{
    return m_selected_by_user_timestamp_isValid;
}

QString OAIPropertyValue::getSource() const {
    return m_source;
}
void OAIPropertyValue::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIPropertyValue::is_source_Set() const{
    return m_source_isSet;
}

bool OAIPropertyValue::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIPropertyValue::getSourceId() const {
    return m_source_id;
}
void OAIPropertyValue::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIPropertyValue::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIPropertyValue::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIPropertyValue::getSourceLabel() const {
    return m_source_label;
}
void OAIPropertyValue::setSourceLabel(const QString &source_label) {
    m_source_label = source_label;
    m_source_label_isSet = true;
}

bool OAIPropertyValue::is_source_label_Set() const{
    return m_source_label_isSet;
}

bool OAIPropertyValue::is_source_label_Valid() const{
    return m_source_label_isValid;
}

QString OAIPropertyValue::getSourceMetadata() const {
    return m_source_metadata;
}
void OAIPropertyValue::setSourceMetadata(const QString &source_metadata) {
    m_source_metadata = source_metadata;
    m_source_metadata_isSet = true;
}

bool OAIPropertyValue::is_source_metadata_Set() const{
    return m_source_metadata_isSet;
}

bool OAIPropertyValue::is_source_metadata_Valid() const{
    return m_source_metadata_isValid;
}

QList<qint64> OAIPropertyValue::getSourceVid() const {
    return m_source_vid;
}
void OAIPropertyValue::setSourceVid(const QList<qint64> &source_vid) {
    m_source_vid = source_vid;
    m_source_vid_isSet = true;
}

bool OAIPropertyValue::is_source_vid_Set() const{
    return m_source_vid_isSet;
}

bool OAIPropertyValue::is_source_vid_Valid() const{
    return m_source_vid_isValid;
}

qint64 OAIPropertyValue::getTimestamp() const {
    return m_timestamp;
}
void OAIPropertyValue::setTimestamp(const qint64 &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIPropertyValue::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIPropertyValue::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

qint32 OAIPropertyValue::getUpdatedByUserId() const {
    return m_updated_by_user_id;
}
void OAIPropertyValue::setUpdatedByUserId(const qint32 &updated_by_user_id) {
    m_updated_by_user_id = updated_by_user_id;
    m_updated_by_user_id_isSet = true;
}

bool OAIPropertyValue::is_updated_by_user_id_Set() const{
    return m_updated_by_user_id_isSet;
}

bool OAIPropertyValue::is_updated_by_user_id_Valid() const{
    return m_updated_by_user_id_isValid;
}

bool OAIPropertyValue::isUseTimestampAsPersistenceTimestamp() const {
    return m_use_timestamp_as_persistence_timestamp;
}
void OAIPropertyValue::setUseTimestampAsPersistenceTimestamp(const bool &use_timestamp_as_persistence_timestamp) {
    m_use_timestamp_as_persistence_timestamp = use_timestamp_as_persistence_timestamp;
    m_use_timestamp_as_persistence_timestamp_isSet = true;
}

bool OAIPropertyValue::is_use_timestamp_as_persistence_timestamp_Set() const{
    return m_use_timestamp_as_persistence_timestamp_isSet;
}

bool OAIPropertyValue::is_use_timestamp_as_persistence_timestamp_Valid() const{
    return m_use_timestamp_as_persistence_timestamp_isValid;
}

QString OAIPropertyValue::getValue() const {
    return m_value;
}
void OAIPropertyValue::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIPropertyValue::is_value_Set() const{
    return m_value_isSet;
}

bool OAIPropertyValue::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIPropertyValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_large_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_persistence_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_by_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_by_user_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_vid.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_timestamp_as_persistence_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPropertyValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_request_id_isValid && m_selected_by_user_isValid && m_selected_by_user_timestamp_isValid && m_source_isValid && m_source_id_isValid && m_source_label_isValid && m_source_metadata_isValid && m_source_vid_isValid && m_timestamp_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
