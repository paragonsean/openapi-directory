# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MarketingEventCompleteRequestParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_date_time: datetime=None, start_date_time: datetime=None):
        """MarketingEventCompleteRequestParams - a model defined in OpenAPI

        :param end_date_time: The end_date_time of this MarketingEventCompleteRequestParams.
        :param start_date_time: The start_date_time of this MarketingEventCompleteRequestParams.
        """
        self.openapi_types = {
            'end_date_time': datetime,
            'start_date_time': datetime
        }

        self.attribute_map = {
            'end_date_time': 'endDateTime',
            'start_date_time': 'startDateTime'
        }

        self._end_date_time = end_date_time
        self._start_date_time = start_date_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MarketingEventCompleteRequestParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MarketingEventCompleteRequestParams of this MarketingEventCompleteRequestParams.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_date_time(self):
        """Gets the end_date_time of this MarketingEventCompleteRequestParams.


        :return: The end_date_time of this MarketingEventCompleteRequestParams.
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this MarketingEventCompleteRequestParams.


        :param end_date_time: The end_date_time of this MarketingEventCompleteRequestParams.
        :type end_date_time: datetime
        """
        if end_date_time is None:
            raise ValueError("Invalid value for `end_date_time`, must not be `None`")

        self._end_date_time = end_date_time

    @property
    def start_date_time(self):
        """Gets the start_date_time of this MarketingEventCompleteRequestParams.


        :return: The start_date_time of this MarketingEventCompleteRequestParams.
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this MarketingEventCompleteRequestParams.


        :param start_date_time: The start_date_time of this MarketingEventCompleteRequestParams.
        :type start_date_time: datetime
        """
        if start_date_time is None:
            raise ValueError("Invalid value for `start_date_time`, must not be `None`")

        self._start_date_time = start_date_time
