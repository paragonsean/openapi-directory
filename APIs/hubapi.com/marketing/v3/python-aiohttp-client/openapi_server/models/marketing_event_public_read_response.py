# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.property_value import PropertyValue
from openapi_server import util


class MarketingEventPublicReadResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attendees: int=None, cancellations: int=None, created_at: datetime=None, custom_properties: List[PropertyValue]=None, end_date_time: datetime=None, event_cancelled: bool=None, event_description: str=None, event_name: str=None, event_organizer: str=None, event_type: str=None, event_url: str=None, external_event_id: str=None, id: str=None, no_shows: int=None, registrants: int=None, start_date_time: datetime=None, updated_at: datetime=None):
        """MarketingEventPublicReadResponse - a model defined in OpenAPI

        :param attendees: The attendees of this MarketingEventPublicReadResponse.
        :param cancellations: The cancellations of this MarketingEventPublicReadResponse.
        :param created_at: The created_at of this MarketingEventPublicReadResponse.
        :param custom_properties: The custom_properties of this MarketingEventPublicReadResponse.
        :param end_date_time: The end_date_time of this MarketingEventPublicReadResponse.
        :param event_cancelled: The event_cancelled of this MarketingEventPublicReadResponse.
        :param event_description: The event_description of this MarketingEventPublicReadResponse.
        :param event_name: The event_name of this MarketingEventPublicReadResponse.
        :param event_organizer: The event_organizer of this MarketingEventPublicReadResponse.
        :param event_type: The event_type of this MarketingEventPublicReadResponse.
        :param event_url: The event_url of this MarketingEventPublicReadResponse.
        :param external_event_id: The external_event_id of this MarketingEventPublicReadResponse.
        :param id: The id of this MarketingEventPublicReadResponse.
        :param no_shows: The no_shows of this MarketingEventPublicReadResponse.
        :param registrants: The registrants of this MarketingEventPublicReadResponse.
        :param start_date_time: The start_date_time of this MarketingEventPublicReadResponse.
        :param updated_at: The updated_at of this MarketingEventPublicReadResponse.
        """
        self.openapi_types = {
            'attendees': int,
            'cancellations': int,
            'created_at': datetime,
            'custom_properties': List[PropertyValue],
            'end_date_time': datetime,
            'event_cancelled': bool,
            'event_description': str,
            'event_name': str,
            'event_organizer': str,
            'event_type': str,
            'event_url': str,
            'external_event_id': str,
            'id': str,
            'no_shows': int,
            'registrants': int,
            'start_date_time': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'attendees': 'attendees',
            'cancellations': 'cancellations',
            'created_at': 'createdAt',
            'custom_properties': 'customProperties',
            'end_date_time': 'endDateTime',
            'event_cancelled': 'eventCancelled',
            'event_description': 'eventDescription',
            'event_name': 'eventName',
            'event_organizer': 'eventOrganizer',
            'event_type': 'eventType',
            'event_url': 'eventUrl',
            'external_event_id': 'externalEventId',
            'id': 'id',
            'no_shows': 'noShows',
            'registrants': 'registrants',
            'start_date_time': 'startDateTime',
            'updated_at': 'updatedAt'
        }

        self._attendees = attendees
        self._cancellations = cancellations
        self._created_at = created_at
        self._custom_properties = custom_properties
        self._end_date_time = end_date_time
        self._event_cancelled = event_cancelled
        self._event_description = event_description
        self._event_name = event_name
        self._event_organizer = event_organizer
        self._event_type = event_type
        self._event_url = event_url
        self._external_event_id = external_event_id
        self._id = id
        self._no_shows = no_shows
        self._registrants = registrants
        self._start_date_time = start_date_time
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MarketingEventPublicReadResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MarketingEventPublicReadResponse of this MarketingEventPublicReadResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attendees(self):
        """Gets the attendees of this MarketingEventPublicReadResponse.

        The number of HubSpot contacts that attended this marketing event.

        :return: The attendees of this MarketingEventPublicReadResponse.
        :rtype: int
        """
        return self._attendees

    @attendees.setter
    def attendees(self, attendees):
        """Sets the attendees of this MarketingEventPublicReadResponse.

        The number of HubSpot contacts that attended this marketing event.

        :param attendees: The attendees of this MarketingEventPublicReadResponse.
        :type attendees: int
        """
        if attendees is None:
            raise ValueError("Invalid value for `attendees`, must not be `None`")

        self._attendees = attendees

    @property
    def cancellations(self):
        """Gets the cancellations of this MarketingEventPublicReadResponse.

        The number of HubSpot contacts that registered for this marketing event, but later cancelled their registration.

        :return: The cancellations of this MarketingEventPublicReadResponse.
        :rtype: int
        """
        return self._cancellations

    @cancellations.setter
    def cancellations(self, cancellations):
        """Sets the cancellations of this MarketingEventPublicReadResponse.

        The number of HubSpot contacts that registered for this marketing event, but later cancelled their registration.

        :param cancellations: The cancellations of this MarketingEventPublicReadResponse.
        :type cancellations: int
        """
        if cancellations is None:
            raise ValueError("Invalid value for `cancellations`, must not be `None`")

        self._cancellations = cancellations

    @property
    def created_at(self):
        """Gets the created_at of this MarketingEventPublicReadResponse.

        

        :return: The created_at of this MarketingEventPublicReadResponse.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MarketingEventPublicReadResponse.

        

        :param created_at: The created_at of this MarketingEventPublicReadResponse.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def custom_properties(self):
        """Gets the custom_properties of this MarketingEventPublicReadResponse.

        A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set. In order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts. 

        :return: The custom_properties of this MarketingEventPublicReadResponse.
        :rtype: List[PropertyValue]
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this MarketingEventPublicReadResponse.

        A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set. In order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts. 

        :param custom_properties: The custom_properties of this MarketingEventPublicReadResponse.
        :type custom_properties: List[PropertyValue]
        """

        self._custom_properties = custom_properties

    @property
    def end_date_time(self):
        """Gets the end_date_time of this MarketingEventPublicReadResponse.

        The end date and time of the marketing event.

        :return: The end_date_time of this MarketingEventPublicReadResponse.
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this MarketingEventPublicReadResponse.

        The end date and time of the marketing event.

        :param end_date_time: The end_date_time of this MarketingEventPublicReadResponse.
        :type end_date_time: datetime
        """

        self._end_date_time = end_date_time

    @property
    def event_cancelled(self):
        """Gets the event_cancelled of this MarketingEventPublicReadResponse.

        Indicates if the marketing event has been cancelled.

        :return: The event_cancelled of this MarketingEventPublicReadResponse.
        :rtype: bool
        """
        return self._event_cancelled

    @event_cancelled.setter
    def event_cancelled(self, event_cancelled):
        """Sets the event_cancelled of this MarketingEventPublicReadResponse.

        Indicates if the marketing event has been cancelled.

        :param event_cancelled: The event_cancelled of this MarketingEventPublicReadResponse.
        :type event_cancelled: bool
        """

        self._event_cancelled = event_cancelled

    @property
    def event_description(self):
        """Gets the event_description of this MarketingEventPublicReadResponse.

        The description of the marketing event.

        :return: The event_description of this MarketingEventPublicReadResponse.
        :rtype: str
        """
        return self._event_description

    @event_description.setter
    def event_description(self, event_description):
        """Sets the event_description of this MarketingEventPublicReadResponse.

        The description of the marketing event.

        :param event_description: The event_description of this MarketingEventPublicReadResponse.
        :type event_description: str
        """

        self._event_description = event_description

    @property
    def event_name(self):
        """Gets the event_name of this MarketingEventPublicReadResponse.

        The name of the marketing event.

        :return: The event_name of this MarketingEventPublicReadResponse.
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this MarketingEventPublicReadResponse.

        The name of the marketing event.

        :param event_name: The event_name of this MarketingEventPublicReadResponse.
        :type event_name: str
        """
        if event_name is None:
            raise ValueError("Invalid value for `event_name`, must not be `None`")

        self._event_name = event_name

    @property
    def event_organizer(self):
        """Gets the event_organizer of this MarketingEventPublicReadResponse.

        The name of the organizer of the marketing event.

        :return: The event_organizer of this MarketingEventPublicReadResponse.
        :rtype: str
        """
        return self._event_organizer

    @event_organizer.setter
    def event_organizer(self, event_organizer):
        """Sets the event_organizer of this MarketingEventPublicReadResponse.

        The name of the organizer of the marketing event.

        :param event_organizer: The event_organizer of this MarketingEventPublicReadResponse.
        :type event_organizer: str
        """
        if event_organizer is None:
            raise ValueError("Invalid value for `event_organizer`, must not be `None`")

        self._event_organizer = event_organizer

    @property
    def event_type(self):
        """Gets the event_type of this MarketingEventPublicReadResponse.

        The type of the marketing event.

        :return: The event_type of this MarketingEventPublicReadResponse.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this MarketingEventPublicReadResponse.

        The type of the marketing event.

        :param event_type: The event_type of this MarketingEventPublicReadResponse.
        :type event_type: str
        """

        self._event_type = event_type

    @property
    def event_url(self):
        """Gets the event_url of this MarketingEventPublicReadResponse.

        A URL in the external event application where the marketing event can be managed.

        :return: The event_url of this MarketingEventPublicReadResponse.
        :rtype: str
        """
        return self._event_url

    @event_url.setter
    def event_url(self, event_url):
        """Sets the event_url of this MarketingEventPublicReadResponse.

        A URL in the external event application where the marketing event can be managed.

        :param event_url: The event_url of this MarketingEventPublicReadResponse.
        :type event_url: str
        """

        self._event_url = event_url

    @property
    def external_event_id(self):
        """Gets the external_event_id of this MarketingEventPublicReadResponse.

        The id of the marketing event in the external event application.

        :return: The external_event_id of this MarketingEventPublicReadResponse.
        :rtype: str
        """
        return self._external_event_id

    @external_event_id.setter
    def external_event_id(self, external_event_id):
        """Sets the external_event_id of this MarketingEventPublicReadResponse.

        The id of the marketing event in the external event application.

        :param external_event_id: The external_event_id of this MarketingEventPublicReadResponse.
        :type external_event_id: str
        """
        if external_event_id is None:
            raise ValueError("Invalid value for `external_event_id`, must not be `None`")

        self._external_event_id = external_event_id

    @property
    def id(self):
        """Gets the id of this MarketingEventPublicReadResponse.

        

        :return: The id of this MarketingEventPublicReadResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MarketingEventPublicReadResponse.

        

        :param id: The id of this MarketingEventPublicReadResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def no_shows(self):
        """Gets the no_shows of this MarketingEventPublicReadResponse.

        The number of HubSpot contacts that registered for this marketing event, but did not attend. This field only had a value when the event is over.

        :return: The no_shows of this MarketingEventPublicReadResponse.
        :rtype: int
        """
        return self._no_shows

    @no_shows.setter
    def no_shows(self, no_shows):
        """Sets the no_shows of this MarketingEventPublicReadResponse.

        The number of HubSpot contacts that registered for this marketing event, but did not attend. This field only had a value when the event is over.

        :param no_shows: The no_shows of this MarketingEventPublicReadResponse.
        :type no_shows: int
        """
        if no_shows is None:
            raise ValueError("Invalid value for `no_shows`, must not be `None`")

        self._no_shows = no_shows

    @property
    def registrants(self):
        """Gets the registrants of this MarketingEventPublicReadResponse.

        The number of HubSpot contacts that registered for this marketing event.

        :return: The registrants of this MarketingEventPublicReadResponse.
        :rtype: int
        """
        return self._registrants

    @registrants.setter
    def registrants(self, registrants):
        """Sets the registrants of this MarketingEventPublicReadResponse.

        The number of HubSpot contacts that registered for this marketing event.

        :param registrants: The registrants of this MarketingEventPublicReadResponse.
        :type registrants: int
        """
        if registrants is None:
            raise ValueError("Invalid value for `registrants`, must not be `None`")

        self._registrants = registrants

    @property
    def start_date_time(self):
        """Gets the start_date_time of this MarketingEventPublicReadResponse.

        The start date and time of the marketing event.

        :return: The start_date_time of this MarketingEventPublicReadResponse.
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this MarketingEventPublicReadResponse.

        The start date and time of the marketing event.

        :param start_date_time: The start_date_time of this MarketingEventPublicReadResponse.
        :type start_date_time: datetime
        """

        self._start_date_time = start_date_time

    @property
    def updated_at(self):
        """Gets the updated_at of this MarketingEventPublicReadResponse.

        

        :return: The updated_at of this MarketingEventPublicReadResponse.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MarketingEventPublicReadResponse.

        

        :param updated_at: The updated_at of this MarketingEventPublicReadResponse.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
