# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MarketingEventSubscriber(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interaction_date_time: int=None, properties: Dict[str, str]=None, vid: int=None):
        """MarketingEventSubscriber - a model defined in OpenAPI

        :param interaction_date_time: The interaction_date_time of this MarketingEventSubscriber.
        :param properties: The properties of this MarketingEventSubscriber.
        :param vid: The vid of this MarketingEventSubscriber.
        """
        self.openapi_types = {
            'interaction_date_time': int,
            'properties': Dict[str, str],
            'vid': int
        }

        self.attribute_map = {
            'interaction_date_time': 'interactionDateTime',
            'properties': 'properties',
            'vid': 'vid'
        }

        self._interaction_date_time = interaction_date_time
        self._properties = properties
        self._vid = vid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MarketingEventSubscriber':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MarketingEventSubscriber of this MarketingEventSubscriber.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interaction_date_time(self):
        """Gets the interaction_date_time of this MarketingEventSubscriber.

        The date and time at which the contact subscribed to the event.

        :return: The interaction_date_time of this MarketingEventSubscriber.
        :rtype: int
        """
        return self._interaction_date_time

    @interaction_date_time.setter
    def interaction_date_time(self, interaction_date_time):
        """Sets the interaction_date_time of this MarketingEventSubscriber.

        The date and time at which the contact subscribed to the event.

        :param interaction_date_time: The interaction_date_time of this MarketingEventSubscriber.
        :type interaction_date_time: int
        """
        if interaction_date_time is None:
            raise ValueError("Invalid value for `interaction_date_time`, must not be `None`")

        self._interaction_date_time = interaction_date_time

    @property
    def properties(self):
        """Gets the properties of this MarketingEventSubscriber.


        :return: The properties of this MarketingEventSubscriber.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this MarketingEventSubscriber.


        :param properties: The properties of this MarketingEventSubscriber.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def vid(self):
        """Gets the vid of this MarketingEventSubscriber.


        :return: The vid of this MarketingEventSubscriber.
        :rtype: int
        """
        return self._vid

    @vid.setter
    def vid(self, vid):
        """Sets the vid of this MarketingEventSubscriber.


        :param vid: The vid of this MarketingEventSubscriber.
        :type vid: int
        """

        self._vid = vid
