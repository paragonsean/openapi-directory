# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.property_value import PropertyValue
from openapi_server import util


class MarketingEventUpdateRequestParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_properties: List[PropertyValue]=None, end_date_time: datetime=None, event_cancelled: bool=None, event_description: str=None, event_name: str=None, event_organizer: str=None, event_type: str=None, event_url: str=None, start_date_time: datetime=None):
        """MarketingEventUpdateRequestParams - a model defined in OpenAPI

        :param custom_properties: The custom_properties of this MarketingEventUpdateRequestParams.
        :param end_date_time: The end_date_time of this MarketingEventUpdateRequestParams.
        :param event_cancelled: The event_cancelled of this MarketingEventUpdateRequestParams.
        :param event_description: The event_description of this MarketingEventUpdateRequestParams.
        :param event_name: The event_name of this MarketingEventUpdateRequestParams.
        :param event_organizer: The event_organizer of this MarketingEventUpdateRequestParams.
        :param event_type: The event_type of this MarketingEventUpdateRequestParams.
        :param event_url: The event_url of this MarketingEventUpdateRequestParams.
        :param start_date_time: The start_date_time of this MarketingEventUpdateRequestParams.
        """
        self.openapi_types = {
            'custom_properties': List[PropertyValue],
            'end_date_time': datetime,
            'event_cancelled': bool,
            'event_description': str,
            'event_name': str,
            'event_organizer': str,
            'event_type': str,
            'event_url': str,
            'start_date_time': datetime
        }

        self.attribute_map = {
            'custom_properties': 'customProperties',
            'end_date_time': 'endDateTime',
            'event_cancelled': 'eventCancelled',
            'event_description': 'eventDescription',
            'event_name': 'eventName',
            'event_organizer': 'eventOrganizer',
            'event_type': 'eventType',
            'event_url': 'eventUrl',
            'start_date_time': 'startDateTime'
        }

        self._custom_properties = custom_properties
        self._end_date_time = end_date_time
        self._event_cancelled = event_cancelled
        self._event_description = event_description
        self._event_name = event_name
        self._event_organizer = event_organizer
        self._event_type = event_type
        self._event_url = event_url
        self._start_date_time = start_date_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MarketingEventUpdateRequestParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MarketingEventUpdateRequestParams of this MarketingEventUpdateRequestParams.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_properties(self):
        """Gets the custom_properties of this MarketingEventUpdateRequestParams.

        A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set. In order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts. 

        :return: The custom_properties of this MarketingEventUpdateRequestParams.
        :rtype: List[PropertyValue]
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this MarketingEventUpdateRequestParams.

        A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set. In order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts. 

        :param custom_properties: The custom_properties of this MarketingEventUpdateRequestParams.
        :type custom_properties: List[PropertyValue]
        """

        self._custom_properties = custom_properties

    @property
    def end_date_time(self):
        """Gets the end_date_time of this MarketingEventUpdateRequestParams.

        The end date and time of the marketing event.

        :return: The end_date_time of this MarketingEventUpdateRequestParams.
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this MarketingEventUpdateRequestParams.

        The end date and time of the marketing event.

        :param end_date_time: The end_date_time of this MarketingEventUpdateRequestParams.
        :type end_date_time: datetime
        """

        self._end_date_time = end_date_time

    @property
    def event_cancelled(self):
        """Gets the event_cancelled of this MarketingEventUpdateRequestParams.

        Indicates if the marketing event has been cancelled. Defaults to `false`

        :return: The event_cancelled of this MarketingEventUpdateRequestParams.
        :rtype: bool
        """
        return self._event_cancelled

    @event_cancelled.setter
    def event_cancelled(self, event_cancelled):
        """Sets the event_cancelled of this MarketingEventUpdateRequestParams.

        Indicates if the marketing event has been cancelled. Defaults to `false`

        :param event_cancelled: The event_cancelled of this MarketingEventUpdateRequestParams.
        :type event_cancelled: bool
        """

        self._event_cancelled = event_cancelled

    @property
    def event_description(self):
        """Gets the event_description of this MarketingEventUpdateRequestParams.

        The description of the marketing event.

        :return: The event_description of this MarketingEventUpdateRequestParams.
        :rtype: str
        """
        return self._event_description

    @event_description.setter
    def event_description(self, event_description):
        """Sets the event_description of this MarketingEventUpdateRequestParams.

        The description of the marketing event.

        :param event_description: The event_description of this MarketingEventUpdateRequestParams.
        :type event_description: str
        """

        self._event_description = event_description

    @property
    def event_name(self):
        """Gets the event_name of this MarketingEventUpdateRequestParams.

        The name of the marketing event.

        :return: The event_name of this MarketingEventUpdateRequestParams.
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this MarketingEventUpdateRequestParams.

        The name of the marketing event.

        :param event_name: The event_name of this MarketingEventUpdateRequestParams.
        :type event_name: str
        """

        self._event_name = event_name

    @property
    def event_organizer(self):
        """Gets the event_organizer of this MarketingEventUpdateRequestParams.

        The name of the organizer of the marketing event.

        :return: The event_organizer of this MarketingEventUpdateRequestParams.
        :rtype: str
        """
        return self._event_organizer

    @event_organizer.setter
    def event_organizer(self, event_organizer):
        """Sets the event_organizer of this MarketingEventUpdateRequestParams.

        The name of the organizer of the marketing event.

        :param event_organizer: The event_organizer of this MarketingEventUpdateRequestParams.
        :type event_organizer: str
        """

        self._event_organizer = event_organizer

    @property
    def event_type(self):
        """Gets the event_type of this MarketingEventUpdateRequestParams.

        Describes what type of event this is.  For example: `WEBINAR`, `CONFERENCE`, `WORKSHOP`

        :return: The event_type of this MarketingEventUpdateRequestParams.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this MarketingEventUpdateRequestParams.

        Describes what type of event this is.  For example: `WEBINAR`, `CONFERENCE`, `WORKSHOP`

        :param event_type: The event_type of this MarketingEventUpdateRequestParams.
        :type event_type: str
        """

        self._event_type = event_type

    @property
    def event_url(self):
        """Gets the event_url of this MarketingEventUpdateRequestParams.

        A URL in the external event application where the marketing event can be managed.

        :return: The event_url of this MarketingEventUpdateRequestParams.
        :rtype: str
        """
        return self._event_url

    @event_url.setter
    def event_url(self, event_url):
        """Sets the event_url of this MarketingEventUpdateRequestParams.

        A URL in the external event application where the marketing event can be managed.

        :param event_url: The event_url of this MarketingEventUpdateRequestParams.
        :type event_url: str
        """

        self._event_url = event_url

    @property
    def start_date_time(self):
        """Gets the start_date_time of this MarketingEventUpdateRequestParams.

        The start date and time of the marketing event.

        :return: The start_date_time of this MarketingEventUpdateRequestParams.
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this MarketingEventUpdateRequestParams.

        The start date and time of the marketing event.

        :param start_date_time: The start_date_time of this MarketingEventUpdateRequestParams.
        :type start_date_time: datetime
        """

        self._start_date_time = start_date_time
