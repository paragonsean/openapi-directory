# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PropertyValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_large_value: bool=None, name: str=None, persistence_timestamp: int=None, request_id: str=None, selected_by_user: bool=None, selected_by_user_timestamp: int=None, source: str=None, source_id: str=None, source_label: str=None, source_metadata: str=None, source_vid: List[int]=None, timestamp: int=None, updated_by_user_id: int=None, use_timestamp_as_persistence_timestamp: bool=None, value: str=None):
        """PropertyValue - a model defined in OpenAPI

        :param is_large_value: The is_large_value of this PropertyValue.
        :param name: The name of this PropertyValue.
        :param persistence_timestamp: The persistence_timestamp of this PropertyValue.
        :param request_id: The request_id of this PropertyValue.
        :param selected_by_user: The selected_by_user of this PropertyValue.
        :param selected_by_user_timestamp: The selected_by_user_timestamp of this PropertyValue.
        :param source: The source of this PropertyValue.
        :param source_id: The source_id of this PropertyValue.
        :param source_label: The source_label of this PropertyValue.
        :param source_metadata: The source_metadata of this PropertyValue.
        :param source_vid: The source_vid of this PropertyValue.
        :param timestamp: The timestamp of this PropertyValue.
        :param updated_by_user_id: The updated_by_user_id of this PropertyValue.
        :param use_timestamp_as_persistence_timestamp: The use_timestamp_as_persistence_timestamp of this PropertyValue.
        :param value: The value of this PropertyValue.
        """
        self.openapi_types = {
            'is_large_value': bool,
            'name': str,
            'persistence_timestamp': int,
            'request_id': str,
            'selected_by_user': bool,
            'selected_by_user_timestamp': int,
            'source': str,
            'source_id': str,
            'source_label': str,
            'source_metadata': str,
            'source_vid': List[int],
            'timestamp': int,
            'updated_by_user_id': int,
            'use_timestamp_as_persistence_timestamp': bool,
            'value': str
        }

        self.attribute_map = {
            'is_large_value': 'isLargeValue',
            'name': 'name',
            'persistence_timestamp': 'persistenceTimestamp',
            'request_id': 'requestId',
            'selected_by_user': 'selectedByUser',
            'selected_by_user_timestamp': 'selectedByUserTimestamp',
            'source': 'source',
            'source_id': 'sourceId',
            'source_label': 'sourceLabel',
            'source_metadata': 'sourceMetadata',
            'source_vid': 'sourceVid',
            'timestamp': 'timestamp',
            'updated_by_user_id': 'updatedByUserId',
            'use_timestamp_as_persistence_timestamp': 'useTimestampAsPersistenceTimestamp',
            'value': 'value'
        }

        self._is_large_value = is_large_value
        self._name = name
        self._persistence_timestamp = persistence_timestamp
        self._request_id = request_id
        self._selected_by_user = selected_by_user
        self._selected_by_user_timestamp = selected_by_user_timestamp
        self._source = source
        self._source_id = source_id
        self._source_label = source_label
        self._source_metadata = source_metadata
        self._source_vid = source_vid
        self._timestamp = timestamp
        self._updated_by_user_id = updated_by_user_id
        self._use_timestamp_as_persistence_timestamp = use_timestamp_as_persistence_timestamp
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PropertyValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PropertyValue of this PropertyValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_large_value(self):
        """Gets the is_large_value of this PropertyValue.


        :return: The is_large_value of this PropertyValue.
        :rtype: bool
        """
        return self._is_large_value

    @is_large_value.setter
    def is_large_value(self, is_large_value):
        """Sets the is_large_value of this PropertyValue.


        :param is_large_value: The is_large_value of this PropertyValue.
        :type is_large_value: bool
        """

        self._is_large_value = is_large_value

    @property
    def name(self):
        """Gets the name of this PropertyValue.

        

        :return: The name of this PropertyValue.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PropertyValue.

        

        :param name: The name of this PropertyValue.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def persistence_timestamp(self):
        """Gets the persistence_timestamp of this PropertyValue.


        :return: The persistence_timestamp of this PropertyValue.
        :rtype: int
        """
        return self._persistence_timestamp

    @persistence_timestamp.setter
    def persistence_timestamp(self, persistence_timestamp):
        """Sets the persistence_timestamp of this PropertyValue.


        :param persistence_timestamp: The persistence_timestamp of this PropertyValue.
        :type persistence_timestamp: int
        """

        self._persistence_timestamp = persistence_timestamp

    @property
    def request_id(self):
        """Gets the request_id of this PropertyValue.

        

        :return: The request_id of this PropertyValue.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this PropertyValue.

        

        :param request_id: The request_id of this PropertyValue.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")

        self._request_id = request_id

    @property
    def selected_by_user(self):
        """Gets the selected_by_user of this PropertyValue.

        

        :return: The selected_by_user of this PropertyValue.
        :rtype: bool
        """
        return self._selected_by_user

    @selected_by_user.setter
    def selected_by_user(self, selected_by_user):
        """Sets the selected_by_user of this PropertyValue.

        

        :param selected_by_user: The selected_by_user of this PropertyValue.
        :type selected_by_user: bool
        """
        if selected_by_user is None:
            raise ValueError("Invalid value for `selected_by_user`, must not be `None`")

        self._selected_by_user = selected_by_user

    @property
    def selected_by_user_timestamp(self):
        """Gets the selected_by_user_timestamp of this PropertyValue.

        

        :return: The selected_by_user_timestamp of this PropertyValue.
        :rtype: int
        """
        return self._selected_by_user_timestamp

    @selected_by_user_timestamp.setter
    def selected_by_user_timestamp(self, selected_by_user_timestamp):
        """Sets the selected_by_user_timestamp of this PropertyValue.

        

        :param selected_by_user_timestamp: The selected_by_user_timestamp of this PropertyValue.
        :type selected_by_user_timestamp: int
        """
        if selected_by_user_timestamp is None:
            raise ValueError("Invalid value for `selected_by_user_timestamp`, must not be `None`")

        self._selected_by_user_timestamp = selected_by_user_timestamp

    @property
    def source(self):
        """Gets the source of this PropertyValue.

        

        :return: The source of this PropertyValue.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this PropertyValue.

        

        :param source: The source of this PropertyValue.
        :type source: str
        """
        allowed_values = ["IMPORT", "API", "FORM", "ANALYTICS", "MIGRATION", "SALESFORCE", "INTEGRATION", "CONTACTS_WEB", "WAL_INCREMENTAL", "TASK", "EMAIL", "WORKFLOWS", "CALCULATED", "SOCIAL", "BATCH_UPDATE", "SIGNALS", "BIDEN", "DEFAULT", "COMPANIES", "DEALS", "ASSISTS", "PRESENTATIONS", "TALLY", "SIDEKICK", "CRM_UI", "MERGE_CONTACTS", "PORTAL_USER_ASSOCIATOR", "INTEGRATIONS_PLATFORM", "BCC_TO_CRM", "FORWARD_TO_CRM", "ENGAGEMENTS", "SALES", "HEISENBERG", "LEADIN", "GMAIL_INTEGRATION", "ACADEMY", "SALES_MESSAGES", "AVATARS_SERVICE", "MERGE_COMPANIES", "SEQUENCES", "COMPANY_FAMILIES", "MOBILE_IOS", "MOBILE_ANDROID", "CONTACTS", "ASSOCIATIONS", "EXTENSION", "SUCCESS", "BOT", "INTEGRATIONS_SYNC", "AUTOMATION_PLATFORM", "CONVERSATIONS", "EMAIL_INTEGRATION", "CONTENT_MEMBERSHIP", "QUOTES", "BET_ASSIGNMENT", "QUOTAS", "BET_CRM_CONNECTOR", "MEETINGS", "MERGE_OBJECTS", "RECYCLING_BIN", "ADS", "AI_GROUP", "COMMUNICATOR", "SETTINGS", "PROPERTY_SETTINGS", "PIPELINE_SETTINGS", "COMPANY_INSIGHTS", "BEHAVIORAL_EVENTS", "PAYMENTS", "GOALS", "PORTAL_OBJECT_SYNC", "APPROVALS", "FILE_MANAGER", "MARKETPLACE", "INTERNAL_PROCESSING", "FORECASTING", "SLACK_INTEGRATION", "CRM_UI_BULK_ACTION", "WORKFLOW_CONTACT_DELETE_ACTION"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def source_id(self):
        """Gets the source_id of this PropertyValue.

        

        :return: The source_id of this PropertyValue.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this PropertyValue.

        

        :param source_id: The source_id of this PropertyValue.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def source_label(self):
        """Gets the source_label of this PropertyValue.

        

        :return: The source_label of this PropertyValue.
        :rtype: str
        """
        return self._source_label

    @source_label.setter
    def source_label(self, source_label):
        """Sets the source_label of this PropertyValue.

        

        :param source_label: The source_label of this PropertyValue.
        :type source_label: str
        """
        if source_label is None:
            raise ValueError("Invalid value for `source_label`, must not be `None`")

        self._source_label = source_label

    @property
    def source_metadata(self):
        """Gets the source_metadata of this PropertyValue.

        Source metadata encoded as a base64 string. For example: `ZXhhbXBsZSBzdHJpbmc=`

        :return: The source_metadata of this PropertyValue.
        :rtype: str
        """
        return self._source_metadata

    @source_metadata.setter
    def source_metadata(self, source_metadata):
        """Sets the source_metadata of this PropertyValue.

        Source metadata encoded as a base64 string. For example: `ZXhhbXBsZSBzdHJpbmc=`

        :param source_metadata: The source_metadata of this PropertyValue.
        :type source_metadata: str
        """
        if source_metadata is None:
            raise ValueError("Invalid value for `source_metadata`, must not be `None`")

        self._source_metadata = source_metadata

    @property
    def source_vid(self):
        """Gets the source_vid of this PropertyValue.

        

        :return: The source_vid of this PropertyValue.
        :rtype: List[int]
        """
        return self._source_vid

    @source_vid.setter
    def source_vid(self, source_vid):
        """Sets the source_vid of this PropertyValue.

        

        :param source_vid: The source_vid of this PropertyValue.
        :type source_vid: List[int]
        """
        if source_vid is None:
            raise ValueError("Invalid value for `source_vid`, must not be `None`")

        self._source_vid = source_vid

    @property
    def timestamp(self):
        """Gets the timestamp of this PropertyValue.

        

        :return: The timestamp of this PropertyValue.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this PropertyValue.

        

        :param timestamp: The timestamp of this PropertyValue.
        :type timestamp: int
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def updated_by_user_id(self):
        """Gets the updated_by_user_id of this PropertyValue.


        :return: The updated_by_user_id of this PropertyValue.
        :rtype: int
        """
        return self._updated_by_user_id

    @updated_by_user_id.setter
    def updated_by_user_id(self, updated_by_user_id):
        """Sets the updated_by_user_id of this PropertyValue.


        :param updated_by_user_id: The updated_by_user_id of this PropertyValue.
        :type updated_by_user_id: int
        """

        self._updated_by_user_id = updated_by_user_id

    @property
    def use_timestamp_as_persistence_timestamp(self):
        """Gets the use_timestamp_as_persistence_timestamp of this PropertyValue.


        :return: The use_timestamp_as_persistence_timestamp of this PropertyValue.
        :rtype: bool
        """
        return self._use_timestamp_as_persistence_timestamp

    @use_timestamp_as_persistence_timestamp.setter
    def use_timestamp_as_persistence_timestamp(self, use_timestamp_as_persistence_timestamp):
        """Sets the use_timestamp_as_persistence_timestamp of this PropertyValue.


        :param use_timestamp_as_persistence_timestamp: The use_timestamp_as_persistence_timestamp of this PropertyValue.
        :type use_timestamp_as_persistence_timestamp: bool
        """

        self._use_timestamp_as_persistence_timestamp = use_timestamp_as_persistence_timestamp

    @property
    def value(self):
        """Gets the value of this PropertyValue.

        

        :return: The value of this PropertyValue.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PropertyValue.

        

        :param value: The value of this PropertyValue.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
