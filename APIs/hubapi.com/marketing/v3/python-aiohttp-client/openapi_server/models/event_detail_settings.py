# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventDetailSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: int=None, event_details_url: str=None):
        """EventDetailSettings - a model defined in OpenAPI

        :param app_id: The app_id of this EventDetailSettings.
        :param event_details_url: The event_details_url of this EventDetailSettings.
        """
        self.openapi_types = {
            'app_id': int,
            'event_details_url': str
        }

        self.attribute_map = {
            'app_id': 'appId',
            'event_details_url': 'eventDetailsUrl'
        }

        self._app_id = app_id
        self._event_details_url = event_details_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventDetailSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventDetailSettings of this EventDetailSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this EventDetailSettings.

        The id of the application the settings are for

        :return: The app_id of this EventDetailSettings.
        :rtype: int
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this EventDetailSettings.

        The id of the application the settings are for

        :param app_id: The app_id of this EventDetailSettings.
        :type app_id: int
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def event_details_url(self):
        """Gets the event_details_url of this EventDetailSettings.

        The url that will be used to fetch marketing event details by id

        :return: The event_details_url of this EventDetailSettings.
        :rtype: str
        """
        return self._event_details_url

    @event_details_url.setter
    def event_details_url(self, event_details_url):
        """Sets the event_details_url of this EventDetailSettings.

        The url that will be used to fetch marketing event details by id

        :param event_details_url: The event_details_url of this EventDetailSettings.
        :type event_details_url: str
        """
        if event_details_url is None:
            raise ValueError("Invalid value for `event_details_url`, must not be `None`")

        self._event_details_url = event_details_url
