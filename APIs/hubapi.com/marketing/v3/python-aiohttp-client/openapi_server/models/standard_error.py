# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_detail import ErrorDetail
from openapi_server import util


class StandardError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, context: Dict[str, List[str]]=None, errors: List[ErrorDetail]=None, id: str=None, links: Dict[str, str]=None, message: str=None, status: str=None, sub_category: object=None):
        """StandardError - a model defined in OpenAPI

        :param category: The category of this StandardError.
        :param context: The context of this StandardError.
        :param errors: The errors of this StandardError.
        :param id: The id of this StandardError.
        :param links: The links of this StandardError.
        :param message: The message of this StandardError.
        :param status: The status of this StandardError.
        :param sub_category: The sub_category of this StandardError.
        """
        self.openapi_types = {
            'category': str,
            'context': Dict[str, List[str]],
            'errors': List[ErrorDetail],
            'id': str,
            'links': Dict[str, str],
            'message': str,
            'status': str,
            'sub_category': object
        }

        self.attribute_map = {
            'category': 'category',
            'context': 'context',
            'errors': 'errors',
            'id': 'id',
            'links': 'links',
            'message': 'message',
            'status': 'status',
            'sub_category': 'subCategory'
        }

        self._category = category
        self._context = context
        self._errors = errors
        self._id = id
        self._links = links
        self._message = message
        self._status = status
        self._sub_category = sub_category

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StandardError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StandardError of this StandardError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this StandardError.

        

        :return: The category of this StandardError.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this StandardError.

        

        :param category: The category of this StandardError.
        :type category: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def context(self):
        """Gets the context of this StandardError.

        

        :return: The context of this StandardError.
        :rtype: Dict[str, List[str]]
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this StandardError.

        

        :param context: The context of this StandardError.
        :type context: Dict[str, List[str]]
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")

        self._context = context

    @property
    def errors(self):
        """Gets the errors of this StandardError.

        

        :return: The errors of this StandardError.
        :rtype: List[ErrorDetail]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this StandardError.

        

        :param errors: The errors of this StandardError.
        :type errors: List[ErrorDetail]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")

        self._errors = errors

    @property
    def id(self):
        """Gets the id of this StandardError.

        

        :return: The id of this StandardError.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StandardError.

        

        :param id: The id of this StandardError.
        :type id: str
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this StandardError.

        

        :return: The links of this StandardError.
        :rtype: Dict[str, str]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this StandardError.

        

        :param links: The links of this StandardError.
        :type links: Dict[str, str]
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def message(self):
        """Gets the message of this StandardError.

        

        :return: The message of this StandardError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this StandardError.

        

        :param message: The message of this StandardError.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def status(self):
        """Gets the status of this StandardError.

        

        :return: The status of this StandardError.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StandardError.

        

        :param status: The status of this StandardError.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def sub_category(self):
        """Gets the sub_category of this StandardError.

        

        :return: The sub_category of this StandardError.
        :rtype: object
        """
        return self._sub_category

    @sub_category.setter
    def sub_category(self, sub_category):
        """Sets the sub_category of this StandardError.

        

        :param sub_category: The sub_category of this StandardError.
        :type sub_category: object
        """

        self._sub_category = sub_category
