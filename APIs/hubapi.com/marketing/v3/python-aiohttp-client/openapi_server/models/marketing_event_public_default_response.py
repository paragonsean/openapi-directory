# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.property_value import PropertyValue
from openapi_server import util


class MarketingEventPublicDefaultResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, custom_properties: List[PropertyValue]=None, end_date_time: datetime=None, event_cancelled: bool=None, event_description: str=None, event_name: str=None, event_organizer: str=None, event_type: str=None, event_url: str=None, id: str=None, start_date_time: datetime=None, updated_at: datetime=None):
        """MarketingEventPublicDefaultResponse - a model defined in OpenAPI

        :param created_at: The created_at of this MarketingEventPublicDefaultResponse.
        :param custom_properties: The custom_properties of this MarketingEventPublicDefaultResponse.
        :param end_date_time: The end_date_time of this MarketingEventPublicDefaultResponse.
        :param event_cancelled: The event_cancelled of this MarketingEventPublicDefaultResponse.
        :param event_description: The event_description of this MarketingEventPublicDefaultResponse.
        :param event_name: The event_name of this MarketingEventPublicDefaultResponse.
        :param event_organizer: The event_organizer of this MarketingEventPublicDefaultResponse.
        :param event_type: The event_type of this MarketingEventPublicDefaultResponse.
        :param event_url: The event_url of this MarketingEventPublicDefaultResponse.
        :param id: The id of this MarketingEventPublicDefaultResponse.
        :param start_date_time: The start_date_time of this MarketingEventPublicDefaultResponse.
        :param updated_at: The updated_at of this MarketingEventPublicDefaultResponse.
        """
        self.openapi_types = {
            'created_at': datetime,
            'custom_properties': List[PropertyValue],
            'end_date_time': datetime,
            'event_cancelled': bool,
            'event_description': str,
            'event_name': str,
            'event_organizer': str,
            'event_type': str,
            'event_url': str,
            'id': str,
            'start_date_time': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'custom_properties': 'customProperties',
            'end_date_time': 'endDateTime',
            'event_cancelled': 'eventCancelled',
            'event_description': 'eventDescription',
            'event_name': 'eventName',
            'event_organizer': 'eventOrganizer',
            'event_type': 'eventType',
            'event_url': 'eventUrl',
            'id': 'id',
            'start_date_time': 'startDateTime',
            'updated_at': 'updatedAt'
        }

        self._created_at = created_at
        self._custom_properties = custom_properties
        self._end_date_time = end_date_time
        self._event_cancelled = event_cancelled
        self._event_description = event_description
        self._event_name = event_name
        self._event_organizer = event_organizer
        self._event_type = event_type
        self._event_url = event_url
        self._id = id
        self._start_date_time = start_date_time
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MarketingEventPublicDefaultResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MarketingEventPublicDefaultResponse of this MarketingEventPublicDefaultResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this MarketingEventPublicDefaultResponse.

        

        :return: The created_at of this MarketingEventPublicDefaultResponse.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MarketingEventPublicDefaultResponse.

        

        :param created_at: The created_at of this MarketingEventPublicDefaultResponse.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def custom_properties(self):
        """Gets the custom_properties of this MarketingEventPublicDefaultResponse.

        A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set. In order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts. 

        :return: The custom_properties of this MarketingEventPublicDefaultResponse.
        :rtype: List[PropertyValue]
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this MarketingEventPublicDefaultResponse.

        A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set. In order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts. 

        :param custom_properties: The custom_properties of this MarketingEventPublicDefaultResponse.
        :type custom_properties: List[PropertyValue]
        """

        self._custom_properties = custom_properties

    @property
    def end_date_time(self):
        """Gets the end_date_time of this MarketingEventPublicDefaultResponse.

        The end date and time of the marketing event.

        :return: The end_date_time of this MarketingEventPublicDefaultResponse.
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this MarketingEventPublicDefaultResponse.

        The end date and time of the marketing event.

        :param end_date_time: The end_date_time of this MarketingEventPublicDefaultResponse.
        :type end_date_time: datetime
        """

        self._end_date_time = end_date_time

    @property
    def event_cancelled(self):
        """Gets the event_cancelled of this MarketingEventPublicDefaultResponse.

        Indicates if the marketing event has been cancelled.

        :return: The event_cancelled of this MarketingEventPublicDefaultResponse.
        :rtype: bool
        """
        return self._event_cancelled

    @event_cancelled.setter
    def event_cancelled(self, event_cancelled):
        """Sets the event_cancelled of this MarketingEventPublicDefaultResponse.

        Indicates if the marketing event has been cancelled.

        :param event_cancelled: The event_cancelled of this MarketingEventPublicDefaultResponse.
        :type event_cancelled: bool
        """

        self._event_cancelled = event_cancelled

    @property
    def event_description(self):
        """Gets the event_description of this MarketingEventPublicDefaultResponse.

        The description of the marketing event.

        :return: The event_description of this MarketingEventPublicDefaultResponse.
        :rtype: str
        """
        return self._event_description

    @event_description.setter
    def event_description(self, event_description):
        """Sets the event_description of this MarketingEventPublicDefaultResponse.

        The description of the marketing event.

        :param event_description: The event_description of this MarketingEventPublicDefaultResponse.
        :type event_description: str
        """

        self._event_description = event_description

    @property
    def event_name(self):
        """Gets the event_name of this MarketingEventPublicDefaultResponse.

        The name of the marketing event.

        :return: The event_name of this MarketingEventPublicDefaultResponse.
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this MarketingEventPublicDefaultResponse.

        The name of the marketing event.

        :param event_name: The event_name of this MarketingEventPublicDefaultResponse.
        :type event_name: str
        """
        if event_name is None:
            raise ValueError("Invalid value for `event_name`, must not be `None`")

        self._event_name = event_name

    @property
    def event_organizer(self):
        """Gets the event_organizer of this MarketingEventPublicDefaultResponse.

        The name of the organizer of the marketing event.

        :return: The event_organizer of this MarketingEventPublicDefaultResponse.
        :rtype: str
        """
        return self._event_organizer

    @event_organizer.setter
    def event_organizer(self, event_organizer):
        """Sets the event_organizer of this MarketingEventPublicDefaultResponse.

        The name of the organizer of the marketing event.

        :param event_organizer: The event_organizer of this MarketingEventPublicDefaultResponse.
        :type event_organizer: str
        """
        if event_organizer is None:
            raise ValueError("Invalid value for `event_organizer`, must not be `None`")

        self._event_organizer = event_organizer

    @property
    def event_type(self):
        """Gets the event_type of this MarketingEventPublicDefaultResponse.

        The type of the marketing event.

        :return: The event_type of this MarketingEventPublicDefaultResponse.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this MarketingEventPublicDefaultResponse.

        The type of the marketing event.

        :param event_type: The event_type of this MarketingEventPublicDefaultResponse.
        :type event_type: str
        """

        self._event_type = event_type

    @property
    def event_url(self):
        """Gets the event_url of this MarketingEventPublicDefaultResponse.

        A URL in the external event application where the marketing event can be managed.

        :return: The event_url of this MarketingEventPublicDefaultResponse.
        :rtype: str
        """
        return self._event_url

    @event_url.setter
    def event_url(self, event_url):
        """Sets the event_url of this MarketingEventPublicDefaultResponse.

        A URL in the external event application where the marketing event can be managed.

        :param event_url: The event_url of this MarketingEventPublicDefaultResponse.
        :type event_url: str
        """

        self._event_url = event_url

    @property
    def id(self):
        """Gets the id of this MarketingEventPublicDefaultResponse.

        

        :return: The id of this MarketingEventPublicDefaultResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MarketingEventPublicDefaultResponse.

        

        :param id: The id of this MarketingEventPublicDefaultResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def start_date_time(self):
        """Gets the start_date_time of this MarketingEventPublicDefaultResponse.

        The start date and time of the marketing event.

        :return: The start_date_time of this MarketingEventPublicDefaultResponse.
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this MarketingEventPublicDefaultResponse.

        The start date and time of the marketing event.

        :param start_date_time: The start_date_time of this MarketingEventPublicDefaultResponse.
        :type start_date_time: datetime
        """

        self._start_date_time = start_date_time

    @property
    def updated_at(self):
        """Gets the updated_at of this MarketingEventPublicDefaultResponse.

        

        :return: The updated_at of this MarketingEventPublicDefaultResponse.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MarketingEventPublicDefaultResponse.

        

        :param updated_at: The updated_at of this MarketingEventPublicDefaultResponse.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
