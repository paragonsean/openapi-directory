# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MarketingEventEmailSubscriber(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_properties: Dict[str, str]=None, email: str=None, interaction_date_time: int=None, properties: Dict[str, str]=None):
        """MarketingEventEmailSubscriber - a model defined in OpenAPI

        :param contact_properties: The contact_properties of this MarketingEventEmailSubscriber.
        :param email: The email of this MarketingEventEmailSubscriber.
        :param interaction_date_time: The interaction_date_time of this MarketingEventEmailSubscriber.
        :param properties: The properties of this MarketingEventEmailSubscriber.
        """
        self.openapi_types = {
            'contact_properties': Dict[str, str],
            'email': str,
            'interaction_date_time': int,
            'properties': Dict[str, str]
        }

        self.attribute_map = {
            'contact_properties': 'contactProperties',
            'email': 'email',
            'interaction_date_time': 'interactionDateTime',
            'properties': 'properties'
        }

        self._contact_properties = contact_properties
        self._email = email
        self._interaction_date_time = interaction_date_time
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MarketingEventEmailSubscriber':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MarketingEventEmailSubscriber of this MarketingEventEmailSubscriber.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_properties(self):
        """Gets the contact_properties of this MarketingEventEmailSubscriber.


        :return: The contact_properties of this MarketingEventEmailSubscriber.
        :rtype: Dict[str, str]
        """
        return self._contact_properties

    @contact_properties.setter
    def contact_properties(self, contact_properties):
        """Sets the contact_properties of this MarketingEventEmailSubscriber.


        :param contact_properties: The contact_properties of this MarketingEventEmailSubscriber.
        :type contact_properties: Dict[str, str]
        """

        self._contact_properties = contact_properties

    @property
    def email(self):
        """Gets the email of this MarketingEventEmailSubscriber.

        The email address of the contact in HubSpot to associate with the event.

        :return: The email of this MarketingEventEmailSubscriber.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this MarketingEventEmailSubscriber.

        The email address of the contact in HubSpot to associate with the event.

        :param email: The email of this MarketingEventEmailSubscriber.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def interaction_date_time(self):
        """Gets the interaction_date_time of this MarketingEventEmailSubscriber.

        The date and time at which the contact subscribed to the event.

        :return: The interaction_date_time of this MarketingEventEmailSubscriber.
        :rtype: int
        """
        return self._interaction_date_time

    @interaction_date_time.setter
    def interaction_date_time(self, interaction_date_time):
        """Sets the interaction_date_time of this MarketingEventEmailSubscriber.

        The date and time at which the contact subscribed to the event.

        :param interaction_date_time: The interaction_date_time of this MarketingEventEmailSubscriber.
        :type interaction_date_time: int
        """
        if interaction_date_time is None:
            raise ValueError("Invalid value for `interaction_date_time`, must not be `None`")

        self._interaction_date_time = interaction_date_time

    @property
    def properties(self):
        """Gets the properties of this MarketingEventEmailSubscriber.


        :return: The properties of this MarketingEventEmailSubscriber.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this MarketingEventEmailSubscriber.


        :param properties: The properties of this MarketingEventEmailSubscriber.
        :type properties: Dict[str, str]
        """

        self._properties = properties
