/**
 * Marketing Events
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MarketingEvents);
  }
}(this, function(expect, MarketingEvents) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MarketingEvents.MarketingEventPublicDefaultResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MarketingEventPublicDefaultResponse', function() {
    it('should create an instance of MarketingEventPublicDefaultResponse', function() {
      // uncomment below and update the code to test MarketingEventPublicDefaultResponse
      //var instance = new MarketingEvents.MarketingEventPublicDefaultResponse();
      //expect(instance).to.be.a(MarketingEvents.MarketingEventPublicDefaultResponse);
    });

    it('should have the property createdAt (base name: "createdAt")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new MarketingEvents.MarketingEventPublicDefaultResponse();
      //expect(instance).to.be();
    });

    it('should have the property customProperties (base name: "customProperties")', function() {
      // uncomment below and update the code to test the property customProperties
      //var instance = new MarketingEvents.MarketingEventPublicDefaultResponse();
      //expect(instance).to.be();
    });

    it('should have the property endDateTime (base name: "endDateTime")', function() {
      // uncomment below and update the code to test the property endDateTime
      //var instance = new MarketingEvents.MarketingEventPublicDefaultResponse();
      //expect(instance).to.be();
    });

    it('should have the property eventCancelled (base name: "eventCancelled")', function() {
      // uncomment below and update the code to test the property eventCancelled
      //var instance = new MarketingEvents.MarketingEventPublicDefaultResponse();
      //expect(instance).to.be();
    });

    it('should have the property eventDescription (base name: "eventDescription")', function() {
      // uncomment below and update the code to test the property eventDescription
      //var instance = new MarketingEvents.MarketingEventPublicDefaultResponse();
      //expect(instance).to.be();
    });

    it('should have the property eventName (base name: "eventName")', function() {
      // uncomment below and update the code to test the property eventName
      //var instance = new MarketingEvents.MarketingEventPublicDefaultResponse();
      //expect(instance).to.be();
    });

    it('should have the property eventOrganizer (base name: "eventOrganizer")', function() {
      // uncomment below and update the code to test the property eventOrganizer
      //var instance = new MarketingEvents.MarketingEventPublicDefaultResponse();
      //expect(instance).to.be();
    });

    it('should have the property eventType (base name: "eventType")', function() {
      // uncomment below and update the code to test the property eventType
      //var instance = new MarketingEvents.MarketingEventPublicDefaultResponse();
      //expect(instance).to.be();
    });

    it('should have the property eventUrl (base name: "eventUrl")', function() {
      // uncomment below and update the code to test the property eventUrl
      //var instance = new MarketingEvents.MarketingEventPublicDefaultResponse();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MarketingEvents.MarketingEventPublicDefaultResponse();
      //expect(instance).to.be();
    });

    it('should have the property startDateTime (base name: "startDateTime")', function() {
      // uncomment below and update the code to test the property startDateTime
      //var instance = new MarketingEvents.MarketingEventPublicDefaultResponse();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updatedAt")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new MarketingEvents.MarketingEventPublicDefaultResponse();
      //expect(instance).to.be();
    });

  });

}));
