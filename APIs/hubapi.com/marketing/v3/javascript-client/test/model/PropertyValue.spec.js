/**
 * Marketing Events
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MarketingEvents);
  }
}(this, function(expect, MarketingEvents) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MarketingEvents.PropertyValue();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PropertyValue', function() {
    it('should create an instance of PropertyValue', function() {
      // uncomment below and update the code to test PropertyValue
      //var instance = new MarketingEvents.PropertyValue();
      //expect(instance).to.be.a(MarketingEvents.PropertyValue);
    });

    it('should have the property isLargeValue (base name: "isLargeValue")', function() {
      // uncomment below and update the code to test the property isLargeValue
      //var instance = new MarketingEvents.PropertyValue();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MarketingEvents.PropertyValue();
      //expect(instance).to.be();
    });

    it('should have the property persistenceTimestamp (base name: "persistenceTimestamp")', function() {
      // uncomment below and update the code to test the property persistenceTimestamp
      //var instance = new MarketingEvents.PropertyValue();
      //expect(instance).to.be();
    });

    it('should have the property requestId (base name: "requestId")', function() {
      // uncomment below and update the code to test the property requestId
      //var instance = new MarketingEvents.PropertyValue();
      //expect(instance).to.be();
    });

    it('should have the property selectedByUser (base name: "selectedByUser")', function() {
      // uncomment below and update the code to test the property selectedByUser
      //var instance = new MarketingEvents.PropertyValue();
      //expect(instance).to.be();
    });

    it('should have the property selectedByUserTimestamp (base name: "selectedByUserTimestamp")', function() {
      // uncomment below and update the code to test the property selectedByUserTimestamp
      //var instance = new MarketingEvents.PropertyValue();
      //expect(instance).to.be();
    });

    it('should have the property source (base name: "source")', function() {
      // uncomment below and update the code to test the property source
      //var instance = new MarketingEvents.PropertyValue();
      //expect(instance).to.be();
    });

    it('should have the property sourceId (base name: "sourceId")', function() {
      // uncomment below and update the code to test the property sourceId
      //var instance = new MarketingEvents.PropertyValue();
      //expect(instance).to.be();
    });

    it('should have the property sourceLabel (base name: "sourceLabel")', function() {
      // uncomment below and update the code to test the property sourceLabel
      //var instance = new MarketingEvents.PropertyValue();
      //expect(instance).to.be();
    });

    it('should have the property sourceMetadata (base name: "sourceMetadata")', function() {
      // uncomment below and update the code to test the property sourceMetadata
      //var instance = new MarketingEvents.PropertyValue();
      //expect(instance).to.be();
    });

    it('should have the property sourceVid (base name: "sourceVid")', function() {
      // uncomment below and update the code to test the property sourceVid
      //var instance = new MarketingEvents.PropertyValue();
      //expect(instance).to.be();
    });

    it('should have the property timestamp (base name: "timestamp")', function() {
      // uncomment below and update the code to test the property timestamp
      //var instance = new MarketingEvents.PropertyValue();
      //expect(instance).to.be();
    });

    it('should have the property updatedByUserId (base name: "updatedByUserId")', function() {
      // uncomment below and update the code to test the property updatedByUserId
      //var instance = new MarketingEvents.PropertyValue();
      //expect(instance).to.be();
    });

    it('should have the property useTimestampAsPersistenceTimestamp (base name: "useTimestampAsPersistenceTimestamp")', function() {
      // uncomment below and update the code to test the property useTimestampAsPersistenceTimestamp
      //var instance = new MarketingEvents.PropertyValue();
      //expect(instance).to.be();
    });

    it('should have the property value (base name: "value")', function() {
      // uncomment below and update the code to test the property value
      //var instance = new MarketingEvents.PropertyValue();
      //expect(instance).to.be();
    });

  });

}));
