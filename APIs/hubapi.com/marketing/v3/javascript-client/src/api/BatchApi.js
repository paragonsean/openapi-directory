/**
 * Marketing Events
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchInputMarketingEventCreateRequestParams from '../model/BatchInputMarketingEventCreateRequestParams';
import BatchInputMarketingEventExternalUniqueIdentifier from '../model/BatchInputMarketingEventExternalUniqueIdentifier';
import BatchResponseMarketingEventPublicDefaultResponse from '../model/BatchResponseMarketingEventPublicDefaultResponse';
import Error from '../model/Error';

/**
* Batch service.
* @module api/BatchApi
* @version v3
*/
export default class BatchApi {

    /**
    * Constructs a new BatchApi. 
    * @alias module:api/BatchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postMarketingV3MarketingEventsEventsDeleteArchive operation.
     * @callback module:api/BatchApi~postMarketingV3MarketingEventsEventsDeleteArchiveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Error} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete multiple marketing events
     * Bulk delete a number of marketing events in HubSpot
     * @param {module:model/BatchInputMarketingEventExternalUniqueIdentifier} batchInputMarketingEventExternalUniqueIdentifier The details of the marketing events to delete
     * @param {module:api/BatchApi~postMarketingV3MarketingEventsEventsDeleteArchiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Error}
     */
    postMarketingV3MarketingEventsEventsDeleteArchive(batchInputMarketingEventExternalUniqueIdentifier, callback) {
      let postBody = batchInputMarketingEventExternalUniqueIdentifier;
      // verify the required parameter 'batchInputMarketingEventExternalUniqueIdentifier' is set
      if (batchInputMarketingEventExternalUniqueIdentifier === undefined || batchInputMarketingEventExternalUniqueIdentifier === null) {
        throw new Error("Missing the required parameter 'batchInputMarketingEventExternalUniqueIdentifier' when calling postMarketingV3MarketingEventsEventsDeleteArchive");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Error;
      return this.apiClient.callApi(
        '/marketing/v3/marketing-events/events/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postMarketingV3MarketingEventsEventsUpsertDoUpsert operation.
     * @callback module:api/BatchApi~postMarketingV3MarketingEventsEventsUpsertDoUpsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchResponseMarketingEventPublicDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update multiple marketing events
     * Upset multiple Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.
     * @param {module:model/BatchInputMarketingEventCreateRequestParams} batchInputMarketingEventCreateRequestParams The details of the marketing events to upsert
     * @param {module:api/BatchApi~postMarketingV3MarketingEventsEventsUpsertDoUpsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchResponseMarketingEventPublicDefaultResponse}
     */
    postMarketingV3MarketingEventsEventsUpsertDoUpsert(batchInputMarketingEventCreateRequestParams, callback) {
      let postBody = batchInputMarketingEventCreateRequestParams;
      // verify the required parameter 'batchInputMarketingEventCreateRequestParams' is set
      if (batchInputMarketingEventCreateRequestParams === undefined || batchInputMarketingEventCreateRequestParams === null) {
        throw new Error("Missing the required parameter 'batchInputMarketingEventCreateRequestParams' when calling postMarketingV3MarketingEventsEventsUpsertDoUpsert");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = BatchResponseMarketingEventPublicDefaultResponse;
      return this.apiClient.callApi(
        '/marketing/v3/marketing-events/events/upsert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
