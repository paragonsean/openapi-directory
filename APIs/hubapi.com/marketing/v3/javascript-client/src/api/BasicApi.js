/**
 * Marketing Events
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import MarketingEventCreateRequestParams from '../model/MarketingEventCreateRequestParams';
import MarketingEventDefaultResponse from '../model/MarketingEventDefaultResponse';
import MarketingEventPublicDefaultResponse from '../model/MarketingEventPublicDefaultResponse';
import MarketingEventPublicReadResponse from '../model/MarketingEventPublicReadResponse';
import MarketingEventUpdateRequestParams from '../model/MarketingEventUpdateRequestParams';

/**
* Basic service.
* @module api/BasicApi
* @version v3
*/
export default class BasicApi {

    /**
    * Constructs a new BasicApi. 
    * @alias module:api/BasicApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteMarketingV3MarketingEventsEventsExternalEventIdArchive operation.
     * @callback module:api/BasicApi~deleteMarketingV3MarketingEventsEventsExternalEventIdArchiveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a marketing event
     * Deletes an existing Marketing Event with the specified id, if one exists.
     * @param {String} externalEventId The id of the marketing event to delete
     * @param {String} externalAccountId The account id associated with the marketing event
     * @param {module:api/BasicApi~deleteMarketingV3MarketingEventsEventsExternalEventIdArchiveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMarketingV3MarketingEventsEventsExternalEventIdArchive(externalEventId, externalAccountId, callback) {
      let postBody = null;
      // verify the required parameter 'externalEventId' is set
      if (externalEventId === undefined || externalEventId === null) {
        throw new Error("Missing the required parameter 'externalEventId' when calling deleteMarketingV3MarketingEventsEventsExternalEventIdArchive");
      }
      // verify the required parameter 'externalAccountId' is set
      if (externalAccountId === undefined || externalAccountId === null) {
        throw new Error("Missing the required parameter 'externalAccountId' when calling deleteMarketingV3MarketingEventsEventsExternalEventIdArchive");
      }

      let pathParams = {
        'externalEventId': externalEventId
      };
      let queryParams = {
        'externalAccountId': externalAccountId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/marketing/v3/marketing-events/events/{externalEventId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMarketingV3MarketingEventsEventsExternalEventIdGetById operation.
     * @callback module:api/BasicApi~getMarketingV3MarketingEventsEventsExternalEventIdGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MarketingEventPublicReadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a marketing event
     * Returns the details of the Marketing Event with the specified id, if one exists.
     * @param {String} externalEventId The id of the marketing event to return
     * @param {String} externalAccountId The account id associated with the marketing event
     * @param {module:api/BasicApi~getMarketingV3MarketingEventsEventsExternalEventIdGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MarketingEventPublicReadResponse}
     */
    getMarketingV3MarketingEventsEventsExternalEventIdGetById(externalEventId, externalAccountId, callback) {
      let postBody = null;
      // verify the required parameter 'externalEventId' is set
      if (externalEventId === undefined || externalEventId === null) {
        throw new Error("Missing the required parameter 'externalEventId' when calling getMarketingV3MarketingEventsEventsExternalEventIdGetById");
      }
      // verify the required parameter 'externalAccountId' is set
      if (externalAccountId === undefined || externalAccountId === null) {
        throw new Error("Missing the required parameter 'externalAccountId' when calling getMarketingV3MarketingEventsEventsExternalEventIdGetById");
      }

      let pathParams = {
        'externalEventId': externalEventId
      };
      let queryParams = {
        'externalAccountId': externalAccountId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = MarketingEventPublicReadResponse;
      return this.apiClient.callApi(
        '/marketing/v3/marketing-events/events/{externalEventId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchMarketingV3MarketingEventsEventsExternalEventIdUpdate operation.
     * @callback module:api/BasicApi~patchMarketingV3MarketingEventsEventsExternalEventIdUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MarketingEventPublicDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a marketing event
     * Updates an existing Marketing Event with the specified id, if one exists.
     * @param {String} externalEventId The id of the marketing event to update
     * @param {String} externalAccountId The account id associated with the marketing event
     * @param {module:model/MarketingEventUpdateRequestParams} marketingEventUpdateRequestParams The details of the marketing event to update
     * @param {module:api/BasicApi~patchMarketingV3MarketingEventsEventsExternalEventIdUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MarketingEventPublicDefaultResponse}
     */
    patchMarketingV3MarketingEventsEventsExternalEventIdUpdate(externalEventId, externalAccountId, marketingEventUpdateRequestParams, callback) {
      let postBody = marketingEventUpdateRequestParams;
      // verify the required parameter 'externalEventId' is set
      if (externalEventId === undefined || externalEventId === null) {
        throw new Error("Missing the required parameter 'externalEventId' when calling patchMarketingV3MarketingEventsEventsExternalEventIdUpdate");
      }
      // verify the required parameter 'externalAccountId' is set
      if (externalAccountId === undefined || externalAccountId === null) {
        throw new Error("Missing the required parameter 'externalAccountId' when calling patchMarketingV3MarketingEventsEventsExternalEventIdUpdate");
      }
      // verify the required parameter 'marketingEventUpdateRequestParams' is set
      if (marketingEventUpdateRequestParams === undefined || marketingEventUpdateRequestParams === null) {
        throw new Error("Missing the required parameter 'marketingEventUpdateRequestParams' when calling patchMarketingV3MarketingEventsEventsExternalEventIdUpdate");
      }

      let pathParams = {
        'externalEventId': externalEventId
      };
      let queryParams = {
        'externalAccountId': externalAccountId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = MarketingEventPublicDefaultResponse;
      return this.apiClient.callApi(
        '/marketing/v3/marketing-events/events/{externalEventId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postMarketingV3MarketingEventsEventsCreate operation.
     * @callback module:api/BasicApi~postMarketingV3MarketingEventsEventsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MarketingEventDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a marketing event
     * Creates a new marketing event in HubSpot
     * @param {module:model/MarketingEventCreateRequestParams} marketingEventCreateRequestParams The details of the marketing event to create
     * @param {module:api/BasicApi~postMarketingV3MarketingEventsEventsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MarketingEventDefaultResponse}
     */
    postMarketingV3MarketingEventsEventsCreate(marketingEventCreateRequestParams, callback) {
      let postBody = marketingEventCreateRequestParams;
      // verify the required parameter 'marketingEventCreateRequestParams' is set
      if (marketingEventCreateRequestParams === undefined || marketingEventCreateRequestParams === null) {
        throw new Error("Missing the required parameter 'marketingEventCreateRequestParams' when calling postMarketingV3MarketingEventsEventsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = MarketingEventDefaultResponse;
      return this.apiClient.callApi(
        '/marketing/v3/marketing-events/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel operation.
     * @callback module:api/BasicApi~postMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MarketingEventDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark a marketing event as cancelled
     * Mark a marketing event as cancelled.
     * @param {String} externalEventId The id of the marketing event to mark as cancelled
     * @param {String} externalAccountId The account id associated with the marketing event
     * @param {module:api/BasicApi~postMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MarketingEventDefaultResponse}
     */
    postMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel(externalEventId, externalAccountId, callback) {
      let postBody = null;
      // verify the required parameter 'externalEventId' is set
      if (externalEventId === undefined || externalEventId === null) {
        throw new Error("Missing the required parameter 'externalEventId' when calling postMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel");
      }
      // verify the required parameter 'externalAccountId' is set
      if (externalAccountId === undefined || externalAccountId === null) {
        throw new Error("Missing the required parameter 'externalAccountId' when calling postMarketingV3MarketingEventsEventsExternalEventIdCancelDoCancel");
      }

      let pathParams = {
        'externalEventId': externalEventId
      };
      let queryParams = {
        'externalAccountId': externalAccountId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = MarketingEventDefaultResponse;
      return this.apiClient.callApi(
        '/marketing/v3/marketing-events/events/{externalEventId}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putMarketingV3MarketingEventsEventsExternalEventIdReplace operation.
     * @callback module:api/BasicApi~putMarketingV3MarketingEventsEventsExternalEventIdReplaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MarketingEventPublicDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a marketing event
     * Upsets a Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.
     * @param {String} externalEventId The id of the marketing event to upsert
     * @param {module:model/MarketingEventCreateRequestParams} marketingEventCreateRequestParams The details of the marketing event to upsert
     * @param {module:api/BasicApi~putMarketingV3MarketingEventsEventsExternalEventIdReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MarketingEventPublicDefaultResponse}
     */
    putMarketingV3MarketingEventsEventsExternalEventIdReplace(externalEventId, marketingEventCreateRequestParams, callback) {
      let postBody = marketingEventCreateRequestParams;
      // verify the required parameter 'externalEventId' is set
      if (externalEventId === undefined || externalEventId === null) {
        throw new Error("Missing the required parameter 'externalEventId' when calling putMarketingV3MarketingEventsEventsExternalEventIdReplace");
      }
      // verify the required parameter 'marketingEventCreateRequestParams' is set
      if (marketingEventCreateRequestParams === undefined || marketingEventCreateRequestParams === null) {
        throw new Error("Missing the required parameter 'marketingEventCreateRequestParams' when calling putMarketingV3MarketingEventsEventsExternalEventIdReplace");
      }

      let pathParams = {
        'externalEventId': externalEventId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = MarketingEventPublicDefaultResponse;
      return this.apiClient.callApi(
        '/marketing/v3/marketing-events/events/{externalEventId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
