/**
 * Marketing Events
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchInputMarketingEventEmailSubscriber from '../model/BatchInputMarketingEventEmailSubscriber';
import BatchInputMarketingEventSubscriber from '../model/BatchInputMarketingEventSubscriber';
import BatchResponseSubscriberEmailResponse from '../model/BatchResponseSubscriberEmailResponse';
import BatchResponseSubscriberVidResponse from '../model/BatchResponseSubscriberVidResponse';
import Error from '../model/Error';

/**
* AttendanceSubscriberStateChanges service.
* @module api/AttendanceSubscriberStateChangesApi
* @version v3
*/
export default class AttendanceSubscriberStateChangesApi {

    /**
    * Constructs a new AttendanceSubscriberStateChangesApi. 
    * @alias module:api/AttendanceSubscriberStateChangesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreate operation.
     * @callback module:api/AttendanceSubscriberStateChangesApi~postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchResponseSubscriberVidResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Record
     * Record a subscription state between multiple HubSpot contacts and a marketing event, using HubSpot contact ids.
     * @param {String} externalEventId The id of the marketing event
     * @param {String} subscriberState The new subscriber state for the HubSpot contacts and the specified marketing event. For example: 'register', 'attend' or 'cancel'.
     * @param {module:model/BatchInputMarketingEventSubscriber} batchInputMarketingEventSubscriber The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended.
     * @param {Object} opts Optional parameters
     * @param {String} [externalAccountId] The account id associated with the marketing event
     * @param {module:api/AttendanceSubscriberStateChangesApi~postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchResponseSubscriberVidResponse}
     */
    postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreate(externalEventId, subscriberState, batchInputMarketingEventSubscriber, opts, callback) {
      opts = opts || {};
      let postBody = batchInputMarketingEventSubscriber;
      // verify the required parameter 'externalEventId' is set
      if (externalEventId === undefined || externalEventId === null) {
        throw new Error("Missing the required parameter 'externalEventId' when calling postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreate");
      }
      // verify the required parameter 'subscriberState' is set
      if (subscriberState === undefined || subscriberState === null) {
        throw new Error("Missing the required parameter 'subscriberState' when calling postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreate");
      }
      // verify the required parameter 'batchInputMarketingEventSubscriber' is set
      if (batchInputMarketingEventSubscriber === undefined || batchInputMarketingEventSubscriber === null) {
        throw new Error("Missing the required parameter 'batchInputMarketingEventSubscriber' when calling postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateCreateCreate");
      }

      let pathParams = {
        'externalEventId': externalEventId,
        'subscriberState': subscriberState
      };
      let queryParams = {
        'externalAccountId': opts['externalAccountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = BatchResponseSubscriberVidResponse;
      return this.apiClient.callApi(
        '/marketing/v3/marketing-events/attendance/{externalEventId}/{subscriberState}/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmail operation.
     * @callback module:api/AttendanceSubscriberStateChangesApi~postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchResponseSubscriberEmailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Record
     * Record a subscription state between multiple HubSpot contacts and a marketing event, using contact email addresses. If contact is not present it will be automatically created.
     * @param {String} externalEventId The id of the marketing event
     * @param {String} subscriberState The new subscriber state for the HubSpot contacts and the specified marketing event. For example: 'register', 'attend' or 'cancel'.
     * @param {module:model/BatchInputMarketingEventEmailSubscriber} batchInputMarketingEventEmailSubscriber The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended.
     * @param {Object} opts Optional parameters
     * @param {String} [externalAccountId] The account id associated with the marketing event
     * @param {module:api/AttendanceSubscriberStateChangesApi~postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchResponseSubscriberEmailResponse}
     */
    postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmail(externalEventId, subscriberState, batchInputMarketingEventEmailSubscriber, opts, callback) {
      opts = opts || {};
      let postBody = batchInputMarketingEventEmailSubscriber;
      // verify the required parameter 'externalEventId' is set
      if (externalEventId === undefined || externalEventId === null) {
        throw new Error("Missing the required parameter 'externalEventId' when calling postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmail");
      }
      // verify the required parameter 'subscriberState' is set
      if (subscriberState === undefined || subscriberState === null) {
        throw new Error("Missing the required parameter 'subscriberState' when calling postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmail");
      }
      // verify the required parameter 'batchInputMarketingEventEmailSubscriber' is set
      if (batchInputMarketingEventEmailSubscriber === undefined || batchInputMarketingEventEmailSubscriber === null) {
        throw new Error("Missing the required parameter 'batchInputMarketingEventEmailSubscriber' when calling postMarketingV3MarketingEventsAttendanceExternalEventIdSubscriberStateEmailCreateCreateByEmail");
      }

      let pathParams = {
        'externalEventId': externalEventId,
        'subscriberState': subscriberState
      };
      let queryParams = {
        'externalAccountId': opts['externalAccountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = BatchResponseSubscriberEmailResponse;
      return this.apiClient.callApi(
        '/marketing/v3/marketing-events/attendance/{externalEventId}/{subscriberState}/email-create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
