/**
 * Marketing Events
 * These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PropertyValue from './PropertyValue';

/**
 * The MarketingEventCreateRequestParams model module.
 * @module model/MarketingEventCreateRequestParams
 * @version v3
 */
class MarketingEventCreateRequestParams {
    /**
     * Constructs a new <code>MarketingEventCreateRequestParams</code>.
     * @alias module:model/MarketingEventCreateRequestParams
     * @param eventName {String} The name of the marketing event.
     * @param eventOrganizer {String} The name of the organizer of the marketing event.
     * @param externalAccountId {String} The accountId that is associated with this marketing event in the external event application.
     * @param externalEventId {String} The id of the marketing event in the external event application.
     */
    constructor(eventName, eventOrganizer, externalAccountId, externalEventId) { 
        
        MarketingEventCreateRequestParams.initialize(this, eventName, eventOrganizer, externalAccountId, externalEventId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eventName, eventOrganizer, externalAccountId, externalEventId) { 
        obj['eventName'] = eventName;
        obj['eventOrganizer'] = eventOrganizer;
        obj['externalAccountId'] = externalAccountId;
        obj['externalEventId'] = externalEventId;
    }

    /**
     * Constructs a <code>MarketingEventCreateRequestParams</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MarketingEventCreateRequestParams} obj Optional instance to populate.
     * @return {module:model/MarketingEventCreateRequestParams} The populated <code>MarketingEventCreateRequestParams</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MarketingEventCreateRequestParams();

            if (data.hasOwnProperty('customProperties')) {
                obj['customProperties'] = ApiClient.convertToType(data['customProperties'], [PropertyValue]);
            }
            if (data.hasOwnProperty('endDateTime')) {
                obj['endDateTime'] = ApiClient.convertToType(data['endDateTime'], 'Date');
            }
            if (data.hasOwnProperty('eventCancelled')) {
                obj['eventCancelled'] = ApiClient.convertToType(data['eventCancelled'], 'Boolean');
            }
            if (data.hasOwnProperty('eventDescription')) {
                obj['eventDescription'] = ApiClient.convertToType(data['eventDescription'], 'String');
            }
            if (data.hasOwnProperty('eventName')) {
                obj['eventName'] = ApiClient.convertToType(data['eventName'], 'String');
            }
            if (data.hasOwnProperty('eventOrganizer')) {
                obj['eventOrganizer'] = ApiClient.convertToType(data['eventOrganizer'], 'String');
            }
            if (data.hasOwnProperty('eventType')) {
                obj['eventType'] = ApiClient.convertToType(data['eventType'], 'String');
            }
            if (data.hasOwnProperty('eventUrl')) {
                obj['eventUrl'] = ApiClient.convertToType(data['eventUrl'], 'String');
            }
            if (data.hasOwnProperty('externalAccountId')) {
                obj['externalAccountId'] = ApiClient.convertToType(data['externalAccountId'], 'String');
            }
            if (data.hasOwnProperty('externalEventId')) {
                obj['externalEventId'] = ApiClient.convertToType(data['externalEventId'], 'String');
            }
            if (data.hasOwnProperty('startDateTime')) {
                obj['startDateTime'] = ApiClient.convertToType(data['startDateTime'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MarketingEventCreateRequestParams</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MarketingEventCreateRequestParams</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MarketingEventCreateRequestParams.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['customProperties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customProperties'])) {
                throw new Error("Expected the field `customProperties` to be an array in the JSON data but got " + data['customProperties']);
            }
            // validate the optional field `customProperties` (array)
            for (const item of data['customProperties']) {
                PropertyValue.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['eventDescription'] && !(typeof data['eventDescription'] === 'string' || data['eventDescription'] instanceof String)) {
            throw new Error("Expected the field `eventDescription` to be a primitive type in the JSON string but got " + data['eventDescription']);
        }
        // ensure the json data is a string
        if (data['eventName'] && !(typeof data['eventName'] === 'string' || data['eventName'] instanceof String)) {
            throw new Error("Expected the field `eventName` to be a primitive type in the JSON string but got " + data['eventName']);
        }
        // ensure the json data is a string
        if (data['eventOrganizer'] && !(typeof data['eventOrganizer'] === 'string' || data['eventOrganizer'] instanceof String)) {
            throw new Error("Expected the field `eventOrganizer` to be a primitive type in the JSON string but got " + data['eventOrganizer']);
        }
        // ensure the json data is a string
        if (data['eventType'] && !(typeof data['eventType'] === 'string' || data['eventType'] instanceof String)) {
            throw new Error("Expected the field `eventType` to be a primitive type in the JSON string but got " + data['eventType']);
        }
        // ensure the json data is a string
        if (data['eventUrl'] && !(typeof data['eventUrl'] === 'string' || data['eventUrl'] instanceof String)) {
            throw new Error("Expected the field `eventUrl` to be a primitive type in the JSON string but got " + data['eventUrl']);
        }
        // ensure the json data is a string
        if (data['externalAccountId'] && !(typeof data['externalAccountId'] === 'string' || data['externalAccountId'] instanceof String)) {
            throw new Error("Expected the field `externalAccountId` to be a primitive type in the JSON string but got " + data['externalAccountId']);
        }
        // ensure the json data is a string
        if (data['externalEventId'] && !(typeof data['externalEventId'] === 'string' || data['externalEventId'] instanceof String)) {
            throw new Error("Expected the field `externalEventId` to be a primitive type in the JSON string but got " + data['externalEventId']);
        }

        return true;
    }


}

MarketingEventCreateRequestParams.RequiredProperties = ["eventName", "eventOrganizer", "externalAccountId", "externalEventId"];

/**
 * A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set. In order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts. 
 * @member {Array.<module:model/PropertyValue>} customProperties
 */
MarketingEventCreateRequestParams.prototype['customProperties'] = undefined;

/**
 * The end date and time of the marketing event.
 * @member {Date} endDateTime
 */
MarketingEventCreateRequestParams.prototype['endDateTime'] = undefined;

/**
 * Indicates if the marketing event has been cancelled.  Defaults to `false`
 * @member {Boolean} eventCancelled
 */
MarketingEventCreateRequestParams.prototype['eventCancelled'] = undefined;

/**
 * The description of the marketing event.
 * @member {String} eventDescription
 */
MarketingEventCreateRequestParams.prototype['eventDescription'] = undefined;

/**
 * The name of the marketing event.
 * @member {String} eventName
 */
MarketingEventCreateRequestParams.prototype['eventName'] = undefined;

/**
 * The name of the organizer of the marketing event.
 * @member {String} eventOrganizer
 */
MarketingEventCreateRequestParams.prototype['eventOrganizer'] = undefined;

/**
 * Describes what type of event this is.  For example: `WEBINAR`, `CONFERENCE`, `WORKSHOP`
 * @member {String} eventType
 */
MarketingEventCreateRequestParams.prototype['eventType'] = undefined;

/**
 * A URL in the external event application where the marketing event can be managed.
 * @member {String} eventUrl
 */
MarketingEventCreateRequestParams.prototype['eventUrl'] = undefined;

/**
 * The accountId that is associated with this marketing event in the external event application.
 * @member {String} externalAccountId
 */
MarketingEventCreateRequestParams.prototype['externalAccountId'] = undefined;

/**
 * The id of the marketing event in the external event application.
 * @member {String} externalEventId
 */
MarketingEventCreateRequestParams.prototype['externalEventId'] = undefined;

/**
 * The start date and time of the marketing event.
 * @member {Date} startDateTime
 */
MarketingEventCreateRequestParams.prototype['startDateTime'] = undefined;






export default MarketingEventCreateRequestParams;

