/**
 * CRM cards
 * Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntegratorCardPayloadResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntegratorCardPayloadResponse::OAIIntegratorCardPayloadResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntegratorCardPayloadResponse::OAIIntegratorCardPayloadResponse() {
    this->initializeModel();
}

OAIIntegratorCardPayloadResponse::~OAIIntegratorCardPayloadResponse() {}

void OAIIntegratorCardPayloadResponse::initializeModel() {

    m_all_items_link_url_isSet = false;
    m_all_items_link_url_isValid = false;

    m_card_label_isSet = false;
    m_card_label_isValid = false;

    m_response_version_isSet = false;
    m_response_version_isValid = false;

    m_sections_isSet = false;
    m_sections_isValid = false;

    m_top_level_actions_isSet = false;
    m_top_level_actions_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;
}

void OAIIntegratorCardPayloadResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntegratorCardPayloadResponse::fromJsonObject(QJsonObject json) {

    m_all_items_link_url_isValid = ::OpenAPI::fromJsonValue(m_all_items_link_url, json[QString("allItemsLinkUrl")]);
    m_all_items_link_url_isSet = !json[QString("allItemsLinkUrl")].isNull() && m_all_items_link_url_isValid;

    m_card_label_isValid = ::OpenAPI::fromJsonValue(m_card_label, json[QString("cardLabel")]);
    m_card_label_isSet = !json[QString("cardLabel")].isNull() && m_card_label_isValid;

    m_response_version_isValid = ::OpenAPI::fromJsonValue(m_response_version, json[QString("responseVersion")]);
    m_response_version_isSet = !json[QString("responseVersion")].isNull() && m_response_version_isValid;

    m_sections_isValid = ::OpenAPI::fromJsonValue(m_sections, json[QString("sections")]);
    m_sections_isSet = !json[QString("sections")].isNull() && m_sections_isValid;

    m_top_level_actions_isValid = ::OpenAPI::fromJsonValue(m_top_level_actions, json[QString("topLevelActions")]);
    m_top_level_actions_isSet = !json[QString("topLevelActions")].isNull() && m_top_level_actions_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("totalCount")]);
    m_total_count_isSet = !json[QString("totalCount")].isNull() && m_total_count_isValid;
}

QString OAIIntegratorCardPayloadResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntegratorCardPayloadResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_all_items_link_url_isSet) {
        obj.insert(QString("allItemsLinkUrl"), ::OpenAPI::toJsonValue(m_all_items_link_url));
    }
    if (m_card_label_isSet) {
        obj.insert(QString("cardLabel"), ::OpenAPI::toJsonValue(m_card_label));
    }
    if (m_response_version_isSet) {
        obj.insert(QString("responseVersion"), ::OpenAPI::toJsonValue(m_response_version));
    }
    if (m_sections.size() > 0) {
        obj.insert(QString("sections"), ::OpenAPI::toJsonValue(m_sections));
    }
    if (m_top_level_actions.isSet()) {
        obj.insert(QString("topLevelActions"), ::OpenAPI::toJsonValue(m_top_level_actions));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("totalCount"), ::OpenAPI::toJsonValue(m_total_count));
    }
    return obj;
}

QString OAIIntegratorCardPayloadResponse::getAllItemsLinkUrl() const {
    return m_all_items_link_url;
}
void OAIIntegratorCardPayloadResponse::setAllItemsLinkUrl(const QString &all_items_link_url) {
    m_all_items_link_url = all_items_link_url;
    m_all_items_link_url_isSet = true;
}

bool OAIIntegratorCardPayloadResponse::is_all_items_link_url_Set() const{
    return m_all_items_link_url_isSet;
}

bool OAIIntegratorCardPayloadResponse::is_all_items_link_url_Valid() const{
    return m_all_items_link_url_isValid;
}

QString OAIIntegratorCardPayloadResponse::getCardLabel() const {
    return m_card_label;
}
void OAIIntegratorCardPayloadResponse::setCardLabel(const QString &card_label) {
    m_card_label = card_label;
    m_card_label_isSet = true;
}

bool OAIIntegratorCardPayloadResponse::is_card_label_Set() const{
    return m_card_label_isSet;
}

bool OAIIntegratorCardPayloadResponse::is_card_label_Valid() const{
    return m_card_label_isValid;
}

QString OAIIntegratorCardPayloadResponse::getResponseVersion() const {
    return m_response_version;
}
void OAIIntegratorCardPayloadResponse::setResponseVersion(const QString &response_version) {
    m_response_version = response_version;
    m_response_version_isSet = true;
}

bool OAIIntegratorCardPayloadResponse::is_response_version_Set() const{
    return m_response_version_isSet;
}

bool OAIIntegratorCardPayloadResponse::is_response_version_Valid() const{
    return m_response_version_isValid;
}

QList<OAIIntegratorObjectResult> OAIIntegratorCardPayloadResponse::getSections() const {
    return m_sections;
}
void OAIIntegratorCardPayloadResponse::setSections(const QList<OAIIntegratorObjectResult> &sections) {
    m_sections = sections;
    m_sections_isSet = true;
}

bool OAIIntegratorCardPayloadResponse::is_sections_Set() const{
    return m_sections_isSet;
}

bool OAIIntegratorCardPayloadResponse::is_sections_Valid() const{
    return m_sections_isValid;
}

OAITopLevelActions OAIIntegratorCardPayloadResponse::getTopLevelActions() const {
    return m_top_level_actions;
}
void OAIIntegratorCardPayloadResponse::setTopLevelActions(const OAITopLevelActions &top_level_actions) {
    m_top_level_actions = top_level_actions;
    m_top_level_actions_isSet = true;
}

bool OAIIntegratorCardPayloadResponse::is_top_level_actions_Set() const{
    return m_top_level_actions_isSet;
}

bool OAIIntegratorCardPayloadResponse::is_top_level_actions_Valid() const{
    return m_top_level_actions_isValid;
}

qint32 OAIIntegratorCardPayloadResponse::getTotalCount() const {
    return m_total_count;
}
void OAIIntegratorCardPayloadResponse::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIIntegratorCardPayloadResponse::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIIntegratorCardPayloadResponse::is_total_count_Valid() const{
    return m_total_count_isValid;
}

bool OAIIntegratorCardPayloadResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_items_link_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_level_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntegratorCardPayloadResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_total_count_isValid && true;
}

} // namespace OpenAPI
