/**
 * CRM cards
 * Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntegratorObjectResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntegratorObjectResult::OAIIntegratorObjectResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntegratorObjectResult::OAIIntegratorObjectResult() {
    this->initializeModel();
}

OAIIntegratorObjectResult::~OAIIntegratorObjectResult() {}

void OAIIntegratorObjectResult::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_link_url_isSet = false;
    m_link_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_tokens_isSet = false;
    m_tokens_isValid = false;
}

void OAIIntegratorObjectResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntegratorObjectResult::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_link_url_isValid = ::OpenAPI::fromJsonValue(m_link_url, json[QString("linkUrl")]);
    m_link_url_isSet = !json[QString("linkUrl")].isNull() && m_link_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_tokens_isValid = ::OpenAPI::fromJsonValue(m_tokens, json[QString("tokens")]);
    m_tokens_isSet = !json[QString("tokens")].isNull() && m_tokens_isValid;
}

QString OAIIntegratorObjectResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntegratorObjectResult::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_link_url_isSet) {
        obj.insert(QString("linkUrl"), ::OpenAPI::toJsonValue(m_link_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_tokens.size() > 0) {
        obj.insert(QString("tokens"), ::OpenAPI::toJsonValue(m_tokens));
    }
    return obj;
}

QList<OAIIntegratorObjectResult_actions_inner> OAIIntegratorObjectResult::getActions() const {
    return m_actions;
}
void OAIIntegratorObjectResult::setActions(const QList<OAIIntegratorObjectResult_actions_inner> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIIntegratorObjectResult::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIIntegratorObjectResult::is_actions_Valid() const{
    return m_actions_isValid;
}

QString OAIIntegratorObjectResult::getId() const {
    return m_id;
}
void OAIIntegratorObjectResult::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIntegratorObjectResult::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIntegratorObjectResult::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIIntegratorObjectResult::getLinkUrl() const {
    return m_link_url;
}
void OAIIntegratorObjectResult::setLinkUrl(const QString &link_url) {
    m_link_url = link_url;
    m_link_url_isSet = true;
}

bool OAIIntegratorObjectResult::is_link_url_Set() const{
    return m_link_url_isSet;
}

bool OAIIntegratorObjectResult::is_link_url_Valid() const{
    return m_link_url_isValid;
}

QString OAIIntegratorObjectResult::getTitle() const {
    return m_title;
}
void OAIIntegratorObjectResult::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIIntegratorObjectResult::is_title_Set() const{
    return m_title_isSet;
}

bool OAIIntegratorObjectResult::is_title_Valid() const{
    return m_title_isValid;
}

QList<OAIObjectToken> OAIIntegratorObjectResult::getTokens() const {
    return m_tokens;
}
void OAIIntegratorObjectResult::setTokens(const QList<OAIObjectToken> &tokens) {
    m_tokens = tokens;
    m_tokens_isSet = true;
}

bool OAIIntegratorObjectResult::is_tokens_Set() const{
    return m_tokens_isSet;
}

bool OAIIntegratorObjectResult::is_tokens_Valid() const{
    return m_tokens_isValid;
}

bool OAIIntegratorObjectResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tokens.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntegratorObjectResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_actions_isValid && m_id_isValid && m_title_isValid && m_tokens_isValid && true;
}

} // namespace OpenAPI
