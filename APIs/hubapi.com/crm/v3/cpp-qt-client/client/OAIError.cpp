/**
 * CRM cards
 * Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIError::OAIError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIError::OAIError() {
    this->initializeModel();
}

OAIError::~OAIError() {}

void OAIError::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_correlation_id_isSet = false;
    m_correlation_id_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_sub_category_isSet = false;
    m_sub_category_isValid = false;
}

void OAIError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIError::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    if(json["context"].isObject()){
        auto varmap = json["context"].toObject().toVariantMap();
        m_context_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_context_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_context_isSet &= !jval.isNull() && m_context_isValid;
                m_context.insert(m_context.end(), val, item);
            }
        }
    }

    m_correlation_id_isValid = ::OpenAPI::fromJsonValue(m_correlation_id, json[QString("correlationId")]);
    m_correlation_id_isSet = !json[QString("correlationId")].isNull() && m_correlation_id_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_sub_category_isValid = ::OpenAPI::fromJsonValue(m_sub_category, json[QString("subCategory")]);
    m_sub_category_isSet = !json[QString("subCategory")].isNull() && m_sub_category_isValid;
}

QString OAIError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIError::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_context.size() > 0) {
        
        obj.insert(QString("context"), toJsonValue(m_context));
    }
    if (m_correlation_id_isSet) {
        obj.insert(QString("correlationId"), ::OpenAPI::toJsonValue(m_correlation_id));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_sub_category_isSet) {
        obj.insert(QString("subCategory"), ::OpenAPI::toJsonValue(m_sub_category));
    }
    return obj;
}

QString OAIError::getCategory() const {
    return m_category;
}
void OAIError::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIError::is_category_Set() const{
    return m_category_isSet;
}

bool OAIError::is_category_Valid() const{
    return m_category_isValid;
}

QMap<QString, QList<QString>> OAIError::getContext() const {
    return m_context;
}
void OAIError::setContext(const QMap<QString, QList<QString>> &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIError::is_context_Set() const{
    return m_context_isSet;
}

bool OAIError::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIError::getCorrelationId() const {
    return m_correlation_id;
}
void OAIError::setCorrelationId(const QString &correlation_id) {
    m_correlation_id = correlation_id;
    m_correlation_id_isSet = true;
}

bool OAIError::is_correlation_id_Set() const{
    return m_correlation_id_isSet;
}

bool OAIError::is_correlation_id_Valid() const{
    return m_correlation_id_isValid;
}

QList<OAIErrorDetail> OAIError::getErrors() const {
    return m_errors;
}
void OAIError::setErrors(const QList<OAIErrorDetail> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIError::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIError::is_errors_Valid() const{
    return m_errors_isValid;
}

QMap<QString, QString> OAIError::getLinks() const {
    return m_links;
}
void OAIError::setLinks(const QMap<QString, QString> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIError::is_links_Set() const{
    return m_links_isSet;
}

bool OAIError::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIError::getMessage() const {
    return m_message;
}
void OAIError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIError::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIError::getSubCategory() const {
    return m_sub_category;
}
void OAIError::setSubCategory(const QString &sub_category) {
    m_sub_category = sub_category;
    m_sub_category_isSet = true;
}

bool OAIError::is_sub_category_Set() const{
    return m_sub_category_isSet;
}

bool OAIError::is_sub_category_Valid() const{
    return m_sub_category_isValid;
}

bool OAIError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_correlation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_category_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_category_isValid && m_correlation_id_isValid && m_message_isValid && true;
}

} // namespace OpenAPI
