/**
 * CRM cards
 * Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICardFetchBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICardFetchBody::OAICardFetchBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICardFetchBody::OAICardFetchBody() {
    this->initializeModel();
}

OAICardFetchBody::~OAICardFetchBody() {}

void OAICardFetchBody::initializeModel() {

    m_object_types_isSet = false;
    m_object_types_isValid = false;

    m_target_url_isSet = false;
    m_target_url_isValid = false;
}

void OAICardFetchBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICardFetchBody::fromJsonObject(QJsonObject json) {

    m_object_types_isValid = ::OpenAPI::fromJsonValue(m_object_types, json[QString("objectTypes")]);
    m_object_types_isSet = !json[QString("objectTypes")].isNull() && m_object_types_isValid;

    m_target_url_isValid = ::OpenAPI::fromJsonValue(m_target_url, json[QString("targetUrl")]);
    m_target_url_isSet = !json[QString("targetUrl")].isNull() && m_target_url_isValid;
}

QString OAICardFetchBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICardFetchBody::asJsonObject() const {
    QJsonObject obj;
    if (m_object_types.size() > 0) {
        obj.insert(QString("objectTypes"), ::OpenAPI::toJsonValue(m_object_types));
    }
    if (m_target_url_isSet) {
        obj.insert(QString("targetUrl"), ::OpenAPI::toJsonValue(m_target_url));
    }
    return obj;
}

QList<OAICardObjectTypeBody> OAICardFetchBody::getObjectTypes() const {
    return m_object_types;
}
void OAICardFetchBody::setObjectTypes(const QList<OAICardObjectTypeBody> &object_types) {
    m_object_types = object_types;
    m_object_types_isSet = true;
}

bool OAICardFetchBody::is_object_types_Set() const{
    return m_object_types_isSet;
}

bool OAICardFetchBody::is_object_types_Valid() const{
    return m_object_types_isValid;
}

QString OAICardFetchBody::getTargetUrl() const {
    return m_target_url;
}
void OAICardFetchBody::setTargetUrl(const QString &target_url) {
    m_target_url = target_url;
    m_target_url_isSet = true;
}

bool OAICardFetchBody::is_target_url_Set() const{
    return m_target_url_isSet;
}

bool OAICardFetchBody::is_target_url_Valid() const{
    return m_target_url_isValid;
}

bool OAICardFetchBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_object_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICardFetchBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_object_types_isValid && m_target_url_isValid && true;
}

} // namespace OpenAPI
