/**
 * CRM cards
 * Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIFrameActionBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIFrameActionBody::OAIIFrameActionBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIFrameActionBody::OAIIFrameActionBody() {
    this->initializeModel();
}

OAIIFrameActionBody::~OAIIFrameActionBody() {}

void OAIIFrameActionBody::initializeModel() {

    m_height_isSet = false;
    m_height_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_property_names_included_isSet = false;
    m_property_names_included_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIIFrameActionBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIFrameActionBody::fromJsonObject(QJsonObject json) {

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_property_names_included_isValid = ::OpenAPI::fromJsonValue(m_property_names_included, json[QString("propertyNamesIncluded")]);
    m_property_names_included_isSet = !json[QString("propertyNamesIncluded")].isNull() && m_property_names_included_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIIFrameActionBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIFrameActionBody::asJsonObject() const {
    QJsonObject obj;
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_property_names_included.size() > 0) {
        obj.insert(QString("propertyNamesIncluded"), ::OpenAPI::toJsonValue(m_property_names_included));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

qint32 OAIIFrameActionBody::getHeight() const {
    return m_height;
}
void OAIIFrameActionBody::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIIFrameActionBody::is_height_Set() const{
    return m_height_isSet;
}

bool OAIIFrameActionBody::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIIFrameActionBody::getLabel() const {
    return m_label;
}
void OAIIFrameActionBody::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIIFrameActionBody::is_label_Set() const{
    return m_label_isSet;
}

bool OAIIFrameActionBody::is_label_Valid() const{
    return m_label_isValid;
}

QList<QString> OAIIFrameActionBody::getPropertyNamesIncluded() const {
    return m_property_names_included;
}
void OAIIFrameActionBody::setPropertyNamesIncluded(const QList<QString> &property_names_included) {
    m_property_names_included = property_names_included;
    m_property_names_included_isSet = true;
}

bool OAIIFrameActionBody::is_property_names_included_Set() const{
    return m_property_names_included_isSet;
}

bool OAIIFrameActionBody::is_property_names_included_Valid() const{
    return m_property_names_included_isValid;
}

QString OAIIFrameActionBody::getType() const {
    return m_type;
}
void OAIIFrameActionBody::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIFrameActionBody::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIFrameActionBody::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIIFrameActionBody::getUrl() const {
    return m_url;
}
void OAIIFrameActionBody::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIIFrameActionBody::is_url_Set() const{
    return m_url_isSet;
}

bool OAIIFrameActionBody::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIIFrameActionBody::getWidth() const {
    return m_width;
}
void OAIIFrameActionBody::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIIFrameActionBody::is_width_Set() const{
    return m_width_isSet;
}

bool OAIIFrameActionBody::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIIFrameActionBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_names_included.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIFrameActionBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_height_isValid && m_property_names_included_isValid && m_type_isValid && m_url_isValid && m_width_isValid && true;
}

} // namespace OpenAPI
