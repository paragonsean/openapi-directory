/**
 * CRM cards
 * Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopLevelActions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopLevelActions::OAITopLevelActions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopLevelActions::OAITopLevelActions() {
    this->initializeModel();
}

OAITopLevelActions::~OAITopLevelActions() {}

void OAITopLevelActions::initializeModel() {

    m_primary_isSet = false;
    m_primary_isValid = false;

    m_secondary_isSet = false;
    m_secondary_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;
}

void OAITopLevelActions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopLevelActions::fromJsonObject(QJsonObject json) {

    m_primary_isValid = ::OpenAPI::fromJsonValue(m_primary, json[QString("primary")]);
    m_primary_isSet = !json[QString("primary")].isNull() && m_primary_isValid;

    m_secondary_isValid = ::OpenAPI::fromJsonValue(m_secondary, json[QString("secondary")]);
    m_secondary_isSet = !json[QString("secondary")].isNull() && m_secondary_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;
}

QString OAITopLevelActions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopLevelActions::asJsonObject() const {
    QJsonObject obj;
    if (m_primary.isSet()) {
        obj.insert(QString("primary"), ::OpenAPI::toJsonValue(m_primary));
    }
    if (m_secondary.size() > 0) {
        obj.insert(QString("secondary"), ::OpenAPI::toJsonValue(m_secondary));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    return obj;
}

OAIIntegratorObjectResult_actions_inner OAITopLevelActions::getPrimary() const {
    return m_primary;
}
void OAITopLevelActions::setPrimary(const OAIIntegratorObjectResult_actions_inner &primary) {
    m_primary = primary;
    m_primary_isSet = true;
}

bool OAITopLevelActions::is_primary_Set() const{
    return m_primary_isSet;
}

bool OAITopLevelActions::is_primary_Valid() const{
    return m_primary_isValid;
}

QList<OAIIntegratorObjectResult_actions_inner> OAITopLevelActions::getSecondary() const {
    return m_secondary;
}
void OAITopLevelActions::setSecondary(const QList<OAIIntegratorObjectResult_actions_inner> &secondary) {
    m_secondary = secondary;
    m_secondary_isSet = true;
}

bool OAITopLevelActions::is_secondary_Set() const{
    return m_secondary_isSet;
}

bool OAITopLevelActions::is_secondary_Valid() const{
    return m_secondary_isValid;
}

OAIIFrameActionBody OAITopLevelActions::getSettings() const {
    return m_settings;
}
void OAITopLevelActions::setSettings(const OAIIFrameActionBody &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAITopLevelActions::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAITopLevelActions::is_settings_Valid() const{
    return m_settings_isValid;
}

bool OAITopLevelActions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_primary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopLevelActions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_secondary_isValid && true;
}

} // namespace OpenAPI
