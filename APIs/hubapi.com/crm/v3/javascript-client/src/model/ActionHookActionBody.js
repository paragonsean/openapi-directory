/**
 * CRM cards
 * Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActionConfirmationBody from './ActionConfirmationBody';

/**
 * The ActionHookActionBody model module.
 * @module model/ActionHookActionBody
 * @version v3
 */
class ActionHookActionBody {
    /**
     * Constructs a new <code>ActionHookActionBody</code>.
     * @alias module:model/ActionHookActionBody
     * @param httpMethod {module:model/ActionHookActionBody.HttpMethodEnum} 
     * @param propertyNamesIncluded {Array.<String>} 
     * @param type {module:model/ActionHookActionBody.TypeEnum} 
     * @param url {String} 
     */
    constructor(httpMethod, propertyNamesIncluded, type, url) { 
        
        ActionHookActionBody.initialize(this, httpMethod, propertyNamesIncluded, type, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, httpMethod, propertyNamesIncluded, type, url) { 
        obj['httpMethod'] = httpMethod;
        obj['propertyNamesIncluded'] = propertyNamesIncluded;
        obj['type'] = type || 'ACTION_HOOK';
        obj['url'] = url;
    }

    /**
     * Constructs a <code>ActionHookActionBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActionHookActionBody} obj Optional instance to populate.
     * @return {module:model/ActionHookActionBody} The populated <code>ActionHookActionBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActionHookActionBody();

            if (data.hasOwnProperty('confirmation')) {
                obj['confirmation'] = ActionConfirmationBody.constructFromObject(data['confirmation']);
            }
            if (data.hasOwnProperty('httpMethod')) {
                obj['httpMethod'] = ApiClient.convertToType(data['httpMethod'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('propertyNamesIncluded')) {
                obj['propertyNamesIncluded'] = ApiClient.convertToType(data['propertyNamesIncluded'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActionHookActionBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActionHookActionBody</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ActionHookActionBody.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `confirmation`
        if (data['confirmation']) { // data not null
          ActionConfirmationBody.validateJSON(data['confirmation']);
        }
        // ensure the json data is a string
        if (data['httpMethod'] && !(typeof data['httpMethod'] === 'string' || data['httpMethod'] instanceof String)) {
            throw new Error("Expected the field `httpMethod` to be a primitive type in the JSON string but got " + data['httpMethod']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['propertyNamesIncluded'])) {
            throw new Error("Expected the field `propertyNamesIncluded` to be an array in the JSON data but got " + data['propertyNamesIncluded']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

ActionHookActionBody.RequiredProperties = ["httpMethod", "propertyNamesIncluded", "type", "url"];

/**
 * @member {module:model/ActionConfirmationBody} confirmation
 */
ActionHookActionBody.prototype['confirmation'] = undefined;

/**
 * @member {module:model/ActionHookActionBody.HttpMethodEnum} httpMethod
 */
ActionHookActionBody.prototype['httpMethod'] = undefined;

/**
 * @member {String} label
 */
ActionHookActionBody.prototype['label'] = undefined;

/**
 * @member {Array.<String>} propertyNamesIncluded
 */
ActionHookActionBody.prototype['propertyNamesIncluded'] = undefined;

/**
 * @member {module:model/ActionHookActionBody.TypeEnum} type
 * @default 'ACTION_HOOK'
 */
ActionHookActionBody.prototype['type'] = 'ACTION_HOOK';

/**
 * @member {String} url
 */
ActionHookActionBody.prototype['url'] = undefined;





/**
 * Allowed values for the <code>httpMethod</code> property.
 * @enum {String}
 * @readonly
 */
ActionHookActionBody['HttpMethodEnum'] = {

    /**
     * value: "CONNECT"
     * @const
     */
    "CONNECT": "CONNECT",

    /**
     * value: "DELETE"
     * @const
     */
    "DELETE": "DELETE",

    /**
     * value: "GET"
     * @const
     */
    "GET": "GET",

    /**
     * value: "HEAD"
     * @const
     */
    "HEAD": "HEAD",

    /**
     * value: "OPTIONS"
     * @const
     */
    "OPTIONS": "OPTIONS",

    /**
     * value: "PATCH"
     * @const
     */
    "PATCH": "PATCH",

    /**
     * value: "POST"
     * @const
     */
    "POST": "POST",

    /**
     * value: "PUT"
     * @const
     */
    "PUT": "PUT",

    /**
     * value: "TRACE"
     * @const
     */
    "TRACE": "TRACE"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ActionHookActionBody['TypeEnum'] = {

    /**
     * value: "ACTION_HOOK"
     * @const
     */
    "ACTION_HOOK": "ACTION_HOOK"
};



export default ActionHookActionBody;

