/**
 * CRM cards
 * Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CardActions from './CardActions';
import CardDisplayBody from './CardDisplayBody';
import CardFetchBody from './CardFetchBody';

/**
 * The CardCreateRequest model module.
 * @module model/CardCreateRequest
 * @version v3
 */
class CardCreateRequest {
    /**
     * Constructs a new <code>CardCreateRequest</code>.
     * State of card definition to be created
     * @alias module:model/CardCreateRequest
     * @param actions {module:model/CardActions} 
     * @param display {module:model/CardDisplayBody} 
     * @param fetch {module:model/CardFetchBody} 
     * @param title {String} The top-level title for this card. Displayed to users in the CRM UI.
     */
    constructor(actions, display, fetch, title) { 
        
        CardCreateRequest.initialize(this, actions, display, fetch, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, actions, display, fetch, title) { 
        obj['actions'] = actions;
        obj['display'] = display;
        obj['fetch'] = fetch;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>CardCreateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardCreateRequest} obj Optional instance to populate.
     * @return {module:model/CardCreateRequest} The populated <code>CardCreateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardCreateRequest();

            if (data.hasOwnProperty('actions')) {
                obj['actions'] = CardActions.constructFromObject(data['actions']);
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = CardDisplayBody.constructFromObject(data['display']);
            }
            if (data.hasOwnProperty('fetch')) {
                obj['fetch'] = CardFetchBody.constructFromObject(data['fetch']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CardCreateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CardCreateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CardCreateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `actions`
        if (data['actions']) { // data not null
          CardActions.validateJSON(data['actions']);
        }
        // validate the optional field `display`
        if (data['display']) { // data not null
          CardDisplayBody.validateJSON(data['display']);
        }
        // validate the optional field `fetch`
        if (data['fetch']) { // data not null
          CardFetchBody.validateJSON(data['fetch']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

CardCreateRequest.RequiredProperties = ["actions", "display", "fetch", "title"];

/**
 * @member {module:model/CardActions} actions
 */
CardCreateRequest.prototype['actions'] = undefined;

/**
 * @member {module:model/CardDisplayBody} display
 */
CardCreateRequest.prototype['display'] = undefined;

/**
 * @member {module:model/CardFetchBody} fetch
 */
CardCreateRequest.prototype['fetch'] = undefined;

/**
 * The top-level title for this card. Displayed to users in the CRM UI.
 * @member {String} title
 */
CardCreateRequest.prototype['title'] = undefined;






export default CardCreateRequest;

