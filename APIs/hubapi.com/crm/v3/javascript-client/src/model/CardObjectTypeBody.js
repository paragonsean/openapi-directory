/**
 * CRM cards
 * Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CardObjectTypeBody model module.
 * @module model/CardObjectTypeBody
 * @version v3
 */
class CardObjectTypeBody {
    /**
     * Constructs a new <code>CardObjectTypeBody</code>.
     * @alias module:model/CardObjectTypeBody
     * @param name {module:model/CardObjectTypeBody.NameEnum} A CRM object type where this card should be displayed.
     * @param propertiesToSend {Array.<String>} An array of properties that should be sent to this card's target URL when the data fetch request is made. Must be valid properties for the corresponding CRM object type.
     */
    constructor(name, propertiesToSend) { 
        
        CardObjectTypeBody.initialize(this, name, propertiesToSend);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, propertiesToSend) { 
        obj['name'] = name;
        obj['propertiesToSend'] = propertiesToSend;
    }

    /**
     * Constructs a <code>CardObjectTypeBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardObjectTypeBody} obj Optional instance to populate.
     * @return {module:model/CardObjectTypeBody} The populated <code>CardObjectTypeBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardObjectTypeBody();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('propertiesToSend')) {
                obj['propertiesToSend'] = ApiClient.convertToType(data['propertiesToSend'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CardObjectTypeBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CardObjectTypeBody</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CardObjectTypeBody.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['propertiesToSend'])) {
            throw new Error("Expected the field `propertiesToSend` to be an array in the JSON data but got " + data['propertiesToSend']);
        }

        return true;
    }


}

CardObjectTypeBody.RequiredProperties = ["name", "propertiesToSend"];

/**
 * A CRM object type where this card should be displayed.
 * @member {module:model/CardObjectTypeBody.NameEnum} name
 */
CardObjectTypeBody.prototype['name'] = undefined;

/**
 * An array of properties that should be sent to this card's target URL when the data fetch request is made. Must be valid properties for the corresponding CRM object type.
 * @member {Array.<String>} propertiesToSend
 */
CardObjectTypeBody.prototype['propertiesToSend'] = undefined;





/**
 * Allowed values for the <code>name</code> property.
 * @enum {String}
 * @readonly
 */
CardObjectTypeBody['NameEnum'] = {

    /**
     * value: "contacts"
     * @const
     */
    "contacts": "contacts",

    /**
     * value: "deals"
     * @const
     */
    "deals": "deals",

    /**
     * value: "companies"
     * @const
     */
    "companies": "companies",

    /**
     * value: "tickets"
     * @const
     */
    "tickets": "tickets"
};



export default CardObjectTypeBody;

