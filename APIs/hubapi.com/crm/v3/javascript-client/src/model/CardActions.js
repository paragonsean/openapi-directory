/**
 * CRM cards
 * Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CardActions model module.
 * @module model/CardActions
 * @version v3
 */
class CardActions {
    /**
     * Constructs a new <code>CardActions</code>.
     * Configuration for custom user actions on cards.
     * @alias module:model/CardActions
     * @param baseUrls {Array.<String>} A list of URL prefixes that will be accepted for card action URLs. If your data fetch response includes an action URL that doesn't begin with one of these values, it will result in an error and the card will not be displayed.
     */
    constructor(baseUrls) { 
        
        CardActions.initialize(this, baseUrls);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, baseUrls) { 
        obj['baseUrls'] = baseUrls;
    }

    /**
     * Constructs a <code>CardActions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardActions} obj Optional instance to populate.
     * @return {module:model/CardActions} The populated <code>CardActions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardActions();

            if (data.hasOwnProperty('baseUrls')) {
                obj['baseUrls'] = ApiClient.convertToType(data['baseUrls'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CardActions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CardActions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CardActions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['baseUrls'])) {
            throw new Error("Expected the field `baseUrls` to be an array in the JSON data but got " + data['baseUrls']);
        }

        return true;
    }


}

CardActions.RequiredProperties = ["baseUrls"];

/**
 * A list of URL prefixes that will be accepted for card action URLs. If your data fetch response includes an action URL that doesn't begin with one of these values, it will result in an error and the card will not be displayed.
 * @member {Array.<String>} baseUrls
 */
CardActions.prototype['baseUrls'] = undefined;






export default CardActions;

