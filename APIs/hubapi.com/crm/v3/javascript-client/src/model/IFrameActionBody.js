/**
 * CRM cards
 * Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IFrameActionBody model module.
 * @module model/IFrameActionBody
 * @version v3
 */
class IFrameActionBody {
    /**
     * Constructs a new <code>IFrameActionBody</code>.
     * @alias module:model/IFrameActionBody
     * @param height {Number} 
     * @param propertyNamesIncluded {Array.<String>} 
     * @param type {module:model/IFrameActionBody.TypeEnum} 
     * @param url {String} 
     * @param width {Number} 
     */
    constructor(height, propertyNamesIncluded, type, url, width) { 
        
        IFrameActionBody.initialize(this, height, propertyNamesIncluded, type, url, width);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, height, propertyNamesIncluded, type, url, width) { 
        obj['height'] = height;
        obj['propertyNamesIncluded'] = propertyNamesIncluded;
        obj['type'] = type || 'IFRAME';
        obj['url'] = url;
        obj['width'] = width;
    }

    /**
     * Constructs a <code>IFrameActionBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IFrameActionBody} obj Optional instance to populate.
     * @return {module:model/IFrameActionBody} The populated <code>IFrameActionBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IFrameActionBody();

            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('propertyNamesIncluded')) {
                obj['propertyNamesIncluded'] = ApiClient.convertToType(data['propertyNamesIncluded'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IFrameActionBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IFrameActionBody</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IFrameActionBody.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['propertyNamesIncluded'])) {
            throw new Error("Expected the field `propertyNamesIncluded` to be an array in the JSON data but got " + data['propertyNamesIncluded']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

IFrameActionBody.RequiredProperties = ["height", "propertyNamesIncluded", "type", "url", "width"];

/**
 * @member {Number} height
 */
IFrameActionBody.prototype['height'] = undefined;

/**
 * @member {String} label
 */
IFrameActionBody.prototype['label'] = undefined;

/**
 * @member {Array.<String>} propertyNamesIncluded
 */
IFrameActionBody.prototype['propertyNamesIncluded'] = undefined;

/**
 * @member {module:model/IFrameActionBody.TypeEnum} type
 * @default 'IFRAME'
 */
IFrameActionBody.prototype['type'] = 'IFRAME';

/**
 * @member {String} url
 */
IFrameActionBody.prototype['url'] = undefined;

/**
 * @member {Number} width
 */
IFrameActionBody.prototype['width'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
IFrameActionBody['TypeEnum'] = {

    /**
     * value: "IFRAME"
     * @const
     */
    "IFRAME": "IFRAME"
};



export default IFrameActionBody;

