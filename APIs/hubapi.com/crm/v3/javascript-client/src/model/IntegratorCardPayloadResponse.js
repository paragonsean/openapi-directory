/**
 * CRM cards
 * Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IntegratorObjectResult from './IntegratorObjectResult';
import TopLevelActions from './TopLevelActions';

/**
 * The IntegratorCardPayloadResponse model module.
 * @module model/IntegratorCardPayloadResponse
 * @version v3
 */
class IntegratorCardPayloadResponse {
    /**
     * Constructs a new <code>IntegratorCardPayloadResponse</code>.
     * The card details payload, sent to HubSpot by an app in response to a data fetch request when a user visits a CRM record page.
     * @alias module:model/IntegratorCardPayloadResponse
     * @param totalCount {Number} The total number of card properties that will be sent in this response.
     */
    constructor(totalCount) { 
        
        IntegratorCardPayloadResponse.initialize(this, totalCount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, totalCount) { 
        obj['totalCount'] = totalCount;
    }

    /**
     * Constructs a <code>IntegratorCardPayloadResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IntegratorCardPayloadResponse} obj Optional instance to populate.
     * @return {module:model/IntegratorCardPayloadResponse} The populated <code>IntegratorCardPayloadResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IntegratorCardPayloadResponse();

            if (data.hasOwnProperty('allItemsLinkUrl')) {
                obj['allItemsLinkUrl'] = ApiClient.convertToType(data['allItemsLinkUrl'], 'String');
            }
            if (data.hasOwnProperty('cardLabel')) {
                obj['cardLabel'] = ApiClient.convertToType(data['cardLabel'], 'String');
            }
            if (data.hasOwnProperty('responseVersion')) {
                obj['responseVersion'] = ApiClient.convertToType(data['responseVersion'], 'String');
            }
            if (data.hasOwnProperty('sections')) {
                obj['sections'] = ApiClient.convertToType(data['sections'], [IntegratorObjectResult]);
            }
            if (data.hasOwnProperty('topLevelActions')) {
                obj['topLevelActions'] = TopLevelActions.constructFromObject(data['topLevelActions']);
            }
            if (data.hasOwnProperty('totalCount')) {
                obj['totalCount'] = ApiClient.convertToType(data['totalCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IntegratorCardPayloadResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IntegratorCardPayloadResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IntegratorCardPayloadResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['allItemsLinkUrl'] && !(typeof data['allItemsLinkUrl'] === 'string' || data['allItemsLinkUrl'] instanceof String)) {
            throw new Error("Expected the field `allItemsLinkUrl` to be a primitive type in the JSON string but got " + data['allItemsLinkUrl']);
        }
        // ensure the json data is a string
        if (data['cardLabel'] && !(typeof data['cardLabel'] === 'string' || data['cardLabel'] instanceof String)) {
            throw new Error("Expected the field `cardLabel` to be a primitive type in the JSON string but got " + data['cardLabel']);
        }
        // ensure the json data is a string
        if (data['responseVersion'] && !(typeof data['responseVersion'] === 'string' || data['responseVersion'] instanceof String)) {
            throw new Error("Expected the field `responseVersion` to be a primitive type in the JSON string but got " + data['responseVersion']);
        }
        if (data['sections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sections'])) {
                throw new Error("Expected the field `sections` to be an array in the JSON data but got " + data['sections']);
            }
            // validate the optional field `sections` (array)
            for (const item of data['sections']) {
                IntegratorObjectResult.validateJSON(item);
            };
        }
        // validate the optional field `topLevelActions`
        if (data['topLevelActions']) { // data not null
          TopLevelActions.validateJSON(data['topLevelActions']);
        }

        return true;
    }


}

IntegratorCardPayloadResponse.RequiredProperties = ["totalCount"];

/**
 * URL to a page the integrator has built that displays all details for this card. This URL will be displayed to users under a `See more [x]` link if there are more than five items in your response, where `[x]` is the value of `itemLabel`.
 * @member {String} allItemsLinkUrl
 */
IntegratorCardPayloadResponse.prototype['allItemsLinkUrl'] = undefined;

/**
 * The label to be used for the `allItemsLinkUrl` link (e.g. 'See more tickets'). If not provided, this falls back to the card's title.
 * @member {String} cardLabel
 */
IntegratorCardPayloadResponse.prototype['cardLabel'] = undefined;

/**
 * @member {module:model/IntegratorCardPayloadResponse.ResponseVersionEnum} responseVersion
 */
IntegratorCardPayloadResponse.prototype['responseVersion'] = undefined;

/**
 * A list of up to five valid card sub categories.
 * @member {Array.<module:model/IntegratorObjectResult>} sections
 */
IntegratorCardPayloadResponse.prototype['sections'] = undefined;

/**
 * @member {module:model/TopLevelActions} topLevelActions
 */
IntegratorCardPayloadResponse.prototype['topLevelActions'] = undefined;

/**
 * The total number of card properties that will be sent in this response.
 * @member {Number} totalCount
 */
IntegratorCardPayloadResponse.prototype['totalCount'] = undefined;





/**
 * Allowed values for the <code>responseVersion</code> property.
 * @enum {String}
 * @readonly
 */
IntegratorCardPayloadResponse['ResponseVersionEnum'] = {

    /**
     * value: "v1"
     * @const
     */
    "v1": "v1",

    /**
     * value: "v3"
     * @const
     */
    "v3": "v3"
};



export default IntegratorCardPayloadResponse;

