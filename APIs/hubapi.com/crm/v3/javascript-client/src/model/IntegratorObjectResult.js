/**
 * CRM cards
 * Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IntegratorObjectResultActionsInner from './IntegratorObjectResultActionsInner';
import ObjectToken from './ObjectToken';

/**
 * The IntegratorObjectResult model module.
 * @module model/IntegratorObjectResult
 * @version v3
 */
class IntegratorObjectResult {
    /**
     * Constructs a new <code>IntegratorObjectResult</code>.
     * @alias module:model/IntegratorObjectResult
     * @param actions {Array.<module:model/IntegratorObjectResultActionsInner>} 
     * @param id {String} 
     * @param title {String} 
     * @param tokens {Array.<module:model/ObjectToken>} 
     */
    constructor(actions, id, title, tokens) { 
        
        IntegratorObjectResult.initialize(this, actions, id, title, tokens);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, actions, id, title, tokens) { 
        obj['actions'] = actions;
        obj['id'] = id;
        obj['title'] = title;
        obj['tokens'] = tokens;
    }

    /**
     * Constructs a <code>IntegratorObjectResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IntegratorObjectResult} obj Optional instance to populate.
     * @return {module:model/IntegratorObjectResult} The populated <code>IntegratorObjectResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IntegratorObjectResult();

            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], [IntegratorObjectResultActionsInner]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('linkUrl')) {
                obj['linkUrl'] = ApiClient.convertToType(data['linkUrl'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('tokens')) {
                obj['tokens'] = ApiClient.convertToType(data['tokens'], [ObjectToken]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IntegratorObjectResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IntegratorObjectResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IntegratorObjectResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['actions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['actions'])) {
                throw new Error("Expected the field `actions` to be an array in the JSON data but got " + data['actions']);
            }
            // validate the optional field `actions` (array)
            for (const item of data['actions']) {
                IntegratorObjectResultActionsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['linkUrl'] && !(typeof data['linkUrl'] === 'string' || data['linkUrl'] instanceof String)) {
            throw new Error("Expected the field `linkUrl` to be a primitive type in the JSON string but got " + data['linkUrl']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        if (data['tokens']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tokens'])) {
                throw new Error("Expected the field `tokens` to be an array in the JSON data but got " + data['tokens']);
            }
            // validate the optional field `tokens` (array)
            for (const item of data['tokens']) {
                ObjectToken.validateJSON(item);
            };
        }

        return true;
    }


}

IntegratorObjectResult.RequiredProperties = ["actions", "id", "title", "tokens"];

/**
 * @member {Array.<module:model/IntegratorObjectResultActionsInner>} actions
 */
IntegratorObjectResult.prototype['actions'] = undefined;

/**
 * @member {String} id
 */
IntegratorObjectResult.prototype['id'] = undefined;

/**
 * @member {String} linkUrl
 */
IntegratorObjectResult.prototype['linkUrl'] = undefined;

/**
 * @member {String} title
 */
IntegratorObjectResult.prototype['title'] = undefined;

/**
 * @member {Array.<module:model/ObjectToken>} tokens
 */
IntegratorObjectResult.prototype['tokens'] = undefined;






export default IntegratorObjectResult;

