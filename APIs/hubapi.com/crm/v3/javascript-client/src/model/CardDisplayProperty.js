/**
 * CRM cards
 * Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DisplayOption from './DisplayOption';

/**
 * The CardDisplayProperty model module.
 * @module model/CardDisplayProperty
 * @version v3
 */
class CardDisplayProperty {
    /**
     * Constructs a new <code>CardDisplayProperty</code>.
     * Definition for a card display property.
     * @alias module:model/CardDisplayProperty
     * @param dataType {module:model/CardDisplayProperty.DataTypeEnum} Type of data represented by this property.
     * @param label {String} The label for this property as you'd like it displayed to users.
     * @param name {String} An internal identifier for this property. This value must be unique TODO.
     * @param options {Array.<module:model/DisplayOption>} An array of available options that can be displayed. Only used in when `dataType` is `STATUS`.
     */
    constructor(dataType, label, name, options) { 
        
        CardDisplayProperty.initialize(this, dataType, label, name, options);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dataType, label, name, options) { 
        obj['dataType'] = dataType;
        obj['label'] = label;
        obj['name'] = name;
        obj['options'] = options;
    }

    /**
     * Constructs a <code>CardDisplayProperty</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardDisplayProperty} obj Optional instance to populate.
     * @return {module:model/CardDisplayProperty} The populated <code>CardDisplayProperty</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardDisplayProperty();

            if (data.hasOwnProperty('dataType')) {
                obj['dataType'] = ApiClient.convertToType(data['dataType'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], [DisplayOption]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CardDisplayProperty</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CardDisplayProperty</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CardDisplayProperty.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dataType'] && !(typeof data['dataType'] === 'string' || data['dataType'] instanceof String)) {
            throw new Error("Expected the field `dataType` to be a primitive type in the JSON string but got " + data['dataType']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['options']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['options'])) {
                throw new Error("Expected the field `options` to be an array in the JSON data but got " + data['options']);
            }
            // validate the optional field `options` (array)
            for (const item of data['options']) {
                DisplayOption.validateJSON(item);
            };
        }

        return true;
    }


}

CardDisplayProperty.RequiredProperties = ["dataType", "label", "name", "options"];

/**
 * Type of data represented by this property.
 * @member {module:model/CardDisplayProperty.DataTypeEnum} dataType
 */
CardDisplayProperty.prototype['dataType'] = undefined;

/**
 * The label for this property as you'd like it displayed to users.
 * @member {String} label
 */
CardDisplayProperty.prototype['label'] = undefined;

/**
 * An internal identifier for this property. This value must be unique TODO.
 * @member {String} name
 */
CardDisplayProperty.prototype['name'] = undefined;

/**
 * An array of available options that can be displayed. Only used in when `dataType` is `STATUS`.
 * @member {Array.<module:model/DisplayOption>} options
 */
CardDisplayProperty.prototype['options'] = undefined;





/**
 * Allowed values for the <code>dataType</code> property.
 * @enum {String}
 * @readonly
 */
CardDisplayProperty['DataTypeEnum'] = {

    /**
     * value: "BOOLEAN"
     * @const
     */
    "BOOLEAN": "BOOLEAN",

    /**
     * value: "CURRENCY"
     * @const
     */
    "CURRENCY": "CURRENCY",

    /**
     * value: "DATE"
     * @const
     */
    "DATE": "DATE",

    /**
     * value: "DATETIME"
     * @const
     */
    "DATETIME": "DATETIME",

    /**
     * value: "EMAIL"
     * @const
     */
    "EMAIL": "EMAIL",

    /**
     * value: "LINK"
     * @const
     */
    "LINK": "LINK",

    /**
     * value: "NUMERIC"
     * @const
     */
    "NUMERIC": "NUMERIC",

    /**
     * value: "STRING"
     * @const
     */
    "STRING": "STRING",

    /**
     * value: "STATUS"
     * @const
     */
    "STATUS": "STATUS"
};



export default CardDisplayProperty;

