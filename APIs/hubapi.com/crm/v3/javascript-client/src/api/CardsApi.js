/**
 * CRM cards
 * Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CardCreateRequest from '../model/CardCreateRequest';
import CardListResponse from '../model/CardListResponse';
import CardPatchRequest from '../model/CardPatchRequest';
import CardResponse from '../model/CardResponse';
import Error from '../model/Error';

/**
* Cards service.
* @module api/CardsApi
* @version v3
*/
export default class CardsApi {

    /**
    * Constructs a new CardsApi. 
    * @alias module:api/CardsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteCrmV3ExtensionsCardsAppIdCardId operation.
     * @callback module:api/CardsApi~deleteCrmV3ExtensionsCardsAppIdCardIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a card
     * Permanently deletes a card definition with the given ID. Once deleted, data fetch requests for this card will no longer be sent to your service. This can't be undone.
     * @param {Number} appId The ID of the target app.
     * @param {String} cardId The ID of the card to delete.
     * @param {module:api/CardsApi~deleteCrmV3ExtensionsCardsAppIdCardIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCrmV3ExtensionsCardsAppIdCardId(appId, cardId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteCrmV3ExtensionsCardsAppIdCardId");
      }
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling deleteCrmV3ExtensionsCardsAppIdCardId");
      }

      let pathParams = {
        'appId': appId,
        'cardId': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{appId}/{cardId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCrmV3ExtensionsCardsAppId operation.
     * @callback module:api/CardsApi~getCrmV3ExtensionsCardsAppIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all cards
     * Returns a list of cards for a given app.
     * @param {Number} appId The ID of the target app.
     * @param {module:api/CardsApi~getCrmV3ExtensionsCardsAppIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardListResponse}
     */
    getCrmV3ExtensionsCardsAppId(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getCrmV3ExtensionsCardsAppId");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = CardListResponse;
      return this.apiClient.callApi(
        '/{appId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCrmV3ExtensionsCardsAppIdCardId operation.
     * @callback module:api/CardsApi~getCrmV3ExtensionsCardsAppIdCardIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a card.
     * Returns the definition for a card with the given ID.
     * @param {Number} appId The ID of the target app.
     * @param {String} cardId The ID of the target card.
     * @param {module:api/CardsApi~getCrmV3ExtensionsCardsAppIdCardIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardResponse}
     */
    getCrmV3ExtensionsCardsAppIdCardId(appId, cardId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getCrmV3ExtensionsCardsAppIdCardId");
      }
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling getCrmV3ExtensionsCardsAppIdCardId");
      }

      let pathParams = {
        'appId': appId,
        'cardId': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = CardResponse;
      return this.apiClient.callApi(
        '/{appId}/{cardId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCrmV3ExtensionsCardsAppIdCardId operation.
     * @callback module:api/CardsApi~patchCrmV3ExtensionsCardsAppIdCardIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a card
     * Update a card definition with new details.
     * @param {Number} appId The ID of the target app.
     * @param {String} cardId The ID of the card to update.
     * @param {module:model/CardPatchRequest} cardPatchRequest Card definition fields to be updated.
     * @param {module:api/CardsApi~patchCrmV3ExtensionsCardsAppIdCardIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardResponse}
     */
    patchCrmV3ExtensionsCardsAppIdCardId(appId, cardId, cardPatchRequest, callback) {
      let postBody = cardPatchRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling patchCrmV3ExtensionsCardsAppIdCardId");
      }
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling patchCrmV3ExtensionsCardsAppIdCardId");
      }
      // verify the required parameter 'cardPatchRequest' is set
      if (cardPatchRequest === undefined || cardPatchRequest === null) {
        throw new Error("Missing the required parameter 'cardPatchRequest' when calling patchCrmV3ExtensionsCardsAppIdCardId");
      }

      let pathParams = {
        'appId': appId,
        'cardId': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = CardResponse;
      return this.apiClient.callApi(
        '/{appId}/{cardId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCrmV3ExtensionsCardsAppId operation.
     * @callback module:api/CardsApi~postCrmV3ExtensionsCardsAppIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new card
     * Defines a new card that will become active on an account when this app is installed.
     * @param {Number} appId The ID of the target app.
     * @param {module:model/CardCreateRequest} cardCreateRequest The new card definition.
     * @param {module:api/CardsApi~postCrmV3ExtensionsCardsAppIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardResponse}
     */
    postCrmV3ExtensionsCardsAppId(appId, cardCreateRequest, callback) {
      let postBody = cardCreateRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling postCrmV3ExtensionsCardsAppId");
      }
      // verify the required parameter 'cardCreateRequest' is set
      if (cardCreateRequest === undefined || cardCreateRequest === null) {
        throw new Error("Missing the required parameter 'cardCreateRequest' when calling postCrmV3ExtensionsCardsAppId");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = CardResponse;
      return this.apiClient.callApi(
        '/{appId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
