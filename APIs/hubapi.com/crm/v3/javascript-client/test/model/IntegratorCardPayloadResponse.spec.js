/**
 * CRM cards
 * Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CrmCards);
  }
}(this, function(expect, CrmCards) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CrmCards.IntegratorCardPayloadResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IntegratorCardPayloadResponse', function() {
    it('should create an instance of IntegratorCardPayloadResponse', function() {
      // uncomment below and update the code to test IntegratorCardPayloadResponse
      //var instance = new CrmCards.IntegratorCardPayloadResponse();
      //expect(instance).to.be.a(CrmCards.IntegratorCardPayloadResponse);
    });

    it('should have the property allItemsLinkUrl (base name: "allItemsLinkUrl")', function() {
      // uncomment below and update the code to test the property allItemsLinkUrl
      //var instance = new CrmCards.IntegratorCardPayloadResponse();
      //expect(instance).to.be();
    });

    it('should have the property cardLabel (base name: "cardLabel")', function() {
      // uncomment below and update the code to test the property cardLabel
      //var instance = new CrmCards.IntegratorCardPayloadResponse();
      //expect(instance).to.be();
    });

    it('should have the property responseVersion (base name: "responseVersion")', function() {
      // uncomment below and update the code to test the property responseVersion
      //var instance = new CrmCards.IntegratorCardPayloadResponse();
      //expect(instance).to.be();
    });

    it('should have the property sections (base name: "sections")', function() {
      // uncomment below and update the code to test the property sections
      //var instance = new CrmCards.IntegratorCardPayloadResponse();
      //expect(instance).to.be();
    });

    it('should have the property topLevelActions (base name: "topLevelActions")', function() {
      // uncomment below and update the code to test the property topLevelActions
      //var instance = new CrmCards.IntegratorCardPayloadResponse();
      //expect(instance).to.be();
    });

    it('should have the property totalCount (base name: "totalCount")', function() {
      // uncomment below and update the code to test the property totalCount
      //var instance = new CrmCards.IntegratorCardPayloadResponse();
      //expect(instance).to.be();
    });

  });

}));
