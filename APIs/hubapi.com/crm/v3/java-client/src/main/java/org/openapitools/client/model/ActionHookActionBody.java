/*
 * CRM cards
 * Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ActionConfirmationBody;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ActionHookActionBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:17.301318-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActionHookActionBody {
  public static final String SERIALIZED_NAME_CONFIRMATION = "confirmation";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION)
  private ActionConfirmationBody confirmation;

  /**
   * Gets or Sets httpMethod
   */
  @JsonAdapter(HttpMethodEnum.Adapter.class)
  public enum HttpMethodEnum {
    CONNECT("CONNECT"),
    
    DELETE("DELETE"),
    
    GET("GET"),
    
    HEAD("HEAD"),
    
    OPTIONS("OPTIONS"),
    
    PATCH("PATCH"),
    
    POST("POST"),
    
    PUT("PUT"),
    
    TRACE("TRACE");

    private String value;

    HttpMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HttpMethodEnum fromValue(String value) {
      for (HttpMethodEnum b : HttpMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HttpMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HttpMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HttpMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HttpMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HttpMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HTTP_METHOD = "httpMethod";
  @SerializedName(SERIALIZED_NAME_HTTP_METHOD)
  private HttpMethodEnum httpMethod;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_PROPERTY_NAMES_INCLUDED = "propertyNamesIncluded";
  @SerializedName(SERIALIZED_NAME_PROPERTY_NAMES_INCLUDED)
  private List<String> propertyNamesIncluded = new ArrayList<>();

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ACTION_HOOK("ACTION_HOOK");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type = TypeEnum.ACTION_HOOK;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public ActionHookActionBody() {
  }

  public ActionHookActionBody confirmation(ActionConfirmationBody confirmation) {
    this.confirmation = confirmation;
    return this;
  }

  /**
   * Get confirmation
   * @return confirmation
   */
  @javax.annotation.Nullable
  public ActionConfirmationBody getConfirmation() {
    return confirmation;
  }

  public void setConfirmation(ActionConfirmationBody confirmation) {
    this.confirmation = confirmation;
  }


  public ActionHookActionBody httpMethod(HttpMethodEnum httpMethod) {
    this.httpMethod = httpMethod;
    return this;
  }

  /**
   * Get httpMethod
   * @return httpMethod
   */
  @javax.annotation.Nonnull
  public HttpMethodEnum getHttpMethod() {
    return httpMethod;
  }

  public void setHttpMethod(HttpMethodEnum httpMethod) {
    this.httpMethod = httpMethod;
  }


  public ActionHookActionBody label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public ActionHookActionBody propertyNamesIncluded(List<String> propertyNamesIncluded) {
    this.propertyNamesIncluded = propertyNamesIncluded;
    return this;
  }

  public ActionHookActionBody addPropertyNamesIncludedItem(String propertyNamesIncludedItem) {
    if (this.propertyNamesIncluded == null) {
      this.propertyNamesIncluded = new ArrayList<>();
    }
    this.propertyNamesIncluded.add(propertyNamesIncludedItem);
    return this;
  }

  /**
   * Get propertyNamesIncluded
   * @return propertyNamesIncluded
   */
  @javax.annotation.Nonnull
  public List<String> getPropertyNamesIncluded() {
    return propertyNamesIncluded;
  }

  public void setPropertyNamesIncluded(List<String> propertyNamesIncluded) {
    this.propertyNamesIncluded = propertyNamesIncluded;
  }


  public ActionHookActionBody type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public ActionHookActionBody url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActionHookActionBody actionHookActionBody = (ActionHookActionBody) o;
    return Objects.equals(this.confirmation, actionHookActionBody.confirmation) &&
        Objects.equals(this.httpMethod, actionHookActionBody.httpMethod) &&
        Objects.equals(this.label, actionHookActionBody.label) &&
        Objects.equals(this.propertyNamesIncluded, actionHookActionBody.propertyNamesIncluded) &&
        Objects.equals(this.type, actionHookActionBody.type) &&
        Objects.equals(this.url, actionHookActionBody.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confirmation, httpMethod, label, propertyNamesIncluded, type, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActionHookActionBody {\n");
    sb.append("    confirmation: ").append(toIndentedString(confirmation)).append("\n");
    sb.append("    httpMethod: ").append(toIndentedString(httpMethod)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    propertyNamesIncluded: ").append(toIndentedString(propertyNamesIncluded)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("confirmation");
    openapiFields.add("httpMethod");
    openapiFields.add("label");
    openapiFields.add("propertyNamesIncluded");
    openapiFields.add("type");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("httpMethod");
    openapiRequiredFields.add("propertyNamesIncluded");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActionHookActionBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActionHookActionBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActionHookActionBody is not found in the empty JSON string", ActionHookActionBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActionHookActionBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActionHookActionBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ActionHookActionBody.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `confirmation`
      if (jsonObj.get("confirmation") != null && !jsonObj.get("confirmation").isJsonNull()) {
        ActionConfirmationBody.validateJsonElement(jsonObj.get("confirmation"));
      }
      if (!jsonObj.get("httpMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("httpMethod").toString()));
      }
      // validate the required field `httpMethod`
      HttpMethodEnum.validateJsonElement(jsonObj.get("httpMethod"));
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("propertyNamesIncluded") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("propertyNamesIncluded").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `propertyNamesIncluded` to be an array in the JSON string but got `%s`", jsonObj.get("propertyNamesIncluded").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActionHookActionBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActionHookActionBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActionHookActionBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActionHookActionBody.class));

       return (TypeAdapter<T>) new TypeAdapter<ActionHookActionBody>() {
           @Override
           public void write(JsonWriter out, ActionHookActionBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActionHookActionBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActionHookActionBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActionHookActionBody
   * @throws IOException if the JSON string is invalid with respect to ActionHookActionBody
   */
  public static ActionHookActionBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActionHookActionBody.class);
  }

  /**
   * Convert an instance of ActionHookActionBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

