/*
 * CRM cards
 * Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CardObjectTypeBody;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Variant of CardFetchBody with fields as optional for patches
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:17.301318-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CardFetchBodyPatch {
  public static final String SERIALIZED_NAME_OBJECT_TYPES = "objectTypes";
  @SerializedName(SERIALIZED_NAME_OBJECT_TYPES)
  private List<CardObjectTypeBody> objectTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_URL = "targetUrl";
  @SerializedName(SERIALIZED_NAME_TARGET_URL)
  private String targetUrl;

  public CardFetchBodyPatch() {
  }

  public CardFetchBodyPatch objectTypes(List<CardObjectTypeBody> objectTypes) {
    this.objectTypes = objectTypes;
    return this;
  }

  public CardFetchBodyPatch addObjectTypesItem(CardObjectTypeBody objectTypesItem) {
    if (this.objectTypes == null) {
      this.objectTypes = new ArrayList<>();
    }
    this.objectTypes.add(objectTypesItem);
    return this;
  }

  /**
   * An array of CRM object types where this card should be displayed. HubSpot will call your target URL whenever a user visits a record page of the types defined here.
   * @return objectTypes
   */
  @javax.annotation.Nonnull
  public List<CardObjectTypeBody> getObjectTypes() {
    return objectTypes;
  }

  public void setObjectTypes(List<CardObjectTypeBody> objectTypes) {
    this.objectTypes = objectTypes;
  }


  public CardFetchBodyPatch targetUrl(String targetUrl) {
    this.targetUrl = targetUrl;
    return this;
  }

  /**
   * URL to a service endpoint that will respond with details for this card. HubSpot will call this endpoint each time a user visits a CRM record page where this card should be displayed.
   * @return targetUrl
   */
  @javax.annotation.Nullable
  public String getTargetUrl() {
    return targetUrl;
  }

  public void setTargetUrl(String targetUrl) {
    this.targetUrl = targetUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardFetchBodyPatch cardFetchBodyPatch = (CardFetchBodyPatch) o;
    return Objects.equals(this.objectTypes, cardFetchBodyPatch.objectTypes) &&
        Objects.equals(this.targetUrl, cardFetchBodyPatch.targetUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(objectTypes, targetUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardFetchBodyPatch {\n");
    sb.append("    objectTypes: ").append(toIndentedString(objectTypes)).append("\n");
    sb.append("    targetUrl: ").append(toIndentedString(targetUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("objectTypes");
    openapiFields.add("targetUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("objectTypes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CardFetchBodyPatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CardFetchBodyPatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardFetchBodyPatch is not found in the empty JSON string", CardFetchBodyPatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CardFetchBodyPatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CardFetchBodyPatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CardFetchBodyPatch.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("objectTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectTypes` to be an array in the JSON string but got `%s`", jsonObj.get("objectTypes").toString()));
      }

      JsonArray jsonArrayobjectTypes = jsonObj.getAsJsonArray("objectTypes");
      // validate the required field `objectTypes` (array)
      for (int i = 0; i < jsonArrayobjectTypes.size(); i++) {
        CardObjectTypeBody.validateJsonElement(jsonArrayobjectTypes.get(i));
      };
      if ((jsonObj.get("targetUrl") != null && !jsonObj.get("targetUrl").isJsonNull()) && !jsonObj.get("targetUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardFetchBodyPatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardFetchBodyPatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardFetchBodyPatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardFetchBodyPatch.class));

       return (TypeAdapter<T>) new TypeAdapter<CardFetchBodyPatch>() {
           @Override
           public void write(JsonWriter out, CardFetchBodyPatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CardFetchBodyPatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CardFetchBodyPatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CardFetchBodyPatch
   * @throws IOException if the JSON string is invalid with respect to CardFetchBodyPatch
   */
  public static CardFetchBodyPatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardFetchBodyPatch.class);
  }

  /**
   * Convert an instance of CardFetchBodyPatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

