/*
 * CRM cards
 * Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IntegratorObjectResult;
import org.openapitools.client.model.TopLevelActions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The card details payload, sent to HubSpot by an app in response to a data fetch request when a user visits a CRM record page.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:17.301318-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IntegratorCardPayloadResponse {
  public static final String SERIALIZED_NAME_ALL_ITEMS_LINK_URL = "allItemsLinkUrl";
  @SerializedName(SERIALIZED_NAME_ALL_ITEMS_LINK_URL)
  private String allItemsLinkUrl;

  public static final String SERIALIZED_NAME_CARD_LABEL = "cardLabel";
  @SerializedName(SERIALIZED_NAME_CARD_LABEL)
  private String cardLabel;

  /**
   * Gets or Sets responseVersion
   */
  @JsonAdapter(ResponseVersionEnum.Adapter.class)
  public enum ResponseVersionEnum {
    V1("v1"),
    
    V3("v3");

    private String value;

    ResponseVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResponseVersionEnum fromValue(String value) {
      for (ResponseVersionEnum b : ResponseVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResponseVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResponseVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResponseVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResponseVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResponseVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESPONSE_VERSION = "responseVersion";
  @SerializedName(SERIALIZED_NAME_RESPONSE_VERSION)
  private ResponseVersionEnum responseVersion;

  public static final String SERIALIZED_NAME_SECTIONS = "sections";
  @SerializedName(SERIALIZED_NAME_SECTIONS)
  private List<IntegratorObjectResult> sections = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOP_LEVEL_ACTIONS = "topLevelActions";
  @SerializedName(SERIALIZED_NAME_TOP_LEVEL_ACTIONS)
  private TopLevelActions topLevelActions;

  public static final String SERIALIZED_NAME_TOTAL_COUNT = "totalCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_COUNT)
  private Integer totalCount;

  public IntegratorCardPayloadResponse() {
  }

  public IntegratorCardPayloadResponse allItemsLinkUrl(String allItemsLinkUrl) {
    this.allItemsLinkUrl = allItemsLinkUrl;
    return this;
  }

  /**
   * URL to a page the integrator has built that displays all details for this card. This URL will be displayed to users under a &#x60;See more [x]&#x60; link if there are more than five items in your response, where &#x60;[x]&#x60; is the value of &#x60;itemLabel&#x60;.
   * @return allItemsLinkUrl
   */
  @javax.annotation.Nullable
  public String getAllItemsLinkUrl() {
    return allItemsLinkUrl;
  }

  public void setAllItemsLinkUrl(String allItemsLinkUrl) {
    this.allItemsLinkUrl = allItemsLinkUrl;
  }


  public IntegratorCardPayloadResponse cardLabel(String cardLabel) {
    this.cardLabel = cardLabel;
    return this;
  }

  /**
   * The label to be used for the &#x60;allItemsLinkUrl&#x60; link (e.g. &#39;See more tickets&#39;). If not provided, this falls back to the card&#39;s title.
   * @return cardLabel
   */
  @javax.annotation.Nullable
  public String getCardLabel() {
    return cardLabel;
  }

  public void setCardLabel(String cardLabel) {
    this.cardLabel = cardLabel;
  }


  public IntegratorCardPayloadResponse responseVersion(ResponseVersionEnum responseVersion) {
    this.responseVersion = responseVersion;
    return this;
  }

  /**
   * Get responseVersion
   * @return responseVersion
   */
  @javax.annotation.Nullable
  public ResponseVersionEnum getResponseVersion() {
    return responseVersion;
  }

  public void setResponseVersion(ResponseVersionEnum responseVersion) {
    this.responseVersion = responseVersion;
  }


  public IntegratorCardPayloadResponse sections(List<IntegratorObjectResult> sections) {
    this.sections = sections;
    return this;
  }

  public IntegratorCardPayloadResponse addSectionsItem(IntegratorObjectResult sectionsItem) {
    if (this.sections == null) {
      this.sections = new ArrayList<>();
    }
    this.sections.add(sectionsItem);
    return this;
  }

  /**
   * A list of up to five valid card sub categories.
   * @return sections
   */
  @javax.annotation.Nullable
  public List<IntegratorObjectResult> getSections() {
    return sections;
  }

  public void setSections(List<IntegratorObjectResult> sections) {
    this.sections = sections;
  }


  public IntegratorCardPayloadResponse topLevelActions(TopLevelActions topLevelActions) {
    this.topLevelActions = topLevelActions;
    return this;
  }

  /**
   * Get topLevelActions
   * @return topLevelActions
   */
  @javax.annotation.Nullable
  public TopLevelActions getTopLevelActions() {
    return topLevelActions;
  }

  public void setTopLevelActions(TopLevelActions topLevelActions) {
    this.topLevelActions = topLevelActions;
  }


  public IntegratorCardPayloadResponse totalCount(Integer totalCount) {
    this.totalCount = totalCount;
    return this;
  }

  /**
   * The total number of card properties that will be sent in this response.
   * @return totalCount
   */
  @javax.annotation.Nonnull
  public Integer getTotalCount() {
    return totalCount;
  }

  public void setTotalCount(Integer totalCount) {
    this.totalCount = totalCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegratorCardPayloadResponse integratorCardPayloadResponse = (IntegratorCardPayloadResponse) o;
    return Objects.equals(this.allItemsLinkUrl, integratorCardPayloadResponse.allItemsLinkUrl) &&
        Objects.equals(this.cardLabel, integratorCardPayloadResponse.cardLabel) &&
        Objects.equals(this.responseVersion, integratorCardPayloadResponse.responseVersion) &&
        Objects.equals(this.sections, integratorCardPayloadResponse.sections) &&
        Objects.equals(this.topLevelActions, integratorCardPayloadResponse.topLevelActions) &&
        Objects.equals(this.totalCount, integratorCardPayloadResponse.totalCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allItemsLinkUrl, cardLabel, responseVersion, sections, topLevelActions, totalCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegratorCardPayloadResponse {\n");
    sb.append("    allItemsLinkUrl: ").append(toIndentedString(allItemsLinkUrl)).append("\n");
    sb.append("    cardLabel: ").append(toIndentedString(cardLabel)).append("\n");
    sb.append("    responseVersion: ").append(toIndentedString(responseVersion)).append("\n");
    sb.append("    sections: ").append(toIndentedString(sections)).append("\n");
    sb.append("    topLevelActions: ").append(toIndentedString(topLevelActions)).append("\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allItemsLinkUrl");
    openapiFields.add("cardLabel");
    openapiFields.add("responseVersion");
    openapiFields.add("sections");
    openapiFields.add("topLevelActions");
    openapiFields.add("totalCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("totalCount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IntegratorCardPayloadResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IntegratorCardPayloadResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntegratorCardPayloadResponse is not found in the empty JSON string", IntegratorCardPayloadResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IntegratorCardPayloadResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IntegratorCardPayloadResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IntegratorCardPayloadResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("allItemsLinkUrl") != null && !jsonObj.get("allItemsLinkUrl").isJsonNull()) && !jsonObj.get("allItemsLinkUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allItemsLinkUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allItemsLinkUrl").toString()));
      }
      if ((jsonObj.get("cardLabel") != null && !jsonObj.get("cardLabel").isJsonNull()) && !jsonObj.get("cardLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardLabel").toString()));
      }
      if ((jsonObj.get("responseVersion") != null && !jsonObj.get("responseVersion").isJsonNull()) && !jsonObj.get("responseVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseVersion").toString()));
      }
      // validate the optional field `responseVersion`
      if (jsonObj.get("responseVersion") != null && !jsonObj.get("responseVersion").isJsonNull()) {
        ResponseVersionEnum.validateJsonElement(jsonObj.get("responseVersion"));
      }
      if (jsonObj.get("sections") != null && !jsonObj.get("sections").isJsonNull()) {
        JsonArray jsonArraysections = jsonObj.getAsJsonArray("sections");
        if (jsonArraysections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sections` to be an array in the JSON string but got `%s`", jsonObj.get("sections").toString()));
          }

          // validate the optional field `sections` (array)
          for (int i = 0; i < jsonArraysections.size(); i++) {
            IntegratorObjectResult.validateJsonElement(jsonArraysections.get(i));
          };
        }
      }
      // validate the optional field `topLevelActions`
      if (jsonObj.get("topLevelActions") != null && !jsonObj.get("topLevelActions").isJsonNull()) {
        TopLevelActions.validateJsonElement(jsonObj.get("topLevelActions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntegratorCardPayloadResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntegratorCardPayloadResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntegratorCardPayloadResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntegratorCardPayloadResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<IntegratorCardPayloadResponse>() {
           @Override
           public void write(JsonWriter out, IntegratorCardPayloadResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IntegratorCardPayloadResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IntegratorCardPayloadResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IntegratorCardPayloadResponse
   * @throws IOException if the JSON string is invalid with respect to IntegratorCardPayloadResponse
   */
  public static IntegratorCardPayloadResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntegratorCardPayloadResponse.class);
  }

  /**
   * Convert an instance of IntegratorCardPayloadResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

