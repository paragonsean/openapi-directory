/*
 * CRM cards
 * Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CardCreateRequest;
import org.openapitools.client.model.CardListResponse;
import org.openapitools.client.model.CardPatchRequest;
import org.openapitools.client.model.CardResponse;
import org.openapitools.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CardsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CardsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CardsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteCrmV3ExtensionsCardsAppIdCardId
     * @param appId The ID of the target app. (required)
     * @param cardId The ID of the card to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCrmV3ExtensionsCardsAppIdCardIdCall(Integer appId, String cardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{appId}/{cardId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developer_hapikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCrmV3ExtensionsCardsAppIdCardIdValidateBeforeCall(Integer appId, String cardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteCrmV3ExtensionsCardsAppIdCardId(Async)");
        }

        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling deleteCrmV3ExtensionsCardsAppIdCardId(Async)");
        }

        return deleteCrmV3ExtensionsCardsAppIdCardIdCall(appId, cardId, _callback);

    }

    /**
     * Delete a card
     * Permanently deletes a card definition with the given ID. Once deleted, data fetch requests for this card will no longer be sent to your service. This can&#39;t be undone.
     * @param appId The ID of the target app. (required)
     * @param cardId The ID of the card to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCrmV3ExtensionsCardsAppIdCardId(Integer appId, String cardId) throws ApiException {
        deleteCrmV3ExtensionsCardsAppIdCardIdWithHttpInfo(appId, cardId);
    }

    /**
     * Delete a card
     * Permanently deletes a card definition with the given ID. Once deleted, data fetch requests for this card will no longer be sent to your service. This can&#39;t be undone.
     * @param appId The ID of the target app. (required)
     * @param cardId The ID of the card to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCrmV3ExtensionsCardsAppIdCardIdWithHttpInfo(Integer appId, String cardId) throws ApiException {
        okhttp3.Call localVarCall = deleteCrmV3ExtensionsCardsAppIdCardIdValidateBeforeCall(appId, cardId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a card (asynchronously)
     * Permanently deletes a card definition with the given ID. Once deleted, data fetch requests for this card will no longer be sent to your service. This can&#39;t be undone.
     * @param appId The ID of the target app. (required)
     * @param cardId The ID of the card to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCrmV3ExtensionsCardsAppIdCardIdAsync(Integer appId, String cardId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCrmV3ExtensionsCardsAppIdCardIdValidateBeforeCall(appId, cardId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCrmV3ExtensionsCardsAppId
     * @param appId The ID of the target app. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCrmV3ExtensionsCardsAppIdCall(Integer appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developer_hapikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCrmV3ExtensionsCardsAppIdValidateBeforeCall(Integer appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getCrmV3ExtensionsCardsAppId(Async)");
        }

        return getCrmV3ExtensionsCardsAppIdCall(appId, _callback);

    }

    /**
     * Get all cards
     * Returns a list of cards for a given app.
     * @param appId The ID of the target app. (required)
     * @return CardListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public CardListResponse getCrmV3ExtensionsCardsAppId(Integer appId) throws ApiException {
        ApiResponse<CardListResponse> localVarResp = getCrmV3ExtensionsCardsAppIdWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * Get all cards
     * Returns a list of cards for a given app.
     * @param appId The ID of the target app. (required)
     * @return ApiResponse&lt;CardListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardListResponse> getCrmV3ExtensionsCardsAppIdWithHttpInfo(Integer appId) throws ApiException {
        okhttp3.Call localVarCall = getCrmV3ExtensionsCardsAppIdValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<CardListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all cards (asynchronously)
     * Returns a list of cards for a given app.
     * @param appId The ID of the target app. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCrmV3ExtensionsCardsAppIdAsync(Integer appId, final ApiCallback<CardListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCrmV3ExtensionsCardsAppIdValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<CardListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCrmV3ExtensionsCardsAppIdCardId
     * @param appId The ID of the target app. (required)
     * @param cardId The ID of the target card. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCrmV3ExtensionsCardsAppIdCardIdCall(Integer appId, String cardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{appId}/{cardId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developer_hapikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCrmV3ExtensionsCardsAppIdCardIdValidateBeforeCall(Integer appId, String cardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getCrmV3ExtensionsCardsAppIdCardId(Async)");
        }

        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling getCrmV3ExtensionsCardsAppIdCardId(Async)");
        }

        return getCrmV3ExtensionsCardsAppIdCardIdCall(appId, cardId, _callback);

    }

    /**
     * Get a card.
     * Returns the definition for a card with the given ID.
     * @param appId The ID of the target app. (required)
     * @param cardId The ID of the target card. (required)
     * @return CardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public CardResponse getCrmV3ExtensionsCardsAppIdCardId(Integer appId, String cardId) throws ApiException {
        ApiResponse<CardResponse> localVarResp = getCrmV3ExtensionsCardsAppIdCardIdWithHttpInfo(appId, cardId);
        return localVarResp.getData();
    }

    /**
     * Get a card.
     * Returns the definition for a card with the given ID.
     * @param appId The ID of the target app. (required)
     * @param cardId The ID of the target card. (required)
     * @return ApiResponse&lt;CardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardResponse> getCrmV3ExtensionsCardsAppIdCardIdWithHttpInfo(Integer appId, String cardId) throws ApiException {
        okhttp3.Call localVarCall = getCrmV3ExtensionsCardsAppIdCardIdValidateBeforeCall(appId, cardId, null);
        Type localVarReturnType = new TypeToken<CardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a card. (asynchronously)
     * Returns the definition for a card with the given ID.
     * @param appId The ID of the target app. (required)
     * @param cardId The ID of the target card. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCrmV3ExtensionsCardsAppIdCardIdAsync(Integer appId, String cardId, final ApiCallback<CardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCrmV3ExtensionsCardsAppIdCardIdValidateBeforeCall(appId, cardId, _callback);
        Type localVarReturnType = new TypeToken<CardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchCrmV3ExtensionsCardsAppIdCardId
     * @param appId The ID of the target app. (required)
     * @param cardId The ID of the card to update. (required)
     * @param cardPatchRequest Card definition fields to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchCrmV3ExtensionsCardsAppIdCardIdCall(Integer appId, String cardId, CardPatchRequest cardPatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardPatchRequest;

        // create path and map variables
        String localVarPath = "/{appId}/{cardId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developer_hapikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchCrmV3ExtensionsCardsAppIdCardIdValidateBeforeCall(Integer appId, String cardId, CardPatchRequest cardPatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling patchCrmV3ExtensionsCardsAppIdCardId(Async)");
        }

        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling patchCrmV3ExtensionsCardsAppIdCardId(Async)");
        }

        // verify the required parameter 'cardPatchRequest' is set
        if (cardPatchRequest == null) {
            throw new ApiException("Missing the required parameter 'cardPatchRequest' when calling patchCrmV3ExtensionsCardsAppIdCardId(Async)");
        }

        return patchCrmV3ExtensionsCardsAppIdCardIdCall(appId, cardId, cardPatchRequest, _callback);

    }

    /**
     * Update a card
     * Update a card definition with new details.
     * @param appId The ID of the target app. (required)
     * @param cardId The ID of the card to update. (required)
     * @param cardPatchRequest Card definition fields to be updated. (required)
     * @return CardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public CardResponse patchCrmV3ExtensionsCardsAppIdCardId(Integer appId, String cardId, CardPatchRequest cardPatchRequest) throws ApiException {
        ApiResponse<CardResponse> localVarResp = patchCrmV3ExtensionsCardsAppIdCardIdWithHttpInfo(appId, cardId, cardPatchRequest);
        return localVarResp.getData();
    }

    /**
     * Update a card
     * Update a card definition with new details.
     * @param appId The ID of the target app. (required)
     * @param cardId The ID of the card to update. (required)
     * @param cardPatchRequest Card definition fields to be updated. (required)
     * @return ApiResponse&lt;CardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardResponse> patchCrmV3ExtensionsCardsAppIdCardIdWithHttpInfo(Integer appId, String cardId, CardPatchRequest cardPatchRequest) throws ApiException {
        okhttp3.Call localVarCall = patchCrmV3ExtensionsCardsAppIdCardIdValidateBeforeCall(appId, cardId, cardPatchRequest, null);
        Type localVarReturnType = new TypeToken<CardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a card (asynchronously)
     * Update a card definition with new details.
     * @param appId The ID of the target app. (required)
     * @param cardId The ID of the card to update. (required)
     * @param cardPatchRequest Card definition fields to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchCrmV3ExtensionsCardsAppIdCardIdAsync(Integer appId, String cardId, CardPatchRequest cardPatchRequest, final ApiCallback<CardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchCrmV3ExtensionsCardsAppIdCardIdValidateBeforeCall(appId, cardId, cardPatchRequest, _callback);
        Type localVarReturnType = new TypeToken<CardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCrmV3ExtensionsCardsAppId
     * @param appId The ID of the target app. (required)
     * @param cardCreateRequest The new card definition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCrmV3ExtensionsCardsAppIdCall(Integer appId, CardCreateRequest cardCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardCreateRequest;

        // create path and map variables
        String localVarPath = "/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developer_hapikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCrmV3ExtensionsCardsAppIdValidateBeforeCall(Integer appId, CardCreateRequest cardCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling postCrmV3ExtensionsCardsAppId(Async)");
        }

        // verify the required parameter 'cardCreateRequest' is set
        if (cardCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'cardCreateRequest' when calling postCrmV3ExtensionsCardsAppId(Async)");
        }

        return postCrmV3ExtensionsCardsAppIdCall(appId, cardCreateRequest, _callback);

    }

    /**
     * Create a new card
     * Defines a new card that will become active on an account when this app is installed.
     * @param appId The ID of the target app. (required)
     * @param cardCreateRequest The new card definition. (required)
     * @return CardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public CardResponse postCrmV3ExtensionsCardsAppId(Integer appId, CardCreateRequest cardCreateRequest) throws ApiException {
        ApiResponse<CardResponse> localVarResp = postCrmV3ExtensionsCardsAppIdWithHttpInfo(appId, cardCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new card
     * Defines a new card that will become active on an account when this app is installed.
     * @param appId The ID of the target app. (required)
     * @param cardCreateRequest The new card definition. (required)
     * @return ApiResponse&lt;CardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardResponse> postCrmV3ExtensionsCardsAppIdWithHttpInfo(Integer appId, CardCreateRequest cardCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = postCrmV3ExtensionsCardsAppIdValidateBeforeCall(appId, cardCreateRequest, null);
        Type localVarReturnType = new TypeToken<CardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new card (asynchronously)
     * Defines a new card that will become active on an account when this app is installed.
     * @param appId The ID of the target app. (required)
     * @param cardCreateRequest The new card definition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCrmV3ExtensionsCardsAppIdAsync(Integer appId, CardCreateRequest cardCreateRequest, final ApiCallback<CardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCrmV3ExtensionsCardsAppIdValidateBeforeCall(appId, cardCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<CardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
