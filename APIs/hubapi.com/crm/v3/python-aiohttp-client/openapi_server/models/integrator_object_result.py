# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.integrator_object_result_actions_inner import IntegratorObjectResultActionsInner
from openapi_server.models.object_token import ObjectToken
from openapi_server import util


class IntegratorObjectResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[IntegratorObjectResultActionsInner]=None, id: str=None, link_url: str=None, title: str=None, tokens: List[ObjectToken]=None):
        """IntegratorObjectResult - a model defined in OpenAPI

        :param actions: The actions of this IntegratorObjectResult.
        :param id: The id of this IntegratorObjectResult.
        :param link_url: The link_url of this IntegratorObjectResult.
        :param title: The title of this IntegratorObjectResult.
        :param tokens: The tokens of this IntegratorObjectResult.
        """
        self.openapi_types = {
            'actions': List[IntegratorObjectResultActionsInner],
            'id': str,
            'link_url': str,
            'title': str,
            'tokens': List[ObjectToken]
        }

        self.attribute_map = {
            'actions': 'actions',
            'id': 'id',
            'link_url': 'linkUrl',
            'title': 'title',
            'tokens': 'tokens'
        }

        self._actions = actions
        self._id = id
        self._link_url = link_url
        self._title = title
        self._tokens = tokens

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IntegratorObjectResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IntegratorObjectResult of this IntegratorObjectResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this IntegratorObjectResult.


        :return: The actions of this IntegratorObjectResult.
        :rtype: List[IntegratorObjectResultActionsInner]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this IntegratorObjectResult.


        :param actions: The actions of this IntegratorObjectResult.
        :type actions: List[IntegratorObjectResultActionsInner]
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")

        self._actions = actions

    @property
    def id(self):
        """Gets the id of this IntegratorObjectResult.


        :return: The id of this IntegratorObjectResult.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IntegratorObjectResult.


        :param id: The id of this IntegratorObjectResult.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def link_url(self):
        """Gets the link_url of this IntegratorObjectResult.


        :return: The link_url of this IntegratorObjectResult.
        :rtype: str
        """
        return self._link_url

    @link_url.setter
    def link_url(self, link_url):
        """Sets the link_url of this IntegratorObjectResult.


        :param link_url: The link_url of this IntegratorObjectResult.
        :type link_url: str
        """

        self._link_url = link_url

    @property
    def title(self):
        """Gets the title of this IntegratorObjectResult.


        :return: The title of this IntegratorObjectResult.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this IntegratorObjectResult.


        :param title: The title of this IntegratorObjectResult.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def tokens(self):
        """Gets the tokens of this IntegratorObjectResult.


        :return: The tokens of this IntegratorObjectResult.
        :rtype: List[ObjectToken]
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this IntegratorObjectResult.


        :param tokens: The tokens of this IntegratorObjectResult.
        :type tokens: List[ObjectToken]
        """
        if tokens is None:
            raise ValueError("Invalid value for `tokens`, must not be `None`")

        self._tokens = tokens
