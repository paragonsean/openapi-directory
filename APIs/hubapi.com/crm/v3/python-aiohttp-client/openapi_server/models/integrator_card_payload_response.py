# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.integrator_object_result import IntegratorObjectResult
from openapi_server.models.top_level_actions import TopLevelActions
from openapi_server import util


class IntegratorCardPayloadResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_items_link_url: str=None, card_label: str=None, response_version: str=None, sections: List[IntegratorObjectResult]=None, top_level_actions: TopLevelActions=None, total_count: int=None):
        """IntegratorCardPayloadResponse - a model defined in OpenAPI

        :param all_items_link_url: The all_items_link_url of this IntegratorCardPayloadResponse.
        :param card_label: The card_label of this IntegratorCardPayloadResponse.
        :param response_version: The response_version of this IntegratorCardPayloadResponse.
        :param sections: The sections of this IntegratorCardPayloadResponse.
        :param top_level_actions: The top_level_actions of this IntegratorCardPayloadResponse.
        :param total_count: The total_count of this IntegratorCardPayloadResponse.
        """
        self.openapi_types = {
            'all_items_link_url': str,
            'card_label': str,
            'response_version': str,
            'sections': List[IntegratorObjectResult],
            'top_level_actions': TopLevelActions,
            'total_count': int
        }

        self.attribute_map = {
            'all_items_link_url': 'allItemsLinkUrl',
            'card_label': 'cardLabel',
            'response_version': 'responseVersion',
            'sections': 'sections',
            'top_level_actions': 'topLevelActions',
            'total_count': 'totalCount'
        }

        self._all_items_link_url = all_items_link_url
        self._card_label = card_label
        self._response_version = response_version
        self._sections = sections
        self._top_level_actions = top_level_actions
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IntegratorCardPayloadResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IntegratorCardPayloadResponse of this IntegratorCardPayloadResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_items_link_url(self):
        """Gets the all_items_link_url of this IntegratorCardPayloadResponse.

        URL to a page the integrator has built that displays all details for this card. This URL will be displayed to users under a `See more [x]` link if there are more than five items in your response, where `[x]` is the value of `itemLabel`.

        :return: The all_items_link_url of this IntegratorCardPayloadResponse.
        :rtype: str
        """
        return self._all_items_link_url

    @all_items_link_url.setter
    def all_items_link_url(self, all_items_link_url):
        """Sets the all_items_link_url of this IntegratorCardPayloadResponse.

        URL to a page the integrator has built that displays all details for this card. This URL will be displayed to users under a `See more [x]` link if there are more than five items in your response, where `[x]` is the value of `itemLabel`.

        :param all_items_link_url: The all_items_link_url of this IntegratorCardPayloadResponse.
        :type all_items_link_url: str
        """

        self._all_items_link_url = all_items_link_url

    @property
    def card_label(self):
        """Gets the card_label of this IntegratorCardPayloadResponse.

        The label to be used for the `allItemsLinkUrl` link (e.g. 'See more tickets'). If not provided, this falls back to the card's title.

        :return: The card_label of this IntegratorCardPayloadResponse.
        :rtype: str
        """
        return self._card_label

    @card_label.setter
    def card_label(self, card_label):
        """Sets the card_label of this IntegratorCardPayloadResponse.

        The label to be used for the `allItemsLinkUrl` link (e.g. 'See more tickets'). If not provided, this falls back to the card's title.

        :param card_label: The card_label of this IntegratorCardPayloadResponse.
        :type card_label: str
        """

        self._card_label = card_label

    @property
    def response_version(self):
        """Gets the response_version of this IntegratorCardPayloadResponse.


        :return: The response_version of this IntegratorCardPayloadResponse.
        :rtype: str
        """
        return self._response_version

    @response_version.setter
    def response_version(self, response_version):
        """Sets the response_version of this IntegratorCardPayloadResponse.


        :param response_version: The response_version of this IntegratorCardPayloadResponse.
        :type response_version: str
        """
        allowed_values = ["v1", "v3"]  # noqa: E501
        if response_version not in allowed_values:
            raise ValueError(
                "Invalid value for `response_version` ({0}), must be one of {1}"
                .format(response_version, allowed_values)
            )

        self._response_version = response_version

    @property
    def sections(self):
        """Gets the sections of this IntegratorCardPayloadResponse.

        A list of up to five valid card sub categories.

        :return: The sections of this IntegratorCardPayloadResponse.
        :rtype: List[IntegratorObjectResult]
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """Sets the sections of this IntegratorCardPayloadResponse.

        A list of up to five valid card sub categories.

        :param sections: The sections of this IntegratorCardPayloadResponse.
        :type sections: List[IntegratorObjectResult]
        """

        self._sections = sections

    @property
    def top_level_actions(self):
        """Gets the top_level_actions of this IntegratorCardPayloadResponse.


        :return: The top_level_actions of this IntegratorCardPayloadResponse.
        :rtype: TopLevelActions
        """
        return self._top_level_actions

    @top_level_actions.setter
    def top_level_actions(self, top_level_actions):
        """Sets the top_level_actions of this IntegratorCardPayloadResponse.


        :param top_level_actions: The top_level_actions of this IntegratorCardPayloadResponse.
        :type top_level_actions: TopLevelActions
        """

        self._top_level_actions = top_level_actions

    @property
    def total_count(self):
        """Gets the total_count of this IntegratorCardPayloadResponse.

        The total number of card properties that will be sent in this response.

        :return: The total_count of this IntegratorCardPayloadResponse.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this IntegratorCardPayloadResponse.

        The total number of card properties that will be sent in this response.

        :param total_count: The total_count of this IntegratorCardPayloadResponse.
        :type total_count: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")

        self._total_count = total_count
