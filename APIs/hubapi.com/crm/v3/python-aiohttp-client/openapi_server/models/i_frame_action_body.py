# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IFrameActionBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, height: int=None, label: str=None, property_names_included: List[str]=None, type: str='IFRAME', url: str=None, width: int=None):
        """IFrameActionBody - a model defined in OpenAPI

        :param height: The height of this IFrameActionBody.
        :param label: The label of this IFrameActionBody.
        :param property_names_included: The property_names_included of this IFrameActionBody.
        :param type: The type of this IFrameActionBody.
        :param url: The url of this IFrameActionBody.
        :param width: The width of this IFrameActionBody.
        """
        self.openapi_types = {
            'height': int,
            'label': str,
            'property_names_included': List[str],
            'type': str,
            'url': str,
            'width': int
        }

        self.attribute_map = {
            'height': 'height',
            'label': 'label',
            'property_names_included': 'propertyNamesIncluded',
            'type': 'type',
            'url': 'url',
            'width': 'width'
        }

        self._height = height
        self._label = label
        self._property_names_included = property_names_included
        self._type = type
        self._url = url
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IFrameActionBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IFrameActionBody of this IFrameActionBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def height(self):
        """Gets the height of this IFrameActionBody.


        :return: The height of this IFrameActionBody.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this IFrameActionBody.


        :param height: The height of this IFrameActionBody.
        :type height: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")

        self._height = height

    @property
    def label(self):
        """Gets the label of this IFrameActionBody.


        :return: The label of this IFrameActionBody.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this IFrameActionBody.


        :param label: The label of this IFrameActionBody.
        :type label: str
        """

        self._label = label

    @property
    def property_names_included(self):
        """Gets the property_names_included of this IFrameActionBody.


        :return: The property_names_included of this IFrameActionBody.
        :rtype: List[str]
        """
        return self._property_names_included

    @property_names_included.setter
    def property_names_included(self, property_names_included):
        """Sets the property_names_included of this IFrameActionBody.


        :param property_names_included: The property_names_included of this IFrameActionBody.
        :type property_names_included: List[str]
        """
        if property_names_included is None:
            raise ValueError("Invalid value for `property_names_included`, must not be `None`")

        self._property_names_included = property_names_included

    @property
    def type(self):
        """Gets the type of this IFrameActionBody.


        :return: The type of this IFrameActionBody.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IFrameActionBody.


        :param type: The type of this IFrameActionBody.
        :type type: str
        """
        allowed_values = ["IFRAME"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this IFrameActionBody.


        :return: The url of this IFrameActionBody.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IFrameActionBody.


        :param url: The url of this IFrameActionBody.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def width(self):
        """Gets the width of this IFrameActionBody.


        :return: The width of this IFrameActionBody.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this IFrameActionBody.


        :param width: The width of this IFrameActionBody.
        :type width: int
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")

        self._width = width
