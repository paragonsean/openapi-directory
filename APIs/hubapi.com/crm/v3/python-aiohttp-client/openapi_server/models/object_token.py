# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ObjectToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_type: str=None, label: str=None, name: str=None, value: str=None):
        """ObjectToken - a model defined in OpenAPI

        :param data_type: The data_type of this ObjectToken.
        :param label: The label of this ObjectToken.
        :param name: The name of this ObjectToken.
        :param value: The value of this ObjectToken.
        """
        self.openapi_types = {
            'data_type': str,
            'label': str,
            'name': str,
            'value': str
        }

        self.attribute_map = {
            'data_type': 'dataType',
            'label': 'label',
            'name': 'name',
            'value': 'value'
        }

        self._data_type = data_type
        self._label = label
        self._name = name
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjectToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ObjectToken of this ObjectToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_type(self):
        """Gets the data_type of this ObjectToken.


        :return: The data_type of this ObjectToken.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this ObjectToken.


        :param data_type: The data_type of this ObjectToken.
        :type data_type: str
        """
        allowed_values = ["BOOLEAN", "CURRENCY", "DATE", "DATETIME", "EMAIL", "LINK", "NUMERIC", "STRING", "STATUS"]  # noqa: E501
        if data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def label(self):
        """Gets the label of this ObjectToken.


        :return: The label of this ObjectToken.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ObjectToken.


        :param label: The label of this ObjectToken.
        :type label: str
        """

        self._label = label

    @property
    def name(self):
        """Gets the name of this ObjectToken.


        :return: The name of this ObjectToken.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ObjectToken.


        :param name: The name of this ObjectToken.
        :type name: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this ObjectToken.


        :return: The value of this ObjectToken.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ObjectToken.


        :param value: The value of this ObjectToken.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
