# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.display_option import DisplayOption
from openapi_server import util


class CardDisplayProperty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_type: str=None, label: str=None, name: str=None, options: List[DisplayOption]=None):
        """CardDisplayProperty - a model defined in OpenAPI

        :param data_type: The data_type of this CardDisplayProperty.
        :param label: The label of this CardDisplayProperty.
        :param name: The name of this CardDisplayProperty.
        :param options: The options of this CardDisplayProperty.
        """
        self.openapi_types = {
            'data_type': str,
            'label': str,
            'name': str,
            'options': List[DisplayOption]
        }

        self.attribute_map = {
            'data_type': 'dataType',
            'label': 'label',
            'name': 'name',
            'options': 'options'
        }

        self._data_type = data_type
        self._label = label
        self._name = name
        self._options = options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardDisplayProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CardDisplayProperty of this CardDisplayProperty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_type(self):
        """Gets the data_type of this CardDisplayProperty.

        Type of data represented by this property.

        :return: The data_type of this CardDisplayProperty.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this CardDisplayProperty.

        Type of data represented by this property.

        :param data_type: The data_type of this CardDisplayProperty.
        :type data_type: str
        """
        allowed_values = ["BOOLEAN", "CURRENCY", "DATE", "DATETIME", "EMAIL", "LINK", "NUMERIC", "STRING", "STATUS"]  # noqa: E501
        if data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def label(self):
        """Gets the label of this CardDisplayProperty.

        The label for this property as you'd like it displayed to users.

        :return: The label of this CardDisplayProperty.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CardDisplayProperty.

        The label for this property as you'd like it displayed to users.

        :param label: The label of this CardDisplayProperty.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def name(self):
        """Gets the name of this CardDisplayProperty.

        An internal identifier for this property. This value must be unique TODO.

        :return: The name of this CardDisplayProperty.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CardDisplayProperty.

        An internal identifier for this property. This value must be unique TODO.

        :param name: The name of this CardDisplayProperty.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def options(self):
        """Gets the options of this CardDisplayProperty.

        An array of available options that can be displayed. Only used in when `dataType` is `STATUS`.

        :return: The options of this CardDisplayProperty.
        :rtype: List[DisplayOption]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this CardDisplayProperty.

        An array of available options that can be displayed. Only used in when `dataType` is `STATUS`.

        :param options: The options of this CardDisplayProperty.
        :type options: List[DisplayOption]
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")

        self._options = options
