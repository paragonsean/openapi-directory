# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CardActions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_urls: List[str]=None):
        """CardActions - a model defined in OpenAPI

        :param base_urls: The base_urls of this CardActions.
        """
        self.openapi_types = {
            'base_urls': List[str]
        }

        self.attribute_map = {
            'base_urls': 'baseUrls'
        }

        self._base_urls = base_urls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardActions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CardActions of this CardActions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_urls(self):
        """Gets the base_urls of this CardActions.

        A list of URL prefixes that will be accepted for card action URLs. If your data fetch response includes an action URL that doesn't begin with one of these values, it will result in an error and the card will not be displayed.

        :return: The base_urls of this CardActions.
        :rtype: List[str]
        """
        return self._base_urls

    @base_urls.setter
    def base_urls(self, base_urls):
        """Sets the base_urls of this CardActions.

        A list of URL prefixes that will be accepted for card action URLs. If your data fetch response includes an action URL that doesn't begin with one of these values, it will result in an error and the card will not be displayed.

        :param base_urls: The base_urls of this CardActions.
        :type base_urls: List[str]
        """
        if base_urls is None:
            raise ValueError("Invalid value for `base_urls`, must not be `None`")

        self._base_urls = base_urls
