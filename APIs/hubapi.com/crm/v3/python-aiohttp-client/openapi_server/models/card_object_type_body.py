# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CardObjectTypeBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, properties_to_send: List[str]=None):
        """CardObjectTypeBody - a model defined in OpenAPI

        :param name: The name of this CardObjectTypeBody.
        :param properties_to_send: The properties_to_send of this CardObjectTypeBody.
        """
        self.openapi_types = {
            'name': str,
            'properties_to_send': List[str]
        }

        self.attribute_map = {
            'name': 'name',
            'properties_to_send': 'propertiesToSend'
        }

        self._name = name
        self._properties_to_send = properties_to_send

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardObjectTypeBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CardObjectTypeBody of this CardObjectTypeBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CardObjectTypeBody.

        A CRM object type where this card should be displayed.

        :return: The name of this CardObjectTypeBody.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CardObjectTypeBody.

        A CRM object type where this card should be displayed.

        :param name: The name of this CardObjectTypeBody.
        :type name: str
        """
        allowed_values = ["contacts", "deals", "companies", "tickets"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def properties_to_send(self):
        """Gets the properties_to_send of this CardObjectTypeBody.

        An array of properties that should be sent to this card's target URL when the data fetch request is made. Must be valid properties for the corresponding CRM object type.

        :return: The properties_to_send of this CardObjectTypeBody.
        :rtype: List[str]
        """
        return self._properties_to_send

    @properties_to_send.setter
    def properties_to_send(self, properties_to_send):
        """Sets the properties_to_send of this CardObjectTypeBody.

        An array of properties that should be sent to this card's target URL when the data fetch request is made. Must be valid properties for the corresponding CRM object type.

        :param properties_to_send: The properties_to_send of this CardObjectTypeBody.
        :type properties_to_send: List[str]
        """
        if properties_to_send is None:
            raise ValueError("Invalid value for `properties_to_send`, must not be `None`")

        self._properties_to_send = properties_to_send
