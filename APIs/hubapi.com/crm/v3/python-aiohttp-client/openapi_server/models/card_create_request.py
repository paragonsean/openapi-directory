# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.card_actions import CardActions
from openapi_server.models.card_display_body import CardDisplayBody
from openapi_server.models.card_fetch_body import CardFetchBody
from openapi_server import util


class CardCreateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: CardActions=None, display: CardDisplayBody=None, fetch: CardFetchBody=None, title: str=None):
        """CardCreateRequest - a model defined in OpenAPI

        :param actions: The actions of this CardCreateRequest.
        :param display: The display of this CardCreateRequest.
        :param fetch: The fetch of this CardCreateRequest.
        :param title: The title of this CardCreateRequest.
        """
        self.openapi_types = {
            'actions': CardActions,
            'display': CardDisplayBody,
            'fetch': CardFetchBody,
            'title': str
        }

        self.attribute_map = {
            'actions': 'actions',
            'display': 'display',
            'fetch': 'fetch',
            'title': 'title'
        }

        self._actions = actions
        self._display = display
        self._fetch = fetch
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardCreateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CardCreateRequest of this CardCreateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this CardCreateRequest.


        :return: The actions of this CardCreateRequest.
        :rtype: CardActions
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this CardCreateRequest.


        :param actions: The actions of this CardCreateRequest.
        :type actions: CardActions
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")

        self._actions = actions

    @property
    def display(self):
        """Gets the display of this CardCreateRequest.


        :return: The display of this CardCreateRequest.
        :rtype: CardDisplayBody
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this CardCreateRequest.


        :param display: The display of this CardCreateRequest.
        :type display: CardDisplayBody
        """
        if display is None:
            raise ValueError("Invalid value for `display`, must not be `None`")

        self._display = display

    @property
    def fetch(self):
        """Gets the fetch of this CardCreateRequest.


        :return: The fetch of this CardCreateRequest.
        :rtype: CardFetchBody
        """
        return self._fetch

    @fetch.setter
    def fetch(self, fetch):
        """Sets the fetch of this CardCreateRequest.


        :param fetch: The fetch of this CardCreateRequest.
        :type fetch: CardFetchBody
        """
        if fetch is None:
            raise ValueError("Invalid value for `fetch`, must not be `None`")

        self._fetch = fetch

    @property
    def title(self):
        """Gets the title of this CardCreateRequest.

        The top-level title for this card. Displayed to users in the CRM UI.

        :return: The title of this CardCreateRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CardCreateRequest.

        The top-level title for this card. Displayed to users in the CRM UI.

        :param title: The title of this CardCreateRequest.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
