# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_confirmation_body import ActionConfirmationBody
from openapi_server import util


class ActionHookActionBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confirmation: ActionConfirmationBody=None, http_method: str=None, label: str=None, property_names_included: List[str]=None, type: str='ACTION_HOOK', url: str=None):
        """ActionHookActionBody - a model defined in OpenAPI

        :param confirmation: The confirmation of this ActionHookActionBody.
        :param http_method: The http_method of this ActionHookActionBody.
        :param label: The label of this ActionHookActionBody.
        :param property_names_included: The property_names_included of this ActionHookActionBody.
        :param type: The type of this ActionHookActionBody.
        :param url: The url of this ActionHookActionBody.
        """
        self.openapi_types = {
            'confirmation': ActionConfirmationBody,
            'http_method': str,
            'label': str,
            'property_names_included': List[str],
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'confirmation': 'confirmation',
            'http_method': 'httpMethod',
            'label': 'label',
            'property_names_included': 'propertyNamesIncluded',
            'type': 'type',
            'url': 'url'
        }

        self._confirmation = confirmation
        self._http_method = http_method
        self._label = label
        self._property_names_included = property_names_included
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionHookActionBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActionHookActionBody of this ActionHookActionBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confirmation(self):
        """Gets the confirmation of this ActionHookActionBody.


        :return: The confirmation of this ActionHookActionBody.
        :rtype: ActionConfirmationBody
        """
        return self._confirmation

    @confirmation.setter
    def confirmation(self, confirmation):
        """Sets the confirmation of this ActionHookActionBody.


        :param confirmation: The confirmation of this ActionHookActionBody.
        :type confirmation: ActionConfirmationBody
        """

        self._confirmation = confirmation

    @property
    def http_method(self):
        """Gets the http_method of this ActionHookActionBody.


        :return: The http_method of this ActionHookActionBody.
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this ActionHookActionBody.


        :param http_method: The http_method of this ActionHookActionBody.
        :type http_method: str
        """
        allowed_values = ["CONNECT", "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT", "TRACE"]  # noqa: E501
        if http_method not in allowed_values:
            raise ValueError(
                "Invalid value for `http_method` ({0}), must be one of {1}"
                .format(http_method, allowed_values)
            )

        self._http_method = http_method

    @property
    def label(self):
        """Gets the label of this ActionHookActionBody.


        :return: The label of this ActionHookActionBody.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ActionHookActionBody.


        :param label: The label of this ActionHookActionBody.
        :type label: str
        """

        self._label = label

    @property
    def property_names_included(self):
        """Gets the property_names_included of this ActionHookActionBody.


        :return: The property_names_included of this ActionHookActionBody.
        :rtype: List[str]
        """
        return self._property_names_included

    @property_names_included.setter
    def property_names_included(self, property_names_included):
        """Sets the property_names_included of this ActionHookActionBody.


        :param property_names_included: The property_names_included of this ActionHookActionBody.
        :type property_names_included: List[str]
        """
        if property_names_included is None:
            raise ValueError("Invalid value for `property_names_included`, must not be `None`")

        self._property_names_included = property_names_included

    @property
    def type(self):
        """Gets the type of this ActionHookActionBody.


        :return: The type of this ActionHookActionBody.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ActionHookActionBody.


        :param type: The type of this ActionHookActionBody.
        :type type: str
        """
        allowed_values = ["ACTION_HOOK"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this ActionHookActionBody.


        :return: The url of this ActionHookActionBody.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ActionHookActionBody.


        :param url: The url of this ActionHookActionBody.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
