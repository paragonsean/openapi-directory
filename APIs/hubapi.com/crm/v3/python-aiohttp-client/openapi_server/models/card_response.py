# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.card_actions import CardActions
from openapi_server.models.card_display_body import CardDisplayBody
from openapi_server.models.card_fetch_body import CardFetchBody
from openapi_server import util


class CardResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: CardActions=None, created_at: datetime=None, display: CardDisplayBody=None, fetch: CardFetchBody=None, id: str=None, title: str=None, updated_at: datetime=None):
        """CardResponse - a model defined in OpenAPI

        :param actions: The actions of this CardResponse.
        :param created_at: The created_at of this CardResponse.
        :param display: The display of this CardResponse.
        :param fetch: The fetch of this CardResponse.
        :param id: The id of this CardResponse.
        :param title: The title of this CardResponse.
        :param updated_at: The updated_at of this CardResponse.
        """
        self.openapi_types = {
            'actions': CardActions,
            'created_at': datetime,
            'display': CardDisplayBody,
            'fetch': CardFetchBody,
            'id': str,
            'title': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'actions': 'actions',
            'created_at': 'createdAt',
            'display': 'display',
            'fetch': 'fetch',
            'id': 'id',
            'title': 'title',
            'updated_at': 'updatedAt'
        }

        self._actions = actions
        self._created_at = created_at
        self._display = display
        self._fetch = fetch
        self._id = id
        self._title = title
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CardResponse of this CardResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this CardResponse.


        :return: The actions of this CardResponse.
        :rtype: CardActions
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this CardResponse.


        :param actions: The actions of this CardResponse.
        :type actions: CardActions
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")

        self._actions = actions

    @property
    def created_at(self):
        """Gets the created_at of this CardResponse.

        When this card was created.

        :return: The created_at of this CardResponse.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CardResponse.

        When this card was created.

        :param created_at: The created_at of this CardResponse.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def display(self):
        """Gets the display of this CardResponse.


        :return: The display of this CardResponse.
        :rtype: CardDisplayBody
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this CardResponse.


        :param display: The display of this CardResponse.
        :type display: CardDisplayBody
        """
        if display is None:
            raise ValueError("Invalid value for `display`, must not be `None`")

        self._display = display

    @property
    def fetch(self):
        """Gets the fetch of this CardResponse.


        :return: The fetch of this CardResponse.
        :rtype: CardFetchBody
        """
        return self._fetch

    @fetch.setter
    def fetch(self, fetch):
        """Sets the fetch of this CardResponse.


        :param fetch: The fetch of this CardResponse.
        :type fetch: CardFetchBody
        """
        if fetch is None:
            raise ValueError("Invalid value for `fetch`, must not be `None`")

        self._fetch = fetch

    @property
    def id(self):
        """Gets the id of this CardResponse.

        Generated unique ID for card.

        :return: The id of this CardResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CardResponse.

        Generated unique ID for card.

        :param id: The id of this CardResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def title(self):
        """Gets the title of this CardResponse.

        Displayed title of this card.

        :return: The title of this CardResponse.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CardResponse.

        Displayed title of this card.

        :param title: The title of this CardResponse.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this CardResponse.

        The last time this card was updated.

        :return: The updated_at of this CardResponse.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CardResponse.

        The last time this card was updated.

        :param updated_at: The updated_at of this CardResponse.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
