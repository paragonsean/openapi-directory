/**
 * CMS Domains
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Domain model module.
 * @module model/Domain
 * @version v3
 */
class Domain {
    /**
     * Constructs a new <code>Domain</code>.
     * @alias module:model/Domain
     * @param domain {String} The actual domain or sub-domain. e.g. www.hubspot.com
     * @param id {String} The unique ID of this domain.
     * @param isResolving {Boolean} Whether the DNS for this domain is optimally configured for use with HubSpot.
     * @param isUsedForBlogPost {Boolean} Whether the domain is used for CMS blog posts.
     * @param isUsedForEmail {Boolean} Whether the domain is used for CMS email web pages.
     * @param isUsedForKnowledge {Boolean} Whether the domain is used for CMS knowledge pages.
     * @param isUsedForLandingPage {Boolean} Whether the domain is used for CMS landing pages.
     * @param isUsedForSitePage {Boolean} Whether the domain is used for CMS site pages.
     */
    constructor(domain, id, isResolving, isUsedForBlogPost, isUsedForEmail, isUsedForKnowledge, isUsedForLandingPage, isUsedForSitePage) { 
        
        Domain.initialize(this, domain, id, isResolving, isUsedForBlogPost, isUsedForEmail, isUsedForKnowledge, isUsedForLandingPage, isUsedForSitePage);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, domain, id, isResolving, isUsedForBlogPost, isUsedForEmail, isUsedForKnowledge, isUsedForLandingPage, isUsedForSitePage) { 
        obj['domain'] = domain;
        obj['id'] = id;
        obj['isResolving'] = isResolving;
        obj['isUsedForBlogPost'] = isUsedForBlogPost;
        obj['isUsedForEmail'] = isUsedForEmail;
        obj['isUsedForKnowledge'] = isUsedForKnowledge;
        obj['isUsedForLandingPage'] = isUsedForLandingPage;
        obj['isUsedForSitePage'] = isUsedForSitePage;
    }

    /**
     * Constructs a <code>Domain</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Domain} obj Optional instance to populate.
     * @return {module:model/Domain} The populated <code>Domain</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Domain();

            if (data.hasOwnProperty('correctCname')) {
                obj['correctCname'] = ApiClient.convertToType(data['correctCname'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isResolving')) {
                obj['isResolving'] = ApiClient.convertToType(data['isResolving'], 'Boolean');
            }
            if (data.hasOwnProperty('isSslEnabled')) {
                obj['isSslEnabled'] = ApiClient.convertToType(data['isSslEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('isSslOnly')) {
                obj['isSslOnly'] = ApiClient.convertToType(data['isSslOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('isUsedForBlogPost')) {
                obj['isUsedForBlogPost'] = ApiClient.convertToType(data['isUsedForBlogPost'], 'Boolean');
            }
            if (data.hasOwnProperty('isUsedForEmail')) {
                obj['isUsedForEmail'] = ApiClient.convertToType(data['isUsedForEmail'], 'Boolean');
            }
            if (data.hasOwnProperty('isUsedForKnowledge')) {
                obj['isUsedForKnowledge'] = ApiClient.convertToType(data['isUsedForKnowledge'], 'Boolean');
            }
            if (data.hasOwnProperty('isUsedForLandingPage')) {
                obj['isUsedForLandingPage'] = ApiClient.convertToType(data['isUsedForLandingPage'], 'Boolean');
            }
            if (data.hasOwnProperty('isUsedForSitePage')) {
                obj['isUsedForSitePage'] = ApiClient.convertToType(data['isUsedForSitePage'], 'Boolean');
            }
            if (data.hasOwnProperty('manuallyMarkedAsResolving')) {
                obj['manuallyMarkedAsResolving'] = ApiClient.convertToType(data['manuallyMarkedAsResolving'], 'Boolean');
            }
            if (data.hasOwnProperty('primaryBlogPost')) {
                obj['primaryBlogPost'] = ApiClient.convertToType(data['primaryBlogPost'], 'Boolean');
            }
            if (data.hasOwnProperty('primaryEmail')) {
                obj['primaryEmail'] = ApiClient.convertToType(data['primaryEmail'], 'Boolean');
            }
            if (data.hasOwnProperty('primaryKnowledge')) {
                obj['primaryKnowledge'] = ApiClient.convertToType(data['primaryKnowledge'], 'Boolean');
            }
            if (data.hasOwnProperty('primaryLandingPage')) {
                obj['primaryLandingPage'] = ApiClient.convertToType(data['primaryLandingPage'], 'Boolean');
            }
            if (data.hasOwnProperty('primarySitePage')) {
                obj['primarySitePage'] = ApiClient.convertToType(data['primarySitePage'], 'Boolean');
            }
            if (data.hasOwnProperty('secondaryToDomain')) {
                obj['secondaryToDomain'] = ApiClient.convertToType(data['secondaryToDomain'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Domain</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Domain</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Domain.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['correctCname'] && !(typeof data['correctCname'] === 'string' || data['correctCname'] instanceof String)) {
            throw new Error("Expected the field `correctCname` to be a primitive type in the JSON string but got " + data['correctCname']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['secondaryToDomain'] && !(typeof data['secondaryToDomain'] === 'string' || data['secondaryToDomain'] instanceof String)) {
            throw new Error("Expected the field `secondaryToDomain` to be a primitive type in the JSON string but got " + data['secondaryToDomain']);
        }

        return true;
    }


}

Domain.RequiredProperties = ["domain", "id", "isResolving", "isUsedForBlogPost", "isUsedForEmail", "isUsedForKnowledge", "isUsedForLandingPage", "isUsedForSitePage"];

/**
 * @member {String} correctCname
 */
Domain.prototype['correctCname'] = undefined;

/**
 * @member {Date} created
 */
Domain.prototype['created'] = undefined;

/**
 * The actual domain or sub-domain. e.g. www.hubspot.com
 * @member {String} domain
 */
Domain.prototype['domain'] = undefined;

/**
 * The unique ID of this domain.
 * @member {String} id
 */
Domain.prototype['id'] = undefined;

/**
 * Whether the DNS for this domain is optimally configured for use with HubSpot.
 * @member {Boolean} isResolving
 */
Domain.prototype['isResolving'] = undefined;

/**
 * @member {Boolean} isSslEnabled
 */
Domain.prototype['isSslEnabled'] = undefined;

/**
 * @member {Boolean} isSslOnly
 */
Domain.prototype['isSslOnly'] = undefined;

/**
 * Whether the domain is used for CMS blog posts.
 * @member {Boolean} isUsedForBlogPost
 */
Domain.prototype['isUsedForBlogPost'] = undefined;

/**
 * Whether the domain is used for CMS email web pages.
 * @member {Boolean} isUsedForEmail
 */
Domain.prototype['isUsedForEmail'] = undefined;

/**
 * Whether the domain is used for CMS knowledge pages.
 * @member {Boolean} isUsedForKnowledge
 */
Domain.prototype['isUsedForKnowledge'] = undefined;

/**
 * Whether the domain is used for CMS landing pages.
 * @member {Boolean} isUsedForLandingPage
 */
Domain.prototype['isUsedForLandingPage'] = undefined;

/**
 * Whether the domain is used for CMS site pages.
 * @member {Boolean} isUsedForSitePage
 */
Domain.prototype['isUsedForSitePage'] = undefined;

/**
 * @member {Boolean} manuallyMarkedAsResolving
 */
Domain.prototype['manuallyMarkedAsResolving'] = undefined;

/**
 * @member {Boolean} primaryBlogPost
 */
Domain.prototype['primaryBlogPost'] = undefined;

/**
 * @member {Boolean} primaryEmail
 */
Domain.prototype['primaryEmail'] = undefined;

/**
 * @member {Boolean} primaryKnowledge
 */
Domain.prototype['primaryKnowledge'] = undefined;

/**
 * @member {Boolean} primaryLandingPage
 */
Domain.prototype['primaryLandingPage'] = undefined;

/**
 * @member {Boolean} primarySitePage
 */
Domain.prototype['primarySitePage'] = undefined;

/**
 * @member {String} secondaryToDomain
 */
Domain.prototype['secondaryToDomain'] = undefined;

/**
 * @member {Date} updated
 */
Domain.prototype['updated'] = undefined;






export default Domain;

