/**
 * CMS Domains
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomain.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomain::OAIDomain(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomain::OAIDomain() {
    this->initializeModel();
}

OAIDomain::~OAIDomain() {}

void OAIDomain::initializeModel() {

    m_correct_cname_isSet = false;
    m_correct_cname_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_resolving_isSet = false;
    m_is_resolving_isValid = false;

    m_is_ssl_enabled_isSet = false;
    m_is_ssl_enabled_isValid = false;

    m_is_ssl_only_isSet = false;
    m_is_ssl_only_isValid = false;

    m_is_used_for_blog_post_isSet = false;
    m_is_used_for_blog_post_isValid = false;

    m_is_used_for_email_isSet = false;
    m_is_used_for_email_isValid = false;

    m_is_used_for_knowledge_isSet = false;
    m_is_used_for_knowledge_isValid = false;

    m_is_used_for_landing_page_isSet = false;
    m_is_used_for_landing_page_isValid = false;

    m_is_used_for_site_page_isSet = false;
    m_is_used_for_site_page_isValid = false;

    m_manually_marked_as_resolving_isSet = false;
    m_manually_marked_as_resolving_isValid = false;

    m_primary_blog_post_isSet = false;
    m_primary_blog_post_isValid = false;

    m_primary_email_isSet = false;
    m_primary_email_isValid = false;

    m_primary_knowledge_isSet = false;
    m_primary_knowledge_isValid = false;

    m_primary_landing_page_isSet = false;
    m_primary_landing_page_isValid = false;

    m_primary_site_page_isSet = false;
    m_primary_site_page_isValid = false;

    m_secondary_to_domain_isSet = false;
    m_secondary_to_domain_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIDomain::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomain::fromJsonObject(QJsonObject json) {

    m_correct_cname_isValid = ::OpenAPI::fromJsonValue(m_correct_cname, json[QString("correctCname")]);
    m_correct_cname_isSet = !json[QString("correctCname")].isNull() && m_correct_cname_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_resolving_isValid = ::OpenAPI::fromJsonValue(m_is_resolving, json[QString("isResolving")]);
    m_is_resolving_isSet = !json[QString("isResolving")].isNull() && m_is_resolving_isValid;

    m_is_ssl_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_ssl_enabled, json[QString("isSslEnabled")]);
    m_is_ssl_enabled_isSet = !json[QString("isSslEnabled")].isNull() && m_is_ssl_enabled_isValid;

    m_is_ssl_only_isValid = ::OpenAPI::fromJsonValue(m_is_ssl_only, json[QString("isSslOnly")]);
    m_is_ssl_only_isSet = !json[QString("isSslOnly")].isNull() && m_is_ssl_only_isValid;

    m_is_used_for_blog_post_isValid = ::OpenAPI::fromJsonValue(m_is_used_for_blog_post, json[QString("isUsedForBlogPost")]);
    m_is_used_for_blog_post_isSet = !json[QString("isUsedForBlogPost")].isNull() && m_is_used_for_blog_post_isValid;

    m_is_used_for_email_isValid = ::OpenAPI::fromJsonValue(m_is_used_for_email, json[QString("isUsedForEmail")]);
    m_is_used_for_email_isSet = !json[QString("isUsedForEmail")].isNull() && m_is_used_for_email_isValid;

    m_is_used_for_knowledge_isValid = ::OpenAPI::fromJsonValue(m_is_used_for_knowledge, json[QString("isUsedForKnowledge")]);
    m_is_used_for_knowledge_isSet = !json[QString("isUsedForKnowledge")].isNull() && m_is_used_for_knowledge_isValid;

    m_is_used_for_landing_page_isValid = ::OpenAPI::fromJsonValue(m_is_used_for_landing_page, json[QString("isUsedForLandingPage")]);
    m_is_used_for_landing_page_isSet = !json[QString("isUsedForLandingPage")].isNull() && m_is_used_for_landing_page_isValid;

    m_is_used_for_site_page_isValid = ::OpenAPI::fromJsonValue(m_is_used_for_site_page, json[QString("isUsedForSitePage")]);
    m_is_used_for_site_page_isSet = !json[QString("isUsedForSitePage")].isNull() && m_is_used_for_site_page_isValid;

    m_manually_marked_as_resolving_isValid = ::OpenAPI::fromJsonValue(m_manually_marked_as_resolving, json[QString("manuallyMarkedAsResolving")]);
    m_manually_marked_as_resolving_isSet = !json[QString("manuallyMarkedAsResolving")].isNull() && m_manually_marked_as_resolving_isValid;

    m_primary_blog_post_isValid = ::OpenAPI::fromJsonValue(m_primary_blog_post, json[QString("primaryBlogPost")]);
    m_primary_blog_post_isSet = !json[QString("primaryBlogPost")].isNull() && m_primary_blog_post_isValid;

    m_primary_email_isValid = ::OpenAPI::fromJsonValue(m_primary_email, json[QString("primaryEmail")]);
    m_primary_email_isSet = !json[QString("primaryEmail")].isNull() && m_primary_email_isValid;

    m_primary_knowledge_isValid = ::OpenAPI::fromJsonValue(m_primary_knowledge, json[QString("primaryKnowledge")]);
    m_primary_knowledge_isSet = !json[QString("primaryKnowledge")].isNull() && m_primary_knowledge_isValid;

    m_primary_landing_page_isValid = ::OpenAPI::fromJsonValue(m_primary_landing_page, json[QString("primaryLandingPage")]);
    m_primary_landing_page_isSet = !json[QString("primaryLandingPage")].isNull() && m_primary_landing_page_isValid;

    m_primary_site_page_isValid = ::OpenAPI::fromJsonValue(m_primary_site_page, json[QString("primarySitePage")]);
    m_primary_site_page_isSet = !json[QString("primarySitePage")].isNull() && m_primary_site_page_isValid;

    m_secondary_to_domain_isValid = ::OpenAPI::fromJsonValue(m_secondary_to_domain, json[QString("secondaryToDomain")]);
    m_secondary_to_domain_isSet = !json[QString("secondaryToDomain")].isNull() && m_secondary_to_domain_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;
}

QString OAIDomain::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomain::asJsonObject() const {
    QJsonObject obj;
    if (m_correct_cname_isSet) {
        obj.insert(QString("correctCname"), ::OpenAPI::toJsonValue(m_correct_cname));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_resolving_isSet) {
        obj.insert(QString("isResolving"), ::OpenAPI::toJsonValue(m_is_resolving));
    }
    if (m_is_ssl_enabled_isSet) {
        obj.insert(QString("isSslEnabled"), ::OpenAPI::toJsonValue(m_is_ssl_enabled));
    }
    if (m_is_ssl_only_isSet) {
        obj.insert(QString("isSslOnly"), ::OpenAPI::toJsonValue(m_is_ssl_only));
    }
    if (m_is_used_for_blog_post_isSet) {
        obj.insert(QString("isUsedForBlogPost"), ::OpenAPI::toJsonValue(m_is_used_for_blog_post));
    }
    if (m_is_used_for_email_isSet) {
        obj.insert(QString("isUsedForEmail"), ::OpenAPI::toJsonValue(m_is_used_for_email));
    }
    if (m_is_used_for_knowledge_isSet) {
        obj.insert(QString("isUsedForKnowledge"), ::OpenAPI::toJsonValue(m_is_used_for_knowledge));
    }
    if (m_is_used_for_landing_page_isSet) {
        obj.insert(QString("isUsedForLandingPage"), ::OpenAPI::toJsonValue(m_is_used_for_landing_page));
    }
    if (m_is_used_for_site_page_isSet) {
        obj.insert(QString("isUsedForSitePage"), ::OpenAPI::toJsonValue(m_is_used_for_site_page));
    }
    if (m_manually_marked_as_resolving_isSet) {
        obj.insert(QString("manuallyMarkedAsResolving"), ::OpenAPI::toJsonValue(m_manually_marked_as_resolving));
    }
    if (m_primary_blog_post_isSet) {
        obj.insert(QString("primaryBlogPost"), ::OpenAPI::toJsonValue(m_primary_blog_post));
    }
    if (m_primary_email_isSet) {
        obj.insert(QString("primaryEmail"), ::OpenAPI::toJsonValue(m_primary_email));
    }
    if (m_primary_knowledge_isSet) {
        obj.insert(QString("primaryKnowledge"), ::OpenAPI::toJsonValue(m_primary_knowledge));
    }
    if (m_primary_landing_page_isSet) {
        obj.insert(QString("primaryLandingPage"), ::OpenAPI::toJsonValue(m_primary_landing_page));
    }
    if (m_primary_site_page_isSet) {
        obj.insert(QString("primarySitePage"), ::OpenAPI::toJsonValue(m_primary_site_page));
    }
    if (m_secondary_to_domain_isSet) {
        obj.insert(QString("secondaryToDomain"), ::OpenAPI::toJsonValue(m_secondary_to_domain));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

QString OAIDomain::getCorrectCname() const {
    return m_correct_cname;
}
void OAIDomain::setCorrectCname(const QString &correct_cname) {
    m_correct_cname = correct_cname;
    m_correct_cname_isSet = true;
}

bool OAIDomain::is_correct_cname_Set() const{
    return m_correct_cname_isSet;
}

bool OAIDomain::is_correct_cname_Valid() const{
    return m_correct_cname_isValid;
}

QDateTime OAIDomain::getCreated() const {
    return m_created;
}
void OAIDomain::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIDomain::is_created_Set() const{
    return m_created_isSet;
}

bool OAIDomain::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIDomain::getDomain() const {
    return m_domain;
}
void OAIDomain::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIDomain::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIDomain::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIDomain::getId() const {
    return m_id;
}
void OAIDomain::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDomain::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDomain::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIDomain::isIsResolving() const {
    return m_is_resolving;
}
void OAIDomain::setIsResolving(const bool &is_resolving) {
    m_is_resolving = is_resolving;
    m_is_resolving_isSet = true;
}

bool OAIDomain::is_is_resolving_Set() const{
    return m_is_resolving_isSet;
}

bool OAIDomain::is_is_resolving_Valid() const{
    return m_is_resolving_isValid;
}

bool OAIDomain::isIsSslEnabled() const {
    return m_is_ssl_enabled;
}
void OAIDomain::setIsSslEnabled(const bool &is_ssl_enabled) {
    m_is_ssl_enabled = is_ssl_enabled;
    m_is_ssl_enabled_isSet = true;
}

bool OAIDomain::is_is_ssl_enabled_Set() const{
    return m_is_ssl_enabled_isSet;
}

bool OAIDomain::is_is_ssl_enabled_Valid() const{
    return m_is_ssl_enabled_isValid;
}

bool OAIDomain::isIsSslOnly() const {
    return m_is_ssl_only;
}
void OAIDomain::setIsSslOnly(const bool &is_ssl_only) {
    m_is_ssl_only = is_ssl_only;
    m_is_ssl_only_isSet = true;
}

bool OAIDomain::is_is_ssl_only_Set() const{
    return m_is_ssl_only_isSet;
}

bool OAIDomain::is_is_ssl_only_Valid() const{
    return m_is_ssl_only_isValid;
}

bool OAIDomain::isIsUsedForBlogPost() const {
    return m_is_used_for_blog_post;
}
void OAIDomain::setIsUsedForBlogPost(const bool &is_used_for_blog_post) {
    m_is_used_for_blog_post = is_used_for_blog_post;
    m_is_used_for_blog_post_isSet = true;
}

bool OAIDomain::is_is_used_for_blog_post_Set() const{
    return m_is_used_for_blog_post_isSet;
}

bool OAIDomain::is_is_used_for_blog_post_Valid() const{
    return m_is_used_for_blog_post_isValid;
}

bool OAIDomain::isIsUsedForEmail() const {
    return m_is_used_for_email;
}
void OAIDomain::setIsUsedForEmail(const bool &is_used_for_email) {
    m_is_used_for_email = is_used_for_email;
    m_is_used_for_email_isSet = true;
}

bool OAIDomain::is_is_used_for_email_Set() const{
    return m_is_used_for_email_isSet;
}

bool OAIDomain::is_is_used_for_email_Valid() const{
    return m_is_used_for_email_isValid;
}

bool OAIDomain::isIsUsedForKnowledge() const {
    return m_is_used_for_knowledge;
}
void OAIDomain::setIsUsedForKnowledge(const bool &is_used_for_knowledge) {
    m_is_used_for_knowledge = is_used_for_knowledge;
    m_is_used_for_knowledge_isSet = true;
}

bool OAIDomain::is_is_used_for_knowledge_Set() const{
    return m_is_used_for_knowledge_isSet;
}

bool OAIDomain::is_is_used_for_knowledge_Valid() const{
    return m_is_used_for_knowledge_isValid;
}

bool OAIDomain::isIsUsedForLandingPage() const {
    return m_is_used_for_landing_page;
}
void OAIDomain::setIsUsedForLandingPage(const bool &is_used_for_landing_page) {
    m_is_used_for_landing_page = is_used_for_landing_page;
    m_is_used_for_landing_page_isSet = true;
}

bool OAIDomain::is_is_used_for_landing_page_Set() const{
    return m_is_used_for_landing_page_isSet;
}

bool OAIDomain::is_is_used_for_landing_page_Valid() const{
    return m_is_used_for_landing_page_isValid;
}

bool OAIDomain::isIsUsedForSitePage() const {
    return m_is_used_for_site_page;
}
void OAIDomain::setIsUsedForSitePage(const bool &is_used_for_site_page) {
    m_is_used_for_site_page = is_used_for_site_page;
    m_is_used_for_site_page_isSet = true;
}

bool OAIDomain::is_is_used_for_site_page_Set() const{
    return m_is_used_for_site_page_isSet;
}

bool OAIDomain::is_is_used_for_site_page_Valid() const{
    return m_is_used_for_site_page_isValid;
}

bool OAIDomain::isManuallyMarkedAsResolving() const {
    return m_manually_marked_as_resolving;
}
void OAIDomain::setManuallyMarkedAsResolving(const bool &manually_marked_as_resolving) {
    m_manually_marked_as_resolving = manually_marked_as_resolving;
    m_manually_marked_as_resolving_isSet = true;
}

bool OAIDomain::is_manually_marked_as_resolving_Set() const{
    return m_manually_marked_as_resolving_isSet;
}

bool OAIDomain::is_manually_marked_as_resolving_Valid() const{
    return m_manually_marked_as_resolving_isValid;
}

bool OAIDomain::isPrimaryBlogPost() const {
    return m_primary_blog_post;
}
void OAIDomain::setPrimaryBlogPost(const bool &primary_blog_post) {
    m_primary_blog_post = primary_blog_post;
    m_primary_blog_post_isSet = true;
}

bool OAIDomain::is_primary_blog_post_Set() const{
    return m_primary_blog_post_isSet;
}

bool OAIDomain::is_primary_blog_post_Valid() const{
    return m_primary_blog_post_isValid;
}

bool OAIDomain::isPrimaryEmail() const {
    return m_primary_email;
}
void OAIDomain::setPrimaryEmail(const bool &primary_email) {
    m_primary_email = primary_email;
    m_primary_email_isSet = true;
}

bool OAIDomain::is_primary_email_Set() const{
    return m_primary_email_isSet;
}

bool OAIDomain::is_primary_email_Valid() const{
    return m_primary_email_isValid;
}

bool OAIDomain::isPrimaryKnowledge() const {
    return m_primary_knowledge;
}
void OAIDomain::setPrimaryKnowledge(const bool &primary_knowledge) {
    m_primary_knowledge = primary_knowledge;
    m_primary_knowledge_isSet = true;
}

bool OAIDomain::is_primary_knowledge_Set() const{
    return m_primary_knowledge_isSet;
}

bool OAIDomain::is_primary_knowledge_Valid() const{
    return m_primary_knowledge_isValid;
}

bool OAIDomain::isPrimaryLandingPage() const {
    return m_primary_landing_page;
}
void OAIDomain::setPrimaryLandingPage(const bool &primary_landing_page) {
    m_primary_landing_page = primary_landing_page;
    m_primary_landing_page_isSet = true;
}

bool OAIDomain::is_primary_landing_page_Set() const{
    return m_primary_landing_page_isSet;
}

bool OAIDomain::is_primary_landing_page_Valid() const{
    return m_primary_landing_page_isValid;
}

bool OAIDomain::isPrimarySitePage() const {
    return m_primary_site_page;
}
void OAIDomain::setPrimarySitePage(const bool &primary_site_page) {
    m_primary_site_page = primary_site_page;
    m_primary_site_page_isSet = true;
}

bool OAIDomain::is_primary_site_page_Set() const{
    return m_primary_site_page_isSet;
}

bool OAIDomain::is_primary_site_page_Valid() const{
    return m_primary_site_page_isValid;
}

QString OAIDomain::getSecondaryToDomain() const {
    return m_secondary_to_domain;
}
void OAIDomain::setSecondaryToDomain(const QString &secondary_to_domain) {
    m_secondary_to_domain = secondary_to_domain;
    m_secondary_to_domain_isSet = true;
}

bool OAIDomain::is_secondary_to_domain_Set() const{
    return m_secondary_to_domain_isSet;
}

bool OAIDomain::is_secondary_to_domain_Valid() const{
    return m_secondary_to_domain_isValid;
}

QDateTime OAIDomain::getUpdated() const {
    return m_updated;
}
void OAIDomain::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIDomain::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIDomain::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIDomain::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_correct_cname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_resolving_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_ssl_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_ssl_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_used_for_blog_post_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_used_for_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_used_for_knowledge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_used_for_landing_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_used_for_site_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manually_marked_as_resolving_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_blog_post_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_knowledge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_landing_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_site_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_to_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomain::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_isValid && m_id_isValid && m_is_resolving_isValid && m_is_used_for_blog_post_isValid && m_is_used_for_email_isValid && m_is_used_for_knowledge_isValid && m_is_used_for_landing_page_isValid && m_is_used_for_site_page_isValid && true;
}

} // namespace OpenAPI
