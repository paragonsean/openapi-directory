# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.domain import Domain
from openapi_server.models.forward_paging import ForwardPaging
from openapi_server import util


class CollectionResponseWithTotalDomainForwardPaging(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, paging: ForwardPaging=None, results: List[Domain]=None, total: int=None):
        """CollectionResponseWithTotalDomainForwardPaging - a model defined in OpenAPI

        :param paging: The paging of this CollectionResponseWithTotalDomainForwardPaging.
        :param results: The results of this CollectionResponseWithTotalDomainForwardPaging.
        :param total: The total of this CollectionResponseWithTotalDomainForwardPaging.
        """
        self.openapi_types = {
            'paging': ForwardPaging,
            'results': List[Domain],
            'total': int
        }

        self.attribute_map = {
            'paging': 'paging',
            'results': 'results',
            'total': 'total'
        }

        self._paging = paging
        self._results = results
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollectionResponseWithTotalDomainForwardPaging':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CollectionResponseWithTotalDomainForwardPaging of this CollectionResponseWithTotalDomainForwardPaging.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def paging(self):
        """Gets the paging of this CollectionResponseWithTotalDomainForwardPaging.


        :return: The paging of this CollectionResponseWithTotalDomainForwardPaging.
        :rtype: ForwardPaging
        """
        return self._paging

    @paging.setter
    def paging(self, paging):
        """Sets the paging of this CollectionResponseWithTotalDomainForwardPaging.


        :param paging: The paging of this CollectionResponseWithTotalDomainForwardPaging.
        :type paging: ForwardPaging
        """

        self._paging = paging

    @property
    def results(self):
        """Gets the results of this CollectionResponseWithTotalDomainForwardPaging.


        :return: The results of this CollectionResponseWithTotalDomainForwardPaging.
        :rtype: List[Domain]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this CollectionResponseWithTotalDomainForwardPaging.


        :param results: The results of this CollectionResponseWithTotalDomainForwardPaging.
        :type results: List[Domain]
        """
        if results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")

        self._results = results

    @property
    def total(self):
        """Gets the total of this CollectionResponseWithTotalDomainForwardPaging.


        :return: The total of this CollectionResponseWithTotalDomainForwardPaging.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this CollectionResponseWithTotalDomainForwardPaging.


        :param total: The total of this CollectionResponseWithTotalDomainForwardPaging.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total
