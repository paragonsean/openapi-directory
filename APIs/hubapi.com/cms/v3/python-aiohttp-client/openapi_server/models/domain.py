# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Domain(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, correct_cname: str=None, created: datetime=None, domain: str=None, id: str=None, is_resolving: bool=None, is_ssl_enabled: bool=None, is_ssl_only: bool=None, is_used_for_blog_post: bool=None, is_used_for_email: bool=None, is_used_for_knowledge: bool=None, is_used_for_landing_page: bool=None, is_used_for_site_page: bool=None, manually_marked_as_resolving: bool=None, primary_blog_post: bool=None, primary_email: bool=None, primary_knowledge: bool=None, primary_landing_page: bool=None, primary_site_page: bool=None, secondary_to_domain: str=None, updated: datetime=None):
        """Domain - a model defined in OpenAPI

        :param correct_cname: The correct_cname of this Domain.
        :param created: The created of this Domain.
        :param domain: The domain of this Domain.
        :param id: The id of this Domain.
        :param is_resolving: The is_resolving of this Domain.
        :param is_ssl_enabled: The is_ssl_enabled of this Domain.
        :param is_ssl_only: The is_ssl_only of this Domain.
        :param is_used_for_blog_post: The is_used_for_blog_post of this Domain.
        :param is_used_for_email: The is_used_for_email of this Domain.
        :param is_used_for_knowledge: The is_used_for_knowledge of this Domain.
        :param is_used_for_landing_page: The is_used_for_landing_page of this Domain.
        :param is_used_for_site_page: The is_used_for_site_page of this Domain.
        :param manually_marked_as_resolving: The manually_marked_as_resolving of this Domain.
        :param primary_blog_post: The primary_blog_post of this Domain.
        :param primary_email: The primary_email of this Domain.
        :param primary_knowledge: The primary_knowledge of this Domain.
        :param primary_landing_page: The primary_landing_page of this Domain.
        :param primary_site_page: The primary_site_page of this Domain.
        :param secondary_to_domain: The secondary_to_domain of this Domain.
        :param updated: The updated of this Domain.
        """
        self.openapi_types = {
            'correct_cname': str,
            'created': datetime,
            'domain': str,
            'id': str,
            'is_resolving': bool,
            'is_ssl_enabled': bool,
            'is_ssl_only': bool,
            'is_used_for_blog_post': bool,
            'is_used_for_email': bool,
            'is_used_for_knowledge': bool,
            'is_used_for_landing_page': bool,
            'is_used_for_site_page': bool,
            'manually_marked_as_resolving': bool,
            'primary_blog_post': bool,
            'primary_email': bool,
            'primary_knowledge': bool,
            'primary_landing_page': bool,
            'primary_site_page': bool,
            'secondary_to_domain': str,
            'updated': datetime
        }

        self.attribute_map = {
            'correct_cname': 'correctCname',
            'created': 'created',
            'domain': 'domain',
            'id': 'id',
            'is_resolving': 'isResolving',
            'is_ssl_enabled': 'isSslEnabled',
            'is_ssl_only': 'isSslOnly',
            'is_used_for_blog_post': 'isUsedForBlogPost',
            'is_used_for_email': 'isUsedForEmail',
            'is_used_for_knowledge': 'isUsedForKnowledge',
            'is_used_for_landing_page': 'isUsedForLandingPage',
            'is_used_for_site_page': 'isUsedForSitePage',
            'manually_marked_as_resolving': 'manuallyMarkedAsResolving',
            'primary_blog_post': 'primaryBlogPost',
            'primary_email': 'primaryEmail',
            'primary_knowledge': 'primaryKnowledge',
            'primary_landing_page': 'primaryLandingPage',
            'primary_site_page': 'primarySitePage',
            'secondary_to_domain': 'secondaryToDomain',
            'updated': 'updated'
        }

        self._correct_cname = correct_cname
        self._created = created
        self._domain = domain
        self._id = id
        self._is_resolving = is_resolving
        self._is_ssl_enabled = is_ssl_enabled
        self._is_ssl_only = is_ssl_only
        self._is_used_for_blog_post = is_used_for_blog_post
        self._is_used_for_email = is_used_for_email
        self._is_used_for_knowledge = is_used_for_knowledge
        self._is_used_for_landing_page = is_used_for_landing_page
        self._is_used_for_site_page = is_used_for_site_page
        self._manually_marked_as_resolving = manually_marked_as_resolving
        self._primary_blog_post = primary_blog_post
        self._primary_email = primary_email
        self._primary_knowledge = primary_knowledge
        self._primary_landing_page = primary_landing_page
        self._primary_site_page = primary_site_page
        self._secondary_to_domain = secondary_to_domain
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Domain':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Domain of this Domain.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def correct_cname(self):
        """Gets the correct_cname of this Domain.


        :return: The correct_cname of this Domain.
        :rtype: str
        """
        return self._correct_cname

    @correct_cname.setter
    def correct_cname(self, correct_cname):
        """Sets the correct_cname of this Domain.


        :param correct_cname: The correct_cname of this Domain.
        :type correct_cname: str
        """

        self._correct_cname = correct_cname

    @property
    def created(self):
        """Gets the created of this Domain.


        :return: The created of this Domain.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Domain.


        :param created: The created of this Domain.
        :type created: datetime
        """

        self._created = created

    @property
    def domain(self):
        """Gets the domain of this Domain.

        The actual domain or sub-domain. e.g. www.hubspot.com

        :return: The domain of this Domain.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Domain.

        The actual domain or sub-domain. e.g. www.hubspot.com

        :param domain: The domain of this Domain.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def id(self):
        """Gets the id of this Domain.

        The unique ID of this domain.

        :return: The id of this Domain.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Domain.

        The unique ID of this domain.

        :param id: The id of this Domain.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_resolving(self):
        """Gets the is_resolving of this Domain.

        Whether the DNS for this domain is optimally configured for use with HubSpot.

        :return: The is_resolving of this Domain.
        :rtype: bool
        """
        return self._is_resolving

    @is_resolving.setter
    def is_resolving(self, is_resolving):
        """Sets the is_resolving of this Domain.

        Whether the DNS for this domain is optimally configured for use with HubSpot.

        :param is_resolving: The is_resolving of this Domain.
        :type is_resolving: bool
        """
        if is_resolving is None:
            raise ValueError("Invalid value for `is_resolving`, must not be `None`")

        self._is_resolving = is_resolving

    @property
    def is_ssl_enabled(self):
        """Gets the is_ssl_enabled of this Domain.


        :return: The is_ssl_enabled of this Domain.
        :rtype: bool
        """
        return self._is_ssl_enabled

    @is_ssl_enabled.setter
    def is_ssl_enabled(self, is_ssl_enabled):
        """Sets the is_ssl_enabled of this Domain.


        :param is_ssl_enabled: The is_ssl_enabled of this Domain.
        :type is_ssl_enabled: bool
        """

        self._is_ssl_enabled = is_ssl_enabled

    @property
    def is_ssl_only(self):
        """Gets the is_ssl_only of this Domain.


        :return: The is_ssl_only of this Domain.
        :rtype: bool
        """
        return self._is_ssl_only

    @is_ssl_only.setter
    def is_ssl_only(self, is_ssl_only):
        """Sets the is_ssl_only of this Domain.


        :param is_ssl_only: The is_ssl_only of this Domain.
        :type is_ssl_only: bool
        """

        self._is_ssl_only = is_ssl_only

    @property
    def is_used_for_blog_post(self):
        """Gets the is_used_for_blog_post of this Domain.

        Whether the domain is used for CMS blog posts.

        :return: The is_used_for_blog_post of this Domain.
        :rtype: bool
        """
        return self._is_used_for_blog_post

    @is_used_for_blog_post.setter
    def is_used_for_blog_post(self, is_used_for_blog_post):
        """Sets the is_used_for_blog_post of this Domain.

        Whether the domain is used for CMS blog posts.

        :param is_used_for_blog_post: The is_used_for_blog_post of this Domain.
        :type is_used_for_blog_post: bool
        """
        if is_used_for_blog_post is None:
            raise ValueError("Invalid value for `is_used_for_blog_post`, must not be `None`")

        self._is_used_for_blog_post = is_used_for_blog_post

    @property
    def is_used_for_email(self):
        """Gets the is_used_for_email of this Domain.

        Whether the domain is used for CMS email web pages.

        :return: The is_used_for_email of this Domain.
        :rtype: bool
        """
        return self._is_used_for_email

    @is_used_for_email.setter
    def is_used_for_email(self, is_used_for_email):
        """Sets the is_used_for_email of this Domain.

        Whether the domain is used for CMS email web pages.

        :param is_used_for_email: The is_used_for_email of this Domain.
        :type is_used_for_email: bool
        """
        if is_used_for_email is None:
            raise ValueError("Invalid value for `is_used_for_email`, must not be `None`")

        self._is_used_for_email = is_used_for_email

    @property
    def is_used_for_knowledge(self):
        """Gets the is_used_for_knowledge of this Domain.

        Whether the domain is used for CMS knowledge pages.

        :return: The is_used_for_knowledge of this Domain.
        :rtype: bool
        """
        return self._is_used_for_knowledge

    @is_used_for_knowledge.setter
    def is_used_for_knowledge(self, is_used_for_knowledge):
        """Sets the is_used_for_knowledge of this Domain.

        Whether the domain is used for CMS knowledge pages.

        :param is_used_for_knowledge: The is_used_for_knowledge of this Domain.
        :type is_used_for_knowledge: bool
        """
        if is_used_for_knowledge is None:
            raise ValueError("Invalid value for `is_used_for_knowledge`, must not be `None`")

        self._is_used_for_knowledge = is_used_for_knowledge

    @property
    def is_used_for_landing_page(self):
        """Gets the is_used_for_landing_page of this Domain.

        Whether the domain is used for CMS landing pages.

        :return: The is_used_for_landing_page of this Domain.
        :rtype: bool
        """
        return self._is_used_for_landing_page

    @is_used_for_landing_page.setter
    def is_used_for_landing_page(self, is_used_for_landing_page):
        """Sets the is_used_for_landing_page of this Domain.

        Whether the domain is used for CMS landing pages.

        :param is_used_for_landing_page: The is_used_for_landing_page of this Domain.
        :type is_used_for_landing_page: bool
        """
        if is_used_for_landing_page is None:
            raise ValueError("Invalid value for `is_used_for_landing_page`, must not be `None`")

        self._is_used_for_landing_page = is_used_for_landing_page

    @property
    def is_used_for_site_page(self):
        """Gets the is_used_for_site_page of this Domain.

        Whether the domain is used for CMS site pages.

        :return: The is_used_for_site_page of this Domain.
        :rtype: bool
        """
        return self._is_used_for_site_page

    @is_used_for_site_page.setter
    def is_used_for_site_page(self, is_used_for_site_page):
        """Sets the is_used_for_site_page of this Domain.

        Whether the domain is used for CMS site pages.

        :param is_used_for_site_page: The is_used_for_site_page of this Domain.
        :type is_used_for_site_page: bool
        """
        if is_used_for_site_page is None:
            raise ValueError("Invalid value for `is_used_for_site_page`, must not be `None`")

        self._is_used_for_site_page = is_used_for_site_page

    @property
    def manually_marked_as_resolving(self):
        """Gets the manually_marked_as_resolving of this Domain.


        :return: The manually_marked_as_resolving of this Domain.
        :rtype: bool
        """
        return self._manually_marked_as_resolving

    @manually_marked_as_resolving.setter
    def manually_marked_as_resolving(self, manually_marked_as_resolving):
        """Sets the manually_marked_as_resolving of this Domain.


        :param manually_marked_as_resolving: The manually_marked_as_resolving of this Domain.
        :type manually_marked_as_resolving: bool
        """

        self._manually_marked_as_resolving = manually_marked_as_resolving

    @property
    def primary_blog_post(self):
        """Gets the primary_blog_post of this Domain.


        :return: The primary_blog_post of this Domain.
        :rtype: bool
        """
        return self._primary_blog_post

    @primary_blog_post.setter
    def primary_blog_post(self, primary_blog_post):
        """Sets the primary_blog_post of this Domain.


        :param primary_blog_post: The primary_blog_post of this Domain.
        :type primary_blog_post: bool
        """

        self._primary_blog_post = primary_blog_post

    @property
    def primary_email(self):
        """Gets the primary_email of this Domain.


        :return: The primary_email of this Domain.
        :rtype: bool
        """
        return self._primary_email

    @primary_email.setter
    def primary_email(self, primary_email):
        """Sets the primary_email of this Domain.


        :param primary_email: The primary_email of this Domain.
        :type primary_email: bool
        """

        self._primary_email = primary_email

    @property
    def primary_knowledge(self):
        """Gets the primary_knowledge of this Domain.


        :return: The primary_knowledge of this Domain.
        :rtype: bool
        """
        return self._primary_knowledge

    @primary_knowledge.setter
    def primary_knowledge(self, primary_knowledge):
        """Sets the primary_knowledge of this Domain.


        :param primary_knowledge: The primary_knowledge of this Domain.
        :type primary_knowledge: bool
        """

        self._primary_knowledge = primary_knowledge

    @property
    def primary_landing_page(self):
        """Gets the primary_landing_page of this Domain.


        :return: The primary_landing_page of this Domain.
        :rtype: bool
        """
        return self._primary_landing_page

    @primary_landing_page.setter
    def primary_landing_page(self, primary_landing_page):
        """Sets the primary_landing_page of this Domain.


        :param primary_landing_page: The primary_landing_page of this Domain.
        :type primary_landing_page: bool
        """

        self._primary_landing_page = primary_landing_page

    @property
    def primary_site_page(self):
        """Gets the primary_site_page of this Domain.


        :return: The primary_site_page of this Domain.
        :rtype: bool
        """
        return self._primary_site_page

    @primary_site_page.setter
    def primary_site_page(self, primary_site_page):
        """Sets the primary_site_page of this Domain.


        :param primary_site_page: The primary_site_page of this Domain.
        :type primary_site_page: bool
        """

        self._primary_site_page = primary_site_page

    @property
    def secondary_to_domain(self):
        """Gets the secondary_to_domain of this Domain.


        :return: The secondary_to_domain of this Domain.
        :rtype: str
        """
        return self._secondary_to_domain

    @secondary_to_domain.setter
    def secondary_to_domain(self, secondary_to_domain):
        """Sets the secondary_to_domain of this Domain.


        :param secondary_to_domain: The secondary_to_domain of this Domain.
        :type secondary_to_domain: str
        """

        self._secondary_to_domain = secondary_to_domain

    @property
    def updated(self):
        """Gets the updated of this Domain.


        :return: The updated of this Domain.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Domain.


        :param updated: The updated of this Domain.
        :type updated: datetime
        """

        self._updated = updated
