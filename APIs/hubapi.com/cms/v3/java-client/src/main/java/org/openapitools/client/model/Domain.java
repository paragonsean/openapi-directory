/*
 * CMS Domains
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Domain
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:20.653667-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Domain {
  public static final String SERIALIZED_NAME_CORRECT_CNAME = "correctCname";
  @SerializedName(SERIALIZED_NAME_CORRECT_CNAME)
  private String correctCname;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_RESOLVING = "isResolving";
  @SerializedName(SERIALIZED_NAME_IS_RESOLVING)
  private Boolean isResolving;

  public static final String SERIALIZED_NAME_IS_SSL_ENABLED = "isSslEnabled";
  @SerializedName(SERIALIZED_NAME_IS_SSL_ENABLED)
  private Boolean isSslEnabled;

  public static final String SERIALIZED_NAME_IS_SSL_ONLY = "isSslOnly";
  @SerializedName(SERIALIZED_NAME_IS_SSL_ONLY)
  private Boolean isSslOnly;

  public static final String SERIALIZED_NAME_IS_USED_FOR_BLOG_POST = "isUsedForBlogPost";
  @SerializedName(SERIALIZED_NAME_IS_USED_FOR_BLOG_POST)
  private Boolean isUsedForBlogPost;

  public static final String SERIALIZED_NAME_IS_USED_FOR_EMAIL = "isUsedForEmail";
  @SerializedName(SERIALIZED_NAME_IS_USED_FOR_EMAIL)
  private Boolean isUsedForEmail;

  public static final String SERIALIZED_NAME_IS_USED_FOR_KNOWLEDGE = "isUsedForKnowledge";
  @SerializedName(SERIALIZED_NAME_IS_USED_FOR_KNOWLEDGE)
  private Boolean isUsedForKnowledge;

  public static final String SERIALIZED_NAME_IS_USED_FOR_LANDING_PAGE = "isUsedForLandingPage";
  @SerializedName(SERIALIZED_NAME_IS_USED_FOR_LANDING_PAGE)
  private Boolean isUsedForLandingPage;

  public static final String SERIALIZED_NAME_IS_USED_FOR_SITE_PAGE = "isUsedForSitePage";
  @SerializedName(SERIALIZED_NAME_IS_USED_FOR_SITE_PAGE)
  private Boolean isUsedForSitePage;

  public static final String SERIALIZED_NAME_MANUALLY_MARKED_AS_RESOLVING = "manuallyMarkedAsResolving";
  @SerializedName(SERIALIZED_NAME_MANUALLY_MARKED_AS_RESOLVING)
  private Boolean manuallyMarkedAsResolving;

  public static final String SERIALIZED_NAME_PRIMARY_BLOG_POST = "primaryBlogPost";
  @SerializedName(SERIALIZED_NAME_PRIMARY_BLOG_POST)
  private Boolean primaryBlogPost;

  public static final String SERIALIZED_NAME_PRIMARY_EMAIL = "primaryEmail";
  @SerializedName(SERIALIZED_NAME_PRIMARY_EMAIL)
  private Boolean primaryEmail;

  public static final String SERIALIZED_NAME_PRIMARY_KNOWLEDGE = "primaryKnowledge";
  @SerializedName(SERIALIZED_NAME_PRIMARY_KNOWLEDGE)
  private Boolean primaryKnowledge;

  public static final String SERIALIZED_NAME_PRIMARY_LANDING_PAGE = "primaryLandingPage";
  @SerializedName(SERIALIZED_NAME_PRIMARY_LANDING_PAGE)
  private Boolean primaryLandingPage;

  public static final String SERIALIZED_NAME_PRIMARY_SITE_PAGE = "primarySitePage";
  @SerializedName(SERIALIZED_NAME_PRIMARY_SITE_PAGE)
  private Boolean primarySitePage;

  public static final String SERIALIZED_NAME_SECONDARY_TO_DOMAIN = "secondaryToDomain";
  @SerializedName(SERIALIZED_NAME_SECONDARY_TO_DOMAIN)
  private String secondaryToDomain;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public Domain() {
  }

  public Domain correctCname(String correctCname) {
    this.correctCname = correctCname;
    return this;
  }

  /**
   * Get correctCname
   * @return correctCname
   */
  @javax.annotation.Nullable
  public String getCorrectCname() {
    return correctCname;
  }

  public void setCorrectCname(String correctCname) {
    this.correctCname = correctCname;
  }


  public Domain created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public Domain domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * The actual domain or sub-domain. e.g. www.hubspot.com
   * @return domain
   */
  @javax.annotation.Nonnull
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public Domain id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique ID of this domain.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Domain isResolving(Boolean isResolving) {
    this.isResolving = isResolving;
    return this;
  }

  /**
   * Whether the DNS for this domain is optimally configured for use with HubSpot.
   * @return isResolving
   */
  @javax.annotation.Nonnull
  public Boolean getIsResolving() {
    return isResolving;
  }

  public void setIsResolving(Boolean isResolving) {
    this.isResolving = isResolving;
  }


  public Domain isSslEnabled(Boolean isSslEnabled) {
    this.isSslEnabled = isSslEnabled;
    return this;
  }

  /**
   * Get isSslEnabled
   * @return isSslEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsSslEnabled() {
    return isSslEnabled;
  }

  public void setIsSslEnabled(Boolean isSslEnabled) {
    this.isSslEnabled = isSslEnabled;
  }


  public Domain isSslOnly(Boolean isSslOnly) {
    this.isSslOnly = isSslOnly;
    return this;
  }

  /**
   * Get isSslOnly
   * @return isSslOnly
   */
  @javax.annotation.Nullable
  public Boolean getIsSslOnly() {
    return isSslOnly;
  }

  public void setIsSslOnly(Boolean isSslOnly) {
    this.isSslOnly = isSslOnly;
  }


  public Domain isUsedForBlogPost(Boolean isUsedForBlogPost) {
    this.isUsedForBlogPost = isUsedForBlogPost;
    return this;
  }

  /**
   * Whether the domain is used for CMS blog posts.
   * @return isUsedForBlogPost
   */
  @javax.annotation.Nonnull
  public Boolean getIsUsedForBlogPost() {
    return isUsedForBlogPost;
  }

  public void setIsUsedForBlogPost(Boolean isUsedForBlogPost) {
    this.isUsedForBlogPost = isUsedForBlogPost;
  }


  public Domain isUsedForEmail(Boolean isUsedForEmail) {
    this.isUsedForEmail = isUsedForEmail;
    return this;
  }

  /**
   * Whether the domain is used for CMS email web pages.
   * @return isUsedForEmail
   */
  @javax.annotation.Nonnull
  public Boolean getIsUsedForEmail() {
    return isUsedForEmail;
  }

  public void setIsUsedForEmail(Boolean isUsedForEmail) {
    this.isUsedForEmail = isUsedForEmail;
  }


  public Domain isUsedForKnowledge(Boolean isUsedForKnowledge) {
    this.isUsedForKnowledge = isUsedForKnowledge;
    return this;
  }

  /**
   * Whether the domain is used for CMS knowledge pages.
   * @return isUsedForKnowledge
   */
  @javax.annotation.Nonnull
  public Boolean getIsUsedForKnowledge() {
    return isUsedForKnowledge;
  }

  public void setIsUsedForKnowledge(Boolean isUsedForKnowledge) {
    this.isUsedForKnowledge = isUsedForKnowledge;
  }


  public Domain isUsedForLandingPage(Boolean isUsedForLandingPage) {
    this.isUsedForLandingPage = isUsedForLandingPage;
    return this;
  }

  /**
   * Whether the domain is used for CMS landing pages.
   * @return isUsedForLandingPage
   */
  @javax.annotation.Nonnull
  public Boolean getIsUsedForLandingPage() {
    return isUsedForLandingPage;
  }

  public void setIsUsedForLandingPage(Boolean isUsedForLandingPage) {
    this.isUsedForLandingPage = isUsedForLandingPage;
  }


  public Domain isUsedForSitePage(Boolean isUsedForSitePage) {
    this.isUsedForSitePage = isUsedForSitePage;
    return this;
  }

  /**
   * Whether the domain is used for CMS site pages.
   * @return isUsedForSitePage
   */
  @javax.annotation.Nonnull
  public Boolean getIsUsedForSitePage() {
    return isUsedForSitePage;
  }

  public void setIsUsedForSitePage(Boolean isUsedForSitePage) {
    this.isUsedForSitePage = isUsedForSitePage;
  }


  public Domain manuallyMarkedAsResolving(Boolean manuallyMarkedAsResolving) {
    this.manuallyMarkedAsResolving = manuallyMarkedAsResolving;
    return this;
  }

  /**
   * Get manuallyMarkedAsResolving
   * @return manuallyMarkedAsResolving
   */
  @javax.annotation.Nullable
  public Boolean getManuallyMarkedAsResolving() {
    return manuallyMarkedAsResolving;
  }

  public void setManuallyMarkedAsResolving(Boolean manuallyMarkedAsResolving) {
    this.manuallyMarkedAsResolving = manuallyMarkedAsResolving;
  }


  public Domain primaryBlogPost(Boolean primaryBlogPost) {
    this.primaryBlogPost = primaryBlogPost;
    return this;
  }

  /**
   * Get primaryBlogPost
   * @return primaryBlogPost
   */
  @javax.annotation.Nullable
  public Boolean getPrimaryBlogPost() {
    return primaryBlogPost;
  }

  public void setPrimaryBlogPost(Boolean primaryBlogPost) {
    this.primaryBlogPost = primaryBlogPost;
  }


  public Domain primaryEmail(Boolean primaryEmail) {
    this.primaryEmail = primaryEmail;
    return this;
  }

  /**
   * Get primaryEmail
   * @return primaryEmail
   */
  @javax.annotation.Nullable
  public Boolean getPrimaryEmail() {
    return primaryEmail;
  }

  public void setPrimaryEmail(Boolean primaryEmail) {
    this.primaryEmail = primaryEmail;
  }


  public Domain primaryKnowledge(Boolean primaryKnowledge) {
    this.primaryKnowledge = primaryKnowledge;
    return this;
  }

  /**
   * Get primaryKnowledge
   * @return primaryKnowledge
   */
  @javax.annotation.Nullable
  public Boolean getPrimaryKnowledge() {
    return primaryKnowledge;
  }

  public void setPrimaryKnowledge(Boolean primaryKnowledge) {
    this.primaryKnowledge = primaryKnowledge;
  }


  public Domain primaryLandingPage(Boolean primaryLandingPage) {
    this.primaryLandingPage = primaryLandingPage;
    return this;
  }

  /**
   * Get primaryLandingPage
   * @return primaryLandingPage
   */
  @javax.annotation.Nullable
  public Boolean getPrimaryLandingPage() {
    return primaryLandingPage;
  }

  public void setPrimaryLandingPage(Boolean primaryLandingPage) {
    this.primaryLandingPage = primaryLandingPage;
  }


  public Domain primarySitePage(Boolean primarySitePage) {
    this.primarySitePage = primarySitePage;
    return this;
  }

  /**
   * Get primarySitePage
   * @return primarySitePage
   */
  @javax.annotation.Nullable
  public Boolean getPrimarySitePage() {
    return primarySitePage;
  }

  public void setPrimarySitePage(Boolean primarySitePage) {
    this.primarySitePage = primarySitePage;
  }


  public Domain secondaryToDomain(String secondaryToDomain) {
    this.secondaryToDomain = secondaryToDomain;
    return this;
  }

  /**
   * Get secondaryToDomain
   * @return secondaryToDomain
   */
  @javax.annotation.Nullable
  public String getSecondaryToDomain() {
    return secondaryToDomain;
  }

  public void setSecondaryToDomain(String secondaryToDomain) {
    this.secondaryToDomain = secondaryToDomain;
  }


  public Domain updated(OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Domain domain = (Domain) o;
    return Objects.equals(this.correctCname, domain.correctCname) &&
        Objects.equals(this.created, domain.created) &&
        Objects.equals(this.domain, domain.domain) &&
        Objects.equals(this.id, domain.id) &&
        Objects.equals(this.isResolving, domain.isResolving) &&
        Objects.equals(this.isSslEnabled, domain.isSslEnabled) &&
        Objects.equals(this.isSslOnly, domain.isSslOnly) &&
        Objects.equals(this.isUsedForBlogPost, domain.isUsedForBlogPost) &&
        Objects.equals(this.isUsedForEmail, domain.isUsedForEmail) &&
        Objects.equals(this.isUsedForKnowledge, domain.isUsedForKnowledge) &&
        Objects.equals(this.isUsedForLandingPage, domain.isUsedForLandingPage) &&
        Objects.equals(this.isUsedForSitePage, domain.isUsedForSitePage) &&
        Objects.equals(this.manuallyMarkedAsResolving, domain.manuallyMarkedAsResolving) &&
        Objects.equals(this.primaryBlogPost, domain.primaryBlogPost) &&
        Objects.equals(this.primaryEmail, domain.primaryEmail) &&
        Objects.equals(this.primaryKnowledge, domain.primaryKnowledge) &&
        Objects.equals(this.primaryLandingPage, domain.primaryLandingPage) &&
        Objects.equals(this.primarySitePage, domain.primarySitePage) &&
        Objects.equals(this.secondaryToDomain, domain.secondaryToDomain) &&
        Objects.equals(this.updated, domain.updated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(correctCname, created, domain, id, isResolving, isSslEnabled, isSslOnly, isUsedForBlogPost, isUsedForEmail, isUsedForKnowledge, isUsedForLandingPage, isUsedForSitePage, manuallyMarkedAsResolving, primaryBlogPost, primaryEmail, primaryKnowledge, primaryLandingPage, primarySitePage, secondaryToDomain, updated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Domain {\n");
    sb.append("    correctCname: ").append(toIndentedString(correctCname)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isResolving: ").append(toIndentedString(isResolving)).append("\n");
    sb.append("    isSslEnabled: ").append(toIndentedString(isSslEnabled)).append("\n");
    sb.append("    isSslOnly: ").append(toIndentedString(isSslOnly)).append("\n");
    sb.append("    isUsedForBlogPost: ").append(toIndentedString(isUsedForBlogPost)).append("\n");
    sb.append("    isUsedForEmail: ").append(toIndentedString(isUsedForEmail)).append("\n");
    sb.append("    isUsedForKnowledge: ").append(toIndentedString(isUsedForKnowledge)).append("\n");
    sb.append("    isUsedForLandingPage: ").append(toIndentedString(isUsedForLandingPage)).append("\n");
    sb.append("    isUsedForSitePage: ").append(toIndentedString(isUsedForSitePage)).append("\n");
    sb.append("    manuallyMarkedAsResolving: ").append(toIndentedString(manuallyMarkedAsResolving)).append("\n");
    sb.append("    primaryBlogPost: ").append(toIndentedString(primaryBlogPost)).append("\n");
    sb.append("    primaryEmail: ").append(toIndentedString(primaryEmail)).append("\n");
    sb.append("    primaryKnowledge: ").append(toIndentedString(primaryKnowledge)).append("\n");
    sb.append("    primaryLandingPage: ").append(toIndentedString(primaryLandingPage)).append("\n");
    sb.append("    primarySitePage: ").append(toIndentedString(primarySitePage)).append("\n");
    sb.append("    secondaryToDomain: ").append(toIndentedString(secondaryToDomain)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("correctCname");
    openapiFields.add("created");
    openapiFields.add("domain");
    openapiFields.add("id");
    openapiFields.add("isResolving");
    openapiFields.add("isSslEnabled");
    openapiFields.add("isSslOnly");
    openapiFields.add("isUsedForBlogPost");
    openapiFields.add("isUsedForEmail");
    openapiFields.add("isUsedForKnowledge");
    openapiFields.add("isUsedForLandingPage");
    openapiFields.add("isUsedForSitePage");
    openapiFields.add("manuallyMarkedAsResolving");
    openapiFields.add("primaryBlogPost");
    openapiFields.add("primaryEmail");
    openapiFields.add("primaryKnowledge");
    openapiFields.add("primaryLandingPage");
    openapiFields.add("primarySitePage");
    openapiFields.add("secondaryToDomain");
    openapiFields.add("updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("domain");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("isResolving");
    openapiRequiredFields.add("isUsedForBlogPost");
    openapiRequiredFields.add("isUsedForEmail");
    openapiRequiredFields.add("isUsedForKnowledge");
    openapiRequiredFields.add("isUsedForLandingPage");
    openapiRequiredFields.add("isUsedForSitePage");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Domain
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Domain.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Domain is not found in the empty JSON string", Domain.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Domain.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Domain` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Domain.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("correctCname") != null && !jsonObj.get("correctCname").isJsonNull()) && !jsonObj.get("correctCname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `correctCname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("correctCname").toString()));
      }
      if (!jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("secondaryToDomain") != null && !jsonObj.get("secondaryToDomain").isJsonNull()) && !jsonObj.get("secondaryToDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryToDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryToDomain").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Domain.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Domain' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Domain> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Domain.class));

       return (TypeAdapter<T>) new TypeAdapter<Domain>() {
           @Override
           public void write(JsonWriter out, Domain value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Domain read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Domain given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Domain
   * @throws IOException if the JSON string is invalid with respect to Domain
   */
  public static Domain fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Domain.class);
  }

  /**
   * Convert an instance of Domain to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

