# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IdentificationTokenGenerationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, first_name: str=None, last_name: str=None):
        """IdentificationTokenGenerationRequest - a model defined in OpenAPI

        :param email: The email of this IdentificationTokenGenerationRequest.
        :param first_name: The first_name of this IdentificationTokenGenerationRequest.
        :param last_name: The last_name of this IdentificationTokenGenerationRequest.
        """
        self.openapi_types = {
            'email': str,
            'first_name': str,
            'last_name': str
        }

        self.attribute_map = {
            'email': 'email',
            'first_name': 'firstName',
            'last_name': 'lastName'
        }

        self._email = email
        self._first_name = first_name
        self._last_name = last_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdentificationTokenGenerationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdentificationTokenGenerationRequest of this IdentificationTokenGenerationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this IdentificationTokenGenerationRequest.

        The email of the visitor that you wish to identify

        :return: The email of this IdentificationTokenGenerationRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this IdentificationTokenGenerationRequest.

        The email of the visitor that you wish to identify

        :param email: The email of this IdentificationTokenGenerationRequest.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this IdentificationTokenGenerationRequest.

        The first name of the visitor that you wish to identify. This value will only be set in HubSpot for new contacts and existing contacts where first name is unknown. Optional.

        :return: The first_name of this IdentificationTokenGenerationRequest.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this IdentificationTokenGenerationRequest.

        The first name of the visitor that you wish to identify. This value will only be set in HubSpot for new contacts and existing contacts where first name is unknown. Optional.

        :param first_name: The first_name of this IdentificationTokenGenerationRequest.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this IdentificationTokenGenerationRequest.

        The last name of the visitor that you wish to identify. This value will only be set in HubSpot for new contacts and existing contacts where last name is unknown. Optional.

        :return: The last_name of this IdentificationTokenGenerationRequest.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this IdentificationTokenGenerationRequest.

        The last name of the visitor that you wish to identify. This value will only be set in HubSpot for new contacts and existing contacts where last name is unknown. Optional.

        :param last_name: The last_name of this IdentificationTokenGenerationRequest.
        :type last_name: str
        """

        self._last_name = last_name
