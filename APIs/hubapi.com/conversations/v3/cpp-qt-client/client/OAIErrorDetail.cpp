/**
 * Visitor Identification
 * The Visitor Identification API allows you to pass identification information to the HubSpot chat widget for otherwise unknown visitors that were verified by your own authentication system.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorDetail::OAIErrorDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorDetail::OAIErrorDetail() {
    this->initializeModel();
}

OAIErrorDetail::~OAIErrorDetail() {}

void OAIErrorDetail::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_in_isSet = false;
    m_in_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_sub_category_isSet = false;
    m_sub_category_isValid = false;
}

void OAIErrorDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorDetail::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    if(json["context"].isObject()){
        auto varmap = json["context"].toObject().toVariantMap();
        m_context_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_context_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_context_isSet &= !jval.isNull() && m_context_isValid;
                m_context.insert(m_context.end(), val, item);
            }
        }
    }

    m_in_isValid = ::OpenAPI::fromJsonValue(m_in, json[QString("in")]);
    m_in_isSet = !json[QString("in")].isNull() && m_in_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_sub_category_isValid = ::OpenAPI::fromJsonValue(m_sub_category, json[QString("subCategory")]);
    m_sub_category_isSet = !json[QString("subCategory")].isNull() && m_sub_category_isValid;
}

QString OAIErrorDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_context.size() > 0) {
        
        obj.insert(QString("context"), toJsonValue(m_context));
    }
    if (m_in_isSet) {
        obj.insert(QString("in"), ::OpenAPI::toJsonValue(m_in));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_sub_category_isSet) {
        obj.insert(QString("subCategory"), ::OpenAPI::toJsonValue(m_sub_category));
    }
    return obj;
}

QString OAIErrorDetail::getCode() const {
    return m_code;
}
void OAIErrorDetail::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIErrorDetail::is_code_Set() const{
    return m_code_isSet;
}

bool OAIErrorDetail::is_code_Valid() const{
    return m_code_isValid;
}

QMap<QString, QList<QString>> OAIErrorDetail::getContext() const {
    return m_context;
}
void OAIErrorDetail::setContext(const QMap<QString, QList<QString>> &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIErrorDetail::is_context_Set() const{
    return m_context_isSet;
}

bool OAIErrorDetail::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIErrorDetail::getIn() const {
    return m_in;
}
void OAIErrorDetail::setIn(const QString &in) {
    m_in = in;
    m_in_isSet = true;
}

bool OAIErrorDetail::is_in_Set() const{
    return m_in_isSet;
}

bool OAIErrorDetail::is_in_Valid() const{
    return m_in_isValid;
}

QString OAIErrorDetail::getMessage() const {
    return m_message;
}
void OAIErrorDetail::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIErrorDetail::is_message_Set() const{
    return m_message_isSet;
}

bool OAIErrorDetail::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIErrorDetail::getSubCategory() const {
    return m_sub_category;
}
void OAIErrorDetail::setSubCategory(const QString &sub_category) {
    m_sub_category = sub_category;
    m_sub_category_isSet = true;
}

bool OAIErrorDetail::is_sub_category_Set() const{
    return m_sub_category_isSet;
}

bool OAIErrorDetail::is_sub_category_Valid() const{
    return m_sub_category_isValid;
}

bool OAIErrorDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_category_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_isValid && true;
}

} // namespace OpenAPI
