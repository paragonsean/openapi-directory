/*
 * Visitor Identification
 * The Visitor Identification API allows you to pass identification information to the HubSpot chat widget for otherwise unknown visitors that were verified by your own authentication system.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.IdentificationTokenGenerationRequest;
import org.openapitools.client.model.IdentificationTokenResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GenerateApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GenerateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GenerateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for postConversationsV3VisitorIdentificationTokensCreateGenerateToken
     * @param identificationTokenGenerationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postConversationsV3VisitorIdentificationTokensCreateGenerateTokenCall(IdentificationTokenGenerationRequest identificationTokenGenerationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identificationTokenGenerationRequest;

        // create path and map variables
        String localVarPath = "/conversations/v3/visitor-identification/tokens/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postConversationsV3VisitorIdentificationTokensCreateGenerateTokenValidateBeforeCall(IdentificationTokenGenerationRequest identificationTokenGenerationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identificationTokenGenerationRequest' is set
        if (identificationTokenGenerationRequest == null) {
            throw new ApiException("Missing the required parameter 'identificationTokenGenerationRequest' when calling postConversationsV3VisitorIdentificationTokensCreateGenerateToken(Async)");
        }

        return postConversationsV3VisitorIdentificationTokensCreateGenerateTokenCall(identificationTokenGenerationRequest, _callback);

    }

    /**
     * Generate a token
     * Generates a new visitor identification token. This token will be unique every time this endpoint is called, even if called with the same email address. This token is temporary and will expire after 12 hours
     * @param identificationTokenGenerationRequest  (required)
     * @return IdentificationTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public IdentificationTokenResponse postConversationsV3VisitorIdentificationTokensCreateGenerateToken(IdentificationTokenGenerationRequest identificationTokenGenerationRequest) throws ApiException {
        ApiResponse<IdentificationTokenResponse> localVarResp = postConversationsV3VisitorIdentificationTokensCreateGenerateTokenWithHttpInfo(identificationTokenGenerationRequest);
        return localVarResp.getData();
    }

    /**
     * Generate a token
     * Generates a new visitor identification token. This token will be unique every time this endpoint is called, even if called with the same email address. This token is temporary and will expire after 12 hours
     * @param identificationTokenGenerationRequest  (required)
     * @return ApiResponse&lt;IdentificationTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdentificationTokenResponse> postConversationsV3VisitorIdentificationTokensCreateGenerateTokenWithHttpInfo(IdentificationTokenGenerationRequest identificationTokenGenerationRequest) throws ApiException {
        okhttp3.Call localVarCall = postConversationsV3VisitorIdentificationTokensCreateGenerateTokenValidateBeforeCall(identificationTokenGenerationRequest, null);
        Type localVarReturnType = new TypeToken<IdentificationTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a token (asynchronously)
     * Generates a new visitor identification token. This token will be unique every time this endpoint is called, even if called with the same email address. This token is temporary and will expire after 12 hours
     * @param identificationTokenGenerationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postConversationsV3VisitorIdentificationTokensCreateGenerateTokenAsync(IdentificationTokenGenerationRequest identificationTokenGenerationRequest, final ApiCallback<IdentificationTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postConversationsV3VisitorIdentificationTokensCreateGenerateTokenValidateBeforeCall(identificationTokenGenerationRequest, _callback);
        Type localVarReturnType = new TypeToken<IdentificationTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
