/*
 * Subscriptions
 * Subscriptions allow contacts to control what forms of communications they receive. Contacts can decide whether they want to receive communication pertaining to a specific topic, brand, or an entire HubSpot account.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A request to change the status of a contact&#39;s subscription.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:27.745038-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PublicUpdateSubscriptionStatusRequest {
  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "emailAddress";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private String emailAddress;

  /**
   * Legal basis for updating the contact&#39;s status (required for GDPR enabled portals).
   */
  @JsonAdapter(LegalBasisEnum.Adapter.class)
  public enum LegalBasisEnum {
    LEGITIMATE_INTEREST_PQL("LEGITIMATE_INTEREST_PQL"),
    
    LEGITIMATE_INTEREST_CLIENT("LEGITIMATE_INTEREST_CLIENT"),
    
    PERFORMANCE_OF_CONTRACT("PERFORMANCE_OF_CONTRACT"),
    
    CONSENT_WITH_NOTICE("CONSENT_WITH_NOTICE"),
    
    NON_GDPR("NON_GDPR"),
    
    PROCESS_AND_STORE("PROCESS_AND_STORE"),
    
    LEGITIMATE_INTEREST_OTHER("LEGITIMATE_INTEREST_OTHER");

    private String value;

    LegalBasisEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LegalBasisEnum fromValue(String value) {
      for (LegalBasisEnum b : LegalBasisEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LegalBasisEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LegalBasisEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LegalBasisEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LegalBasisEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LegalBasisEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEGAL_BASIS = "legalBasis";
  @SerializedName(SERIALIZED_NAME_LEGAL_BASIS)
  private LegalBasisEnum legalBasis;

  public static final String SERIALIZED_NAME_LEGAL_BASIS_EXPLANATION = "legalBasisExplanation";
  @SerializedName(SERIALIZED_NAME_LEGAL_BASIS_EXPLANATION)
  private String legalBasisExplanation;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public PublicUpdateSubscriptionStatusRequest() {
  }

  public PublicUpdateSubscriptionStatusRequest emailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  /**
   * Contact&#39;s email address.
   * @return emailAddress
   */
  @javax.annotation.Nonnull
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }


  public PublicUpdateSubscriptionStatusRequest legalBasis(LegalBasisEnum legalBasis) {
    this.legalBasis = legalBasis;
    return this;
  }

  /**
   * Legal basis for updating the contact&#39;s status (required for GDPR enabled portals).
   * @return legalBasis
   */
  @javax.annotation.Nullable
  public LegalBasisEnum getLegalBasis() {
    return legalBasis;
  }

  public void setLegalBasis(LegalBasisEnum legalBasis) {
    this.legalBasis = legalBasis;
  }


  public PublicUpdateSubscriptionStatusRequest legalBasisExplanation(String legalBasisExplanation) {
    this.legalBasisExplanation = legalBasisExplanation;
    return this;
  }

  /**
   * A more detailed explanation to go with the legal basis (required for GDPR enabled portals).
   * @return legalBasisExplanation
   */
  @javax.annotation.Nullable
  public String getLegalBasisExplanation() {
    return legalBasisExplanation;
  }

  public void setLegalBasisExplanation(String legalBasisExplanation) {
    this.legalBasisExplanation = legalBasisExplanation;
  }


  public PublicUpdateSubscriptionStatusRequest subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * ID of the subscription being updated for the contact.
   * @return subscriptionId
   */
  @javax.annotation.Nonnull
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublicUpdateSubscriptionStatusRequest publicUpdateSubscriptionStatusRequest = (PublicUpdateSubscriptionStatusRequest) o;
    return Objects.equals(this.emailAddress, publicUpdateSubscriptionStatusRequest.emailAddress) &&
        Objects.equals(this.legalBasis, publicUpdateSubscriptionStatusRequest.legalBasis) &&
        Objects.equals(this.legalBasisExplanation, publicUpdateSubscriptionStatusRequest.legalBasisExplanation) &&
        Objects.equals(this.subscriptionId, publicUpdateSubscriptionStatusRequest.subscriptionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emailAddress, legalBasis, legalBasisExplanation, subscriptionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublicUpdateSubscriptionStatusRequest {\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    legalBasis: ").append(toIndentedString(legalBasis)).append("\n");
    sb.append("    legalBasisExplanation: ").append(toIndentedString(legalBasisExplanation)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("emailAddress");
    openapiFields.add("legalBasis");
    openapiFields.add("legalBasisExplanation");
    openapiFields.add("subscriptionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("emailAddress");
    openapiRequiredFields.add("subscriptionId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublicUpdateSubscriptionStatusRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublicUpdateSubscriptionStatusRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublicUpdateSubscriptionStatusRequest is not found in the empty JSON string", PublicUpdateSubscriptionStatusRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublicUpdateSubscriptionStatusRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublicUpdateSubscriptionStatusRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PublicUpdateSubscriptionStatusRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("emailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailAddress").toString()));
      }
      if ((jsonObj.get("legalBasis") != null && !jsonObj.get("legalBasis").isJsonNull()) && !jsonObj.get("legalBasis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalBasis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalBasis").toString()));
      }
      // validate the optional field `legalBasis`
      if (jsonObj.get("legalBasis") != null && !jsonObj.get("legalBasis").isJsonNull()) {
        LegalBasisEnum.validateJsonElement(jsonObj.get("legalBasis"));
      }
      if ((jsonObj.get("legalBasisExplanation") != null && !jsonObj.get("legalBasisExplanation").isJsonNull()) && !jsonObj.get("legalBasisExplanation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalBasisExplanation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalBasisExplanation").toString()));
      }
      if (!jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublicUpdateSubscriptionStatusRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublicUpdateSubscriptionStatusRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublicUpdateSubscriptionStatusRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublicUpdateSubscriptionStatusRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PublicUpdateSubscriptionStatusRequest>() {
           @Override
           public void write(JsonWriter out, PublicUpdateSubscriptionStatusRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublicUpdateSubscriptionStatusRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublicUpdateSubscriptionStatusRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublicUpdateSubscriptionStatusRequest
   * @throws IOException if the JSON string is invalid with respect to PublicUpdateSubscriptionStatusRequest
   */
  public static PublicUpdateSubscriptionStatusRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublicUpdateSubscriptionStatusRequest.class);
  }

  /**
   * Convert an instance of PublicUpdateSubscriptionStatusRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

