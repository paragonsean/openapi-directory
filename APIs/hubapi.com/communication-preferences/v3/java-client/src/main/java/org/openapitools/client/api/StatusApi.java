/*
 * Subscriptions
 * Subscriptions allow contacts to control what forms of communications they receive. Contacts can decide whether they want to receive communication pertaining to a specific topic, brand, or an entire HubSpot account.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.PublicSubscriptionStatus;
import org.openapitools.client.model.PublicSubscriptionStatusesResponse;
import org.openapitools.client.model.PublicUpdateSubscriptionStatusRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StatusApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StatusApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StatusApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getCommunicationPreferencesV3StatusEmailEmailAddressGetEmailStatus
     * @param emailAddress  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommunicationPreferencesV3StatusEmailEmailAddressGetEmailStatusCall(String emailAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/communication-preferences/v3/status/email/{emailAddress}"
            .replace("{" + "emailAddress" + "}", localVarApiClient.escapeString(emailAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommunicationPreferencesV3StatusEmailEmailAddressGetEmailStatusValidateBeforeCall(String emailAddress, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailAddress' is set
        if (emailAddress == null) {
            throw new ApiException("Missing the required parameter 'emailAddress' when calling getCommunicationPreferencesV3StatusEmailEmailAddressGetEmailStatus(Async)");
        }

        return getCommunicationPreferencesV3StatusEmailEmailAddressGetEmailStatusCall(emailAddress, _callback);

    }

    /**
     * Get subscription statuses for a contact
     * Returns a list of subscriptions and their status for a given contact.
     * @param emailAddress  (required)
     * @return PublicSubscriptionStatusesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public PublicSubscriptionStatusesResponse getCommunicationPreferencesV3StatusEmailEmailAddressGetEmailStatus(String emailAddress) throws ApiException {
        ApiResponse<PublicSubscriptionStatusesResponse> localVarResp = getCommunicationPreferencesV3StatusEmailEmailAddressGetEmailStatusWithHttpInfo(emailAddress);
        return localVarResp.getData();
    }

    /**
     * Get subscription statuses for a contact
     * Returns a list of subscriptions and their status for a given contact.
     * @param emailAddress  (required)
     * @return ApiResponse&lt;PublicSubscriptionStatusesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicSubscriptionStatusesResponse> getCommunicationPreferencesV3StatusEmailEmailAddressGetEmailStatusWithHttpInfo(String emailAddress) throws ApiException {
        okhttp3.Call localVarCall = getCommunicationPreferencesV3StatusEmailEmailAddressGetEmailStatusValidateBeforeCall(emailAddress, null);
        Type localVarReturnType = new TypeToken<PublicSubscriptionStatusesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get subscription statuses for a contact (asynchronously)
     * Returns a list of subscriptions and their status for a given contact.
     * @param emailAddress  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommunicationPreferencesV3StatusEmailEmailAddressGetEmailStatusAsync(String emailAddress, final ApiCallback<PublicSubscriptionStatusesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommunicationPreferencesV3StatusEmailEmailAddressGetEmailStatusValidateBeforeCall(emailAddress, _callback);
        Type localVarReturnType = new TypeToken<PublicSubscriptionStatusesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCommunicationPreferencesV3SubscribeSubscribe
     * @param publicUpdateSubscriptionStatusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCommunicationPreferencesV3SubscribeSubscribeCall(PublicUpdateSubscriptionStatusRequest publicUpdateSubscriptionStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = publicUpdateSubscriptionStatusRequest;

        // create path and map variables
        String localVarPath = "/communication-preferences/v3/subscribe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCommunicationPreferencesV3SubscribeSubscribeValidateBeforeCall(PublicUpdateSubscriptionStatusRequest publicUpdateSubscriptionStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'publicUpdateSubscriptionStatusRequest' is set
        if (publicUpdateSubscriptionStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'publicUpdateSubscriptionStatusRequest' when calling postCommunicationPreferencesV3SubscribeSubscribe(Async)");
        }

        return postCommunicationPreferencesV3SubscribeSubscribeCall(publicUpdateSubscriptionStatusRequest, _callback);

    }

    /**
     * Subscribe a contact
     * Subscribes a contact to the given subscription type. This API is not valid to use for subscribing a contact at a brand or portal level and will return an error.
     * @param publicUpdateSubscriptionStatusRequest  (required)
     * @return PublicSubscriptionStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public PublicSubscriptionStatus postCommunicationPreferencesV3SubscribeSubscribe(PublicUpdateSubscriptionStatusRequest publicUpdateSubscriptionStatusRequest) throws ApiException {
        ApiResponse<PublicSubscriptionStatus> localVarResp = postCommunicationPreferencesV3SubscribeSubscribeWithHttpInfo(publicUpdateSubscriptionStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Subscribe a contact
     * Subscribes a contact to the given subscription type. This API is not valid to use for subscribing a contact at a brand or portal level and will return an error.
     * @param publicUpdateSubscriptionStatusRequest  (required)
     * @return ApiResponse&lt;PublicSubscriptionStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicSubscriptionStatus> postCommunicationPreferencesV3SubscribeSubscribeWithHttpInfo(PublicUpdateSubscriptionStatusRequest publicUpdateSubscriptionStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = postCommunicationPreferencesV3SubscribeSubscribeValidateBeforeCall(publicUpdateSubscriptionStatusRequest, null);
        Type localVarReturnType = new TypeToken<PublicSubscriptionStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Subscribe a contact (asynchronously)
     * Subscribes a contact to the given subscription type. This API is not valid to use for subscribing a contact at a brand or portal level and will return an error.
     * @param publicUpdateSubscriptionStatusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCommunicationPreferencesV3SubscribeSubscribeAsync(PublicUpdateSubscriptionStatusRequest publicUpdateSubscriptionStatusRequest, final ApiCallback<PublicSubscriptionStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCommunicationPreferencesV3SubscribeSubscribeValidateBeforeCall(publicUpdateSubscriptionStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<PublicSubscriptionStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCommunicationPreferencesV3UnsubscribeUnsubscribe
     * @param publicUpdateSubscriptionStatusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCommunicationPreferencesV3UnsubscribeUnsubscribeCall(PublicUpdateSubscriptionStatusRequest publicUpdateSubscriptionStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = publicUpdateSubscriptionStatusRequest;

        // create path and map variables
        String localVarPath = "/communication-preferences/v3/unsubscribe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCommunicationPreferencesV3UnsubscribeUnsubscribeValidateBeforeCall(PublicUpdateSubscriptionStatusRequest publicUpdateSubscriptionStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'publicUpdateSubscriptionStatusRequest' is set
        if (publicUpdateSubscriptionStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'publicUpdateSubscriptionStatusRequest' when calling postCommunicationPreferencesV3UnsubscribeUnsubscribe(Async)");
        }

        return postCommunicationPreferencesV3UnsubscribeUnsubscribeCall(publicUpdateSubscriptionStatusRequest, _callback);

    }

    /**
     * Unsubscribe a contact
     * Unsubscribes a contact from the given subscription type. This API is not valid to use for unsubscribing a contact at a brand or portal level and will return an error.
     * @param publicUpdateSubscriptionStatusRequest  (required)
     * @return PublicSubscriptionStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public PublicSubscriptionStatus postCommunicationPreferencesV3UnsubscribeUnsubscribe(PublicUpdateSubscriptionStatusRequest publicUpdateSubscriptionStatusRequest) throws ApiException {
        ApiResponse<PublicSubscriptionStatus> localVarResp = postCommunicationPreferencesV3UnsubscribeUnsubscribeWithHttpInfo(publicUpdateSubscriptionStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Unsubscribe a contact
     * Unsubscribes a contact from the given subscription type. This API is not valid to use for unsubscribing a contact at a brand or portal level and will return an error.
     * @param publicUpdateSubscriptionStatusRequest  (required)
     * @return ApiResponse&lt;PublicSubscriptionStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicSubscriptionStatus> postCommunicationPreferencesV3UnsubscribeUnsubscribeWithHttpInfo(PublicUpdateSubscriptionStatusRequest publicUpdateSubscriptionStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = postCommunicationPreferencesV3UnsubscribeUnsubscribeValidateBeforeCall(publicUpdateSubscriptionStatusRequest, null);
        Type localVarReturnType = new TypeToken<PublicSubscriptionStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unsubscribe a contact (asynchronously)
     * Unsubscribes a contact from the given subscription type. This API is not valid to use for unsubscribing a contact at a brand or portal level and will return an error.
     * @param publicUpdateSubscriptionStatusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCommunicationPreferencesV3UnsubscribeUnsubscribeAsync(PublicUpdateSubscriptionStatusRequest publicUpdateSubscriptionStatusRequest, final ApiCallback<PublicSubscriptionStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCommunicationPreferencesV3UnsubscribeUnsubscribeValidateBeforeCall(publicUpdateSubscriptionStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<PublicSubscriptionStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
