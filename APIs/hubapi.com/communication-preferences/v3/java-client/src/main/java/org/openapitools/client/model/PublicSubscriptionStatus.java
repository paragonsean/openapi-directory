/*
 * Subscriptions
 * Subscriptions allow contacts to control what forms of communications they receive. Contacts can decide whether they want to receive communication pertaining to a specific topic, brand, or an entire HubSpot account.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The status of a subscription for a contact.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:27.745038-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PublicSubscriptionStatus {
  public static final String SERIALIZED_NAME_BRAND_ID = "brandId";
  @SerializedName(SERIALIZED_NAME_BRAND_ID)
  private Long brandId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * The legal reason for the current status of the subscription.
   */
  @JsonAdapter(LegalBasisEnum.Adapter.class)
  public enum LegalBasisEnum {
    LEGITIMATE_INTEREST_PQL("LEGITIMATE_INTEREST_PQL"),
    
    LEGITIMATE_INTEREST_CLIENT("LEGITIMATE_INTEREST_CLIENT"),
    
    PERFORMANCE_OF_CONTRACT("PERFORMANCE_OF_CONTRACT"),
    
    CONSENT_WITH_NOTICE("CONSENT_WITH_NOTICE"),
    
    NON_GDPR("NON_GDPR"),
    
    PROCESS_AND_STORE("PROCESS_AND_STORE"),
    
    LEGITIMATE_INTEREST_OTHER("LEGITIMATE_INTEREST_OTHER");

    private String value;

    LegalBasisEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LegalBasisEnum fromValue(String value) {
      for (LegalBasisEnum b : LegalBasisEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LegalBasisEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LegalBasisEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LegalBasisEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LegalBasisEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LegalBasisEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEGAL_BASIS = "legalBasis";
  @SerializedName(SERIALIZED_NAME_LEGAL_BASIS)
  private LegalBasisEnum legalBasis;

  public static final String SERIALIZED_NAME_LEGAL_BASIS_EXPLANATION = "legalBasisExplanation";
  @SerializedName(SERIALIZED_NAME_LEGAL_BASIS_EXPLANATION)
  private String legalBasisExplanation;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PREFERENCE_GROUP_NAME = "preferenceGroupName";
  @SerializedName(SERIALIZED_NAME_PREFERENCE_GROUP_NAME)
  private String preferenceGroupName;

  /**
   * Where the status is determined from e.g. PORTAL_WIDE_STATUS if the contact opted out from the portal.
   */
  @JsonAdapter(SourceOfStatusEnum.Adapter.class)
  public enum SourceOfStatusEnum {
    PORTAL_WIDE_STATUS("PORTAL_WIDE_STATUS"),
    
    BRAND_WIDE_STATUS("BRAND_WIDE_STATUS"),
    
    SUBSCRIPTION_STATUS("SUBSCRIPTION_STATUS");

    private String value;

    SourceOfStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceOfStatusEnum fromValue(String value) {
      for (SourceOfStatusEnum b : SourceOfStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceOfStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceOfStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceOfStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceOfStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceOfStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_OF_STATUS = "sourceOfStatus";
  @SerializedName(SERIALIZED_NAME_SOURCE_OF_STATUS)
  private SourceOfStatusEnum sourceOfStatus;

  /**
   * Whether the contact is subscribed.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    SUBSCRIBED("SUBSCRIBED"),
    
    NOT_SUBSCRIBED("NOT_SUBSCRIBED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public PublicSubscriptionStatus() {
  }

  public PublicSubscriptionStatus brandId(Long brandId) {
    this.brandId = brandId;
    return this;
  }

  /**
   * The ID of the brand that the subscription is associated with, if there is one.
   * @return brandId
   */
  @javax.annotation.Nullable
  public Long getBrandId() {
    return brandId;
  }

  public void setBrandId(Long brandId) {
    this.brandId = brandId;
  }


  public PublicSubscriptionStatus description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the subscription.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PublicSubscriptionStatus id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID for the subscription.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PublicSubscriptionStatus legalBasis(LegalBasisEnum legalBasis) {
    this.legalBasis = legalBasis;
    return this;
  }

  /**
   * The legal reason for the current status of the subscription.
   * @return legalBasis
   */
  @javax.annotation.Nullable
  public LegalBasisEnum getLegalBasis() {
    return legalBasis;
  }

  public void setLegalBasis(LegalBasisEnum legalBasis) {
    this.legalBasis = legalBasis;
  }


  public PublicSubscriptionStatus legalBasisExplanation(String legalBasisExplanation) {
    this.legalBasisExplanation = legalBasisExplanation;
    return this;
  }

  /**
   * A more detailed explanation to go with the legal basis.
   * @return legalBasisExplanation
   */
  @javax.annotation.Nullable
  public String getLegalBasisExplanation() {
    return legalBasisExplanation;
  }

  public void setLegalBasisExplanation(String legalBasisExplanation) {
    this.legalBasisExplanation = legalBasisExplanation;
  }


  public PublicSubscriptionStatus name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the subscription.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PublicSubscriptionStatus preferenceGroupName(String preferenceGroupName) {
    this.preferenceGroupName = preferenceGroupName;
    return this;
  }

  /**
   * The name of the preferences group that the subscription is associated with.
   * @return preferenceGroupName
   */
  @javax.annotation.Nullable
  public String getPreferenceGroupName() {
    return preferenceGroupName;
  }

  public void setPreferenceGroupName(String preferenceGroupName) {
    this.preferenceGroupName = preferenceGroupName;
  }


  public PublicSubscriptionStatus sourceOfStatus(SourceOfStatusEnum sourceOfStatus) {
    this.sourceOfStatus = sourceOfStatus;
    return this;
  }

  /**
   * Where the status is determined from e.g. PORTAL_WIDE_STATUS if the contact opted out from the portal.
   * @return sourceOfStatus
   */
  @javax.annotation.Nonnull
  public SourceOfStatusEnum getSourceOfStatus() {
    return sourceOfStatus;
  }

  public void setSourceOfStatus(SourceOfStatusEnum sourceOfStatus) {
    this.sourceOfStatus = sourceOfStatus;
  }


  public PublicSubscriptionStatus status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Whether the contact is subscribed.
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublicSubscriptionStatus publicSubscriptionStatus = (PublicSubscriptionStatus) o;
    return Objects.equals(this.brandId, publicSubscriptionStatus.brandId) &&
        Objects.equals(this.description, publicSubscriptionStatus.description) &&
        Objects.equals(this.id, publicSubscriptionStatus.id) &&
        Objects.equals(this.legalBasis, publicSubscriptionStatus.legalBasis) &&
        Objects.equals(this.legalBasisExplanation, publicSubscriptionStatus.legalBasisExplanation) &&
        Objects.equals(this.name, publicSubscriptionStatus.name) &&
        Objects.equals(this.preferenceGroupName, publicSubscriptionStatus.preferenceGroupName) &&
        Objects.equals(this.sourceOfStatus, publicSubscriptionStatus.sourceOfStatus) &&
        Objects.equals(this.status, publicSubscriptionStatus.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brandId, description, id, legalBasis, legalBasisExplanation, name, preferenceGroupName, sourceOfStatus, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublicSubscriptionStatus {\n");
    sb.append("    brandId: ").append(toIndentedString(brandId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    legalBasis: ").append(toIndentedString(legalBasis)).append("\n");
    sb.append("    legalBasisExplanation: ").append(toIndentedString(legalBasisExplanation)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    preferenceGroupName: ").append(toIndentedString(preferenceGroupName)).append("\n");
    sb.append("    sourceOfStatus: ").append(toIndentedString(sourceOfStatus)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brandId");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("legalBasis");
    openapiFields.add("legalBasisExplanation");
    openapiFields.add("name");
    openapiFields.add("preferenceGroupName");
    openapiFields.add("sourceOfStatus");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("sourceOfStatus");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublicSubscriptionStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublicSubscriptionStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublicSubscriptionStatus is not found in the empty JSON string", PublicSubscriptionStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublicSubscriptionStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublicSubscriptionStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PublicSubscriptionStatus.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("legalBasis") != null && !jsonObj.get("legalBasis").isJsonNull()) && !jsonObj.get("legalBasis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalBasis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalBasis").toString()));
      }
      // validate the optional field `legalBasis`
      if (jsonObj.get("legalBasis") != null && !jsonObj.get("legalBasis").isJsonNull()) {
        LegalBasisEnum.validateJsonElement(jsonObj.get("legalBasis"));
      }
      if ((jsonObj.get("legalBasisExplanation") != null && !jsonObj.get("legalBasisExplanation").isJsonNull()) && !jsonObj.get("legalBasisExplanation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalBasisExplanation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalBasisExplanation").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("preferenceGroupName") != null && !jsonObj.get("preferenceGroupName").isJsonNull()) && !jsonObj.get("preferenceGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferenceGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferenceGroupName").toString()));
      }
      if (!jsonObj.get("sourceOfStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceOfStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceOfStatus").toString()));
      }
      // validate the required field `sourceOfStatus`
      SourceOfStatusEnum.validateJsonElement(jsonObj.get("sourceOfStatus"));
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublicSubscriptionStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublicSubscriptionStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublicSubscriptionStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublicSubscriptionStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<PublicSubscriptionStatus>() {
           @Override
           public void write(JsonWriter out, PublicSubscriptionStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublicSubscriptionStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublicSubscriptionStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublicSubscriptionStatus
   * @throws IOException if the JSON string is invalid with respect to PublicSubscriptionStatus
   */
  public static PublicSubscriptionStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublicSubscriptionStatus.class);
  }

  /**
   * Convert an instance of PublicSubscriptionStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

