/*
 * Subscriptions
 * Subscriptions allow contacts to control what forms of communications they receive. Contacts can decide whether they want to receive communication pertaining to a specific topic, brand, or an entire HubSpot account.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.PublicSubscriptionStatus;
import org.openapitools.client.model.PublicSubscriptionStatusesResponse;
import org.openapitools.client.model.PublicUpdateSubscriptionStatusRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StatusApi
 */
@Disabled
public class StatusApiTest {

    private final StatusApi api = new StatusApi();

    /**
     * Get subscription statuses for a contact
     *
     * Returns a list of subscriptions and their status for a given contact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommunicationPreferencesV3StatusEmailEmailAddressGetEmailStatusTest() throws ApiException {
        String emailAddress = null;
        PublicSubscriptionStatusesResponse response = api.getCommunicationPreferencesV3StatusEmailEmailAddressGetEmailStatus(emailAddress);
        // TODO: test validations
    }

    /**
     * Subscribe a contact
     *
     * Subscribes a contact to the given subscription type. This API is not valid to use for subscribing a contact at a brand or portal level and will return an error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postCommunicationPreferencesV3SubscribeSubscribeTest() throws ApiException {
        PublicUpdateSubscriptionStatusRequest publicUpdateSubscriptionStatusRequest = null;
        PublicSubscriptionStatus response = api.postCommunicationPreferencesV3SubscribeSubscribe(publicUpdateSubscriptionStatusRequest);
        // TODO: test validations
    }

    /**
     * Unsubscribe a contact
     *
     * Unsubscribes a contact from the given subscription type. This API is not valid to use for unsubscribing a contact at a brand or portal level and will return an error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postCommunicationPreferencesV3UnsubscribeUnsubscribeTest() throws ApiException {
        PublicUpdateSubscriptionStatusRequest publicUpdateSubscriptionStatusRequest = null;
        PublicSubscriptionStatus response = api.postCommunicationPreferencesV3UnsubscribeUnsubscribe(publicUpdateSubscriptionStatusRequest);
        // TODO: test validations
    }

}
