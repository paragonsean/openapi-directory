# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, communication_method: str=None, created_at: datetime=None, description: str=None, id: str=None, is_active: bool=None, is_default: bool=None, is_internal: bool=None, name: str=None, purpose: str=None, updated_at: datetime=None):
        """SubscriptionDefinition - a model defined in OpenAPI

        :param communication_method: The communication_method of this SubscriptionDefinition.
        :param created_at: The created_at of this SubscriptionDefinition.
        :param description: The description of this SubscriptionDefinition.
        :param id: The id of this SubscriptionDefinition.
        :param is_active: The is_active of this SubscriptionDefinition.
        :param is_default: The is_default of this SubscriptionDefinition.
        :param is_internal: The is_internal of this SubscriptionDefinition.
        :param name: The name of this SubscriptionDefinition.
        :param purpose: The purpose of this SubscriptionDefinition.
        :param updated_at: The updated_at of this SubscriptionDefinition.
        """
        self.openapi_types = {
            'communication_method': str,
            'created_at': datetime,
            'description': str,
            'id': str,
            'is_active': bool,
            'is_default': bool,
            'is_internal': bool,
            'name': str,
            'purpose': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'communication_method': 'communicationMethod',
            'created_at': 'createdAt',
            'description': 'description',
            'id': 'id',
            'is_active': 'isActive',
            'is_default': 'isDefault',
            'is_internal': 'isInternal',
            'name': 'name',
            'purpose': 'purpose',
            'updated_at': 'updatedAt'
        }

        self._communication_method = communication_method
        self._created_at = created_at
        self._description = description
        self._id = id
        self._is_active = is_active
        self._is_default = is_default
        self._is_internal = is_internal
        self._name = name
        self._purpose = purpose
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionDefinition of this SubscriptionDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def communication_method(self):
        """Gets the communication_method of this SubscriptionDefinition.

        The method or technology used to contact.

        :return: The communication_method of this SubscriptionDefinition.
        :rtype: str
        """
        return self._communication_method

    @communication_method.setter
    def communication_method(self, communication_method):
        """Sets the communication_method of this SubscriptionDefinition.

        The method or technology used to contact.

        :param communication_method: The communication_method of this SubscriptionDefinition.
        :type communication_method: str
        """

        self._communication_method = communication_method

    @property
    def created_at(self):
        """Gets the created_at of this SubscriptionDefinition.

        Time at which the definition was created.

        :return: The created_at of this SubscriptionDefinition.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SubscriptionDefinition.

        Time at which the definition was created.

        :param created_at: The created_at of this SubscriptionDefinition.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this SubscriptionDefinition.

        A description of the subscription.

        :return: The description of this SubscriptionDefinition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SubscriptionDefinition.

        A description of the subscription.

        :param description: The description of this SubscriptionDefinition.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this SubscriptionDefinition.

        The ID of the definition.

        :return: The id of this SubscriptionDefinition.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscriptionDefinition.

        The ID of the definition.

        :param id: The id of this SubscriptionDefinition.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this SubscriptionDefinition.

        Whether the definition is active or archived.

        :return: The is_active of this SubscriptionDefinition.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this SubscriptionDefinition.

        Whether the definition is active or archived.

        :param is_active: The is_active of this SubscriptionDefinition.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def is_default(self):
        """Gets the is_default of this SubscriptionDefinition.

        A subscription definition created by HubSpot.

        :return: The is_default of this SubscriptionDefinition.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this SubscriptionDefinition.

        A subscription definition created by HubSpot.

        :param is_default: The is_default of this SubscriptionDefinition.
        :type is_default: bool
        """
        if is_default is None:
            raise ValueError("Invalid value for `is_default`, must not be `None`")

        self._is_default = is_default

    @property
    def is_internal(self):
        """Gets the is_internal of this SubscriptionDefinition.

        A default description that is used by some HubSpot tools and cannot be edited.

        :return: The is_internal of this SubscriptionDefinition.
        :rtype: bool
        """
        return self._is_internal

    @is_internal.setter
    def is_internal(self, is_internal):
        """Sets the is_internal of this SubscriptionDefinition.

        A default description that is used by some HubSpot tools and cannot be edited.

        :param is_internal: The is_internal of this SubscriptionDefinition.
        :type is_internal: bool
        """
        if is_internal is None:
            raise ValueError("Invalid value for `is_internal`, must not be `None`")

        self._is_internal = is_internal

    @property
    def name(self):
        """Gets the name of this SubscriptionDefinition.

        The name of the subscription.

        :return: The name of this SubscriptionDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubscriptionDefinition.

        The name of the subscription.

        :param name: The name of this SubscriptionDefinition.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def purpose(self):
        """Gets the purpose of this SubscriptionDefinition.

        The purpose of this subscription or the department in your organization that uses it.

        :return: The purpose of this SubscriptionDefinition.
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this SubscriptionDefinition.

        The purpose of this subscription or the department in your organization that uses it.

        :param purpose: The purpose of this SubscriptionDefinition.
        :type purpose: str
        """

        self._purpose = purpose

    @property
    def updated_at(self):
        """Gets the updated_at of this SubscriptionDefinition.

        Time at which the definition was last updated.

        :return: The updated_at of this SubscriptionDefinition.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SubscriptionDefinition.

        Time at which the definition was last updated.

        :param updated_at: The updated_at of this SubscriptionDefinition.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
