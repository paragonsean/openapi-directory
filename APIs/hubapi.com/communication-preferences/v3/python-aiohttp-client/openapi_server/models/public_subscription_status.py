# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PublicSubscriptionStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand_id: int=None, description: str=None, id: str=None, legal_basis: str=None, legal_basis_explanation: str=None, name: str=None, preference_group_name: str=None, source_of_status: str=None, status: str=None):
        """PublicSubscriptionStatus - a model defined in OpenAPI

        :param brand_id: The brand_id of this PublicSubscriptionStatus.
        :param description: The description of this PublicSubscriptionStatus.
        :param id: The id of this PublicSubscriptionStatus.
        :param legal_basis: The legal_basis of this PublicSubscriptionStatus.
        :param legal_basis_explanation: The legal_basis_explanation of this PublicSubscriptionStatus.
        :param name: The name of this PublicSubscriptionStatus.
        :param preference_group_name: The preference_group_name of this PublicSubscriptionStatus.
        :param source_of_status: The source_of_status of this PublicSubscriptionStatus.
        :param status: The status of this PublicSubscriptionStatus.
        """
        self.openapi_types = {
            'brand_id': int,
            'description': str,
            'id': str,
            'legal_basis': str,
            'legal_basis_explanation': str,
            'name': str,
            'preference_group_name': str,
            'source_of_status': str,
            'status': str
        }

        self.attribute_map = {
            'brand_id': 'brandId',
            'description': 'description',
            'id': 'id',
            'legal_basis': 'legalBasis',
            'legal_basis_explanation': 'legalBasisExplanation',
            'name': 'name',
            'preference_group_name': 'preferenceGroupName',
            'source_of_status': 'sourceOfStatus',
            'status': 'status'
        }

        self._brand_id = brand_id
        self._description = description
        self._id = id
        self._legal_basis = legal_basis
        self._legal_basis_explanation = legal_basis_explanation
        self._name = name
        self._preference_group_name = preference_group_name
        self._source_of_status = source_of_status
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublicSubscriptionStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublicSubscriptionStatus of this PublicSubscriptionStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand_id(self):
        """Gets the brand_id of this PublicSubscriptionStatus.

        The ID of the brand that the subscription is associated with, if there is one.

        :return: The brand_id of this PublicSubscriptionStatus.
        :rtype: int
        """
        return self._brand_id

    @brand_id.setter
    def brand_id(self, brand_id):
        """Sets the brand_id of this PublicSubscriptionStatus.

        The ID of the brand that the subscription is associated with, if there is one.

        :param brand_id: The brand_id of this PublicSubscriptionStatus.
        :type brand_id: int
        """

        self._brand_id = brand_id

    @property
    def description(self):
        """Gets the description of this PublicSubscriptionStatus.

        A description of the subscription.

        :return: The description of this PublicSubscriptionStatus.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PublicSubscriptionStatus.

        A description of the subscription.

        :param description: The description of this PublicSubscriptionStatus.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this PublicSubscriptionStatus.

        The ID for the subscription.

        :return: The id of this PublicSubscriptionStatus.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PublicSubscriptionStatus.

        The ID for the subscription.

        :param id: The id of this PublicSubscriptionStatus.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def legal_basis(self):
        """Gets the legal_basis of this PublicSubscriptionStatus.

        The legal reason for the current status of the subscription.

        :return: The legal_basis of this PublicSubscriptionStatus.
        :rtype: str
        """
        return self._legal_basis

    @legal_basis.setter
    def legal_basis(self, legal_basis):
        """Sets the legal_basis of this PublicSubscriptionStatus.

        The legal reason for the current status of the subscription.

        :param legal_basis: The legal_basis of this PublicSubscriptionStatus.
        :type legal_basis: str
        """
        allowed_values = ["LEGITIMATE_INTEREST_PQL", "LEGITIMATE_INTEREST_CLIENT", "PERFORMANCE_OF_CONTRACT", "CONSENT_WITH_NOTICE", "NON_GDPR", "PROCESS_AND_STORE", "LEGITIMATE_INTEREST_OTHER"]  # noqa: E501
        if legal_basis not in allowed_values:
            raise ValueError(
                "Invalid value for `legal_basis` ({0}), must be one of {1}"
                .format(legal_basis, allowed_values)
            )

        self._legal_basis = legal_basis

    @property
    def legal_basis_explanation(self):
        """Gets the legal_basis_explanation of this PublicSubscriptionStatus.

        A more detailed explanation to go with the legal basis.

        :return: The legal_basis_explanation of this PublicSubscriptionStatus.
        :rtype: str
        """
        return self._legal_basis_explanation

    @legal_basis_explanation.setter
    def legal_basis_explanation(self, legal_basis_explanation):
        """Sets the legal_basis_explanation of this PublicSubscriptionStatus.

        A more detailed explanation to go with the legal basis.

        :param legal_basis_explanation: The legal_basis_explanation of this PublicSubscriptionStatus.
        :type legal_basis_explanation: str
        """

        self._legal_basis_explanation = legal_basis_explanation

    @property
    def name(self):
        """Gets the name of this PublicSubscriptionStatus.

        The name of the subscription.

        :return: The name of this PublicSubscriptionStatus.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PublicSubscriptionStatus.

        The name of the subscription.

        :param name: The name of this PublicSubscriptionStatus.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def preference_group_name(self):
        """Gets the preference_group_name of this PublicSubscriptionStatus.

        The name of the preferences group that the subscription is associated with.

        :return: The preference_group_name of this PublicSubscriptionStatus.
        :rtype: str
        """
        return self._preference_group_name

    @preference_group_name.setter
    def preference_group_name(self, preference_group_name):
        """Sets the preference_group_name of this PublicSubscriptionStatus.

        The name of the preferences group that the subscription is associated with.

        :param preference_group_name: The preference_group_name of this PublicSubscriptionStatus.
        :type preference_group_name: str
        """

        self._preference_group_name = preference_group_name

    @property
    def source_of_status(self):
        """Gets the source_of_status of this PublicSubscriptionStatus.

        Where the status is determined from e.g. PORTAL_WIDE_STATUS if the contact opted out from the portal.

        :return: The source_of_status of this PublicSubscriptionStatus.
        :rtype: str
        """
        return self._source_of_status

    @source_of_status.setter
    def source_of_status(self, source_of_status):
        """Sets the source_of_status of this PublicSubscriptionStatus.

        Where the status is determined from e.g. PORTAL_WIDE_STATUS if the contact opted out from the portal.

        :param source_of_status: The source_of_status of this PublicSubscriptionStatus.
        :type source_of_status: str
        """
        allowed_values = ["PORTAL_WIDE_STATUS", "BRAND_WIDE_STATUS", "SUBSCRIPTION_STATUS"]  # noqa: E501
        if source_of_status not in allowed_values:
            raise ValueError(
                "Invalid value for `source_of_status` ({0}), must be one of {1}"
                .format(source_of_status, allowed_values)
            )

        self._source_of_status = source_of_status

    @property
    def status(self):
        """Gets the status of this PublicSubscriptionStatus.

        Whether the contact is subscribed.

        :return: The status of this PublicSubscriptionStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PublicSubscriptionStatus.

        Whether the contact is subscribed.

        :param status: The status of this PublicSubscriptionStatus.
        :type status: str
        """
        allowed_values = ["SUBSCRIBED", "NOT_SUBSCRIBED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
