# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subscription_definition import SubscriptionDefinition
from openapi_server import util


class SubscriptionDefinitionsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subscription_definitions: List[SubscriptionDefinition]=None):
        """SubscriptionDefinitionsResponse - a model defined in OpenAPI

        :param subscription_definitions: The subscription_definitions of this SubscriptionDefinitionsResponse.
        """
        self.openapi_types = {
            'subscription_definitions': List[SubscriptionDefinition]
        }

        self.attribute_map = {
            'subscription_definitions': 'subscriptionDefinitions'
        }

        self._subscription_definitions = subscription_definitions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionDefinitionsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionDefinitionsResponse of this SubscriptionDefinitionsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subscription_definitions(self):
        """Gets the subscription_definitions of this SubscriptionDefinitionsResponse.

        A list of all subscription definitions.

        :return: The subscription_definitions of this SubscriptionDefinitionsResponse.
        :rtype: List[SubscriptionDefinition]
        """
        return self._subscription_definitions

    @subscription_definitions.setter
    def subscription_definitions(self, subscription_definitions):
        """Sets the subscription_definitions of this SubscriptionDefinitionsResponse.

        A list of all subscription definitions.

        :param subscription_definitions: The subscription_definitions of this SubscriptionDefinitionsResponse.
        :type subscription_definitions: List[SubscriptionDefinition]
        """
        if subscription_definitions is None:
            raise ValueError("Invalid value for `subscription_definitions`, must not be `None`")

        self._subscription_definitions = subscription_definitions
