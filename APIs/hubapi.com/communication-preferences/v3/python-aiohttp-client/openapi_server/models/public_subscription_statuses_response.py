# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.public_subscription_status import PublicSubscriptionStatus
from openapi_server import util


class PublicSubscriptionStatusesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recipient: str=None, subscription_statuses: List[PublicSubscriptionStatus]=None):
        """PublicSubscriptionStatusesResponse - a model defined in OpenAPI

        :param recipient: The recipient of this PublicSubscriptionStatusesResponse.
        :param subscription_statuses: The subscription_statuses of this PublicSubscriptionStatusesResponse.
        """
        self.openapi_types = {
            'recipient': str,
            'subscription_statuses': List[PublicSubscriptionStatus]
        }

        self.attribute_map = {
            'recipient': 'recipient',
            'subscription_statuses': 'subscriptionStatuses'
        }

        self._recipient = recipient
        self._subscription_statuses = subscription_statuses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublicSubscriptionStatusesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublicSubscriptionStatusesResponse of this PublicSubscriptionStatusesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recipient(self):
        """Gets the recipient of this PublicSubscriptionStatusesResponse.

        Email address of the contact.

        :return: The recipient of this PublicSubscriptionStatusesResponse.
        :rtype: str
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this PublicSubscriptionStatusesResponse.

        Email address of the contact.

        :param recipient: The recipient of this PublicSubscriptionStatusesResponse.
        :type recipient: str
        """
        if recipient is None:
            raise ValueError("Invalid value for `recipient`, must not be `None`")

        self._recipient = recipient

    @property
    def subscription_statuses(self):
        """Gets the subscription_statuses of this PublicSubscriptionStatusesResponse.

        A list of all of the contact's subscriptions statuses.

        :return: The subscription_statuses of this PublicSubscriptionStatusesResponse.
        :rtype: List[PublicSubscriptionStatus]
        """
        return self._subscription_statuses

    @subscription_statuses.setter
    def subscription_statuses(self, subscription_statuses):
        """Sets the subscription_statuses of this PublicSubscriptionStatusesResponse.

        A list of all of the contact's subscriptions statuses.

        :param subscription_statuses: The subscription_statuses of this PublicSubscriptionStatusesResponse.
        :type subscription_statuses: List[PublicSubscriptionStatus]
        """
        if subscription_statuses is None:
            raise ValueError("Invalid value for `subscription_statuses`, must not be `None`")

        self._subscription_statuses = subscription_statuses
