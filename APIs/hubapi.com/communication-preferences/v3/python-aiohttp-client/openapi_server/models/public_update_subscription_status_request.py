# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PublicUpdateSubscriptionStatusRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email_address: str=None, legal_basis: str=None, legal_basis_explanation: str=None, subscription_id: str=None):
        """PublicUpdateSubscriptionStatusRequest - a model defined in OpenAPI

        :param email_address: The email_address of this PublicUpdateSubscriptionStatusRequest.
        :param legal_basis: The legal_basis of this PublicUpdateSubscriptionStatusRequest.
        :param legal_basis_explanation: The legal_basis_explanation of this PublicUpdateSubscriptionStatusRequest.
        :param subscription_id: The subscription_id of this PublicUpdateSubscriptionStatusRequest.
        """
        self.openapi_types = {
            'email_address': str,
            'legal_basis': str,
            'legal_basis_explanation': str,
            'subscription_id': str
        }

        self.attribute_map = {
            'email_address': 'emailAddress',
            'legal_basis': 'legalBasis',
            'legal_basis_explanation': 'legalBasisExplanation',
            'subscription_id': 'subscriptionId'
        }

        self._email_address = email_address
        self._legal_basis = legal_basis
        self._legal_basis_explanation = legal_basis_explanation
        self._subscription_id = subscription_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublicUpdateSubscriptionStatusRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublicUpdateSubscriptionStatusRequest of this PublicUpdateSubscriptionStatusRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_address(self):
        """Gets the email_address of this PublicUpdateSubscriptionStatusRequest.

        Contact's email address.

        :return: The email_address of this PublicUpdateSubscriptionStatusRequest.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this PublicUpdateSubscriptionStatusRequest.

        Contact's email address.

        :param email_address: The email_address of this PublicUpdateSubscriptionStatusRequest.
        :type email_address: str
        """
        if email_address is None:
            raise ValueError("Invalid value for `email_address`, must not be `None`")

        self._email_address = email_address

    @property
    def legal_basis(self):
        """Gets the legal_basis of this PublicUpdateSubscriptionStatusRequest.

        Legal basis for updating the contact's status (required for GDPR enabled portals).

        :return: The legal_basis of this PublicUpdateSubscriptionStatusRequest.
        :rtype: str
        """
        return self._legal_basis

    @legal_basis.setter
    def legal_basis(self, legal_basis):
        """Sets the legal_basis of this PublicUpdateSubscriptionStatusRequest.

        Legal basis for updating the contact's status (required for GDPR enabled portals).

        :param legal_basis: The legal_basis of this PublicUpdateSubscriptionStatusRequest.
        :type legal_basis: str
        """
        allowed_values = ["LEGITIMATE_INTEREST_PQL", "LEGITIMATE_INTEREST_CLIENT", "PERFORMANCE_OF_CONTRACT", "CONSENT_WITH_NOTICE", "NON_GDPR", "PROCESS_AND_STORE", "LEGITIMATE_INTEREST_OTHER"]  # noqa: E501
        if legal_basis not in allowed_values:
            raise ValueError(
                "Invalid value for `legal_basis` ({0}), must be one of {1}"
                .format(legal_basis, allowed_values)
            )

        self._legal_basis = legal_basis

    @property
    def legal_basis_explanation(self):
        """Gets the legal_basis_explanation of this PublicUpdateSubscriptionStatusRequest.

        A more detailed explanation to go with the legal basis (required for GDPR enabled portals).

        :return: The legal_basis_explanation of this PublicUpdateSubscriptionStatusRequest.
        :rtype: str
        """
        return self._legal_basis_explanation

    @legal_basis_explanation.setter
    def legal_basis_explanation(self, legal_basis_explanation):
        """Sets the legal_basis_explanation of this PublicUpdateSubscriptionStatusRequest.

        A more detailed explanation to go with the legal basis (required for GDPR enabled portals).

        :param legal_basis_explanation: The legal_basis_explanation of this PublicUpdateSubscriptionStatusRequest.
        :type legal_basis_explanation: str
        """

        self._legal_basis_explanation = legal_basis_explanation

    @property
    def subscription_id(self):
        """Gets the subscription_id of this PublicUpdateSubscriptionStatusRequest.

        ID of the subscription being updated for the contact.

        :return: The subscription_id of this PublicUpdateSubscriptionStatusRequest.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this PublicUpdateSubscriptionStatusRequest.

        ID of the subscription being updated for the contact.

        :param subscription_id: The subscription_id of this PublicUpdateSubscriptionStatusRequest.
        :type subscription_id: str
        """
        if subscription_id is None:
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")

        self._subscription_id = subscription_id
