/**
 * Subscriptions
 * Subscriptions allow contacts to control what forms of communications they receive. Contacts can decide whether they want to receive communication pertaining to a specific topic, brand, or an entire HubSpot account.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Error from './model/Error';
import ErrorDetail from './model/ErrorDetail';
import PublicSubscriptionStatus from './model/PublicSubscriptionStatus';
import PublicSubscriptionStatusesResponse from './model/PublicSubscriptionStatusesResponse';
import PublicUpdateSubscriptionStatusRequest from './model/PublicUpdateSubscriptionStatusRequest';
import SubscriptionDefinition from './model/SubscriptionDefinition';
import SubscriptionDefinitionsResponse from './model/SubscriptionDefinitionsResponse';
import DefinitionApi from './api/DefinitionApi';
import StatusApi from './api/StatusApi';


/**
* Subscriptions allow contacts to control what forms of communications they receive. Contacts can decide whether they want to receive communication pertaining to a specific topic, brand, or an entire HubSpot account..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var Subscriptions = require('index'); // See note below*.
* var xxxSvc = new Subscriptions.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new Subscriptions.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new Subscriptions.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new Subscriptions.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v3
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The ErrorDetail model constructor.
     * @property {module:model/ErrorDetail}
     */
    ErrorDetail,

    /**
     * The PublicSubscriptionStatus model constructor.
     * @property {module:model/PublicSubscriptionStatus}
     */
    PublicSubscriptionStatus,

    /**
     * The PublicSubscriptionStatusesResponse model constructor.
     * @property {module:model/PublicSubscriptionStatusesResponse}
     */
    PublicSubscriptionStatusesResponse,

    /**
     * The PublicUpdateSubscriptionStatusRequest model constructor.
     * @property {module:model/PublicUpdateSubscriptionStatusRequest}
     */
    PublicUpdateSubscriptionStatusRequest,

    /**
     * The SubscriptionDefinition model constructor.
     * @property {module:model/SubscriptionDefinition}
     */
    SubscriptionDefinition,

    /**
     * The SubscriptionDefinitionsResponse model constructor.
     * @property {module:model/SubscriptionDefinitionsResponse}
     */
    SubscriptionDefinitionsResponse,

    /**
    * The DefinitionApi service constructor.
    * @property {module:api/DefinitionApi}
    */
    DefinitionApi,

    /**
    * The StatusApi service constructor.
    * @property {module:api/StatusApi}
    */
    StatusApi
};
