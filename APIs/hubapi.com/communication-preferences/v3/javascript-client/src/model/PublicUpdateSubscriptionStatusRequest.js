/**
 * Subscriptions
 * Subscriptions allow contacts to control what forms of communications they receive. Contacts can decide whether they want to receive communication pertaining to a specific topic, brand, or an entire HubSpot account.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PublicUpdateSubscriptionStatusRequest model module.
 * @module model/PublicUpdateSubscriptionStatusRequest
 * @version v3
 */
class PublicUpdateSubscriptionStatusRequest {
    /**
     * Constructs a new <code>PublicUpdateSubscriptionStatusRequest</code>.
     * A request to change the status of a contact&#39;s subscription.
     * @alias module:model/PublicUpdateSubscriptionStatusRequest
     * @param emailAddress {String} Contact's email address.
     * @param subscriptionId {String} ID of the subscription being updated for the contact.
     */
    constructor(emailAddress, subscriptionId) { 
        
        PublicUpdateSubscriptionStatusRequest.initialize(this, emailAddress, subscriptionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, emailAddress, subscriptionId) { 
        obj['emailAddress'] = emailAddress;
        obj['subscriptionId'] = subscriptionId;
    }

    /**
     * Constructs a <code>PublicUpdateSubscriptionStatusRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PublicUpdateSubscriptionStatusRequest} obj Optional instance to populate.
     * @return {module:model/PublicUpdateSubscriptionStatusRequest} The populated <code>PublicUpdateSubscriptionStatusRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PublicUpdateSubscriptionStatusRequest();

            if (data.hasOwnProperty('emailAddress')) {
                obj['emailAddress'] = ApiClient.convertToType(data['emailAddress'], 'String');
            }
            if (data.hasOwnProperty('legalBasis')) {
                obj['legalBasis'] = ApiClient.convertToType(data['legalBasis'], 'String');
            }
            if (data.hasOwnProperty('legalBasisExplanation')) {
                obj['legalBasisExplanation'] = ApiClient.convertToType(data['legalBasisExplanation'], 'String');
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PublicUpdateSubscriptionStatusRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PublicUpdateSubscriptionStatusRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PublicUpdateSubscriptionStatusRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['emailAddress'] && !(typeof data['emailAddress'] === 'string' || data['emailAddress'] instanceof String)) {
            throw new Error("Expected the field `emailAddress` to be a primitive type in the JSON string but got " + data['emailAddress']);
        }
        // ensure the json data is a string
        if (data['legalBasis'] && !(typeof data['legalBasis'] === 'string' || data['legalBasis'] instanceof String)) {
            throw new Error("Expected the field `legalBasis` to be a primitive type in the JSON string but got " + data['legalBasis']);
        }
        // ensure the json data is a string
        if (data['legalBasisExplanation'] && !(typeof data['legalBasisExplanation'] === 'string' || data['legalBasisExplanation'] instanceof String)) {
            throw new Error("Expected the field `legalBasisExplanation` to be a primitive type in the JSON string but got " + data['legalBasisExplanation']);
        }
        // ensure the json data is a string
        if (data['subscriptionId'] && !(typeof data['subscriptionId'] === 'string' || data['subscriptionId'] instanceof String)) {
            throw new Error("Expected the field `subscriptionId` to be a primitive type in the JSON string but got " + data['subscriptionId']);
        }

        return true;
    }


}

PublicUpdateSubscriptionStatusRequest.RequiredProperties = ["emailAddress", "subscriptionId"];

/**
 * Contact's email address.
 * @member {String} emailAddress
 */
PublicUpdateSubscriptionStatusRequest.prototype['emailAddress'] = undefined;

/**
 * Legal basis for updating the contact's status (required for GDPR enabled portals).
 * @member {module:model/PublicUpdateSubscriptionStatusRequest.LegalBasisEnum} legalBasis
 */
PublicUpdateSubscriptionStatusRequest.prototype['legalBasis'] = undefined;

/**
 * A more detailed explanation to go with the legal basis (required for GDPR enabled portals).
 * @member {String} legalBasisExplanation
 */
PublicUpdateSubscriptionStatusRequest.prototype['legalBasisExplanation'] = undefined;

/**
 * ID of the subscription being updated for the contact.
 * @member {String} subscriptionId
 */
PublicUpdateSubscriptionStatusRequest.prototype['subscriptionId'] = undefined;





/**
 * Allowed values for the <code>legalBasis</code> property.
 * @enum {String}
 * @readonly
 */
PublicUpdateSubscriptionStatusRequest['LegalBasisEnum'] = {

    /**
     * value: "LEGITIMATE_INTEREST_PQL"
     * @const
     */
    "LEGITIMATE_INTEREST_PQL": "LEGITIMATE_INTEREST_PQL",

    /**
     * value: "LEGITIMATE_INTEREST_CLIENT"
     * @const
     */
    "LEGITIMATE_INTEREST_CLIENT": "LEGITIMATE_INTEREST_CLIENT",

    /**
     * value: "PERFORMANCE_OF_CONTRACT"
     * @const
     */
    "PERFORMANCE_OF_CONTRACT": "PERFORMANCE_OF_CONTRACT",

    /**
     * value: "CONSENT_WITH_NOTICE"
     * @const
     */
    "CONSENT_WITH_NOTICE": "CONSENT_WITH_NOTICE",

    /**
     * value: "NON_GDPR"
     * @const
     */
    "NON_GDPR": "NON_GDPR",

    /**
     * value: "PROCESS_AND_STORE"
     * @const
     */
    "PROCESS_AND_STORE": "PROCESS_AND_STORE",

    /**
     * value: "LEGITIMATE_INTEREST_OTHER"
     * @const
     */
    "LEGITIMATE_INTEREST_OTHER": "LEGITIMATE_INTEREST_OTHER"
};



export default PublicUpdateSubscriptionStatusRequest;

