/**
 * Subscriptions
 * Subscriptions allow contacts to control what forms of communications they receive. Contacts can decide whether they want to receive communication pertaining to a specific topic, brand, or an entire HubSpot account.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SubscriptionDefinition from './SubscriptionDefinition';

/**
 * The SubscriptionDefinitionsResponse model module.
 * @module model/SubscriptionDefinitionsResponse
 * @version v3
 */
class SubscriptionDefinitionsResponse {
    /**
     * Constructs a new <code>SubscriptionDefinitionsResponse</code>.
     * A collection of subscription definitions for the portal.
     * @alias module:model/SubscriptionDefinitionsResponse
     * @param subscriptionDefinitions {Array.<module:model/SubscriptionDefinition>} A list of all subscription definitions.
     */
    constructor(subscriptionDefinitions) { 
        
        SubscriptionDefinitionsResponse.initialize(this, subscriptionDefinitions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, subscriptionDefinitions) { 
        obj['subscriptionDefinitions'] = subscriptionDefinitions;
    }

    /**
     * Constructs a <code>SubscriptionDefinitionsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscriptionDefinitionsResponse} obj Optional instance to populate.
     * @return {module:model/SubscriptionDefinitionsResponse} The populated <code>SubscriptionDefinitionsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscriptionDefinitionsResponse();

            if (data.hasOwnProperty('subscriptionDefinitions')) {
                obj['subscriptionDefinitions'] = ApiClient.convertToType(data['subscriptionDefinitions'], [SubscriptionDefinition]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubscriptionDefinitionsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubscriptionDefinitionsResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SubscriptionDefinitionsResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['subscriptionDefinitions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subscriptionDefinitions'])) {
                throw new Error("Expected the field `subscriptionDefinitions` to be an array in the JSON data but got " + data['subscriptionDefinitions']);
            }
            // validate the optional field `subscriptionDefinitions` (array)
            for (const item of data['subscriptionDefinitions']) {
                SubscriptionDefinition.validateJSON(item);
            };
        }

        return true;
    }


}

SubscriptionDefinitionsResponse.RequiredProperties = ["subscriptionDefinitions"];

/**
 * A list of all subscription definitions.
 * @member {Array.<module:model/SubscriptionDefinition>} subscriptionDefinitions
 */
SubscriptionDefinitionsResponse.prototype['subscriptionDefinitions'] = undefined;






export default SubscriptionDefinitionsResponse;

