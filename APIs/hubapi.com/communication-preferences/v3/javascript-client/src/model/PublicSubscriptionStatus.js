/**
 * Subscriptions
 * Subscriptions allow contacts to control what forms of communications they receive. Contacts can decide whether they want to receive communication pertaining to a specific topic, brand, or an entire HubSpot account.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PublicSubscriptionStatus model module.
 * @module model/PublicSubscriptionStatus
 * @version v3
 */
class PublicSubscriptionStatus {
    /**
     * Constructs a new <code>PublicSubscriptionStatus</code>.
     * The status of a subscription for a contact.
     * @alias module:model/PublicSubscriptionStatus
     * @param description {String} A description of the subscription.
     * @param id {String} The ID for the subscription.
     * @param name {String} The name of the subscription.
     * @param sourceOfStatus {module:model/PublicSubscriptionStatus.SourceOfStatusEnum} Where the status is determined from e.g. PORTAL_WIDE_STATUS if the contact opted out from the portal.
     * @param status {module:model/PublicSubscriptionStatus.StatusEnum} Whether the contact is subscribed.
     */
    constructor(description, id, name, sourceOfStatus, status) { 
        
        PublicSubscriptionStatus.initialize(this, description, id, name, sourceOfStatus, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, id, name, sourceOfStatus, status) { 
        obj['description'] = description;
        obj['id'] = id;
        obj['name'] = name;
        obj['sourceOfStatus'] = sourceOfStatus;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>PublicSubscriptionStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PublicSubscriptionStatus} obj Optional instance to populate.
     * @return {module:model/PublicSubscriptionStatus} The populated <code>PublicSubscriptionStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PublicSubscriptionStatus();

            if (data.hasOwnProperty('brandId')) {
                obj['brandId'] = ApiClient.convertToType(data['brandId'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('legalBasis')) {
                obj['legalBasis'] = ApiClient.convertToType(data['legalBasis'], 'String');
            }
            if (data.hasOwnProperty('legalBasisExplanation')) {
                obj['legalBasisExplanation'] = ApiClient.convertToType(data['legalBasisExplanation'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('preferenceGroupName')) {
                obj['preferenceGroupName'] = ApiClient.convertToType(data['preferenceGroupName'], 'String');
            }
            if (data.hasOwnProperty('sourceOfStatus')) {
                obj['sourceOfStatus'] = ApiClient.convertToType(data['sourceOfStatus'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PublicSubscriptionStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PublicSubscriptionStatus</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PublicSubscriptionStatus.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['legalBasis'] && !(typeof data['legalBasis'] === 'string' || data['legalBasis'] instanceof String)) {
            throw new Error("Expected the field `legalBasis` to be a primitive type in the JSON string but got " + data['legalBasis']);
        }
        // ensure the json data is a string
        if (data['legalBasisExplanation'] && !(typeof data['legalBasisExplanation'] === 'string' || data['legalBasisExplanation'] instanceof String)) {
            throw new Error("Expected the field `legalBasisExplanation` to be a primitive type in the JSON string but got " + data['legalBasisExplanation']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['preferenceGroupName'] && !(typeof data['preferenceGroupName'] === 'string' || data['preferenceGroupName'] instanceof String)) {
            throw new Error("Expected the field `preferenceGroupName` to be a primitive type in the JSON string but got " + data['preferenceGroupName']);
        }
        // ensure the json data is a string
        if (data['sourceOfStatus'] && !(typeof data['sourceOfStatus'] === 'string' || data['sourceOfStatus'] instanceof String)) {
            throw new Error("Expected the field `sourceOfStatus` to be a primitive type in the JSON string but got " + data['sourceOfStatus']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

PublicSubscriptionStatus.RequiredProperties = ["description", "id", "name", "sourceOfStatus", "status"];

/**
 * The ID of the brand that the subscription is associated with, if there is one.
 * @member {Number} brandId
 */
PublicSubscriptionStatus.prototype['brandId'] = undefined;

/**
 * A description of the subscription.
 * @member {String} description
 */
PublicSubscriptionStatus.prototype['description'] = undefined;

/**
 * The ID for the subscription.
 * @member {String} id
 */
PublicSubscriptionStatus.prototype['id'] = undefined;

/**
 * The legal reason for the current status of the subscription.
 * @member {module:model/PublicSubscriptionStatus.LegalBasisEnum} legalBasis
 */
PublicSubscriptionStatus.prototype['legalBasis'] = undefined;

/**
 * A more detailed explanation to go with the legal basis.
 * @member {String} legalBasisExplanation
 */
PublicSubscriptionStatus.prototype['legalBasisExplanation'] = undefined;

/**
 * The name of the subscription.
 * @member {String} name
 */
PublicSubscriptionStatus.prototype['name'] = undefined;

/**
 * The name of the preferences group that the subscription is associated with.
 * @member {String} preferenceGroupName
 */
PublicSubscriptionStatus.prototype['preferenceGroupName'] = undefined;

/**
 * Where the status is determined from e.g. PORTAL_WIDE_STATUS if the contact opted out from the portal.
 * @member {module:model/PublicSubscriptionStatus.SourceOfStatusEnum} sourceOfStatus
 */
PublicSubscriptionStatus.prototype['sourceOfStatus'] = undefined;

/**
 * Whether the contact is subscribed.
 * @member {module:model/PublicSubscriptionStatus.StatusEnum} status
 */
PublicSubscriptionStatus.prototype['status'] = undefined;





/**
 * Allowed values for the <code>legalBasis</code> property.
 * @enum {String}
 * @readonly
 */
PublicSubscriptionStatus['LegalBasisEnum'] = {

    /**
     * value: "LEGITIMATE_INTEREST_PQL"
     * @const
     */
    "LEGITIMATE_INTEREST_PQL": "LEGITIMATE_INTEREST_PQL",

    /**
     * value: "LEGITIMATE_INTEREST_CLIENT"
     * @const
     */
    "LEGITIMATE_INTEREST_CLIENT": "LEGITIMATE_INTEREST_CLIENT",

    /**
     * value: "PERFORMANCE_OF_CONTRACT"
     * @const
     */
    "PERFORMANCE_OF_CONTRACT": "PERFORMANCE_OF_CONTRACT",

    /**
     * value: "CONSENT_WITH_NOTICE"
     * @const
     */
    "CONSENT_WITH_NOTICE": "CONSENT_WITH_NOTICE",

    /**
     * value: "NON_GDPR"
     * @const
     */
    "NON_GDPR": "NON_GDPR",

    /**
     * value: "PROCESS_AND_STORE"
     * @const
     */
    "PROCESS_AND_STORE": "PROCESS_AND_STORE",

    /**
     * value: "LEGITIMATE_INTEREST_OTHER"
     * @const
     */
    "LEGITIMATE_INTEREST_OTHER": "LEGITIMATE_INTEREST_OTHER"
};


/**
 * Allowed values for the <code>sourceOfStatus</code> property.
 * @enum {String}
 * @readonly
 */
PublicSubscriptionStatus['SourceOfStatusEnum'] = {

    /**
     * value: "PORTAL_WIDE_STATUS"
     * @const
     */
    "PORTAL_WIDE_STATUS": "PORTAL_WIDE_STATUS",

    /**
     * value: "BRAND_WIDE_STATUS"
     * @const
     */
    "BRAND_WIDE_STATUS": "BRAND_WIDE_STATUS",

    /**
     * value: "SUBSCRIPTION_STATUS"
     * @const
     */
    "SUBSCRIPTION_STATUS": "SUBSCRIPTION_STATUS"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
PublicSubscriptionStatus['StatusEnum'] = {

    /**
     * value: "SUBSCRIBED"
     * @const
     */
    "SUBSCRIBED": "SUBSCRIBED",

    /**
     * value: "NOT_SUBSCRIBED"
     * @const
     */
    "NOT_SUBSCRIBED": "NOT_SUBSCRIBED"
};



export default PublicSubscriptionStatus;

