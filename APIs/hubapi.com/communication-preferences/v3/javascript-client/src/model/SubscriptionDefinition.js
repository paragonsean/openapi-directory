/**
 * Subscriptions
 * Subscriptions allow contacts to control what forms of communications they receive. Contacts can decide whether they want to receive communication pertaining to a specific topic, brand, or an entire HubSpot account.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SubscriptionDefinition model module.
 * @module model/SubscriptionDefinition
 * @version v3
 */
class SubscriptionDefinition {
    /**
     * Constructs a new <code>SubscriptionDefinition</code>.
     * @alias module:model/SubscriptionDefinition
     * @param createdAt {Date} Time at which the definition was created.
     * @param description {String} A description of the subscription.
     * @param id {String} The ID of the definition.
     * @param isActive {Boolean} Whether the definition is active or archived.
     * @param isDefault {Boolean} A subscription definition created by HubSpot.
     * @param isInternal {Boolean} A default description that is used by some HubSpot tools and cannot be edited.
     * @param name {String} The name of the subscription.
     * @param updatedAt {Date} Time at which the definition was last updated.
     */
    constructor(createdAt, description, id, isActive, isDefault, isInternal, name, updatedAt) { 
        
        SubscriptionDefinition.initialize(this, createdAt, description, id, isActive, isDefault, isInternal, name, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, description, id, isActive, isDefault, isInternal, name, updatedAt) { 
        obj['createdAt'] = createdAt;
        obj['description'] = description;
        obj['id'] = id;
        obj['isActive'] = isActive;
        obj['isDefault'] = isDefault;
        obj['isInternal'] = isInternal;
        obj['name'] = name;
        obj['updatedAt'] = updatedAt;
    }

    /**
     * Constructs a <code>SubscriptionDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscriptionDefinition} obj Optional instance to populate.
     * @return {module:model/SubscriptionDefinition} The populated <code>SubscriptionDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscriptionDefinition();

            if (data.hasOwnProperty('communicationMethod')) {
                obj['communicationMethod'] = ApiClient.convertToType(data['communicationMethod'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isActive')) {
                obj['isActive'] = ApiClient.convertToType(data['isActive'], 'Boolean');
            }
            if (data.hasOwnProperty('isDefault')) {
                obj['isDefault'] = ApiClient.convertToType(data['isDefault'], 'Boolean');
            }
            if (data.hasOwnProperty('isInternal')) {
                obj['isInternal'] = ApiClient.convertToType(data['isInternal'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('purpose')) {
                obj['purpose'] = ApiClient.convertToType(data['purpose'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubscriptionDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubscriptionDefinition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SubscriptionDefinition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['communicationMethod'] && !(typeof data['communicationMethod'] === 'string' || data['communicationMethod'] instanceof String)) {
            throw new Error("Expected the field `communicationMethod` to be a primitive type in the JSON string but got " + data['communicationMethod']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['purpose'] && !(typeof data['purpose'] === 'string' || data['purpose'] instanceof String)) {
            throw new Error("Expected the field `purpose` to be a primitive type in the JSON string but got " + data['purpose']);
        }

        return true;
    }


}

SubscriptionDefinition.RequiredProperties = ["createdAt", "description", "id", "isActive", "isDefault", "isInternal", "name", "updatedAt"];

/**
 * The method or technology used to contact.
 * @member {String} communicationMethod
 */
SubscriptionDefinition.prototype['communicationMethod'] = undefined;

/**
 * Time at which the definition was created.
 * @member {Date} createdAt
 */
SubscriptionDefinition.prototype['createdAt'] = undefined;

/**
 * A description of the subscription.
 * @member {String} description
 */
SubscriptionDefinition.prototype['description'] = undefined;

/**
 * The ID of the definition.
 * @member {String} id
 */
SubscriptionDefinition.prototype['id'] = undefined;

/**
 * Whether the definition is active or archived.
 * @member {Boolean} isActive
 */
SubscriptionDefinition.prototype['isActive'] = undefined;

/**
 * A subscription definition created by HubSpot.
 * @member {Boolean} isDefault
 */
SubscriptionDefinition.prototype['isDefault'] = undefined;

/**
 * A default description that is used by some HubSpot tools and cannot be edited.
 * @member {Boolean} isInternal
 */
SubscriptionDefinition.prototype['isInternal'] = undefined;

/**
 * The name of the subscription.
 * @member {String} name
 */
SubscriptionDefinition.prototype['name'] = undefined;

/**
 * The purpose of this subscription or the department in your organization that uses it.
 * @member {String} purpose
 */
SubscriptionDefinition.prototype['purpose'] = undefined;

/**
 * Time at which the definition was last updated.
 * @member {Date} updatedAt
 */
SubscriptionDefinition.prototype['updatedAt'] = undefined;






export default SubscriptionDefinition;

