/**
 * Subscriptions
 * Subscriptions allow contacts to control what forms of communications they receive. Contacts can decide whether they want to receive communication pertaining to a specific topic, brand, or an entire HubSpot account.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PublicSubscriptionStatus from './PublicSubscriptionStatus';

/**
 * The PublicSubscriptionStatusesResponse model module.
 * @module model/PublicSubscriptionStatusesResponse
 * @version v3
 */
class PublicSubscriptionStatusesResponse {
    /**
     * Constructs a new <code>PublicSubscriptionStatusesResponse</code>.
     * A collection of subscription statuses for a contact.
     * @alias module:model/PublicSubscriptionStatusesResponse
     * @param recipient {String} Email address of the contact.
     * @param subscriptionStatuses {Array.<module:model/PublicSubscriptionStatus>} A list of all of the contact's subscriptions statuses.
     */
    constructor(recipient, subscriptionStatuses) { 
        
        PublicSubscriptionStatusesResponse.initialize(this, recipient, subscriptionStatuses);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, recipient, subscriptionStatuses) { 
        obj['recipient'] = recipient;
        obj['subscriptionStatuses'] = subscriptionStatuses;
    }

    /**
     * Constructs a <code>PublicSubscriptionStatusesResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PublicSubscriptionStatusesResponse} obj Optional instance to populate.
     * @return {module:model/PublicSubscriptionStatusesResponse} The populated <code>PublicSubscriptionStatusesResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PublicSubscriptionStatusesResponse();

            if (data.hasOwnProperty('recipient')) {
                obj['recipient'] = ApiClient.convertToType(data['recipient'], 'String');
            }
            if (data.hasOwnProperty('subscriptionStatuses')) {
                obj['subscriptionStatuses'] = ApiClient.convertToType(data['subscriptionStatuses'], [PublicSubscriptionStatus]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PublicSubscriptionStatusesResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PublicSubscriptionStatusesResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PublicSubscriptionStatusesResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['recipient'] && !(typeof data['recipient'] === 'string' || data['recipient'] instanceof String)) {
            throw new Error("Expected the field `recipient` to be a primitive type in the JSON string but got " + data['recipient']);
        }
        if (data['subscriptionStatuses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subscriptionStatuses'])) {
                throw new Error("Expected the field `subscriptionStatuses` to be an array in the JSON data but got " + data['subscriptionStatuses']);
            }
            // validate the optional field `subscriptionStatuses` (array)
            for (const item of data['subscriptionStatuses']) {
                PublicSubscriptionStatus.validateJSON(item);
            };
        }

        return true;
    }


}

PublicSubscriptionStatusesResponse.RequiredProperties = ["recipient", "subscriptionStatuses"];

/**
 * Email address of the contact.
 * @member {String} recipient
 */
PublicSubscriptionStatusesResponse.prototype['recipient'] = undefined;

/**
 * A list of all of the contact's subscriptions statuses.
 * @member {Array.<module:model/PublicSubscriptionStatus>} subscriptionStatuses
 */
PublicSubscriptionStatusesResponse.prototype['subscriptionStatuses'] = undefined;






export default PublicSubscriptionStatusesResponse;

