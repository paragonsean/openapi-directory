/**
 * Subscriptions
 * Subscriptions allow contacts to control what forms of communications they receive. Contacts can decide whether they want to receive communication pertaining to a specific topic, brand, or an entire HubSpot account.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublicSubscriptionStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublicSubscriptionStatus::OAIPublicSubscriptionStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublicSubscriptionStatus::OAIPublicSubscriptionStatus() {
    this->initializeModel();
}

OAIPublicSubscriptionStatus::~OAIPublicSubscriptionStatus() {}

void OAIPublicSubscriptionStatus::initializeModel() {

    m_brand_id_isSet = false;
    m_brand_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_legal_basis_isSet = false;
    m_legal_basis_isValid = false;

    m_legal_basis_explanation_isSet = false;
    m_legal_basis_explanation_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_preference_group_name_isSet = false;
    m_preference_group_name_isValid = false;

    m_source_of_status_isSet = false;
    m_source_of_status_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIPublicSubscriptionStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublicSubscriptionStatus::fromJsonObject(QJsonObject json) {

    m_brand_id_isValid = ::OpenAPI::fromJsonValue(m_brand_id, json[QString("brandId")]);
    m_brand_id_isSet = !json[QString("brandId")].isNull() && m_brand_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_legal_basis_isValid = ::OpenAPI::fromJsonValue(m_legal_basis, json[QString("legalBasis")]);
    m_legal_basis_isSet = !json[QString("legalBasis")].isNull() && m_legal_basis_isValid;

    m_legal_basis_explanation_isValid = ::OpenAPI::fromJsonValue(m_legal_basis_explanation, json[QString("legalBasisExplanation")]);
    m_legal_basis_explanation_isSet = !json[QString("legalBasisExplanation")].isNull() && m_legal_basis_explanation_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_preference_group_name_isValid = ::OpenAPI::fromJsonValue(m_preference_group_name, json[QString("preferenceGroupName")]);
    m_preference_group_name_isSet = !json[QString("preferenceGroupName")].isNull() && m_preference_group_name_isValid;

    m_source_of_status_isValid = ::OpenAPI::fromJsonValue(m_source_of_status, json[QString("sourceOfStatus")]);
    m_source_of_status_isSet = !json[QString("sourceOfStatus")].isNull() && m_source_of_status_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIPublicSubscriptionStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublicSubscriptionStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_brand_id_isSet) {
        obj.insert(QString("brandId"), ::OpenAPI::toJsonValue(m_brand_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_legal_basis_isSet) {
        obj.insert(QString("legalBasis"), ::OpenAPI::toJsonValue(m_legal_basis));
    }
    if (m_legal_basis_explanation_isSet) {
        obj.insert(QString("legalBasisExplanation"), ::OpenAPI::toJsonValue(m_legal_basis_explanation));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_preference_group_name_isSet) {
        obj.insert(QString("preferenceGroupName"), ::OpenAPI::toJsonValue(m_preference_group_name));
    }
    if (m_source_of_status_isSet) {
        obj.insert(QString("sourceOfStatus"), ::OpenAPI::toJsonValue(m_source_of_status));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint64 OAIPublicSubscriptionStatus::getBrandId() const {
    return m_brand_id;
}
void OAIPublicSubscriptionStatus::setBrandId(const qint64 &brand_id) {
    m_brand_id = brand_id;
    m_brand_id_isSet = true;
}

bool OAIPublicSubscriptionStatus::is_brand_id_Set() const{
    return m_brand_id_isSet;
}

bool OAIPublicSubscriptionStatus::is_brand_id_Valid() const{
    return m_brand_id_isValid;
}

QString OAIPublicSubscriptionStatus::getDescription() const {
    return m_description;
}
void OAIPublicSubscriptionStatus::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPublicSubscriptionStatus::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPublicSubscriptionStatus::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPublicSubscriptionStatus::getId() const {
    return m_id;
}
void OAIPublicSubscriptionStatus::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPublicSubscriptionStatus::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPublicSubscriptionStatus::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPublicSubscriptionStatus::getLegalBasis() const {
    return m_legal_basis;
}
void OAIPublicSubscriptionStatus::setLegalBasis(const QString &legal_basis) {
    m_legal_basis = legal_basis;
    m_legal_basis_isSet = true;
}

bool OAIPublicSubscriptionStatus::is_legal_basis_Set() const{
    return m_legal_basis_isSet;
}

bool OAIPublicSubscriptionStatus::is_legal_basis_Valid() const{
    return m_legal_basis_isValid;
}

QString OAIPublicSubscriptionStatus::getLegalBasisExplanation() const {
    return m_legal_basis_explanation;
}
void OAIPublicSubscriptionStatus::setLegalBasisExplanation(const QString &legal_basis_explanation) {
    m_legal_basis_explanation = legal_basis_explanation;
    m_legal_basis_explanation_isSet = true;
}

bool OAIPublicSubscriptionStatus::is_legal_basis_explanation_Set() const{
    return m_legal_basis_explanation_isSet;
}

bool OAIPublicSubscriptionStatus::is_legal_basis_explanation_Valid() const{
    return m_legal_basis_explanation_isValid;
}

QString OAIPublicSubscriptionStatus::getName() const {
    return m_name;
}
void OAIPublicSubscriptionStatus::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPublicSubscriptionStatus::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPublicSubscriptionStatus::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPublicSubscriptionStatus::getPreferenceGroupName() const {
    return m_preference_group_name;
}
void OAIPublicSubscriptionStatus::setPreferenceGroupName(const QString &preference_group_name) {
    m_preference_group_name = preference_group_name;
    m_preference_group_name_isSet = true;
}

bool OAIPublicSubscriptionStatus::is_preference_group_name_Set() const{
    return m_preference_group_name_isSet;
}

bool OAIPublicSubscriptionStatus::is_preference_group_name_Valid() const{
    return m_preference_group_name_isValid;
}

QString OAIPublicSubscriptionStatus::getSourceOfStatus() const {
    return m_source_of_status;
}
void OAIPublicSubscriptionStatus::setSourceOfStatus(const QString &source_of_status) {
    m_source_of_status = source_of_status;
    m_source_of_status_isSet = true;
}

bool OAIPublicSubscriptionStatus::is_source_of_status_Set() const{
    return m_source_of_status_isSet;
}

bool OAIPublicSubscriptionStatus::is_source_of_status_Valid() const{
    return m_source_of_status_isValid;
}

QString OAIPublicSubscriptionStatus::getStatus() const {
    return m_status;
}
void OAIPublicSubscriptionStatus::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPublicSubscriptionStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPublicSubscriptionStatus::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIPublicSubscriptionStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_brand_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_basis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_basis_explanation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preference_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_of_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublicSubscriptionStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_id_isValid && m_name_isValid && m_source_of_status_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
