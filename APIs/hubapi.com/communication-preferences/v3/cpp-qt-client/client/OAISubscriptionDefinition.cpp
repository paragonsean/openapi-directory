/**
 * Subscriptions
 * Subscriptions allow contacts to control what forms of communications they receive. Contacts can decide whether they want to receive communication pertaining to a specific topic, brand, or an entire HubSpot account.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionDefinition::OAISubscriptionDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionDefinition::OAISubscriptionDefinition() {
    this->initializeModel();
}

OAISubscriptionDefinition::~OAISubscriptionDefinition() {}

void OAISubscriptionDefinition::initializeModel() {

    m_communication_method_isSet = false;
    m_communication_method_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_is_internal_isSet = false;
    m_is_internal_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_purpose_isSet = false;
    m_purpose_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAISubscriptionDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionDefinition::fromJsonObject(QJsonObject json) {

    m_communication_method_isValid = ::OpenAPI::fromJsonValue(m_communication_method, json[QString("communicationMethod")]);
    m_communication_method_isSet = !json[QString("communicationMethod")].isNull() && m_communication_method_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_is_internal_isValid = ::OpenAPI::fromJsonValue(m_is_internal, json[QString("isInternal")]);
    m_is_internal_isSet = !json[QString("isInternal")].isNull() && m_is_internal_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_purpose_isValid = ::OpenAPI::fromJsonValue(m_purpose, json[QString("purpose")]);
    m_purpose_isSet = !json[QString("purpose")].isNull() && m_purpose_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAISubscriptionDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_communication_method_isSet) {
        obj.insert(QString("communicationMethod"), ::OpenAPI::toJsonValue(m_communication_method));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_is_internal_isSet) {
        obj.insert(QString("isInternal"), ::OpenAPI::toJsonValue(m_is_internal));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_purpose_isSet) {
        obj.insert(QString("purpose"), ::OpenAPI::toJsonValue(m_purpose));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAISubscriptionDefinition::getCommunicationMethod() const {
    return m_communication_method;
}
void OAISubscriptionDefinition::setCommunicationMethod(const QString &communication_method) {
    m_communication_method = communication_method;
    m_communication_method_isSet = true;
}

bool OAISubscriptionDefinition::is_communication_method_Set() const{
    return m_communication_method_isSet;
}

bool OAISubscriptionDefinition::is_communication_method_Valid() const{
    return m_communication_method_isValid;
}

QDateTime OAISubscriptionDefinition::getCreatedAt() const {
    return m_created_at;
}
void OAISubscriptionDefinition::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISubscriptionDefinition::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISubscriptionDefinition::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAISubscriptionDefinition::getDescription() const {
    return m_description;
}
void OAISubscriptionDefinition::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISubscriptionDefinition::is_description_Set() const{
    return m_description_isSet;
}

bool OAISubscriptionDefinition::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISubscriptionDefinition::getId() const {
    return m_id;
}
void OAISubscriptionDefinition::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubscriptionDefinition::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubscriptionDefinition::is_id_Valid() const{
    return m_id_isValid;
}

bool OAISubscriptionDefinition::isIsActive() const {
    return m_is_active;
}
void OAISubscriptionDefinition::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAISubscriptionDefinition::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAISubscriptionDefinition::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAISubscriptionDefinition::isIsDefault() const {
    return m_is_default;
}
void OAISubscriptionDefinition::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAISubscriptionDefinition::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAISubscriptionDefinition::is_is_default_Valid() const{
    return m_is_default_isValid;
}

bool OAISubscriptionDefinition::isIsInternal() const {
    return m_is_internal;
}
void OAISubscriptionDefinition::setIsInternal(const bool &is_internal) {
    m_is_internal = is_internal;
    m_is_internal_isSet = true;
}

bool OAISubscriptionDefinition::is_is_internal_Set() const{
    return m_is_internal_isSet;
}

bool OAISubscriptionDefinition::is_is_internal_Valid() const{
    return m_is_internal_isValid;
}

QString OAISubscriptionDefinition::getName() const {
    return m_name;
}
void OAISubscriptionDefinition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISubscriptionDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAISubscriptionDefinition::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISubscriptionDefinition::getPurpose() const {
    return m_purpose;
}
void OAISubscriptionDefinition::setPurpose(const QString &purpose) {
    m_purpose = purpose;
    m_purpose_isSet = true;
}

bool OAISubscriptionDefinition::is_purpose_Set() const{
    return m_purpose_isSet;
}

bool OAISubscriptionDefinition::is_purpose_Valid() const{
    return m_purpose_isValid;
}

QDateTime OAISubscriptionDefinition::getUpdatedAt() const {
    return m_updated_at;
}
void OAISubscriptionDefinition::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAISubscriptionDefinition::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAISubscriptionDefinition::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAISubscriptionDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_communication_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_internal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purpose_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_description_isValid && m_id_isValid && m_is_active_isValid && m_is_default_isValid && m_is_internal_isValid && m_name_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
