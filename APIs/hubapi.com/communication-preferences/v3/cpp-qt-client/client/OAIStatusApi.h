/**
 * Subscriptions
 * Subscriptions allow contacts to control what forms of communications they receive. Contacts can decide whether they want to receive communication pertaining to a specific topic, brand, or an entire HubSpot account.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStatusApi_H
#define OAI_OAIStatusApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIPublicSubscriptionStatus.h"
#include "OAIPublicSubscriptionStatusesResponse.h"
#include "OAIPublicUpdateSubscriptionStatusRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStatusApi : public QObject {
    Q_OBJECT

public:
    OAIStatusApi(const int timeOut = 0);
    ~OAIStatusApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  email_address QString [required]
    */
    virtual void get_communicationPreferences_v3_status_email_emailAddressGetEmailStatus(const QString &email_address);

    /**
    * @param[in]  oai_public_update_subscription_status_request OAIPublicUpdateSubscriptionStatusRequest [required]
    */
    virtual void post_communicationPreferences_v3_subscribeSubscribe(const OAIPublicUpdateSubscriptionStatusRequest &oai_public_update_subscription_status_request);

    /**
    * @param[in]  oai_public_update_subscription_status_request OAIPublicUpdateSubscriptionStatusRequest [required]
    */
    virtual void post_communicationPreferences_v3_unsubscribeUnsubscribe(const OAIPublicUpdateSubscriptionStatusRequest &oai_public_update_subscription_status_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void get_communicationPreferences_v3_status_email_emailAddressGetEmailStatusCallback(OAIHttpRequestWorker *worker);
    void post_communicationPreferences_v3_subscribeSubscribeCallback(OAIHttpRequestWorker *worker);
    void post_communicationPreferences_v3_unsubscribeUnsubscribeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void get_communicationPreferences_v3_status_email_emailAddressGetEmailStatusSignal(OAIPublicSubscriptionStatusesResponse summary);
    void post_communicationPreferences_v3_subscribeSubscribeSignal(OAIPublicSubscriptionStatus summary);
    void post_communicationPreferences_v3_unsubscribeUnsubscribeSignal(OAIPublicSubscriptionStatus summary);


    void get_communicationPreferences_v3_status_email_emailAddressGetEmailStatusSignalFull(OAIHttpRequestWorker *worker, OAIPublicSubscriptionStatusesResponse summary);
    void post_communicationPreferences_v3_subscribeSubscribeSignalFull(OAIHttpRequestWorker *worker, OAIPublicSubscriptionStatus summary);
    void post_communicationPreferences_v3_unsubscribeUnsubscribeSignalFull(OAIHttpRequestWorker *worker, OAIPublicSubscriptionStatus summary);

    Q_DECL_DEPRECATED_X("Use get_communicationPreferences_v3_status_email_emailAddressGetEmailStatusSignalError() instead")
    void get_communicationPreferences_v3_status_email_emailAddressGetEmailStatusSignalE(OAIPublicSubscriptionStatusesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_communicationPreferences_v3_status_email_emailAddressGetEmailStatusSignalError(OAIPublicSubscriptionStatusesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use post_communicationPreferences_v3_subscribeSubscribeSignalError() instead")
    void post_communicationPreferences_v3_subscribeSubscribeSignalE(OAIPublicSubscriptionStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void post_communicationPreferences_v3_subscribeSubscribeSignalError(OAIPublicSubscriptionStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use post_communicationPreferences_v3_unsubscribeUnsubscribeSignalError() instead")
    void post_communicationPreferences_v3_unsubscribeUnsubscribeSignalE(OAIPublicSubscriptionStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void post_communicationPreferences_v3_unsubscribeUnsubscribeSignalError(OAIPublicSubscriptionStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use get_communicationPreferences_v3_status_email_emailAddressGetEmailStatusSignalErrorFull() instead")
    void get_communicationPreferences_v3_status_email_emailAddressGetEmailStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_communicationPreferences_v3_status_email_emailAddressGetEmailStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use post_communicationPreferences_v3_subscribeSubscribeSignalErrorFull() instead")
    void post_communicationPreferences_v3_subscribeSubscribeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void post_communicationPreferences_v3_subscribeSubscribeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use post_communicationPreferences_v3_unsubscribeUnsubscribeSignalErrorFull() instead")
    void post_communicationPreferences_v3_unsubscribeUnsubscribeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void post_communicationPreferences_v3_unsubscribeUnsubscribeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
