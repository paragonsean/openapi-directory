/**
 * Subscriptions
 * Subscriptions allow contacts to control what forms of communications they receive. Contacts can decide whether they want to receive communication pertaining to a specific topic, brand, or an entire HubSpot account.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublicUpdateSubscriptionStatusRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublicUpdateSubscriptionStatusRequest::OAIPublicUpdateSubscriptionStatusRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublicUpdateSubscriptionStatusRequest::OAIPublicUpdateSubscriptionStatusRequest() {
    this->initializeModel();
}

OAIPublicUpdateSubscriptionStatusRequest::~OAIPublicUpdateSubscriptionStatusRequest() {}

void OAIPublicUpdateSubscriptionStatusRequest::initializeModel() {

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_legal_basis_isSet = false;
    m_legal_basis_isValid = false;

    m_legal_basis_explanation_isSet = false;
    m_legal_basis_explanation_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;
}

void OAIPublicUpdateSubscriptionStatusRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublicUpdateSubscriptionStatusRequest::fromJsonObject(QJsonObject json) {

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("emailAddress")]);
    m_email_address_isSet = !json[QString("emailAddress")].isNull() && m_email_address_isValid;

    m_legal_basis_isValid = ::OpenAPI::fromJsonValue(m_legal_basis, json[QString("legalBasis")]);
    m_legal_basis_isSet = !json[QString("legalBasis")].isNull() && m_legal_basis_isValid;

    m_legal_basis_explanation_isValid = ::OpenAPI::fromJsonValue(m_legal_basis_explanation, json[QString("legalBasisExplanation")]);
    m_legal_basis_explanation_isSet = !json[QString("legalBasisExplanation")].isNull() && m_legal_basis_explanation_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;
}

QString OAIPublicUpdateSubscriptionStatusRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublicUpdateSubscriptionStatusRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_email_address_isSet) {
        obj.insert(QString("emailAddress"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_legal_basis_isSet) {
        obj.insert(QString("legalBasis"), ::OpenAPI::toJsonValue(m_legal_basis));
    }
    if (m_legal_basis_explanation_isSet) {
        obj.insert(QString("legalBasisExplanation"), ::OpenAPI::toJsonValue(m_legal_basis_explanation));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    return obj;
}

QString OAIPublicUpdateSubscriptionStatusRequest::getEmailAddress() const {
    return m_email_address;
}
void OAIPublicUpdateSubscriptionStatusRequest::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAIPublicUpdateSubscriptionStatusRequest::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAIPublicUpdateSubscriptionStatusRequest::is_email_address_Valid() const{
    return m_email_address_isValid;
}

QString OAIPublicUpdateSubscriptionStatusRequest::getLegalBasis() const {
    return m_legal_basis;
}
void OAIPublicUpdateSubscriptionStatusRequest::setLegalBasis(const QString &legal_basis) {
    m_legal_basis = legal_basis;
    m_legal_basis_isSet = true;
}

bool OAIPublicUpdateSubscriptionStatusRequest::is_legal_basis_Set() const{
    return m_legal_basis_isSet;
}

bool OAIPublicUpdateSubscriptionStatusRequest::is_legal_basis_Valid() const{
    return m_legal_basis_isValid;
}

QString OAIPublicUpdateSubscriptionStatusRequest::getLegalBasisExplanation() const {
    return m_legal_basis_explanation;
}
void OAIPublicUpdateSubscriptionStatusRequest::setLegalBasisExplanation(const QString &legal_basis_explanation) {
    m_legal_basis_explanation = legal_basis_explanation;
    m_legal_basis_explanation_isSet = true;
}

bool OAIPublicUpdateSubscriptionStatusRequest::is_legal_basis_explanation_Set() const{
    return m_legal_basis_explanation_isSet;
}

bool OAIPublicUpdateSubscriptionStatusRequest::is_legal_basis_explanation_Valid() const{
    return m_legal_basis_explanation_isValid;
}

QString OAIPublicUpdateSubscriptionStatusRequest::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIPublicUpdateSubscriptionStatusRequest::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIPublicUpdateSubscriptionStatusRequest::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIPublicUpdateSubscriptionStatusRequest::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

bool OAIPublicUpdateSubscriptionStatusRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_basis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_basis_explanation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublicUpdateSubscriptionStatusRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_address_isValid && m_subscription_id_isValid && true;
}

} // namespace OpenAPI
