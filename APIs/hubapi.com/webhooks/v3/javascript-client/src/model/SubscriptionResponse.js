/**
 * Webhooks Webhooks
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SubscriptionResponse model module.
 * @module model/SubscriptionResponse
 * @version v3
 */
class SubscriptionResponse {
    /**
     * Constructs a new <code>SubscriptionResponse</code>.
     * Complete details for an event subscription.
     * @alias module:model/SubscriptionResponse
     * @param active {Boolean} Determines if the subscription is active or paused.
     * @param createdAt {Date} When this subscription was created. Formatted as milliseconds from the [Unix epoch](#).
     * @param eventType {module:model/SubscriptionResponse.EventTypeEnum} Type of event to listen for. Can be one of `create`, `delete`, `deletedForPrivacy`, or `propertyChange`.
     * @param id {String} The unique ID of the subscription.
     */
    constructor(active, createdAt, eventType, id) { 
        
        SubscriptionResponse.initialize(this, active, createdAt, eventType, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, active, createdAt, eventType, id) { 
        obj['active'] = active;
        obj['createdAt'] = createdAt;
        obj['eventType'] = eventType;
        obj['id'] = id;
    }

    /**
     * Constructs a <code>SubscriptionResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscriptionResponse} obj Optional instance to populate.
     * @return {module:model/SubscriptionResponse} The populated <code>SubscriptionResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscriptionResponse();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('eventType')) {
                obj['eventType'] = ApiClient.convertToType(data['eventType'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('propertyName')) {
                obj['propertyName'] = ApiClient.convertToType(data['propertyName'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubscriptionResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubscriptionResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SubscriptionResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['eventType'] && !(typeof data['eventType'] === 'string' || data['eventType'] instanceof String)) {
            throw new Error("Expected the field `eventType` to be a primitive type in the JSON string but got " + data['eventType']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['propertyName'] && !(typeof data['propertyName'] === 'string' || data['propertyName'] instanceof String)) {
            throw new Error("Expected the field `propertyName` to be a primitive type in the JSON string but got " + data['propertyName']);
        }

        return true;
    }


}

SubscriptionResponse.RequiredProperties = ["active", "createdAt", "eventType", "id"];

/**
 * Determines if the subscription is active or paused.
 * @member {Boolean} active
 */
SubscriptionResponse.prototype['active'] = undefined;

/**
 * When this subscription was created. Formatted as milliseconds from the [Unix epoch](#).
 * @member {Date} createdAt
 */
SubscriptionResponse.prototype['createdAt'] = undefined;

/**
 * Type of event to listen for. Can be one of `create`, `delete`, `deletedForPrivacy`, or `propertyChange`.
 * @member {module:model/SubscriptionResponse.EventTypeEnum} eventType
 */
SubscriptionResponse.prototype['eventType'] = undefined;

/**
 * The unique ID of the subscription.
 * @member {String} id
 */
SubscriptionResponse.prototype['id'] = undefined;

/**
 * The internal name of the property being monitored for changes. Only applies when `eventType` is `propertyChange`.
 * @member {String} propertyName
 */
SubscriptionResponse.prototype['propertyName'] = undefined;

/**
 * When this subscription was last updated. Formatted as milliseconds from the [Unix epoch](#).
 * @member {Date} updatedAt
 */
SubscriptionResponse.prototype['updatedAt'] = undefined;





/**
 * Allowed values for the <code>eventType</code> property.
 * @enum {String}
 * @readonly
 */
SubscriptionResponse['EventTypeEnum'] = {

    /**
     * value: "contact.propertyChange"
     * @const
     */
    "contact.propertyChange": "contact.propertyChange",

    /**
     * value: "company.propertyChange"
     * @const
     */
    "company.propertyChange": "company.propertyChange",

    /**
     * value: "deal.propertyChange"
     * @const
     */
    "deal.propertyChange": "deal.propertyChange",

    /**
     * value: "ticket.propertyChange"
     * @const
     */
    "ticket.propertyChange": "ticket.propertyChange",

    /**
     * value: "product.propertyChange"
     * @const
     */
    "product.propertyChange": "product.propertyChange",

    /**
     * value: "line_item.propertyChange"
     * @const
     */
    "line_item.propertyChange": "line_item.propertyChange",

    /**
     * value: "contact.creation"
     * @const
     */
    "contact.creation": "contact.creation",

    /**
     * value: "contact.deletion"
     * @const
     */
    "contact.deletion": "contact.deletion",

    /**
     * value: "contact.privacyDeletion"
     * @const
     */
    "contact.privacyDeletion": "contact.privacyDeletion",

    /**
     * value: "company.creation"
     * @const
     */
    "company.creation": "company.creation",

    /**
     * value: "company.deletion"
     * @const
     */
    "company.deletion": "company.deletion",

    /**
     * value: "deal.creation"
     * @const
     */
    "deal.creation": "deal.creation",

    /**
     * value: "deal.deletion"
     * @const
     */
    "deal.deletion": "deal.deletion",

    /**
     * value: "ticket.creation"
     * @const
     */
    "ticket.creation": "ticket.creation",

    /**
     * value: "ticket.deletion"
     * @const
     */
    "ticket.deletion": "ticket.deletion",

    /**
     * value: "product.creation"
     * @const
     */
    "product.creation": "product.creation",

    /**
     * value: "product.deletion"
     * @const
     */
    "product.deletion": "product.deletion",

    /**
     * value: "line_item.creation"
     * @const
     */
    "line_item.creation": "line_item.creation",

    /**
     * value: "line_item.deletion"
     * @const
     */
    "line_item.deletion": "line_item.deletion",

    /**
     * value: "conversation.creation"
     * @const
     */
    "conversation.creation": "conversation.creation",

    /**
     * value: "conversation.deletion"
     * @const
     */
    "conversation.deletion": "conversation.deletion",

    /**
     * value: "conversation.newMessage"
     * @const
     */
    "conversation.newMessage": "conversation.newMessage",

    /**
     * value: "conversation.privacyDeletion"
     * @const
     */
    "conversation.privacyDeletion": "conversation.privacyDeletion",

    /**
     * value: "conversation.propertyChange"
     * @const
     */
    "conversation.propertyChange": "conversation.propertyChange",

    /**
     * value: "contact.merge"
     * @const
     */
    "contact.merge": "contact.merge",

    /**
     * value: "company.merge"
     * @const
     */
    "company.merge": "company.merge",

    /**
     * value: "deal.merge"
     * @const
     */
    "deal.merge": "deal.merge",

    /**
     * value: "ticket.merge"
     * @const
     */
    "ticket.merge": "ticket.merge",

    /**
     * value: "product.merge"
     * @const
     */
    "product.merge": "product.merge",

    /**
     * value: "line_item.merge"
     * @const
     */
    "line_item.merge": "line_item.merge",

    /**
     * value: "contact.restore"
     * @const
     */
    "contact.restore": "contact.restore",

    /**
     * value: "company.restore"
     * @const
     */
    "company.restore": "company.restore",

    /**
     * value: "deal.restore"
     * @const
     */
    "deal.restore": "deal.restore",

    /**
     * value: "ticket.restore"
     * @const
     */
    "ticket.restore": "ticket.restore",

    /**
     * value: "product.restore"
     * @const
     */
    "product.restore": "product.restore",

    /**
     * value: "line_item.restore"
     * @const
     */
    "line_item.restore": "line_item.restore",

    /**
     * value: "contact.associationChange"
     * @const
     */
    "contact.associationChange": "contact.associationChange",

    /**
     * value: "company.associationChange"
     * @const
     */
    "company.associationChange": "company.associationChange",

    /**
     * value: "deal.associationChange"
     * @const
     */
    "deal.associationChange": "deal.associationChange",

    /**
     * value: "ticket.associationChange"
     * @const
     */
    "ticket.associationChange": "ticket.associationChange",

    /**
     * value: "line_item.associationChange"
     * @const
     */
    "line_item.associationChange": "line_item.associationChange"
};



export default SubscriptionResponse;

