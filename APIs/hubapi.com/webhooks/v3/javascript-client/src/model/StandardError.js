/**
 * Webhooks Webhooks
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorDetail from './ErrorDetail';

/**
 * The StandardError model module.
 * @module model/StandardError
 * @version v3
 */
class StandardError {
    /**
     * Constructs a new <code>StandardError</code>.
     * @alias module:model/StandardError
     * @param category {String} 
     * @param context {Object.<String, Array.<String>>} 
     * @param errors {Array.<module:model/ErrorDetail>} 
     * @param links {Object.<String, String>} 
     * @param message {String} 
     * @param status {String} 
     */
    constructor(category, context, errors, links, message, status) { 
        
        StandardError.initialize(this, category, context, errors, links, message, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, category, context, errors, links, message, status) { 
        obj['category'] = category;
        obj['context'] = context;
        obj['errors'] = errors;
        obj['links'] = links;
        obj['message'] = message;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>StandardError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StandardError} obj Optional instance to populate.
     * @return {module:model/StandardError} The populated <code>StandardError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StandardError();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('context')) {
                obj['context'] = ApiClient.convertToType(data['context'], {'String': ['String']});
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [ErrorDetail]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], {'String': 'String'});
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('subCategory')) {
                obj['subCategory'] = ApiClient.convertToType(data['subCategory'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StandardError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StandardError</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StandardError.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                ErrorDetail.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

StandardError.RequiredProperties = ["category", "context", "errors", "links", "message", "status"];

/**
 * @member {String} category
 */
StandardError.prototype['category'] = undefined;

/**
 * @member {Object.<String, Array.<String>>} context
 */
StandardError.prototype['context'] = undefined;

/**
 * @member {Array.<module:model/ErrorDetail>} errors
 */
StandardError.prototype['errors'] = undefined;

/**
 * @member {String} id
 */
StandardError.prototype['id'] = undefined;

/**
 * @member {Object.<String, String>} links
 */
StandardError.prototype['links'] = undefined;

/**
 * @member {String} message
 */
StandardError.prototype['message'] = undefined;

/**
 * @member {String} status
 */
StandardError.prototype['status'] = undefined;

/**
 * @member {Object} subCategory
 */
StandardError.prototype['subCategory'] = undefined;






export default StandardError;

