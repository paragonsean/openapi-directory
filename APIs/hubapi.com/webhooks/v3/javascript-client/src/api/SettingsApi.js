/**
 * Webhooks Webhooks
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import SettingsChangeRequest from '../model/SettingsChangeRequest';
import SettingsResponse from '../model/SettingsResponse';

/**
* Settings service.
* @module api/SettingsApi
* @version v3
*/
export default class SettingsApi {

    /**
    * Constructs a new SettingsApi. 
    * @alias module:api/SettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteWebhooksV3AppIdSettingsClear operation.
     * @callback module:api/SettingsApi~deleteWebhooksV3AppIdSettingsClearCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} appId 
     * @param {module:api/SettingsApi~deleteWebhooksV3AppIdSettingsClearCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWebhooksV3AppIdSettingsClear(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteWebhooksV3AppIdSettingsClear");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/webhooks/v3/{appId}/settings', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWebhooksV3AppIdSettingsGetAll operation.
     * @callback module:api/SettingsApi~getWebhooksV3AppIdSettingsGetAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} appId 
     * @param {module:api/SettingsApi~getWebhooksV3AppIdSettingsGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SettingsResponse}
     */
    getWebhooksV3AppIdSettingsGetAll(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getWebhooksV3AppIdSettingsGetAll");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = SettingsResponse;
      return this.apiClient.callApi(
        '/webhooks/v3/{appId}/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putWebhooksV3AppIdSettingsConfigure operation.
     * @callback module:api/SettingsApi~putWebhooksV3AppIdSettingsConfigureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} appId 
     * @param {module:model/SettingsChangeRequest} settingsChangeRequest 
     * @param {module:api/SettingsApi~putWebhooksV3AppIdSettingsConfigureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SettingsResponse}
     */
    putWebhooksV3AppIdSettingsConfigure(appId, settingsChangeRequest, callback) {
      let postBody = settingsChangeRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putWebhooksV3AppIdSettingsConfigure");
      }
      // verify the required parameter 'settingsChangeRequest' is set
      if (settingsChangeRequest === undefined || settingsChangeRequest === null) {
        throw new Error("Missing the required parameter 'settingsChangeRequest' when calling putWebhooksV3AppIdSettingsConfigure");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = SettingsResponse;
      return this.apiClient.callApi(
        '/webhooks/v3/{appId}/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
