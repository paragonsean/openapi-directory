/**
 * Webhooks Webhooks
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchInputSubscriptionBatchUpdateRequest from '../model/BatchInputSubscriptionBatchUpdateRequest';
import BatchResponseSubscriptionResponse from '../model/BatchResponseSubscriptionResponse';
import BatchResponseSubscriptionResponseWithErrors from '../model/BatchResponseSubscriptionResponseWithErrors';
import Error from '../model/Error';
import SubscriptionCreateRequest from '../model/SubscriptionCreateRequest';
import SubscriptionListResponse from '../model/SubscriptionListResponse';
import SubscriptionPatchRequest from '../model/SubscriptionPatchRequest';
import SubscriptionResponse from '../model/SubscriptionResponse';

/**
* Subscriptions service.
* @module api/SubscriptionsApi
* @version v3
*/
export default class SubscriptionsApi {

    /**
    * Constructs a new SubscriptionsApi. 
    * @alias module:api/SubscriptionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchive operation.
     * @callback module:api/SubscriptionsApi~deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} subscriptionId 
     * @param {Number} appId 
     * @param {module:api/SubscriptionsApi~deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchive(subscriptionId, appId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchive");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchive");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/webhooks/v3/{appId}/subscriptions/{subscriptionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWebhooksV3AppIdSubscriptionsGetAll operation.
     * @callback module:api/SubscriptionsApi~getWebhooksV3AppIdSubscriptionsGetAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} appId 
     * @param {module:api/SubscriptionsApi~getWebhooksV3AppIdSubscriptionsGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionListResponse}
     */
    getWebhooksV3AppIdSubscriptionsGetAll(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getWebhooksV3AppIdSubscriptionsGetAll");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = SubscriptionListResponse;
      return this.apiClient.callApi(
        '/webhooks/v3/{appId}/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWebhooksV3AppIdSubscriptionsSubscriptionIdGetById operation.
     * @callback module:api/SubscriptionsApi~getWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} subscriptionId 
     * @param {Number} appId 
     * @param {module:api/SubscriptionsApi~getWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionResponse}
     */
    getWebhooksV3AppIdSubscriptionsSubscriptionIdGetById(subscriptionId, appId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling getWebhooksV3AppIdSubscriptionsSubscriptionIdGetById");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getWebhooksV3AppIdSubscriptionsSubscriptionIdGetById");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = SubscriptionResponse;
      return this.apiClient.callApi(
        '/webhooks/v3/{appId}/subscriptions/{subscriptionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdate operation.
     * @callback module:api/SubscriptionsApi~patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} subscriptionId 
     * @param {Number} appId 
     * @param {module:model/SubscriptionPatchRequest} subscriptionPatchRequest 
     * @param {module:api/SubscriptionsApi~patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionResponse}
     */
    patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdate(subscriptionId, appId, subscriptionPatchRequest, callback) {
      let postBody = subscriptionPatchRequest;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdate");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdate");
      }
      // verify the required parameter 'subscriptionPatchRequest' is set
      if (subscriptionPatchRequest === undefined || subscriptionPatchRequest === null) {
        throw new Error("Missing the required parameter 'subscriptionPatchRequest' when calling patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = SubscriptionResponse;
      return this.apiClient.callApi(
        '/webhooks/v3/{appId}/subscriptions/{subscriptionId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatch operation.
     * @callback module:api/SubscriptionsApi~postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchResponseSubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} appId 
     * @param {module:model/BatchInputSubscriptionBatchUpdateRequest} batchInputSubscriptionBatchUpdateRequest 
     * @param {module:api/SubscriptionsApi~postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchResponseSubscriptionResponse}
     */
    postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatch(appId, batchInputSubscriptionBatchUpdateRequest, callback) {
      let postBody = batchInputSubscriptionBatchUpdateRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatch");
      }
      // verify the required parameter 'batchInputSubscriptionBatchUpdateRequest' is set
      if (batchInputSubscriptionBatchUpdateRequest === undefined || batchInputSubscriptionBatchUpdateRequest === null) {
        throw new Error("Missing the required parameter 'batchInputSubscriptionBatchUpdateRequest' when calling postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatch");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = BatchResponseSubscriptionResponse;
      return this.apiClient.callApi(
        '/webhooks/v3/{appId}/subscriptions/batch/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postWebhooksV3AppIdSubscriptionsCreate operation.
     * @callback module:api/SubscriptionsApi~postWebhooksV3AppIdSubscriptionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} appId 
     * @param {module:model/SubscriptionCreateRequest} subscriptionCreateRequest 
     * @param {module:api/SubscriptionsApi~postWebhooksV3AppIdSubscriptionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionResponse}
     */
    postWebhooksV3AppIdSubscriptionsCreate(appId, subscriptionCreateRequest, callback) {
      let postBody = subscriptionCreateRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling postWebhooksV3AppIdSubscriptionsCreate");
      }
      // verify the required parameter 'subscriptionCreateRequest' is set
      if (subscriptionCreateRequest === undefined || subscriptionCreateRequest === null) {
        throw new Error("Missing the required parameter 'subscriptionCreateRequest' when calling postWebhooksV3AppIdSubscriptionsCreate");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = SubscriptionResponse;
      return this.apiClient.callApi(
        '/webhooks/v3/{appId}/subscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
