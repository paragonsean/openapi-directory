/**
 * Webhooks Webhooks
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WebhooksWebhooks);
  }
}(this, function(expect, WebhooksWebhooks) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new WebhooksWebhooks.SubscriptionsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SubscriptionsApi', function() {
    describe('deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchive', function() {
      it('should call deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchive successfully', function(done) {
        //uncomment below and update the code to test deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchive
        //instance.deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchive(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWebhooksV3AppIdSubscriptionsGetAll', function() {
      it('should call getWebhooksV3AppIdSubscriptionsGetAll successfully', function(done) {
        //uncomment below and update the code to test getWebhooksV3AppIdSubscriptionsGetAll
        //instance.getWebhooksV3AppIdSubscriptionsGetAll(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWebhooksV3AppIdSubscriptionsSubscriptionIdGetById', function() {
      it('should call getWebhooksV3AppIdSubscriptionsSubscriptionIdGetById successfully', function(done) {
        //uncomment below and update the code to test getWebhooksV3AppIdSubscriptionsSubscriptionIdGetById
        //instance.getWebhooksV3AppIdSubscriptionsSubscriptionIdGetById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdate', function() {
      it('should call patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdate successfully', function(done) {
        //uncomment below and update the code to test patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdate
        //instance.patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatch', function() {
      it('should call postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatch successfully', function(done) {
        //uncomment below and update the code to test postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatch
        //instance.postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postWebhooksV3AppIdSubscriptionsCreate', function() {
      it('should call postWebhooksV3AppIdSubscriptionsCreate successfully', function(done) {
        //uncomment below and update the code to test postWebhooksV3AppIdSubscriptionsCreate
        //instance.postWebhooksV3AppIdSubscriptionsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
