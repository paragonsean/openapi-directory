/*
 * Webhooks Webhooks
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BatchInputSubscriptionBatchUpdateRequest;
import org.openapitools.client.model.BatchResponseSubscriptionResponse;
import org.openapitools.client.model.BatchResponseSubscriptionResponseWithErrors;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.SubscriptionCreateRequest;
import org.openapitools.client.model.SubscriptionListResponse;
import org.openapitools.client.model.SubscriptionPatchRequest;
import org.openapitools.client.model.SubscriptionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SubscriptionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SubscriptionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SubscriptionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchive
     * @param subscriptionId  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveCall(Integer subscriptionId, Integer appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/v3/{appId}/subscriptions/{subscriptionId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developer_hapikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveValidateBeforeCall(Integer subscriptionId, Integer appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchive(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchive(Async)");
        }

        return deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveCall(subscriptionId, appId, _callback);

    }

    /**
     * 
     * 
     * @param subscriptionId  (required)
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchive(Integer subscriptionId, Integer appId) throws ApiException {
        deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveWithHttpInfo(subscriptionId, appId);
    }

    /**
     * 
     * 
     * @param subscriptionId  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveWithHttpInfo(Integer subscriptionId, Integer appId) throws ApiException {
        okhttp3.Call localVarCall = deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveValidateBeforeCall(subscriptionId, appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param subscriptionId  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveAsync(Integer subscriptionId, Integer appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveValidateBeforeCall(subscriptionId, appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWebhooksV3AppIdSubscriptionsGetAll
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebhooksV3AppIdSubscriptionsGetAllCall(Integer appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/v3/{appId}/subscriptions"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developer_hapikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebhooksV3AppIdSubscriptionsGetAllValidateBeforeCall(Integer appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getWebhooksV3AppIdSubscriptionsGetAll(Async)");
        }

        return getWebhooksV3AppIdSubscriptionsGetAllCall(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return SubscriptionListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionListResponse getWebhooksV3AppIdSubscriptionsGetAll(Integer appId) throws ApiException {
        ApiResponse<SubscriptionListResponse> localVarResp = getWebhooksV3AppIdSubscriptionsGetAllWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;SubscriptionListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionListResponse> getWebhooksV3AppIdSubscriptionsGetAllWithHttpInfo(Integer appId) throws ApiException {
        okhttp3.Call localVarCall = getWebhooksV3AppIdSubscriptionsGetAllValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<SubscriptionListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebhooksV3AppIdSubscriptionsGetAllAsync(Integer appId, final ApiCallback<SubscriptionListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebhooksV3AppIdSubscriptionsGetAllValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWebhooksV3AppIdSubscriptionsSubscriptionIdGetById
     * @param subscriptionId  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdCall(Integer subscriptionId, Integer appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/v3/{appId}/subscriptions/{subscriptionId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developer_hapikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdValidateBeforeCall(Integer subscriptionId, Integer appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling getWebhooksV3AppIdSubscriptionsSubscriptionIdGetById(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getWebhooksV3AppIdSubscriptionsSubscriptionIdGetById(Async)");
        }

        return getWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdCall(subscriptionId, appId, _callback);

    }

    /**
     * 
     * 
     * @param subscriptionId  (required)
     * @param appId  (required)
     * @return SubscriptionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionResponse getWebhooksV3AppIdSubscriptionsSubscriptionIdGetById(Integer subscriptionId, Integer appId) throws ApiException {
        ApiResponse<SubscriptionResponse> localVarResp = getWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdWithHttpInfo(subscriptionId, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param subscriptionId  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;SubscriptionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionResponse> getWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdWithHttpInfo(Integer subscriptionId, Integer appId) throws ApiException {
        okhttp3.Call localVarCall = getWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdValidateBeforeCall(subscriptionId, appId, null);
        Type localVarReturnType = new TypeToken<SubscriptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param subscriptionId  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdAsync(Integer subscriptionId, Integer appId, final ApiCallback<SubscriptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdValidateBeforeCall(subscriptionId, appId, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdate
     * @param subscriptionId  (required)
     * @param appId  (required)
     * @param subscriptionPatchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateCall(Integer subscriptionId, Integer appId, SubscriptionPatchRequest subscriptionPatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionPatchRequest;

        // create path and map variables
        String localVarPath = "/webhooks/v3/{appId}/subscriptions/{subscriptionId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developer_hapikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateValidateBeforeCall(Integer subscriptionId, Integer appId, SubscriptionPatchRequest subscriptionPatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdate(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdate(Async)");
        }

        // verify the required parameter 'subscriptionPatchRequest' is set
        if (subscriptionPatchRequest == null) {
            throw new ApiException("Missing the required parameter 'subscriptionPatchRequest' when calling patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdate(Async)");
        }

        return patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateCall(subscriptionId, appId, subscriptionPatchRequest, _callback);

    }

    /**
     * 
     * 
     * @param subscriptionId  (required)
     * @param appId  (required)
     * @param subscriptionPatchRequest  (required)
     * @return SubscriptionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionResponse patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdate(Integer subscriptionId, Integer appId, SubscriptionPatchRequest subscriptionPatchRequest) throws ApiException {
        ApiResponse<SubscriptionResponse> localVarResp = patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateWithHttpInfo(subscriptionId, appId, subscriptionPatchRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param subscriptionId  (required)
     * @param appId  (required)
     * @param subscriptionPatchRequest  (required)
     * @return ApiResponse&lt;SubscriptionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionResponse> patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateWithHttpInfo(Integer subscriptionId, Integer appId, SubscriptionPatchRequest subscriptionPatchRequest) throws ApiException {
        okhttp3.Call localVarCall = patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateValidateBeforeCall(subscriptionId, appId, subscriptionPatchRequest, null);
        Type localVarReturnType = new TypeToken<SubscriptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param subscriptionId  (required)
     * @param appId  (required)
     * @param subscriptionPatchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateAsync(Integer subscriptionId, Integer appId, SubscriptionPatchRequest subscriptionPatchRequest, final ApiCallback<SubscriptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateValidateBeforeCall(subscriptionId, appId, subscriptionPatchRequest, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatch
     * @param appId  (required)
     * @param batchInputSubscriptionBatchUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> multiple statuses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchCall(Integer appId, BatchInputSubscriptionBatchUpdateRequest batchInputSubscriptionBatchUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchInputSubscriptionBatchUpdateRequest;

        // create path and map variables
        String localVarPath = "/webhooks/v3/{appId}/subscriptions/batch/update"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developer_hapikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchValidateBeforeCall(Integer appId, BatchInputSubscriptionBatchUpdateRequest batchInputSubscriptionBatchUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatch(Async)");
        }

        // verify the required parameter 'batchInputSubscriptionBatchUpdateRequest' is set
        if (batchInputSubscriptionBatchUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'batchInputSubscriptionBatchUpdateRequest' when calling postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatch(Async)");
        }

        return postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchCall(appId, batchInputSubscriptionBatchUpdateRequest, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param batchInputSubscriptionBatchUpdateRequest  (required)
     * @return BatchResponseSubscriptionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> multiple statuses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public BatchResponseSubscriptionResponse postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatch(Integer appId, BatchInputSubscriptionBatchUpdateRequest batchInputSubscriptionBatchUpdateRequest) throws ApiException {
        ApiResponse<BatchResponseSubscriptionResponse> localVarResp = postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchWithHttpInfo(appId, batchInputSubscriptionBatchUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param batchInputSubscriptionBatchUpdateRequest  (required)
     * @return ApiResponse&lt;BatchResponseSubscriptionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> multiple statuses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchResponseSubscriptionResponse> postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchWithHttpInfo(Integer appId, BatchInputSubscriptionBatchUpdateRequest batchInputSubscriptionBatchUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchValidateBeforeCall(appId, batchInputSubscriptionBatchUpdateRequest, null);
        Type localVarReturnType = new TypeToken<BatchResponseSubscriptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param batchInputSubscriptionBatchUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> multiple statuses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchAsync(Integer appId, BatchInputSubscriptionBatchUpdateRequest batchInputSubscriptionBatchUpdateRequest, final ApiCallback<BatchResponseSubscriptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchValidateBeforeCall(appId, batchInputSubscriptionBatchUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<BatchResponseSubscriptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postWebhooksV3AppIdSubscriptionsCreate
     * @param appId  (required)
     * @param subscriptionCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postWebhooksV3AppIdSubscriptionsCreateCall(Integer appId, SubscriptionCreateRequest subscriptionCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionCreateRequest;

        // create path and map variables
        String localVarPath = "/webhooks/v3/{appId}/subscriptions"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developer_hapikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postWebhooksV3AppIdSubscriptionsCreateValidateBeforeCall(Integer appId, SubscriptionCreateRequest subscriptionCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling postWebhooksV3AppIdSubscriptionsCreate(Async)");
        }

        // verify the required parameter 'subscriptionCreateRequest' is set
        if (subscriptionCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'subscriptionCreateRequest' when calling postWebhooksV3AppIdSubscriptionsCreate(Async)");
        }

        return postWebhooksV3AppIdSubscriptionsCreateCall(appId, subscriptionCreateRequest, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param subscriptionCreateRequest  (required)
     * @return SubscriptionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionResponse postWebhooksV3AppIdSubscriptionsCreate(Integer appId, SubscriptionCreateRequest subscriptionCreateRequest) throws ApiException {
        ApiResponse<SubscriptionResponse> localVarResp = postWebhooksV3AppIdSubscriptionsCreateWithHttpInfo(appId, subscriptionCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param subscriptionCreateRequest  (required)
     * @return ApiResponse&lt;SubscriptionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionResponse> postWebhooksV3AppIdSubscriptionsCreateWithHttpInfo(Integer appId, SubscriptionCreateRequest subscriptionCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = postWebhooksV3AppIdSubscriptionsCreateValidateBeforeCall(appId, subscriptionCreateRequest, null);
        Type localVarReturnType = new TypeToken<SubscriptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param subscriptionCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postWebhooksV3AppIdSubscriptionsCreateAsync(Integer appId, SubscriptionCreateRequest subscriptionCreateRequest, final ApiCallback<SubscriptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postWebhooksV3AppIdSubscriptionsCreateValidateBeforeCall(appId, subscriptionCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
