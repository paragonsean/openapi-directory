/*
 * Webhooks Webhooks
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchInputSubscriptionBatchUpdateRequest;
import org.openapitools.client.model.BatchResponseSubscriptionResponse;
import org.openapitools.client.model.BatchResponseSubscriptionResponseWithErrors;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.SubscriptionCreateRequest;
import org.openapitools.client.model.SubscriptionListResponse;
import org.openapitools.client.model.SubscriptionPatchRequest;
import org.openapitools.client.model.SubscriptionResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SubscriptionsApi
 */
@Disabled
public class SubscriptionsApiTest {

    private final SubscriptionsApi api = new SubscriptionsApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveTest() throws ApiException {
        Integer subscriptionId = null;
        Integer appId = null;
        api.deleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchive(subscriptionId, appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhooksV3AppIdSubscriptionsGetAllTest() throws ApiException {
        Integer appId = null;
        SubscriptionListResponse response = api.getWebhooksV3AppIdSubscriptionsGetAll(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdTest() throws ApiException {
        Integer subscriptionId = null;
        Integer appId = null;
        SubscriptionResponse response = api.getWebhooksV3AppIdSubscriptionsSubscriptionIdGetById(subscriptionId, appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateTest() throws ApiException {
        Integer subscriptionId = null;
        Integer appId = null;
        SubscriptionPatchRequest subscriptionPatchRequest = null;
        SubscriptionResponse response = api.patchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdate(subscriptionId, appId, subscriptionPatchRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchTest() throws ApiException {
        Integer appId = null;
        BatchInputSubscriptionBatchUpdateRequest batchInputSubscriptionBatchUpdateRequest = null;
        BatchResponseSubscriptionResponse response = api.postWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatch(appId, batchInputSubscriptionBatchUpdateRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postWebhooksV3AppIdSubscriptionsCreateTest() throws ApiException {
        Integer appId = null;
        SubscriptionCreateRequest subscriptionCreateRequest = null;
        SubscriptionResponse response = api.postWebhooksV3AppIdSubscriptionsCreate(appId, subscriptionCreateRequest);
        // TODO: test validations
    }

}
