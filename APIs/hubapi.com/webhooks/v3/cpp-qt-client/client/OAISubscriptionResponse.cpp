/**
 * Webhooks Webhooks
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionResponse::OAISubscriptionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionResponse::OAISubscriptionResponse() {
    this->initializeModel();
}

OAISubscriptionResponse::~OAISubscriptionResponse() {}

void OAISubscriptionResponse::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_property_name_isSet = false;
    m_property_name_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAISubscriptionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionResponse::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_property_name_isValid = ::OpenAPI::fromJsonValue(m_property_name, json[QString("propertyName")]);
    m_property_name_isSet = !json[QString("propertyName")].isNull() && m_property_name_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAISubscriptionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_property_name_isSet) {
        obj.insert(QString("propertyName"), ::OpenAPI::toJsonValue(m_property_name));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

bool OAISubscriptionResponse::isActive() const {
    return m_active;
}
void OAISubscriptionResponse::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAISubscriptionResponse::is_active_Set() const{
    return m_active_isSet;
}

bool OAISubscriptionResponse::is_active_Valid() const{
    return m_active_isValid;
}

QDateTime OAISubscriptionResponse::getCreatedAt() const {
    return m_created_at;
}
void OAISubscriptionResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISubscriptionResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISubscriptionResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAISubscriptionResponse::getEventType() const {
    return m_event_type;
}
void OAISubscriptionResponse::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAISubscriptionResponse::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAISubscriptionResponse::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAISubscriptionResponse::getId() const {
    return m_id;
}
void OAISubscriptionResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubscriptionResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubscriptionResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISubscriptionResponse::getPropertyName() const {
    return m_property_name;
}
void OAISubscriptionResponse::setPropertyName(const QString &property_name) {
    m_property_name = property_name;
    m_property_name_isSet = true;
}

bool OAISubscriptionResponse::is_property_name_Set() const{
    return m_property_name_isSet;
}

bool OAISubscriptionResponse::is_property_name_Valid() const{
    return m_property_name_isValid;
}

QDateTime OAISubscriptionResponse::getUpdatedAt() const {
    return m_updated_at;
}
void OAISubscriptionResponse::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAISubscriptionResponse::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAISubscriptionResponse::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAISubscriptionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_active_isValid && m_created_at_isValid && m_event_type_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
