/**
 * Webhooks Webhooks
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionCreateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionCreateRequest::OAISubscriptionCreateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionCreateRequest::OAISubscriptionCreateRequest() {
    this->initializeModel();
}

OAISubscriptionCreateRequest::~OAISubscriptionCreateRequest() {}

void OAISubscriptionCreateRequest::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_property_name_isSet = false;
    m_property_name_isValid = false;
}

void OAISubscriptionCreateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionCreateRequest::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_property_name_isValid = ::OpenAPI::fromJsonValue(m_property_name, json[QString("propertyName")]);
    m_property_name_isSet = !json[QString("propertyName")].isNull() && m_property_name_isValid;
}

QString OAISubscriptionCreateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionCreateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_property_name_isSet) {
        obj.insert(QString("propertyName"), ::OpenAPI::toJsonValue(m_property_name));
    }
    return obj;
}

bool OAISubscriptionCreateRequest::isActive() const {
    return m_active;
}
void OAISubscriptionCreateRequest::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAISubscriptionCreateRequest::is_active_Set() const{
    return m_active_isSet;
}

bool OAISubscriptionCreateRequest::is_active_Valid() const{
    return m_active_isValid;
}

QString OAISubscriptionCreateRequest::getEventType() const {
    return m_event_type;
}
void OAISubscriptionCreateRequest::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAISubscriptionCreateRequest::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAISubscriptionCreateRequest::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAISubscriptionCreateRequest::getPropertyName() const {
    return m_property_name;
}
void OAISubscriptionCreateRequest::setPropertyName(const QString &property_name) {
    m_property_name = property_name;
    m_property_name_isSet = true;
}

bool OAISubscriptionCreateRequest::is_property_name_Set() const{
    return m_property_name_isSet;
}

bool OAISubscriptionCreateRequest::is_property_name_Valid() const{
    return m_property_name_isValid;
}

bool OAISubscriptionCreateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionCreateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_type_isValid && true;
}

} // namespace OpenAPI
