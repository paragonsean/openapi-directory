/**
 * Webhooks Webhooks
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISubscriptionsApi_H
#define OAI_OAISubscriptionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBatchInputSubscriptionBatchUpdateRequest.h"
#include "OAIBatchResponseSubscriptionResponse.h"
#include "OAIBatchResponseSubscriptionResponseWithErrors.h"
#include "OAIError.h"
#include "OAISubscriptionCreateRequest.h"
#include "OAISubscriptionListResponse.h"
#include "OAISubscriptionPatchRequest.h"
#include "OAISubscriptionResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISubscriptionsApi : public QObject {
    Q_OBJECT

public:
    OAISubscriptionsApi(const int timeOut = 0);
    ~OAISubscriptionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id qint32 [required]
    * @param[in]  app_id qint32 [required]
    */
    virtual void delete_webhooks_v3_appId_subscriptions_subscriptionIdArchive(const qint32 &subscription_id, const qint32 &app_id);

    /**
    * @param[in]  app_id qint32 [required]
    */
    virtual void get_webhooks_v3_appId_subscriptionsGetAll(const qint32 &app_id);

    /**
    * @param[in]  subscription_id qint32 [required]
    * @param[in]  app_id qint32 [required]
    */
    virtual void get_webhooks_v3_appId_subscriptions_subscriptionIdGetById(const qint32 &subscription_id, const qint32 &app_id);

    /**
    * @param[in]  subscription_id qint32 [required]
    * @param[in]  app_id qint32 [required]
    * @param[in]  oai_subscription_patch_request OAISubscriptionPatchRequest [required]
    */
    virtual void patch_webhooks_v3_appId_subscriptions_subscriptionIdUpdate(const qint32 &subscription_id, const qint32 &app_id, const OAISubscriptionPatchRequest &oai_subscription_patch_request);

    /**
    * @param[in]  app_id qint32 [required]
    * @param[in]  oai_subscription_create_request OAISubscriptionCreateRequest [required]
    */
    virtual void post_webhooks_v3_appId_subscriptionsCreate(const qint32 &app_id, const OAISubscriptionCreateRequest &oai_subscription_create_request);

    /**
    * @param[in]  app_id qint32 [required]
    * @param[in]  oai_batch_input_subscription_batch_update_request OAIBatchInputSubscriptionBatchUpdateRequest [required]
    */
    virtual void post_webhooks_v3_appId_subscriptions_batch_updateUpdateBatch(const qint32 &app_id, const OAIBatchInputSubscriptionBatchUpdateRequest &oai_batch_input_subscription_batch_update_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void delete_webhooks_v3_appId_subscriptions_subscriptionIdArchiveCallback(OAIHttpRequestWorker *worker);
    void get_webhooks_v3_appId_subscriptionsGetAllCallback(OAIHttpRequestWorker *worker);
    void get_webhooks_v3_appId_subscriptions_subscriptionIdGetByIdCallback(OAIHttpRequestWorker *worker);
    void patch_webhooks_v3_appId_subscriptions_subscriptionIdUpdateCallback(OAIHttpRequestWorker *worker);
    void post_webhooks_v3_appId_subscriptionsCreateCallback(OAIHttpRequestWorker *worker);
    void post_webhooks_v3_appId_subscriptions_batch_updateUpdateBatchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void delete_webhooks_v3_appId_subscriptions_subscriptionIdArchiveSignal();
    void get_webhooks_v3_appId_subscriptionsGetAllSignal(OAISubscriptionListResponse summary);
    void get_webhooks_v3_appId_subscriptions_subscriptionIdGetByIdSignal(OAISubscriptionResponse summary);
    void patch_webhooks_v3_appId_subscriptions_subscriptionIdUpdateSignal(OAISubscriptionResponse summary);
    void post_webhooks_v3_appId_subscriptionsCreateSignal(OAISubscriptionResponse summary);
    void post_webhooks_v3_appId_subscriptions_batch_updateUpdateBatchSignal(OAIBatchResponseSubscriptionResponse summary);


    void delete_webhooks_v3_appId_subscriptions_subscriptionIdArchiveSignalFull(OAIHttpRequestWorker *worker);
    void get_webhooks_v3_appId_subscriptionsGetAllSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionListResponse summary);
    void get_webhooks_v3_appId_subscriptions_subscriptionIdGetByIdSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionResponse summary);
    void patch_webhooks_v3_appId_subscriptions_subscriptionIdUpdateSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionResponse summary);
    void post_webhooks_v3_appId_subscriptionsCreateSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionResponse summary);
    void post_webhooks_v3_appId_subscriptions_batch_updateUpdateBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchResponseSubscriptionResponse summary);

    Q_DECL_DEPRECATED_X("Use delete_webhooks_v3_appId_subscriptions_subscriptionIdArchiveSignalError() instead")
    void delete_webhooks_v3_appId_subscriptions_subscriptionIdArchiveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delete_webhooks_v3_appId_subscriptions_subscriptionIdArchiveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_webhooks_v3_appId_subscriptionsGetAllSignalError() instead")
    void get_webhooks_v3_appId_subscriptionsGetAllSignalE(OAISubscriptionListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_webhooks_v3_appId_subscriptionsGetAllSignalError(OAISubscriptionListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_webhooks_v3_appId_subscriptions_subscriptionIdGetByIdSignalError() instead")
    void get_webhooks_v3_appId_subscriptions_subscriptionIdGetByIdSignalE(OAISubscriptionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_webhooks_v3_appId_subscriptions_subscriptionIdGetByIdSignalError(OAISubscriptionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patch_webhooks_v3_appId_subscriptions_subscriptionIdUpdateSignalError() instead")
    void patch_webhooks_v3_appId_subscriptions_subscriptionIdUpdateSignalE(OAISubscriptionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patch_webhooks_v3_appId_subscriptions_subscriptionIdUpdateSignalError(OAISubscriptionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use post_webhooks_v3_appId_subscriptionsCreateSignalError() instead")
    void post_webhooks_v3_appId_subscriptionsCreateSignalE(OAISubscriptionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void post_webhooks_v3_appId_subscriptionsCreateSignalError(OAISubscriptionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use post_webhooks_v3_appId_subscriptions_batch_updateUpdateBatchSignalError() instead")
    void post_webhooks_v3_appId_subscriptions_batch_updateUpdateBatchSignalE(OAIBatchResponseSubscriptionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void post_webhooks_v3_appId_subscriptions_batch_updateUpdateBatchSignalError(OAIBatchResponseSubscriptionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use delete_webhooks_v3_appId_subscriptions_subscriptionIdArchiveSignalErrorFull() instead")
    void delete_webhooks_v3_appId_subscriptions_subscriptionIdArchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delete_webhooks_v3_appId_subscriptions_subscriptionIdArchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_webhooks_v3_appId_subscriptionsGetAllSignalErrorFull() instead")
    void get_webhooks_v3_appId_subscriptionsGetAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_webhooks_v3_appId_subscriptionsGetAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_webhooks_v3_appId_subscriptions_subscriptionIdGetByIdSignalErrorFull() instead")
    void get_webhooks_v3_appId_subscriptions_subscriptionIdGetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_webhooks_v3_appId_subscriptions_subscriptionIdGetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patch_webhooks_v3_appId_subscriptions_subscriptionIdUpdateSignalErrorFull() instead")
    void patch_webhooks_v3_appId_subscriptions_subscriptionIdUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patch_webhooks_v3_appId_subscriptions_subscriptionIdUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use post_webhooks_v3_appId_subscriptionsCreateSignalErrorFull() instead")
    void post_webhooks_v3_appId_subscriptionsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void post_webhooks_v3_appId_subscriptionsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use post_webhooks_v3_appId_subscriptions_batch_updateUpdateBatchSignalErrorFull() instead")
    void post_webhooks_v3_appId_subscriptions_batch_updateUpdateBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void post_webhooks_v3_appId_subscriptions_batch_updateUpdateBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
