/**
 * Webhooks Webhooks
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISettingsChangeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISettingsChangeRequest::OAISettingsChangeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISettingsChangeRequest::OAISettingsChangeRequest() {
    this->initializeModel();
}

OAISettingsChangeRequest::~OAISettingsChangeRequest() {}

void OAISettingsChangeRequest::initializeModel() {

    m_target_url_isSet = false;
    m_target_url_isValid = false;

    m_throttling_isSet = false;
    m_throttling_isValid = false;
}

void OAISettingsChangeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISettingsChangeRequest::fromJsonObject(QJsonObject json) {

    m_target_url_isValid = ::OpenAPI::fromJsonValue(m_target_url, json[QString("targetUrl")]);
    m_target_url_isSet = !json[QString("targetUrl")].isNull() && m_target_url_isValid;

    m_throttling_isValid = ::OpenAPI::fromJsonValue(m_throttling, json[QString("throttling")]);
    m_throttling_isSet = !json[QString("throttling")].isNull() && m_throttling_isValid;
}

QString OAISettingsChangeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISettingsChangeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_target_url_isSet) {
        obj.insert(QString("targetUrl"), ::OpenAPI::toJsonValue(m_target_url));
    }
    if (m_throttling.isSet()) {
        obj.insert(QString("throttling"), ::OpenAPI::toJsonValue(m_throttling));
    }
    return obj;
}

QString OAISettingsChangeRequest::getTargetUrl() const {
    return m_target_url;
}
void OAISettingsChangeRequest::setTargetUrl(const QString &target_url) {
    m_target_url = target_url;
    m_target_url_isSet = true;
}

bool OAISettingsChangeRequest::is_target_url_Set() const{
    return m_target_url_isSet;
}

bool OAISettingsChangeRequest::is_target_url_Valid() const{
    return m_target_url_isValid;
}

OAIThrottlingSettings OAISettingsChangeRequest::getThrottling() const {
    return m_throttling;
}
void OAISettingsChangeRequest::setThrottling(const OAIThrottlingSettings &throttling) {
    m_throttling = throttling;
    m_throttling_isSet = true;
}

bool OAISettingsChangeRequest::is_throttling_Set() const{
    return m_throttling_isSet;
}

bool OAISettingsChangeRequest::is_throttling_Valid() const{
    return m_throttling_isValid;
}

bool OAISettingsChangeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_throttling.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISettingsChangeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_url_isValid && m_throttling_isValid && true;
}

} // namespace OpenAPI
