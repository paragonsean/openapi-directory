/**
 * Webhooks Webhooks
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchInputSubscriptionBatchUpdateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchInputSubscriptionBatchUpdateRequest::OAIBatchInputSubscriptionBatchUpdateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchInputSubscriptionBatchUpdateRequest::OAIBatchInputSubscriptionBatchUpdateRequest() {
    this->initializeModel();
}

OAIBatchInputSubscriptionBatchUpdateRequest::~OAIBatchInputSubscriptionBatchUpdateRequest() {}

void OAIBatchInputSubscriptionBatchUpdateRequest::initializeModel() {

    m_inputs_isSet = false;
    m_inputs_isValid = false;
}

void OAIBatchInputSubscriptionBatchUpdateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchInputSubscriptionBatchUpdateRequest::fromJsonObject(QJsonObject json) {

    m_inputs_isValid = ::OpenAPI::fromJsonValue(m_inputs, json[QString("inputs")]);
    m_inputs_isSet = !json[QString("inputs")].isNull() && m_inputs_isValid;
}

QString OAIBatchInputSubscriptionBatchUpdateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchInputSubscriptionBatchUpdateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_inputs.size() > 0) {
        obj.insert(QString("inputs"), ::OpenAPI::toJsonValue(m_inputs));
    }
    return obj;
}

QList<OAISubscriptionBatchUpdateRequest> OAIBatchInputSubscriptionBatchUpdateRequest::getInputs() const {
    return m_inputs;
}
void OAIBatchInputSubscriptionBatchUpdateRequest::setInputs(const QList<OAISubscriptionBatchUpdateRequest> &inputs) {
    m_inputs = inputs;
    m_inputs_isSet = true;
}

bool OAIBatchInputSubscriptionBatchUpdateRequest::is_inputs_Set() const{
    return m_inputs_isSet;
}

bool OAIBatchInputSubscriptionBatchUpdateRequest::is_inputs_Valid() const{
    return m_inputs_isValid;
}

bool OAIBatchInputSubscriptionBatchUpdateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inputs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchInputSubscriptionBatchUpdateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_inputs_isValid && true;
}

} // namespace OpenAPI
