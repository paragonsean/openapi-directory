/**
 * Webhooks Webhooks
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBatchResponseSubscriptionResponseWithErrors.h
 *
 * 
 */

#ifndef OAIBatchResponseSubscriptionResponseWithErrors_H
#define OAIBatchResponseSubscriptionResponseWithErrors_H

#include <QJsonObject>

#include "OAIStandardError.h"
#include "OAISubscriptionResponse.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStandardError;
class OAISubscriptionResponse;

class OAIBatchResponseSubscriptionResponseWithErrors : public OAIObject {
public:
    OAIBatchResponseSubscriptionResponseWithErrors();
    OAIBatchResponseSubscriptionResponseWithErrors(QString json);
    ~OAIBatchResponseSubscriptionResponseWithErrors() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getCompletedAt() const;
    void setCompletedAt(const QDateTime &completed_at);
    bool is_completed_at_Set() const;
    bool is_completed_at_Valid() const;

    QList<OAIStandardError> getErrors() const;
    void setErrors(const QList<OAIStandardError> &errors);
    bool is_errors_Set() const;
    bool is_errors_Valid() const;

    QMap<QString, QString> getLinks() const;
    void setLinks(const QMap<QString, QString> &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    qint32 getNumErrors() const;
    void setNumErrors(const qint32 &num_errors);
    bool is_num_errors_Set() const;
    bool is_num_errors_Valid() const;

    QDateTime getRequestedAt() const;
    void setRequestedAt(const QDateTime &requested_at);
    bool is_requested_at_Set() const;
    bool is_requested_at_Valid() const;

    QList<OAISubscriptionResponse> getResults() const;
    void setResults(const QList<OAISubscriptionResponse> &results);
    bool is_results_Set() const;
    bool is_results_Valid() const;

    QDateTime getStartedAt() const;
    void setStartedAt(const QDateTime &started_at);
    bool is_started_at_Set() const;
    bool is_started_at_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_completed_at;
    bool m_completed_at_isSet;
    bool m_completed_at_isValid;

    QList<OAIStandardError> m_errors;
    bool m_errors_isSet;
    bool m_errors_isValid;

    QMap<QString, QString> m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    qint32 m_num_errors;
    bool m_num_errors_isSet;
    bool m_num_errors_isValid;

    QDateTime m_requested_at;
    bool m_requested_at_isSet;
    bool m_requested_at_isValid;

    QList<OAISubscriptionResponse> m_results;
    bool m_results_isSet;
    bool m_results_isValid;

    QDateTime m_started_at;
    bool m_started_at_isSet;
    bool m_started_at_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBatchResponseSubscriptionResponseWithErrors)

#endif // OAIBatchResponseSubscriptionResponseWithErrors_H
