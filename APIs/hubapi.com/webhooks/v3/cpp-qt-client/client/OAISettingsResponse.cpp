/**
 * Webhooks Webhooks
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISettingsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISettingsResponse::OAISettingsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISettingsResponse::OAISettingsResponse() {
    this->initializeModel();
}

OAISettingsResponse::~OAISettingsResponse() {}

void OAISettingsResponse::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_target_url_isSet = false;
    m_target_url_isValid = false;

    m_throttling_isSet = false;
    m_throttling_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAISettingsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISettingsResponse::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_target_url_isValid = ::OpenAPI::fromJsonValue(m_target_url, json[QString("targetUrl")]);
    m_target_url_isSet = !json[QString("targetUrl")].isNull() && m_target_url_isValid;

    m_throttling_isValid = ::OpenAPI::fromJsonValue(m_throttling, json[QString("throttling")]);
    m_throttling_isSet = !json[QString("throttling")].isNull() && m_throttling_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAISettingsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISettingsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_target_url_isSet) {
        obj.insert(QString("targetUrl"), ::OpenAPI::toJsonValue(m_target_url));
    }
    if (m_throttling.isSet()) {
        obj.insert(QString("throttling"), ::OpenAPI::toJsonValue(m_throttling));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QDateTime OAISettingsResponse::getCreatedAt() const {
    return m_created_at;
}
void OAISettingsResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISettingsResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISettingsResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAISettingsResponse::getTargetUrl() const {
    return m_target_url;
}
void OAISettingsResponse::setTargetUrl(const QString &target_url) {
    m_target_url = target_url;
    m_target_url_isSet = true;
}

bool OAISettingsResponse::is_target_url_Set() const{
    return m_target_url_isSet;
}

bool OAISettingsResponse::is_target_url_Valid() const{
    return m_target_url_isValid;
}

OAIThrottlingSettings OAISettingsResponse::getThrottling() const {
    return m_throttling;
}
void OAISettingsResponse::setThrottling(const OAIThrottlingSettings &throttling) {
    m_throttling = throttling;
    m_throttling_isSet = true;
}

bool OAISettingsResponse::is_throttling_Set() const{
    return m_throttling_isSet;
}

bool OAISettingsResponse::is_throttling_Valid() const{
    return m_throttling_isValid;
}

QDateTime OAISettingsResponse::getUpdatedAt() const {
    return m_updated_at;
}
void OAISettingsResponse::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAISettingsResponse::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAISettingsResponse::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAISettingsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_throttling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISettingsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_target_url_isValid && m_throttling_isValid && true;
}

} // namespace OpenAPI
