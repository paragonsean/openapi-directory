/**
 * Webhooks Webhooks
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThrottlingSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThrottlingSettings::OAIThrottlingSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThrottlingSettings::OAIThrottlingSettings() {
    this->initializeModel();
}

OAIThrottlingSettings::~OAIThrottlingSettings() {}

void OAIThrottlingSettings::initializeModel() {

    m_max_concurrent_requests_isSet = false;
    m_max_concurrent_requests_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;
}

void OAIThrottlingSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThrottlingSettings::fromJsonObject(QJsonObject json) {

    m_max_concurrent_requests_isValid = ::OpenAPI::fromJsonValue(m_max_concurrent_requests, json[QString("maxConcurrentRequests")]);
    m_max_concurrent_requests_isSet = !json[QString("maxConcurrentRequests")].isNull() && m_max_concurrent_requests_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;
}

QString OAIThrottlingSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThrottlingSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_max_concurrent_requests_isSet) {
        obj.insert(QString("maxConcurrentRequests"), ::OpenAPI::toJsonValue(m_max_concurrent_requests));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    return obj;
}

qint32 OAIThrottlingSettings::getMaxConcurrentRequests() const {
    return m_max_concurrent_requests;
}
void OAIThrottlingSettings::setMaxConcurrentRequests(const qint32 &max_concurrent_requests) {
    m_max_concurrent_requests = max_concurrent_requests;
    m_max_concurrent_requests_isSet = true;
}

bool OAIThrottlingSettings::is_max_concurrent_requests_Set() const{
    return m_max_concurrent_requests_isSet;
}

bool OAIThrottlingSettings::is_max_concurrent_requests_Valid() const{
    return m_max_concurrent_requests_isValid;
}

QString OAIThrottlingSettings::getPeriod() const {
    return m_period;
}
void OAIThrottlingSettings::setPeriod(const QString &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIThrottlingSettings::is_period_Set() const{
    return m_period_isSet;
}

bool OAIThrottlingSettings::is_period_Valid() const{
    return m_period_isValid;
}

bool OAIThrottlingSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_concurrent_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThrottlingSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_max_concurrent_requests_isValid && m_period_isValid && true;
}

} // namespace OpenAPI
