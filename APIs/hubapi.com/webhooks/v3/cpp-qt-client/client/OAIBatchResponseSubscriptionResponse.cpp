/**
 * Webhooks Webhooks
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchResponseSubscriptionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchResponseSubscriptionResponse::OAIBatchResponseSubscriptionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchResponseSubscriptionResponse::OAIBatchResponseSubscriptionResponse() {
    this->initializeModel();
}

OAIBatchResponseSubscriptionResponse::~OAIBatchResponseSubscriptionResponse() {}

void OAIBatchResponseSubscriptionResponse::initializeModel() {

    m_completed_at_isSet = false;
    m_completed_at_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_requested_at_isSet = false;
    m_requested_at_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIBatchResponseSubscriptionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchResponseSubscriptionResponse::fromJsonObject(QJsonObject json) {

    m_completed_at_isValid = ::OpenAPI::fromJsonValue(m_completed_at, json[QString("completedAt")]);
    m_completed_at_isSet = !json[QString("completedAt")].isNull() && m_completed_at_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_requested_at_isValid = ::OpenAPI::fromJsonValue(m_requested_at, json[QString("requestedAt")]);
    m_requested_at_isSet = !json[QString("requestedAt")].isNull() && m_requested_at_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("startedAt")]);
    m_started_at_isSet = !json[QString("startedAt")].isNull() && m_started_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIBatchResponseSubscriptionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchResponseSubscriptionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_completed_at_isSet) {
        obj.insert(QString("completedAt"), ::OpenAPI::toJsonValue(m_completed_at));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_requested_at_isSet) {
        obj.insert(QString("requestedAt"), ::OpenAPI::toJsonValue(m_requested_at));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("startedAt"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QDateTime OAIBatchResponseSubscriptionResponse::getCompletedAt() const {
    return m_completed_at;
}
void OAIBatchResponseSubscriptionResponse::setCompletedAt(const QDateTime &completed_at) {
    m_completed_at = completed_at;
    m_completed_at_isSet = true;
}

bool OAIBatchResponseSubscriptionResponse::is_completed_at_Set() const{
    return m_completed_at_isSet;
}

bool OAIBatchResponseSubscriptionResponse::is_completed_at_Valid() const{
    return m_completed_at_isValid;
}

QMap<QString, QString> OAIBatchResponseSubscriptionResponse::getLinks() const {
    return m_links;
}
void OAIBatchResponseSubscriptionResponse::setLinks(const QMap<QString, QString> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIBatchResponseSubscriptionResponse::is_links_Set() const{
    return m_links_isSet;
}

bool OAIBatchResponseSubscriptionResponse::is_links_Valid() const{
    return m_links_isValid;
}

QDateTime OAIBatchResponseSubscriptionResponse::getRequestedAt() const {
    return m_requested_at;
}
void OAIBatchResponseSubscriptionResponse::setRequestedAt(const QDateTime &requested_at) {
    m_requested_at = requested_at;
    m_requested_at_isSet = true;
}

bool OAIBatchResponseSubscriptionResponse::is_requested_at_Set() const{
    return m_requested_at_isSet;
}

bool OAIBatchResponseSubscriptionResponse::is_requested_at_Valid() const{
    return m_requested_at_isValid;
}

QList<OAISubscriptionResponse> OAIBatchResponseSubscriptionResponse::getResults() const {
    return m_results;
}
void OAIBatchResponseSubscriptionResponse::setResults(const QList<OAISubscriptionResponse> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIBatchResponseSubscriptionResponse::is_results_Set() const{
    return m_results_isSet;
}

bool OAIBatchResponseSubscriptionResponse::is_results_Valid() const{
    return m_results_isValid;
}

QDateTime OAIBatchResponseSubscriptionResponse::getStartedAt() const {
    return m_started_at;
}
void OAIBatchResponseSubscriptionResponse::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIBatchResponseSubscriptionResponse::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIBatchResponseSubscriptionResponse::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QString OAIBatchResponseSubscriptionResponse::getStatus() const {
    return m_status;
}
void OAIBatchResponseSubscriptionResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBatchResponseSubscriptionResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBatchResponseSubscriptionResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIBatchResponseSubscriptionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchResponseSubscriptionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_completed_at_isValid && m_results_isValid && m_started_at_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
