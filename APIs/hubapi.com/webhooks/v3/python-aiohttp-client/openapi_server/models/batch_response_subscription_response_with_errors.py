# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.standard_error import StandardError
from openapi_server.models.subscription_response import SubscriptionResponse
from openapi_server import util


class BatchResponseSubscriptionResponseWithErrors(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completed_at: datetime=None, errors: List[StandardError]=None, links: Dict[str, str]=None, num_errors: int=None, requested_at: datetime=None, results: List[SubscriptionResponse]=None, started_at: datetime=None, status: str=None):
        """BatchResponseSubscriptionResponseWithErrors - a model defined in OpenAPI

        :param completed_at: The completed_at of this BatchResponseSubscriptionResponseWithErrors.
        :param errors: The errors of this BatchResponseSubscriptionResponseWithErrors.
        :param links: The links of this BatchResponseSubscriptionResponseWithErrors.
        :param num_errors: The num_errors of this BatchResponseSubscriptionResponseWithErrors.
        :param requested_at: The requested_at of this BatchResponseSubscriptionResponseWithErrors.
        :param results: The results of this BatchResponseSubscriptionResponseWithErrors.
        :param started_at: The started_at of this BatchResponseSubscriptionResponseWithErrors.
        :param status: The status of this BatchResponseSubscriptionResponseWithErrors.
        """
        self.openapi_types = {
            'completed_at': datetime,
            'errors': List[StandardError],
            'links': Dict[str, str],
            'num_errors': int,
            'requested_at': datetime,
            'results': List[SubscriptionResponse],
            'started_at': datetime,
            'status': str
        }

        self.attribute_map = {
            'completed_at': 'completedAt',
            'errors': 'errors',
            'links': 'links',
            'num_errors': 'numErrors',
            'requested_at': 'requestedAt',
            'results': 'results',
            'started_at': 'startedAt',
            'status': 'status'
        }

        self._completed_at = completed_at
        self._errors = errors
        self._links = links
        self._num_errors = num_errors
        self._requested_at = requested_at
        self._results = results
        self._started_at = started_at
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchResponseSubscriptionResponseWithErrors':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchResponseSubscriptionResponseWithErrors of this BatchResponseSubscriptionResponseWithErrors.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completed_at(self):
        """Gets the completed_at of this BatchResponseSubscriptionResponseWithErrors.


        :return: The completed_at of this BatchResponseSubscriptionResponseWithErrors.
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this BatchResponseSubscriptionResponseWithErrors.


        :param completed_at: The completed_at of this BatchResponseSubscriptionResponseWithErrors.
        :type completed_at: datetime
        """
        if completed_at is None:
            raise ValueError("Invalid value for `completed_at`, must not be `None`")

        self._completed_at = completed_at

    @property
    def errors(self):
        """Gets the errors of this BatchResponseSubscriptionResponseWithErrors.


        :return: The errors of this BatchResponseSubscriptionResponseWithErrors.
        :rtype: List[StandardError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this BatchResponseSubscriptionResponseWithErrors.


        :param errors: The errors of this BatchResponseSubscriptionResponseWithErrors.
        :type errors: List[StandardError]
        """

        self._errors = errors

    @property
    def links(self):
        """Gets the links of this BatchResponseSubscriptionResponseWithErrors.


        :return: The links of this BatchResponseSubscriptionResponseWithErrors.
        :rtype: Dict[str, str]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this BatchResponseSubscriptionResponseWithErrors.


        :param links: The links of this BatchResponseSubscriptionResponseWithErrors.
        :type links: Dict[str, str]
        """

        self._links = links

    @property
    def num_errors(self):
        """Gets the num_errors of this BatchResponseSubscriptionResponseWithErrors.


        :return: The num_errors of this BatchResponseSubscriptionResponseWithErrors.
        :rtype: int
        """
        return self._num_errors

    @num_errors.setter
    def num_errors(self, num_errors):
        """Sets the num_errors of this BatchResponseSubscriptionResponseWithErrors.


        :param num_errors: The num_errors of this BatchResponseSubscriptionResponseWithErrors.
        :type num_errors: int
        """

        self._num_errors = num_errors

    @property
    def requested_at(self):
        """Gets the requested_at of this BatchResponseSubscriptionResponseWithErrors.


        :return: The requested_at of this BatchResponseSubscriptionResponseWithErrors.
        :rtype: datetime
        """
        return self._requested_at

    @requested_at.setter
    def requested_at(self, requested_at):
        """Sets the requested_at of this BatchResponseSubscriptionResponseWithErrors.


        :param requested_at: The requested_at of this BatchResponseSubscriptionResponseWithErrors.
        :type requested_at: datetime
        """

        self._requested_at = requested_at

    @property
    def results(self):
        """Gets the results of this BatchResponseSubscriptionResponseWithErrors.


        :return: The results of this BatchResponseSubscriptionResponseWithErrors.
        :rtype: List[SubscriptionResponse]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this BatchResponseSubscriptionResponseWithErrors.


        :param results: The results of this BatchResponseSubscriptionResponseWithErrors.
        :type results: List[SubscriptionResponse]
        """
        if results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")

        self._results = results

    @property
    def started_at(self):
        """Gets the started_at of this BatchResponseSubscriptionResponseWithErrors.


        :return: The started_at of this BatchResponseSubscriptionResponseWithErrors.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this BatchResponseSubscriptionResponseWithErrors.


        :param started_at: The started_at of this BatchResponseSubscriptionResponseWithErrors.
        :type started_at: datetime
        """
        if started_at is None:
            raise ValueError("Invalid value for `started_at`, must not be `None`")

        self._started_at = started_at

    @property
    def status(self):
        """Gets the status of this BatchResponseSubscriptionResponseWithErrors.


        :return: The status of this BatchResponseSubscriptionResponseWithErrors.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BatchResponseSubscriptionResponseWithErrors.


        :param status: The status of this BatchResponseSubscriptionResponseWithErrors.
        :type status: str
        """
        allowed_values = ["PENDING", "PROCESSING", "CANCELED", "COMPLETE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
