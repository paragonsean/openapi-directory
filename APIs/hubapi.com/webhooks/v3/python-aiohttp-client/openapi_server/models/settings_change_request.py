# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.throttling_settings import ThrottlingSettings
from openapi_server import util


class SettingsChangeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target_url: str=None, throttling: ThrottlingSettings=None):
        """SettingsChangeRequest - a model defined in OpenAPI

        :param target_url: The target_url of this SettingsChangeRequest.
        :param throttling: The throttling of this SettingsChangeRequest.
        """
        self.openapi_types = {
            'target_url': str,
            'throttling': ThrottlingSettings
        }

        self.attribute_map = {
            'target_url': 'targetUrl',
            'throttling': 'throttling'
        }

        self._target_url = target_url
        self._throttling = throttling

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SettingsChangeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SettingsChangeRequest of this SettingsChangeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target_url(self):
        """Gets the target_url of this SettingsChangeRequest.

        A publicly available URL for HubSpot to call where event payloads will be delivered.

        :return: The target_url of this SettingsChangeRequest.
        :rtype: str
        """
        return self._target_url

    @target_url.setter
    def target_url(self, target_url):
        """Sets the target_url of this SettingsChangeRequest.

        A publicly available URL for HubSpot to call where event payloads will be delivered.

        :param target_url: The target_url of this SettingsChangeRequest.
        :type target_url: str
        """
        if target_url is None:
            raise ValueError("Invalid value for `target_url`, must not be `None`")

        self._target_url = target_url

    @property
    def throttling(self):
        """Gets the throttling of this SettingsChangeRequest.


        :return: The throttling of this SettingsChangeRequest.
        :rtype: ThrottlingSettings
        """
        return self._throttling

    @throttling.setter
    def throttling(self, throttling):
        """Sets the throttling of this SettingsChangeRequest.


        :param throttling: The throttling of this SettingsChangeRequest.
        :type throttling: ThrottlingSettings
        """
        if throttling is None:
            raise ValueError("Invalid value for `throttling`, must not be `None`")

        self._throttling = throttling
