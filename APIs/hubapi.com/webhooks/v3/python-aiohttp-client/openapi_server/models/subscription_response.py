# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, created_at: datetime=None, event_type: str=None, id: str=None, property_name: str=None, updated_at: datetime=None):
        """SubscriptionResponse - a model defined in OpenAPI

        :param active: The active of this SubscriptionResponse.
        :param created_at: The created_at of this SubscriptionResponse.
        :param event_type: The event_type of this SubscriptionResponse.
        :param id: The id of this SubscriptionResponse.
        :param property_name: The property_name of this SubscriptionResponse.
        :param updated_at: The updated_at of this SubscriptionResponse.
        """
        self.openapi_types = {
            'active': bool,
            'created_at': datetime,
            'event_type': str,
            'id': str,
            'property_name': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'active': 'active',
            'created_at': 'createdAt',
            'event_type': 'eventType',
            'id': 'id',
            'property_name': 'propertyName',
            'updated_at': 'updatedAt'
        }

        self._active = active
        self._created_at = created_at
        self._event_type = event_type
        self._id = id
        self._property_name = property_name
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionResponse of this SubscriptionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this SubscriptionResponse.

        Determines if the subscription is active or paused.

        :return: The active of this SubscriptionResponse.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this SubscriptionResponse.

        Determines if the subscription is active or paused.

        :param active: The active of this SubscriptionResponse.
        :type active: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")

        self._active = active

    @property
    def created_at(self):
        """Gets the created_at of this SubscriptionResponse.

        When this subscription was created. Formatted as milliseconds from the [Unix epoch](#).

        :return: The created_at of this SubscriptionResponse.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SubscriptionResponse.

        When this subscription was created. Formatted as milliseconds from the [Unix epoch](#).

        :param created_at: The created_at of this SubscriptionResponse.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def event_type(self):
        """Gets the event_type of this SubscriptionResponse.

        Type of event to listen for. Can be one of `create`, `delete`, `deletedForPrivacy`, or `propertyChange`.

        :return: The event_type of this SubscriptionResponse.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this SubscriptionResponse.

        Type of event to listen for. Can be one of `create`, `delete`, `deletedForPrivacy`, or `propertyChange`.

        :param event_type: The event_type of this SubscriptionResponse.
        :type event_type: str
        """
        allowed_values = ["contact.propertyChange", "company.propertyChange", "deal.propertyChange", "ticket.propertyChange", "product.propertyChange", "line_item.propertyChange", "contact.creation", "contact.deletion", "contact.privacyDeletion", "company.creation", "company.deletion", "deal.creation", "deal.deletion", "ticket.creation", "ticket.deletion", "product.creation", "product.deletion", "line_item.creation", "line_item.deletion", "conversation.creation", "conversation.deletion", "conversation.newMessage", "conversation.privacyDeletion", "conversation.propertyChange", "contact.merge", "company.merge", "deal.merge", "ticket.merge", "product.merge", "line_item.merge", "contact.restore", "company.restore", "deal.restore", "ticket.restore", "product.restore", "line_item.restore", "contact.associationChange", "company.associationChange", "deal.associationChange", "ticket.associationChange", "line_item.associationChange"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def id(self):
        """Gets the id of this SubscriptionResponse.

        The unique ID of the subscription.

        :return: The id of this SubscriptionResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscriptionResponse.

        The unique ID of the subscription.

        :param id: The id of this SubscriptionResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def property_name(self):
        """Gets the property_name of this SubscriptionResponse.

        The internal name of the property being monitored for changes. Only applies when `eventType` is `propertyChange`.

        :return: The property_name of this SubscriptionResponse.
        :rtype: str
        """
        return self._property_name

    @property_name.setter
    def property_name(self, property_name):
        """Sets the property_name of this SubscriptionResponse.

        The internal name of the property being monitored for changes. Only applies when `eventType` is `propertyChange`.

        :param property_name: The property_name of this SubscriptionResponse.
        :type property_name: str
        """

        self._property_name = property_name

    @property
    def updated_at(self):
        """Gets the updated_at of this SubscriptionResponse.

        When this subscription was last updated. Formatted as milliseconds from the [Unix epoch](#).

        :return: The updated_at of this SubscriptionResponse.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SubscriptionResponse.

        When this subscription was last updated. Formatted as milliseconds from the [Unix epoch](#).

        :param updated_at: The updated_at of this SubscriptionResponse.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
