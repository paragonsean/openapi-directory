# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ErrorDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, context: Dict[str, List[str]]=None, _in: str=None, message: str=None, sub_category: str=None):
        """ErrorDetail - a model defined in OpenAPI

        :param code: The code of this ErrorDetail.
        :param context: The context of this ErrorDetail.
        :param _in: The _in of this ErrorDetail.
        :param message: The message of this ErrorDetail.
        :param sub_category: The sub_category of this ErrorDetail.
        """
        self.openapi_types = {
            'code': str,
            'context': Dict[str, List[str]],
            '_in': str,
            'message': str,
            'sub_category': str
        }

        self.attribute_map = {
            'code': 'code',
            'context': 'context',
            '_in': 'in',
            'message': 'message',
            'sub_category': 'subCategory'
        }

        self._code = code
        self._context = context
        self.__in = _in
        self._message = message
        self._sub_category = sub_category

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorDetail of this ErrorDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ErrorDetail.

        The status code associated with the error detail

        :return: The code of this ErrorDetail.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ErrorDetail.

        The status code associated with the error detail

        :param code: The code of this ErrorDetail.
        :type code: str
        """

        self._code = code

    @property
    def context(self):
        """Gets the context of this ErrorDetail.

        Context about the error condition

        :return: The context of this ErrorDetail.
        :rtype: Dict[str, List[str]]
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ErrorDetail.

        Context about the error condition

        :param context: The context of this ErrorDetail.
        :type context: Dict[str, List[str]]
        """

        self._context = context

    @property
    def _in(self):
        """Gets the _in of this ErrorDetail.

        The name of the field or parameter in which the error was found.

        :return: The _in of this ErrorDetail.
        :rtype: str
        """
        return self.__in

    @_in.setter
    def _in(self, _in):
        """Sets the _in of this ErrorDetail.

        The name of the field or parameter in which the error was found.

        :param _in: The _in of this ErrorDetail.
        :type _in: str
        """

        self.__in = _in

    @property
    def message(self):
        """Gets the message of this ErrorDetail.

        A human readable message describing the error along with remediation steps where appropriate

        :return: The message of this ErrorDetail.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ErrorDetail.

        A human readable message describing the error along with remediation steps where appropriate

        :param message: The message of this ErrorDetail.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def sub_category(self):
        """Gets the sub_category of this ErrorDetail.

        A specific category that contains more specific detail about the error

        :return: The sub_category of this ErrorDetail.
        :rtype: str
        """
        return self._sub_category

    @sub_category.setter
    def sub_category(self, sub_category):
        """Sets the sub_category of this ErrorDetail.

        A specific category that contains more specific detail about the error

        :param sub_category: The sub_category of this ErrorDetail.
        :type sub_category: str
        """

        self._sub_category = sub_category
