# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ThrottlingSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_concurrent_requests: int=None, period: str=None):
        """ThrottlingSettings - a model defined in OpenAPI

        :param max_concurrent_requests: The max_concurrent_requests of this ThrottlingSettings.
        :param period: The period of this ThrottlingSettings.
        """
        self.openapi_types = {
            'max_concurrent_requests': int,
            'period': str
        }

        self.attribute_map = {
            'max_concurrent_requests': 'maxConcurrentRequests',
            'period': 'period'
        }

        self._max_concurrent_requests = max_concurrent_requests
        self._period = period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThrottlingSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThrottlingSettings of this ThrottlingSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_concurrent_requests(self):
        """Gets the max_concurrent_requests of this ThrottlingSettings.

        The maximum number of concurrent HTTP requests HubSpot will attempt to make to your app.

        :return: The max_concurrent_requests of this ThrottlingSettings.
        :rtype: int
        """
        return self._max_concurrent_requests

    @max_concurrent_requests.setter
    def max_concurrent_requests(self, max_concurrent_requests):
        """Sets the max_concurrent_requests of this ThrottlingSettings.

        The maximum number of concurrent HTTP requests HubSpot will attempt to make to your app.

        :param max_concurrent_requests: The max_concurrent_requests of this ThrottlingSettings.
        :type max_concurrent_requests: int
        """
        if max_concurrent_requests is None:
            raise ValueError("Invalid value for `max_concurrent_requests`, must not be `None`")

        self._max_concurrent_requests = max_concurrent_requests

    @property
    def period(self):
        """Gets the period of this ThrottlingSettings.

        Time scale for this setting. Can be either `SECONDLY` (per second) or `ROLLING_MINUTE` (per minute).

        :return: The period of this ThrottlingSettings.
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this ThrottlingSettings.

        Time scale for this setting. Can be either `SECONDLY` (per second) or `ROLLING_MINUTE` (per minute).

        :param period: The period of this ThrottlingSettings.
        :type period: str
        """
        allowed_values = ["SECONDLY", "ROLLING_MINUTE"]  # noqa: E501
        if period not in allowed_values:
            raise ValueError(
                "Invalid value for `period` ({0}), must be one of {1}"
                .format(period, allowed_values)
            )

        self._period = period
