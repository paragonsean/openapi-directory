/**
 * Auth Oauth
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessTokenInfoResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessTokenInfoResponse::OAIAccessTokenInfoResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessTokenInfoResponse::OAIAccessTokenInfoResponse() {
    this->initializeModel();
}

OAIAccessTokenInfoResponse::~OAIAccessTokenInfoResponse() {}

void OAIAccessTokenInfoResponse::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_expires_in_isSet = false;
    m_expires_in_isValid = false;

    m_hub_domain_isSet = false;
    m_hub_domain_isValid = false;

    m_hub_id_isSet = false;
    m_hub_id_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_token_type_isSet = false;
    m_token_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIAccessTokenInfoResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessTokenInfoResponse::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("app_id")]);
    m_app_id_isSet = !json[QString("app_id")].isNull() && m_app_id_isValid;

    m_expires_in_isValid = ::OpenAPI::fromJsonValue(m_expires_in, json[QString("expires_in")]);
    m_expires_in_isSet = !json[QString("expires_in")].isNull() && m_expires_in_isValid;

    m_hub_domain_isValid = ::OpenAPI::fromJsonValue(m_hub_domain, json[QString("hub_domain")]);
    m_hub_domain_isSet = !json[QString("hub_domain")].isNull() && m_hub_domain_isValid;

    m_hub_id_isValid = ::OpenAPI::fromJsonValue(m_hub_id, json[QString("hub_id")]);
    m_hub_id_isSet = !json[QString("hub_id")].isNull() && m_hub_id_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_token_type_isValid = ::OpenAPI::fromJsonValue(m_token_type, json[QString("token_type")]);
    m_token_type_isSet = !json[QString("token_type")].isNull() && m_token_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIAccessTokenInfoResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessTokenInfoResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("app_id"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_expires_in_isSet) {
        obj.insert(QString("expires_in"), ::OpenAPI::toJsonValue(m_expires_in));
    }
    if (m_hub_domain_isSet) {
        obj.insert(QString("hub_domain"), ::OpenAPI::toJsonValue(m_hub_domain));
    }
    if (m_hub_id_isSet) {
        obj.insert(QString("hub_id"), ::OpenAPI::toJsonValue(m_hub_id));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_token_type_isSet) {
        obj.insert(QString("token_type"), ::OpenAPI::toJsonValue(m_token_type));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

qint32 OAIAccessTokenInfoResponse::getAppId() const {
    return m_app_id;
}
void OAIAccessTokenInfoResponse::setAppId(const qint32 &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIAccessTokenInfoResponse::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIAccessTokenInfoResponse::is_app_id_Valid() const{
    return m_app_id_isValid;
}

qint32 OAIAccessTokenInfoResponse::getExpiresIn() const {
    return m_expires_in;
}
void OAIAccessTokenInfoResponse::setExpiresIn(const qint32 &expires_in) {
    m_expires_in = expires_in;
    m_expires_in_isSet = true;
}

bool OAIAccessTokenInfoResponse::is_expires_in_Set() const{
    return m_expires_in_isSet;
}

bool OAIAccessTokenInfoResponse::is_expires_in_Valid() const{
    return m_expires_in_isValid;
}

QString OAIAccessTokenInfoResponse::getHubDomain() const {
    return m_hub_domain;
}
void OAIAccessTokenInfoResponse::setHubDomain(const QString &hub_domain) {
    m_hub_domain = hub_domain;
    m_hub_domain_isSet = true;
}

bool OAIAccessTokenInfoResponse::is_hub_domain_Set() const{
    return m_hub_domain_isSet;
}

bool OAIAccessTokenInfoResponse::is_hub_domain_Valid() const{
    return m_hub_domain_isValid;
}

qint32 OAIAccessTokenInfoResponse::getHubId() const {
    return m_hub_id;
}
void OAIAccessTokenInfoResponse::setHubId(const qint32 &hub_id) {
    m_hub_id = hub_id;
    m_hub_id_isSet = true;
}

bool OAIAccessTokenInfoResponse::is_hub_id_Set() const{
    return m_hub_id_isSet;
}

bool OAIAccessTokenInfoResponse::is_hub_id_Valid() const{
    return m_hub_id_isValid;
}

QList<QString> OAIAccessTokenInfoResponse::getScopes() const {
    return m_scopes;
}
void OAIAccessTokenInfoResponse::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIAccessTokenInfoResponse::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIAccessTokenInfoResponse::is_scopes_Valid() const{
    return m_scopes_isValid;
}

QString OAIAccessTokenInfoResponse::getToken() const {
    return m_token;
}
void OAIAccessTokenInfoResponse::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIAccessTokenInfoResponse::is_token_Set() const{
    return m_token_isSet;
}

bool OAIAccessTokenInfoResponse::is_token_Valid() const{
    return m_token_isValid;
}

QString OAIAccessTokenInfoResponse::getTokenType() const {
    return m_token_type;
}
void OAIAccessTokenInfoResponse::setTokenType(const QString &token_type) {
    m_token_type = token_type;
    m_token_type_isSet = true;
}

bool OAIAccessTokenInfoResponse::is_token_type_Set() const{
    return m_token_type_isSet;
}

bool OAIAccessTokenInfoResponse::is_token_type_Valid() const{
    return m_token_type_isValid;
}

QString OAIAccessTokenInfoResponse::getUser() const {
    return m_user;
}
void OAIAccessTokenInfoResponse::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIAccessTokenInfoResponse::is_user_Set() const{
    return m_user_isSet;
}

bool OAIAccessTokenInfoResponse::is_user_Valid() const{
    return m_user_isValid;
}

qint32 OAIAccessTokenInfoResponse::getUserId() const {
    return m_user_id;
}
void OAIAccessTokenInfoResponse::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAccessTokenInfoResponse::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAccessTokenInfoResponse::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIAccessTokenInfoResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hub_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hub_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessTokenInfoResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_id_isValid && m_expires_in_isValid && m_hub_id_isValid && m_scopes_isValid && m_token_isValid && m_token_type_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
