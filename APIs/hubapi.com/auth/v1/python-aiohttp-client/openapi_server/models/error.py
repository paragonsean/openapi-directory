# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_detail import ErrorDetail
from openapi_server import util


class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, context: Dict[str, List[str]]=None, correlation_id: str=None, errors: List[ErrorDetail]=None, links: Dict[str, str]=None, message: str=None, sub_category: str=None):
        """Error - a model defined in OpenAPI

        :param category: The category of this Error.
        :param context: The context of this Error.
        :param correlation_id: The correlation_id of this Error.
        :param errors: The errors of this Error.
        :param links: The links of this Error.
        :param message: The message of this Error.
        :param sub_category: The sub_category of this Error.
        """
        self.openapi_types = {
            'category': str,
            'context': Dict[str, List[str]],
            'correlation_id': str,
            'errors': List[ErrorDetail],
            'links': Dict[str, str],
            'message': str,
            'sub_category': str
        }

        self.attribute_map = {
            'category': 'category',
            'context': 'context',
            'correlation_id': 'correlationId',
            'errors': 'errors',
            'links': 'links',
            'message': 'message',
            'sub_category': 'subCategory'
        }

        self._category = category
        self._context = context
        self._correlation_id = correlation_id
        self._errors = errors
        self._links = links
        self._message = message
        self._sub_category = sub_category

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Error of this Error.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this Error.

        The error category

        :return: The category of this Error.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Error.

        The error category

        :param category: The category of this Error.
        :type category: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def context(self):
        """Gets the context of this Error.

        Context about the error condition

        :return: The context of this Error.
        :rtype: Dict[str, List[str]]
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this Error.

        Context about the error condition

        :param context: The context of this Error.
        :type context: Dict[str, List[str]]
        """

        self._context = context

    @property
    def correlation_id(self):
        """Gets the correlation_id of this Error.

        A unique identifier for the request. Include this value with any error reports or support tickets

        :return: The correlation_id of this Error.
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this Error.

        A unique identifier for the request. Include this value with any error reports or support tickets

        :param correlation_id: The correlation_id of this Error.
        :type correlation_id: str
        """
        if correlation_id is None:
            raise ValueError("Invalid value for `correlation_id`, must not be `None`")

        self._correlation_id = correlation_id

    @property
    def errors(self):
        """Gets the errors of this Error.

        further information about the error

        :return: The errors of this Error.
        :rtype: List[ErrorDetail]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this Error.

        further information about the error

        :param errors: The errors of this Error.
        :type errors: List[ErrorDetail]
        """

        self._errors = errors

    @property
    def links(self):
        """Gets the links of this Error.

        A map of link names to associated URIs containing documentation about the error or recommended remediation steps

        :return: The links of this Error.
        :rtype: Dict[str, str]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Error.

        A map of link names to associated URIs containing documentation about the error or recommended remediation steps

        :param links: The links of this Error.
        :type links: Dict[str, str]
        """

        self._links = links

    @property
    def message(self):
        """Gets the message of this Error.

        A human readable message describing the error along with remediation steps where appropriate

        :return: The message of this Error.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Error.

        A human readable message describing the error along with remediation steps where appropriate

        :param message: The message of this Error.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def sub_category(self):
        """Gets the sub_category of this Error.

        A specific category that contains more specific detail about the error

        :return: The sub_category of this Error.
        :rtype: str
        """
        return self._sub_category

    @sub_category.setter
    def sub_category(self, sub_category):
        """Sets the sub_category of this Error.

        A specific category that contains more specific detail about the error

        :param sub_category: The sub_category of this Error.
        :type sub_category: str
        """

        self._sub_category = sub_category
