# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccessTokenInfoResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: int=None, expires_in: int=None, hub_domain: str=None, hub_id: int=None, scopes: List[str]=None, token: str=None, token_type: str=None, user: str=None, user_id: int=None):
        """AccessTokenInfoResponse - a model defined in OpenAPI

        :param app_id: The app_id of this AccessTokenInfoResponse.
        :param expires_in: The expires_in of this AccessTokenInfoResponse.
        :param hub_domain: The hub_domain of this AccessTokenInfoResponse.
        :param hub_id: The hub_id of this AccessTokenInfoResponse.
        :param scopes: The scopes of this AccessTokenInfoResponse.
        :param token: The token of this AccessTokenInfoResponse.
        :param token_type: The token_type of this AccessTokenInfoResponse.
        :param user: The user of this AccessTokenInfoResponse.
        :param user_id: The user_id of this AccessTokenInfoResponse.
        """
        self.openapi_types = {
            'app_id': int,
            'expires_in': int,
            'hub_domain': str,
            'hub_id': int,
            'scopes': List[str],
            'token': str,
            'token_type': str,
            'user': str,
            'user_id': int
        }

        self.attribute_map = {
            'app_id': 'app_id',
            'expires_in': 'expires_in',
            'hub_domain': 'hub_domain',
            'hub_id': 'hub_id',
            'scopes': 'scopes',
            'token': 'token',
            'token_type': 'token_type',
            'user': 'user',
            'user_id': 'user_id'
        }

        self._app_id = app_id
        self._expires_in = expires_in
        self._hub_domain = hub_domain
        self._hub_id = hub_id
        self._scopes = scopes
        self._token = token
        self._token_type = token_type
        self._user = user
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessTokenInfoResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessTokenInfoResponse of this AccessTokenInfoResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this AccessTokenInfoResponse.

        

        :return: The app_id of this AccessTokenInfoResponse.
        :rtype: int
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this AccessTokenInfoResponse.

        

        :param app_id: The app_id of this AccessTokenInfoResponse.
        :type app_id: int
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def expires_in(self):
        """Gets the expires_in of this AccessTokenInfoResponse.

        

        :return: The expires_in of this AccessTokenInfoResponse.
        :rtype: int
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this AccessTokenInfoResponse.

        

        :param expires_in: The expires_in of this AccessTokenInfoResponse.
        :type expires_in: int
        """
        if expires_in is None:
            raise ValueError("Invalid value for `expires_in`, must not be `None`")

        self._expires_in = expires_in

    @property
    def hub_domain(self):
        """Gets the hub_domain of this AccessTokenInfoResponse.

        

        :return: The hub_domain of this AccessTokenInfoResponse.
        :rtype: str
        """
        return self._hub_domain

    @hub_domain.setter
    def hub_domain(self, hub_domain):
        """Sets the hub_domain of this AccessTokenInfoResponse.

        

        :param hub_domain: The hub_domain of this AccessTokenInfoResponse.
        :type hub_domain: str
        """

        self._hub_domain = hub_domain

    @property
    def hub_id(self):
        """Gets the hub_id of this AccessTokenInfoResponse.

        

        :return: The hub_id of this AccessTokenInfoResponse.
        :rtype: int
        """
        return self._hub_id

    @hub_id.setter
    def hub_id(self, hub_id):
        """Sets the hub_id of this AccessTokenInfoResponse.

        

        :param hub_id: The hub_id of this AccessTokenInfoResponse.
        :type hub_id: int
        """
        if hub_id is None:
            raise ValueError("Invalid value for `hub_id`, must not be `None`")

        self._hub_id = hub_id

    @property
    def scopes(self):
        """Gets the scopes of this AccessTokenInfoResponse.

        

        :return: The scopes of this AccessTokenInfoResponse.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this AccessTokenInfoResponse.

        

        :param scopes: The scopes of this AccessTokenInfoResponse.
        :type scopes: List[str]
        """
        if scopes is None:
            raise ValueError("Invalid value for `scopes`, must not be `None`")

        self._scopes = scopes

    @property
    def token(self):
        """Gets the token of this AccessTokenInfoResponse.

        

        :return: The token of this AccessTokenInfoResponse.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this AccessTokenInfoResponse.

        

        :param token: The token of this AccessTokenInfoResponse.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def token_type(self):
        """Gets the token_type of this AccessTokenInfoResponse.

        

        :return: The token_type of this AccessTokenInfoResponse.
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this AccessTokenInfoResponse.

        

        :param token_type: The token_type of this AccessTokenInfoResponse.
        :type token_type: str
        """
        if token_type is None:
            raise ValueError("Invalid value for `token_type`, must not be `None`")

        self._token_type = token_type

    @property
    def user(self):
        """Gets the user of this AccessTokenInfoResponse.

        

        :return: The user of this AccessTokenInfoResponse.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AccessTokenInfoResponse.

        

        :param user: The user of this AccessTokenInfoResponse.
        :type user: str
        """

        self._user = user

    @property
    def user_id(self):
        """Gets the user_id of this AccessTokenInfoResponse.

        

        :return: The user_id of this AccessTokenInfoResponse.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AccessTokenInfoResponse.

        

        :param user_id: The user_id of this AccessTokenInfoResponse.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
