/*
 * Automation Actions V4
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CollectionResponsePublicActionFunctionIdentifierNoPaging;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.PublicActionFunction;
import org.openapitools.client.model.PublicActionFunctionIdentifier;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FunctionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FunctionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FunctionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionType
     * @param definitionId  (required)
     * @param functionType  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionTypeCall(String definitionId, String functionType, Integer appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}"
            .replace("{" + "definitionId" + "}", localVarApiClient.escapeString(definitionId.toString()))
            .replace("{" + "functionType" + "}", localVarApiClient.escapeString(functionType.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developer_hapikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionTypeValidateBeforeCall(String definitionId, String functionType, Integer appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'definitionId' is set
        if (definitionId == null) {
            throw new ApiException("Missing the required parameter 'definitionId' when calling deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionType(Async)");
        }

        // verify the required parameter 'functionType' is set
        if (functionType == null) {
            throw new ApiException("Missing the required parameter 'functionType' when calling deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionType(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionType(Async)");
        }

        return deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionTypeCall(definitionId, functionType, appId, _callback);

    }

    /**
     * Delete a function for a definition
     * 
     * @param definitionId  (required)
     * @param functionType  (required)
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionType(String definitionId, String functionType, Integer appId) throws ApiException {
        deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionTypeWithHttpInfo(definitionId, functionType, appId);
    }

    /**
     * Delete a function for a definition
     * 
     * @param definitionId  (required)
     * @param functionType  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionTypeWithHttpInfo(String definitionId, String functionType, Integer appId) throws ApiException {
        okhttp3.Call localVarCall = deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionTypeValidateBeforeCall(definitionId, functionType, appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a function for a definition (asynchronously)
     * 
     * @param definitionId  (required)
     * @param functionType  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionTypeAsync(String definitionId, String functionType, Integer appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionTypeValidateBeforeCall(definitionId, functionType, appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchive
     * @param definitionId  (required)
     * @param functionType  (required)
     * @param functionId  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchiveCall(String definitionId, String functionType, String functionId, Integer appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}/{functionId}"
            .replace("{" + "definitionId" + "}", localVarApiClient.escapeString(definitionId.toString()))
            .replace("{" + "functionType" + "}", localVarApiClient.escapeString(functionType.toString()))
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developer_hapikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchiveValidateBeforeCall(String definitionId, String functionType, String functionId, Integer appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'definitionId' is set
        if (definitionId == null) {
            throw new ApiException("Missing the required parameter 'definitionId' when calling deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchive(Async)");
        }

        // verify the required parameter 'functionType' is set
        if (functionType == null) {
            throw new ApiException("Missing the required parameter 'functionType' when calling deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchive(Async)");
        }

        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchive(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchive(Async)");
        }

        return deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchiveCall(definitionId, functionType, functionId, appId, _callback);

    }

    /**
     * Archive a function for a definition
     * 
     * @param definitionId  (required)
     * @param functionType  (required)
     * @param functionId  (required)
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchive(String definitionId, String functionType, String functionId, Integer appId) throws ApiException {
        deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchiveWithHttpInfo(definitionId, functionType, functionId, appId);
    }

    /**
     * Archive a function for a definition
     * 
     * @param definitionId  (required)
     * @param functionType  (required)
     * @param functionId  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchiveWithHttpInfo(String definitionId, String functionType, String functionId, Integer appId) throws ApiException {
        okhttp3.Call localVarCall = deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchiveValidateBeforeCall(definitionId, functionType, functionId, appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Archive a function for a definition (asynchronously)
     * 
     * @param definitionId  (required)
     * @param functionType  (required)
     * @param functionId  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchiveAsync(String definitionId, String functionType, String functionId, Integer appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchiveValidateBeforeCall(definitionId, functionType, functionId, appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetById
     * @param definitionId  (required)
     * @param functionType  (required)
     * @param functionId  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetByIdCall(String definitionId, String functionType, String functionId, Integer appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}/{functionId}"
            .replace("{" + "definitionId" + "}", localVarApiClient.escapeString(definitionId.toString()))
            .replace("{" + "functionType" + "}", localVarApiClient.escapeString(functionType.toString()))
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developer_hapikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetByIdValidateBeforeCall(String definitionId, String functionType, String functionId, Integer appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'definitionId' is set
        if (definitionId == null) {
            throw new ApiException("Missing the required parameter 'definitionId' when calling getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetById(Async)");
        }

        // verify the required parameter 'functionType' is set
        if (functionType == null) {
            throw new ApiException("Missing the required parameter 'functionType' when calling getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetById(Async)");
        }

        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetById(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetById(Async)");
        }

        return getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetByIdCall(definitionId, functionType, functionId, appId, _callback);

    }

    /**
     * Get a function for a given definition
     * 
     * @param definitionId  (required)
     * @param functionType  (required)
     * @param functionId  (required)
     * @param appId  (required)
     * @return PublicActionFunction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public PublicActionFunction getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetById(String definitionId, String functionType, String functionId, Integer appId) throws ApiException {
        ApiResponse<PublicActionFunction> localVarResp = getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetByIdWithHttpInfo(definitionId, functionType, functionId, appId);
        return localVarResp.getData();
    }

    /**
     * Get a function for a given definition
     * 
     * @param definitionId  (required)
     * @param functionType  (required)
     * @param functionId  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;PublicActionFunction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicActionFunction> getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetByIdWithHttpInfo(String definitionId, String functionType, String functionId, Integer appId) throws ApiException {
        okhttp3.Call localVarCall = getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetByIdValidateBeforeCall(definitionId, functionType, functionId, appId, null);
        Type localVarReturnType = new TypeToken<PublicActionFunction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a function for a given definition (asynchronously)
     * 
     * @param definitionId  (required)
     * @param functionType  (required)
     * @param functionId  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetByIdAsync(String definitionId, String functionType, String functionId, Integer appId, final ApiCallback<PublicActionFunction> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetByIdValidateBeforeCall(definitionId, functionType, functionId, appId, _callback);
        Type localVarReturnType = new TypeToken<PublicActionFunction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionType
     * @param definitionId  (required)
     * @param functionType  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionTypeCall(String definitionId, String functionType, Integer appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}"
            .replace("{" + "definitionId" + "}", localVarApiClient.escapeString(definitionId.toString()))
            .replace("{" + "functionType" + "}", localVarApiClient.escapeString(functionType.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developer_hapikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionTypeValidateBeforeCall(String definitionId, String functionType, Integer appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'definitionId' is set
        if (definitionId == null) {
            throw new ApiException("Missing the required parameter 'definitionId' when calling getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionType(Async)");
        }

        // verify the required parameter 'functionType' is set
        if (functionType == null) {
            throw new ApiException("Missing the required parameter 'functionType' when calling getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionType(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionType(Async)");
        }

        return getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionTypeCall(definitionId, functionType, appId, _callback);

    }

    /**
     * Get all functions by a type for a given definition
     * 
     * @param definitionId  (required)
     * @param functionType  (required)
     * @param appId  (required)
     * @return PublicActionFunction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public PublicActionFunction getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionType(String definitionId, String functionType, Integer appId) throws ApiException {
        ApiResponse<PublicActionFunction> localVarResp = getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionTypeWithHttpInfo(definitionId, functionType, appId);
        return localVarResp.getData();
    }

    /**
     * Get all functions by a type for a given definition
     * 
     * @param definitionId  (required)
     * @param functionType  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;PublicActionFunction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicActionFunction> getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionTypeWithHttpInfo(String definitionId, String functionType, Integer appId) throws ApiException {
        okhttp3.Call localVarCall = getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionTypeValidateBeforeCall(definitionId, functionType, appId, null);
        Type localVarReturnType = new TypeToken<PublicActionFunction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all functions by a type for a given definition (asynchronously)
     * 
     * @param definitionId  (required)
     * @param functionType  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionTypeAsync(String definitionId, String functionType, Integer appId, final ApiCallback<PublicActionFunction> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionTypeValidateBeforeCall(definitionId, functionType, appId, _callback);
        Type localVarReturnType = new TypeToken<PublicActionFunction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAutomationV4ActionsAppIdDefinitionIdFunctionsGetPage
     * @param definitionId  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutomationV4ActionsAppIdDefinitionIdFunctionsGetPageCall(String definitionId, Integer appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automation/v4/actions/{appId}/{definitionId}/functions"
            .replace("{" + "definitionId" + "}", localVarApiClient.escapeString(definitionId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developer_hapikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAutomationV4ActionsAppIdDefinitionIdFunctionsGetPageValidateBeforeCall(String definitionId, Integer appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'definitionId' is set
        if (definitionId == null) {
            throw new ApiException("Missing the required parameter 'definitionId' when calling getAutomationV4ActionsAppIdDefinitionIdFunctionsGetPage(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getAutomationV4ActionsAppIdDefinitionIdFunctionsGetPage(Async)");
        }

        return getAutomationV4ActionsAppIdDefinitionIdFunctionsGetPageCall(definitionId, appId, _callback);

    }

    /**
     * Get all functions for a given definition
     * 
     * @param definitionId  (required)
     * @param appId  (required)
     * @return CollectionResponsePublicActionFunctionIdentifierNoPaging
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public CollectionResponsePublicActionFunctionIdentifierNoPaging getAutomationV4ActionsAppIdDefinitionIdFunctionsGetPage(String definitionId, Integer appId) throws ApiException {
        ApiResponse<CollectionResponsePublicActionFunctionIdentifierNoPaging> localVarResp = getAutomationV4ActionsAppIdDefinitionIdFunctionsGetPageWithHttpInfo(definitionId, appId);
        return localVarResp.getData();
    }

    /**
     * Get all functions for a given definition
     * 
     * @param definitionId  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;CollectionResponsePublicActionFunctionIdentifierNoPaging&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollectionResponsePublicActionFunctionIdentifierNoPaging> getAutomationV4ActionsAppIdDefinitionIdFunctionsGetPageWithHttpInfo(String definitionId, Integer appId) throws ApiException {
        okhttp3.Call localVarCall = getAutomationV4ActionsAppIdDefinitionIdFunctionsGetPageValidateBeforeCall(definitionId, appId, null);
        Type localVarReturnType = new TypeToken<CollectionResponsePublicActionFunctionIdentifierNoPaging>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all functions for a given definition (asynchronously)
     * 
     * @param definitionId  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutomationV4ActionsAppIdDefinitionIdFunctionsGetPageAsync(String definitionId, Integer appId, final ApiCallback<CollectionResponsePublicActionFunctionIdentifierNoPaging> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAutomationV4ActionsAppIdDefinitionIdFunctionsGetPageValidateBeforeCall(definitionId, appId, _callback);
        Type localVarReturnType = new TypeToken<CollectionResponsePublicActionFunctionIdentifierNoPaging>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionType
     * @param definitionId  (required)
     * @param functionType  (required)
     * @param appId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionTypeCall(String definitionId, String functionType, Integer appId, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}"
            .replace("{" + "definitionId" + "}", localVarApiClient.escapeString(definitionId.toString()))
            .replace("{" + "functionType" + "}", localVarApiClient.escapeString(functionType.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developer_hapikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionTypeValidateBeforeCall(String definitionId, String functionType, Integer appId, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'definitionId' is set
        if (definitionId == null) {
            throw new ApiException("Missing the required parameter 'definitionId' when calling putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionType(Async)");
        }

        // verify the required parameter 'functionType' is set
        if (functionType == null) {
            throw new ApiException("Missing the required parameter 'functionType' when calling putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionType(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionType(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionType(Async)");
        }

        return putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionTypeCall(definitionId, functionType, appId, body, _callback);

    }

    /**
     * Insert a function for a definition
     * 
     * @param definitionId  (required)
     * @param functionType  (required)
     * @param appId  (required)
     * @param body  (required)
     * @return PublicActionFunctionIdentifier
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public PublicActionFunctionIdentifier putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionType(String definitionId, String functionType, Integer appId, String body) throws ApiException {
        ApiResponse<PublicActionFunctionIdentifier> localVarResp = putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionTypeWithHttpInfo(definitionId, functionType, appId, body);
        return localVarResp.getData();
    }

    /**
     * Insert a function for a definition
     * 
     * @param definitionId  (required)
     * @param functionType  (required)
     * @param appId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;PublicActionFunctionIdentifier&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicActionFunctionIdentifier> putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionTypeWithHttpInfo(String definitionId, String functionType, Integer appId, String body) throws ApiException {
        okhttp3.Call localVarCall = putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionTypeValidateBeforeCall(definitionId, functionType, appId, body, null);
        Type localVarReturnType = new TypeToken<PublicActionFunctionIdentifier>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a function for a definition (asynchronously)
     * 
     * @param definitionId  (required)
     * @param functionType  (required)
     * @param appId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionTypeAsync(String definitionId, String functionType, Integer appId, String body, final ApiCallback<PublicActionFunctionIdentifier> _callback) throws ApiException {

        okhttp3.Call localVarCall = putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionTypeValidateBeforeCall(definitionId, functionType, appId, body, _callback);
        Type localVarReturnType = new TypeToken<PublicActionFunctionIdentifier>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace
     * @param definitionId  (required)
     * @param functionType  (required)
     * @param functionId  (required)
     * @param appId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplaceCall(String definitionId, String functionType, String functionId, Integer appId, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}/{functionId}"
            .replace("{" + "definitionId" + "}", localVarApiClient.escapeString(definitionId.toString()))
            .replace("{" + "functionType" + "}", localVarApiClient.escapeString(functionType.toString()))
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developer_hapikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplaceValidateBeforeCall(String definitionId, String functionType, String functionId, Integer appId, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'definitionId' is set
        if (definitionId == null) {
            throw new ApiException("Missing the required parameter 'definitionId' when calling putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace(Async)");
        }

        // verify the required parameter 'functionType' is set
        if (functionType == null) {
            throw new ApiException("Missing the required parameter 'functionType' when calling putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace(Async)");
        }

        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace(Async)");
        }

        return putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplaceCall(definitionId, functionType, functionId, appId, body, _callback);

    }

    /**
     * Insert a function for a definition
     * 
     * @param definitionId  (required)
     * @param functionType  (required)
     * @param functionId  (required)
     * @param appId  (required)
     * @param body  (required)
     * @return PublicActionFunctionIdentifier
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public PublicActionFunctionIdentifier putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace(String definitionId, String functionType, String functionId, Integer appId, String body) throws ApiException {
        ApiResponse<PublicActionFunctionIdentifier> localVarResp = putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplaceWithHttpInfo(definitionId, functionType, functionId, appId, body);
        return localVarResp.getData();
    }

    /**
     * Insert a function for a definition
     * 
     * @param definitionId  (required)
     * @param functionType  (required)
     * @param functionId  (required)
     * @param appId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;PublicActionFunctionIdentifier&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicActionFunctionIdentifier> putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplaceWithHttpInfo(String definitionId, String functionType, String functionId, Integer appId, String body) throws ApiException {
        okhttp3.Call localVarCall = putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplaceValidateBeforeCall(definitionId, functionType, functionId, appId, body, null);
        Type localVarReturnType = new TypeToken<PublicActionFunctionIdentifier>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert a function for a definition (asynchronously)
     * 
     * @param definitionId  (required)
     * @param functionType  (required)
     * @param functionId  (required)
     * @param appId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplaceAsync(String definitionId, String functionType, String functionId, Integer appId, String body, final ApiCallback<PublicActionFunctionIdentifier> _callback) throws ApiException {

        okhttp3.Call localVarCall = putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplaceValidateBeforeCall(definitionId, functionType, functionId, appId, body, _callback);
        Type localVarReturnType = new TypeToken<PublicActionFunctionIdentifier>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
