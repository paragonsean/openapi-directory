/*
 * Automation Actions V4
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PublicSingleFieldDependency
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:15.898770-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PublicSingleFieldDependency {
  public static final String SERIALIZED_NAME_CONTROLLING_FIELD_NAME = "controllingFieldName";
  @SerializedName(SERIALIZED_NAME_CONTROLLING_FIELD_NAME)
  private String controllingFieldName;

  /**
   * Gets or Sets dependencyType
   */
  @JsonAdapter(DependencyTypeEnum.Adapter.class)
  public enum DependencyTypeEnum {
    SINGLE_FIELD("SINGLE_FIELD");

    private String value;

    DependencyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DependencyTypeEnum fromValue(String value) {
      for (DependencyTypeEnum b : DependencyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DependencyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DependencyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DependencyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DependencyTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DependencyTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEPENDENCY_TYPE = "dependencyType";
  @SerializedName(SERIALIZED_NAME_DEPENDENCY_TYPE)
  private DependencyTypeEnum dependencyType = DependencyTypeEnum.SINGLE_FIELD;

  public static final String SERIALIZED_NAME_DEPENDENT_FIELD_NAMES = "dependentFieldNames";
  @SerializedName(SERIALIZED_NAME_DEPENDENT_FIELD_NAMES)
  private List<String> dependentFieldNames = new ArrayList<>();

  public PublicSingleFieldDependency() {
  }

  public PublicSingleFieldDependency controllingFieldName(String controllingFieldName) {
    this.controllingFieldName = controllingFieldName;
    return this;
  }

  /**
   * Get controllingFieldName
   * @return controllingFieldName
   */
  @javax.annotation.Nonnull
  public String getControllingFieldName() {
    return controllingFieldName;
  }

  public void setControllingFieldName(String controllingFieldName) {
    this.controllingFieldName = controllingFieldName;
  }


  public PublicSingleFieldDependency dependencyType(DependencyTypeEnum dependencyType) {
    this.dependencyType = dependencyType;
    return this;
  }

  /**
   * Get dependencyType
   * @return dependencyType
   */
  @javax.annotation.Nonnull
  public DependencyTypeEnum getDependencyType() {
    return dependencyType;
  }

  public void setDependencyType(DependencyTypeEnum dependencyType) {
    this.dependencyType = dependencyType;
  }


  public PublicSingleFieldDependency dependentFieldNames(List<String> dependentFieldNames) {
    this.dependentFieldNames = dependentFieldNames;
    return this;
  }

  public PublicSingleFieldDependency addDependentFieldNamesItem(String dependentFieldNamesItem) {
    if (this.dependentFieldNames == null) {
      this.dependentFieldNames = new ArrayList<>();
    }
    this.dependentFieldNames.add(dependentFieldNamesItem);
    return this;
  }

  /**
   * Get dependentFieldNames
   * @return dependentFieldNames
   */
  @javax.annotation.Nonnull
  public List<String> getDependentFieldNames() {
    return dependentFieldNames;
  }

  public void setDependentFieldNames(List<String> dependentFieldNames) {
    this.dependentFieldNames = dependentFieldNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublicSingleFieldDependency publicSingleFieldDependency = (PublicSingleFieldDependency) o;
    return Objects.equals(this.controllingFieldName, publicSingleFieldDependency.controllingFieldName) &&
        Objects.equals(this.dependencyType, publicSingleFieldDependency.dependencyType) &&
        Objects.equals(this.dependentFieldNames, publicSingleFieldDependency.dependentFieldNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(controllingFieldName, dependencyType, dependentFieldNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublicSingleFieldDependency {\n");
    sb.append("    controllingFieldName: ").append(toIndentedString(controllingFieldName)).append("\n");
    sb.append("    dependencyType: ").append(toIndentedString(dependencyType)).append("\n");
    sb.append("    dependentFieldNames: ").append(toIndentedString(dependentFieldNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("controllingFieldName");
    openapiFields.add("dependencyType");
    openapiFields.add("dependentFieldNames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("controllingFieldName");
    openapiRequiredFields.add("dependencyType");
    openapiRequiredFields.add("dependentFieldNames");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublicSingleFieldDependency
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublicSingleFieldDependency.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublicSingleFieldDependency is not found in the empty JSON string", PublicSingleFieldDependency.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublicSingleFieldDependency.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublicSingleFieldDependency` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PublicSingleFieldDependency.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("controllingFieldName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controllingFieldName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controllingFieldName").toString()));
      }
      if (!jsonObj.get("dependencyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dependencyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dependencyType").toString()));
      }
      // validate the required field `dependencyType`
      DependencyTypeEnum.validateJsonElement(jsonObj.get("dependencyType"));
      // ensure the required json array is present
      if (jsonObj.get("dependentFieldNames") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("dependentFieldNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dependentFieldNames` to be an array in the JSON string but got `%s`", jsonObj.get("dependentFieldNames").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublicSingleFieldDependency.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublicSingleFieldDependency' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublicSingleFieldDependency> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublicSingleFieldDependency.class));

       return (TypeAdapter<T>) new TypeAdapter<PublicSingleFieldDependency>() {
           @Override
           public void write(JsonWriter out, PublicSingleFieldDependency value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublicSingleFieldDependency read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublicSingleFieldDependency given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublicSingleFieldDependency
   * @throws IOException if the JSON string is invalid with respect to PublicSingleFieldDependency
   */
  public static PublicSingleFieldDependency fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublicSingleFieldDependency.class);
  }

  /**
   * Convert an instance of PublicSingleFieldDependency to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

