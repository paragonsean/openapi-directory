/*
 * Automation Actions V4
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PublicActionFunction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:15.898770-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PublicActionFunction {
  public static final String SERIALIZED_NAME_FUNCTION_SOURCE = "functionSource";
  @SerializedName(SERIALIZED_NAME_FUNCTION_SOURCE)
  private String functionSource;

  /**
   * Gets or Sets functionType
   */
  @JsonAdapter(FunctionTypeEnum.Adapter.class)
  public enum FunctionTypeEnum {
    PRE_ACTION_EXECUTION("PRE_ACTION_EXECUTION"),
    
    PRE_FETCH_OPTIONS("PRE_FETCH_OPTIONS"),
    
    POST_FETCH_OPTIONS("POST_FETCH_OPTIONS"),
    
    POST_ACTION_EXECUTION("POST_ACTION_EXECUTION");

    private String value;

    FunctionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FunctionTypeEnum fromValue(String value) {
      for (FunctionTypeEnum b : FunctionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FunctionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FunctionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FunctionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FunctionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FunctionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FUNCTION_TYPE = "functionType";
  @SerializedName(SERIALIZED_NAME_FUNCTION_TYPE)
  private FunctionTypeEnum functionType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public PublicActionFunction() {
  }

  public PublicActionFunction functionSource(String functionSource) {
    this.functionSource = functionSource;
    return this;
  }

  /**
   * Get functionSource
   * @return functionSource
   */
  @javax.annotation.Nonnull
  public String getFunctionSource() {
    return functionSource;
  }

  public void setFunctionSource(String functionSource) {
    this.functionSource = functionSource;
  }


  public PublicActionFunction functionType(FunctionTypeEnum functionType) {
    this.functionType = functionType;
    return this;
  }

  /**
   * Get functionType
   * @return functionType
   */
  @javax.annotation.Nonnull
  public FunctionTypeEnum getFunctionType() {
    return functionType;
  }

  public void setFunctionType(FunctionTypeEnum functionType) {
    this.functionType = functionType;
  }


  public PublicActionFunction id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublicActionFunction publicActionFunction = (PublicActionFunction) o;
    return Objects.equals(this.functionSource, publicActionFunction.functionSource) &&
        Objects.equals(this.functionType, publicActionFunction.functionType) &&
        Objects.equals(this.id, publicActionFunction.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(functionSource, functionType, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublicActionFunction {\n");
    sb.append("    functionSource: ").append(toIndentedString(functionSource)).append("\n");
    sb.append("    functionType: ").append(toIndentedString(functionType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("functionSource");
    openapiFields.add("functionType");
    openapiFields.add("id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("functionSource");
    openapiRequiredFields.add("functionType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublicActionFunction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublicActionFunction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublicActionFunction is not found in the empty JSON string", PublicActionFunction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublicActionFunction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublicActionFunction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PublicActionFunction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("functionSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionSource").toString()));
      }
      if (!jsonObj.get("functionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionType").toString()));
      }
      // validate the required field `functionType`
      FunctionTypeEnum.validateJsonElement(jsonObj.get("functionType"));
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublicActionFunction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublicActionFunction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublicActionFunction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublicActionFunction.class));

       return (TypeAdapter<T>) new TypeAdapter<PublicActionFunction>() {
           @Override
           public void write(JsonWriter out, PublicActionFunction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublicActionFunction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublicActionFunction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublicActionFunction
   * @throws IOException if the JSON string is invalid with respect to PublicActionFunction
   */
  public static PublicActionFunction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublicActionFunction.class);
  }

  /**
   * Convert an instance of PublicActionFunction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

