/*
 * Automation Actions V4
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Option;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FieldTypeDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:15.898770-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FieldTypeDefinition {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXTERNAL_OPTIONS = "externalOptions";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_OPTIONS)
  private Boolean externalOptions;

  public static final String SERIALIZED_NAME_EXTERNAL_OPTIONS_REFERENCE_TYPE = "externalOptionsReferenceType";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_OPTIONS_REFERENCE_TYPE)
  private String externalOptionsReferenceType;

  /**
   * Gets or Sets fieldType
   */
  @JsonAdapter(FieldTypeEnum.Adapter.class)
  public enum FieldTypeEnum {
    BOOLEANCHECKBOX("booleancheckbox"),
    
    CHECKBOX("checkbox"),
    
    DATE("date"),
    
    FILE("file"),
    
    NUMBER("number"),
    
    PHONENUMBER("phonenumber"),
    
    RADIO("radio"),
    
    SELECT("select"),
    
    TEXT("text"),
    
    TEXTAREA("textarea"),
    
    CALCULATION_EQUATION("calculation_equation"),
    
    CALCULATION_ROLLUP("calculation_rollup"),
    
    CALCULATION_SCORE("calculation_score"),
    
    CALCULATION_READ_TIME("calculation_read_time"),
    
    UNKNOWN("unknown"),
    
    HTML("html");

    private String value;

    FieldTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FieldTypeEnum fromValue(String value) {
      for (FieldTypeEnum b : FieldTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FieldTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FieldTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FieldTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FieldTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FieldTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FIELD_TYPE = "fieldType";
  @SerializedName(SERIALIZED_NAME_FIELD_TYPE)
  private FieldTypeEnum fieldType;

  public static final String SERIALIZED_NAME_HELP_TEXT = "helpText";
  @SerializedName(SERIALIZED_NAME_HELP_TEXT)
  private String helpText;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List<Option> options = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPTIONS_URL = "optionsUrl";
  @SerializedName(SERIALIZED_NAME_OPTIONS_URL)
  private String optionsUrl;

  /**
   * Gets or Sets referencedObjectType
   */
  @JsonAdapter(ReferencedObjectTypeEnum.Adapter.class)
  public enum ReferencedObjectTypeEnum {
    CONTACT("CONTACT"),
    
    COMPANY("COMPANY"),
    
    DEAL("DEAL"),
    
    ENGAGEMENT("ENGAGEMENT"),
    
    TICKET("TICKET"),
    
    OWNER("OWNER"),
    
    PRODUCT("PRODUCT"),
    
    LINE_ITEM("LINE_ITEM"),
    
    BET_DELIVERABLE_SERVICE("BET_DELIVERABLE_SERVICE"),
    
    CONTENT("CONTENT"),
    
    CONVERSATION("CONVERSATION"),
    
    BET_ALERT("BET_ALERT"),
    
    PORTAL("PORTAL"),
    
    QUOTE("QUOTE"),
    
    FORM_SUBMISSION_INBOUNDDB("FORM_SUBMISSION_INBOUNDDB"),
    
    QUOTA("QUOTA"),
    
    UNSUBSCRIBE("UNSUBSCRIBE"),
    
    COMMUNICATION("COMMUNICATION"),
    
    FEEDBACK_SUBMISSION("FEEDBACK_SUBMISSION"),
    
    ATTRIBUTION("ATTRIBUTION"),
    
    SALESFORCE_SYNC_ERROR("SALESFORCE_SYNC_ERROR"),
    
    RESTORABLE_CRM_OBJECT("RESTORABLE_CRM_OBJECT"),
    
    HUB("HUB"),
    
    LANDING_PAGE("LANDING_PAGE"),
    
    PRODUCT_OR_FOLDER("PRODUCT_OR_FOLDER"),
    
    TASK("TASK"),
    
    FORM("FORM"),
    
    MARKETING_EMAIL("MARKETING_EMAIL"),
    
    AD_ACCOUNT("AD_ACCOUNT"),
    
    AD_CAMPAIGN("AD_CAMPAIGN"),
    
    AD_GROUP("AD_GROUP"),
    
    AD("AD"),
    
    KEYWORD("KEYWORD"),
    
    CAMPAIGN("CAMPAIGN"),
    
    SOCIAL_CHANNEL("SOCIAL_CHANNEL"),
    
    SOCIAL_POST("SOCIAL_POST"),
    
    SITE_PAGE("SITE_PAGE"),
    
    BLOG_POST("BLOG_POST"),
    
    IMPORT("IMPORT"),
    
    EXPORT("EXPORT"),
    
    CTA("CTA"),
    
    TASK_TEMPLATE("TASK_TEMPLATE"),
    
    AUTOMATION_PLATFORM_FLOW("AUTOMATION_PLATFORM_FLOW"),
    
    OBJECT_LIST("OBJECT_LIST"),
    
    NOTE("NOTE"),
    
    MEETING_EVENT("MEETING_EVENT"),
    
    CALL("CALL"),
    
    EMAIL("EMAIL"),
    
    PUBLISHING_TASK("PUBLISHING_TASK"),
    
    CONVERSATION_SESSION("CONVERSATION_SESSION"),
    
    CONTACT_CREATE_ATTRIBUTION("CONTACT_CREATE_ATTRIBUTION"),
    
    INVOICE("INVOICE"),
    
    MARKETING_EVENT("MARKETING_EVENT"),
    
    CONVERSATION_INBOX("CONVERSATION_INBOX"),
    
    CHATFLOW("CHATFLOW"),
    
    MEDIA_BRIDGE("MEDIA_BRIDGE"),
    
    SEQUENCE("SEQUENCE"),
    
    SEQUENCE_STEP("SEQUENCE_STEP"),
    
    FORECAST("FORECAST"),
    
    SNIPPET("SNIPPET"),
    
    TEMPLATE("TEMPLATE"),
    
    DEAL_CREATE_ATTRIBUTION("DEAL_CREATE_ATTRIBUTION"),
    
    QUOTE_TEMPLATE("QUOTE_TEMPLATE"),
    
    QUOTE_MODULE("QUOTE_MODULE"),
    
    QUOTE_MODULE_FIELD("QUOTE_MODULE_FIELD"),
    
    QUOTE_FIELD("QUOTE_FIELD"),
    
    SEQUENCE_ENROLLMENT("SEQUENCE_ENROLLMENT"),
    
    SUBSCRIPTION("SUBSCRIPTION"),
    
    ACCEPTANCE_TEST("ACCEPTANCE_TEST"),
    
    SOCIAL_BROADCAST("SOCIAL_BROADCAST"),
    
    DEAL_SPLIT("DEAL_SPLIT"),
    
    DEAL_REGISTRATION("DEAL_REGISTRATION"),
    
    GOAL_TARGET("GOAL_TARGET"),
    
    GOAL_TARGET_GROUP("GOAL_TARGET_GROUP"),
    
    PORTAL_OBJECT_SYNC_MESSAGE("PORTAL_OBJECT_SYNC_MESSAGE"),
    
    FILE_MANAGER_FILE("FILE_MANAGER_FILE"),
    
    FILE_MANAGER_FOLDER("FILE_MANAGER_FOLDER"),
    
    SEQUENCE_STEP_ENROLLMENT("SEQUENCE_STEP_ENROLLMENT"),
    
    APPROVAL("APPROVAL"),
    
    APPROVAL_STEP("APPROVAL_STEP"),
    
    CTA_VARIANT("CTA_VARIANT"),
    
    SALES_DOCUMENT("SALES_DOCUMENT"),
    
    DISCOUNT("DISCOUNT"),
    
    FEE("FEE"),
    
    TAX("TAX"),
    
    MARKETING_CALENDAR("MARKETING_CALENDAR"),
    
    PERMISSIONS_TESTING("PERMISSIONS_TESTING"),
    
    PRIVACY_SCANNER_COOKIE("PRIVACY_SCANNER_COOKIE"),
    
    DATA_SYNC_STATE("DATA_SYNC_STATE"),
    
    WEB_INTERACTIVE("WEB_INTERACTIVE"),
    
    PLAYBOOK("PLAYBOOK"),
    
    FOLDER("FOLDER"),
    
    PLAYBOOK_QUESTION("PLAYBOOK_QUESTION"),
    
    PLAYBOOK_SUBMISSION("PLAYBOOK_SUBMISSION"),
    
    PLAYBOOK_SUBMISSION_ANSWER("PLAYBOOK_SUBMISSION_ANSWER"),
    
    COMMERCE_PAYMENT("COMMERCE_PAYMENT"),
    
    GSC_PROPERTY("GSC_PROPERTY"),
    
    SOX_PROTECTED_DUMMY_TYPE("SOX_PROTECTED_DUMMY_TYPE"),
    
    BLOG_LISTING_PAGE("BLOG_LISTING_PAGE"),
    
    QUARANTINED_SUBMISSION("QUARANTINED_SUBMISSION"),
    
    PAYMENT_SCHEDULE("PAYMENT_SCHEDULE"),
    
    PAYMENT_SCHEDULE_INSTALLMENT("PAYMENT_SCHEDULE_INSTALLMENT"),
    
    MARKETING_CAMPAIGN_UTM("MARKETING_CAMPAIGN_UTM"),
    
    DISCOUNT_TEMPLATE("DISCOUNT_TEMPLATE"),
    
    DISCOUNT_CODE("DISCOUNT_CODE"),
    
    FEEDBACK_SURVEY("FEEDBACK_SURVEY"),
    
    CMS_URL("CMS_URL"),
    
    SALES_TASK("SALES_TASK"),
    
    SALES_WORKLOAD("SALES_WORKLOAD"),
    
    USER("USER"),
    
    POSTAL_MAIL("POSTAL_MAIL"),
    
    SCHEMAS_BACKEND_TEST("SCHEMAS_BACKEND_TEST"),
    
    PAYMENT_LINK("PAYMENT_LINK"),
    
    SUBMISSION_TAG("SUBMISSION_TAG"),
    
    CAMPAIGN_STEP("CAMPAIGN_STEP"),
    
    SCHEDULING_PAGE("SCHEDULING_PAGE"),
    
    SOX_PROTECTED_TEST_TYPE("SOX_PROTECTED_TEST_TYPE"),
    
    ORDER("ORDER"),
    
    MARKETING_SMS("MARKETING_SMS"),
    
    PARTNER_ACCOUNT("PARTNER_ACCOUNT"),
    
    CAMPAIGN_TEMPLATE("CAMPAIGN_TEMPLATE"),
    
    CAMPAIGN_TEMPLATE_STEP("CAMPAIGN_TEMPLATE_STEP"),
    
    PLAYLIST("PLAYLIST"),
    
    CLIP("CLIP"),
    
    CAMPAIGN_BUDGET_ITEM("CAMPAIGN_BUDGET_ITEM"),
    
    CAMPAIGN_SPEND_ITEM("CAMPAIGN_SPEND_ITEM"),
    
    MIC("MIC"),
    
    CONTENT_AUDIT("CONTENT_AUDIT"),
    
    CONTENT_AUDIT_PAGE("CONTENT_AUDIT_PAGE"),
    
    PLAYLIST_FOLDER("PLAYLIST_FOLDER"),
    
    LEAD("LEAD"),
    
    ABANDONED_CART("ABANDONED_CART"),
    
    EXTERNAL_WEB_URL("EXTERNAL_WEB_URL"),
    
    VIEW("VIEW"),
    
    VIEW_BLOCK("VIEW_BLOCK"),
    
    ROSTER("ROSTER"),
    
    CART("CART"),
    
    AUTOMATION_PLATFORM_FLOW_ACTION("AUTOMATION_PLATFORM_FLOW_ACTION"),
    
    SOCIAL_PROFILE("SOCIAL_PROFILE"),
    
    PARTNER_CLIENT("PARTNER_CLIENT"),
    
    ROSTER_MEMBER("ROSTER_MEMBER"),
    
    MARKETING_EVENT_ATTENDANCE("MARKETING_EVENT_ATTENDANCE"),
    
    ALL_PAGES("ALL_PAGES"),
    
    AI_FORECAST("AI_FORECAST"),
    
    CRM_PIPELINES_DUMMY_TYPE("CRM_PIPELINES_DUMMY_TYPE"),
    
    KNOWLEDGE_ARTICLE("KNOWLEDGE_ARTICLE"),
    
    PROPERTY_INFO("PROPERTY_INFO"),
    
    DATA_PRIVACY_CONSENT("DATA_PRIVACY_CONSENT"),
    
    GOAL_TEMPLATE("GOAL_TEMPLATE"),
    
    SCORE_CONFIGURATION("SCORE_CONFIGURATION"),
    
    AUDIENCE("AUDIENCE"),
    
    PARTNER_CLIENT_REVENUE("PARTNER_CLIENT_REVENUE"),
    
    AUTOMATION_JOURNEY("AUTOMATION_JOURNEY"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    ReferencedObjectTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReferencedObjectTypeEnum fromValue(String value) {
      for (ReferencedObjectTypeEnum b : ReferencedObjectTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReferencedObjectTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReferencedObjectTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReferencedObjectTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReferencedObjectTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReferencedObjectTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REFERENCED_OBJECT_TYPE = "referencedObjectType";
  @SerializedName(SERIALIZED_NAME_REFERENCED_OBJECT_TYPE)
  private ReferencedObjectTypeEnum referencedObjectType;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    STRING("string"),
    
    NUMBER("number"),
    
    BOOL("bool"),
    
    DATETIME("datetime"),
    
    ENUMERATION("enumeration"),
    
    DATE("date"),
    
    PHONE_NUMBER("phone_number"),
    
    CURRENCY_NUMBER("currency_number"),
    
    JSON("json"),
    
    OBJECT_COORDINATES("object_coordinates");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public FieldTypeDefinition() {
  }

  public FieldTypeDefinition description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public FieldTypeDefinition externalOptions(Boolean externalOptions) {
    this.externalOptions = externalOptions;
    return this;
  }

  /**
   * Get externalOptions
   * @return externalOptions
   */
  @javax.annotation.Nonnull
  public Boolean getExternalOptions() {
    return externalOptions;
  }

  public void setExternalOptions(Boolean externalOptions) {
    this.externalOptions = externalOptions;
  }


  public FieldTypeDefinition externalOptionsReferenceType(String externalOptionsReferenceType) {
    this.externalOptionsReferenceType = externalOptionsReferenceType;
    return this;
  }

  /**
   * Get externalOptionsReferenceType
   * @return externalOptionsReferenceType
   */
  @javax.annotation.Nullable
  public String getExternalOptionsReferenceType() {
    return externalOptionsReferenceType;
  }

  public void setExternalOptionsReferenceType(String externalOptionsReferenceType) {
    this.externalOptionsReferenceType = externalOptionsReferenceType;
  }


  public FieldTypeDefinition fieldType(FieldTypeEnum fieldType) {
    this.fieldType = fieldType;
    return this;
  }

  /**
   * Get fieldType
   * @return fieldType
   */
  @javax.annotation.Nullable
  public FieldTypeEnum getFieldType() {
    return fieldType;
  }

  public void setFieldType(FieldTypeEnum fieldType) {
    this.fieldType = fieldType;
  }


  public FieldTypeDefinition helpText(String helpText) {
    this.helpText = helpText;
    return this;
  }

  /**
   * Get helpText
   * @return helpText
   */
  @javax.annotation.Nullable
  public String getHelpText() {
    return helpText;
  }

  public void setHelpText(String helpText) {
    this.helpText = helpText;
  }


  public FieldTypeDefinition label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public FieldTypeDefinition name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FieldTypeDefinition options(List<Option> options) {
    this.options = options;
    return this;
  }

  public FieldTypeDefinition addOptionsItem(Option optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nonnull
  public List<Option> getOptions() {
    return options;
  }

  public void setOptions(List<Option> options) {
    this.options = options;
  }


  public FieldTypeDefinition optionsUrl(String optionsUrl) {
    this.optionsUrl = optionsUrl;
    return this;
  }

  /**
   * Get optionsUrl
   * @return optionsUrl
   */
  @javax.annotation.Nullable
  public String getOptionsUrl() {
    return optionsUrl;
  }

  public void setOptionsUrl(String optionsUrl) {
    this.optionsUrl = optionsUrl;
  }


  public FieldTypeDefinition referencedObjectType(ReferencedObjectTypeEnum referencedObjectType) {
    this.referencedObjectType = referencedObjectType;
    return this;
  }

  /**
   * Get referencedObjectType
   * @return referencedObjectType
   */
  @javax.annotation.Nullable
  public ReferencedObjectTypeEnum getReferencedObjectType() {
    return referencedObjectType;
  }

  public void setReferencedObjectType(ReferencedObjectTypeEnum referencedObjectType) {
    this.referencedObjectType = referencedObjectType;
  }


  public FieldTypeDefinition type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldTypeDefinition fieldTypeDefinition = (FieldTypeDefinition) o;
    return Objects.equals(this.description, fieldTypeDefinition.description) &&
        Objects.equals(this.externalOptions, fieldTypeDefinition.externalOptions) &&
        Objects.equals(this.externalOptionsReferenceType, fieldTypeDefinition.externalOptionsReferenceType) &&
        Objects.equals(this.fieldType, fieldTypeDefinition.fieldType) &&
        Objects.equals(this.helpText, fieldTypeDefinition.helpText) &&
        Objects.equals(this.label, fieldTypeDefinition.label) &&
        Objects.equals(this.name, fieldTypeDefinition.name) &&
        Objects.equals(this.options, fieldTypeDefinition.options) &&
        Objects.equals(this.optionsUrl, fieldTypeDefinition.optionsUrl) &&
        Objects.equals(this.referencedObjectType, fieldTypeDefinition.referencedObjectType) &&
        Objects.equals(this.type, fieldTypeDefinition.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, externalOptions, externalOptionsReferenceType, fieldType, helpText, label, name, options, optionsUrl, referencedObjectType, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldTypeDefinition {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    externalOptions: ").append(toIndentedString(externalOptions)).append("\n");
    sb.append("    externalOptionsReferenceType: ").append(toIndentedString(externalOptionsReferenceType)).append("\n");
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("    helpText: ").append(toIndentedString(helpText)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    optionsUrl: ").append(toIndentedString(optionsUrl)).append("\n");
    sb.append("    referencedObjectType: ").append(toIndentedString(referencedObjectType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("externalOptions");
    openapiFields.add("externalOptionsReferenceType");
    openapiFields.add("fieldType");
    openapiFields.add("helpText");
    openapiFields.add("label");
    openapiFields.add("name");
    openapiFields.add("options");
    openapiFields.add("optionsUrl");
    openapiFields.add("referencedObjectType");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("externalOptions");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("options");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FieldTypeDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FieldTypeDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FieldTypeDefinition is not found in the empty JSON string", FieldTypeDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FieldTypeDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FieldTypeDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FieldTypeDefinition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("externalOptionsReferenceType") != null && !jsonObj.get("externalOptionsReferenceType").isJsonNull()) && !jsonObj.get("externalOptionsReferenceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalOptionsReferenceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalOptionsReferenceType").toString()));
      }
      if ((jsonObj.get("fieldType") != null && !jsonObj.get("fieldType").isJsonNull()) && !jsonObj.get("fieldType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldType").toString()));
      }
      // validate the optional field `fieldType`
      if (jsonObj.get("fieldType") != null && !jsonObj.get("fieldType").isJsonNull()) {
        FieldTypeEnum.validateJsonElement(jsonObj.get("fieldType"));
      }
      if ((jsonObj.get("helpText") != null && !jsonObj.get("helpText").isJsonNull()) && !jsonObj.get("helpText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `helpText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("helpText").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("options").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `options` to be an array in the JSON string but got `%s`", jsonObj.get("options").toString()));
      }

      JsonArray jsonArrayoptions = jsonObj.getAsJsonArray("options");
      // validate the required field `options` (array)
      for (int i = 0; i < jsonArrayoptions.size(); i++) {
        Option.validateJsonElement(jsonArrayoptions.get(i));
      };
      if ((jsonObj.get("optionsUrl") != null && !jsonObj.get("optionsUrl").isJsonNull()) && !jsonObj.get("optionsUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optionsUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optionsUrl").toString()));
      }
      if ((jsonObj.get("referencedObjectType") != null && !jsonObj.get("referencedObjectType").isJsonNull()) && !jsonObj.get("referencedObjectType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referencedObjectType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referencedObjectType").toString()));
      }
      // validate the optional field `referencedObjectType`
      if (jsonObj.get("referencedObjectType") != null && !jsonObj.get("referencedObjectType").isJsonNull()) {
        ReferencedObjectTypeEnum.validateJsonElement(jsonObj.get("referencedObjectType"));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FieldTypeDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FieldTypeDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FieldTypeDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FieldTypeDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<FieldTypeDefinition>() {
           @Override
           public void write(JsonWriter out, FieldTypeDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FieldTypeDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FieldTypeDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FieldTypeDefinition
   * @throws IOException if the JSON string is invalid with respect to FieldTypeDefinition
   */
  public static FieldTypeDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FieldTypeDefinition.class);
  }

  /**
   * Convert an instance of FieldTypeDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

