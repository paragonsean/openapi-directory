/*
 * Automation Actions V4
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PublicActionLabels
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:15.898770-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PublicActionLabels {
  public static final String SERIALIZED_NAME_ACTION_CARD_CONTENT = "actionCardContent";
  @SerializedName(SERIALIZED_NAME_ACTION_CARD_CONTENT)
  private String actionCardContent;

  public static final String SERIALIZED_NAME_ACTION_DESCRIPTION = "actionDescription";
  @SerializedName(SERIALIZED_NAME_ACTION_DESCRIPTION)
  private String actionDescription;

  public static final String SERIALIZED_NAME_ACTION_NAME = "actionName";
  @SerializedName(SERIALIZED_NAME_ACTION_NAME)
  private String actionName;

  public static final String SERIALIZED_NAME_APP_DISPLAY_NAME = "appDisplayName";
  @SerializedName(SERIALIZED_NAME_APP_DISPLAY_NAME)
  private String appDisplayName;

  public static final String SERIALIZED_NAME_EXECUTION_RULES = "executionRules";
  @SerializedName(SERIALIZED_NAME_EXECUTION_RULES)
  private Map<String, String> executionRules = new HashMap<>();

  public static final String SERIALIZED_NAME_INPUT_FIELD_DESCRIPTIONS = "inputFieldDescriptions";
  @SerializedName(SERIALIZED_NAME_INPUT_FIELD_DESCRIPTIONS)
  private Map<String, String> inputFieldDescriptions = new HashMap<>();

  public static final String SERIALIZED_NAME_INPUT_FIELD_LABELS = "inputFieldLabels";
  @SerializedName(SERIALIZED_NAME_INPUT_FIELD_LABELS)
  private Map<String, String> inputFieldLabels = new HashMap<>();

  public static final String SERIALIZED_NAME_INPUT_FIELD_OPTION_LABELS = "inputFieldOptionLabels";
  @SerializedName(SERIALIZED_NAME_INPUT_FIELD_OPTION_LABELS)
  private Map<String, Map<String, String>> inputFieldOptionLabels = new HashMap<>();

  public static final String SERIALIZED_NAME_OUTPUT_FIELD_LABELS = "outputFieldLabels";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FIELD_LABELS)
  private Map<String, String> outputFieldLabels = new HashMap<>();

  public PublicActionLabels() {
  }

  public PublicActionLabels actionCardContent(String actionCardContent) {
    this.actionCardContent = actionCardContent;
    return this;
  }

  /**
   * Get actionCardContent
   * @return actionCardContent
   */
  @javax.annotation.Nullable
  public String getActionCardContent() {
    return actionCardContent;
  }

  public void setActionCardContent(String actionCardContent) {
    this.actionCardContent = actionCardContent;
  }


  public PublicActionLabels actionDescription(String actionDescription) {
    this.actionDescription = actionDescription;
    return this;
  }

  /**
   * Get actionDescription
   * @return actionDescription
   */
  @javax.annotation.Nullable
  public String getActionDescription() {
    return actionDescription;
  }

  public void setActionDescription(String actionDescription) {
    this.actionDescription = actionDescription;
  }


  public PublicActionLabels actionName(String actionName) {
    this.actionName = actionName;
    return this;
  }

  /**
   * Get actionName
   * @return actionName
   */
  @javax.annotation.Nonnull
  public String getActionName() {
    return actionName;
  }

  public void setActionName(String actionName) {
    this.actionName = actionName;
  }


  public PublicActionLabels appDisplayName(String appDisplayName) {
    this.appDisplayName = appDisplayName;
    return this;
  }

  /**
   * Get appDisplayName
   * @return appDisplayName
   */
  @javax.annotation.Nullable
  public String getAppDisplayName() {
    return appDisplayName;
  }

  public void setAppDisplayName(String appDisplayName) {
    this.appDisplayName = appDisplayName;
  }


  public PublicActionLabels executionRules(Map<String, String> executionRules) {
    this.executionRules = executionRules;
    return this;
  }

  public PublicActionLabels putExecutionRulesItem(String key, String executionRulesItem) {
    if (this.executionRules == null) {
      this.executionRules = new HashMap<>();
    }
    this.executionRules.put(key, executionRulesItem);
    return this;
  }

  /**
   * Get executionRules
   * @return executionRules
   */
  @javax.annotation.Nullable
  public Map<String, String> getExecutionRules() {
    return executionRules;
  }

  public void setExecutionRules(Map<String, String> executionRules) {
    this.executionRules = executionRules;
  }


  public PublicActionLabels inputFieldDescriptions(Map<String, String> inputFieldDescriptions) {
    this.inputFieldDescriptions = inputFieldDescriptions;
    return this;
  }

  public PublicActionLabels putInputFieldDescriptionsItem(String key, String inputFieldDescriptionsItem) {
    if (this.inputFieldDescriptions == null) {
      this.inputFieldDescriptions = new HashMap<>();
    }
    this.inputFieldDescriptions.put(key, inputFieldDescriptionsItem);
    return this;
  }

  /**
   * Get inputFieldDescriptions
   * @return inputFieldDescriptions
   */
  @javax.annotation.Nullable
  public Map<String, String> getInputFieldDescriptions() {
    return inputFieldDescriptions;
  }

  public void setInputFieldDescriptions(Map<String, String> inputFieldDescriptions) {
    this.inputFieldDescriptions = inputFieldDescriptions;
  }


  public PublicActionLabels inputFieldLabels(Map<String, String> inputFieldLabels) {
    this.inputFieldLabels = inputFieldLabels;
    return this;
  }

  public PublicActionLabels putInputFieldLabelsItem(String key, String inputFieldLabelsItem) {
    if (this.inputFieldLabels == null) {
      this.inputFieldLabels = new HashMap<>();
    }
    this.inputFieldLabels.put(key, inputFieldLabelsItem);
    return this;
  }

  /**
   * Get inputFieldLabels
   * @return inputFieldLabels
   */
  @javax.annotation.Nullable
  public Map<String, String> getInputFieldLabels() {
    return inputFieldLabels;
  }

  public void setInputFieldLabels(Map<String, String> inputFieldLabels) {
    this.inputFieldLabels = inputFieldLabels;
  }


  public PublicActionLabels inputFieldOptionLabels(Map<String, Map<String, String>> inputFieldOptionLabels) {
    this.inputFieldOptionLabels = inputFieldOptionLabels;
    return this;
  }

  public PublicActionLabels putInputFieldOptionLabelsItem(String key, Map<String, String> inputFieldOptionLabelsItem) {
    if (this.inputFieldOptionLabels == null) {
      this.inputFieldOptionLabels = new HashMap<>();
    }
    this.inputFieldOptionLabels.put(key, inputFieldOptionLabelsItem);
    return this;
  }

  /**
   * Get inputFieldOptionLabels
   * @return inputFieldOptionLabels
   */
  @javax.annotation.Nullable
  public Map<String, Map<String, String>> getInputFieldOptionLabels() {
    return inputFieldOptionLabels;
  }

  public void setInputFieldOptionLabels(Map<String, Map<String, String>> inputFieldOptionLabels) {
    this.inputFieldOptionLabels = inputFieldOptionLabels;
  }


  public PublicActionLabels outputFieldLabels(Map<String, String> outputFieldLabels) {
    this.outputFieldLabels = outputFieldLabels;
    return this;
  }

  public PublicActionLabels putOutputFieldLabelsItem(String key, String outputFieldLabelsItem) {
    if (this.outputFieldLabels == null) {
      this.outputFieldLabels = new HashMap<>();
    }
    this.outputFieldLabels.put(key, outputFieldLabelsItem);
    return this;
  }

  /**
   * Get outputFieldLabels
   * @return outputFieldLabels
   */
  @javax.annotation.Nullable
  public Map<String, String> getOutputFieldLabels() {
    return outputFieldLabels;
  }

  public void setOutputFieldLabels(Map<String, String> outputFieldLabels) {
    this.outputFieldLabels = outputFieldLabels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublicActionLabels publicActionLabels = (PublicActionLabels) o;
    return Objects.equals(this.actionCardContent, publicActionLabels.actionCardContent) &&
        Objects.equals(this.actionDescription, publicActionLabels.actionDescription) &&
        Objects.equals(this.actionName, publicActionLabels.actionName) &&
        Objects.equals(this.appDisplayName, publicActionLabels.appDisplayName) &&
        Objects.equals(this.executionRules, publicActionLabels.executionRules) &&
        Objects.equals(this.inputFieldDescriptions, publicActionLabels.inputFieldDescriptions) &&
        Objects.equals(this.inputFieldLabels, publicActionLabels.inputFieldLabels) &&
        Objects.equals(this.inputFieldOptionLabels, publicActionLabels.inputFieldOptionLabels) &&
        Objects.equals(this.outputFieldLabels, publicActionLabels.outputFieldLabels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionCardContent, actionDescription, actionName, appDisplayName, executionRules, inputFieldDescriptions, inputFieldLabels, inputFieldOptionLabels, outputFieldLabels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublicActionLabels {\n");
    sb.append("    actionCardContent: ").append(toIndentedString(actionCardContent)).append("\n");
    sb.append("    actionDescription: ").append(toIndentedString(actionDescription)).append("\n");
    sb.append("    actionName: ").append(toIndentedString(actionName)).append("\n");
    sb.append("    appDisplayName: ").append(toIndentedString(appDisplayName)).append("\n");
    sb.append("    executionRules: ").append(toIndentedString(executionRules)).append("\n");
    sb.append("    inputFieldDescriptions: ").append(toIndentedString(inputFieldDescriptions)).append("\n");
    sb.append("    inputFieldLabels: ").append(toIndentedString(inputFieldLabels)).append("\n");
    sb.append("    inputFieldOptionLabels: ").append(toIndentedString(inputFieldOptionLabels)).append("\n");
    sb.append("    outputFieldLabels: ").append(toIndentedString(outputFieldLabels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionCardContent");
    openapiFields.add("actionDescription");
    openapiFields.add("actionName");
    openapiFields.add("appDisplayName");
    openapiFields.add("executionRules");
    openapiFields.add("inputFieldDescriptions");
    openapiFields.add("inputFieldLabels");
    openapiFields.add("inputFieldOptionLabels");
    openapiFields.add("outputFieldLabels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("actionName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublicActionLabels
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublicActionLabels.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublicActionLabels is not found in the empty JSON string", PublicActionLabels.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublicActionLabels.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublicActionLabels` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PublicActionLabels.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actionCardContent") != null && !jsonObj.get("actionCardContent").isJsonNull()) && !jsonObj.get("actionCardContent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionCardContent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionCardContent").toString()));
      }
      if ((jsonObj.get("actionDescription") != null && !jsonObj.get("actionDescription").isJsonNull()) && !jsonObj.get("actionDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionDescription").toString()));
      }
      if (!jsonObj.get("actionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionName").toString()));
      }
      if ((jsonObj.get("appDisplayName") != null && !jsonObj.get("appDisplayName").isJsonNull()) && !jsonObj.get("appDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appDisplayName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublicActionLabels.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublicActionLabels' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublicActionLabels> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublicActionLabels.class));

       return (TypeAdapter<T>) new TypeAdapter<PublicActionLabels>() {
           @Override
           public void write(JsonWriter out, PublicActionLabels value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublicActionLabels read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublicActionLabels given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublicActionLabels
   * @throws IOException if the JSON string is invalid with respect to PublicActionLabels
   */
  public static PublicActionLabels fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublicActionLabels.class);
  }

  /**
   * Convert an instance of PublicActionLabels to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

