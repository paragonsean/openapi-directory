/*
 * Automation Actions V4
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CollectionResponsePublicActionDefinitionForwardPaging;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.PublicActionDefinition;
import org.openapitools.client.model.PublicActionDefinitionEgg;
import org.openapitools.client.model.PublicActionDefinitionPatch;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefinitionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefinitionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefinitionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteAutomationV4ActionsAppIdDefinitionIdArchive
     * @param definitionId  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAutomationV4ActionsAppIdDefinitionIdArchiveCall(String definitionId, Integer appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automation/v4/actions/{appId}/{definitionId}"
            .replace("{" + "definitionId" + "}", localVarApiClient.escapeString(definitionId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developer_hapikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAutomationV4ActionsAppIdDefinitionIdArchiveValidateBeforeCall(String definitionId, Integer appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'definitionId' is set
        if (definitionId == null) {
            throw new ApiException("Missing the required parameter 'definitionId' when calling deleteAutomationV4ActionsAppIdDefinitionIdArchive(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteAutomationV4ActionsAppIdDefinitionIdArchive(Async)");
        }

        return deleteAutomationV4ActionsAppIdDefinitionIdArchiveCall(definitionId, appId, _callback);

    }

    /**
     * Archive an extension definition
     * 
     * @param definitionId  (required)
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAutomationV4ActionsAppIdDefinitionIdArchive(String definitionId, Integer appId) throws ApiException {
        deleteAutomationV4ActionsAppIdDefinitionIdArchiveWithHttpInfo(definitionId, appId);
    }

    /**
     * Archive an extension definition
     * 
     * @param definitionId  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAutomationV4ActionsAppIdDefinitionIdArchiveWithHttpInfo(String definitionId, Integer appId) throws ApiException {
        okhttp3.Call localVarCall = deleteAutomationV4ActionsAppIdDefinitionIdArchiveValidateBeforeCall(definitionId, appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Archive an extension definition (asynchronously)
     * 
     * @param definitionId  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAutomationV4ActionsAppIdDefinitionIdArchiveAsync(String definitionId, Integer appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAutomationV4ActionsAppIdDefinitionIdArchiveValidateBeforeCall(definitionId, appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAutomationV4ActionsAppIdDefinitionIdGetById
     * @param definitionId  (required)
     * @param appId  (required)
     * @param archived Whether to return only results that have been archived. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutomationV4ActionsAppIdDefinitionIdGetByIdCall(String definitionId, Integer appId, Boolean archived, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automation/v4/actions/{appId}/{definitionId}"
            .replace("{" + "definitionId" + "}", localVarApiClient.escapeString(definitionId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (archived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("archived", archived));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developer_hapikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAutomationV4ActionsAppIdDefinitionIdGetByIdValidateBeforeCall(String definitionId, Integer appId, Boolean archived, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'definitionId' is set
        if (definitionId == null) {
            throw new ApiException("Missing the required parameter 'definitionId' when calling getAutomationV4ActionsAppIdDefinitionIdGetById(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getAutomationV4ActionsAppIdDefinitionIdGetById(Async)");
        }

        return getAutomationV4ActionsAppIdDefinitionIdGetByIdCall(definitionId, appId, archived, _callback);

    }

    /**
     * Get extension definition by Id
     * 
     * @param definitionId  (required)
     * @param appId  (required)
     * @param archived Whether to return only results that have been archived. (optional, default to false)
     * @return PublicActionDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public PublicActionDefinition getAutomationV4ActionsAppIdDefinitionIdGetById(String definitionId, Integer appId, Boolean archived) throws ApiException {
        ApiResponse<PublicActionDefinition> localVarResp = getAutomationV4ActionsAppIdDefinitionIdGetByIdWithHttpInfo(definitionId, appId, archived);
        return localVarResp.getData();
    }

    /**
     * Get extension definition by Id
     * 
     * @param definitionId  (required)
     * @param appId  (required)
     * @param archived Whether to return only results that have been archived. (optional, default to false)
     * @return ApiResponse&lt;PublicActionDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicActionDefinition> getAutomationV4ActionsAppIdDefinitionIdGetByIdWithHttpInfo(String definitionId, Integer appId, Boolean archived) throws ApiException {
        okhttp3.Call localVarCall = getAutomationV4ActionsAppIdDefinitionIdGetByIdValidateBeforeCall(definitionId, appId, archived, null);
        Type localVarReturnType = new TypeToken<PublicActionDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get extension definition by Id (asynchronously)
     * 
     * @param definitionId  (required)
     * @param appId  (required)
     * @param archived Whether to return only results that have been archived. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutomationV4ActionsAppIdDefinitionIdGetByIdAsync(String definitionId, Integer appId, Boolean archived, final ApiCallback<PublicActionDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAutomationV4ActionsAppIdDefinitionIdGetByIdValidateBeforeCall(definitionId, appId, archived, _callback);
        Type localVarReturnType = new TypeToken<PublicActionDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAutomationV4ActionsAppIdGetPage
     * @param appId  (required)
     * @param limit The maximum number of results to display per page. (optional)
     * @param after The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)
     * @param archived Whether to return only results that have been archived. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutomationV4ActionsAppIdGetPageCall(Integer appId, Integer limit, String after, Boolean archived, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automation/v4/actions/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (archived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("archived", archived));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developer_hapikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAutomationV4ActionsAppIdGetPageValidateBeforeCall(Integer appId, Integer limit, String after, Boolean archived, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getAutomationV4ActionsAppIdGetPage(Async)");
        }

        return getAutomationV4ActionsAppIdGetPageCall(appId, limit, after, archived, _callback);

    }

    /**
     * Get paged extension definitions
     * 
     * @param appId  (required)
     * @param limit The maximum number of results to display per page. (optional)
     * @param after The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)
     * @param archived Whether to return only results that have been archived. (optional, default to false)
     * @return CollectionResponsePublicActionDefinitionForwardPaging
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public CollectionResponsePublicActionDefinitionForwardPaging getAutomationV4ActionsAppIdGetPage(Integer appId, Integer limit, String after, Boolean archived) throws ApiException {
        ApiResponse<CollectionResponsePublicActionDefinitionForwardPaging> localVarResp = getAutomationV4ActionsAppIdGetPageWithHttpInfo(appId, limit, after, archived);
        return localVarResp.getData();
    }

    /**
     * Get paged extension definitions
     * 
     * @param appId  (required)
     * @param limit The maximum number of results to display per page. (optional)
     * @param after The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)
     * @param archived Whether to return only results that have been archived. (optional, default to false)
     * @return ApiResponse&lt;CollectionResponsePublicActionDefinitionForwardPaging&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollectionResponsePublicActionDefinitionForwardPaging> getAutomationV4ActionsAppIdGetPageWithHttpInfo(Integer appId, Integer limit, String after, Boolean archived) throws ApiException {
        okhttp3.Call localVarCall = getAutomationV4ActionsAppIdGetPageValidateBeforeCall(appId, limit, after, archived, null);
        Type localVarReturnType = new TypeToken<CollectionResponsePublicActionDefinitionForwardPaging>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get paged extension definitions (asynchronously)
     * 
     * @param appId  (required)
     * @param limit The maximum number of results to display per page. (optional)
     * @param after The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)
     * @param archived Whether to return only results that have been archived. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutomationV4ActionsAppIdGetPageAsync(Integer appId, Integer limit, String after, Boolean archived, final ApiCallback<CollectionResponsePublicActionDefinitionForwardPaging> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAutomationV4ActionsAppIdGetPageValidateBeforeCall(appId, limit, after, archived, _callback);
        Type localVarReturnType = new TypeToken<CollectionResponsePublicActionDefinitionForwardPaging>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchAutomationV4ActionsAppIdDefinitionIdUpdate
     * @param definitionId  (required)
     * @param appId  (required)
     * @param publicActionDefinitionPatch  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchAutomationV4ActionsAppIdDefinitionIdUpdateCall(String definitionId, Integer appId, PublicActionDefinitionPatch publicActionDefinitionPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = publicActionDefinitionPatch;

        // create path and map variables
        String localVarPath = "/automation/v4/actions/{appId}/{definitionId}"
            .replace("{" + "definitionId" + "}", localVarApiClient.escapeString(definitionId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developer_hapikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchAutomationV4ActionsAppIdDefinitionIdUpdateValidateBeforeCall(String definitionId, Integer appId, PublicActionDefinitionPatch publicActionDefinitionPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'definitionId' is set
        if (definitionId == null) {
            throw new ApiException("Missing the required parameter 'definitionId' when calling patchAutomationV4ActionsAppIdDefinitionIdUpdate(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling patchAutomationV4ActionsAppIdDefinitionIdUpdate(Async)");
        }

        // verify the required parameter 'publicActionDefinitionPatch' is set
        if (publicActionDefinitionPatch == null) {
            throw new ApiException("Missing the required parameter 'publicActionDefinitionPatch' when calling patchAutomationV4ActionsAppIdDefinitionIdUpdate(Async)");
        }

        return patchAutomationV4ActionsAppIdDefinitionIdUpdateCall(definitionId, appId, publicActionDefinitionPatch, _callback);

    }

    /**
     * Patch an existing extension definition
     * 
     * @param definitionId  (required)
     * @param appId  (required)
     * @param publicActionDefinitionPatch  (required)
     * @return PublicActionDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public PublicActionDefinition patchAutomationV4ActionsAppIdDefinitionIdUpdate(String definitionId, Integer appId, PublicActionDefinitionPatch publicActionDefinitionPatch) throws ApiException {
        ApiResponse<PublicActionDefinition> localVarResp = patchAutomationV4ActionsAppIdDefinitionIdUpdateWithHttpInfo(definitionId, appId, publicActionDefinitionPatch);
        return localVarResp.getData();
    }

    /**
     * Patch an existing extension definition
     * 
     * @param definitionId  (required)
     * @param appId  (required)
     * @param publicActionDefinitionPatch  (required)
     * @return ApiResponse&lt;PublicActionDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicActionDefinition> patchAutomationV4ActionsAppIdDefinitionIdUpdateWithHttpInfo(String definitionId, Integer appId, PublicActionDefinitionPatch publicActionDefinitionPatch) throws ApiException {
        okhttp3.Call localVarCall = patchAutomationV4ActionsAppIdDefinitionIdUpdateValidateBeforeCall(definitionId, appId, publicActionDefinitionPatch, null);
        Type localVarReturnType = new TypeToken<PublicActionDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch an existing extension definition (asynchronously)
     * 
     * @param definitionId  (required)
     * @param appId  (required)
     * @param publicActionDefinitionPatch  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchAutomationV4ActionsAppIdDefinitionIdUpdateAsync(String definitionId, Integer appId, PublicActionDefinitionPatch publicActionDefinitionPatch, final ApiCallback<PublicActionDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchAutomationV4ActionsAppIdDefinitionIdUpdateValidateBeforeCall(definitionId, appId, publicActionDefinitionPatch, _callback);
        Type localVarReturnType = new TypeToken<PublicActionDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postAutomationV4ActionsAppIdCreate
     * @param appId  (required)
     * @param publicActionDefinitionEgg  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAutomationV4ActionsAppIdCreateCall(Integer appId, PublicActionDefinitionEgg publicActionDefinitionEgg, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = publicActionDefinitionEgg;

        // create path and map variables
        String localVarPath = "/automation/v4/actions/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developer_hapikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postAutomationV4ActionsAppIdCreateValidateBeforeCall(Integer appId, PublicActionDefinitionEgg publicActionDefinitionEgg, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling postAutomationV4ActionsAppIdCreate(Async)");
        }

        // verify the required parameter 'publicActionDefinitionEgg' is set
        if (publicActionDefinitionEgg == null) {
            throw new ApiException("Missing the required parameter 'publicActionDefinitionEgg' when calling postAutomationV4ActionsAppIdCreate(Async)");
        }

        return postAutomationV4ActionsAppIdCreateCall(appId, publicActionDefinitionEgg, _callback);

    }

    /**
     * Create a new extension definition
     * 
     * @param appId  (required)
     * @param publicActionDefinitionEgg  (required)
     * @return PublicActionDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public PublicActionDefinition postAutomationV4ActionsAppIdCreate(Integer appId, PublicActionDefinitionEgg publicActionDefinitionEgg) throws ApiException {
        ApiResponse<PublicActionDefinition> localVarResp = postAutomationV4ActionsAppIdCreateWithHttpInfo(appId, publicActionDefinitionEgg);
        return localVarResp.getData();
    }

    /**
     * Create a new extension definition
     * 
     * @param appId  (required)
     * @param publicActionDefinitionEgg  (required)
     * @return ApiResponse&lt;PublicActionDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicActionDefinition> postAutomationV4ActionsAppIdCreateWithHttpInfo(Integer appId, PublicActionDefinitionEgg publicActionDefinitionEgg) throws ApiException {
        okhttp3.Call localVarCall = postAutomationV4ActionsAppIdCreateValidateBeforeCall(appId, publicActionDefinitionEgg, null);
        Type localVarReturnType = new TypeToken<PublicActionDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new extension definition (asynchronously)
     * 
     * @param appId  (required)
     * @param publicActionDefinitionEgg  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAutomationV4ActionsAppIdCreateAsync(Integer appId, PublicActionDefinitionEgg publicActionDefinitionEgg, final ApiCallback<PublicActionDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = postAutomationV4ActionsAppIdCreateValidateBeforeCall(appId, publicActionDefinitionEgg, _callback);
        Type localVarReturnType = new TypeToken<PublicActionDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
