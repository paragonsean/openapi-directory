/*
 * Automation Actions V4
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.InputFieldDefinition;
import org.openapitools.client.model.OutputFieldDefinition;
import org.openapitools.client.model.PublicActionDefinitionInputFieldDependenciesInner;
import org.openapitools.client.model.PublicActionLabels;
import org.openapitools.client.model.PublicExecutionTranslationRule;
import org.openapitools.client.model.PublicObjectRequestOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PublicActionDefinitionPatch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:15.898770-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PublicActionDefinitionPatch {
  public static final String SERIALIZED_NAME_ACTION_URL = "actionUrl";
  @SerializedName(SERIALIZED_NAME_ACTION_URL)
  private String actionUrl;

  public static final String SERIALIZED_NAME_EXECUTION_RULES = "executionRules";
  @SerializedName(SERIALIZED_NAME_EXECUTION_RULES)
  private List<PublicExecutionTranslationRule> executionRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_INPUT_FIELD_DEPENDENCIES = "inputFieldDependencies";
  @SerializedName(SERIALIZED_NAME_INPUT_FIELD_DEPENDENCIES)
  private List<PublicActionDefinitionInputFieldDependenciesInner> inputFieldDependencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_INPUT_FIELDS = "inputFields";
  @SerializedName(SERIALIZED_NAME_INPUT_FIELDS)
  private List<InputFieldDefinition> inputFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, PublicActionLabels> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_OBJECT_REQUEST_OPTIONS = "objectRequestOptions";
  @SerializedName(SERIALIZED_NAME_OBJECT_REQUEST_OPTIONS)
  private PublicObjectRequestOptions objectRequestOptions;

  public static final String SERIALIZED_NAME_OBJECT_TYPES = "objectTypes";
  @SerializedName(SERIALIZED_NAME_OBJECT_TYPES)
  private List<String> objectTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTPUT_FIELDS = "outputFields";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FIELDS)
  private List<OutputFieldDefinition> outputFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUBLISHED = "published";
  @SerializedName(SERIALIZED_NAME_PUBLISHED)
  private Boolean published;

  public PublicActionDefinitionPatch() {
  }

  public PublicActionDefinitionPatch actionUrl(String actionUrl) {
    this.actionUrl = actionUrl;
    return this;
  }

  /**
   * Get actionUrl
   * @return actionUrl
   */
  @javax.annotation.Nullable
  public String getActionUrl() {
    return actionUrl;
  }

  public void setActionUrl(String actionUrl) {
    this.actionUrl = actionUrl;
  }


  public PublicActionDefinitionPatch executionRules(List<PublicExecutionTranslationRule> executionRules) {
    this.executionRules = executionRules;
    return this;
  }

  public PublicActionDefinitionPatch addExecutionRulesItem(PublicExecutionTranslationRule executionRulesItem) {
    if (this.executionRules == null) {
      this.executionRules = new ArrayList<>();
    }
    this.executionRules.add(executionRulesItem);
    return this;
  }

  /**
   * Get executionRules
   * @return executionRules
   */
  @javax.annotation.Nullable
  public List<PublicExecutionTranslationRule> getExecutionRules() {
    return executionRules;
  }

  public void setExecutionRules(List<PublicExecutionTranslationRule> executionRules) {
    this.executionRules = executionRules;
  }


  public PublicActionDefinitionPatch inputFieldDependencies(List<PublicActionDefinitionInputFieldDependenciesInner> inputFieldDependencies) {
    this.inputFieldDependencies = inputFieldDependencies;
    return this;
  }

  public PublicActionDefinitionPatch addInputFieldDependenciesItem(PublicActionDefinitionInputFieldDependenciesInner inputFieldDependenciesItem) {
    if (this.inputFieldDependencies == null) {
      this.inputFieldDependencies = new ArrayList<>();
    }
    this.inputFieldDependencies.add(inputFieldDependenciesItem);
    return this;
  }

  /**
   * Get inputFieldDependencies
   * @return inputFieldDependencies
   */
  @javax.annotation.Nullable
  public List<PublicActionDefinitionInputFieldDependenciesInner> getInputFieldDependencies() {
    return inputFieldDependencies;
  }

  public void setInputFieldDependencies(List<PublicActionDefinitionInputFieldDependenciesInner> inputFieldDependencies) {
    this.inputFieldDependencies = inputFieldDependencies;
  }


  public PublicActionDefinitionPatch inputFields(List<InputFieldDefinition> inputFields) {
    this.inputFields = inputFields;
    return this;
  }

  public PublicActionDefinitionPatch addInputFieldsItem(InputFieldDefinition inputFieldsItem) {
    if (this.inputFields == null) {
      this.inputFields = new ArrayList<>();
    }
    this.inputFields.add(inputFieldsItem);
    return this;
  }

  /**
   * Get inputFields
   * @return inputFields
   */
  @javax.annotation.Nullable
  public List<InputFieldDefinition> getInputFields() {
    return inputFields;
  }

  public void setInputFields(List<InputFieldDefinition> inputFields) {
    this.inputFields = inputFields;
  }


  public PublicActionDefinitionPatch labels(Map<String, PublicActionLabels> labels) {
    this.labels = labels;
    return this;
  }

  public PublicActionDefinitionPatch putLabelsItem(String key, PublicActionLabels labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, PublicActionLabels> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, PublicActionLabels> labels) {
    this.labels = labels;
  }


  public PublicActionDefinitionPatch objectRequestOptions(PublicObjectRequestOptions objectRequestOptions) {
    this.objectRequestOptions = objectRequestOptions;
    return this;
  }

  /**
   * Get objectRequestOptions
   * @return objectRequestOptions
   */
  @javax.annotation.Nullable
  public PublicObjectRequestOptions getObjectRequestOptions() {
    return objectRequestOptions;
  }

  public void setObjectRequestOptions(PublicObjectRequestOptions objectRequestOptions) {
    this.objectRequestOptions = objectRequestOptions;
  }


  public PublicActionDefinitionPatch objectTypes(List<String> objectTypes) {
    this.objectTypes = objectTypes;
    return this;
  }

  public PublicActionDefinitionPatch addObjectTypesItem(String objectTypesItem) {
    if (this.objectTypes == null) {
      this.objectTypes = new ArrayList<>();
    }
    this.objectTypes.add(objectTypesItem);
    return this;
  }

  /**
   * Get objectTypes
   * @return objectTypes
   */
  @javax.annotation.Nullable
  public List<String> getObjectTypes() {
    return objectTypes;
  }

  public void setObjectTypes(List<String> objectTypes) {
    this.objectTypes = objectTypes;
  }


  public PublicActionDefinitionPatch outputFields(List<OutputFieldDefinition> outputFields) {
    this.outputFields = outputFields;
    return this;
  }

  public PublicActionDefinitionPatch addOutputFieldsItem(OutputFieldDefinition outputFieldsItem) {
    if (this.outputFields == null) {
      this.outputFields = new ArrayList<>();
    }
    this.outputFields.add(outputFieldsItem);
    return this;
  }

  /**
   * Get outputFields
   * @return outputFields
   */
  @javax.annotation.Nullable
  public List<OutputFieldDefinition> getOutputFields() {
    return outputFields;
  }

  public void setOutputFields(List<OutputFieldDefinition> outputFields) {
    this.outputFields = outputFields;
  }


  public PublicActionDefinitionPatch published(Boolean published) {
    this.published = published;
    return this;
  }

  /**
   * Get published
   * @return published
   */
  @javax.annotation.Nullable
  public Boolean getPublished() {
    return published;
  }

  public void setPublished(Boolean published) {
    this.published = published;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublicActionDefinitionPatch publicActionDefinitionPatch = (PublicActionDefinitionPatch) o;
    return Objects.equals(this.actionUrl, publicActionDefinitionPatch.actionUrl) &&
        Objects.equals(this.executionRules, publicActionDefinitionPatch.executionRules) &&
        Objects.equals(this.inputFieldDependencies, publicActionDefinitionPatch.inputFieldDependencies) &&
        Objects.equals(this.inputFields, publicActionDefinitionPatch.inputFields) &&
        Objects.equals(this.labels, publicActionDefinitionPatch.labels) &&
        Objects.equals(this.objectRequestOptions, publicActionDefinitionPatch.objectRequestOptions) &&
        Objects.equals(this.objectTypes, publicActionDefinitionPatch.objectTypes) &&
        Objects.equals(this.outputFields, publicActionDefinitionPatch.outputFields) &&
        Objects.equals(this.published, publicActionDefinitionPatch.published);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionUrl, executionRules, inputFieldDependencies, inputFields, labels, objectRequestOptions, objectTypes, outputFields, published);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublicActionDefinitionPatch {\n");
    sb.append("    actionUrl: ").append(toIndentedString(actionUrl)).append("\n");
    sb.append("    executionRules: ").append(toIndentedString(executionRules)).append("\n");
    sb.append("    inputFieldDependencies: ").append(toIndentedString(inputFieldDependencies)).append("\n");
    sb.append("    inputFields: ").append(toIndentedString(inputFields)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    objectRequestOptions: ").append(toIndentedString(objectRequestOptions)).append("\n");
    sb.append("    objectTypes: ").append(toIndentedString(objectTypes)).append("\n");
    sb.append("    outputFields: ").append(toIndentedString(outputFields)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionUrl");
    openapiFields.add("executionRules");
    openapiFields.add("inputFieldDependencies");
    openapiFields.add("inputFields");
    openapiFields.add("labels");
    openapiFields.add("objectRequestOptions");
    openapiFields.add("objectTypes");
    openapiFields.add("outputFields");
    openapiFields.add("published");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublicActionDefinitionPatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublicActionDefinitionPatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublicActionDefinitionPatch is not found in the empty JSON string", PublicActionDefinitionPatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublicActionDefinitionPatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublicActionDefinitionPatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actionUrl") != null && !jsonObj.get("actionUrl").isJsonNull()) && !jsonObj.get("actionUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionUrl").toString()));
      }
      if (jsonObj.get("executionRules") != null && !jsonObj.get("executionRules").isJsonNull()) {
        JsonArray jsonArrayexecutionRules = jsonObj.getAsJsonArray("executionRules");
        if (jsonArrayexecutionRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("executionRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `executionRules` to be an array in the JSON string but got `%s`", jsonObj.get("executionRules").toString()));
          }

          // validate the optional field `executionRules` (array)
          for (int i = 0; i < jsonArrayexecutionRules.size(); i++) {
            PublicExecutionTranslationRule.validateJsonElement(jsonArrayexecutionRules.get(i));
          };
        }
      }
      if (jsonObj.get("inputFieldDependencies") != null && !jsonObj.get("inputFieldDependencies").isJsonNull()) {
        JsonArray jsonArrayinputFieldDependencies = jsonObj.getAsJsonArray("inputFieldDependencies");
        if (jsonArrayinputFieldDependencies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inputFieldDependencies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inputFieldDependencies` to be an array in the JSON string but got `%s`", jsonObj.get("inputFieldDependencies").toString()));
          }

          // validate the optional field `inputFieldDependencies` (array)
          for (int i = 0; i < jsonArrayinputFieldDependencies.size(); i++) {
            PublicActionDefinitionInputFieldDependenciesInner.validateJsonElement(jsonArrayinputFieldDependencies.get(i));
          };
        }
      }
      if (jsonObj.get("inputFields") != null && !jsonObj.get("inputFields").isJsonNull()) {
        JsonArray jsonArrayinputFields = jsonObj.getAsJsonArray("inputFields");
        if (jsonArrayinputFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inputFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inputFields` to be an array in the JSON string but got `%s`", jsonObj.get("inputFields").toString()));
          }

          // validate the optional field `inputFields` (array)
          for (int i = 0; i < jsonArrayinputFields.size(); i++) {
            InputFieldDefinition.validateJsonElement(jsonArrayinputFields.get(i));
          };
        }
      }
      // validate the optional field `objectRequestOptions`
      if (jsonObj.get("objectRequestOptions") != null && !jsonObj.get("objectRequestOptions").isJsonNull()) {
        PublicObjectRequestOptions.validateJsonElement(jsonObj.get("objectRequestOptions"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("objectTypes") != null && !jsonObj.get("objectTypes").isJsonNull() && !jsonObj.get("objectTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectTypes` to be an array in the JSON string but got `%s`", jsonObj.get("objectTypes").toString()));
      }
      if (jsonObj.get("outputFields") != null && !jsonObj.get("outputFields").isJsonNull()) {
        JsonArray jsonArrayoutputFields = jsonObj.getAsJsonArray("outputFields");
        if (jsonArrayoutputFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("outputFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `outputFields` to be an array in the JSON string but got `%s`", jsonObj.get("outputFields").toString()));
          }

          // validate the optional field `outputFields` (array)
          for (int i = 0; i < jsonArrayoutputFields.size(); i++) {
            OutputFieldDefinition.validateJsonElement(jsonArrayoutputFields.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublicActionDefinitionPatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublicActionDefinitionPatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublicActionDefinitionPatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublicActionDefinitionPatch.class));

       return (TypeAdapter<T>) new TypeAdapter<PublicActionDefinitionPatch>() {
           @Override
           public void write(JsonWriter out, PublicActionDefinitionPatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublicActionDefinitionPatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublicActionDefinitionPatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublicActionDefinitionPatch
   * @throws IOException if the JSON string is invalid with respect to PublicActionDefinitionPatch
   */
  public static PublicActionDefinitionPatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublicActionDefinitionPatch.class);
  }

  /**
   * Convert an instance of PublicActionDefinitionPatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

