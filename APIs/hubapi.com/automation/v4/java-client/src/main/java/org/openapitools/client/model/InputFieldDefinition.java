/*
 * Automation Actions V4
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FieldTypeDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InputFieldDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:15.898770-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InputFieldDefinition {
  public static final String SERIALIZED_NAME_AUTOMATION_FIELD_TYPE = "automationFieldType";
  @SerializedName(SERIALIZED_NAME_AUTOMATION_FIELD_TYPE)
  private String automationFieldType;

  public static final String SERIALIZED_NAME_IS_REQUIRED = "isRequired";
  @SerializedName(SERIALIZED_NAME_IS_REQUIRED)
  private Boolean isRequired;

  /**
   * Gets or Sets supportedValueTypes
   */
  @JsonAdapter(SupportedValueTypesEnum.Adapter.class)
  public enum SupportedValueTypesEnum {
    STATIC_VALUE("STATIC_VALUE"),
    
    OBJECT_PROPERTY("OBJECT_PROPERTY"),
    
    FIELD_DATA("FIELD_DATA"),
    
    FETCHED_OBJECT_PROPERTY("FETCHED_OBJECT_PROPERTY"),
    
    ENROLLMENT_EVENT_PROPERTY("ENROLLMENT_EVENT_PROPERTY");

    private String value;

    SupportedValueTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SupportedValueTypesEnum fromValue(String value) {
      for (SupportedValueTypesEnum b : SupportedValueTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SupportedValueTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SupportedValueTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SupportedValueTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SupportedValueTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SupportedValueTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUPPORTED_VALUE_TYPES = "supportedValueTypes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_VALUE_TYPES)
  private List<SupportedValueTypesEnum> supportedValueTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE_DEFINITION = "typeDefinition";
  @SerializedName(SERIALIZED_NAME_TYPE_DEFINITION)
  private FieldTypeDefinition typeDefinition;

  public InputFieldDefinition() {
  }

  public InputFieldDefinition automationFieldType(String automationFieldType) {
    this.automationFieldType = automationFieldType;
    return this;
  }

  /**
   * Get automationFieldType
   * @return automationFieldType
   */
  @javax.annotation.Nullable
  public String getAutomationFieldType() {
    return automationFieldType;
  }

  public void setAutomationFieldType(String automationFieldType) {
    this.automationFieldType = automationFieldType;
  }


  public InputFieldDefinition isRequired(Boolean isRequired) {
    this.isRequired = isRequired;
    return this;
  }

  /**
   * Get isRequired
   * @return isRequired
   */
  @javax.annotation.Nonnull
  public Boolean getIsRequired() {
    return isRequired;
  }

  public void setIsRequired(Boolean isRequired) {
    this.isRequired = isRequired;
  }


  public InputFieldDefinition supportedValueTypes(List<SupportedValueTypesEnum> supportedValueTypes) {
    this.supportedValueTypes = supportedValueTypes;
    return this;
  }

  public InputFieldDefinition addSupportedValueTypesItem(SupportedValueTypesEnum supportedValueTypesItem) {
    if (this.supportedValueTypes == null) {
      this.supportedValueTypes = new ArrayList<>();
    }
    this.supportedValueTypes.add(supportedValueTypesItem);
    return this;
  }

  /**
   * Get supportedValueTypes
   * @return supportedValueTypes
   */
  @javax.annotation.Nullable
  public List<SupportedValueTypesEnum> getSupportedValueTypes() {
    return supportedValueTypes;
  }

  public void setSupportedValueTypes(List<SupportedValueTypesEnum> supportedValueTypes) {
    this.supportedValueTypes = supportedValueTypes;
  }


  public InputFieldDefinition typeDefinition(FieldTypeDefinition typeDefinition) {
    this.typeDefinition = typeDefinition;
    return this;
  }

  /**
   * Get typeDefinition
   * @return typeDefinition
   */
  @javax.annotation.Nonnull
  public FieldTypeDefinition getTypeDefinition() {
    return typeDefinition;
  }

  public void setTypeDefinition(FieldTypeDefinition typeDefinition) {
    this.typeDefinition = typeDefinition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputFieldDefinition inputFieldDefinition = (InputFieldDefinition) o;
    return Objects.equals(this.automationFieldType, inputFieldDefinition.automationFieldType) &&
        Objects.equals(this.isRequired, inputFieldDefinition.isRequired) &&
        Objects.equals(this.supportedValueTypes, inputFieldDefinition.supportedValueTypes) &&
        Objects.equals(this.typeDefinition, inputFieldDefinition.typeDefinition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(automationFieldType, isRequired, supportedValueTypes, typeDefinition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputFieldDefinition {\n");
    sb.append("    automationFieldType: ").append(toIndentedString(automationFieldType)).append("\n");
    sb.append("    isRequired: ").append(toIndentedString(isRequired)).append("\n");
    sb.append("    supportedValueTypes: ").append(toIndentedString(supportedValueTypes)).append("\n");
    sb.append("    typeDefinition: ").append(toIndentedString(typeDefinition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("automationFieldType");
    openapiFields.add("isRequired");
    openapiFields.add("supportedValueTypes");
    openapiFields.add("typeDefinition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("isRequired");
    openapiRequiredFields.add("typeDefinition");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InputFieldDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InputFieldDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputFieldDefinition is not found in the empty JSON string", InputFieldDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InputFieldDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InputFieldDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InputFieldDefinition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("automationFieldType") != null && !jsonObj.get("automationFieldType").isJsonNull()) && !jsonObj.get("automationFieldType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `automationFieldType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("automationFieldType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedValueTypes") != null && !jsonObj.get("supportedValueTypes").isJsonNull() && !jsonObj.get("supportedValueTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedValueTypes` to be an array in the JSON string but got `%s`", jsonObj.get("supportedValueTypes").toString()));
      }
      // validate the required field `typeDefinition`
      FieldTypeDefinition.validateJsonElement(jsonObj.get("typeDefinition"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InputFieldDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InputFieldDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InputFieldDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InputFieldDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<InputFieldDefinition>() {
           @Override
           public void write(JsonWriter out, InputFieldDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InputFieldDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InputFieldDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputFieldDefinition
   * @throws IOException if the JSON string is invalid with respect to InputFieldDefinition
   */
  public static InputFieldDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputFieldDefinition.class);
  }

  /**
   * Convert an instance of InputFieldDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

