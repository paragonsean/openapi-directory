# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PublicActionLabels(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_card_content: str=None, action_description: str=None, action_name: str=None, app_display_name: str=None, execution_rules: Dict[str, str]=None, input_field_descriptions: Dict[str, str]=None, input_field_labels: Dict[str, str]=None, input_field_option_labels: Dict[str, Dict[str, str]]=None, output_field_labels: Dict[str, str]=None):
        """PublicActionLabels - a model defined in OpenAPI

        :param action_card_content: The action_card_content of this PublicActionLabels.
        :param action_description: The action_description of this PublicActionLabels.
        :param action_name: The action_name of this PublicActionLabels.
        :param app_display_name: The app_display_name of this PublicActionLabels.
        :param execution_rules: The execution_rules of this PublicActionLabels.
        :param input_field_descriptions: The input_field_descriptions of this PublicActionLabels.
        :param input_field_labels: The input_field_labels of this PublicActionLabels.
        :param input_field_option_labels: The input_field_option_labels of this PublicActionLabels.
        :param output_field_labels: The output_field_labels of this PublicActionLabels.
        """
        self.openapi_types = {
            'action_card_content': str,
            'action_description': str,
            'action_name': str,
            'app_display_name': str,
            'execution_rules': Dict[str, str],
            'input_field_descriptions': Dict[str, str],
            'input_field_labels': Dict[str, str],
            'input_field_option_labels': Dict[str, Dict[str, str]],
            'output_field_labels': Dict[str, str]
        }

        self.attribute_map = {
            'action_card_content': 'actionCardContent',
            'action_description': 'actionDescription',
            'action_name': 'actionName',
            'app_display_name': 'appDisplayName',
            'execution_rules': 'executionRules',
            'input_field_descriptions': 'inputFieldDescriptions',
            'input_field_labels': 'inputFieldLabels',
            'input_field_option_labels': 'inputFieldOptionLabels',
            'output_field_labels': 'outputFieldLabels'
        }

        self._action_card_content = action_card_content
        self._action_description = action_description
        self._action_name = action_name
        self._app_display_name = app_display_name
        self._execution_rules = execution_rules
        self._input_field_descriptions = input_field_descriptions
        self._input_field_labels = input_field_labels
        self._input_field_option_labels = input_field_option_labels
        self._output_field_labels = output_field_labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublicActionLabels':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublicActionLabels of this PublicActionLabels.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_card_content(self):
        """Gets the action_card_content of this PublicActionLabels.


        :return: The action_card_content of this PublicActionLabels.
        :rtype: str
        """
        return self._action_card_content

    @action_card_content.setter
    def action_card_content(self, action_card_content):
        """Sets the action_card_content of this PublicActionLabels.


        :param action_card_content: The action_card_content of this PublicActionLabels.
        :type action_card_content: str
        """

        self._action_card_content = action_card_content

    @property
    def action_description(self):
        """Gets the action_description of this PublicActionLabels.


        :return: The action_description of this PublicActionLabels.
        :rtype: str
        """
        return self._action_description

    @action_description.setter
    def action_description(self, action_description):
        """Sets the action_description of this PublicActionLabels.


        :param action_description: The action_description of this PublicActionLabels.
        :type action_description: str
        """

        self._action_description = action_description

    @property
    def action_name(self):
        """Gets the action_name of this PublicActionLabels.


        :return: The action_name of this PublicActionLabels.
        :rtype: str
        """
        return self._action_name

    @action_name.setter
    def action_name(self, action_name):
        """Sets the action_name of this PublicActionLabels.


        :param action_name: The action_name of this PublicActionLabels.
        :type action_name: str
        """
        if action_name is None:
            raise ValueError("Invalid value for `action_name`, must not be `None`")

        self._action_name = action_name

    @property
    def app_display_name(self):
        """Gets the app_display_name of this PublicActionLabels.


        :return: The app_display_name of this PublicActionLabels.
        :rtype: str
        """
        return self._app_display_name

    @app_display_name.setter
    def app_display_name(self, app_display_name):
        """Sets the app_display_name of this PublicActionLabels.


        :param app_display_name: The app_display_name of this PublicActionLabels.
        :type app_display_name: str
        """

        self._app_display_name = app_display_name

    @property
    def execution_rules(self):
        """Gets the execution_rules of this PublicActionLabels.


        :return: The execution_rules of this PublicActionLabels.
        :rtype: Dict[str, str]
        """
        return self._execution_rules

    @execution_rules.setter
    def execution_rules(self, execution_rules):
        """Sets the execution_rules of this PublicActionLabels.


        :param execution_rules: The execution_rules of this PublicActionLabels.
        :type execution_rules: Dict[str, str]
        """

        self._execution_rules = execution_rules

    @property
    def input_field_descriptions(self):
        """Gets the input_field_descriptions of this PublicActionLabels.


        :return: The input_field_descriptions of this PublicActionLabels.
        :rtype: Dict[str, str]
        """
        return self._input_field_descriptions

    @input_field_descriptions.setter
    def input_field_descriptions(self, input_field_descriptions):
        """Sets the input_field_descriptions of this PublicActionLabels.


        :param input_field_descriptions: The input_field_descriptions of this PublicActionLabels.
        :type input_field_descriptions: Dict[str, str]
        """

        self._input_field_descriptions = input_field_descriptions

    @property
    def input_field_labels(self):
        """Gets the input_field_labels of this PublicActionLabels.


        :return: The input_field_labels of this PublicActionLabels.
        :rtype: Dict[str, str]
        """
        return self._input_field_labels

    @input_field_labels.setter
    def input_field_labels(self, input_field_labels):
        """Sets the input_field_labels of this PublicActionLabels.


        :param input_field_labels: The input_field_labels of this PublicActionLabels.
        :type input_field_labels: Dict[str, str]
        """

        self._input_field_labels = input_field_labels

    @property
    def input_field_option_labels(self):
        """Gets the input_field_option_labels of this PublicActionLabels.


        :return: The input_field_option_labels of this PublicActionLabels.
        :rtype: Dict[str, Dict[str, str]]
        """
        return self._input_field_option_labels

    @input_field_option_labels.setter
    def input_field_option_labels(self, input_field_option_labels):
        """Sets the input_field_option_labels of this PublicActionLabels.


        :param input_field_option_labels: The input_field_option_labels of this PublicActionLabels.
        :type input_field_option_labels: Dict[str, Dict[str, str]]
        """

        self._input_field_option_labels = input_field_option_labels

    @property
    def output_field_labels(self):
        """Gets the output_field_labels of this PublicActionLabels.


        :return: The output_field_labels of this PublicActionLabels.
        :rtype: Dict[str, str]
        """
        return self._output_field_labels

    @output_field_labels.setter
    def output_field_labels(self, output_field_labels):
        """Sets the output_field_labels of this PublicActionLabels.


        :param output_field_labels: The output_field_labels of this PublicActionLabels.
        :type output_field_labels: Dict[str, str]
        """

        self._output_field_labels = output_field_labels
