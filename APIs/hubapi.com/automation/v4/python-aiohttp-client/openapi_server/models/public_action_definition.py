# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_field_definition import InputFieldDefinition
from openapi_server.models.output_field_definition import OutputFieldDefinition
from openapi_server.models.public_action_definition_input_field_dependencies_inner import PublicActionDefinitionInputFieldDependenciesInner
from openapi_server.models.public_action_function_identifier import PublicActionFunctionIdentifier
from openapi_server.models.public_action_labels import PublicActionLabels
from openapi_server.models.public_execution_translation_rule import PublicExecutionTranslationRule
from openapi_server.models.public_object_request_options import PublicObjectRequestOptions
from openapi_server import util


class PublicActionDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_url: str=None, archived_at: int=None, execution_rules: List[PublicExecutionTranslationRule]=None, functions: List[PublicActionFunctionIdentifier]=None, id: str=None, input_field_dependencies: List[PublicActionDefinitionInputFieldDependenciesInner]=None, input_fields: List[InputFieldDefinition]=None, labels: Dict[str, PublicActionLabels]=None, object_request_options: PublicObjectRequestOptions=None, object_types: List[str]=None, output_fields: List[OutputFieldDefinition]=None, published: bool=None, revision_id: str=None):
        """PublicActionDefinition - a model defined in OpenAPI

        :param action_url: The action_url of this PublicActionDefinition.
        :param archived_at: The archived_at of this PublicActionDefinition.
        :param execution_rules: The execution_rules of this PublicActionDefinition.
        :param functions: The functions of this PublicActionDefinition.
        :param id: The id of this PublicActionDefinition.
        :param input_field_dependencies: The input_field_dependencies of this PublicActionDefinition.
        :param input_fields: The input_fields of this PublicActionDefinition.
        :param labels: The labels of this PublicActionDefinition.
        :param object_request_options: The object_request_options of this PublicActionDefinition.
        :param object_types: The object_types of this PublicActionDefinition.
        :param output_fields: The output_fields of this PublicActionDefinition.
        :param published: The published of this PublicActionDefinition.
        :param revision_id: The revision_id of this PublicActionDefinition.
        """
        self.openapi_types = {
            'action_url': str,
            'archived_at': int,
            'execution_rules': List[PublicExecutionTranslationRule],
            'functions': List[PublicActionFunctionIdentifier],
            'id': str,
            'input_field_dependencies': List[PublicActionDefinitionInputFieldDependenciesInner],
            'input_fields': List[InputFieldDefinition],
            'labels': Dict[str, PublicActionLabels],
            'object_request_options': PublicObjectRequestOptions,
            'object_types': List[str],
            'output_fields': List[OutputFieldDefinition],
            'published': bool,
            'revision_id': str
        }

        self.attribute_map = {
            'action_url': 'actionUrl',
            'archived_at': 'archivedAt',
            'execution_rules': 'executionRules',
            'functions': 'functions',
            'id': 'id',
            'input_field_dependencies': 'inputFieldDependencies',
            'input_fields': 'inputFields',
            'labels': 'labels',
            'object_request_options': 'objectRequestOptions',
            'object_types': 'objectTypes',
            'output_fields': 'outputFields',
            'published': 'published',
            'revision_id': 'revisionId'
        }

        self._action_url = action_url
        self._archived_at = archived_at
        self._execution_rules = execution_rules
        self._functions = functions
        self._id = id
        self._input_field_dependencies = input_field_dependencies
        self._input_fields = input_fields
        self._labels = labels
        self._object_request_options = object_request_options
        self._object_types = object_types
        self._output_fields = output_fields
        self._published = published
        self._revision_id = revision_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublicActionDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublicActionDefinition of this PublicActionDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_url(self):
        """Gets the action_url of this PublicActionDefinition.


        :return: The action_url of this PublicActionDefinition.
        :rtype: str
        """
        return self._action_url

    @action_url.setter
    def action_url(self, action_url):
        """Sets the action_url of this PublicActionDefinition.


        :param action_url: The action_url of this PublicActionDefinition.
        :type action_url: str
        """
        if action_url is None:
            raise ValueError("Invalid value for `action_url`, must not be `None`")

        self._action_url = action_url

    @property
    def archived_at(self):
        """Gets the archived_at of this PublicActionDefinition.


        :return: The archived_at of this PublicActionDefinition.
        :rtype: int
        """
        return self._archived_at

    @archived_at.setter
    def archived_at(self, archived_at):
        """Sets the archived_at of this PublicActionDefinition.


        :param archived_at: The archived_at of this PublicActionDefinition.
        :type archived_at: int
        """

        self._archived_at = archived_at

    @property
    def execution_rules(self):
        """Gets the execution_rules of this PublicActionDefinition.


        :return: The execution_rules of this PublicActionDefinition.
        :rtype: List[PublicExecutionTranslationRule]
        """
        return self._execution_rules

    @execution_rules.setter
    def execution_rules(self, execution_rules):
        """Sets the execution_rules of this PublicActionDefinition.


        :param execution_rules: The execution_rules of this PublicActionDefinition.
        :type execution_rules: List[PublicExecutionTranslationRule]
        """

        self._execution_rules = execution_rules

    @property
    def functions(self):
        """Gets the functions of this PublicActionDefinition.


        :return: The functions of this PublicActionDefinition.
        :rtype: List[PublicActionFunctionIdentifier]
        """
        return self._functions

    @functions.setter
    def functions(self, functions):
        """Sets the functions of this PublicActionDefinition.


        :param functions: The functions of this PublicActionDefinition.
        :type functions: List[PublicActionFunctionIdentifier]
        """
        if functions is None:
            raise ValueError("Invalid value for `functions`, must not be `None`")

        self._functions = functions

    @property
    def id(self):
        """Gets the id of this PublicActionDefinition.


        :return: The id of this PublicActionDefinition.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PublicActionDefinition.


        :param id: The id of this PublicActionDefinition.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def input_field_dependencies(self):
        """Gets the input_field_dependencies of this PublicActionDefinition.


        :return: The input_field_dependencies of this PublicActionDefinition.
        :rtype: List[PublicActionDefinitionInputFieldDependenciesInner]
        """
        return self._input_field_dependencies

    @input_field_dependencies.setter
    def input_field_dependencies(self, input_field_dependencies):
        """Sets the input_field_dependencies of this PublicActionDefinition.


        :param input_field_dependencies: The input_field_dependencies of this PublicActionDefinition.
        :type input_field_dependencies: List[PublicActionDefinitionInputFieldDependenciesInner]
        """

        self._input_field_dependencies = input_field_dependencies

    @property
    def input_fields(self):
        """Gets the input_fields of this PublicActionDefinition.


        :return: The input_fields of this PublicActionDefinition.
        :rtype: List[InputFieldDefinition]
        """
        return self._input_fields

    @input_fields.setter
    def input_fields(self, input_fields):
        """Sets the input_fields of this PublicActionDefinition.


        :param input_fields: The input_fields of this PublicActionDefinition.
        :type input_fields: List[InputFieldDefinition]
        """
        if input_fields is None:
            raise ValueError("Invalid value for `input_fields`, must not be `None`")

        self._input_fields = input_fields

    @property
    def labels(self):
        """Gets the labels of this PublicActionDefinition.


        :return: The labels of this PublicActionDefinition.
        :rtype: Dict[str, PublicActionLabels]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this PublicActionDefinition.


        :param labels: The labels of this PublicActionDefinition.
        :type labels: Dict[str, PublicActionLabels]
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")

        self._labels = labels

    @property
    def object_request_options(self):
        """Gets the object_request_options of this PublicActionDefinition.


        :return: The object_request_options of this PublicActionDefinition.
        :rtype: PublicObjectRequestOptions
        """
        return self._object_request_options

    @object_request_options.setter
    def object_request_options(self, object_request_options):
        """Sets the object_request_options of this PublicActionDefinition.


        :param object_request_options: The object_request_options of this PublicActionDefinition.
        :type object_request_options: PublicObjectRequestOptions
        """

        self._object_request_options = object_request_options

    @property
    def object_types(self):
        """Gets the object_types of this PublicActionDefinition.


        :return: The object_types of this PublicActionDefinition.
        :rtype: List[str]
        """
        return self._object_types

    @object_types.setter
    def object_types(self, object_types):
        """Sets the object_types of this PublicActionDefinition.


        :param object_types: The object_types of this PublicActionDefinition.
        :type object_types: List[str]
        """
        if object_types is None:
            raise ValueError("Invalid value for `object_types`, must not be `None`")

        self._object_types = object_types

    @property
    def output_fields(self):
        """Gets the output_fields of this PublicActionDefinition.


        :return: The output_fields of this PublicActionDefinition.
        :rtype: List[OutputFieldDefinition]
        """
        return self._output_fields

    @output_fields.setter
    def output_fields(self, output_fields):
        """Sets the output_fields of this PublicActionDefinition.


        :param output_fields: The output_fields of this PublicActionDefinition.
        :type output_fields: List[OutputFieldDefinition]
        """

        self._output_fields = output_fields

    @property
    def published(self):
        """Gets the published of this PublicActionDefinition.


        :return: The published of this PublicActionDefinition.
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this PublicActionDefinition.


        :param published: The published of this PublicActionDefinition.
        :type published: bool
        """
        if published is None:
            raise ValueError("Invalid value for `published`, must not be `None`")

        self._published = published

    @property
    def revision_id(self):
        """Gets the revision_id of this PublicActionDefinition.


        :return: The revision_id of this PublicActionDefinition.
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this PublicActionDefinition.


        :param revision_id: The revision_id of this PublicActionDefinition.
        :type revision_id: str
        """
        if revision_id is None:
            raise ValueError("Invalid value for `revision_id`, must not be `None`")

        self._revision_id = revision_id
