# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PublicConditionalSingleFieldDependency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, controlling_field_name: str=None, controlling_field_value: str=None, dependency_type: str='CONDITIONAL_SINGLE_FIELD', dependent_field_names: List[str]=None):
        """PublicConditionalSingleFieldDependency - a model defined in OpenAPI

        :param controlling_field_name: The controlling_field_name of this PublicConditionalSingleFieldDependency.
        :param controlling_field_value: The controlling_field_value of this PublicConditionalSingleFieldDependency.
        :param dependency_type: The dependency_type of this PublicConditionalSingleFieldDependency.
        :param dependent_field_names: The dependent_field_names of this PublicConditionalSingleFieldDependency.
        """
        self.openapi_types = {
            'controlling_field_name': str,
            'controlling_field_value': str,
            'dependency_type': str,
            'dependent_field_names': List[str]
        }

        self.attribute_map = {
            'controlling_field_name': 'controllingFieldName',
            'controlling_field_value': 'controllingFieldValue',
            'dependency_type': 'dependencyType',
            'dependent_field_names': 'dependentFieldNames'
        }

        self._controlling_field_name = controlling_field_name
        self._controlling_field_value = controlling_field_value
        self._dependency_type = dependency_type
        self._dependent_field_names = dependent_field_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublicConditionalSingleFieldDependency':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublicConditionalSingleFieldDependency of this PublicConditionalSingleFieldDependency.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def controlling_field_name(self):
        """Gets the controlling_field_name of this PublicConditionalSingleFieldDependency.


        :return: The controlling_field_name of this PublicConditionalSingleFieldDependency.
        :rtype: str
        """
        return self._controlling_field_name

    @controlling_field_name.setter
    def controlling_field_name(self, controlling_field_name):
        """Sets the controlling_field_name of this PublicConditionalSingleFieldDependency.


        :param controlling_field_name: The controlling_field_name of this PublicConditionalSingleFieldDependency.
        :type controlling_field_name: str
        """
        if controlling_field_name is None:
            raise ValueError("Invalid value for `controlling_field_name`, must not be `None`")

        self._controlling_field_name = controlling_field_name

    @property
    def controlling_field_value(self):
        """Gets the controlling_field_value of this PublicConditionalSingleFieldDependency.


        :return: The controlling_field_value of this PublicConditionalSingleFieldDependency.
        :rtype: str
        """
        return self._controlling_field_value

    @controlling_field_value.setter
    def controlling_field_value(self, controlling_field_value):
        """Sets the controlling_field_value of this PublicConditionalSingleFieldDependency.


        :param controlling_field_value: The controlling_field_value of this PublicConditionalSingleFieldDependency.
        :type controlling_field_value: str
        """
        if controlling_field_value is None:
            raise ValueError("Invalid value for `controlling_field_value`, must not be `None`")

        self._controlling_field_value = controlling_field_value

    @property
    def dependency_type(self):
        """Gets the dependency_type of this PublicConditionalSingleFieldDependency.


        :return: The dependency_type of this PublicConditionalSingleFieldDependency.
        :rtype: str
        """
        return self._dependency_type

    @dependency_type.setter
    def dependency_type(self, dependency_type):
        """Sets the dependency_type of this PublicConditionalSingleFieldDependency.


        :param dependency_type: The dependency_type of this PublicConditionalSingleFieldDependency.
        :type dependency_type: str
        """
        allowed_values = ["CONDITIONAL_SINGLE_FIELD"]  # noqa: E501
        if dependency_type not in allowed_values:
            raise ValueError(
                "Invalid value for `dependency_type` ({0}), must be one of {1}"
                .format(dependency_type, allowed_values)
            )

        self._dependency_type = dependency_type

    @property
    def dependent_field_names(self):
        """Gets the dependent_field_names of this PublicConditionalSingleFieldDependency.


        :return: The dependent_field_names of this PublicConditionalSingleFieldDependency.
        :rtype: List[str]
        """
        return self._dependent_field_names

    @dependent_field_names.setter
    def dependent_field_names(self, dependent_field_names):
        """Sets the dependent_field_names of this PublicConditionalSingleFieldDependency.


        :param dependent_field_names: The dependent_field_names of this PublicConditionalSingleFieldDependency.
        :type dependent_field_names: List[str]
        """
        if dependent_field_names is None:
            raise ValueError("Invalid value for `dependent_field_names`, must not be `None`")

        self._dependent_field_names = dependent_field_names
