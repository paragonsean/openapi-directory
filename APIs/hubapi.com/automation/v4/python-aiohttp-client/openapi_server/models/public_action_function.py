# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PublicActionFunction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, function_source: str=None, function_type: str=None, id: str=None):
        """PublicActionFunction - a model defined in OpenAPI

        :param function_source: The function_source of this PublicActionFunction.
        :param function_type: The function_type of this PublicActionFunction.
        :param id: The id of this PublicActionFunction.
        """
        self.openapi_types = {
            'function_source': str,
            'function_type': str,
            'id': str
        }

        self.attribute_map = {
            'function_source': 'functionSource',
            'function_type': 'functionType',
            'id': 'id'
        }

        self._function_source = function_source
        self._function_type = function_type
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublicActionFunction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublicActionFunction of this PublicActionFunction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def function_source(self):
        """Gets the function_source of this PublicActionFunction.


        :return: The function_source of this PublicActionFunction.
        :rtype: str
        """
        return self._function_source

    @function_source.setter
    def function_source(self, function_source):
        """Sets the function_source of this PublicActionFunction.


        :param function_source: The function_source of this PublicActionFunction.
        :type function_source: str
        """
        if function_source is None:
            raise ValueError("Invalid value for `function_source`, must not be `None`")

        self._function_source = function_source

    @property
    def function_type(self):
        """Gets the function_type of this PublicActionFunction.


        :return: The function_type of this PublicActionFunction.
        :rtype: str
        """
        return self._function_type

    @function_type.setter
    def function_type(self, function_type):
        """Sets the function_type of this PublicActionFunction.


        :param function_type: The function_type of this PublicActionFunction.
        :type function_type: str
        """
        allowed_values = ["PRE_ACTION_EXECUTION", "PRE_FETCH_OPTIONS", "POST_FETCH_OPTIONS", "POST_ACTION_EXECUTION"]  # noqa: E501
        if function_type not in allowed_values:
            raise ValueError(
                "Invalid value for `function_type` ({0}), must be one of {1}"
                .format(function_type, allowed_values)
            )

        self._function_type = function_type

    @property
    def id(self):
        """Gets the id of this PublicActionFunction.


        :return: The id of this PublicActionFunction.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PublicActionFunction.


        :param id: The id of this PublicActionFunction.
        :type id: str
        """

        self._id = id
