# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Option(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, display_order: int=None, double_data: float=None, hidden: bool=None, label: str=None, read_only: bool=None, value: str=None):
        """Option - a model defined in OpenAPI

        :param description: The description of this Option.
        :param display_order: The display_order of this Option.
        :param double_data: The double_data of this Option.
        :param hidden: The hidden of this Option.
        :param label: The label of this Option.
        :param read_only: The read_only of this Option.
        :param value: The value of this Option.
        """
        self.openapi_types = {
            'description': str,
            'display_order': int,
            'double_data': float,
            'hidden': bool,
            'label': str,
            'read_only': bool,
            'value': str
        }

        self.attribute_map = {
            'description': 'description',
            'display_order': 'displayOrder',
            'double_data': 'doubleData',
            'hidden': 'hidden',
            'label': 'label',
            'read_only': 'readOnly',
            'value': 'value'
        }

        self._description = description
        self._display_order = display_order
        self._double_data = double_data
        self._hidden = hidden
        self._label = label
        self._read_only = read_only
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Option':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Option of this Option.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Option.


        :return: The description of this Option.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Option.


        :param description: The description of this Option.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def display_order(self):
        """Gets the display_order of this Option.


        :return: The display_order of this Option.
        :rtype: int
        """
        return self._display_order

    @display_order.setter
    def display_order(self, display_order):
        """Sets the display_order of this Option.


        :param display_order: The display_order of this Option.
        :type display_order: int
        """
        if display_order is None:
            raise ValueError("Invalid value for `display_order`, must not be `None`")

        self._display_order = display_order

    @property
    def double_data(self):
        """Gets the double_data of this Option.


        :return: The double_data of this Option.
        :rtype: float
        """
        return self._double_data

    @double_data.setter
    def double_data(self, double_data):
        """Sets the double_data of this Option.


        :param double_data: The double_data of this Option.
        :type double_data: float
        """
        if double_data is None:
            raise ValueError("Invalid value for `double_data`, must not be `None`")

        self._double_data = double_data

    @property
    def hidden(self):
        """Gets the hidden of this Option.


        :return: The hidden of this Option.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this Option.


        :param hidden: The hidden of this Option.
        :type hidden: bool
        """
        if hidden is None:
            raise ValueError("Invalid value for `hidden`, must not be `None`")

        self._hidden = hidden

    @property
    def label(self):
        """Gets the label of this Option.


        :return: The label of this Option.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Option.


        :param label: The label of this Option.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def read_only(self):
        """Gets the read_only of this Option.


        :return: The read_only of this Option.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this Option.


        :param read_only: The read_only of this Option.
        :type read_only: bool
        """
        if read_only is None:
            raise ValueError("Invalid value for `read_only`, must not be `None`")

        self._read_only = read_only

    @property
    def value(self):
        """Gets the value of this Option.


        :return: The value of this Option.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Option.


        :param value: The value of this Option.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
