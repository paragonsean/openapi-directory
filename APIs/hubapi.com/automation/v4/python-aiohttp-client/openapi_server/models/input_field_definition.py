# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_type_definition import FieldTypeDefinition
from openapi_server import util


class InputFieldDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, automation_field_type: str=None, is_required: bool=None, supported_value_types: List[str]=None, type_definition: FieldTypeDefinition=None):
        """InputFieldDefinition - a model defined in OpenAPI

        :param automation_field_type: The automation_field_type of this InputFieldDefinition.
        :param is_required: The is_required of this InputFieldDefinition.
        :param supported_value_types: The supported_value_types of this InputFieldDefinition.
        :param type_definition: The type_definition of this InputFieldDefinition.
        """
        self.openapi_types = {
            'automation_field_type': str,
            'is_required': bool,
            'supported_value_types': List[str],
            'type_definition': FieldTypeDefinition
        }

        self.attribute_map = {
            'automation_field_type': 'automationFieldType',
            'is_required': 'isRequired',
            'supported_value_types': 'supportedValueTypes',
            'type_definition': 'typeDefinition'
        }

        self._automation_field_type = automation_field_type
        self._is_required = is_required
        self._supported_value_types = supported_value_types
        self._type_definition = type_definition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputFieldDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputFieldDefinition of this InputFieldDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def automation_field_type(self):
        """Gets the automation_field_type of this InputFieldDefinition.


        :return: The automation_field_type of this InputFieldDefinition.
        :rtype: str
        """
        return self._automation_field_type

    @automation_field_type.setter
    def automation_field_type(self, automation_field_type):
        """Sets the automation_field_type of this InputFieldDefinition.


        :param automation_field_type: The automation_field_type of this InputFieldDefinition.
        :type automation_field_type: str
        """

        self._automation_field_type = automation_field_type

    @property
    def is_required(self):
        """Gets the is_required of this InputFieldDefinition.


        :return: The is_required of this InputFieldDefinition.
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this InputFieldDefinition.


        :param is_required: The is_required of this InputFieldDefinition.
        :type is_required: bool
        """
        if is_required is None:
            raise ValueError("Invalid value for `is_required`, must not be `None`")

        self._is_required = is_required

    @property
    def supported_value_types(self):
        """Gets the supported_value_types of this InputFieldDefinition.


        :return: The supported_value_types of this InputFieldDefinition.
        :rtype: List[str]
        """
        return self._supported_value_types

    @supported_value_types.setter
    def supported_value_types(self, supported_value_types):
        """Sets the supported_value_types of this InputFieldDefinition.


        :param supported_value_types: The supported_value_types of this InputFieldDefinition.
        :type supported_value_types: List[str]
        """
        allowed_values = ["STATIC_VALUE", "OBJECT_PROPERTY", "FIELD_DATA", "FETCHED_OBJECT_PROPERTY", "ENROLLMENT_EVENT_PROPERTY"]  # noqa: E501
        if not set(supported_value_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `supported_value_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(supported_value_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._supported_value_types = supported_value_types

    @property
    def type_definition(self):
        """Gets the type_definition of this InputFieldDefinition.


        :return: The type_definition of this InputFieldDefinition.
        :rtype: FieldTypeDefinition
        """
        return self._type_definition

    @type_definition.setter
    def type_definition(self, type_definition):
        """Sets the type_definition of this InputFieldDefinition.


        :param type_definition: The type_definition of this InputFieldDefinition.
        :type type_definition: FieldTypeDefinition
        """
        if type_definition is None:
            raise ValueError("Invalid value for `type_definition`, must not be `None`")

        self._type_definition = type_definition
