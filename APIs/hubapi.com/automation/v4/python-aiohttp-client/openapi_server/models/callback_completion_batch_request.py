# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CallbackCompletionBatchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, callback_id: str=None, output_fields: Dict[str, str]=None):
        """CallbackCompletionBatchRequest - a model defined in OpenAPI

        :param callback_id: The callback_id of this CallbackCompletionBatchRequest.
        :param output_fields: The output_fields of this CallbackCompletionBatchRequest.
        """
        self.openapi_types = {
            'callback_id': str,
            'output_fields': Dict[str, str]
        }

        self.attribute_map = {
            'callback_id': 'callbackId',
            'output_fields': 'outputFields'
        }

        self._callback_id = callback_id
        self._output_fields = output_fields

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CallbackCompletionBatchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CallbackCompletionBatchRequest of this CallbackCompletionBatchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def callback_id(self):
        """Gets the callback_id of this CallbackCompletionBatchRequest.


        :return: The callback_id of this CallbackCompletionBatchRequest.
        :rtype: str
        """
        return self._callback_id

    @callback_id.setter
    def callback_id(self, callback_id):
        """Sets the callback_id of this CallbackCompletionBatchRequest.


        :param callback_id: The callback_id of this CallbackCompletionBatchRequest.
        :type callback_id: str
        """
        if callback_id is None:
            raise ValueError("Invalid value for `callback_id`, must not be `None`")

        self._callback_id = callback_id

    @property
    def output_fields(self):
        """Gets the output_fields of this CallbackCompletionBatchRequest.


        :return: The output_fields of this CallbackCompletionBatchRequest.
        :rtype: Dict[str, str]
        """
        return self._output_fields

    @output_fields.setter
    def output_fields(self, output_fields):
        """Sets the output_fields of this CallbackCompletionBatchRequest.


        :param output_fields: The output_fields of this CallbackCompletionBatchRequest.
        :type output_fields: Dict[str, str]
        """
        if output_fields is None:
            raise ValueError("Invalid value for `output_fields`, must not be `None`")

        self._output_fields = output_fields
