# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CallbackCompletionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, output_fields: Dict[str, str]=None):
        """CallbackCompletionRequest - a model defined in OpenAPI

        :param output_fields: The output_fields of this CallbackCompletionRequest.
        """
        self.openapi_types = {
            'output_fields': Dict[str, str]
        }

        self.attribute_map = {
            'output_fields': 'outputFields'
        }

        self._output_fields = output_fields

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CallbackCompletionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CallbackCompletionRequest of this CallbackCompletionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def output_fields(self):
        """Gets the output_fields of this CallbackCompletionRequest.


        :return: The output_fields of this CallbackCompletionRequest.
        :rtype: Dict[str, str]
        """
        return self._output_fields

    @output_fields.setter
    def output_fields(self, output_fields):
        """Sets the output_fields of this CallbackCompletionRequest.


        :param output_fields: The output_fields of this CallbackCompletionRequest.
        :type output_fields: Dict[str, str]
        """
        if output_fields is None:
            raise ValueError("Invalid value for `output_fields`, must not be `None`")

        self._output_fields = output_fields
