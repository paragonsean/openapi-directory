# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.option import Option
from openapi_server import util


class FieldTypeDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, external_options: bool=None, external_options_reference_type: str=None, field_type: str=None, help_text: str=None, label: str=None, name: str=None, options: List[Option]=None, options_url: str=None, referenced_object_type: str=None, type: str=None):
        """FieldTypeDefinition - a model defined in OpenAPI

        :param description: The description of this FieldTypeDefinition.
        :param external_options: The external_options of this FieldTypeDefinition.
        :param external_options_reference_type: The external_options_reference_type of this FieldTypeDefinition.
        :param field_type: The field_type of this FieldTypeDefinition.
        :param help_text: The help_text of this FieldTypeDefinition.
        :param label: The label of this FieldTypeDefinition.
        :param name: The name of this FieldTypeDefinition.
        :param options: The options of this FieldTypeDefinition.
        :param options_url: The options_url of this FieldTypeDefinition.
        :param referenced_object_type: The referenced_object_type of this FieldTypeDefinition.
        :param type: The type of this FieldTypeDefinition.
        """
        self.openapi_types = {
            'description': str,
            'external_options': bool,
            'external_options_reference_type': str,
            'field_type': str,
            'help_text': str,
            'label': str,
            'name': str,
            'options': List[Option],
            'options_url': str,
            'referenced_object_type': str,
            'type': str
        }

        self.attribute_map = {
            'description': 'description',
            'external_options': 'externalOptions',
            'external_options_reference_type': 'externalOptionsReferenceType',
            'field_type': 'fieldType',
            'help_text': 'helpText',
            'label': 'label',
            'name': 'name',
            'options': 'options',
            'options_url': 'optionsUrl',
            'referenced_object_type': 'referencedObjectType',
            'type': 'type'
        }

        self._description = description
        self._external_options = external_options
        self._external_options_reference_type = external_options_reference_type
        self._field_type = field_type
        self._help_text = help_text
        self._label = label
        self._name = name
        self._options = options
        self._options_url = options_url
        self._referenced_object_type = referenced_object_type
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldTypeDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldTypeDefinition of this FieldTypeDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this FieldTypeDefinition.


        :return: The description of this FieldTypeDefinition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FieldTypeDefinition.


        :param description: The description of this FieldTypeDefinition.
        :type description: str
        """

        self._description = description

    @property
    def external_options(self):
        """Gets the external_options of this FieldTypeDefinition.


        :return: The external_options of this FieldTypeDefinition.
        :rtype: bool
        """
        return self._external_options

    @external_options.setter
    def external_options(self, external_options):
        """Sets the external_options of this FieldTypeDefinition.


        :param external_options: The external_options of this FieldTypeDefinition.
        :type external_options: bool
        """
        if external_options is None:
            raise ValueError("Invalid value for `external_options`, must not be `None`")

        self._external_options = external_options

    @property
    def external_options_reference_type(self):
        """Gets the external_options_reference_type of this FieldTypeDefinition.


        :return: The external_options_reference_type of this FieldTypeDefinition.
        :rtype: str
        """
        return self._external_options_reference_type

    @external_options_reference_type.setter
    def external_options_reference_type(self, external_options_reference_type):
        """Sets the external_options_reference_type of this FieldTypeDefinition.


        :param external_options_reference_type: The external_options_reference_type of this FieldTypeDefinition.
        :type external_options_reference_type: str
        """

        self._external_options_reference_type = external_options_reference_type

    @property
    def field_type(self):
        """Gets the field_type of this FieldTypeDefinition.


        :return: The field_type of this FieldTypeDefinition.
        :rtype: str
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """Sets the field_type of this FieldTypeDefinition.


        :param field_type: The field_type of this FieldTypeDefinition.
        :type field_type: str
        """
        allowed_values = ["booleancheckbox", "checkbox", "date", "file", "number", "phonenumber", "radio", "select", "text", "textarea", "calculation_equation", "calculation_rollup", "calculation_score", "calculation_read_time", "unknown", "html"]  # noqa: E501
        if field_type not in allowed_values:
            raise ValueError(
                "Invalid value for `field_type` ({0}), must be one of {1}"
                .format(field_type, allowed_values)
            )

        self._field_type = field_type

    @property
    def help_text(self):
        """Gets the help_text of this FieldTypeDefinition.


        :return: The help_text of this FieldTypeDefinition.
        :rtype: str
        """
        return self._help_text

    @help_text.setter
    def help_text(self, help_text):
        """Sets the help_text of this FieldTypeDefinition.


        :param help_text: The help_text of this FieldTypeDefinition.
        :type help_text: str
        """

        self._help_text = help_text

    @property
    def label(self):
        """Gets the label of this FieldTypeDefinition.


        :return: The label of this FieldTypeDefinition.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this FieldTypeDefinition.


        :param label: The label of this FieldTypeDefinition.
        :type label: str
        """

        self._label = label

    @property
    def name(self):
        """Gets the name of this FieldTypeDefinition.


        :return: The name of this FieldTypeDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FieldTypeDefinition.


        :param name: The name of this FieldTypeDefinition.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def options(self):
        """Gets the options of this FieldTypeDefinition.


        :return: The options of this FieldTypeDefinition.
        :rtype: List[Option]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this FieldTypeDefinition.


        :param options: The options of this FieldTypeDefinition.
        :type options: List[Option]
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")

        self._options = options

    @property
    def options_url(self):
        """Gets the options_url of this FieldTypeDefinition.


        :return: The options_url of this FieldTypeDefinition.
        :rtype: str
        """
        return self._options_url

    @options_url.setter
    def options_url(self, options_url):
        """Sets the options_url of this FieldTypeDefinition.


        :param options_url: The options_url of this FieldTypeDefinition.
        :type options_url: str
        """

        self._options_url = options_url

    @property
    def referenced_object_type(self):
        """Gets the referenced_object_type of this FieldTypeDefinition.


        :return: The referenced_object_type of this FieldTypeDefinition.
        :rtype: str
        """
        return self._referenced_object_type

    @referenced_object_type.setter
    def referenced_object_type(self, referenced_object_type):
        """Sets the referenced_object_type of this FieldTypeDefinition.


        :param referenced_object_type: The referenced_object_type of this FieldTypeDefinition.
        :type referenced_object_type: str
        """
        allowed_values = ["CONTACT", "COMPANY", "DEAL", "ENGAGEMENT", "TICKET", "OWNER", "PRODUCT", "LINE_ITEM", "BET_DELIVERABLE_SERVICE", "CONTENT", "CONVERSATION", "BET_ALERT", "PORTAL", "QUOTE", "FORM_SUBMISSION_INBOUNDDB", "QUOTA", "UNSUBSCRIBE", "COMMUNICATION", "FEEDBACK_SUBMISSION", "ATTRIBUTION", "SALESFORCE_SYNC_ERROR", "RESTORABLE_CRM_OBJECT", "HUB", "LANDING_PAGE", "PRODUCT_OR_FOLDER", "TASK", "FORM", "MARKETING_EMAIL", "AD_ACCOUNT", "AD_CAMPAIGN", "AD_GROUP", "AD", "KEYWORD", "CAMPAIGN", "SOCIAL_CHANNEL", "SOCIAL_POST", "SITE_PAGE", "BLOG_POST", "IMPORT", "EXPORT", "CTA", "TASK_TEMPLATE", "AUTOMATION_PLATFORM_FLOW", "OBJECT_LIST", "NOTE", "MEETING_EVENT", "CALL", "EMAIL", "PUBLISHING_TASK", "CONVERSATION_SESSION", "CONTACT_CREATE_ATTRIBUTION", "INVOICE", "MARKETING_EVENT", "CONVERSATION_INBOX", "CHATFLOW", "MEDIA_BRIDGE", "SEQUENCE", "SEQUENCE_STEP", "FORECAST", "SNIPPET", "TEMPLATE", "DEAL_CREATE_ATTRIBUTION", "QUOTE_TEMPLATE", "QUOTE_MODULE", "QUOTE_MODULE_FIELD", "QUOTE_FIELD", "SEQUENCE_ENROLLMENT", "SUBSCRIPTION", "ACCEPTANCE_TEST", "SOCIAL_BROADCAST", "DEAL_SPLIT", "DEAL_REGISTRATION", "GOAL_TARGET", "GOAL_TARGET_GROUP", "PORTAL_OBJECT_SYNC_MESSAGE", "FILE_MANAGER_FILE", "FILE_MANAGER_FOLDER", "SEQUENCE_STEP_ENROLLMENT", "APPROVAL", "APPROVAL_STEP", "CTA_VARIANT", "SALES_DOCUMENT", "DISCOUNT", "FEE", "TAX", "MARKETING_CALENDAR", "PERMISSIONS_TESTING", "PRIVACY_SCANNER_COOKIE", "DATA_SYNC_STATE", "WEB_INTERACTIVE", "PLAYBOOK", "FOLDER", "PLAYBOOK_QUESTION", "PLAYBOOK_SUBMISSION", "PLAYBOOK_SUBMISSION_ANSWER", "COMMERCE_PAYMENT", "GSC_PROPERTY", "SOX_PROTECTED_DUMMY_TYPE", "BLOG_LISTING_PAGE", "QUARANTINED_SUBMISSION", "PAYMENT_SCHEDULE", "PAYMENT_SCHEDULE_INSTALLMENT", "MARKETING_CAMPAIGN_UTM", "DISCOUNT_TEMPLATE", "DISCOUNT_CODE", "FEEDBACK_SURVEY", "CMS_URL", "SALES_TASK", "SALES_WORKLOAD", "USER", "POSTAL_MAIL", "SCHEMAS_BACKEND_TEST", "PAYMENT_LINK", "SUBMISSION_TAG", "CAMPAIGN_STEP", "SCHEDULING_PAGE", "SOX_PROTECTED_TEST_TYPE", "ORDER", "MARKETING_SMS", "PARTNER_ACCOUNT", "CAMPAIGN_TEMPLATE", "CAMPAIGN_TEMPLATE_STEP", "PLAYLIST", "CLIP", "CAMPAIGN_BUDGET_ITEM", "CAMPAIGN_SPEND_ITEM", "MIC", "CONTENT_AUDIT", "CONTENT_AUDIT_PAGE", "PLAYLIST_FOLDER", "LEAD", "ABANDONED_CART", "EXTERNAL_WEB_URL", "VIEW", "VIEW_BLOCK", "ROSTER", "CART", "AUTOMATION_PLATFORM_FLOW_ACTION", "SOCIAL_PROFILE", "PARTNER_CLIENT", "ROSTER_MEMBER", "MARKETING_EVENT_ATTENDANCE", "ALL_PAGES", "AI_FORECAST", "CRM_PIPELINES_DUMMY_TYPE", "KNOWLEDGE_ARTICLE", "PROPERTY_INFO", "DATA_PRIVACY_CONSENT", "GOAL_TEMPLATE", "SCORE_CONFIGURATION", "AUDIENCE", "PARTNER_CLIENT_REVENUE", "AUTOMATION_JOURNEY", "UNKNOWN"]  # noqa: E501
        if referenced_object_type not in allowed_values:
            raise ValueError(
                "Invalid value for `referenced_object_type` ({0}), must be one of {1}"
                .format(referenced_object_type, allowed_values)
            )

        self._referenced_object_type = referenced_object_type

    @property
    def type(self):
        """Gets the type of this FieldTypeDefinition.


        :return: The type of this FieldTypeDefinition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FieldTypeDefinition.


        :param type: The type of this FieldTypeDefinition.
        :type type: str
        """
        allowed_values = ["string", "number", "bool", "datetime", "enumeration", "date", "phone_number", "currency_number", "json", "object_coordinates"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
