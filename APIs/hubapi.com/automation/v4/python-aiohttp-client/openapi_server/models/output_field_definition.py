# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_type_definition import FieldTypeDefinition
from openapi_server import util


class OutputFieldDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type_definition: FieldTypeDefinition=None):
        """OutputFieldDefinition - a model defined in OpenAPI

        :param type_definition: The type_definition of this OutputFieldDefinition.
        """
        self.openapi_types = {
            'type_definition': FieldTypeDefinition
        }

        self.attribute_map = {
            'type_definition': 'typeDefinition'
        }

        self._type_definition = type_definition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputFieldDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutputFieldDefinition of this OutputFieldDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type_definition(self):
        """Gets the type_definition of this OutputFieldDefinition.


        :return: The type_definition of this OutputFieldDefinition.
        :rtype: FieldTypeDefinition
        """
        return self._type_definition

    @type_definition.setter
    def type_definition(self, type_definition):
        """Sets the type_definition of this OutputFieldDefinition.


        :param type_definition: The type_definition of this OutputFieldDefinition.
        :type type_definition: FieldTypeDefinition
        """
        if type_definition is None:
            raise ValueError("Invalid value for `type_definition`, must not be `None`")

        self._type_definition = type_definition
