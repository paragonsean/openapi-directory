# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PublicExecutionTranslationRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conditions: Dict[str, object]=None, label_name: str=None):
        """PublicExecutionTranslationRule - a model defined in OpenAPI

        :param conditions: The conditions of this PublicExecutionTranslationRule.
        :param label_name: The label_name of this PublicExecutionTranslationRule.
        """
        self.openapi_types = {
            'conditions': Dict[str, object],
            'label_name': str
        }

        self.attribute_map = {
            'conditions': 'conditions',
            'label_name': 'labelName'
        }

        self._conditions = conditions
        self._label_name = label_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublicExecutionTranslationRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublicExecutionTranslationRule of this PublicExecutionTranslationRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conditions(self):
        """Gets the conditions of this PublicExecutionTranslationRule.


        :return: The conditions of this PublicExecutionTranslationRule.
        :rtype: Dict[str, object]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this PublicExecutionTranslationRule.


        :param conditions: The conditions of this PublicExecutionTranslationRule.
        :type conditions: Dict[str, object]
        """
        if conditions is None:
            raise ValueError("Invalid value for `conditions`, must not be `None`")

        self._conditions = conditions

    @property
    def label_name(self):
        """Gets the label_name of this PublicExecutionTranslationRule.


        :return: The label_name of this PublicExecutionTranslationRule.
        :rtype: str
        """
        return self._label_name

    @label_name.setter
    def label_name(self, label_name):
        """Sets the label_name of this PublicExecutionTranslationRule.


        :param label_name: The label_name of this PublicExecutionTranslationRule.
        :type label_name: str
        """
        if label_name is None:
            raise ValueError("Invalid value for `label_name`, must not be `None`")

        self._label_name = label_name
