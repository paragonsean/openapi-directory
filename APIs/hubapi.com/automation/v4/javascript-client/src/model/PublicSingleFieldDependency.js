/**
 * Automation Actions V4
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PublicSingleFieldDependency model module.
 * @module model/PublicSingleFieldDependency
 * @version v4
 */
class PublicSingleFieldDependency {
    /**
     * Constructs a new <code>PublicSingleFieldDependency</code>.
     * @alias module:model/PublicSingleFieldDependency
     * @param controllingFieldName {String} 
     * @param dependencyType {module:model/PublicSingleFieldDependency.DependencyTypeEnum} 
     * @param dependentFieldNames {Array.<String>} 
     */
    constructor(controllingFieldName, dependencyType, dependentFieldNames) { 
        
        PublicSingleFieldDependency.initialize(this, controllingFieldName, dependencyType, dependentFieldNames);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, controllingFieldName, dependencyType, dependentFieldNames) { 
        obj['controllingFieldName'] = controllingFieldName;
        obj['dependencyType'] = dependencyType || 'SINGLE_FIELD';
        obj['dependentFieldNames'] = dependentFieldNames;
    }

    /**
     * Constructs a <code>PublicSingleFieldDependency</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PublicSingleFieldDependency} obj Optional instance to populate.
     * @return {module:model/PublicSingleFieldDependency} The populated <code>PublicSingleFieldDependency</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PublicSingleFieldDependency();

            if (data.hasOwnProperty('controllingFieldName')) {
                obj['controllingFieldName'] = ApiClient.convertToType(data['controllingFieldName'], 'String');
            }
            if (data.hasOwnProperty('dependencyType')) {
                obj['dependencyType'] = ApiClient.convertToType(data['dependencyType'], 'String');
            }
            if (data.hasOwnProperty('dependentFieldNames')) {
                obj['dependentFieldNames'] = ApiClient.convertToType(data['dependentFieldNames'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PublicSingleFieldDependency</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PublicSingleFieldDependency</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PublicSingleFieldDependency.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['controllingFieldName'] && !(typeof data['controllingFieldName'] === 'string' || data['controllingFieldName'] instanceof String)) {
            throw new Error("Expected the field `controllingFieldName` to be a primitive type in the JSON string but got " + data['controllingFieldName']);
        }
        // ensure the json data is a string
        if (data['dependencyType'] && !(typeof data['dependencyType'] === 'string' || data['dependencyType'] instanceof String)) {
            throw new Error("Expected the field `dependencyType` to be a primitive type in the JSON string but got " + data['dependencyType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dependentFieldNames'])) {
            throw new Error("Expected the field `dependentFieldNames` to be an array in the JSON data but got " + data['dependentFieldNames']);
        }

        return true;
    }


}

PublicSingleFieldDependency.RequiredProperties = ["controllingFieldName", "dependencyType", "dependentFieldNames"];

/**
 * @member {String} controllingFieldName
 */
PublicSingleFieldDependency.prototype['controllingFieldName'] = undefined;

/**
 * @member {module:model/PublicSingleFieldDependency.DependencyTypeEnum} dependencyType
 * @default 'SINGLE_FIELD'
 */
PublicSingleFieldDependency.prototype['dependencyType'] = 'SINGLE_FIELD';

/**
 * @member {Array.<String>} dependentFieldNames
 */
PublicSingleFieldDependency.prototype['dependentFieldNames'] = undefined;





/**
 * Allowed values for the <code>dependencyType</code> property.
 * @enum {String}
 * @readonly
 */
PublicSingleFieldDependency['DependencyTypeEnum'] = {

    /**
     * value: "SINGLE_FIELD"
     * @const
     */
    "SINGLE_FIELD": "SINGLE_FIELD"
};



export default PublicSingleFieldDependency;

