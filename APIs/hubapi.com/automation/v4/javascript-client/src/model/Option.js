/**
 * Automation Actions V4
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Option model module.
 * @module model/Option
 * @version v4
 */
class Option {
    /**
     * Constructs a new <code>Option</code>.
     * @alias module:model/Option
     * @param description {String} 
     * @param displayOrder {Number} 
     * @param doubleData {Number} 
     * @param hidden {Boolean} 
     * @param label {String} 
     * @param readOnly {Boolean} 
     * @param value {String} 
     */
    constructor(description, displayOrder, doubleData, hidden, label, readOnly, value) { 
        
        Option.initialize(this, description, displayOrder, doubleData, hidden, label, readOnly, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, displayOrder, doubleData, hidden, label, readOnly, value) { 
        obj['description'] = description;
        obj['displayOrder'] = displayOrder;
        obj['doubleData'] = doubleData;
        obj['hidden'] = hidden;
        obj['label'] = label;
        obj['readOnly'] = readOnly;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>Option</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Option} obj Optional instance to populate.
     * @return {module:model/Option} The populated <code>Option</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Option();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayOrder')) {
                obj['displayOrder'] = ApiClient.convertToType(data['displayOrder'], 'Number');
            }
            if (data.hasOwnProperty('doubleData')) {
                obj['doubleData'] = ApiClient.convertToType(data['doubleData'], 'Number');
            }
            if (data.hasOwnProperty('hidden')) {
                obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('readOnly')) {
                obj['readOnly'] = ApiClient.convertToType(data['readOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Option</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Option</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Option.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

Option.RequiredProperties = ["description", "displayOrder", "doubleData", "hidden", "label", "readOnly", "value"];

/**
 * @member {String} description
 */
Option.prototype['description'] = undefined;

/**
 * @member {Number} displayOrder
 */
Option.prototype['displayOrder'] = undefined;

/**
 * @member {Number} doubleData
 */
Option.prototype['doubleData'] = undefined;

/**
 * @member {Boolean} hidden
 */
Option.prototype['hidden'] = undefined;

/**
 * @member {String} label
 */
Option.prototype['label'] = undefined;

/**
 * @member {Boolean} readOnly
 */
Option.prototype['readOnly'] = undefined;

/**
 * @member {String} value
 */
Option.prototype['value'] = undefined;






export default Option;

