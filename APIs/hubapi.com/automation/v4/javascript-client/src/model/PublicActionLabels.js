/**
 * Automation Actions V4
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PublicActionLabels model module.
 * @module model/PublicActionLabels
 * @version v4
 */
class PublicActionLabels {
    /**
     * Constructs a new <code>PublicActionLabels</code>.
     * @alias module:model/PublicActionLabels
     * @param actionName {String} 
     */
    constructor(actionName) { 
        
        PublicActionLabels.initialize(this, actionName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, actionName) { 
        obj['actionName'] = actionName;
    }

    /**
     * Constructs a <code>PublicActionLabels</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PublicActionLabels} obj Optional instance to populate.
     * @return {module:model/PublicActionLabels} The populated <code>PublicActionLabels</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PublicActionLabels();

            if (data.hasOwnProperty('actionCardContent')) {
                obj['actionCardContent'] = ApiClient.convertToType(data['actionCardContent'], 'String');
            }
            if (data.hasOwnProperty('actionDescription')) {
                obj['actionDescription'] = ApiClient.convertToType(data['actionDescription'], 'String');
            }
            if (data.hasOwnProperty('actionName')) {
                obj['actionName'] = ApiClient.convertToType(data['actionName'], 'String');
            }
            if (data.hasOwnProperty('appDisplayName')) {
                obj['appDisplayName'] = ApiClient.convertToType(data['appDisplayName'], 'String');
            }
            if (data.hasOwnProperty('executionRules')) {
                obj['executionRules'] = ApiClient.convertToType(data['executionRules'], {'String': 'String'});
            }
            if (data.hasOwnProperty('inputFieldDescriptions')) {
                obj['inputFieldDescriptions'] = ApiClient.convertToType(data['inputFieldDescriptions'], {'String': 'String'});
            }
            if (data.hasOwnProperty('inputFieldLabels')) {
                obj['inputFieldLabels'] = ApiClient.convertToType(data['inputFieldLabels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('inputFieldOptionLabels')) {
                obj['inputFieldOptionLabels'] = ApiClient.convertToType(data['inputFieldOptionLabels'], {'String': {'String': 'String'}});
            }
            if (data.hasOwnProperty('outputFieldLabels')) {
                obj['outputFieldLabels'] = ApiClient.convertToType(data['outputFieldLabels'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PublicActionLabels</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PublicActionLabels</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PublicActionLabels.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['actionCardContent'] && !(typeof data['actionCardContent'] === 'string' || data['actionCardContent'] instanceof String)) {
            throw new Error("Expected the field `actionCardContent` to be a primitive type in the JSON string but got " + data['actionCardContent']);
        }
        // ensure the json data is a string
        if (data['actionDescription'] && !(typeof data['actionDescription'] === 'string' || data['actionDescription'] instanceof String)) {
            throw new Error("Expected the field `actionDescription` to be a primitive type in the JSON string but got " + data['actionDescription']);
        }
        // ensure the json data is a string
        if (data['actionName'] && !(typeof data['actionName'] === 'string' || data['actionName'] instanceof String)) {
            throw new Error("Expected the field `actionName` to be a primitive type in the JSON string but got " + data['actionName']);
        }
        // ensure the json data is a string
        if (data['appDisplayName'] && !(typeof data['appDisplayName'] === 'string' || data['appDisplayName'] instanceof String)) {
            throw new Error("Expected the field `appDisplayName` to be a primitive type in the JSON string but got " + data['appDisplayName']);
        }

        return true;
    }


}

PublicActionLabels.RequiredProperties = ["actionName"];

/**
 * @member {String} actionCardContent
 */
PublicActionLabels.prototype['actionCardContent'] = undefined;

/**
 * @member {String} actionDescription
 */
PublicActionLabels.prototype['actionDescription'] = undefined;

/**
 * @member {String} actionName
 */
PublicActionLabels.prototype['actionName'] = undefined;

/**
 * @member {String} appDisplayName
 */
PublicActionLabels.prototype['appDisplayName'] = undefined;

/**
 * @member {Object.<String, String>} executionRules
 */
PublicActionLabels.prototype['executionRules'] = undefined;

/**
 * @member {Object.<String, String>} inputFieldDescriptions
 */
PublicActionLabels.prototype['inputFieldDescriptions'] = undefined;

/**
 * @member {Object.<String, String>} inputFieldLabels
 */
PublicActionLabels.prototype['inputFieldLabels'] = undefined;

/**
 * @member {Object.<String, Object.<String, String>>} inputFieldOptionLabels
 */
PublicActionLabels.prototype['inputFieldOptionLabels'] = undefined;

/**
 * @member {Object.<String, String>} outputFieldLabels
 */
PublicActionLabels.prototype['outputFieldLabels'] = undefined;






export default PublicActionLabels;

