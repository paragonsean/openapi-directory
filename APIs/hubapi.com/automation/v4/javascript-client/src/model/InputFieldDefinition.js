/**
 * Automation Actions V4
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldTypeDefinition from './FieldTypeDefinition';

/**
 * The InputFieldDefinition model module.
 * @module model/InputFieldDefinition
 * @version v4
 */
class InputFieldDefinition {
    /**
     * Constructs a new <code>InputFieldDefinition</code>.
     * @alias module:model/InputFieldDefinition
     * @param isRequired {Boolean} 
     * @param typeDefinition {module:model/FieldTypeDefinition} 
     */
    constructor(isRequired, typeDefinition) { 
        
        InputFieldDefinition.initialize(this, isRequired, typeDefinition);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, isRequired, typeDefinition) { 
        obj['isRequired'] = isRequired;
        obj['typeDefinition'] = typeDefinition;
    }

    /**
     * Constructs a <code>InputFieldDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InputFieldDefinition} obj Optional instance to populate.
     * @return {module:model/InputFieldDefinition} The populated <code>InputFieldDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InputFieldDefinition();

            if (data.hasOwnProperty('automationFieldType')) {
                obj['automationFieldType'] = ApiClient.convertToType(data['automationFieldType'], 'String');
            }
            if (data.hasOwnProperty('isRequired')) {
                obj['isRequired'] = ApiClient.convertToType(data['isRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('supportedValueTypes')) {
                obj['supportedValueTypes'] = ApiClient.convertToType(data['supportedValueTypes'], ['String']);
            }
            if (data.hasOwnProperty('typeDefinition')) {
                obj['typeDefinition'] = FieldTypeDefinition.constructFromObject(data['typeDefinition']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InputFieldDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InputFieldDefinition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InputFieldDefinition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['automationFieldType'] && !(typeof data['automationFieldType'] === 'string' || data['automationFieldType'] instanceof String)) {
            throw new Error("Expected the field `automationFieldType` to be a primitive type in the JSON string but got " + data['automationFieldType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supportedValueTypes'])) {
            throw new Error("Expected the field `supportedValueTypes` to be an array in the JSON data but got " + data['supportedValueTypes']);
        }
        // validate the optional field `typeDefinition`
        if (data['typeDefinition']) { // data not null
          FieldTypeDefinition.validateJSON(data['typeDefinition']);
        }

        return true;
    }


}

InputFieldDefinition.RequiredProperties = ["isRequired", "typeDefinition"];

/**
 * @member {String} automationFieldType
 */
InputFieldDefinition.prototype['automationFieldType'] = undefined;

/**
 * @member {Boolean} isRequired
 */
InputFieldDefinition.prototype['isRequired'] = undefined;

/**
 * @member {Array.<module:model/InputFieldDefinition.SupportedValueTypesEnum>} supportedValueTypes
 */
InputFieldDefinition.prototype['supportedValueTypes'] = undefined;

/**
 * @member {module:model/FieldTypeDefinition} typeDefinition
 */
InputFieldDefinition.prototype['typeDefinition'] = undefined;





/**
 * Allowed values for the <code>supportedValueTypes</code> property.
 * @enum {String}
 * @readonly
 */
InputFieldDefinition['SupportedValueTypesEnum'] = {

    /**
     * value: "STATIC_VALUE"
     * @const
     */
    "STATIC_VALUE": "STATIC_VALUE",

    /**
     * value: "OBJECT_PROPERTY"
     * @const
     */
    "OBJECT_PROPERTY": "OBJECT_PROPERTY",

    /**
     * value: "FIELD_DATA"
     * @const
     */
    "FIELD_DATA": "FIELD_DATA",

    /**
     * value: "FETCHED_OBJECT_PROPERTY"
     * @const
     */
    "FETCHED_OBJECT_PROPERTY": "FETCHED_OBJECT_PROPERTY",

    /**
     * value: "ENROLLMENT_EVENT_PROPERTY"
     * @const
     */
    "ENROLLMENT_EVENT_PROPERTY": "ENROLLMENT_EVENT_PROPERTY"
};



export default InputFieldDefinition;

