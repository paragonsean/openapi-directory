/**
 * Automation Actions V4
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InputFieldDefinition from './InputFieldDefinition';
import OutputFieldDefinition from './OutputFieldDefinition';
import PublicActionDefinitionInputFieldDependenciesInner from './PublicActionDefinitionInputFieldDependenciesInner';
import PublicActionFunctionIdentifier from './PublicActionFunctionIdentifier';
import PublicActionLabels from './PublicActionLabels';
import PublicExecutionTranslationRule from './PublicExecutionTranslationRule';
import PublicObjectRequestOptions from './PublicObjectRequestOptions';

/**
 * The PublicActionDefinition model module.
 * @module model/PublicActionDefinition
 * @version v4
 */
class PublicActionDefinition {
    /**
     * Constructs a new <code>PublicActionDefinition</code>.
     * @alias module:model/PublicActionDefinition
     * @param actionUrl {String} 
     * @param functions {Array.<module:model/PublicActionFunctionIdentifier>} 
     * @param id {String} 
     * @param inputFields {Array.<module:model/InputFieldDefinition>} 
     * @param labels {Object.<String, module:model/PublicActionLabels>} 
     * @param objectTypes {Array.<String>} 
     * @param published {Boolean} 
     * @param revisionId {String} 
     */
    constructor(actionUrl, functions, id, inputFields, labels, objectTypes, published, revisionId) { 
        
        PublicActionDefinition.initialize(this, actionUrl, functions, id, inputFields, labels, objectTypes, published, revisionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, actionUrl, functions, id, inputFields, labels, objectTypes, published, revisionId) { 
        obj['actionUrl'] = actionUrl;
        obj['functions'] = functions;
        obj['id'] = id;
        obj['inputFields'] = inputFields;
        obj['labels'] = labels;
        obj['objectTypes'] = objectTypes;
        obj['published'] = published;
        obj['revisionId'] = revisionId;
    }

    /**
     * Constructs a <code>PublicActionDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PublicActionDefinition} obj Optional instance to populate.
     * @return {module:model/PublicActionDefinition} The populated <code>PublicActionDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PublicActionDefinition();

            if (data.hasOwnProperty('actionUrl')) {
                obj['actionUrl'] = ApiClient.convertToType(data['actionUrl'], 'String');
            }
            if (data.hasOwnProperty('archivedAt')) {
                obj['archivedAt'] = ApiClient.convertToType(data['archivedAt'], 'Number');
            }
            if (data.hasOwnProperty('executionRules')) {
                obj['executionRules'] = ApiClient.convertToType(data['executionRules'], [PublicExecutionTranslationRule]);
            }
            if (data.hasOwnProperty('functions')) {
                obj['functions'] = ApiClient.convertToType(data['functions'], [PublicActionFunctionIdentifier]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('inputFieldDependencies')) {
                obj['inputFieldDependencies'] = ApiClient.convertToType(data['inputFieldDependencies'], [PublicActionDefinitionInputFieldDependenciesInner]);
            }
            if (data.hasOwnProperty('inputFields')) {
                obj['inputFields'] = ApiClient.convertToType(data['inputFields'], [InputFieldDefinition]);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': PublicActionLabels});
            }
            if (data.hasOwnProperty('objectRequestOptions')) {
                obj['objectRequestOptions'] = PublicObjectRequestOptions.constructFromObject(data['objectRequestOptions']);
            }
            if (data.hasOwnProperty('objectTypes')) {
                obj['objectTypes'] = ApiClient.convertToType(data['objectTypes'], ['String']);
            }
            if (data.hasOwnProperty('outputFields')) {
                obj['outputFields'] = ApiClient.convertToType(data['outputFields'], [OutputFieldDefinition]);
            }
            if (data.hasOwnProperty('published')) {
                obj['published'] = ApiClient.convertToType(data['published'], 'Boolean');
            }
            if (data.hasOwnProperty('revisionId')) {
                obj['revisionId'] = ApiClient.convertToType(data['revisionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PublicActionDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PublicActionDefinition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PublicActionDefinition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['actionUrl'] && !(typeof data['actionUrl'] === 'string' || data['actionUrl'] instanceof String)) {
            throw new Error("Expected the field `actionUrl` to be a primitive type in the JSON string but got " + data['actionUrl']);
        }
        if (data['executionRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['executionRules'])) {
                throw new Error("Expected the field `executionRules` to be an array in the JSON data but got " + data['executionRules']);
            }
            // validate the optional field `executionRules` (array)
            for (const item of data['executionRules']) {
                PublicExecutionTranslationRule.validateJSON(item);
            };
        }
        if (data['functions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['functions'])) {
                throw new Error("Expected the field `functions` to be an array in the JSON data but got " + data['functions']);
            }
            // validate the optional field `functions` (array)
            for (const item of data['functions']) {
                PublicActionFunctionIdentifier.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['inputFieldDependencies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inputFieldDependencies'])) {
                throw new Error("Expected the field `inputFieldDependencies` to be an array in the JSON data but got " + data['inputFieldDependencies']);
            }
            // validate the optional field `inputFieldDependencies` (array)
            for (const item of data['inputFieldDependencies']) {
                PublicActionDefinitionInputFieldDependenciesInner.validateJSON(item);
            };
        }
        if (data['inputFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inputFields'])) {
                throw new Error("Expected the field `inputFields` to be an array in the JSON data but got " + data['inputFields']);
            }
            // validate the optional field `inputFields` (array)
            for (const item of data['inputFields']) {
                InputFieldDefinition.validateJSON(item);
            };
        }
        // validate the optional field `objectRequestOptions`
        if (data['objectRequestOptions']) { // data not null
          PublicObjectRequestOptions.validateJSON(data['objectRequestOptions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['objectTypes'])) {
            throw new Error("Expected the field `objectTypes` to be an array in the JSON data but got " + data['objectTypes']);
        }
        if (data['outputFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['outputFields'])) {
                throw new Error("Expected the field `outputFields` to be an array in the JSON data but got " + data['outputFields']);
            }
            // validate the optional field `outputFields` (array)
            for (const item of data['outputFields']) {
                OutputFieldDefinition.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['revisionId'] && !(typeof data['revisionId'] === 'string' || data['revisionId'] instanceof String)) {
            throw new Error("Expected the field `revisionId` to be a primitive type in the JSON string but got " + data['revisionId']);
        }

        return true;
    }


}

PublicActionDefinition.RequiredProperties = ["actionUrl", "functions", "id", "inputFields", "labels", "objectTypes", "published", "revisionId"];

/**
 * @member {String} actionUrl
 */
PublicActionDefinition.prototype['actionUrl'] = undefined;

/**
 * @member {Number} archivedAt
 */
PublicActionDefinition.prototype['archivedAt'] = undefined;

/**
 * @member {Array.<module:model/PublicExecutionTranslationRule>} executionRules
 */
PublicActionDefinition.prototype['executionRules'] = undefined;

/**
 * @member {Array.<module:model/PublicActionFunctionIdentifier>} functions
 */
PublicActionDefinition.prototype['functions'] = undefined;

/**
 * @member {String} id
 */
PublicActionDefinition.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/PublicActionDefinitionInputFieldDependenciesInner>} inputFieldDependencies
 */
PublicActionDefinition.prototype['inputFieldDependencies'] = undefined;

/**
 * @member {Array.<module:model/InputFieldDefinition>} inputFields
 */
PublicActionDefinition.prototype['inputFields'] = undefined;

/**
 * @member {Object.<String, module:model/PublicActionLabels>} labels
 */
PublicActionDefinition.prototype['labels'] = undefined;

/**
 * @member {module:model/PublicObjectRequestOptions} objectRequestOptions
 */
PublicActionDefinition.prototype['objectRequestOptions'] = undefined;

/**
 * @member {Array.<String>} objectTypes
 */
PublicActionDefinition.prototype['objectTypes'] = undefined;

/**
 * @member {Array.<module:model/OutputFieldDefinition>} outputFields
 */
PublicActionDefinition.prototype['outputFields'] = undefined;

/**
 * @member {Boolean} published
 */
PublicActionDefinition.prototype['published'] = undefined;

/**
 * @member {String} revisionId
 */
PublicActionDefinition.prototype['revisionId'] = undefined;






export default PublicActionDefinition;

