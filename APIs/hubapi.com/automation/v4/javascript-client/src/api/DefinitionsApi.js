/**
 * Automation Actions V4
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CollectionResponsePublicActionDefinitionForwardPaging from '../model/CollectionResponsePublicActionDefinitionForwardPaging';
import Error from '../model/Error';
import PublicActionDefinition from '../model/PublicActionDefinition';
import PublicActionDefinitionEgg from '../model/PublicActionDefinitionEgg';
import PublicActionDefinitionPatch from '../model/PublicActionDefinitionPatch';

/**
* Definitions service.
* @module api/DefinitionsApi
* @version v4
*/
export default class DefinitionsApi {

    /**
    * Constructs a new DefinitionsApi. 
    * @alias module:api/DefinitionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteAutomationV4ActionsAppIdDefinitionIdArchive operation.
     * @callback module:api/DefinitionsApi~deleteAutomationV4ActionsAppIdDefinitionIdArchiveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive an extension definition
     * @param {String} definitionId 
     * @param {Number} appId 
     * @param {module:api/DefinitionsApi~deleteAutomationV4ActionsAppIdDefinitionIdArchiveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAutomationV4ActionsAppIdDefinitionIdArchive(definitionId, appId, callback) {
      let postBody = null;
      // verify the required parameter 'definitionId' is set
      if (definitionId === undefined || definitionId === null) {
        throw new Error("Missing the required parameter 'definitionId' when calling deleteAutomationV4ActionsAppIdDefinitionIdArchive");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteAutomationV4ActionsAppIdDefinitionIdArchive");
      }

      let pathParams = {
        'definitionId': definitionId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/automation/v4/actions/{appId}/{definitionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAutomationV4ActionsAppIdDefinitionIdGetById operation.
     * @callback module:api/DefinitionsApi~getAutomationV4ActionsAppIdDefinitionIdGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicActionDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get extension definition by Id
     * @param {String} definitionId 
     * @param {Number} appId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [archived = false)] Whether to return only results that have been archived.
     * @param {module:api/DefinitionsApi~getAutomationV4ActionsAppIdDefinitionIdGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicActionDefinition}
     */
    getAutomationV4ActionsAppIdDefinitionIdGetById(definitionId, appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'definitionId' is set
      if (definitionId === undefined || definitionId === null) {
        throw new Error("Missing the required parameter 'definitionId' when calling getAutomationV4ActionsAppIdDefinitionIdGetById");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getAutomationV4ActionsAppIdDefinitionIdGetById");
      }

      let pathParams = {
        'definitionId': definitionId,
        'appId': appId
      };
      let queryParams = {
        'archived': opts['archived']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = PublicActionDefinition;
      return this.apiClient.callApi(
        '/automation/v4/actions/{appId}/{definitionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAutomationV4ActionsAppIdGetPage operation.
     * @callback module:api/DefinitionsApi~getAutomationV4ActionsAppIdGetPageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionResponsePublicActionDefinitionForwardPaging} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get paged extension definitions
     * @param {Number} appId 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] The maximum number of results to display per page.
     * @param {String} [after] The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.
     * @param {Boolean} [archived = false)] Whether to return only results that have been archived.
     * @param {module:api/DefinitionsApi~getAutomationV4ActionsAppIdGetPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionResponsePublicActionDefinitionForwardPaging}
     */
    getAutomationV4ActionsAppIdGetPage(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getAutomationV4ActionsAppIdGetPage");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'limit': opts['limit'],
        'after': opts['after'],
        'archived': opts['archived']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = CollectionResponsePublicActionDefinitionForwardPaging;
      return this.apiClient.callApi(
        '/automation/v4/actions/{appId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchAutomationV4ActionsAppIdDefinitionIdUpdate operation.
     * @callback module:api/DefinitionsApi~patchAutomationV4ActionsAppIdDefinitionIdUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicActionDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch an existing extension definition
     * @param {String} definitionId 
     * @param {Number} appId 
     * @param {module:model/PublicActionDefinitionPatch} publicActionDefinitionPatch 
     * @param {module:api/DefinitionsApi~patchAutomationV4ActionsAppIdDefinitionIdUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicActionDefinition}
     */
    patchAutomationV4ActionsAppIdDefinitionIdUpdate(definitionId, appId, publicActionDefinitionPatch, callback) {
      let postBody = publicActionDefinitionPatch;
      // verify the required parameter 'definitionId' is set
      if (definitionId === undefined || definitionId === null) {
        throw new Error("Missing the required parameter 'definitionId' when calling patchAutomationV4ActionsAppIdDefinitionIdUpdate");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling patchAutomationV4ActionsAppIdDefinitionIdUpdate");
      }
      // verify the required parameter 'publicActionDefinitionPatch' is set
      if (publicActionDefinitionPatch === undefined || publicActionDefinitionPatch === null) {
        throw new Error("Missing the required parameter 'publicActionDefinitionPatch' when calling patchAutomationV4ActionsAppIdDefinitionIdUpdate");
      }

      let pathParams = {
        'definitionId': definitionId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = PublicActionDefinition;
      return this.apiClient.callApi(
        '/automation/v4/actions/{appId}/{definitionId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAutomationV4ActionsAppIdCreate operation.
     * @callback module:api/DefinitionsApi~postAutomationV4ActionsAppIdCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicActionDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new extension definition
     * @param {Number} appId 
     * @param {module:model/PublicActionDefinitionEgg} publicActionDefinitionEgg 
     * @param {module:api/DefinitionsApi~postAutomationV4ActionsAppIdCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicActionDefinition}
     */
    postAutomationV4ActionsAppIdCreate(appId, publicActionDefinitionEgg, callback) {
      let postBody = publicActionDefinitionEgg;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling postAutomationV4ActionsAppIdCreate");
      }
      // verify the required parameter 'publicActionDefinitionEgg' is set
      if (publicActionDefinitionEgg === undefined || publicActionDefinitionEgg === null) {
        throw new Error("Missing the required parameter 'publicActionDefinitionEgg' when calling postAutomationV4ActionsAppIdCreate");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = PublicActionDefinition;
      return this.apiClient.callApi(
        '/automation/v4/actions/{appId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
