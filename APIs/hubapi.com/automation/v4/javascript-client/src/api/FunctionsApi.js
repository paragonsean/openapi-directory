/**
 * Automation Actions V4
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CollectionResponsePublicActionFunctionIdentifierNoPaging from '../model/CollectionResponsePublicActionFunctionIdentifierNoPaging';
import Error from '../model/Error';
import PublicActionFunction from '../model/PublicActionFunction';
import PublicActionFunctionIdentifier from '../model/PublicActionFunctionIdentifier';

/**
* Functions service.
* @module api/FunctionsApi
* @version v4
*/
export default class FunctionsApi {

    /**
    * Constructs a new FunctionsApi. 
    * @alias module:api/FunctionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionType operation.
     * @callback module:api/FunctionsApi~deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a function for a definition
     * @param {String} definitionId 
     * @param {module:model/String} functionType 
     * @param {Number} appId 
     * @param {module:api/FunctionsApi~deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionType(definitionId, functionType, appId, callback) {
      let postBody = null;
      // verify the required parameter 'definitionId' is set
      if (definitionId === undefined || definitionId === null) {
        throw new Error("Missing the required parameter 'definitionId' when calling deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionType");
      }
      // verify the required parameter 'functionType' is set
      if (functionType === undefined || functionType === null) {
        throw new Error("Missing the required parameter 'functionType' when calling deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionType");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeArchiveByFunctionType");
      }

      let pathParams = {
        'definitionId': definitionId,
        'functionType': functionType,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchive operation.
     * @callback module:api/FunctionsApi~deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchiveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive a function for a definition
     * @param {String} definitionId 
     * @param {module:model/String} functionType 
     * @param {String} functionId 
     * @param {Number} appId 
     * @param {module:api/FunctionsApi~deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchiveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchive(definitionId, functionType, functionId, appId, callback) {
      let postBody = null;
      // verify the required parameter 'definitionId' is set
      if (definitionId === undefined || definitionId === null) {
        throw new Error("Missing the required parameter 'definitionId' when calling deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchive");
      }
      // verify the required parameter 'functionType' is set
      if (functionType === undefined || functionType === null) {
        throw new Error("Missing the required parameter 'functionType' when calling deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchive");
      }
      // verify the required parameter 'functionId' is set
      if (functionId === undefined || functionId === null) {
        throw new Error("Missing the required parameter 'functionId' when calling deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchive");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdArchive");
      }

      let pathParams = {
        'definitionId': definitionId,
        'functionType': functionType,
        'functionId': functionId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}/{functionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetById operation.
     * @callback module:api/FunctionsApi~getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicActionFunction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a function for a given definition
     * @param {String} definitionId 
     * @param {module:model/String} functionType 
     * @param {String} functionId 
     * @param {Number} appId 
     * @param {module:api/FunctionsApi~getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicActionFunction}
     */
    getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetById(definitionId, functionType, functionId, appId, callback) {
      let postBody = null;
      // verify the required parameter 'definitionId' is set
      if (definitionId === undefined || definitionId === null) {
        throw new Error("Missing the required parameter 'definitionId' when calling getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetById");
      }
      // verify the required parameter 'functionType' is set
      if (functionType === undefined || functionType === null) {
        throw new Error("Missing the required parameter 'functionType' when calling getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetById");
      }
      // verify the required parameter 'functionId' is set
      if (functionId === undefined || functionId === null) {
        throw new Error("Missing the required parameter 'functionId' when calling getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetById");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdGetById");
      }

      let pathParams = {
        'definitionId': definitionId,
        'functionType': functionType,
        'functionId': functionId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = PublicActionFunction;
      return this.apiClient.callApi(
        '/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}/{functionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionType operation.
     * @callback module:api/FunctionsApi~getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicActionFunction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all functions by a type for a given definition
     * @param {String} definitionId 
     * @param {module:model/String} functionType 
     * @param {Number} appId 
     * @param {module:api/FunctionsApi~getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicActionFunction}
     */
    getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionType(definitionId, functionType, appId, callback) {
      let postBody = null;
      // verify the required parameter 'definitionId' is set
      if (definitionId === undefined || definitionId === null) {
        throw new Error("Missing the required parameter 'definitionId' when calling getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionType");
      }
      // verify the required parameter 'functionType' is set
      if (functionType === undefined || functionType === null) {
        throw new Error("Missing the required parameter 'functionType' when calling getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionType");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeGetByFunctionType");
      }

      let pathParams = {
        'definitionId': definitionId,
        'functionType': functionType,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = PublicActionFunction;
      return this.apiClient.callApi(
        '/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAutomationV4ActionsAppIdDefinitionIdFunctionsGetPage operation.
     * @callback module:api/FunctionsApi~getAutomationV4ActionsAppIdDefinitionIdFunctionsGetPageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionResponsePublicActionFunctionIdentifierNoPaging} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all functions for a given definition
     * @param {String} definitionId 
     * @param {Number} appId 
     * @param {module:api/FunctionsApi~getAutomationV4ActionsAppIdDefinitionIdFunctionsGetPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionResponsePublicActionFunctionIdentifierNoPaging}
     */
    getAutomationV4ActionsAppIdDefinitionIdFunctionsGetPage(definitionId, appId, callback) {
      let postBody = null;
      // verify the required parameter 'definitionId' is set
      if (definitionId === undefined || definitionId === null) {
        throw new Error("Missing the required parameter 'definitionId' when calling getAutomationV4ActionsAppIdDefinitionIdFunctionsGetPage");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getAutomationV4ActionsAppIdDefinitionIdFunctionsGetPage");
      }

      let pathParams = {
        'definitionId': definitionId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = CollectionResponsePublicActionFunctionIdentifierNoPaging;
      return this.apiClient.callApi(
        '/automation/v4/actions/{appId}/{definitionId}/functions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionType operation.
     * @callback module:api/FunctionsApi~putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicActionFunctionIdentifier} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a function for a definition
     * @param {String} definitionId 
     * @param {module:model/String} functionType 
     * @param {Number} appId 
     * @param {String} body 
     * @param {module:api/FunctionsApi~putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicActionFunctionIdentifier}
     */
    putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionType(definitionId, functionType, appId, body, callback) {
      let postBody = body;
      // verify the required parameter 'definitionId' is set
      if (definitionId === undefined || definitionId === null) {
        throw new Error("Missing the required parameter 'definitionId' when calling putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionType");
      }
      // verify the required parameter 'functionType' is set
      if (functionType === undefined || functionType === null) {
        throw new Error("Missing the required parameter 'functionType' when calling putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionType");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionType");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeCreateOrReplaceByFunctionType");
      }

      let pathParams = {
        'definitionId': definitionId,
        'functionType': functionType,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json', '*/*'];
      let returnType = PublicActionFunctionIdentifier;
      return this.apiClient.callApi(
        '/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace operation.
     * @callback module:api/FunctionsApi~putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicActionFunctionIdentifier} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a function for a definition
     * @param {String} definitionId 
     * @param {module:model/String} functionType 
     * @param {String} functionId 
     * @param {Number} appId 
     * @param {String} body 
     * @param {module:api/FunctionsApi~putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicActionFunctionIdentifier}
     */
    putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace(definitionId, functionType, functionId, appId, body, callback) {
      let postBody = body;
      // verify the required parameter 'definitionId' is set
      if (definitionId === undefined || definitionId === null) {
        throw new Error("Missing the required parameter 'definitionId' when calling putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace");
      }
      // verify the required parameter 'functionType' is set
      if (functionType === undefined || functionType === null) {
        throw new Error("Missing the required parameter 'functionType' when calling putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace");
      }
      // verify the required parameter 'functionId' is set
      if (functionId === undefined || functionId === null) {
        throw new Error("Missing the required parameter 'functionId' when calling putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdCreateOrReplace");
      }

      let pathParams = {
        'definitionId': definitionId,
        'functionType': functionType,
        'functionId': functionId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json', '*/*'];
      let returnType = PublicActionFunctionIdentifier;
      return this.apiClient.callApi(
        '/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}/{functionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
