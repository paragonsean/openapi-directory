/**
 * Automation Actions V4
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchInputCallbackCompletionBatchRequest from '../model/BatchInputCallbackCompletionBatchRequest';
import CallbackCompletionRequest from '../model/CallbackCompletionRequest';
import Error from '../model/Error';

/**
* Callbacks service.
* @module api/CallbacksApi
* @version v4
*/
export default class CallbacksApi {

    /**
    * Constructs a new CallbacksApi. 
    * @alias module:api/CallbacksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postAutomationV4ActionsCallbacksCallbackIdCompleteComplete operation.
     * @callback module:api/CallbacksApi~postAutomationV4ActionsCallbacksCallbackIdCompleteCompleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Completes a single callback
     * @param {String} callbackId 
     * @param {module:model/CallbackCompletionRequest} callbackCompletionRequest 
     * @param {module:api/CallbacksApi~postAutomationV4ActionsCallbacksCallbackIdCompleteCompleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postAutomationV4ActionsCallbacksCallbackIdCompleteComplete(callbackId, callbackCompletionRequest, callback) {
      let postBody = callbackCompletionRequest;
      // verify the required parameter 'callbackId' is set
      if (callbackId === undefined || callbackId === null) {
        throw new Error("Missing the required parameter 'callbackId' when calling postAutomationV4ActionsCallbacksCallbackIdCompleteComplete");
      }
      // verify the required parameter 'callbackCompletionRequest' is set
      if (callbackCompletionRequest === undefined || callbackCompletionRequest === null) {
        throw new Error("Missing the required parameter 'callbackCompletionRequest' when calling postAutomationV4ActionsCallbacksCallbackIdCompleteComplete");
      }

      let pathParams = {
        'callbackId': callbackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/automation/v4/actions/callbacks/{callbackId}/complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAutomationV4ActionsCallbacksCompleteCompleteBatch operation.
     * @callback module:api/CallbacksApi~postAutomationV4ActionsCallbacksCompleteCompleteBatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Completes a batch of callbacks
     * @param {module:model/BatchInputCallbackCompletionBatchRequest} batchInputCallbackCompletionBatchRequest 
     * @param {module:api/CallbacksApi~postAutomationV4ActionsCallbacksCompleteCompleteBatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postAutomationV4ActionsCallbacksCompleteCompleteBatch(batchInputCallbackCompletionBatchRequest, callback) {
      let postBody = batchInputCallbackCompletionBatchRequest;
      // verify the required parameter 'batchInputCallbackCompletionBatchRequest' is set
      if (batchInputCallbackCompletionBatchRequest === undefined || batchInputCallbackCompletionBatchRequest === null) {
        throw new Error("Missing the required parameter 'batchInputCallbackCompletionBatchRequest' when calling postAutomationV4ActionsCallbacksCompleteCompleteBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/automation/v4/actions/callbacks/complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
