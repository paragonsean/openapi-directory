/**
 * Automation Actions V4
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CollectionResponsePublicActionRevisionForwardPaging from '../model/CollectionResponsePublicActionRevisionForwardPaging';
import Error from '../model/Error';
import PublicActionRevision from '../model/PublicActionRevision';

/**
* Revisions service.
* @module api/RevisionsApi
* @version v4
*/
export default class RevisionsApi {

    /**
    * Constructs a new RevisionsApi. 
    * @alias module:api/RevisionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAutomationV4ActionsAppIdDefinitionIdRevisionsGetPage operation.
     * @callback module:api/RevisionsApi~getAutomationV4ActionsAppIdDefinitionIdRevisionsGetPageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionResponsePublicActionRevisionForwardPaging} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all revisions for a given definition
     * @param {String} definitionId 
     * @param {Number} appId 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] The maximum number of results to display per page.
     * @param {String} [after] The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.
     * @param {module:api/RevisionsApi~getAutomationV4ActionsAppIdDefinitionIdRevisionsGetPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionResponsePublicActionRevisionForwardPaging}
     */
    getAutomationV4ActionsAppIdDefinitionIdRevisionsGetPage(definitionId, appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'definitionId' is set
      if (definitionId === undefined || definitionId === null) {
        throw new Error("Missing the required parameter 'definitionId' when calling getAutomationV4ActionsAppIdDefinitionIdRevisionsGetPage");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getAutomationV4ActionsAppIdDefinitionIdRevisionsGetPage");
      }

      let pathParams = {
        'definitionId': definitionId,
        'appId': appId
      };
      let queryParams = {
        'limit': opts['limit'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = CollectionResponsePublicActionRevisionForwardPaging;
      return this.apiClient.callApi(
        '/automation/v4/actions/{appId}/{definitionId}/revisions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdGetById operation.
     * @callback module:api/RevisionsApi~getAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicActionRevision} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a revision for a given definition by revision id
     * @param {String} definitionId 
     * @param {String} revisionId 
     * @param {Number} appId 
     * @param {module:api/RevisionsApi~getAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicActionRevision}
     */
    getAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdGetById(definitionId, revisionId, appId, callback) {
      let postBody = null;
      // verify the required parameter 'definitionId' is set
      if (definitionId === undefined || definitionId === null) {
        throw new Error("Missing the required parameter 'definitionId' when calling getAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdGetById");
      }
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling getAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdGetById");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdGetById");
      }

      let pathParams = {
        'definitionId': definitionId,
        'revisionId': revisionId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developer_hapikey'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = PublicActionRevision;
      return this.apiClient.callApi(
        '/automation/v4/actions/{appId}/{definitionId}/revisions/{revisionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
