/**
 * Automation Actions V4
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFunctionsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIFunctionsApi::OAIFunctionsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIFunctionsApi::~OAIFunctionsApi() {
}

void OAIFunctionsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.hubapi.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("delete_automation_v4_actions_appId_definitionId_functions_functionTypeArchiveByFunctionType", defaultConf);
    _serverIndices.insert("delete_automation_v4_actions_appId_definitionId_functions_functionTypeArchiveByFunctionType", 0);
    _serverConfigs.insert("delete_automation_v4_actions_appId_definitionId_functions_functionType_functionIdArchive", defaultConf);
    _serverIndices.insert("delete_automation_v4_actions_appId_definitionId_functions_functionType_functionIdArchive", 0);
    _serverConfigs.insert("get_automation_v4_actions_appId_definitionId_functionsGetPage", defaultConf);
    _serverIndices.insert("get_automation_v4_actions_appId_definitionId_functionsGetPage", 0);
    _serverConfigs.insert("get_automation_v4_actions_appId_definitionId_functions_functionTypeGetByFunctionType", defaultConf);
    _serverIndices.insert("get_automation_v4_actions_appId_definitionId_functions_functionTypeGetByFunctionType", 0);
    _serverConfigs.insert("get_automation_v4_actions_appId_definitionId_functions_functionType_functionIdGetById", defaultConf);
    _serverIndices.insert("get_automation_v4_actions_appId_definitionId_functions_functionType_functionIdGetById", 0);
    _serverConfigs.insert("put_automation_v4_actions_appId_definitionId_functions_functionTypeCreateOrReplaceByFunctionType", defaultConf);
    _serverIndices.insert("put_automation_v4_actions_appId_definitionId_functions_functionTypeCreateOrReplaceByFunctionType", 0);
    _serverConfigs.insert("put_automation_v4_actions_appId_definitionId_functions_functionType_functionIdCreateOrReplace", defaultConf);
    _serverIndices.insert("put_automation_v4_actions_appId_definitionId_functions_functionType_functionIdCreateOrReplace", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIFunctionsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIFunctionsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIFunctionsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIFunctionsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIFunctionsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIFunctionsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIFunctionsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIFunctionsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIFunctionsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIFunctionsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIFunctionsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIFunctionsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIFunctionsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIFunctionsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIFunctionsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIFunctionsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIFunctionsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIFunctionsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIFunctionsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIFunctionsApi::delete_automation_v4_actions_appId_definitionId_functions_functionTypeArchiveByFunctionType(const QString &definition_id, const QString &function_type, const qint32 &app_id) {
    QString fullPath = QString(_serverConfigs["delete_automation_v4_actions_appId_definitionId_functions_functionTypeArchiveByFunctionType"][_serverIndices.value("delete_automation_v4_actions_appId_definitionId_functions_functionTypeArchiveByFunctionType")].URL()+"/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}");
    
    if (_apiKeys.contains("developer_hapikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("developer_hapikey=").append(_apiKeys.find("developer_hapikey").value());
    }
    
    
    {
        QString definition_idPathParam("{");
        definition_idPathParam.append("definitionId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "definitionId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"definitionId"+pathSuffix : pathPrefix;
        fullPath.replace(definition_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(definition_id)));
    }
    
    {
        QString function_typePathParam("{");
        function_typePathParam.append("functionType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "functionType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"functionType"+pathSuffix : pathPrefix;
        fullPath.replace(function_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(function_type)));
    }
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("appId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "appId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"appId"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFunctionsApi::delete_automation_v4_actions_appId_definitionId_functions_functionTypeArchiveByFunctionTypeCallback);
    connect(this, &OAIFunctionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFunctionsApi::delete_automation_v4_actions_appId_definitionId_functions_functionTypeArchiveByFunctionTypeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT delete_automation_v4_actions_appId_definitionId_functions_functionTypeArchiveByFunctionTypeSignal();
        Q_EMIT delete_automation_v4_actions_appId_definitionId_functions_functionTypeArchiveByFunctionTypeSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT delete_automation_v4_actions_appId_definitionId_functions_functionTypeArchiveByFunctionTypeSignalE(error_type, error_str);
        Q_EMIT delete_automation_v4_actions_appId_definitionId_functions_functionTypeArchiveByFunctionTypeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT delete_automation_v4_actions_appId_definitionId_functions_functionTypeArchiveByFunctionTypeSignalError(error_type, error_str);
        Q_EMIT delete_automation_v4_actions_appId_definitionId_functions_functionTypeArchiveByFunctionTypeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFunctionsApi::delete_automation_v4_actions_appId_definitionId_functions_functionType_functionIdArchive(const QString &definition_id, const QString &function_type, const QString &function_id, const qint32 &app_id) {
    QString fullPath = QString(_serverConfigs["delete_automation_v4_actions_appId_definitionId_functions_functionType_functionIdArchive"][_serverIndices.value("delete_automation_v4_actions_appId_definitionId_functions_functionType_functionIdArchive")].URL()+"/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}/{functionId}");
    
    if (_apiKeys.contains("developer_hapikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("developer_hapikey=").append(_apiKeys.find("developer_hapikey").value());
    }
    
    
    {
        QString definition_idPathParam("{");
        definition_idPathParam.append("definitionId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "definitionId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"definitionId"+pathSuffix : pathPrefix;
        fullPath.replace(definition_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(definition_id)));
    }
    
    {
        QString function_typePathParam("{");
        function_typePathParam.append("functionType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "functionType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"functionType"+pathSuffix : pathPrefix;
        fullPath.replace(function_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(function_type)));
    }
    
    {
        QString function_idPathParam("{");
        function_idPathParam.append("functionId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "functionId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"functionId"+pathSuffix : pathPrefix;
        fullPath.replace(function_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(function_id)));
    }
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("appId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "appId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"appId"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFunctionsApi::delete_automation_v4_actions_appId_definitionId_functions_functionType_functionIdArchiveCallback);
    connect(this, &OAIFunctionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFunctionsApi::delete_automation_v4_actions_appId_definitionId_functions_functionType_functionIdArchiveCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT delete_automation_v4_actions_appId_definitionId_functions_functionType_functionIdArchiveSignal();
        Q_EMIT delete_automation_v4_actions_appId_definitionId_functions_functionType_functionIdArchiveSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT delete_automation_v4_actions_appId_definitionId_functions_functionType_functionIdArchiveSignalE(error_type, error_str);
        Q_EMIT delete_automation_v4_actions_appId_definitionId_functions_functionType_functionIdArchiveSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT delete_automation_v4_actions_appId_definitionId_functions_functionType_functionIdArchiveSignalError(error_type, error_str);
        Q_EMIT delete_automation_v4_actions_appId_definitionId_functions_functionType_functionIdArchiveSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFunctionsApi::get_automation_v4_actions_appId_definitionId_functionsGetPage(const QString &definition_id, const qint32 &app_id) {
    QString fullPath = QString(_serverConfigs["get_automation_v4_actions_appId_definitionId_functionsGetPage"][_serverIndices.value("get_automation_v4_actions_appId_definitionId_functionsGetPage")].URL()+"/automation/v4/actions/{appId}/{definitionId}/functions");
    
    if (_apiKeys.contains("developer_hapikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("developer_hapikey=").append(_apiKeys.find("developer_hapikey").value());
    }
    
    
    {
        QString definition_idPathParam("{");
        definition_idPathParam.append("definitionId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "definitionId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"definitionId"+pathSuffix : pathPrefix;
        fullPath.replace(definition_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(definition_id)));
    }
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("appId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "appId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"appId"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFunctionsApi::get_automation_v4_actions_appId_definitionId_functionsGetPageCallback);
    connect(this, &OAIFunctionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFunctionsApi::get_automation_v4_actions_appId_definitionId_functionsGetPageCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICollectionResponsePublicActionFunctionIdentifierNoPaging output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT get_automation_v4_actions_appId_definitionId_functionsGetPageSignal(output);
        Q_EMIT get_automation_v4_actions_appId_definitionId_functionsGetPageSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT get_automation_v4_actions_appId_definitionId_functionsGetPageSignalE(output, error_type, error_str);
        Q_EMIT get_automation_v4_actions_appId_definitionId_functionsGetPageSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT get_automation_v4_actions_appId_definitionId_functionsGetPageSignalError(output, error_type, error_str);
        Q_EMIT get_automation_v4_actions_appId_definitionId_functionsGetPageSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFunctionsApi::get_automation_v4_actions_appId_definitionId_functions_functionTypeGetByFunctionType(const QString &definition_id, const QString &function_type, const qint32 &app_id) {
    QString fullPath = QString(_serverConfigs["get_automation_v4_actions_appId_definitionId_functions_functionTypeGetByFunctionType"][_serverIndices.value("get_automation_v4_actions_appId_definitionId_functions_functionTypeGetByFunctionType")].URL()+"/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}");
    
    if (_apiKeys.contains("developer_hapikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("developer_hapikey=").append(_apiKeys.find("developer_hapikey").value());
    }
    
    
    {
        QString definition_idPathParam("{");
        definition_idPathParam.append("definitionId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "definitionId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"definitionId"+pathSuffix : pathPrefix;
        fullPath.replace(definition_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(definition_id)));
    }
    
    {
        QString function_typePathParam("{");
        function_typePathParam.append("functionType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "functionType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"functionType"+pathSuffix : pathPrefix;
        fullPath.replace(function_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(function_type)));
    }
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("appId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "appId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"appId"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFunctionsApi::get_automation_v4_actions_appId_definitionId_functions_functionTypeGetByFunctionTypeCallback);
    connect(this, &OAIFunctionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFunctionsApi::get_automation_v4_actions_appId_definitionId_functions_functionTypeGetByFunctionTypeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPublicActionFunction output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT get_automation_v4_actions_appId_definitionId_functions_functionTypeGetByFunctionTypeSignal(output);
        Q_EMIT get_automation_v4_actions_appId_definitionId_functions_functionTypeGetByFunctionTypeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT get_automation_v4_actions_appId_definitionId_functions_functionTypeGetByFunctionTypeSignalE(output, error_type, error_str);
        Q_EMIT get_automation_v4_actions_appId_definitionId_functions_functionTypeGetByFunctionTypeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT get_automation_v4_actions_appId_definitionId_functions_functionTypeGetByFunctionTypeSignalError(output, error_type, error_str);
        Q_EMIT get_automation_v4_actions_appId_definitionId_functions_functionTypeGetByFunctionTypeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFunctionsApi::get_automation_v4_actions_appId_definitionId_functions_functionType_functionIdGetById(const QString &definition_id, const QString &function_type, const QString &function_id, const qint32 &app_id) {
    QString fullPath = QString(_serverConfigs["get_automation_v4_actions_appId_definitionId_functions_functionType_functionIdGetById"][_serverIndices.value("get_automation_v4_actions_appId_definitionId_functions_functionType_functionIdGetById")].URL()+"/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}/{functionId}");
    
    if (_apiKeys.contains("developer_hapikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("developer_hapikey=").append(_apiKeys.find("developer_hapikey").value());
    }
    
    
    {
        QString definition_idPathParam("{");
        definition_idPathParam.append("definitionId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "definitionId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"definitionId"+pathSuffix : pathPrefix;
        fullPath.replace(definition_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(definition_id)));
    }
    
    {
        QString function_typePathParam("{");
        function_typePathParam.append("functionType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "functionType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"functionType"+pathSuffix : pathPrefix;
        fullPath.replace(function_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(function_type)));
    }
    
    {
        QString function_idPathParam("{");
        function_idPathParam.append("functionId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "functionId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"functionId"+pathSuffix : pathPrefix;
        fullPath.replace(function_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(function_id)));
    }
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("appId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "appId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"appId"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFunctionsApi::get_automation_v4_actions_appId_definitionId_functions_functionType_functionIdGetByIdCallback);
    connect(this, &OAIFunctionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFunctionsApi::get_automation_v4_actions_appId_definitionId_functions_functionType_functionIdGetByIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPublicActionFunction output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT get_automation_v4_actions_appId_definitionId_functions_functionType_functionIdGetByIdSignal(output);
        Q_EMIT get_automation_v4_actions_appId_definitionId_functions_functionType_functionIdGetByIdSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT get_automation_v4_actions_appId_definitionId_functions_functionType_functionIdGetByIdSignalE(output, error_type, error_str);
        Q_EMIT get_automation_v4_actions_appId_definitionId_functions_functionType_functionIdGetByIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT get_automation_v4_actions_appId_definitionId_functions_functionType_functionIdGetByIdSignalError(output, error_type, error_str);
        Q_EMIT get_automation_v4_actions_appId_definitionId_functions_functionType_functionIdGetByIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFunctionsApi::put_automation_v4_actions_appId_definitionId_functions_functionTypeCreateOrReplaceByFunctionType(const QString &definition_id, const QString &function_type, const qint32 &app_id, const QString &body) {
    QString fullPath = QString(_serverConfigs["put_automation_v4_actions_appId_definitionId_functions_functionTypeCreateOrReplaceByFunctionType"][_serverIndices.value("put_automation_v4_actions_appId_definitionId_functions_functionTypeCreateOrReplaceByFunctionType")].URL()+"/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}");
    
    if (_apiKeys.contains("developer_hapikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("developer_hapikey=").append(_apiKeys.find("developer_hapikey").value());
    }
    
    
    {
        QString definition_idPathParam("{");
        definition_idPathParam.append("definitionId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "definitionId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"definitionId"+pathSuffix : pathPrefix;
        fullPath.replace(definition_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(definition_id)));
    }
    
    {
        QString function_typePathParam("{");
        function_typePathParam.append("functionType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "functionType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"functionType"+pathSuffix : pathPrefix;
        fullPath.replace(function_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(function_type)));
    }
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("appId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "appId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"appId"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        QByteArray output = body.toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFunctionsApi::put_automation_v4_actions_appId_definitionId_functions_functionTypeCreateOrReplaceByFunctionTypeCallback);
    connect(this, &OAIFunctionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFunctionsApi::put_automation_v4_actions_appId_definitionId_functions_functionTypeCreateOrReplaceByFunctionTypeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPublicActionFunctionIdentifier output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT put_automation_v4_actions_appId_definitionId_functions_functionTypeCreateOrReplaceByFunctionTypeSignal(output);
        Q_EMIT put_automation_v4_actions_appId_definitionId_functions_functionTypeCreateOrReplaceByFunctionTypeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT put_automation_v4_actions_appId_definitionId_functions_functionTypeCreateOrReplaceByFunctionTypeSignalE(output, error_type, error_str);
        Q_EMIT put_automation_v4_actions_appId_definitionId_functions_functionTypeCreateOrReplaceByFunctionTypeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT put_automation_v4_actions_appId_definitionId_functions_functionTypeCreateOrReplaceByFunctionTypeSignalError(output, error_type, error_str);
        Q_EMIT put_automation_v4_actions_appId_definitionId_functions_functionTypeCreateOrReplaceByFunctionTypeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFunctionsApi::put_automation_v4_actions_appId_definitionId_functions_functionType_functionIdCreateOrReplace(const QString &definition_id, const QString &function_type, const QString &function_id, const qint32 &app_id, const QString &body) {
    QString fullPath = QString(_serverConfigs["put_automation_v4_actions_appId_definitionId_functions_functionType_functionIdCreateOrReplace"][_serverIndices.value("put_automation_v4_actions_appId_definitionId_functions_functionType_functionIdCreateOrReplace")].URL()+"/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}/{functionId}");
    
    if (_apiKeys.contains("developer_hapikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("developer_hapikey=").append(_apiKeys.find("developer_hapikey").value());
    }
    
    
    {
        QString definition_idPathParam("{");
        definition_idPathParam.append("definitionId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "definitionId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"definitionId"+pathSuffix : pathPrefix;
        fullPath.replace(definition_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(definition_id)));
    }
    
    {
        QString function_typePathParam("{");
        function_typePathParam.append("functionType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "functionType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"functionType"+pathSuffix : pathPrefix;
        fullPath.replace(function_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(function_type)));
    }
    
    {
        QString function_idPathParam("{");
        function_idPathParam.append("functionId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "functionId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"functionId"+pathSuffix : pathPrefix;
        fullPath.replace(function_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(function_id)));
    }
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("appId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "appId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"appId"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        QByteArray output = body.toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFunctionsApi::put_automation_v4_actions_appId_definitionId_functions_functionType_functionIdCreateOrReplaceCallback);
    connect(this, &OAIFunctionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFunctionsApi::put_automation_v4_actions_appId_definitionId_functions_functionType_functionIdCreateOrReplaceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPublicActionFunctionIdentifier output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT put_automation_v4_actions_appId_definitionId_functions_functionType_functionIdCreateOrReplaceSignal(output);
        Q_EMIT put_automation_v4_actions_appId_definitionId_functions_functionType_functionIdCreateOrReplaceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT put_automation_v4_actions_appId_definitionId_functions_functionType_functionIdCreateOrReplaceSignalE(output, error_type, error_str);
        Q_EMIT put_automation_v4_actions_appId_definitionId_functions_functionType_functionIdCreateOrReplaceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT put_automation_v4_actions_appId_definitionId_functions_functionType_functionIdCreateOrReplaceSignalError(output, error_type, error_str);
        Q_EMIT put_automation_v4_actions_appId_definitionId_functions_functionType_functionIdCreateOrReplaceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFunctionsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
