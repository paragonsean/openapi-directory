/**
 * Automation Actions V4
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefinitionsApi_H
#define OAI_OAIDefinitionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICollectionResponsePublicActionDefinitionForwardPaging.h"
#include "OAIError.h"
#include "OAIPublicActionDefinition.h"
#include "OAIPublicActionDefinitionEgg.h"
#include "OAIPublicActionDefinitionPatch.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefinitionsApi : public QObject {
    Q_OBJECT

public:
    OAIDefinitionsApi(const int timeOut = 0);
    ~OAIDefinitionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  definition_id QString [required]
    * @param[in]  app_id qint32 [required]
    */
    virtual void delete_automation_v4_actions_appId_definitionIdArchive(const QString &definition_id, const qint32 &app_id);

    /**
    * @param[in]  app_id qint32 [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  after QString [optional]
    * @param[in]  archived bool [optional]
    */
    virtual void get_automation_v4_actions_appIdGetPage(const qint32 &app_id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &archived = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  definition_id QString [required]
    * @param[in]  app_id qint32 [required]
    * @param[in]  archived bool [optional]
    */
    virtual void get_automation_v4_actions_appId_definitionIdGetById(const QString &definition_id, const qint32 &app_id, const ::OpenAPI::OptionalParam<bool> &archived = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  definition_id QString [required]
    * @param[in]  app_id qint32 [required]
    * @param[in]  oai_public_action_definition_patch OAIPublicActionDefinitionPatch [required]
    */
    virtual void patch_automation_v4_actions_appId_definitionIdUpdate(const QString &definition_id, const qint32 &app_id, const OAIPublicActionDefinitionPatch &oai_public_action_definition_patch);

    /**
    * @param[in]  app_id qint32 [required]
    * @param[in]  oai_public_action_definition_egg OAIPublicActionDefinitionEgg [required]
    */
    virtual void post_automation_v4_actions_appIdCreate(const qint32 &app_id, const OAIPublicActionDefinitionEgg &oai_public_action_definition_egg);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void delete_automation_v4_actions_appId_definitionIdArchiveCallback(OAIHttpRequestWorker *worker);
    void get_automation_v4_actions_appIdGetPageCallback(OAIHttpRequestWorker *worker);
    void get_automation_v4_actions_appId_definitionIdGetByIdCallback(OAIHttpRequestWorker *worker);
    void patch_automation_v4_actions_appId_definitionIdUpdateCallback(OAIHttpRequestWorker *worker);
    void post_automation_v4_actions_appIdCreateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void delete_automation_v4_actions_appId_definitionIdArchiveSignal();
    void get_automation_v4_actions_appIdGetPageSignal(OAICollectionResponsePublicActionDefinitionForwardPaging summary);
    void get_automation_v4_actions_appId_definitionIdGetByIdSignal(OAIPublicActionDefinition summary);
    void patch_automation_v4_actions_appId_definitionIdUpdateSignal(OAIPublicActionDefinition summary);
    void post_automation_v4_actions_appIdCreateSignal(OAIPublicActionDefinition summary);


    void delete_automation_v4_actions_appId_definitionIdArchiveSignalFull(OAIHttpRequestWorker *worker);
    void get_automation_v4_actions_appIdGetPageSignalFull(OAIHttpRequestWorker *worker, OAICollectionResponsePublicActionDefinitionForwardPaging summary);
    void get_automation_v4_actions_appId_definitionIdGetByIdSignalFull(OAIHttpRequestWorker *worker, OAIPublicActionDefinition summary);
    void patch_automation_v4_actions_appId_definitionIdUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPublicActionDefinition summary);
    void post_automation_v4_actions_appIdCreateSignalFull(OAIHttpRequestWorker *worker, OAIPublicActionDefinition summary);

    Q_DECL_DEPRECATED_X("Use delete_automation_v4_actions_appId_definitionIdArchiveSignalError() instead")
    void delete_automation_v4_actions_appId_definitionIdArchiveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delete_automation_v4_actions_appId_definitionIdArchiveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_automation_v4_actions_appIdGetPageSignalError() instead")
    void get_automation_v4_actions_appIdGetPageSignalE(OAICollectionResponsePublicActionDefinitionForwardPaging summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_automation_v4_actions_appIdGetPageSignalError(OAICollectionResponsePublicActionDefinitionForwardPaging summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_automation_v4_actions_appId_definitionIdGetByIdSignalError() instead")
    void get_automation_v4_actions_appId_definitionIdGetByIdSignalE(OAIPublicActionDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_automation_v4_actions_appId_definitionIdGetByIdSignalError(OAIPublicActionDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patch_automation_v4_actions_appId_definitionIdUpdateSignalError() instead")
    void patch_automation_v4_actions_appId_definitionIdUpdateSignalE(OAIPublicActionDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patch_automation_v4_actions_appId_definitionIdUpdateSignalError(OAIPublicActionDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use post_automation_v4_actions_appIdCreateSignalError() instead")
    void post_automation_v4_actions_appIdCreateSignalE(OAIPublicActionDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void post_automation_v4_actions_appIdCreateSignalError(OAIPublicActionDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use delete_automation_v4_actions_appId_definitionIdArchiveSignalErrorFull() instead")
    void delete_automation_v4_actions_appId_definitionIdArchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delete_automation_v4_actions_appId_definitionIdArchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_automation_v4_actions_appIdGetPageSignalErrorFull() instead")
    void get_automation_v4_actions_appIdGetPageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_automation_v4_actions_appIdGetPageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_automation_v4_actions_appId_definitionIdGetByIdSignalErrorFull() instead")
    void get_automation_v4_actions_appId_definitionIdGetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_automation_v4_actions_appId_definitionIdGetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patch_automation_v4_actions_appId_definitionIdUpdateSignalErrorFull() instead")
    void patch_automation_v4_actions_appId_definitionIdUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patch_automation_v4_actions_appId_definitionIdUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use post_automation_v4_actions_appIdCreateSignalErrorFull() instead")
    void post_automation_v4_actions_appIdCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void post_automation_v4_actions_appIdCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
