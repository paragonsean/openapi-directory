/**
 * Automation Actions V4
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputFieldDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputFieldDefinition::OAIInputFieldDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputFieldDefinition::OAIInputFieldDefinition() {
    this->initializeModel();
}

OAIInputFieldDefinition::~OAIInputFieldDefinition() {}

void OAIInputFieldDefinition::initializeModel() {

    m_automation_field_type_isSet = false;
    m_automation_field_type_isValid = false;

    m_is_required_isSet = false;
    m_is_required_isValid = false;

    m_supported_value_types_isSet = false;
    m_supported_value_types_isValid = false;

    m_type_definition_isSet = false;
    m_type_definition_isValid = false;
}

void OAIInputFieldDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputFieldDefinition::fromJsonObject(QJsonObject json) {

    m_automation_field_type_isValid = ::OpenAPI::fromJsonValue(m_automation_field_type, json[QString("automationFieldType")]);
    m_automation_field_type_isSet = !json[QString("automationFieldType")].isNull() && m_automation_field_type_isValid;

    m_is_required_isValid = ::OpenAPI::fromJsonValue(m_is_required, json[QString("isRequired")]);
    m_is_required_isSet = !json[QString("isRequired")].isNull() && m_is_required_isValid;

    m_supported_value_types_isValid = ::OpenAPI::fromJsonValue(m_supported_value_types, json[QString("supportedValueTypes")]);
    m_supported_value_types_isSet = !json[QString("supportedValueTypes")].isNull() && m_supported_value_types_isValid;

    m_type_definition_isValid = ::OpenAPI::fromJsonValue(m_type_definition, json[QString("typeDefinition")]);
    m_type_definition_isSet = !json[QString("typeDefinition")].isNull() && m_type_definition_isValid;
}

QString OAIInputFieldDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputFieldDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_automation_field_type_isSet) {
        obj.insert(QString("automationFieldType"), ::OpenAPI::toJsonValue(m_automation_field_type));
    }
    if (m_is_required_isSet) {
        obj.insert(QString("isRequired"), ::OpenAPI::toJsonValue(m_is_required));
    }
    if (m_supported_value_types.size() > 0) {
        obj.insert(QString("supportedValueTypes"), ::OpenAPI::toJsonValue(m_supported_value_types));
    }
    if (m_type_definition.isSet()) {
        obj.insert(QString("typeDefinition"), ::OpenAPI::toJsonValue(m_type_definition));
    }
    return obj;
}

QString OAIInputFieldDefinition::getAutomationFieldType() const {
    return m_automation_field_type;
}
void OAIInputFieldDefinition::setAutomationFieldType(const QString &automation_field_type) {
    m_automation_field_type = automation_field_type;
    m_automation_field_type_isSet = true;
}

bool OAIInputFieldDefinition::is_automation_field_type_Set() const{
    return m_automation_field_type_isSet;
}

bool OAIInputFieldDefinition::is_automation_field_type_Valid() const{
    return m_automation_field_type_isValid;
}

bool OAIInputFieldDefinition::isIsRequired() const {
    return m_is_required;
}
void OAIInputFieldDefinition::setIsRequired(const bool &is_required) {
    m_is_required = is_required;
    m_is_required_isSet = true;
}

bool OAIInputFieldDefinition::is_is_required_Set() const{
    return m_is_required_isSet;
}

bool OAIInputFieldDefinition::is_is_required_Valid() const{
    return m_is_required_isValid;
}

QList<QString> OAIInputFieldDefinition::getSupportedValueTypes() const {
    return m_supported_value_types;
}
void OAIInputFieldDefinition::setSupportedValueTypes(const QList<QString> &supported_value_types) {
    m_supported_value_types = supported_value_types;
    m_supported_value_types_isSet = true;
}

bool OAIInputFieldDefinition::is_supported_value_types_Set() const{
    return m_supported_value_types_isSet;
}

bool OAIInputFieldDefinition::is_supported_value_types_Valid() const{
    return m_supported_value_types_isValid;
}

OAIFieldTypeDefinition OAIInputFieldDefinition::getTypeDefinition() const {
    return m_type_definition;
}
void OAIInputFieldDefinition::setTypeDefinition(const OAIFieldTypeDefinition &type_definition) {
    m_type_definition = type_definition;
    m_type_definition_isSet = true;
}

bool OAIInputFieldDefinition::is_type_definition_Set() const{
    return m_type_definition_isSet;
}

bool OAIInputFieldDefinition::is_type_definition_Valid() const{
    return m_type_definition_isValid;
}

bool OAIInputFieldDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automation_field_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_value_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputFieldDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_required_isValid && m_type_definition_isValid && true;
}

} // namespace OpenAPI
