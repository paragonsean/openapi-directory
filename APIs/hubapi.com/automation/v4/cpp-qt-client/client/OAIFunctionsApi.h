/**
 * Automation Actions V4
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFunctionsApi_H
#define OAI_OAIFunctionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICollectionResponsePublicActionFunctionIdentifierNoPaging.h"
#include "OAIError.h"
#include "OAIPublicActionFunction.h"
#include "OAIPublicActionFunctionIdentifier.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFunctionsApi : public QObject {
    Q_OBJECT

public:
    OAIFunctionsApi(const int timeOut = 0);
    ~OAIFunctionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  definition_id QString [required]
    * @param[in]  function_type QString [required]
    * @param[in]  app_id qint32 [required]
    */
    virtual void delete_automation_v4_actions_appId_definitionId_functions_functionTypeArchiveByFunctionType(const QString &definition_id, const QString &function_type, const qint32 &app_id);

    /**
    * @param[in]  definition_id QString [required]
    * @param[in]  function_type QString [required]
    * @param[in]  function_id QString [required]
    * @param[in]  app_id qint32 [required]
    */
    virtual void delete_automation_v4_actions_appId_definitionId_functions_functionType_functionIdArchive(const QString &definition_id, const QString &function_type, const QString &function_id, const qint32 &app_id);

    /**
    * @param[in]  definition_id QString [required]
    * @param[in]  app_id qint32 [required]
    */
    virtual void get_automation_v4_actions_appId_definitionId_functionsGetPage(const QString &definition_id, const qint32 &app_id);

    /**
    * @param[in]  definition_id QString [required]
    * @param[in]  function_type QString [required]
    * @param[in]  app_id qint32 [required]
    */
    virtual void get_automation_v4_actions_appId_definitionId_functions_functionTypeGetByFunctionType(const QString &definition_id, const QString &function_type, const qint32 &app_id);

    /**
    * @param[in]  definition_id QString [required]
    * @param[in]  function_type QString [required]
    * @param[in]  function_id QString [required]
    * @param[in]  app_id qint32 [required]
    */
    virtual void get_automation_v4_actions_appId_definitionId_functions_functionType_functionIdGetById(const QString &definition_id, const QString &function_type, const QString &function_id, const qint32 &app_id);

    /**
    * @param[in]  definition_id QString [required]
    * @param[in]  function_type QString [required]
    * @param[in]  app_id qint32 [required]
    * @param[in]  body QString [required]
    */
    virtual void put_automation_v4_actions_appId_definitionId_functions_functionTypeCreateOrReplaceByFunctionType(const QString &definition_id, const QString &function_type, const qint32 &app_id, const QString &body);

    /**
    * @param[in]  definition_id QString [required]
    * @param[in]  function_type QString [required]
    * @param[in]  function_id QString [required]
    * @param[in]  app_id qint32 [required]
    * @param[in]  body QString [required]
    */
    virtual void put_automation_v4_actions_appId_definitionId_functions_functionType_functionIdCreateOrReplace(const QString &definition_id, const QString &function_type, const QString &function_id, const qint32 &app_id, const QString &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void delete_automation_v4_actions_appId_definitionId_functions_functionTypeArchiveByFunctionTypeCallback(OAIHttpRequestWorker *worker);
    void delete_automation_v4_actions_appId_definitionId_functions_functionType_functionIdArchiveCallback(OAIHttpRequestWorker *worker);
    void get_automation_v4_actions_appId_definitionId_functionsGetPageCallback(OAIHttpRequestWorker *worker);
    void get_automation_v4_actions_appId_definitionId_functions_functionTypeGetByFunctionTypeCallback(OAIHttpRequestWorker *worker);
    void get_automation_v4_actions_appId_definitionId_functions_functionType_functionIdGetByIdCallback(OAIHttpRequestWorker *worker);
    void put_automation_v4_actions_appId_definitionId_functions_functionTypeCreateOrReplaceByFunctionTypeCallback(OAIHttpRequestWorker *worker);
    void put_automation_v4_actions_appId_definitionId_functions_functionType_functionIdCreateOrReplaceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void delete_automation_v4_actions_appId_definitionId_functions_functionTypeArchiveByFunctionTypeSignal();
    void delete_automation_v4_actions_appId_definitionId_functions_functionType_functionIdArchiveSignal();
    void get_automation_v4_actions_appId_definitionId_functionsGetPageSignal(OAICollectionResponsePublicActionFunctionIdentifierNoPaging summary);
    void get_automation_v4_actions_appId_definitionId_functions_functionTypeGetByFunctionTypeSignal(OAIPublicActionFunction summary);
    void get_automation_v4_actions_appId_definitionId_functions_functionType_functionIdGetByIdSignal(OAIPublicActionFunction summary);
    void put_automation_v4_actions_appId_definitionId_functions_functionTypeCreateOrReplaceByFunctionTypeSignal(OAIPublicActionFunctionIdentifier summary);
    void put_automation_v4_actions_appId_definitionId_functions_functionType_functionIdCreateOrReplaceSignal(OAIPublicActionFunctionIdentifier summary);


    void delete_automation_v4_actions_appId_definitionId_functions_functionTypeArchiveByFunctionTypeSignalFull(OAIHttpRequestWorker *worker);
    void delete_automation_v4_actions_appId_definitionId_functions_functionType_functionIdArchiveSignalFull(OAIHttpRequestWorker *worker);
    void get_automation_v4_actions_appId_definitionId_functionsGetPageSignalFull(OAIHttpRequestWorker *worker, OAICollectionResponsePublicActionFunctionIdentifierNoPaging summary);
    void get_automation_v4_actions_appId_definitionId_functions_functionTypeGetByFunctionTypeSignalFull(OAIHttpRequestWorker *worker, OAIPublicActionFunction summary);
    void get_automation_v4_actions_appId_definitionId_functions_functionType_functionIdGetByIdSignalFull(OAIHttpRequestWorker *worker, OAIPublicActionFunction summary);
    void put_automation_v4_actions_appId_definitionId_functions_functionTypeCreateOrReplaceByFunctionTypeSignalFull(OAIHttpRequestWorker *worker, OAIPublicActionFunctionIdentifier summary);
    void put_automation_v4_actions_appId_definitionId_functions_functionType_functionIdCreateOrReplaceSignalFull(OAIHttpRequestWorker *worker, OAIPublicActionFunctionIdentifier summary);

    Q_DECL_DEPRECATED_X("Use delete_automation_v4_actions_appId_definitionId_functions_functionTypeArchiveByFunctionTypeSignalError() instead")
    void delete_automation_v4_actions_appId_definitionId_functions_functionTypeArchiveByFunctionTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delete_automation_v4_actions_appId_definitionId_functions_functionTypeArchiveByFunctionTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete_automation_v4_actions_appId_definitionId_functions_functionType_functionIdArchiveSignalError() instead")
    void delete_automation_v4_actions_appId_definitionId_functions_functionType_functionIdArchiveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delete_automation_v4_actions_appId_definitionId_functions_functionType_functionIdArchiveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_automation_v4_actions_appId_definitionId_functionsGetPageSignalError() instead")
    void get_automation_v4_actions_appId_definitionId_functionsGetPageSignalE(OAICollectionResponsePublicActionFunctionIdentifierNoPaging summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_automation_v4_actions_appId_definitionId_functionsGetPageSignalError(OAICollectionResponsePublicActionFunctionIdentifierNoPaging summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_automation_v4_actions_appId_definitionId_functions_functionTypeGetByFunctionTypeSignalError() instead")
    void get_automation_v4_actions_appId_definitionId_functions_functionTypeGetByFunctionTypeSignalE(OAIPublicActionFunction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_automation_v4_actions_appId_definitionId_functions_functionTypeGetByFunctionTypeSignalError(OAIPublicActionFunction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_automation_v4_actions_appId_definitionId_functions_functionType_functionIdGetByIdSignalError() instead")
    void get_automation_v4_actions_appId_definitionId_functions_functionType_functionIdGetByIdSignalE(OAIPublicActionFunction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_automation_v4_actions_appId_definitionId_functions_functionType_functionIdGetByIdSignalError(OAIPublicActionFunction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use put_automation_v4_actions_appId_definitionId_functions_functionTypeCreateOrReplaceByFunctionTypeSignalError() instead")
    void put_automation_v4_actions_appId_definitionId_functions_functionTypeCreateOrReplaceByFunctionTypeSignalE(OAIPublicActionFunctionIdentifier summary, QNetworkReply::NetworkError error_type, QString error_str);
    void put_automation_v4_actions_appId_definitionId_functions_functionTypeCreateOrReplaceByFunctionTypeSignalError(OAIPublicActionFunctionIdentifier summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use put_automation_v4_actions_appId_definitionId_functions_functionType_functionIdCreateOrReplaceSignalError() instead")
    void put_automation_v4_actions_appId_definitionId_functions_functionType_functionIdCreateOrReplaceSignalE(OAIPublicActionFunctionIdentifier summary, QNetworkReply::NetworkError error_type, QString error_str);
    void put_automation_v4_actions_appId_definitionId_functions_functionType_functionIdCreateOrReplaceSignalError(OAIPublicActionFunctionIdentifier summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use delete_automation_v4_actions_appId_definitionId_functions_functionTypeArchiveByFunctionTypeSignalErrorFull() instead")
    void delete_automation_v4_actions_appId_definitionId_functions_functionTypeArchiveByFunctionTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delete_automation_v4_actions_appId_definitionId_functions_functionTypeArchiveByFunctionTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete_automation_v4_actions_appId_definitionId_functions_functionType_functionIdArchiveSignalErrorFull() instead")
    void delete_automation_v4_actions_appId_definitionId_functions_functionType_functionIdArchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delete_automation_v4_actions_appId_definitionId_functions_functionType_functionIdArchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_automation_v4_actions_appId_definitionId_functionsGetPageSignalErrorFull() instead")
    void get_automation_v4_actions_appId_definitionId_functionsGetPageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_automation_v4_actions_appId_definitionId_functionsGetPageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_automation_v4_actions_appId_definitionId_functions_functionTypeGetByFunctionTypeSignalErrorFull() instead")
    void get_automation_v4_actions_appId_definitionId_functions_functionTypeGetByFunctionTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_automation_v4_actions_appId_definitionId_functions_functionTypeGetByFunctionTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_automation_v4_actions_appId_definitionId_functions_functionType_functionIdGetByIdSignalErrorFull() instead")
    void get_automation_v4_actions_appId_definitionId_functions_functionType_functionIdGetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_automation_v4_actions_appId_definitionId_functions_functionType_functionIdGetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use put_automation_v4_actions_appId_definitionId_functions_functionTypeCreateOrReplaceByFunctionTypeSignalErrorFull() instead")
    void put_automation_v4_actions_appId_definitionId_functions_functionTypeCreateOrReplaceByFunctionTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void put_automation_v4_actions_appId_definitionId_functions_functionTypeCreateOrReplaceByFunctionTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use put_automation_v4_actions_appId_definitionId_functions_functionType_functionIdCreateOrReplaceSignalErrorFull() instead")
    void put_automation_v4_actions_appId_definitionId_functions_functionType_functionIdCreateOrReplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void put_automation_v4_actions_appId_definitionId_functions_functionType_functionIdCreateOrReplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
