/**
 * Automation Actions V4
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOption::OAIOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOption::OAIOption() {
    this->initializeModel();
}

OAIOption::~OAIOption() {}

void OAIOption::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_order_isSet = false;
    m_display_order_isValid = false;

    m_double_data_isSet = false;
    m_double_data_isValid = false;

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOption::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_order_isValid = ::OpenAPI::fromJsonValue(m_display_order, json[QString("displayOrder")]);
    m_display_order_isSet = !json[QString("displayOrder")].isNull() && m_display_order_isValid;

    m_double_data_isValid = ::OpenAPI::fromJsonValue(m_double_data, json[QString("doubleData")]);
    m_double_data_isSet = !json[QString("doubleData")].isNull() && m_double_data_isValid;

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("readOnly")]);
    m_read_only_isSet = !json[QString("readOnly")].isNull() && m_read_only_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOption::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_order_isSet) {
        obj.insert(QString("displayOrder"), ::OpenAPI::toJsonValue(m_display_order));
    }
    if (m_double_data_isSet) {
        obj.insert(QString("doubleData"), ::OpenAPI::toJsonValue(m_double_data));
    }
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("readOnly"), ::OpenAPI::toJsonValue(m_read_only));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIOption::getDescription() const {
    return m_description;
}
void OAIOption::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOption::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOption::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIOption::getDisplayOrder() const {
    return m_display_order;
}
void OAIOption::setDisplayOrder(const qint32 &display_order) {
    m_display_order = display_order;
    m_display_order_isSet = true;
}

bool OAIOption::is_display_order_Set() const{
    return m_display_order_isSet;
}

bool OAIOption::is_display_order_Valid() const{
    return m_display_order_isValid;
}

double OAIOption::getDoubleData() const {
    return m_double_data;
}
void OAIOption::setDoubleData(const double &double_data) {
    m_double_data = double_data;
    m_double_data_isSet = true;
}

bool OAIOption::is_double_data_Set() const{
    return m_double_data_isSet;
}

bool OAIOption::is_double_data_Valid() const{
    return m_double_data_isValid;
}

bool OAIOption::isHidden() const {
    return m_hidden;
}
void OAIOption::setHidden(const bool &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAIOption::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAIOption::is_hidden_Valid() const{
    return m_hidden_isValid;
}

QString OAIOption::getLabel() const {
    return m_label;
}
void OAIOption::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIOption::is_label_Set() const{
    return m_label_isSet;
}

bool OAIOption::is_label_Valid() const{
    return m_label_isValid;
}

bool OAIOption::isReadOnly() const {
    return m_read_only;
}
void OAIOption::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAIOption::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAIOption::is_read_only_Valid() const{
    return m_read_only_isValid;
}

QString OAIOption::getValue() const {
    return m_value;
}
void OAIOption::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIOption::is_value_Set() const{
    return m_value_isSet;
}

bool OAIOption::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_display_order_isValid && m_double_data_isValid && m_hidden_isValid && m_label_isValid && m_read_only_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
