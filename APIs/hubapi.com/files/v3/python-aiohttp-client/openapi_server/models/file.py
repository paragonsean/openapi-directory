# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class File(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access: str=None, archived: bool=None, archived_at: datetime=None, created_at: datetime=None, default_hosting_url: str=None, encoding: str=None, expires_at: int=None, extension: str=None, height: int=None, id: str=None, is_usable_in_content: bool=None, name: str=None, parent_folder_id: str=None, path: str=None, size: int=None, type: str=None, updated_at: datetime=None, url: str=None, width: int=None):
        """File - a model defined in OpenAPI

        :param access: The access of this File.
        :param archived: The archived of this File.
        :param archived_at: The archived_at of this File.
        :param created_at: The created_at of this File.
        :param default_hosting_url: The default_hosting_url of this File.
        :param encoding: The encoding of this File.
        :param expires_at: The expires_at of this File.
        :param extension: The extension of this File.
        :param height: The height of this File.
        :param id: The id of this File.
        :param is_usable_in_content: The is_usable_in_content of this File.
        :param name: The name of this File.
        :param parent_folder_id: The parent_folder_id of this File.
        :param path: The path of this File.
        :param size: The size of this File.
        :param type: The type of this File.
        :param updated_at: The updated_at of this File.
        :param url: The url of this File.
        :param width: The width of this File.
        """
        self.openapi_types = {
            'access': str,
            'archived': bool,
            'archived_at': datetime,
            'created_at': datetime,
            'default_hosting_url': str,
            'encoding': str,
            'expires_at': int,
            'extension': str,
            'height': int,
            'id': str,
            'is_usable_in_content': bool,
            'name': str,
            'parent_folder_id': str,
            'path': str,
            'size': int,
            'type': str,
            'updated_at': datetime,
            'url': str,
            'width': int
        }

        self.attribute_map = {
            'access': 'access',
            'archived': 'archived',
            'archived_at': 'archivedAt',
            'created_at': 'createdAt',
            'default_hosting_url': 'defaultHostingUrl',
            'encoding': 'encoding',
            'expires_at': 'expiresAt',
            'extension': 'extension',
            'height': 'height',
            'id': 'id',
            'is_usable_in_content': 'isUsableInContent',
            'name': 'name',
            'parent_folder_id': 'parentFolderId',
            'path': 'path',
            'size': 'size',
            'type': 'type',
            'updated_at': 'updatedAt',
            'url': 'url',
            'width': 'width'
        }

        self._access = access
        self._archived = archived
        self._archived_at = archived_at
        self._created_at = created_at
        self._default_hosting_url = default_hosting_url
        self._encoding = encoding
        self._expires_at = expires_at
        self._extension = extension
        self._height = height
        self._id = id
        self._is_usable_in_content = is_usable_in_content
        self._name = name
        self._parent_folder_id = parent_folder_id
        self._path = path
        self._size = size
        self._type = type
        self._updated_at = updated_at
        self._url = url
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'File':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The File of this File.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self):
        """Gets the access of this File.

        File access. Can be PUBLIC_INDEXABLE, PUBLIC_NOT_INDEXABLE, PRIVATE.

        :return: The access of this File.
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this File.

        File access. Can be PUBLIC_INDEXABLE, PUBLIC_NOT_INDEXABLE, PRIVATE.

        :param access: The access of this File.
        :type access: str
        """
        allowed_values = ["PUBLIC_INDEXABLE", "PUBLIC_NOT_INDEXABLE", "HIDDEN_INDEXABLE", "HIDDEN_NOT_INDEXABLE", "HIDDEN_PRIVATE", "PRIVATE"]  # noqa: E501
        if access not in allowed_values:
            raise ValueError(
                "Invalid value for `access` ({0}), must be one of {1}"
                .format(access, allowed_values)
            )

        self._access = access

    @property
    def archived(self):
        """Gets the archived of this File.

        If the file is deleted.

        :return: The archived of this File.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this File.

        If the file is deleted.

        :param archived: The archived of this File.
        :type archived: bool
        """
        if archived is None:
            raise ValueError("Invalid value for `archived`, must not be `None`")

        self._archived = archived

    @property
    def archived_at(self):
        """Gets the archived_at of this File.

        Deletion time of the file object.

        :return: The archived_at of this File.
        :rtype: datetime
        """
        return self._archived_at

    @archived_at.setter
    def archived_at(self, archived_at):
        """Sets the archived_at of this File.

        Deletion time of the file object.

        :param archived_at: The archived_at of this File.
        :type archived_at: datetime
        """

        self._archived_at = archived_at

    @property
    def created_at(self):
        """Gets the created_at of this File.

        Creation time of the file object.

        :return: The created_at of this File.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this File.

        Creation time of the file object.

        :param created_at: The created_at of this File.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def default_hosting_url(self):
        """Gets the default_hosting_url of this File.

        Default hosting URL of the file. This will use one of HubSpot's provided URLs to serve the file.

        :return: The default_hosting_url of this File.
        :rtype: str
        """
        return self._default_hosting_url

    @default_hosting_url.setter
    def default_hosting_url(self, default_hosting_url):
        """Sets the default_hosting_url of this File.

        Default hosting URL of the file. This will use one of HubSpot's provided URLs to serve the file.

        :param default_hosting_url: The default_hosting_url of this File.
        :type default_hosting_url: str
        """

        self._default_hosting_url = default_hosting_url

    @property
    def encoding(self):
        """Gets the encoding of this File.

        Encoding of the file.

        :return: The encoding of this File.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this File.

        Encoding of the file.

        :param encoding: The encoding of this File.
        :type encoding: str
        """

        self._encoding = encoding

    @property
    def expires_at(self):
        """Gets the expires_at of this File.


        :return: The expires_at of this File.
        :rtype: int
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this File.


        :param expires_at: The expires_at of this File.
        :type expires_at: int
        """

        self._expires_at = expires_at

    @property
    def extension(self):
        """Gets the extension of this File.

        Extension of the file. ex: .jpg, .png, .gif, .pdf, etc.

        :return: The extension of this File.
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this File.

        Extension of the file. ex: .jpg, .png, .gif, .pdf, etc.

        :param extension: The extension of this File.
        :type extension: str
        """

        self._extension = extension

    @property
    def height(self):
        """Gets the height of this File.

        For image and video files, the height of the content.

        :return: The height of this File.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this File.

        For image and video files, the height of the content.

        :param height: The height of this File.
        :type height: int
        """

        self._height = height

    @property
    def id(self):
        """Gets the id of this File.

        File ID.

        :return: The id of this File.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this File.

        File ID.

        :param id: The id of this File.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_usable_in_content(self):
        """Gets the is_usable_in_content of this File.

        Previously \"archied\". Indicates if the file should be used when creating new content like web pages.

        :return: The is_usable_in_content of this File.
        :rtype: bool
        """
        return self._is_usable_in_content

    @is_usable_in_content.setter
    def is_usable_in_content(self, is_usable_in_content):
        """Sets the is_usable_in_content of this File.

        Previously \"archied\". Indicates if the file should be used when creating new content like web pages.

        :param is_usable_in_content: The is_usable_in_content of this File.
        :type is_usable_in_content: bool
        """

        self._is_usable_in_content = is_usable_in_content

    @property
    def name(self):
        """Gets the name of this File.

        Name of the file.

        :return: The name of this File.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this File.

        Name of the file.

        :param name: The name of this File.
        :type name: str
        """

        self._name = name

    @property
    def parent_folder_id(self):
        """Gets the parent_folder_id of this File.

        ID of the folder the file is in.

        :return: The parent_folder_id of this File.
        :rtype: str
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """Sets the parent_folder_id of this File.

        ID of the folder the file is in.

        :param parent_folder_id: The parent_folder_id of this File.
        :type parent_folder_id: str
        """

        self._parent_folder_id = parent_folder_id

    @property
    def path(self):
        """Gets the path of this File.

        Path of the file in the file manager.

        :return: The path of this File.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this File.

        Path of the file in the file manager.

        :param path: The path of this File.
        :type path: str
        """

        self._path = path

    @property
    def size(self):
        """Gets the size of this File.

        Size of the file in bytes.

        :return: The size of this File.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this File.

        Size of the file in bytes.

        :param size: The size of this File.
        :type size: int
        """

        self._size = size

    @property
    def type(self):
        """Gets the type of this File.

        Type of the file. Can be IMG, DOCUMENT, AUDIO, MOVIE, or OTHER.

        :return: The type of this File.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this File.

        Type of the file. Can be IMG, DOCUMENT, AUDIO, MOVIE, or OTHER.

        :param type: The type of this File.
        :type type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this File.

        Timestamp of the latest update to the file.

        :return: The updated_at of this File.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this File.

        Timestamp of the latest update to the file.

        :param updated_at: The updated_at of this File.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this File.

        URL of the given file. This URL can change depending on the domain settings of the account. Will use the select file hosting domain.

        :return: The url of this File.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this File.

        URL of the given file. This URL can change depending on the domain settings of the account. Will use the select file hosting domain.

        :param url: The url of this File.
        :type url: str
        """

        self._url = url

    @property
    def width(self):
        """Gets the width of this File.

        For image and video files, the width of the content.

        :return: The width of this File.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this File.

        For image and video files, the width of the content.

        :param width: The width of this File.
        :type width: int
        """

        self._width = width
