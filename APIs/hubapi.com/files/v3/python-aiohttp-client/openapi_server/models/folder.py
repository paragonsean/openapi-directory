# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Folder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived: bool=None, archived_at: datetime=None, created_at: datetime=None, id: str=None, name: str=None, parent_folder_id: str=None, path: str=None, updated_at: datetime=None):
        """Folder - a model defined in OpenAPI

        :param archived: The archived of this Folder.
        :param archived_at: The archived_at of this Folder.
        :param created_at: The created_at of this Folder.
        :param id: The id of this Folder.
        :param name: The name of this Folder.
        :param parent_folder_id: The parent_folder_id of this Folder.
        :param path: The path of this Folder.
        :param updated_at: The updated_at of this Folder.
        """
        self.openapi_types = {
            'archived': bool,
            'archived_at': datetime,
            'created_at': datetime,
            'id': str,
            'name': str,
            'parent_folder_id': str,
            'path': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'archived': 'archived',
            'archived_at': 'archivedAt',
            'created_at': 'createdAt',
            'id': 'id',
            'name': 'name',
            'parent_folder_id': 'parentFolderId',
            'path': 'path',
            'updated_at': 'updatedAt'
        }

        self._archived = archived
        self._archived_at = archived_at
        self._created_at = created_at
        self._id = id
        self._name = name
        self._parent_folder_id = parent_folder_id
        self._path = path
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Folder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Folder of this Folder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived(self):
        """Gets the archived of this Folder.

        Marks whether the folder is deleted or not.

        :return: The archived of this Folder.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Folder.

        Marks whether the folder is deleted or not.

        :param archived: The archived of this Folder.
        :type archived: bool
        """
        if archived is None:
            raise ValueError("Invalid value for `archived`, must not be `None`")

        self._archived = archived

    @property
    def archived_at(self):
        """Gets the archived_at of this Folder.

        Timestamp of folder deletion.

        :return: The archived_at of this Folder.
        :rtype: datetime
        """
        return self._archived_at

    @archived_at.setter
    def archived_at(self, archived_at):
        """Sets the archived_at of this Folder.

        Timestamp of folder deletion.

        :param archived_at: The archived_at of this Folder.
        :type archived_at: datetime
        """

        self._archived_at = archived_at

    @property
    def created_at(self):
        """Gets the created_at of this Folder.

        Timestamp of folder creation.

        :return: The created_at of this Folder.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Folder.

        Timestamp of folder creation.

        :param created_at: The created_at of this Folder.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this Folder.

        ID of the folder.

        :return: The id of this Folder.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Folder.

        ID of the folder.

        :param id: The id of this Folder.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Folder.

        Name of the folder.

        :return: The name of this Folder.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Folder.

        Name of the folder.

        :param name: The name of this Folder.
        :type name: str
        """

        self._name = name

    @property
    def parent_folder_id(self):
        """Gets the parent_folder_id of this Folder.

        ID of the parent folder.

        :return: The parent_folder_id of this Folder.
        :rtype: str
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """Sets the parent_folder_id of this Folder.

        ID of the parent folder.

        :param parent_folder_id: The parent_folder_id of this Folder.
        :type parent_folder_id: str
        """

        self._parent_folder_id = parent_folder_id

    @property
    def path(self):
        """Gets the path of this Folder.

        Path of the folder in the file manager.

        :return: The path of this Folder.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Folder.

        Path of the folder in the file manager.

        :param path: The path of this Folder.
        :type path: str
        """

        self._path = path

    @property
    def updated_at(self):
        """Gets the updated_at of this Folder.

        Timestamp of the latest update to the folder.

        :return: The updated_at of this Folder.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Folder.

        Timestamp of the latest update to the folder.

        :param updated_at: The updated_at of this Folder.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
