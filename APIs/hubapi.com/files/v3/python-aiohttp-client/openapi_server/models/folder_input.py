# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FolderInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, parent_folder_id: str=None, parent_path: str=None):
        """FolderInput - a model defined in OpenAPI

        :param name: The name of this FolderInput.
        :param parent_folder_id: The parent_folder_id of this FolderInput.
        :param parent_path: The parent_path of this FolderInput.
        """
        self.openapi_types = {
            'name': str,
            'parent_folder_id': str,
            'parent_path': str
        }

        self.attribute_map = {
            'name': 'name',
            'parent_folder_id': 'parentFolderId',
            'parent_path': 'parentPath'
        }

        self._name = name
        self._parent_folder_id = parent_folder_id
        self._parent_path = parent_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FolderInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FolderInput of this FolderInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this FolderInput.

        Desired name for the folder.

        :return: The name of this FolderInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FolderInput.

        Desired name for the folder.

        :param name: The name of this FolderInput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parent_folder_id(self):
        """Gets the parent_folder_id of this FolderInput.

        FolderId of the parent of the created folder. If not specified, the folder will be created at the root level. parentFolderId and parentFolderPath cannot be set at the same time.

        :return: The parent_folder_id of this FolderInput.
        :rtype: str
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """Sets the parent_folder_id of this FolderInput.

        FolderId of the parent of the created folder. If not specified, the folder will be created at the root level. parentFolderId and parentFolderPath cannot be set at the same time.

        :param parent_folder_id: The parent_folder_id of this FolderInput.
        :type parent_folder_id: str
        """

        self._parent_folder_id = parent_folder_id

    @property
    def parent_path(self):
        """Gets the parent_path of this FolderInput.

        Path of the parent of the created folder. If not specified the folder will be created at the root level. parentFolderPath and parentFolderId cannot be set at the same time.

        :return: The parent_path of this FolderInput.
        :rtype: str
        """
        return self._parent_path

    @parent_path.setter
    def parent_path(self, parent_path):
        """Sets the parent_path of this FolderInput.

        Path of the parent of the created folder. If not specified the folder will be created at the root level. parentFolderPath and parentFolderId cannot be set at the same time.

        :param parent_path: The parent_path of this FolderInput.
        :type parent_path: str
        """

        self._parent_path = parent_path
