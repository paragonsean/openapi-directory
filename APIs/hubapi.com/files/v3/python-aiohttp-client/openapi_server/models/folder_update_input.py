# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FolderUpdateInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, parent_folder_id: int=None):
        """FolderUpdateInput - a model defined in OpenAPI

        :param id: The id of this FolderUpdateInput.
        :param name: The name of this FolderUpdateInput.
        :param parent_folder_id: The parent_folder_id of this FolderUpdateInput.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'parent_folder_id': int
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'parent_folder_id': 'parentFolderId'
        }

        self._id = id
        self._name = name
        self._parent_folder_id = parent_folder_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FolderUpdateInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FolderUpdateInput of this FolderUpdateInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this FolderUpdateInput.

        ID of the folder to change.

        :return: The id of this FolderUpdateInput.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FolderUpdateInput.

        ID of the folder to change.

        :param id: The id of this FolderUpdateInput.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this FolderUpdateInput.

        New name. If specified the folder's name and fullPath will change. All children of the folder will be updated accordingly.

        :return: The name of this FolderUpdateInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FolderUpdateInput.

        New name. If specified the folder's name and fullPath will change. All children of the folder will be updated accordingly.

        :param name: The name of this FolderUpdateInput.
        :type name: str
        """

        self._name = name

    @property
    def parent_folder_id(self):
        """Gets the parent_folder_id of this FolderUpdateInput.

        New parent folderId. If changed, the folder and all it's children will be moved into the specified folder. parentFolderId and parentFolderPath cannot be specified at the same time.

        :return: The parent_folder_id of this FolderUpdateInput.
        :rtype: int
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """Sets the parent_folder_id of this FolderUpdateInput.

        New parent folderId. If changed, the folder and all it's children will be moved into the specified folder. parentFolderId and parentFolderPath cannot be specified at the same time.

        :param parent_folder_id: The parent_folder_id of this FolderUpdateInput.
        :type parent_folder_id: int
        """

        self._parent_folder_id = parent_folder_id
