# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SignedUrl(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expires_at: datetime=None, extension: str=None, height: int=None, name: str=None, size: int=None, type: str=None, url: str=None, width: int=None):
        """SignedUrl - a model defined in OpenAPI

        :param expires_at: The expires_at of this SignedUrl.
        :param extension: The extension of this SignedUrl.
        :param height: The height of this SignedUrl.
        :param name: The name of this SignedUrl.
        :param size: The size of this SignedUrl.
        :param type: The type of this SignedUrl.
        :param url: The url of this SignedUrl.
        :param width: The width of this SignedUrl.
        """
        self.openapi_types = {
            'expires_at': datetime,
            'extension': str,
            'height': int,
            'name': str,
            'size': int,
            'type': str,
            'url': str,
            'width': int
        }

        self.attribute_map = {
            'expires_at': 'expiresAt',
            'extension': 'extension',
            'height': 'height',
            'name': 'name',
            'size': 'size',
            'type': 'type',
            'url': 'url',
            'width': 'width'
        }

        self._expires_at = expires_at
        self._extension = extension
        self._height = height
        self._name = name
        self._size = size
        self._type = type
        self._url = url
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SignedUrl':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SignedUrl of this SignedUrl.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expires_at(self):
        """Gets the expires_at of this SignedUrl.

        Timestamp of when the URL will no longer grant access to the file.

        :return: The expires_at of this SignedUrl.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this SignedUrl.

        Timestamp of when the URL will no longer grant access to the file.

        :param expires_at: The expires_at of this SignedUrl.
        :type expires_at: datetime
        """
        if expires_at is None:
            raise ValueError("Invalid value for `expires_at`, must not be `None`")

        self._expires_at = expires_at

    @property
    def extension(self):
        """Gets the extension of this SignedUrl.

        Extension of the requested file.

        :return: The extension of this SignedUrl.
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this SignedUrl.

        Extension of the requested file.

        :param extension: The extension of this SignedUrl.
        :type extension: str
        """
        if extension is None:
            raise ValueError("Invalid value for `extension`, must not be `None`")

        self._extension = extension

    @property
    def height(self):
        """Gets the height of this SignedUrl.

        For image and video files. The height of the file.

        :return: The height of this SignedUrl.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this SignedUrl.

        For image and video files. The height of the file.

        :param height: The height of this SignedUrl.
        :type height: int
        """

        self._height = height

    @property
    def name(self):
        """Gets the name of this SignedUrl.

        Name of the requested file.

        :return: The name of this SignedUrl.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SignedUrl.

        Name of the requested file.

        :param name: The name of this SignedUrl.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def size(self):
        """Gets the size of this SignedUrl.

        Size in bytes of the requested file.

        :return: The size of this SignedUrl.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this SignedUrl.

        Size in bytes of the requested file.

        :param size: The size of this SignedUrl.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def type(self):
        """Gets the type of this SignedUrl.

        Type of the file. Can be IMG, DOCUMENT, AUDIO, MOVIE, or OTHER.

        :return: The type of this SignedUrl.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SignedUrl.

        Type of the file. Can be IMG, DOCUMENT, AUDIO, MOVIE, or OTHER.

        :param type: The type of this SignedUrl.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def url(self):
        """Gets the url of this SignedUrl.

        Signed URL with access to the specified file. Anyone with this URL will be able to access the file until it expires.

        :return: The url of this SignedUrl.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SignedUrl.

        Signed URL with access to the specified file. Anyone with this URL will be able to access the file until it expires.

        :param url: The url of this SignedUrl.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def width(self):
        """Gets the width of this SignedUrl.

        For image and video files. The width of the file.

        :return: The width of this SignedUrl.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this SignedUrl.

        For image and video files. The width of the file.

        :param width: The width of this SignedUrl.
        :type width: int
        """

        self._width = width
