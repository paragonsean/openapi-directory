# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportFromUrlInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access: str=None, duplicate_validation_scope: str=None, duplicate_validation_strategy: str=None, folder_id: str=None, folder_path: str=None, name: str=None, overwrite: bool=None, ttl: str=None, url: str=None):
        """ImportFromUrlInput - a model defined in OpenAPI

        :param access: The access of this ImportFromUrlInput.
        :param duplicate_validation_scope: The duplicate_validation_scope of this ImportFromUrlInput.
        :param duplicate_validation_strategy: The duplicate_validation_strategy of this ImportFromUrlInput.
        :param folder_id: The folder_id of this ImportFromUrlInput.
        :param folder_path: The folder_path of this ImportFromUrlInput.
        :param name: The name of this ImportFromUrlInput.
        :param overwrite: The overwrite of this ImportFromUrlInput.
        :param ttl: The ttl of this ImportFromUrlInput.
        :param url: The url of this ImportFromUrlInput.
        """
        self.openapi_types = {
            'access': str,
            'duplicate_validation_scope': str,
            'duplicate_validation_strategy': str,
            'folder_id': str,
            'folder_path': str,
            'name': str,
            'overwrite': bool,
            'ttl': str,
            'url': str
        }

        self.attribute_map = {
            'access': 'access',
            'duplicate_validation_scope': 'duplicateValidationScope',
            'duplicate_validation_strategy': 'duplicateValidationStrategy',
            'folder_id': 'folderId',
            'folder_path': 'folderPath',
            'name': 'name',
            'overwrite': 'overwrite',
            'ttl': 'ttl',
            'url': 'url'
        }

        self._access = access
        self._duplicate_validation_scope = duplicate_validation_scope
        self._duplicate_validation_strategy = duplicate_validation_strategy
        self._folder_id = folder_id
        self._folder_path = folder_path
        self._name = name
        self._overwrite = overwrite
        self._ttl = ttl
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportFromUrlInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportFromUrlInput of this ImportFromUrlInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self):
        """Gets the access of this ImportFromUrlInput.

        PUBLIC_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines can index the file. PUBLIC_NOT_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines *can't* index the file. PRIVATE: File is NOT publicly accessible. Requires a signed URL to see content. Search engines *can't* index the file. 

        :return: The access of this ImportFromUrlInput.
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this ImportFromUrlInput.

        PUBLIC_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines can index the file. PUBLIC_NOT_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines *can't* index the file. PRIVATE: File is NOT publicly accessible. Requires a signed URL to see content. Search engines *can't* index the file. 

        :param access: The access of this ImportFromUrlInput.
        :type access: str
        """
        allowed_values = ["PUBLIC_INDEXABLE", "PUBLIC_NOT_INDEXABLE", "HIDDEN_INDEXABLE", "HIDDEN_NOT_INDEXABLE", "HIDDEN_PRIVATE", "PRIVATE"]  # noqa: E501
        if access not in allowed_values:
            raise ValueError(
                "Invalid value for `access` ({0}), must be one of {1}"
                .format(access, allowed_values)
            )

        self._access = access

    @property
    def duplicate_validation_scope(self):
        """Gets the duplicate_validation_scope of this ImportFromUrlInput.

        ENTIRE_PORTAL: Look for a duplicate file in the entire account. EXACT_FOLDER: Look for a duplicate file in the provided folder. 

        :return: The duplicate_validation_scope of this ImportFromUrlInput.
        :rtype: str
        """
        return self._duplicate_validation_scope

    @duplicate_validation_scope.setter
    def duplicate_validation_scope(self, duplicate_validation_scope):
        """Sets the duplicate_validation_scope of this ImportFromUrlInput.

        ENTIRE_PORTAL: Look for a duplicate file in the entire account. EXACT_FOLDER: Look for a duplicate file in the provided folder. 

        :param duplicate_validation_scope: The duplicate_validation_scope of this ImportFromUrlInput.
        :type duplicate_validation_scope: str
        """
        allowed_values = ["ENTIRE_PORTAL", "EXACT_FOLDER"]  # noqa: E501
        if duplicate_validation_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `duplicate_validation_scope` ({0}), must be one of {1}"
                .format(duplicate_validation_scope, allowed_values)
            )

        self._duplicate_validation_scope = duplicate_validation_scope

    @property
    def duplicate_validation_strategy(self):
        """Gets the duplicate_validation_strategy of this ImportFromUrlInput.

        NONE: Do not run any duplicate validation. REJECT: Reject the upload if a duplicate is found. RETURN_EXISTING: If a duplicate file is found, do not upload a new file and return the found duplicate instead. 

        :return: The duplicate_validation_strategy of this ImportFromUrlInput.
        :rtype: str
        """
        return self._duplicate_validation_strategy

    @duplicate_validation_strategy.setter
    def duplicate_validation_strategy(self, duplicate_validation_strategy):
        """Sets the duplicate_validation_strategy of this ImportFromUrlInput.

        NONE: Do not run any duplicate validation. REJECT: Reject the upload if a duplicate is found. RETURN_EXISTING: If a duplicate file is found, do not upload a new file and return the found duplicate instead. 

        :param duplicate_validation_strategy: The duplicate_validation_strategy of this ImportFromUrlInput.
        :type duplicate_validation_strategy: str
        """
        allowed_values = ["NONE", "REJECT", "RETURN_EXISTING"]  # noqa: E501
        if duplicate_validation_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `duplicate_validation_strategy` ({0}), must be one of {1}"
                .format(duplicate_validation_strategy, allowed_values)
            )

        self._duplicate_validation_strategy = duplicate_validation_strategy

    @property
    def folder_id(self):
        """Gets the folder_id of this ImportFromUrlInput.

        One of folderId or folderPath is required. Destination folderId for the uploaded file.

        :return: The folder_id of this ImportFromUrlInput.
        :rtype: str
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this ImportFromUrlInput.

        One of folderId or folderPath is required. Destination folderId for the uploaded file.

        :param folder_id: The folder_id of this ImportFromUrlInput.
        :type folder_id: str
        """

        self._folder_id = folder_id

    @property
    def folder_path(self):
        """Gets the folder_path of this ImportFromUrlInput.

        One of folderPath or folderId is required. Destination folder path for the uploaded file. If the folder path does not exist, there will be an attempt to create the folder path.

        :return: The folder_path of this ImportFromUrlInput.
        :rtype: str
        """
        return self._folder_path

    @folder_path.setter
    def folder_path(self, folder_path):
        """Sets the folder_path of this ImportFromUrlInput.

        One of folderPath or folderId is required. Destination folder path for the uploaded file. If the folder path does not exist, there will be an attempt to create the folder path.

        :param folder_path: The folder_path of this ImportFromUrlInput.
        :type folder_path: str
        """

        self._folder_path = folder_path

    @property
    def name(self):
        """Gets the name of this ImportFromUrlInput.

        Name to give the resulting file in the file manager.

        :return: The name of this ImportFromUrlInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportFromUrlInput.

        Name to give the resulting file in the file manager.

        :param name: The name of this ImportFromUrlInput.
        :type name: str
        """

        self._name = name

    @property
    def overwrite(self):
        """Gets the overwrite of this ImportFromUrlInput.

        If true, will overwrite existing file if one with the same name and extension exists in the given folder. The overwritten file will be deleted and the uploaded file will take its place with a new ID. If unset or set as false, the new file's name will be updated to prevent colliding with existing file if one exists with the same path, name, and extension

        :return: The overwrite of this ImportFromUrlInput.
        :rtype: bool
        """
        return self._overwrite

    @overwrite.setter
    def overwrite(self, overwrite):
        """Sets the overwrite of this ImportFromUrlInput.

        If true, will overwrite existing file if one with the same name and extension exists in the given folder. The overwritten file will be deleted and the uploaded file will take its place with a new ID. If unset or set as false, the new file's name will be updated to prevent colliding with existing file if one exists with the same path, name, and extension

        :param overwrite: The overwrite of this ImportFromUrlInput.
        :type overwrite: bool
        """

        self._overwrite = overwrite

    @property
    def ttl(self):
        """Gets the ttl of this ImportFromUrlInput.

        Time to live. If specified the file will be deleted after the given time frame. If left unset, the file will exist indefinitely

        :return: The ttl of this ImportFromUrlInput.
        :rtype: str
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this ImportFromUrlInput.

        Time to live. If specified the file will be deleted after the given time frame. If left unset, the file will exist indefinitely

        :param ttl: The ttl of this ImportFromUrlInput.
        :type ttl: str
        """

        self._ttl = ttl

    @property
    def url(self):
        """Gets the url of this ImportFromUrlInput.

        URL to download the new file from.

        :return: The url of this ImportFromUrlInput.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ImportFromUrlInput.

        URL to download the new file from.

        :param url: The url of this ImportFromUrlInput.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
