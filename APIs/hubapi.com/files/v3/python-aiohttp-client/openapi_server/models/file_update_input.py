# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FileUpdateInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access: str=None, expires_at: int=None, is_usable_in_content: bool=None, name: str=None, parent_folder_id: str=None, parent_folder_path: str=None):
        """FileUpdateInput - a model defined in OpenAPI

        :param access: The access of this FileUpdateInput.
        :param expires_at: The expires_at of this FileUpdateInput.
        :param is_usable_in_content: The is_usable_in_content of this FileUpdateInput.
        :param name: The name of this FileUpdateInput.
        :param parent_folder_id: The parent_folder_id of this FileUpdateInput.
        :param parent_folder_path: The parent_folder_path of this FileUpdateInput.
        """
        self.openapi_types = {
            'access': str,
            'expires_at': int,
            'is_usable_in_content': bool,
            'name': str,
            'parent_folder_id': str,
            'parent_folder_path': str
        }

        self.attribute_map = {
            'access': 'access',
            'expires_at': 'expiresAt',
            'is_usable_in_content': 'isUsableInContent',
            'name': 'name',
            'parent_folder_id': 'parentFolderId',
            'parent_folder_path': 'parentFolderPath'
        }

        self._access = access
        self._expires_at = expires_at
        self._is_usable_in_content = is_usable_in_content
        self._name = name
        self._parent_folder_id = parent_folder_id
        self._parent_folder_path = parent_folder_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileUpdateInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileUpdateInput of this FileUpdateInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self):
        """Gets the access of this FileUpdateInput.

        NONE: Do not run any duplicate validation. REJECT: Reject the upload if a duplicate is found. RETURN_EXISTING: If a duplicate file is found, do not upload a new file and return the found duplicate instead. 

        :return: The access of this FileUpdateInput.
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this FileUpdateInput.

        NONE: Do not run any duplicate validation. REJECT: Reject the upload if a duplicate is found. RETURN_EXISTING: If a duplicate file is found, do not upload a new file and return the found duplicate instead. 

        :param access: The access of this FileUpdateInput.
        :type access: str
        """
        allowed_values = ["PUBLIC_INDEXABLE", "PUBLIC_NOT_INDEXABLE", "HIDDEN_INDEXABLE", "HIDDEN_NOT_INDEXABLE", "HIDDEN_PRIVATE", "PRIVATE"]  # noqa: E501
        if access not in allowed_values:
            raise ValueError(
                "Invalid value for `access` ({0}), must be one of {1}"
                .format(access, allowed_values)
            )

        self._access = access

    @property
    def expires_at(self):
        """Gets the expires_at of this FileUpdateInput.


        :return: The expires_at of this FileUpdateInput.
        :rtype: int
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this FileUpdateInput.


        :param expires_at: The expires_at of this FileUpdateInput.
        :type expires_at: int
        """

        self._expires_at = expires_at

    @property
    def is_usable_in_content(self):
        """Gets the is_usable_in_content of this FileUpdateInput.

        Mark whether the file should be used in new content or not.

        :return: The is_usable_in_content of this FileUpdateInput.
        :rtype: bool
        """
        return self._is_usable_in_content

    @is_usable_in_content.setter
    def is_usable_in_content(self, is_usable_in_content):
        """Sets the is_usable_in_content of this FileUpdateInput.

        Mark whether the file should be used in new content or not.

        :param is_usable_in_content: The is_usable_in_content of this FileUpdateInput.
        :type is_usable_in_content: bool
        """

        self._is_usable_in_content = is_usable_in_content

    @property
    def name(self):
        """Gets the name of this FileUpdateInput.

        New name for the file.

        :return: The name of this FileUpdateInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileUpdateInput.

        New name for the file.

        :param name: The name of this FileUpdateInput.
        :type name: str
        """

        self._name = name

    @property
    def parent_folder_id(self):
        """Gets the parent_folder_id of this FileUpdateInput.

        FolderId where the file should be moved to. folderId and folderPath parameters cannot be set at the same time.

        :return: The parent_folder_id of this FileUpdateInput.
        :rtype: str
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """Sets the parent_folder_id of this FileUpdateInput.

        FolderId where the file should be moved to. folderId and folderPath parameters cannot be set at the same time.

        :param parent_folder_id: The parent_folder_id of this FileUpdateInput.
        :type parent_folder_id: str
        """

        self._parent_folder_id = parent_folder_id

    @property
    def parent_folder_path(self):
        """Gets the parent_folder_path of this FileUpdateInput.

        Folder path where the file should be moved to. folderId and folderPath parameters cannot be set at the same time.

        :return: The parent_folder_path of this FileUpdateInput.
        :rtype: str
        """
        return self._parent_folder_path

    @parent_folder_path.setter
    def parent_folder_path(self, parent_folder_path):
        """Sets the parent_folder_path of this FileUpdateInput.

        Folder path where the file should be moved to. folderId and folderPath parameters cannot be set at the same time.

        :param parent_folder_path: The parent_folder_path of this FileUpdateInput.
        :type parent_folder_path: str
        """

        self._parent_folder_path = parent_folder_path
