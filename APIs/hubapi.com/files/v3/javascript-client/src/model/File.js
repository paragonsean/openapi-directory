/**
 * Files Files
 * Upload and manage files.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The File model module.
 * @module model/File
 * @version v3
 */
class File {
    /**
     * Constructs a new <code>File</code>.
     * File
     * @alias module:model/File
     * @param access {module:model/File.AccessEnum} File access. Can be PUBLIC_INDEXABLE, PUBLIC_NOT_INDEXABLE, PRIVATE.
     * @param archived {Boolean} If the file is deleted.
     * @param createdAt {Date} Creation time of the file object.
     * @param id {String} File ID.
     * @param updatedAt {Date} Timestamp of the latest update to the file.
     */
    constructor(access, archived, createdAt, id, updatedAt) { 
        
        File.initialize(this, access, archived, createdAt, id, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, access, archived, createdAt, id, updatedAt) { 
        obj['access'] = access;
        obj['archived'] = archived;
        obj['createdAt'] = createdAt;
        obj['id'] = id;
        obj['updatedAt'] = updatedAt;
    }

    /**
     * Constructs a <code>File</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/File} obj Optional instance to populate.
     * @return {module:model/File} The populated <code>File</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new File();

            if (data.hasOwnProperty('access')) {
                obj['access'] = ApiClient.convertToType(data['access'], 'String');
            }
            if (data.hasOwnProperty('archived')) {
                obj['archived'] = ApiClient.convertToType(data['archived'], 'Boolean');
            }
            if (data.hasOwnProperty('archivedAt')) {
                obj['archivedAt'] = ApiClient.convertToType(data['archivedAt'], 'Date');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('defaultHostingUrl')) {
                obj['defaultHostingUrl'] = ApiClient.convertToType(data['defaultHostingUrl'], 'String');
            }
            if (data.hasOwnProperty('encoding')) {
                obj['encoding'] = ApiClient.convertToType(data['encoding'], 'String');
            }
            if (data.hasOwnProperty('expiresAt')) {
                obj['expiresAt'] = ApiClient.convertToType(data['expiresAt'], 'Number');
            }
            if (data.hasOwnProperty('extension')) {
                obj['extension'] = ApiClient.convertToType(data['extension'], 'String');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isUsableInContent')) {
                obj['isUsableInContent'] = ApiClient.convertToType(data['isUsableInContent'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parentFolderId')) {
                obj['parentFolderId'] = ApiClient.convertToType(data['parentFolderId'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>File</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>File</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of File.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['access'] && !(typeof data['access'] === 'string' || data['access'] instanceof String)) {
            throw new Error("Expected the field `access` to be a primitive type in the JSON string but got " + data['access']);
        }
        // ensure the json data is a string
        if (data['defaultHostingUrl'] && !(typeof data['defaultHostingUrl'] === 'string' || data['defaultHostingUrl'] instanceof String)) {
            throw new Error("Expected the field `defaultHostingUrl` to be a primitive type in the JSON string but got " + data['defaultHostingUrl']);
        }
        // ensure the json data is a string
        if (data['encoding'] && !(typeof data['encoding'] === 'string' || data['encoding'] instanceof String)) {
            throw new Error("Expected the field `encoding` to be a primitive type in the JSON string but got " + data['encoding']);
        }
        // ensure the json data is a string
        if (data['extension'] && !(typeof data['extension'] === 'string' || data['extension'] instanceof String)) {
            throw new Error("Expected the field `extension` to be a primitive type in the JSON string but got " + data['extension']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['parentFolderId'] && !(typeof data['parentFolderId'] === 'string' || data['parentFolderId'] instanceof String)) {
            throw new Error("Expected the field `parentFolderId` to be a primitive type in the JSON string but got " + data['parentFolderId']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

File.RequiredProperties = ["access", "archived", "createdAt", "id", "updatedAt"];

/**
 * File access. Can be PUBLIC_INDEXABLE, PUBLIC_NOT_INDEXABLE, PRIVATE.
 * @member {module:model/File.AccessEnum} access
 */
File.prototype['access'] = undefined;

/**
 * If the file is deleted.
 * @member {Boolean} archived
 */
File.prototype['archived'] = undefined;

/**
 * Deletion time of the file object.
 * @member {Date} archivedAt
 */
File.prototype['archivedAt'] = undefined;

/**
 * Creation time of the file object.
 * @member {Date} createdAt
 */
File.prototype['createdAt'] = undefined;

/**
 * Default hosting URL of the file. This will use one of HubSpot's provided URLs to serve the file.
 * @member {String} defaultHostingUrl
 */
File.prototype['defaultHostingUrl'] = undefined;

/**
 * Encoding of the file.
 * @member {String} encoding
 */
File.prototype['encoding'] = undefined;

/**
 * @member {Number} expiresAt
 */
File.prototype['expiresAt'] = undefined;

/**
 * Extension of the file. ex: .jpg, .png, .gif, .pdf, etc.
 * @member {String} extension
 */
File.prototype['extension'] = undefined;

/**
 * For image and video files, the height of the content.
 * @member {Number} height
 */
File.prototype['height'] = undefined;

/**
 * File ID.
 * @member {String} id
 */
File.prototype['id'] = undefined;

/**
 * Previously \"archied\". Indicates if the file should be used when creating new content like web pages.
 * @member {Boolean} isUsableInContent
 */
File.prototype['isUsableInContent'] = undefined;

/**
 * Name of the file.
 * @member {String} name
 */
File.prototype['name'] = undefined;

/**
 * ID of the folder the file is in.
 * @member {String} parentFolderId
 */
File.prototype['parentFolderId'] = undefined;

/**
 * Path of the file in the file manager.
 * @member {String} path
 */
File.prototype['path'] = undefined;

/**
 * Size of the file in bytes.
 * @member {Number} size
 */
File.prototype['size'] = undefined;

/**
 * Type of the file. Can be IMG, DOCUMENT, AUDIO, MOVIE, or OTHER.
 * @member {String} type
 */
File.prototype['type'] = undefined;

/**
 * Timestamp of the latest update to the file.
 * @member {Date} updatedAt
 */
File.prototype['updatedAt'] = undefined;

/**
 * URL of the given file. This URL can change depending on the domain settings of the account. Will use the select file hosting domain.
 * @member {String} url
 */
File.prototype['url'] = undefined;

/**
 * For image and video files, the width of the content.
 * @member {Number} width
 */
File.prototype['width'] = undefined;





/**
 * Allowed values for the <code>access</code> property.
 * @enum {String}
 * @readonly
 */
File['AccessEnum'] = {

    /**
     * value: "PUBLIC_INDEXABLE"
     * @const
     */
    "PUBLIC_INDEXABLE": "PUBLIC_INDEXABLE",

    /**
     * value: "PUBLIC_NOT_INDEXABLE"
     * @const
     */
    "PUBLIC_NOT_INDEXABLE": "PUBLIC_NOT_INDEXABLE",

    /**
     * value: "HIDDEN_INDEXABLE"
     * @const
     */
    "HIDDEN_INDEXABLE": "HIDDEN_INDEXABLE",

    /**
     * value: "HIDDEN_NOT_INDEXABLE"
     * @const
     */
    "HIDDEN_NOT_INDEXABLE": "HIDDEN_NOT_INDEXABLE",

    /**
     * value: "HIDDEN_PRIVATE"
     * @const
     */
    "HIDDEN_PRIVATE": "HIDDEN_PRIVATE",

    /**
     * value: "PRIVATE"
     * @const
     */
    "PRIVATE": "PRIVATE"
};



export default File;

