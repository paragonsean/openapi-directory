/**
 * Files Files
 * Upload and manage files.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StandardError from './StandardError';

/**
 * The FileActionResponse model module.
 * @module model/FileActionResponse
 * @version v3
 */
class FileActionResponse {
    /**
     * Constructs a new <code>FileActionResponse</code>.
     * @alias module:model/FileActionResponse
     * @param completedAt {Date} Time of completion of task.
     * @param startedAt {Date} Timestamp of when the task was started.
     * @param status {module:model/FileActionResponse.StatusEnum} Current status of the task.
     * @param taskId {String} ID of the requested task.
     */
    constructor(completedAt, startedAt, status, taskId) { 
        
        FileActionResponse.initialize(this, completedAt, startedAt, status, taskId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, completedAt, startedAt, status, taskId) { 
        obj['completedAt'] = completedAt;
        obj['startedAt'] = startedAt;
        obj['status'] = status;
        obj['taskId'] = taskId;
    }

    /**
     * Constructs a <code>FileActionResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FileActionResponse} obj Optional instance to populate.
     * @return {module:model/FileActionResponse} The populated <code>FileActionResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileActionResponse();

            if (data.hasOwnProperty('completedAt')) {
                obj['completedAt'] = ApiClient.convertToType(data['completedAt'], 'Date');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [StandardError]);
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], {'String': 'String'});
            }
            if (data.hasOwnProperty('numErrors')) {
                obj['numErrors'] = ApiClient.convertToType(data['numErrors'], 'Number');
            }
            if (data.hasOwnProperty('requestedAt')) {
                obj['requestedAt'] = ApiClient.convertToType(data['requestedAt'], 'Date');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = File.constructFromObject(data['result']);
            }
            if (data.hasOwnProperty('startedAt')) {
                obj['startedAt'] = ApiClient.convertToType(data['startedAt'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('taskId')) {
                obj['taskId'] = ApiClient.convertToType(data['taskId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FileActionResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FileActionResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FileActionResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                StandardError.validateJSON(item);
            };
        }
        // validate the optional field `result`
        if (data['result']) { // data not null
          File.validateJSON(data['result']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['taskId'] && !(typeof data['taskId'] === 'string' || data['taskId'] instanceof String)) {
            throw new Error("Expected the field `taskId` to be a primitive type in the JSON string but got " + data['taskId']);
        }

        return true;
    }


}

FileActionResponse.RequiredProperties = ["completedAt", "startedAt", "status", "taskId"];

/**
 * Time of completion of task.
 * @member {Date} completedAt
 */
FileActionResponse.prototype['completedAt'] = undefined;

/**
 * Descriptive error messages.
 * @member {Array.<module:model/StandardError>} errors
 */
FileActionResponse.prototype['errors'] = undefined;

/**
 * Link to check the status of the requested task.
 * @member {Object.<String, String>} links
 */
FileActionResponse.prototype['links'] = undefined;

/**
 * Number of errors resulting from the task.
 * @member {Number} numErrors
 */
FileActionResponse.prototype['numErrors'] = undefined;

/**
 * Timestamp of when the task was requested.
 * @member {Date} requestedAt
 */
FileActionResponse.prototype['requestedAt'] = undefined;

/**
 * @member {File} result
 */
FileActionResponse.prototype['result'] = undefined;

/**
 * Timestamp of when the task was started.
 * @member {Date} startedAt
 */
FileActionResponse.prototype['startedAt'] = undefined;

/**
 * Current status of the task.
 * @member {module:model/FileActionResponse.StatusEnum} status
 */
FileActionResponse.prototype['status'] = undefined;

/**
 * ID of the requested task.
 * @member {String} taskId
 */
FileActionResponse.prototype['taskId'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
FileActionResponse['StatusEnum'] = {

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "PROCESSING"
     * @const
     */
    "PROCESSING": "PROCESSING",

    /**
     * value: "CANCELED"
     * @const
     */
    "CANCELED": "CANCELED",

    /**
     * value: "COMPLETE"
     * @const
     */
    "COMPLETE": "COMPLETE"
};



export default FileActionResponse;

