/**
 * Files Files
 * Upload and manage files.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FolderUpdateInput model module.
 * @module model/FolderUpdateInput
 * @version v3
 */
class FolderUpdateInput {
    /**
     * Constructs a new <code>FolderUpdateInput</code>.
     * Object for updating folders.
     * @alias module:model/FolderUpdateInput
     * @param id {String} ID of the folder to change.
     */
    constructor(id) { 
        
        FolderUpdateInput.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>FolderUpdateInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FolderUpdateInput} obj Optional instance to populate.
     * @return {module:model/FolderUpdateInput} The populated <code>FolderUpdateInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FolderUpdateInput();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parentFolderId')) {
                obj['parentFolderId'] = ApiClient.convertToType(data['parentFolderId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FolderUpdateInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FolderUpdateInput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FolderUpdateInput.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

FolderUpdateInput.RequiredProperties = ["id"];

/**
 * ID of the folder to change.
 * @member {String} id
 */
FolderUpdateInput.prototype['id'] = undefined;

/**
 * New name. If specified the folder's name and fullPath will change. All children of the folder will be updated accordingly.
 * @member {String} name
 */
FolderUpdateInput.prototype['name'] = undefined;

/**
 * New parent folderId. If changed, the folder and all it's children will be moved into the specified folder. parentFolderId and parentFolderPath cannot be specified at the same time.
 * @member {Number} parentFolderId
 */
FolderUpdateInput.prototype['parentFolderId'] = undefined;






export default FolderUpdateInput;

