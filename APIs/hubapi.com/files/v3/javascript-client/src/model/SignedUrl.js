/**
 * Files Files
 * Upload and manage files.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SignedUrl model module.
 * @module model/SignedUrl
 * @version v3
 */
class SignedUrl {
    /**
     * Constructs a new <code>SignedUrl</code>.
     * Signed Url object with optional ancillary metadata of requested file
     * @alias module:model/SignedUrl
     * @param expiresAt {Date} Timestamp of when the URL will no longer grant access to the file.
     * @param extension {String} Extension of the requested file.
     * @param name {String} Name of the requested file.
     * @param size {Number} Size in bytes of the requested file.
     * @param type {String} Type of the file. Can be IMG, DOCUMENT, AUDIO, MOVIE, or OTHER.
     * @param url {String} Signed URL with access to the specified file. Anyone with this URL will be able to access the file until it expires.
     */
    constructor(expiresAt, extension, name, size, type, url) { 
        
        SignedUrl.initialize(this, expiresAt, extension, name, size, type, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, expiresAt, extension, name, size, type, url) { 
        obj['expiresAt'] = expiresAt;
        obj['extension'] = extension;
        obj['name'] = name;
        obj['size'] = size;
        obj['type'] = type;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>SignedUrl</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SignedUrl} obj Optional instance to populate.
     * @return {module:model/SignedUrl} The populated <code>SignedUrl</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SignedUrl();

            if (data.hasOwnProperty('expiresAt')) {
                obj['expiresAt'] = ApiClient.convertToType(data['expiresAt'], 'Date');
            }
            if (data.hasOwnProperty('extension')) {
                obj['extension'] = ApiClient.convertToType(data['extension'], 'String');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SignedUrl</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SignedUrl</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SignedUrl.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['extension'] && !(typeof data['extension'] === 'string' || data['extension'] instanceof String)) {
            throw new Error("Expected the field `extension` to be a primitive type in the JSON string but got " + data['extension']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

SignedUrl.RequiredProperties = ["expiresAt", "extension", "name", "size", "type", "url"];

/**
 * Timestamp of when the URL will no longer grant access to the file.
 * @member {Date} expiresAt
 */
SignedUrl.prototype['expiresAt'] = undefined;

/**
 * Extension of the requested file.
 * @member {String} extension
 */
SignedUrl.prototype['extension'] = undefined;

/**
 * For image and video files. The height of the file.
 * @member {Number} height
 */
SignedUrl.prototype['height'] = undefined;

/**
 * Name of the requested file.
 * @member {String} name
 */
SignedUrl.prototype['name'] = undefined;

/**
 * Size in bytes of the requested file.
 * @member {Number} size
 */
SignedUrl.prototype['size'] = undefined;

/**
 * Type of the file. Can be IMG, DOCUMENT, AUDIO, MOVIE, or OTHER.
 * @member {String} type
 */
SignedUrl.prototype['type'] = undefined;

/**
 * Signed URL with access to the specified file. Anyone with this URL will be able to access the file until it expires.
 * @member {String} url
 */
SignedUrl.prototype['url'] = undefined;

/**
 * For image and video files. The width of the file.
 * @member {Number} width
 */
SignedUrl.prototype['width'] = undefined;






export default SignedUrl;

