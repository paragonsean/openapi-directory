/**
 * Files Files
 * Upload and manage files.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Folder model module.
 * @module model/Folder
 * @version v3
 */
class Folder {
    /**
     * Constructs a new <code>Folder</code>.
     * @alias module:model/Folder
     * @param archived {Boolean} Marks whether the folder is deleted or not.
     * @param createdAt {Date} Timestamp of folder creation.
     * @param id {String} ID of the folder.
     * @param updatedAt {Date} Timestamp of the latest update to the folder.
     */
    constructor(archived, createdAt, id, updatedAt) { 
        
        Folder.initialize(this, archived, createdAt, id, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, archived, createdAt, id, updatedAt) { 
        obj['archived'] = archived;
        obj['createdAt'] = createdAt;
        obj['id'] = id;
        obj['updatedAt'] = updatedAt;
    }

    /**
     * Constructs a <code>Folder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Folder} obj Optional instance to populate.
     * @return {module:model/Folder} The populated <code>Folder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Folder();

            if (data.hasOwnProperty('archived')) {
                obj['archived'] = ApiClient.convertToType(data['archived'], 'Boolean');
            }
            if (data.hasOwnProperty('archivedAt')) {
                obj['archivedAt'] = ApiClient.convertToType(data['archivedAt'], 'Date');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parentFolderId')) {
                obj['parentFolderId'] = ApiClient.convertToType(data['parentFolderId'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Folder</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Folder</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Folder.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['parentFolderId'] && !(typeof data['parentFolderId'] === 'string' || data['parentFolderId'] instanceof String)) {
            throw new Error("Expected the field `parentFolderId` to be a primitive type in the JSON string but got " + data['parentFolderId']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }

        return true;
    }


}

Folder.RequiredProperties = ["archived", "createdAt", "id", "updatedAt"];

/**
 * Marks whether the folder is deleted or not.
 * @member {Boolean} archived
 */
Folder.prototype['archived'] = undefined;

/**
 * Timestamp of folder deletion.
 * @member {Date} archivedAt
 */
Folder.prototype['archivedAt'] = undefined;

/**
 * Timestamp of folder creation.
 * @member {Date} createdAt
 */
Folder.prototype['createdAt'] = undefined;

/**
 * ID of the folder.
 * @member {String} id
 */
Folder.prototype['id'] = undefined;

/**
 * Name of the folder.
 * @member {String} name
 */
Folder.prototype['name'] = undefined;

/**
 * ID of the parent folder.
 * @member {String} parentFolderId
 */
Folder.prototype['parentFolderId'] = undefined;

/**
 * Path of the folder in the file manager.
 * @member {String} path
 */
Folder.prototype['path'] = undefined;

/**
 * Timestamp of the latest update to the folder.
 * @member {Date} updatedAt
 */
Folder.prototype['updatedAt'] = undefined;






export default Folder;

