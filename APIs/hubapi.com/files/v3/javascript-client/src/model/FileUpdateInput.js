/**
 * Files Files
 * Upload and manage files.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FileUpdateInput model module.
 * @module model/FileUpdateInput
 * @version v3
 */
class FileUpdateInput {
    /**
     * Constructs a new <code>FileUpdateInput</code>.
     * Object for updating files.
     * @alias module:model/FileUpdateInput
     */
    constructor() { 
        
        FileUpdateInput.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FileUpdateInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FileUpdateInput} obj Optional instance to populate.
     * @return {module:model/FileUpdateInput} The populated <code>FileUpdateInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileUpdateInput();

            if (data.hasOwnProperty('access')) {
                obj['access'] = ApiClient.convertToType(data['access'], 'String');
            }
            if (data.hasOwnProperty('expiresAt')) {
                obj['expiresAt'] = ApiClient.convertToType(data['expiresAt'], 'Number');
            }
            if (data.hasOwnProperty('isUsableInContent')) {
                obj['isUsableInContent'] = ApiClient.convertToType(data['isUsableInContent'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parentFolderId')) {
                obj['parentFolderId'] = ApiClient.convertToType(data['parentFolderId'], 'String');
            }
            if (data.hasOwnProperty('parentFolderPath')) {
                obj['parentFolderPath'] = ApiClient.convertToType(data['parentFolderPath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FileUpdateInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FileUpdateInput</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['access'] && !(typeof data['access'] === 'string' || data['access'] instanceof String)) {
            throw new Error("Expected the field `access` to be a primitive type in the JSON string but got " + data['access']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['parentFolderId'] && !(typeof data['parentFolderId'] === 'string' || data['parentFolderId'] instanceof String)) {
            throw new Error("Expected the field `parentFolderId` to be a primitive type in the JSON string but got " + data['parentFolderId']);
        }
        // ensure the json data is a string
        if (data['parentFolderPath'] && !(typeof data['parentFolderPath'] === 'string' || data['parentFolderPath'] instanceof String)) {
            throw new Error("Expected the field `parentFolderPath` to be a primitive type in the JSON string but got " + data['parentFolderPath']);
        }

        return true;
    }


}



/**
 * NONE: Do not run any duplicate validation. REJECT: Reject the upload if a duplicate is found. RETURN_EXISTING: If a duplicate file is found, do not upload a new file and return the found duplicate instead. 
 * @member {module:model/FileUpdateInput.AccessEnum} access
 */
FileUpdateInput.prototype['access'] = undefined;

/**
 * @member {Number} expiresAt
 */
FileUpdateInput.prototype['expiresAt'] = undefined;

/**
 * Mark whether the file should be used in new content or not.
 * @member {Boolean} isUsableInContent
 */
FileUpdateInput.prototype['isUsableInContent'] = undefined;

/**
 * New name for the file.
 * @member {String} name
 */
FileUpdateInput.prototype['name'] = undefined;

/**
 * FolderId where the file should be moved to. folderId and folderPath parameters cannot be set at the same time.
 * @member {String} parentFolderId
 */
FileUpdateInput.prototype['parentFolderId'] = undefined;

/**
 * Folder path where the file should be moved to. folderId and folderPath parameters cannot be set at the same time.
 * @member {String} parentFolderPath
 */
FileUpdateInput.prototype['parentFolderPath'] = undefined;





/**
 * Allowed values for the <code>access</code> property.
 * @enum {String}
 * @readonly
 */
FileUpdateInput['AccessEnum'] = {

    /**
     * value: "PUBLIC_INDEXABLE"
     * @const
     */
    "PUBLIC_INDEXABLE": "PUBLIC_INDEXABLE",

    /**
     * value: "PUBLIC_NOT_INDEXABLE"
     * @const
     */
    "PUBLIC_NOT_INDEXABLE": "PUBLIC_NOT_INDEXABLE",

    /**
     * value: "HIDDEN_INDEXABLE"
     * @const
     */
    "HIDDEN_INDEXABLE": "HIDDEN_INDEXABLE",

    /**
     * value: "HIDDEN_NOT_INDEXABLE"
     * @const
     */
    "HIDDEN_NOT_INDEXABLE": "HIDDEN_NOT_INDEXABLE",

    /**
     * value: "HIDDEN_PRIVATE"
     * @const
     */
    "HIDDEN_PRIVATE": "HIDDEN_PRIVATE",

    /**
     * value: "PRIVATE"
     * @const
     */
    "PRIVATE": "PRIVATE"
};



export default FileUpdateInput;

