/**
 * Files Files
 * Upload and manage files.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import CollectionResponseFile from './model/CollectionResponseFile';
import CollectionResponseFolder from './model/CollectionResponseFolder';
import Error from './model/Error';
import ErrorDetail from './model/ErrorDetail';
import File from './model/File';
import FileActionResponse from './model/FileActionResponse';
import FileStat from './model/FileStat';
import FileUpdateInput from './model/FileUpdateInput';
import Folder from './model/Folder';
import FolderActionResponse from './model/FolderActionResponse';
import FolderInput from './model/FolderInput';
import FolderUpdateInput from './model/FolderUpdateInput';
import FolderUpdateTaskLocator from './model/FolderUpdateTaskLocator';
import ImportFromUrlInput from './model/ImportFromUrlInput';
import ImportFromUrlTaskLocator from './model/ImportFromUrlTaskLocator';
import NextPage from './model/NextPage';
import Paging from './model/Paging';
import PreviousPage from './model/PreviousPage';
import SignedUrl from './model/SignedUrl';
import StandardError from './model/StandardError';
import FilesApi from './api/FilesApi';
import FoldersApi from './api/FoldersApi';


/**
* Upload and manage files..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var FilesFiles = require('index'); // See note below*.
* var xxxSvc = new FilesFiles.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new FilesFiles.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new FilesFiles.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new FilesFiles.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v3
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The CollectionResponseFile model constructor.
     * @property {module:model/CollectionResponseFile}
     */
    CollectionResponseFile,

    /**
     * The CollectionResponseFolder model constructor.
     * @property {module:model/CollectionResponseFolder}
     */
    CollectionResponseFolder,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The ErrorDetail model constructor.
     * @property {module:model/ErrorDetail}
     */
    ErrorDetail,

    /**
     * The File model constructor.
     * @property {module:model/File}
     */
    File,

    /**
     * The FileActionResponse model constructor.
     * @property {module:model/FileActionResponse}
     */
    FileActionResponse,

    /**
     * The FileStat model constructor.
     * @property {module:model/FileStat}
     */
    FileStat,

    /**
     * The FileUpdateInput model constructor.
     * @property {module:model/FileUpdateInput}
     */
    FileUpdateInput,

    /**
     * The Folder model constructor.
     * @property {module:model/Folder}
     */
    Folder,

    /**
     * The FolderActionResponse model constructor.
     * @property {module:model/FolderActionResponse}
     */
    FolderActionResponse,

    /**
     * The FolderInput model constructor.
     * @property {module:model/FolderInput}
     */
    FolderInput,

    /**
     * The FolderUpdateInput model constructor.
     * @property {module:model/FolderUpdateInput}
     */
    FolderUpdateInput,

    /**
     * The FolderUpdateTaskLocator model constructor.
     * @property {module:model/FolderUpdateTaskLocator}
     */
    FolderUpdateTaskLocator,

    /**
     * The ImportFromUrlInput model constructor.
     * @property {module:model/ImportFromUrlInput}
     */
    ImportFromUrlInput,

    /**
     * The ImportFromUrlTaskLocator model constructor.
     * @property {module:model/ImportFromUrlTaskLocator}
     */
    ImportFromUrlTaskLocator,

    /**
     * The NextPage model constructor.
     * @property {module:model/NextPage}
     */
    NextPage,

    /**
     * The Paging model constructor.
     * @property {module:model/Paging}
     */
    Paging,

    /**
     * The PreviousPage model constructor.
     * @property {module:model/PreviousPage}
     */
    PreviousPage,

    /**
     * The SignedUrl model constructor.
     * @property {module:model/SignedUrl}
     */
    SignedUrl,

    /**
     * The StandardError model constructor.
     * @property {module:model/StandardError}
     */
    StandardError,

    /**
    * The FilesApi service constructor.
    * @property {module:api/FilesApi}
    */
    FilesApi,

    /**
    * The FoldersApi service constructor.
    * @property {module:api/FoldersApi}
    */
    FoldersApi
};
