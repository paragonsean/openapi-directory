/**
 * Files Files
 * Upload and manage files.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CollectionResponseFile from '../model/CollectionResponseFile';
import Error from '../model/Error';
import FileActionResponse from '../model/FileActionResponse';
import FileStat from '../model/FileStat';
import FileUpdateInput from '../model/FileUpdateInput';
import ImportFromUrlInput from '../model/ImportFromUrlInput';
import ImportFromUrlTaskLocator from '../model/ImportFromUrlTaskLocator';
import SignedUrl from '../model/SignedUrl';

/**
* Files service.
* @module api/FilesApi
* @version v3
*/
export default class FilesApi {

    /**
    * Constructs a new FilesApi. 
    * @alias module:api/FilesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteFilesV3FilesFileIdArchive operation.
     * @callback module:api/FilesApi~deleteFilesV3FilesFileIdArchiveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete file
     * Delete file by ID
     * @param {String} fileId FileId to delete
     * @param {module:api/FilesApi~deleteFilesV3FilesFileIdArchiveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFilesV3FilesFileIdArchive(fileId, callback) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteFilesV3FilesFileIdArchive");
      }

      let pathParams = {
        'fileId': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/files/v3/files/{fileId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFilesV3FilesFileIdGdprDeleteArchiveGDPR operation.
     * @callback module:api/FilesApi~deleteFilesV3FilesFileIdGdprDeleteArchiveGDPRCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GDPR delete
     * GDRP delete file
     * @param {String} fileId ID of file to GDPR delete
     * @param {module:api/FilesApi~deleteFilesV3FilesFileIdGdprDeleteArchiveGDPRCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFilesV3FilesFileIdGdprDeleteArchiveGDPR(fileId, callback) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteFilesV3FilesFileIdGdprDeleteArchiveGDPR");
      }

      let pathParams = {
        'fileId': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/files/v3/files/{fileId}/gdpr-delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFilesV3FilesFileIdGetById operation.
     * @callback module:api/FilesApi~getFilesV3FilesFileIdGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get file.
     * Get file by ID.
     * @param {String} fileId ID of the desired file.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [properties] 
     * @param {module:api/FilesApi~getFilesV3FilesFileIdGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getFilesV3FilesFileIdGetById(fileId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling getFilesV3FilesFileIdGetById");
      }

      let pathParams = {
        'fileId': fileId
      };
      let queryParams = {
        'properties': this.apiClient.buildCollectionParam(opts['properties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = File;
      return this.apiClient.callApi(
        '/files/v3/files/{fileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFilesV3FilesFileIdSignedUrlGetSignedUrl operation.
     * @callback module:api/FilesApi~getFilesV3FilesFileIdSignedUrlGetSignedUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SignedUrl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get signed URL to access private file.
     * Generates signed URL that allows temporary access to a private file.
     * @param {String} fileId ID of file.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [size] For image files. This will resize the image to the desired size before sharing. Does not affect the original file, just the file served by this signed URL.
     * @param {Number} [expirationSeconds] How long in seconds the link will provide access to the file.
     * @param {Boolean} [upscale] If size is provided, this will upscale the image to fit the size dimensions.
     * @param {module:api/FilesApi~getFilesV3FilesFileIdSignedUrlGetSignedUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SignedUrl}
     */
    getFilesV3FilesFileIdSignedUrlGetSignedUrl(fileId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling getFilesV3FilesFileIdSignedUrlGetSignedUrl");
      }

      let pathParams = {
        'fileId': fileId
      };
      let queryParams = {
        'size': opts['size'],
        'expirationSeconds': opts['expirationSeconds'],
        'upscale': opts['upscale']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = SignedUrl;
      return this.apiClient.callApi(
        '/files/v3/files/{fileId}/signed-url', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFilesV3FilesImportFromUrlAsyncTasksTaskIdStatusCheckImport operation.
     * @callback module:api/FilesApi~getFilesV3FilesImportFromUrlAsyncTasksTaskIdStatusCheckImportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileActionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check import status.
     * Check the status of requested import.
     * @param {String} taskId Import by URL task ID
     * @param {module:api/FilesApi~getFilesV3FilesImportFromUrlAsyncTasksTaskIdStatusCheckImportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileActionResponse}
     */
    getFilesV3FilesImportFromUrlAsyncTasksTaskIdStatusCheckImport(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getFilesV3FilesImportFromUrlAsyncTasksTaskIdStatusCheckImport");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = FileActionResponse;
      return this.apiClient.callApi(
        '/files/v3/files/import-from-url/async/tasks/{taskId}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFilesV3FilesSearchDoSearch operation.
     * @callback module:api/FilesApi~getFilesV3FilesSearchDoSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionResponseFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search files
     * Search through files in the file manager. Does not display hidden or archived files.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [properties] Desired file properties in the return object.
     * @param {String} [after] The maximum offset of items for a given search is 10000. Narrow your search down if you are reaching this limit.
     * @param {String} [before] 
     * @param {Number} [limit] Number of items to return. Maximum limit is 100.
     * @param {Array.<String>} [sort] Sort files by a given field.
     * @param {String} [id] Search files by given ID.
     * @param {Date} [createdAt] Search files by time of creation.
     * @param {Date} [createdAtLte] 
     * @param {Date} [createdAtGte] 
     * @param {Date} [updatedAt] Search files by time of latest updated.
     * @param {Date} [updatedAtLte] 
     * @param {Date} [updatedAtGte] 
     * @param {String} [name] Search for files containing the given name.
     * @param {String} [path] Search files by path.
     * @param {Number} [parentFolderId] Search files within given folderId.
     * @param {Number} [size] Query by file size.
     * @param {Number} [height] Search files by height of image or video.
     * @param {Number} [width] Search files by width of image or video.
     * @param {String} [encoding] Search files with specified encoding.
     * @param {String} [type] Filter by provided file type.
     * @param {String} [extension] Search files by given extension.
     * @param {String} [url] Search for given URL
     * @param {Boolean} [isUsableInContent] If true shows files that have been marked to be used in new content. It false shows files that should not be used in new content.
     * @param {Boolean} [allowsAnonymousAccess] If 'true' will show private files; if 'false' will show public files
     * @param {module:api/FilesApi~getFilesV3FilesSearchDoSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionResponseFile}
     */
    getFilesV3FilesSearchDoSearch(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'properties': this.apiClient.buildCollectionParam(opts['properties'], 'multi'),
        'after': opts['after'],
        'before': opts['before'],
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        'id': opts['id'],
        'createdAt': opts['createdAt'],
        'createdAtLte': opts['createdAtLte'],
        'createdAtGte': opts['createdAtGte'],
        'updatedAt': opts['updatedAt'],
        'updatedAtLte': opts['updatedAtLte'],
        'updatedAtGte': opts['updatedAtGte'],
        'name': opts['name'],
        'path': opts['path'],
        'parentFolderId': opts['parentFolderId'],
        'size': opts['size'],
        'height': opts['height'],
        'width': opts['width'],
        'encoding': opts['encoding'],
        'type': opts['type'],
        'extension': opts['extension'],
        'url': opts['url'],
        'isUsableInContent': opts['isUsableInContent'],
        'allowsAnonymousAccess': opts['allowsAnonymousAccess']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = CollectionResponseFile;
      return this.apiClient.callApi(
        '/files/v3/files/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFilesV3FilesStatPathGetMetadata operation.
     * @callback module:api/FilesApi~getFilesV3FilesStatPathGetMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileStat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} path 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [properties] 
     * @param {module:api/FilesApi~getFilesV3FilesStatPathGetMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileStat}
     */
    getFilesV3FilesStatPathGetMetadata(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getFilesV3FilesStatPathGetMetadata");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
        'properties': this.apiClient.buildCollectionParam(opts['properties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = FileStat;
      return this.apiClient.callApi(
        '/files/v3/files/stat/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchFilesV3FilesFileIdUpdateProperties operation.
     * @callback module:api/FilesApi~patchFilesV3FilesFileIdUpdatePropertiesCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update file properties
     * Update properties of file by ID.
     * @param {String} fileId ID of file to update
     * @param {module:model/FileUpdateInput} fileUpdateInput Options to update.
     * @param {module:api/FilesApi~patchFilesV3FilesFileIdUpdatePropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    patchFilesV3FilesFileIdUpdateProperties(fileId, fileUpdateInput, callback) {
      let postBody = fileUpdateInput;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling patchFilesV3FilesFileIdUpdateProperties");
      }
      // verify the required parameter 'fileUpdateInput' is set
      if (fileUpdateInput === undefined || fileUpdateInput === null) {
        throw new Error("Missing the required parameter 'fileUpdateInput' when calling patchFilesV3FilesFileIdUpdateProperties");
      }

      let pathParams = {
        'fileId': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = File;
      return this.apiClient.callApi(
        '/files/v3/files/{fileId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postFilesV3FilesImportFromUrlAsyncImportFromUrl operation.
     * @callback module:api/FilesApi~postFilesV3FilesImportFromUrlAsyncImportFromUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportFromUrlTaskLocator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import a file from a URL into the file manager.
     * Asynchronously imports the file at the given URL into the file manager.
     * @param {module:model/ImportFromUrlInput} importFromUrlInput 
     * @param {module:api/FilesApi~postFilesV3FilesImportFromUrlAsyncImportFromUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportFromUrlTaskLocator}
     */
    postFilesV3FilesImportFromUrlAsyncImportFromUrl(importFromUrlInput, callback) {
      let postBody = importFromUrlInput;
      // verify the required parameter 'importFromUrlInput' is set
      if (importFromUrlInput === undefined || importFromUrlInput === null) {
        throw new Error("Missing the required parameter 'importFromUrlInput' when calling postFilesV3FilesImportFromUrlAsyncImportFromUrl");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = ImportFromUrlTaskLocator;
      return this.apiClient.callApi(
        '/files/v3/files/import-from-url/async', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postFilesV3FilesUpload operation.
     * @callback module:api/FilesApi~postFilesV3FilesUploadCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload file
     * Upload a single file with content specified in request body.
     * @param {Object} opts Optional parameters
     * @param {String} [charsetHunch] Character set of the uploaded file.
     * @param {File} [file] File to be uploaded.
     * @param {String} [fileName] Desired name for the uploaded file.
     * @param {String} [folderId] Either 'folderId' or 'folderPath' is required. folderId is the ID of the folder the file will be uploaded to.
     * @param {String} [folderPath] Either 'folderPath' or 'folderId' is required. This field represents the destination folder path for the uploaded file. If a path doesn't exist, the system will try to create one.
     * @param {String} [options] JSON string representing FileUploadOptions.
     * @param {module:api/FilesApi~postFilesV3FilesUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    postFilesV3FilesUpload(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'charsetHunch': opts['charsetHunch'],
        'file': opts['file'],
        'fileName': opts['fileName'],
        'folderId': opts['folderId'],
        'folderPath': opts['folderPath'],
        'options': opts['options']
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', '*/*'];
      let returnType = File;
      return this.apiClient.callApi(
        '/files/v3/files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putFilesV3FilesFileIdReplace operation.
     * @callback module:api/FilesApi~putFilesV3FilesFileIdReplaceCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace file.
     * Replace existing file data with new file data. Can be used to change image content without having to upload a new file and update all references.
     * @param {String} fileId ID of the desired file.
     * @param {Object} opts Optional parameters
     * @param {String} [charsetHunch] Character set of given file data.
     * @param {File} [file] File data that will replace existing file in the file manager.
     * @param {String} [options] JSON String representing FileReplaceOptions
     * @param {module:api/FilesApi~putFilesV3FilesFileIdReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    putFilesV3FilesFileIdReplace(fileId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling putFilesV3FilesFileIdReplace");
      }

      let pathParams = {
        'fileId': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'charsetHunch': opts['charsetHunch'],
        'file': opts['file'],
        'options': opts['options']
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', '*/*'];
      let returnType = File;
      return this.apiClient.callApi(
        '/files/v3/files/{fileId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
