/**
 * Files Files
 * Upload and manage files.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CollectionResponseFolder from '../model/CollectionResponseFolder';
import Error from '../model/Error';
import Folder from '../model/Folder';
import FolderActionResponse from '../model/FolderActionResponse';
import FolderInput from '../model/FolderInput';
import FolderUpdateInput from '../model/FolderUpdateInput';
import FolderUpdateTaskLocator from '../model/FolderUpdateTaskLocator';

/**
* Folders service.
* @module api/FoldersApi
* @version v3
*/
export default class FoldersApi {

    /**
    * Constructs a new FoldersApi. 
    * @alias module:api/FoldersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteFilesV3FoldersFolderIdArchive operation.
     * @callback module:api/FoldersApi~deleteFilesV3FoldersFolderIdArchiveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete folder.
     * Delete folder by ID.
     * @param {String} folderId ID of folder to delete.
     * @param {module:api/FoldersApi~deleteFilesV3FoldersFolderIdArchiveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFilesV3FoldersFolderIdArchive(folderId, callback) {
      let postBody = null;
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling deleteFilesV3FoldersFolderIdArchive");
      }

      let pathParams = {
        'folderId': folderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/files/v3/folders/{folderId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFilesV3FoldersFolderPathArchiveByPath operation.
     * @callback module:api/FoldersApi~deleteFilesV3FoldersFolderPathArchiveByPathCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete folder.
     * Delete folder by path.
     * @param {String} folderPath Path of folder to delete
     * @param {module:api/FoldersApi~deleteFilesV3FoldersFolderPathArchiveByPathCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFilesV3FoldersFolderPathArchiveByPath(folderPath, callback) {
      let postBody = null;
      // verify the required parameter 'folderPath' is set
      if (folderPath === undefined || folderPath === null) {
        throw new Error("Missing the required parameter 'folderPath' when calling deleteFilesV3FoldersFolderPathArchiveByPath");
      }

      let pathParams = {
        'folderPath': folderPath
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/files/v3/folders/{folderPath}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFilesV3FoldersFolderIdGetById operation.
     * @callback module:api/FoldersApi~getFilesV3FoldersFolderIdGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Folder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get folder
     * Get folder by ID
     * @param {String} folderId ID of desired folder
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [properties] Properties to set on returned folder.
     * @param {module:api/FoldersApi~getFilesV3FoldersFolderIdGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Folder}
     */
    getFilesV3FoldersFolderIdGetById(folderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling getFilesV3FoldersFolderIdGetById");
      }

      let pathParams = {
        'folderId': folderId
      };
      let queryParams = {
        'properties': this.apiClient.buildCollectionParam(opts['properties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = Folder;
      return this.apiClient.callApi(
        '/files/v3/folders/{folderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFilesV3FoldersFolderPathGetByPath operation.
     * @callback module:api/FoldersApi~getFilesV3FoldersFolderPathGetByPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Folder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get folder.
     * Get folder by path.
     * @param {String} folderPath Path of desired folder.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [properties] Properties to set on returned folder.
     * @param {module:api/FoldersApi~getFilesV3FoldersFolderPathGetByPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Folder}
     */
    getFilesV3FoldersFolderPathGetByPath(folderPath, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'folderPath' is set
      if (folderPath === undefined || folderPath === null) {
        throw new Error("Missing the required parameter 'folderPath' when calling getFilesV3FoldersFolderPathGetByPath");
      }

      let pathParams = {
        'folderPath': folderPath
      };
      let queryParams = {
        'properties': this.apiClient.buildCollectionParam(opts['properties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = Folder;
      return this.apiClient.callApi(
        '/files/v3/folders/{folderPath}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFilesV3FoldersSearchDoSearch operation.
     * @callback module:api/FoldersApi~getFilesV3FoldersSearchDoSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionResponseFolder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search folders
     * Search for folders. Does not contain hidden or archived folders.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [properties] Properties that should be included in the returned folders.
     * @param {String} [after] The maximum offset of items for a given search is 10000. Narrow your search down if you are reaching this limit.
     * @param {String} [before] 
     * @param {Number} [limit] Limit of results to return. Max limit is 100.
     * @param {Array.<String>} [sort] Sort results by given property. For example -name sorts by name field descending, name sorts by name field ascending.
     * @param {String} [id] Search folder by given ID.
     * @param {Date} [createdAt] Search for folders with the given creation timestamp.
     * @param {Date} [createdAtLte] 
     * @param {Date} [createdAtGte] 
     * @param {Date} [updatedAt] Search for folder at given update timestamp.
     * @param {Date} [updatedAtLte] 
     * @param {Date} [updatedAtGte] 
     * @param {String} [name] Search for folders containing the specified name.
     * @param {String} [path] Search for folders by path.
     * @param {Number} [parentFolderId] Search for folders with the given parent folderId.
     * @param {module:api/FoldersApi~getFilesV3FoldersSearchDoSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionResponseFolder}
     */
    getFilesV3FoldersSearchDoSearch(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'properties': this.apiClient.buildCollectionParam(opts['properties'], 'multi'),
        'after': opts['after'],
        'before': opts['before'],
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        'id': opts['id'],
        'createdAt': opts['createdAt'],
        'createdAtLte': opts['createdAtLte'],
        'createdAtGte': opts['createdAtGte'],
        'updatedAt': opts['updatedAt'],
        'updatedAtLte': opts['updatedAtLte'],
        'updatedAtGte': opts['updatedAtGte'],
        'name': opts['name'],
        'path': opts['path'],
        'parentFolderId': opts['parentFolderId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = CollectionResponseFolder;
      return this.apiClient.callApi(
        '/files/v3/folders/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFilesV3FoldersUpdateAsyncTasksTaskIdStatusCheckUpdateStatus operation.
     * @callback module:api/FoldersApi~getFilesV3FoldersUpdateAsyncTasksTaskIdStatusCheckUpdateStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FolderActionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check folder update status.
     * Check status of folder update. Folder updates happen asynchronously.
     * @param {String} taskId TaskId of folder update
     * @param {module:api/FoldersApi~getFilesV3FoldersUpdateAsyncTasksTaskIdStatusCheckUpdateStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FolderActionResponse}
     */
    getFilesV3FoldersUpdateAsyncTasksTaskIdStatusCheckUpdateStatus(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getFilesV3FoldersUpdateAsyncTasksTaskIdStatusCheckUpdateStatus");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = FolderActionResponse;
      return this.apiClient.callApi(
        '/files/v3/folders/update/async/tasks/{taskId}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postFilesV3FoldersCreate operation.
     * @callback module:api/FoldersApi~postFilesV3FoldersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Folder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create folder.
     * Creates a folder.
     * @param {module:model/FolderInput} folderInput Folder creation options
     * @param {module:api/FoldersApi~postFilesV3FoldersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Folder}
     */
    postFilesV3FoldersCreate(folderInput, callback) {
      let postBody = folderInput;
      // verify the required parameter 'folderInput' is set
      if (folderInput === undefined || folderInput === null) {
        throw new Error("Missing the required parameter 'folderInput' when calling postFilesV3FoldersCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = Folder;
      return this.apiClient.callApi(
        '/files/v3/folders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postFilesV3FoldersUpdateAsyncUpdateProperties operation.
     * @callback module:api/FoldersApi~postFilesV3FoldersUpdateAsyncUpdatePropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FolderUpdateTaskLocator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update folder properties
     * Update properties of folder by given ID. This action happens asynchronously and will update all of the folder's children as well.
     * @param {module:model/FolderUpdateInput} folderUpdateInput Properties to change in the folder
     * @param {module:api/FoldersApi~postFilesV3FoldersUpdateAsyncUpdatePropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FolderUpdateTaskLocator}
     */
    postFilesV3FoldersUpdateAsyncUpdateProperties(folderUpdateInput, callback) {
      let postBody = folderUpdateInput;
      // verify the required parameter 'folderUpdateInput' is set
      if (folderUpdateInput === undefined || folderUpdateInput === null) {
        throw new Error("Missing the required parameter 'folderUpdateInput' when calling postFilesV3FoldersUpdateAsyncUpdateProperties");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2_legacy', 'private_apps_legacy'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = FolderUpdateTaskLocator;
      return this.apiClient.callApi(
        '/files/v3/folders/update/async', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
