/*
 * Files Files
 * Upload and manage files.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CollectionResponseFile;
import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.FileActionResponse;
import org.openapitools.client.model.FileStat;
import org.openapitools.client.model.FileUpdateInput;
import org.openapitools.client.model.ImportFromUrlInput;
import org.openapitools.client.model.ImportFromUrlTaskLocator;
import org.openapitools.client.model.ModelFile;
import java.time.OffsetDateTime;
import org.openapitools.client.model.SignedUrl;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FilesApi
 */
@Disabled
public class FilesApiTest {

    private final FilesApi api = new FilesApi();

    /**
     * Delete file
     *
     * Delete file by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFilesV3FilesFileIdArchiveTest() throws ApiException {
        String fileId = null;
        api.deleteFilesV3FilesFileIdArchive(fileId);
        // TODO: test validations
    }

    /**
     * GDPR delete
     *
     * GDRP delete file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFilesV3FilesFileIdGdprDeleteArchiveGDPRTest() throws ApiException {
        String fileId = null;
        api.deleteFilesV3FilesFileIdGdprDeleteArchiveGDPR(fileId);
        // TODO: test validations
    }

    /**
     * Get file.
     *
     * Get file by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFilesV3FilesFileIdGetByIdTest() throws ApiException {
        String fileId = null;
        List<String> properties = null;
        ModelFile response = api.getFilesV3FilesFileIdGetById(fileId, properties);
        // TODO: test validations
    }

    /**
     * Get signed URL to access private file.
     *
     * Generates signed URL that allows temporary access to a private file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFilesV3FilesFileIdSignedUrlGetSignedUrlTest() throws ApiException {
        String fileId = null;
        String size = null;
        Long expirationSeconds = null;
        Boolean upscale = null;
        SignedUrl response = api.getFilesV3FilesFileIdSignedUrlGetSignedUrl(fileId, size, expirationSeconds, upscale);
        // TODO: test validations
    }

    /**
     * Check import status.
     *
     * Check the status of requested import.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFilesV3FilesImportFromUrlAsyncTasksTaskIdStatusCheckImportTest() throws ApiException {
        String taskId = null;
        FileActionResponse response = api.getFilesV3FilesImportFromUrlAsyncTasksTaskIdStatusCheckImport(taskId);
        // TODO: test validations
    }

    /**
     * Search files
     *
     * Search through files in the file manager. Does not display hidden or archived files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFilesV3FilesSearchDoSearchTest() throws ApiException {
        List<String> properties = null;
        String after = null;
        String before = null;
        Integer limit = null;
        List<String> sort = null;
        String id = null;
        OffsetDateTime createdAt = null;
        OffsetDateTime createdAtLte = null;
        OffsetDateTime createdAtGte = null;
        OffsetDateTime updatedAt = null;
        OffsetDateTime updatedAtLte = null;
        OffsetDateTime updatedAtGte = null;
        String name = null;
        String path = null;
        Long parentFolderId = null;
        Long size = null;
        Integer height = null;
        Integer width = null;
        String encoding = null;
        String type = null;
        String extension = null;
        String url = null;
        Boolean isUsableInContent = null;
        Boolean allowsAnonymousAccess = null;
        CollectionResponseFile response = api.getFilesV3FilesSearchDoSearch(properties, after, before, limit, sort, id, createdAt, createdAtLte, createdAtGte, updatedAt, updatedAtLte, updatedAtGte, name, path, parentFolderId, size, height, width, encoding, type, extension, url, isUsableInContent, allowsAnonymousAccess);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFilesV3FilesStatPathGetMetadataTest() throws ApiException {
        String path = null;
        List<String> properties = null;
        FileStat response = api.getFilesV3FilesStatPathGetMetadata(path, properties);
        // TODO: test validations
    }

    /**
     * update file properties
     *
     * Update properties of file by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchFilesV3FilesFileIdUpdatePropertiesTest() throws ApiException {
        String fileId = null;
        FileUpdateInput fileUpdateInput = null;
        ModelFile response = api.patchFilesV3FilesFileIdUpdateProperties(fileId, fileUpdateInput);
        // TODO: test validations
    }

    /**
     * Import a file from a URL into the file manager.
     *
     * Asynchronously imports the file at the given URL into the file manager.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postFilesV3FilesImportFromUrlAsyncImportFromUrlTest() throws ApiException {
        ImportFromUrlInput importFromUrlInput = null;
        ImportFromUrlTaskLocator response = api.postFilesV3FilesImportFromUrlAsyncImportFromUrl(importFromUrlInput);
        // TODO: test validations
    }

    /**
     * Upload file
     *
     * Upload a single file with content specified in request body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postFilesV3FilesUploadTest() throws ApiException {
        String charsetHunch = null;
        File _file = null;
        String fileName = null;
        String folderId = null;
        String folderPath = null;
        String options = null;
        ModelFile response = api.postFilesV3FilesUpload(charsetHunch, _file, fileName, folderId, folderPath, options);
        // TODO: test validations
    }

    /**
     * Replace file.
     *
     * Replace existing file data with new file data. Can be used to change image content without having to upload a new file and update all references.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putFilesV3FilesFileIdReplaceTest() throws ApiException {
        String fileId = null;
        String charsetHunch = null;
        File _file = null;
        String options = null;
        ModelFile response = api.putFilesV3FilesFileIdReplace(fileId, charsetHunch, _file, options);
        // TODO: test validations
    }

}
