/*
 * Files Files
 * Upload and manage files.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CollectionResponseFolder;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Folder;
import org.openapitools.client.model.FolderActionResponse;
import org.openapitools.client.model.FolderInput;
import org.openapitools.client.model.FolderUpdateInput;
import org.openapitools.client.model.FolderUpdateTaskLocator;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FoldersApi
 */
@Disabled
public class FoldersApiTest {

    private final FoldersApi api = new FoldersApi();

    /**
     * Delete folder.
     *
     * Delete folder by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFilesV3FoldersFolderIdArchiveTest() throws ApiException {
        String folderId = null;
        api.deleteFilesV3FoldersFolderIdArchive(folderId);
        // TODO: test validations
    }

    /**
     * Delete folder.
     *
     * Delete folder by path.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFilesV3FoldersFolderPathArchiveByPathTest() throws ApiException {
        String folderPath = null;
        api.deleteFilesV3FoldersFolderPathArchiveByPath(folderPath);
        // TODO: test validations
    }

    /**
     * Get folder
     *
     * Get folder by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFilesV3FoldersFolderIdGetByIdTest() throws ApiException {
        String folderId = null;
        List<String> properties = null;
        Folder response = api.getFilesV3FoldersFolderIdGetById(folderId, properties);
        // TODO: test validations
    }

    /**
     * Get folder.
     *
     * Get folder by path.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFilesV3FoldersFolderPathGetByPathTest() throws ApiException {
        String folderPath = null;
        List<String> properties = null;
        Folder response = api.getFilesV3FoldersFolderPathGetByPath(folderPath, properties);
        // TODO: test validations
    }

    /**
     * Search folders
     *
     * Search for folders. Does not contain hidden or archived folders.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFilesV3FoldersSearchDoSearchTest() throws ApiException {
        List<String> properties = null;
        String after = null;
        String before = null;
        Integer limit = null;
        List<String> sort = null;
        String id = null;
        OffsetDateTime createdAt = null;
        OffsetDateTime createdAtLte = null;
        OffsetDateTime createdAtGte = null;
        OffsetDateTime updatedAt = null;
        OffsetDateTime updatedAtLte = null;
        OffsetDateTime updatedAtGte = null;
        String name = null;
        String path = null;
        Long parentFolderId = null;
        CollectionResponseFolder response = api.getFilesV3FoldersSearchDoSearch(properties, after, before, limit, sort, id, createdAt, createdAtLte, createdAtGte, updatedAt, updatedAtLte, updatedAtGte, name, path, parentFolderId);
        // TODO: test validations
    }

    /**
     * Check folder update status.
     *
     * Check status of folder update. Folder updates happen asynchronously.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFilesV3FoldersUpdateAsyncTasksTaskIdStatusCheckUpdateStatusTest() throws ApiException {
        String taskId = null;
        FolderActionResponse response = api.getFilesV3FoldersUpdateAsyncTasksTaskIdStatusCheckUpdateStatus(taskId);
        // TODO: test validations
    }

    /**
     * Create folder.
     *
     * Creates a folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postFilesV3FoldersCreateTest() throws ApiException {
        FolderInput folderInput = null;
        Folder response = api.postFilesV3FoldersCreate(folderInput);
        // TODO: test validations
    }

    /**
     * Update folder properties
     *
     * Update properties of folder by given ID. This action happens asynchronously and will update all of the folder&#39;s children as well.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postFilesV3FoldersUpdateAsyncUpdatePropertiesTest() throws ApiException {
        FolderUpdateInput folderUpdateInput = null;
        FolderUpdateTaskLocator response = api.postFilesV3FoldersUpdateAsyncUpdateProperties(folderUpdateInput);
        // TODO: test validations
    }

}
