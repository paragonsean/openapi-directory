/*
 * Files Files
 * Upload and manage files.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CollectionResponseFile;
import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.FileActionResponse;
import org.openapitools.client.model.FileStat;
import org.openapitools.client.model.FileUpdateInput;
import org.openapitools.client.model.ImportFromUrlInput;
import org.openapitools.client.model.ImportFromUrlTaskLocator;
import org.openapitools.client.model.ModelFile;
import java.time.OffsetDateTime;
import org.openapitools.client.model.SignedUrl;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FilesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FilesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteFilesV3FilesFileIdArchive
     * @param fileId FileId to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFilesV3FilesFileIdArchiveCall(String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/v3/files/{fileId}"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFilesV3FilesFileIdArchiveValidateBeforeCall(String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteFilesV3FilesFileIdArchive(Async)");
        }

        return deleteFilesV3FilesFileIdArchiveCall(fileId, _callback);

    }

    /**
     * Delete file
     * Delete file by ID
     * @param fileId FileId to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFilesV3FilesFileIdArchive(String fileId) throws ApiException {
        deleteFilesV3FilesFileIdArchiveWithHttpInfo(fileId);
    }

    /**
     * Delete file
     * Delete file by ID
     * @param fileId FileId to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFilesV3FilesFileIdArchiveWithHttpInfo(String fileId) throws ApiException {
        okhttp3.Call localVarCall = deleteFilesV3FilesFileIdArchiveValidateBeforeCall(fileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete file (asynchronously)
     * Delete file by ID
     * @param fileId FileId to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFilesV3FilesFileIdArchiveAsync(String fileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFilesV3FilesFileIdArchiveValidateBeforeCall(fileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFilesV3FilesFileIdGdprDeleteArchiveGDPR
     * @param fileId ID of file to GDPR delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFilesV3FilesFileIdGdprDeleteArchiveGDPRCall(String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/v3/files/{fileId}/gdpr-delete"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFilesV3FilesFileIdGdprDeleteArchiveGDPRValidateBeforeCall(String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteFilesV3FilesFileIdGdprDeleteArchiveGDPR(Async)");
        }

        return deleteFilesV3FilesFileIdGdprDeleteArchiveGDPRCall(fileId, _callback);

    }

    /**
     * GDPR delete
     * GDRP delete file
     * @param fileId ID of file to GDPR delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFilesV3FilesFileIdGdprDeleteArchiveGDPR(String fileId) throws ApiException {
        deleteFilesV3FilesFileIdGdprDeleteArchiveGDPRWithHttpInfo(fileId);
    }

    /**
     * GDPR delete
     * GDRP delete file
     * @param fileId ID of file to GDPR delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFilesV3FilesFileIdGdprDeleteArchiveGDPRWithHttpInfo(String fileId) throws ApiException {
        okhttp3.Call localVarCall = deleteFilesV3FilesFileIdGdprDeleteArchiveGDPRValidateBeforeCall(fileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * GDPR delete (asynchronously)
     * GDRP delete file
     * @param fileId ID of file to GDPR delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFilesV3FilesFileIdGdprDeleteArchiveGDPRAsync(String fileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFilesV3FilesFileIdGdprDeleteArchiveGDPRValidateBeforeCall(fileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFilesV3FilesFileIdGetById
     * @param fileId ID of the desired file. (required)
     * @param properties  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesV3FilesFileIdGetByIdCall(String fileId, List<String> properties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/v3/files/{fileId}"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (properties != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "properties", properties));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilesV3FilesFileIdGetByIdValidateBeforeCall(String fileId, List<String> properties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFilesV3FilesFileIdGetById(Async)");
        }

        return getFilesV3FilesFileIdGetByIdCall(fileId, properties, _callback);

    }

    /**
     * Get file.
     * Get file by ID.
     * @param fileId ID of the desired file. (required)
     * @param properties  (optional)
     * @return ModelFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ModelFile getFilesV3FilesFileIdGetById(String fileId, List<String> properties) throws ApiException {
        ApiResponse<ModelFile> localVarResp = getFilesV3FilesFileIdGetByIdWithHttpInfo(fileId, properties);
        return localVarResp.getData();
    }

    /**
     * Get file.
     * Get file by ID.
     * @param fileId ID of the desired file. (required)
     * @param properties  (optional)
     * @return ApiResponse&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelFile> getFilesV3FilesFileIdGetByIdWithHttpInfo(String fileId, List<String> properties) throws ApiException {
        okhttp3.Call localVarCall = getFilesV3FilesFileIdGetByIdValidateBeforeCall(fileId, properties, null);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get file. (asynchronously)
     * Get file by ID.
     * @param fileId ID of the desired file. (required)
     * @param properties  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesV3FilesFileIdGetByIdAsync(String fileId, List<String> properties, final ApiCallback<ModelFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilesV3FilesFileIdGetByIdValidateBeforeCall(fileId, properties, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFilesV3FilesFileIdSignedUrlGetSignedUrl
     * @param fileId ID of file. (required)
     * @param size For image files. This will resize the image to the desired size before sharing. Does not affect the original file, just the file served by this signed URL. (optional)
     * @param expirationSeconds How long in seconds the link will provide access to the file. (optional)
     * @param upscale If size is provided, this will upscale the image to fit the size dimensions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesV3FilesFileIdSignedUrlGetSignedUrlCall(String fileId, String size, Long expirationSeconds, Boolean upscale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/v3/files/{fileId}/signed-url"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (expirationSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expirationSeconds", expirationSeconds));
        }

        if (upscale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upscale", upscale));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilesV3FilesFileIdSignedUrlGetSignedUrlValidateBeforeCall(String fileId, String size, Long expirationSeconds, Boolean upscale, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFilesV3FilesFileIdSignedUrlGetSignedUrl(Async)");
        }

        return getFilesV3FilesFileIdSignedUrlGetSignedUrlCall(fileId, size, expirationSeconds, upscale, _callback);

    }

    /**
     * Get signed URL to access private file.
     * Generates signed URL that allows temporary access to a private file.
     * @param fileId ID of file. (required)
     * @param size For image files. This will resize the image to the desired size before sharing. Does not affect the original file, just the file served by this signed URL. (optional)
     * @param expirationSeconds How long in seconds the link will provide access to the file. (optional)
     * @param upscale If size is provided, this will upscale the image to fit the size dimensions. (optional)
     * @return SignedUrl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public SignedUrl getFilesV3FilesFileIdSignedUrlGetSignedUrl(String fileId, String size, Long expirationSeconds, Boolean upscale) throws ApiException {
        ApiResponse<SignedUrl> localVarResp = getFilesV3FilesFileIdSignedUrlGetSignedUrlWithHttpInfo(fileId, size, expirationSeconds, upscale);
        return localVarResp.getData();
    }

    /**
     * Get signed URL to access private file.
     * Generates signed URL that allows temporary access to a private file.
     * @param fileId ID of file. (required)
     * @param size For image files. This will resize the image to the desired size before sharing. Does not affect the original file, just the file served by this signed URL. (optional)
     * @param expirationSeconds How long in seconds the link will provide access to the file. (optional)
     * @param upscale If size is provided, this will upscale the image to fit the size dimensions. (optional)
     * @return ApiResponse&lt;SignedUrl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignedUrl> getFilesV3FilesFileIdSignedUrlGetSignedUrlWithHttpInfo(String fileId, String size, Long expirationSeconds, Boolean upscale) throws ApiException {
        okhttp3.Call localVarCall = getFilesV3FilesFileIdSignedUrlGetSignedUrlValidateBeforeCall(fileId, size, expirationSeconds, upscale, null);
        Type localVarReturnType = new TypeToken<SignedUrl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get signed URL to access private file. (asynchronously)
     * Generates signed URL that allows temporary access to a private file.
     * @param fileId ID of file. (required)
     * @param size For image files. This will resize the image to the desired size before sharing. Does not affect the original file, just the file served by this signed URL. (optional)
     * @param expirationSeconds How long in seconds the link will provide access to the file. (optional)
     * @param upscale If size is provided, this will upscale the image to fit the size dimensions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesV3FilesFileIdSignedUrlGetSignedUrlAsync(String fileId, String size, Long expirationSeconds, Boolean upscale, final ApiCallback<SignedUrl> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilesV3FilesFileIdSignedUrlGetSignedUrlValidateBeforeCall(fileId, size, expirationSeconds, upscale, _callback);
        Type localVarReturnType = new TypeToken<SignedUrl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFilesV3FilesImportFromUrlAsyncTasksTaskIdStatusCheckImport
     * @param taskId Import by URL task ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesV3FilesImportFromUrlAsyncTasksTaskIdStatusCheckImportCall(String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/v3/files/import-from-url/async/tasks/{taskId}/status"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilesV3FilesImportFromUrlAsyncTasksTaskIdStatusCheckImportValidateBeforeCall(String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getFilesV3FilesImportFromUrlAsyncTasksTaskIdStatusCheckImport(Async)");
        }

        return getFilesV3FilesImportFromUrlAsyncTasksTaskIdStatusCheckImportCall(taskId, _callback);

    }

    /**
     * Check import status.
     * Check the status of requested import.
     * @param taskId Import by URL task ID (required)
     * @return FileActionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public FileActionResponse getFilesV3FilesImportFromUrlAsyncTasksTaskIdStatusCheckImport(String taskId) throws ApiException {
        ApiResponse<FileActionResponse> localVarResp = getFilesV3FilesImportFromUrlAsyncTasksTaskIdStatusCheckImportWithHttpInfo(taskId);
        return localVarResp.getData();
    }

    /**
     * Check import status.
     * Check the status of requested import.
     * @param taskId Import by URL task ID (required)
     * @return ApiResponse&lt;FileActionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileActionResponse> getFilesV3FilesImportFromUrlAsyncTasksTaskIdStatusCheckImportWithHttpInfo(String taskId) throws ApiException {
        okhttp3.Call localVarCall = getFilesV3FilesImportFromUrlAsyncTasksTaskIdStatusCheckImportValidateBeforeCall(taskId, null);
        Type localVarReturnType = new TypeToken<FileActionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check import status. (asynchronously)
     * Check the status of requested import.
     * @param taskId Import by URL task ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesV3FilesImportFromUrlAsyncTasksTaskIdStatusCheckImportAsync(String taskId, final ApiCallback<FileActionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilesV3FilesImportFromUrlAsyncTasksTaskIdStatusCheckImportValidateBeforeCall(taskId, _callback);
        Type localVarReturnType = new TypeToken<FileActionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFilesV3FilesSearchDoSearch
     * @param properties Desired file properties in the return object. (optional)
     * @param after The maximum offset of items for a given search is 10000. Narrow your search down if you are reaching this limit. (optional)
     * @param before  (optional)
     * @param limit Number of items to return. Maximum limit is 100. (optional)
     * @param sort Sort files by a given field. (optional)
     * @param id Search files by given ID. (optional)
     * @param createdAt Search files by time of creation. (optional)
     * @param createdAtLte  (optional)
     * @param createdAtGte  (optional)
     * @param updatedAt Search files by time of latest updated. (optional)
     * @param updatedAtLte  (optional)
     * @param updatedAtGte  (optional)
     * @param name Search for files containing the given name. (optional)
     * @param path Search files by path. (optional)
     * @param parentFolderId Search files within given folderId. (optional)
     * @param size Query by file size. (optional)
     * @param height Search files by height of image or video. (optional)
     * @param width Search files by width of image or video. (optional)
     * @param encoding Search files with specified encoding. (optional)
     * @param type Filter by provided file type. (optional)
     * @param extension Search files by given extension. (optional)
     * @param url Search for given URL (optional)
     * @param isUsableInContent If true shows files that have been marked to be used in new content. It false shows files that should not be used in new content. (optional)
     * @param allowsAnonymousAccess If &#39;true&#39; will show private files; if &#39;false&#39; will show public files (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesV3FilesSearchDoSearchCall(List<String> properties, String after, String before, Integer limit, List<String> sort, String id, OffsetDateTime createdAt, OffsetDateTime createdAtLte, OffsetDateTime createdAtGte, OffsetDateTime updatedAt, OffsetDateTime updatedAtLte, OffsetDateTime updatedAtGte, String name, String path, Long parentFolderId, Long size, Integer height, Integer width, String encoding, String type, String extension, String url, Boolean isUsableInContent, Boolean allowsAnonymousAccess, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/v3/files/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (properties != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "properties", properties));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sort", sort));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (createdAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt", createdAt));
        }

        if (createdAtLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAtLte", createdAtLte));
        }

        if (createdAtGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAtGte", createdAtGte));
        }

        if (updatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedAt", updatedAt));
        }

        if (updatedAtLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedAtLte", updatedAtLte));
        }

        if (updatedAtGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedAtGte", updatedAtGte));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (parentFolderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentFolderId", parentFolderId));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (encoding != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("encoding", encoding));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (extension != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extension", extension));
        }

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (isUsableInContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isUsableInContent", isUsableInContent));
        }

        if (allowsAnonymousAccess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allowsAnonymousAccess", allowsAnonymousAccess));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilesV3FilesSearchDoSearchValidateBeforeCall(List<String> properties, String after, String before, Integer limit, List<String> sort, String id, OffsetDateTime createdAt, OffsetDateTime createdAtLte, OffsetDateTime createdAtGte, OffsetDateTime updatedAt, OffsetDateTime updatedAtLte, OffsetDateTime updatedAtGte, String name, String path, Long parentFolderId, Long size, Integer height, Integer width, String encoding, String type, String extension, String url, Boolean isUsableInContent, Boolean allowsAnonymousAccess, final ApiCallback _callback) throws ApiException {
        return getFilesV3FilesSearchDoSearchCall(properties, after, before, limit, sort, id, createdAt, createdAtLte, createdAtGte, updatedAt, updatedAtLte, updatedAtGte, name, path, parentFolderId, size, height, width, encoding, type, extension, url, isUsableInContent, allowsAnonymousAccess, _callback);

    }

    /**
     * Search files
     * Search through files in the file manager. Does not display hidden or archived files.
     * @param properties Desired file properties in the return object. (optional)
     * @param after The maximum offset of items for a given search is 10000. Narrow your search down if you are reaching this limit. (optional)
     * @param before  (optional)
     * @param limit Number of items to return. Maximum limit is 100. (optional)
     * @param sort Sort files by a given field. (optional)
     * @param id Search files by given ID. (optional)
     * @param createdAt Search files by time of creation. (optional)
     * @param createdAtLte  (optional)
     * @param createdAtGte  (optional)
     * @param updatedAt Search files by time of latest updated. (optional)
     * @param updatedAtLte  (optional)
     * @param updatedAtGte  (optional)
     * @param name Search for files containing the given name. (optional)
     * @param path Search files by path. (optional)
     * @param parentFolderId Search files within given folderId. (optional)
     * @param size Query by file size. (optional)
     * @param height Search files by height of image or video. (optional)
     * @param width Search files by width of image or video. (optional)
     * @param encoding Search files with specified encoding. (optional)
     * @param type Filter by provided file type. (optional)
     * @param extension Search files by given extension. (optional)
     * @param url Search for given URL (optional)
     * @param isUsableInContent If true shows files that have been marked to be used in new content. It false shows files that should not be used in new content. (optional)
     * @param allowsAnonymousAccess If &#39;true&#39; will show private files; if &#39;false&#39; will show public files (optional)
     * @return CollectionResponseFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public CollectionResponseFile getFilesV3FilesSearchDoSearch(List<String> properties, String after, String before, Integer limit, List<String> sort, String id, OffsetDateTime createdAt, OffsetDateTime createdAtLte, OffsetDateTime createdAtGte, OffsetDateTime updatedAt, OffsetDateTime updatedAtLte, OffsetDateTime updatedAtGte, String name, String path, Long parentFolderId, Long size, Integer height, Integer width, String encoding, String type, String extension, String url, Boolean isUsableInContent, Boolean allowsAnonymousAccess) throws ApiException {
        ApiResponse<CollectionResponseFile> localVarResp = getFilesV3FilesSearchDoSearchWithHttpInfo(properties, after, before, limit, sort, id, createdAt, createdAtLte, createdAtGte, updatedAt, updatedAtLte, updatedAtGte, name, path, parentFolderId, size, height, width, encoding, type, extension, url, isUsableInContent, allowsAnonymousAccess);
        return localVarResp.getData();
    }

    /**
     * Search files
     * Search through files in the file manager. Does not display hidden or archived files.
     * @param properties Desired file properties in the return object. (optional)
     * @param after The maximum offset of items for a given search is 10000. Narrow your search down if you are reaching this limit. (optional)
     * @param before  (optional)
     * @param limit Number of items to return. Maximum limit is 100. (optional)
     * @param sort Sort files by a given field. (optional)
     * @param id Search files by given ID. (optional)
     * @param createdAt Search files by time of creation. (optional)
     * @param createdAtLte  (optional)
     * @param createdAtGte  (optional)
     * @param updatedAt Search files by time of latest updated. (optional)
     * @param updatedAtLte  (optional)
     * @param updatedAtGte  (optional)
     * @param name Search for files containing the given name. (optional)
     * @param path Search files by path. (optional)
     * @param parentFolderId Search files within given folderId. (optional)
     * @param size Query by file size. (optional)
     * @param height Search files by height of image or video. (optional)
     * @param width Search files by width of image or video. (optional)
     * @param encoding Search files with specified encoding. (optional)
     * @param type Filter by provided file type. (optional)
     * @param extension Search files by given extension. (optional)
     * @param url Search for given URL (optional)
     * @param isUsableInContent If true shows files that have been marked to be used in new content. It false shows files that should not be used in new content. (optional)
     * @param allowsAnonymousAccess If &#39;true&#39; will show private files; if &#39;false&#39; will show public files (optional)
     * @return ApiResponse&lt;CollectionResponseFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollectionResponseFile> getFilesV3FilesSearchDoSearchWithHttpInfo(List<String> properties, String after, String before, Integer limit, List<String> sort, String id, OffsetDateTime createdAt, OffsetDateTime createdAtLte, OffsetDateTime createdAtGte, OffsetDateTime updatedAt, OffsetDateTime updatedAtLte, OffsetDateTime updatedAtGte, String name, String path, Long parentFolderId, Long size, Integer height, Integer width, String encoding, String type, String extension, String url, Boolean isUsableInContent, Boolean allowsAnonymousAccess) throws ApiException {
        okhttp3.Call localVarCall = getFilesV3FilesSearchDoSearchValidateBeforeCall(properties, after, before, limit, sort, id, createdAt, createdAtLte, createdAtGte, updatedAt, updatedAtLte, updatedAtGte, name, path, parentFolderId, size, height, width, encoding, type, extension, url, isUsableInContent, allowsAnonymousAccess, null);
        Type localVarReturnType = new TypeToken<CollectionResponseFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search files (asynchronously)
     * Search through files in the file manager. Does not display hidden or archived files.
     * @param properties Desired file properties in the return object. (optional)
     * @param after The maximum offset of items for a given search is 10000. Narrow your search down if you are reaching this limit. (optional)
     * @param before  (optional)
     * @param limit Number of items to return. Maximum limit is 100. (optional)
     * @param sort Sort files by a given field. (optional)
     * @param id Search files by given ID. (optional)
     * @param createdAt Search files by time of creation. (optional)
     * @param createdAtLte  (optional)
     * @param createdAtGte  (optional)
     * @param updatedAt Search files by time of latest updated. (optional)
     * @param updatedAtLte  (optional)
     * @param updatedAtGte  (optional)
     * @param name Search for files containing the given name. (optional)
     * @param path Search files by path. (optional)
     * @param parentFolderId Search files within given folderId. (optional)
     * @param size Query by file size. (optional)
     * @param height Search files by height of image or video. (optional)
     * @param width Search files by width of image or video. (optional)
     * @param encoding Search files with specified encoding. (optional)
     * @param type Filter by provided file type. (optional)
     * @param extension Search files by given extension. (optional)
     * @param url Search for given URL (optional)
     * @param isUsableInContent If true shows files that have been marked to be used in new content. It false shows files that should not be used in new content. (optional)
     * @param allowsAnonymousAccess If &#39;true&#39; will show private files; if &#39;false&#39; will show public files (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesV3FilesSearchDoSearchAsync(List<String> properties, String after, String before, Integer limit, List<String> sort, String id, OffsetDateTime createdAt, OffsetDateTime createdAtLte, OffsetDateTime createdAtGte, OffsetDateTime updatedAt, OffsetDateTime updatedAtLte, OffsetDateTime updatedAtGte, String name, String path, Long parentFolderId, Long size, Integer height, Integer width, String encoding, String type, String extension, String url, Boolean isUsableInContent, Boolean allowsAnonymousAccess, final ApiCallback<CollectionResponseFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilesV3FilesSearchDoSearchValidateBeforeCall(properties, after, before, limit, sort, id, createdAt, createdAtLte, createdAtGte, updatedAt, updatedAtLte, updatedAtGte, name, path, parentFolderId, size, height, width, encoding, type, extension, url, isUsableInContent, allowsAnonymousAccess, _callback);
        Type localVarReturnType = new TypeToken<CollectionResponseFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFilesV3FilesStatPathGetMetadata
     * @param path  (required)
     * @param properties  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesV3FilesStatPathGetMetadataCall(String path, List<String> properties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/v3/files/stat/{path}"
            .replace("{" + "path" + "}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (properties != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "properties", properties));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilesV3FilesStatPathGetMetadataValidateBeforeCall(String path, List<String> properties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getFilesV3FilesStatPathGetMetadata(Async)");
        }

        return getFilesV3FilesStatPathGetMetadataCall(path, properties, _callback);

    }

    /**
     * 
     * 
     * @param path  (required)
     * @param properties  (optional)
     * @return FileStat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public FileStat getFilesV3FilesStatPathGetMetadata(String path, List<String> properties) throws ApiException {
        ApiResponse<FileStat> localVarResp = getFilesV3FilesStatPathGetMetadataWithHttpInfo(path, properties);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param path  (required)
     * @param properties  (optional)
     * @return ApiResponse&lt;FileStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileStat> getFilesV3FilesStatPathGetMetadataWithHttpInfo(String path, List<String> properties) throws ApiException {
        okhttp3.Call localVarCall = getFilesV3FilesStatPathGetMetadataValidateBeforeCall(path, properties, null);
        Type localVarReturnType = new TypeToken<FileStat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param path  (required)
     * @param properties  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesV3FilesStatPathGetMetadataAsync(String path, List<String> properties, final ApiCallback<FileStat> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilesV3FilesStatPathGetMetadataValidateBeforeCall(path, properties, _callback);
        Type localVarReturnType = new TypeToken<FileStat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchFilesV3FilesFileIdUpdateProperties
     * @param fileId ID of file to update (required)
     * @param fileUpdateInput Options to update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchFilesV3FilesFileIdUpdatePropertiesCall(String fileId, FileUpdateInput fileUpdateInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileUpdateInput;

        // create path and map variables
        String localVarPath = "/files/v3/files/{fileId}"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchFilesV3FilesFileIdUpdatePropertiesValidateBeforeCall(String fileId, FileUpdateInput fileUpdateInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling patchFilesV3FilesFileIdUpdateProperties(Async)");
        }

        // verify the required parameter 'fileUpdateInput' is set
        if (fileUpdateInput == null) {
            throw new ApiException("Missing the required parameter 'fileUpdateInput' when calling patchFilesV3FilesFileIdUpdateProperties(Async)");
        }

        return patchFilesV3FilesFileIdUpdatePropertiesCall(fileId, fileUpdateInput, _callback);

    }

    /**
     * update file properties
     * Update properties of file by ID.
     * @param fileId ID of file to update (required)
     * @param fileUpdateInput Options to update. (required)
     * @return ModelFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ModelFile patchFilesV3FilesFileIdUpdateProperties(String fileId, FileUpdateInput fileUpdateInput) throws ApiException {
        ApiResponse<ModelFile> localVarResp = patchFilesV3FilesFileIdUpdatePropertiesWithHttpInfo(fileId, fileUpdateInput);
        return localVarResp.getData();
    }

    /**
     * update file properties
     * Update properties of file by ID.
     * @param fileId ID of file to update (required)
     * @param fileUpdateInput Options to update. (required)
     * @return ApiResponse&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelFile> patchFilesV3FilesFileIdUpdatePropertiesWithHttpInfo(String fileId, FileUpdateInput fileUpdateInput) throws ApiException {
        okhttp3.Call localVarCall = patchFilesV3FilesFileIdUpdatePropertiesValidateBeforeCall(fileId, fileUpdateInput, null);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * update file properties (asynchronously)
     * Update properties of file by ID.
     * @param fileId ID of file to update (required)
     * @param fileUpdateInput Options to update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchFilesV3FilesFileIdUpdatePropertiesAsync(String fileId, FileUpdateInput fileUpdateInput, final ApiCallback<ModelFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchFilesV3FilesFileIdUpdatePropertiesValidateBeforeCall(fileId, fileUpdateInput, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postFilesV3FilesImportFromUrlAsyncImportFromUrl
     * @param importFromUrlInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postFilesV3FilesImportFromUrlAsyncImportFromUrlCall(ImportFromUrlInput importFromUrlInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = importFromUrlInput;

        // create path and map variables
        String localVarPath = "/files/v3/files/import-from-url/async";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postFilesV3FilesImportFromUrlAsyncImportFromUrlValidateBeforeCall(ImportFromUrlInput importFromUrlInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'importFromUrlInput' is set
        if (importFromUrlInput == null) {
            throw new ApiException("Missing the required parameter 'importFromUrlInput' when calling postFilesV3FilesImportFromUrlAsyncImportFromUrl(Async)");
        }

        return postFilesV3FilesImportFromUrlAsyncImportFromUrlCall(importFromUrlInput, _callback);

    }

    /**
     * Import a file from a URL into the file manager.
     * Asynchronously imports the file at the given URL into the file manager.
     * @param importFromUrlInput  (required)
     * @return ImportFromUrlTaskLocator
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ImportFromUrlTaskLocator postFilesV3FilesImportFromUrlAsyncImportFromUrl(ImportFromUrlInput importFromUrlInput) throws ApiException {
        ApiResponse<ImportFromUrlTaskLocator> localVarResp = postFilesV3FilesImportFromUrlAsyncImportFromUrlWithHttpInfo(importFromUrlInput);
        return localVarResp.getData();
    }

    /**
     * Import a file from a URL into the file manager.
     * Asynchronously imports the file at the given URL into the file manager.
     * @param importFromUrlInput  (required)
     * @return ApiResponse&lt;ImportFromUrlTaskLocator&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImportFromUrlTaskLocator> postFilesV3FilesImportFromUrlAsyncImportFromUrlWithHttpInfo(ImportFromUrlInput importFromUrlInput) throws ApiException {
        okhttp3.Call localVarCall = postFilesV3FilesImportFromUrlAsyncImportFromUrlValidateBeforeCall(importFromUrlInput, null);
        Type localVarReturnType = new TypeToken<ImportFromUrlTaskLocator>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Import a file from a URL into the file manager. (asynchronously)
     * Asynchronously imports the file at the given URL into the file manager.
     * @param importFromUrlInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postFilesV3FilesImportFromUrlAsyncImportFromUrlAsync(ImportFromUrlInput importFromUrlInput, final ApiCallback<ImportFromUrlTaskLocator> _callback) throws ApiException {

        okhttp3.Call localVarCall = postFilesV3FilesImportFromUrlAsyncImportFromUrlValidateBeforeCall(importFromUrlInput, _callback);
        Type localVarReturnType = new TypeToken<ImportFromUrlTaskLocator>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postFilesV3FilesUpload
     * @param charsetHunch Character set of the uploaded file. (optional)
     * @param _file File to be uploaded. (optional)
     * @param fileName Desired name for the uploaded file. (optional)
     * @param folderId Either &#39;folderId&#39; or &#39;folderPath&#39; is required. folderId is the ID of the folder the file will be uploaded to. (optional)
     * @param folderPath Either &#39;folderPath&#39; or &#39;folderId&#39; is required. This field represents the destination folder path for the uploaded file. If a path doesn&#39;t exist, the system will try to create one. (optional)
     * @param options JSON string representing FileUploadOptions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postFilesV3FilesUploadCall(String charsetHunch, File _file, String fileName, String folderId, String folderPath, String options, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/v3/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (charsetHunch != null) {
            localVarFormParams.put("charsetHunch", charsetHunch);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (fileName != null) {
            localVarFormParams.put("fileName", fileName);
        }

        if (folderId != null) {
            localVarFormParams.put("folderId", folderId);
        }

        if (folderPath != null) {
            localVarFormParams.put("folderPath", folderPath);
        }

        if (options != null) {
            localVarFormParams.put("options", options);
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postFilesV3FilesUploadValidateBeforeCall(String charsetHunch, File _file, String fileName, String folderId, String folderPath, String options, final ApiCallback _callback) throws ApiException {
        return postFilesV3FilesUploadCall(charsetHunch, _file, fileName, folderId, folderPath, options, _callback);

    }

    /**
     * Upload file
     * Upload a single file with content specified in request body.
     * @param charsetHunch Character set of the uploaded file. (optional)
     * @param _file File to be uploaded. (optional)
     * @param fileName Desired name for the uploaded file. (optional)
     * @param folderId Either &#39;folderId&#39; or &#39;folderPath&#39; is required. folderId is the ID of the folder the file will be uploaded to. (optional)
     * @param folderPath Either &#39;folderPath&#39; or &#39;folderId&#39; is required. This field represents the destination folder path for the uploaded file. If a path doesn&#39;t exist, the system will try to create one. (optional)
     * @param options JSON string representing FileUploadOptions. (optional)
     * @return ModelFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ModelFile postFilesV3FilesUpload(String charsetHunch, File _file, String fileName, String folderId, String folderPath, String options) throws ApiException {
        ApiResponse<ModelFile> localVarResp = postFilesV3FilesUploadWithHttpInfo(charsetHunch, _file, fileName, folderId, folderPath, options);
        return localVarResp.getData();
    }

    /**
     * Upload file
     * Upload a single file with content specified in request body.
     * @param charsetHunch Character set of the uploaded file. (optional)
     * @param _file File to be uploaded. (optional)
     * @param fileName Desired name for the uploaded file. (optional)
     * @param folderId Either &#39;folderId&#39; or &#39;folderPath&#39; is required. folderId is the ID of the folder the file will be uploaded to. (optional)
     * @param folderPath Either &#39;folderPath&#39; or &#39;folderId&#39; is required. This field represents the destination folder path for the uploaded file. If a path doesn&#39;t exist, the system will try to create one. (optional)
     * @param options JSON string representing FileUploadOptions. (optional)
     * @return ApiResponse&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelFile> postFilesV3FilesUploadWithHttpInfo(String charsetHunch, File _file, String fileName, String folderId, String folderPath, String options) throws ApiException {
        okhttp3.Call localVarCall = postFilesV3FilesUploadValidateBeforeCall(charsetHunch, _file, fileName, folderId, folderPath, options, null);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload file (asynchronously)
     * Upload a single file with content specified in request body.
     * @param charsetHunch Character set of the uploaded file. (optional)
     * @param _file File to be uploaded. (optional)
     * @param fileName Desired name for the uploaded file. (optional)
     * @param folderId Either &#39;folderId&#39; or &#39;folderPath&#39; is required. folderId is the ID of the folder the file will be uploaded to. (optional)
     * @param folderPath Either &#39;folderPath&#39; or &#39;folderId&#39; is required. This field represents the destination folder path for the uploaded file. If a path doesn&#39;t exist, the system will try to create one. (optional)
     * @param options JSON string representing FileUploadOptions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postFilesV3FilesUploadAsync(String charsetHunch, File _file, String fileName, String folderId, String folderPath, String options, final ApiCallback<ModelFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = postFilesV3FilesUploadValidateBeforeCall(charsetHunch, _file, fileName, folderId, folderPath, options, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putFilesV3FilesFileIdReplace
     * @param fileId ID of the desired file. (required)
     * @param charsetHunch Character set of given file data. (optional)
     * @param _file File data that will replace existing file in the file manager. (optional)
     * @param options JSON String representing FileReplaceOptions (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putFilesV3FilesFileIdReplaceCall(String fileId, String charsetHunch, File _file, String options, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/v3/files/{fileId}"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (charsetHunch != null) {
            localVarFormParams.put("charsetHunch", charsetHunch);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (options != null) {
            localVarFormParams.put("options", options);
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putFilesV3FilesFileIdReplaceValidateBeforeCall(String fileId, String charsetHunch, File _file, String options, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling putFilesV3FilesFileIdReplace(Async)");
        }

        return putFilesV3FilesFileIdReplaceCall(fileId, charsetHunch, _file, options, _callback);

    }

    /**
     * Replace file.
     * Replace existing file data with new file data. Can be used to change image content without having to upload a new file and update all references.
     * @param fileId ID of the desired file. (required)
     * @param charsetHunch Character set of given file data. (optional)
     * @param _file File data that will replace existing file in the file manager. (optional)
     * @param options JSON String representing FileReplaceOptions (optional)
     * @return ModelFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ModelFile putFilesV3FilesFileIdReplace(String fileId, String charsetHunch, File _file, String options) throws ApiException {
        ApiResponse<ModelFile> localVarResp = putFilesV3FilesFileIdReplaceWithHttpInfo(fileId, charsetHunch, _file, options);
        return localVarResp.getData();
    }

    /**
     * Replace file.
     * Replace existing file data with new file data. Can be used to change image content without having to upload a new file and update all references.
     * @param fileId ID of the desired file. (required)
     * @param charsetHunch Character set of given file data. (optional)
     * @param _file File data that will replace existing file in the file manager. (optional)
     * @param options JSON String representing FileReplaceOptions (optional)
     * @return ApiResponse&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelFile> putFilesV3FilesFileIdReplaceWithHttpInfo(String fileId, String charsetHunch, File _file, String options) throws ApiException {
        okhttp3.Call localVarCall = putFilesV3FilesFileIdReplaceValidateBeforeCall(fileId, charsetHunch, _file, options, null);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace file. (asynchronously)
     * Replace existing file data with new file data. Can be used to change image content without having to upload a new file and update all references.
     * @param fileId ID of the desired file. (required)
     * @param charsetHunch Character set of given file data. (optional)
     * @param _file File data that will replace existing file in the file manager. (optional)
     * @param options JSON String representing FileReplaceOptions (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putFilesV3FilesFileIdReplaceAsync(String fileId, String charsetHunch, File _file, String options, final ApiCallback<ModelFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = putFilesV3FilesFileIdReplaceValidateBeforeCall(fileId, charsetHunch, _file, options, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
