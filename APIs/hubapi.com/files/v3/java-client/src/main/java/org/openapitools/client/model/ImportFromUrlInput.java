/*
 * Files Files
 * Upload and manage files.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ImportFromUrlInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:33:25.676940-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImportFromUrlInput {
  /**
   * PUBLIC_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines can index the file. PUBLIC_NOT_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines *can&#39;t* index the file. PRIVATE: File is NOT publicly accessible. Requires a signed URL to see content. Search engines *can&#39;t* index the file. 
   */
  @JsonAdapter(AccessEnum.Adapter.class)
  public enum AccessEnum {
    PUBLIC_INDEXABLE("PUBLIC_INDEXABLE"),
    
    PUBLIC_NOT_INDEXABLE("PUBLIC_NOT_INDEXABLE"),
    
    HIDDEN_INDEXABLE("HIDDEN_INDEXABLE"),
    
    HIDDEN_NOT_INDEXABLE("HIDDEN_NOT_INDEXABLE"),
    
    HIDDEN_PRIVATE("HIDDEN_PRIVATE"),
    
    PRIVATE("PRIVATE");

    private String value;

    AccessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessEnum fromValue(String value) {
      for (AccessEnum b : AccessEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccessEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCESS = "access";
  @SerializedName(SERIALIZED_NAME_ACCESS)
  private AccessEnum access;

  /**
   * ENTIRE_PORTAL: Look for a duplicate file in the entire account. EXACT_FOLDER: Look for a duplicate file in the provided folder. 
   */
  @JsonAdapter(DuplicateValidationScopeEnum.Adapter.class)
  public enum DuplicateValidationScopeEnum {
    ENTIRE_PORTAL("ENTIRE_PORTAL"),
    
    EXACT_FOLDER("EXACT_FOLDER");

    private String value;

    DuplicateValidationScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DuplicateValidationScopeEnum fromValue(String value) {
      for (DuplicateValidationScopeEnum b : DuplicateValidationScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DuplicateValidationScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DuplicateValidationScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DuplicateValidationScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DuplicateValidationScopeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DuplicateValidationScopeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DUPLICATE_VALIDATION_SCOPE = "duplicateValidationScope";
  @SerializedName(SERIALIZED_NAME_DUPLICATE_VALIDATION_SCOPE)
  private DuplicateValidationScopeEnum duplicateValidationScope;

  /**
   * NONE: Do not run any duplicate validation. REJECT: Reject the upload if a duplicate is found. RETURN_EXISTING: If a duplicate file is found, do not upload a new file and return the found duplicate instead. 
   */
  @JsonAdapter(DuplicateValidationStrategyEnum.Adapter.class)
  public enum DuplicateValidationStrategyEnum {
    NONE("NONE"),
    
    REJECT("REJECT"),
    
    RETURN_EXISTING("RETURN_EXISTING");

    private String value;

    DuplicateValidationStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DuplicateValidationStrategyEnum fromValue(String value) {
      for (DuplicateValidationStrategyEnum b : DuplicateValidationStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DuplicateValidationStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DuplicateValidationStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DuplicateValidationStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DuplicateValidationStrategyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DuplicateValidationStrategyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DUPLICATE_VALIDATION_STRATEGY = "duplicateValidationStrategy";
  @SerializedName(SERIALIZED_NAME_DUPLICATE_VALIDATION_STRATEGY)
  private DuplicateValidationStrategyEnum duplicateValidationStrategy;

  public static final String SERIALIZED_NAME_FOLDER_ID = "folderId";
  @SerializedName(SERIALIZED_NAME_FOLDER_ID)
  private String folderId;

  public static final String SERIALIZED_NAME_FOLDER_PATH = "folderPath";
  @SerializedName(SERIALIZED_NAME_FOLDER_PATH)
  private String folderPath;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OVERWRITE = "overwrite";
  @SerializedName(SERIALIZED_NAME_OVERWRITE)
  private Boolean overwrite;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private String ttl;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public ImportFromUrlInput() {
  }

  public ImportFromUrlInput access(AccessEnum access) {
    this.access = access;
    return this;
  }

  /**
   * PUBLIC_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines can index the file. PUBLIC_NOT_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines *can&#39;t* index the file. PRIVATE: File is NOT publicly accessible. Requires a signed URL to see content. Search engines *can&#39;t* index the file. 
   * @return access
   */
  @javax.annotation.Nonnull
  public AccessEnum getAccess() {
    return access;
  }

  public void setAccess(AccessEnum access) {
    this.access = access;
  }


  public ImportFromUrlInput duplicateValidationScope(DuplicateValidationScopeEnum duplicateValidationScope) {
    this.duplicateValidationScope = duplicateValidationScope;
    return this;
  }

  /**
   * ENTIRE_PORTAL: Look for a duplicate file in the entire account. EXACT_FOLDER: Look for a duplicate file in the provided folder. 
   * @return duplicateValidationScope
   */
  @javax.annotation.Nullable
  public DuplicateValidationScopeEnum getDuplicateValidationScope() {
    return duplicateValidationScope;
  }

  public void setDuplicateValidationScope(DuplicateValidationScopeEnum duplicateValidationScope) {
    this.duplicateValidationScope = duplicateValidationScope;
  }


  public ImportFromUrlInput duplicateValidationStrategy(DuplicateValidationStrategyEnum duplicateValidationStrategy) {
    this.duplicateValidationStrategy = duplicateValidationStrategy;
    return this;
  }

  /**
   * NONE: Do not run any duplicate validation. REJECT: Reject the upload if a duplicate is found. RETURN_EXISTING: If a duplicate file is found, do not upload a new file and return the found duplicate instead. 
   * @return duplicateValidationStrategy
   */
  @javax.annotation.Nullable
  public DuplicateValidationStrategyEnum getDuplicateValidationStrategy() {
    return duplicateValidationStrategy;
  }

  public void setDuplicateValidationStrategy(DuplicateValidationStrategyEnum duplicateValidationStrategy) {
    this.duplicateValidationStrategy = duplicateValidationStrategy;
  }


  public ImportFromUrlInput folderId(String folderId) {
    this.folderId = folderId;
    return this;
  }

  /**
   * One of folderId or folderPath is required. Destination folderId for the uploaded file.
   * @return folderId
   */
  @javax.annotation.Nullable
  public String getFolderId() {
    return folderId;
  }

  public void setFolderId(String folderId) {
    this.folderId = folderId;
  }


  public ImportFromUrlInput folderPath(String folderPath) {
    this.folderPath = folderPath;
    return this;
  }

  /**
   * One of folderPath or folderId is required. Destination folder path for the uploaded file. If the folder path does not exist, there will be an attempt to create the folder path.
   * @return folderPath
   */
  @javax.annotation.Nullable
  public String getFolderPath() {
    return folderPath;
  }

  public void setFolderPath(String folderPath) {
    this.folderPath = folderPath;
  }


  public ImportFromUrlInput name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name to give the resulting file in the file manager.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ImportFromUrlInput overwrite(Boolean overwrite) {
    this.overwrite = overwrite;
    return this;
  }

  /**
   * If true, will overwrite existing file if one with the same name and extension exists in the given folder. The overwritten file will be deleted and the uploaded file will take its place with a new ID. If unset or set as false, the new file&#39;s name will be updated to prevent colliding with existing file if one exists with the same path, name, and extension
   * @return overwrite
   */
  @javax.annotation.Nullable
  public Boolean getOverwrite() {
    return overwrite;
  }

  public void setOverwrite(Boolean overwrite) {
    this.overwrite = overwrite;
  }


  public ImportFromUrlInput ttl(String ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * Time to live. If specified the file will be deleted after the given time frame. If left unset, the file will exist indefinitely
   * @return ttl
   */
  @javax.annotation.Nullable
  public String getTtl() {
    return ttl;
  }

  public void setTtl(String ttl) {
    this.ttl = ttl;
  }


  public ImportFromUrlInput url(String url) {
    this.url = url;
    return this;
  }

  /**
   * URL to download the new file from.
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportFromUrlInput importFromUrlInput = (ImportFromUrlInput) o;
    return Objects.equals(this.access, importFromUrlInput.access) &&
        Objects.equals(this.duplicateValidationScope, importFromUrlInput.duplicateValidationScope) &&
        Objects.equals(this.duplicateValidationStrategy, importFromUrlInput.duplicateValidationStrategy) &&
        Objects.equals(this.folderId, importFromUrlInput.folderId) &&
        Objects.equals(this.folderPath, importFromUrlInput.folderPath) &&
        Objects.equals(this.name, importFromUrlInput.name) &&
        Objects.equals(this.overwrite, importFromUrlInput.overwrite) &&
        Objects.equals(this.ttl, importFromUrlInput.ttl) &&
        Objects.equals(this.url, importFromUrlInput.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(access, duplicateValidationScope, duplicateValidationStrategy, folderId, folderPath, name, overwrite, ttl, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportFromUrlInput {\n");
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    duplicateValidationScope: ").append(toIndentedString(duplicateValidationScope)).append("\n");
    sb.append("    duplicateValidationStrategy: ").append(toIndentedString(duplicateValidationStrategy)).append("\n");
    sb.append("    folderId: ").append(toIndentedString(folderId)).append("\n");
    sb.append("    folderPath: ").append(toIndentedString(folderPath)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    overwrite: ").append(toIndentedString(overwrite)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access");
    openapiFields.add("duplicateValidationScope");
    openapiFields.add("duplicateValidationStrategy");
    openapiFields.add("folderId");
    openapiFields.add("folderPath");
    openapiFields.add("name");
    openapiFields.add("overwrite");
    openapiFields.add("ttl");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("access");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportFromUrlInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportFromUrlInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportFromUrlInput is not found in the empty JSON string", ImportFromUrlInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportFromUrlInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportFromUrlInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImportFromUrlInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("access").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access").toString()));
      }
      // validate the required field `access`
      AccessEnum.validateJsonElement(jsonObj.get("access"));
      if ((jsonObj.get("duplicateValidationScope") != null && !jsonObj.get("duplicateValidationScope").isJsonNull()) && !jsonObj.get("duplicateValidationScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duplicateValidationScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duplicateValidationScope").toString()));
      }
      // validate the optional field `duplicateValidationScope`
      if (jsonObj.get("duplicateValidationScope") != null && !jsonObj.get("duplicateValidationScope").isJsonNull()) {
        DuplicateValidationScopeEnum.validateJsonElement(jsonObj.get("duplicateValidationScope"));
      }
      if ((jsonObj.get("duplicateValidationStrategy") != null && !jsonObj.get("duplicateValidationStrategy").isJsonNull()) && !jsonObj.get("duplicateValidationStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duplicateValidationStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duplicateValidationStrategy").toString()));
      }
      // validate the optional field `duplicateValidationStrategy`
      if (jsonObj.get("duplicateValidationStrategy") != null && !jsonObj.get("duplicateValidationStrategy").isJsonNull()) {
        DuplicateValidationStrategyEnum.validateJsonElement(jsonObj.get("duplicateValidationStrategy"));
      }
      if ((jsonObj.get("folderId") != null && !jsonObj.get("folderId").isJsonNull()) && !jsonObj.get("folderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folderId").toString()));
      }
      if ((jsonObj.get("folderPath") != null && !jsonObj.get("folderPath").isJsonNull()) && !jsonObj.get("folderPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folderPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folderPath").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("ttl") != null && !jsonObj.get("ttl").isJsonNull()) && !jsonObj.get("ttl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ttl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ttl").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportFromUrlInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportFromUrlInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportFromUrlInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportFromUrlInput.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportFromUrlInput>() {
           @Override
           public void write(JsonWriter out, ImportFromUrlInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportFromUrlInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportFromUrlInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportFromUrlInput
   * @throws IOException if the JSON string is invalid with respect to ImportFromUrlInput
   */
  public static ImportFromUrlInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportFromUrlInput.class);
  }

  /**
   * Convert an instance of ImportFromUrlInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

