/*
 * Files Files
 * Upload and manage files.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CollectionResponseFolder;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Folder;
import org.openapitools.client.model.FolderActionResponse;
import org.openapitools.client.model.FolderInput;
import org.openapitools.client.model.FolderUpdateInput;
import org.openapitools.client.model.FolderUpdateTaskLocator;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FoldersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FoldersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FoldersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteFilesV3FoldersFolderIdArchive
     * @param folderId ID of folder to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFilesV3FoldersFolderIdArchiveCall(String folderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/v3/folders/{folderId}"
            .replace("{" + "folderId" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFilesV3FoldersFolderIdArchiveValidateBeforeCall(String folderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling deleteFilesV3FoldersFolderIdArchive(Async)");
        }

        return deleteFilesV3FoldersFolderIdArchiveCall(folderId, _callback);

    }

    /**
     * Delete folder.
     * Delete folder by ID.
     * @param folderId ID of folder to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFilesV3FoldersFolderIdArchive(String folderId) throws ApiException {
        deleteFilesV3FoldersFolderIdArchiveWithHttpInfo(folderId);
    }

    /**
     * Delete folder.
     * Delete folder by ID.
     * @param folderId ID of folder to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFilesV3FoldersFolderIdArchiveWithHttpInfo(String folderId) throws ApiException {
        okhttp3.Call localVarCall = deleteFilesV3FoldersFolderIdArchiveValidateBeforeCall(folderId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete folder. (asynchronously)
     * Delete folder by ID.
     * @param folderId ID of folder to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFilesV3FoldersFolderIdArchiveAsync(String folderId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFilesV3FoldersFolderIdArchiveValidateBeforeCall(folderId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFilesV3FoldersFolderPathArchiveByPath
     * @param folderPath Path of folder to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFilesV3FoldersFolderPathArchiveByPathCall(String folderPath, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/v3/folders/{folderPath}"
            .replace("{" + "folderPath" + "}", localVarApiClient.escapeString(folderPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFilesV3FoldersFolderPathArchiveByPathValidateBeforeCall(String folderPath, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderPath' is set
        if (folderPath == null) {
            throw new ApiException("Missing the required parameter 'folderPath' when calling deleteFilesV3FoldersFolderPathArchiveByPath(Async)");
        }

        return deleteFilesV3FoldersFolderPathArchiveByPathCall(folderPath, _callback);

    }

    /**
     * Delete folder.
     * Delete folder by path.
     * @param folderPath Path of folder to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFilesV3FoldersFolderPathArchiveByPath(String folderPath) throws ApiException {
        deleteFilesV3FoldersFolderPathArchiveByPathWithHttpInfo(folderPath);
    }

    /**
     * Delete folder.
     * Delete folder by path.
     * @param folderPath Path of folder to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFilesV3FoldersFolderPathArchiveByPathWithHttpInfo(String folderPath) throws ApiException {
        okhttp3.Call localVarCall = deleteFilesV3FoldersFolderPathArchiveByPathValidateBeforeCall(folderPath, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete folder. (asynchronously)
     * Delete folder by path.
     * @param folderPath Path of folder to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFilesV3FoldersFolderPathArchiveByPathAsync(String folderPath, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFilesV3FoldersFolderPathArchiveByPathValidateBeforeCall(folderPath, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFilesV3FoldersFolderIdGetById
     * @param folderId ID of desired folder (required)
     * @param properties Properties to set on returned folder. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesV3FoldersFolderIdGetByIdCall(String folderId, List<String> properties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/v3/folders/{folderId}"
            .replace("{" + "folderId" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (properties != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "properties", properties));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilesV3FoldersFolderIdGetByIdValidateBeforeCall(String folderId, List<String> properties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling getFilesV3FoldersFolderIdGetById(Async)");
        }

        return getFilesV3FoldersFolderIdGetByIdCall(folderId, properties, _callback);

    }

    /**
     * Get folder
     * Get folder by ID
     * @param folderId ID of desired folder (required)
     * @param properties Properties to set on returned folder. (optional)
     * @return Folder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public Folder getFilesV3FoldersFolderIdGetById(String folderId, List<String> properties) throws ApiException {
        ApiResponse<Folder> localVarResp = getFilesV3FoldersFolderIdGetByIdWithHttpInfo(folderId, properties);
        return localVarResp.getData();
    }

    /**
     * Get folder
     * Get folder by ID
     * @param folderId ID of desired folder (required)
     * @param properties Properties to set on returned folder. (optional)
     * @return ApiResponse&lt;Folder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Folder> getFilesV3FoldersFolderIdGetByIdWithHttpInfo(String folderId, List<String> properties) throws ApiException {
        okhttp3.Call localVarCall = getFilesV3FoldersFolderIdGetByIdValidateBeforeCall(folderId, properties, null);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get folder (asynchronously)
     * Get folder by ID
     * @param folderId ID of desired folder (required)
     * @param properties Properties to set on returned folder. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesV3FoldersFolderIdGetByIdAsync(String folderId, List<String> properties, final ApiCallback<Folder> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilesV3FoldersFolderIdGetByIdValidateBeforeCall(folderId, properties, _callback);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFilesV3FoldersFolderPathGetByPath
     * @param folderPath Path of desired folder. (required)
     * @param properties Properties to set on returned folder. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesV3FoldersFolderPathGetByPathCall(String folderPath, List<String> properties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/v3/folders/{folderPath}"
            .replace("{" + "folderPath" + "}", localVarApiClient.escapeString(folderPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (properties != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "properties", properties));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilesV3FoldersFolderPathGetByPathValidateBeforeCall(String folderPath, List<String> properties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderPath' is set
        if (folderPath == null) {
            throw new ApiException("Missing the required parameter 'folderPath' when calling getFilesV3FoldersFolderPathGetByPath(Async)");
        }

        return getFilesV3FoldersFolderPathGetByPathCall(folderPath, properties, _callback);

    }

    /**
     * Get folder.
     * Get folder by path.
     * @param folderPath Path of desired folder. (required)
     * @param properties Properties to set on returned folder. (optional)
     * @return Folder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public Folder getFilesV3FoldersFolderPathGetByPath(String folderPath, List<String> properties) throws ApiException {
        ApiResponse<Folder> localVarResp = getFilesV3FoldersFolderPathGetByPathWithHttpInfo(folderPath, properties);
        return localVarResp.getData();
    }

    /**
     * Get folder.
     * Get folder by path.
     * @param folderPath Path of desired folder. (required)
     * @param properties Properties to set on returned folder. (optional)
     * @return ApiResponse&lt;Folder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Folder> getFilesV3FoldersFolderPathGetByPathWithHttpInfo(String folderPath, List<String> properties) throws ApiException {
        okhttp3.Call localVarCall = getFilesV3FoldersFolderPathGetByPathValidateBeforeCall(folderPath, properties, null);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get folder. (asynchronously)
     * Get folder by path.
     * @param folderPath Path of desired folder. (required)
     * @param properties Properties to set on returned folder. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesV3FoldersFolderPathGetByPathAsync(String folderPath, List<String> properties, final ApiCallback<Folder> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilesV3FoldersFolderPathGetByPathValidateBeforeCall(folderPath, properties, _callback);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFilesV3FoldersSearchDoSearch
     * @param properties Properties that should be included in the returned folders. (optional)
     * @param after The maximum offset of items for a given search is 10000. Narrow your search down if you are reaching this limit. (optional)
     * @param before  (optional)
     * @param limit Limit of results to return. Max limit is 100. (optional)
     * @param sort Sort results by given property. For example -name sorts by name field descending, name sorts by name field ascending. (optional)
     * @param id Search folder by given ID. (optional)
     * @param createdAt Search for folders with the given creation timestamp. (optional)
     * @param createdAtLte  (optional)
     * @param createdAtGte  (optional)
     * @param updatedAt Search for folder at given update timestamp. (optional)
     * @param updatedAtLte  (optional)
     * @param updatedAtGte  (optional)
     * @param name Search for folders containing the specified name. (optional)
     * @param path Search for folders by path. (optional)
     * @param parentFolderId Search for folders with the given parent folderId. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesV3FoldersSearchDoSearchCall(List<String> properties, String after, String before, Integer limit, List<String> sort, String id, OffsetDateTime createdAt, OffsetDateTime createdAtLte, OffsetDateTime createdAtGte, OffsetDateTime updatedAt, OffsetDateTime updatedAtLte, OffsetDateTime updatedAtGte, String name, String path, Long parentFolderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/v3/folders/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (properties != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "properties", properties));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sort", sort));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (createdAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt", createdAt));
        }

        if (createdAtLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAtLte", createdAtLte));
        }

        if (createdAtGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAtGte", createdAtGte));
        }

        if (updatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedAt", updatedAt));
        }

        if (updatedAtLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedAtLte", updatedAtLte));
        }

        if (updatedAtGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedAtGte", updatedAtGte));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (parentFolderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentFolderId", parentFolderId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilesV3FoldersSearchDoSearchValidateBeforeCall(List<String> properties, String after, String before, Integer limit, List<String> sort, String id, OffsetDateTime createdAt, OffsetDateTime createdAtLte, OffsetDateTime createdAtGte, OffsetDateTime updatedAt, OffsetDateTime updatedAtLte, OffsetDateTime updatedAtGte, String name, String path, Long parentFolderId, final ApiCallback _callback) throws ApiException {
        return getFilesV3FoldersSearchDoSearchCall(properties, after, before, limit, sort, id, createdAt, createdAtLte, createdAtGte, updatedAt, updatedAtLte, updatedAtGte, name, path, parentFolderId, _callback);

    }

    /**
     * Search folders
     * Search for folders. Does not contain hidden or archived folders.
     * @param properties Properties that should be included in the returned folders. (optional)
     * @param after The maximum offset of items for a given search is 10000. Narrow your search down if you are reaching this limit. (optional)
     * @param before  (optional)
     * @param limit Limit of results to return. Max limit is 100. (optional)
     * @param sort Sort results by given property. For example -name sorts by name field descending, name sorts by name field ascending. (optional)
     * @param id Search folder by given ID. (optional)
     * @param createdAt Search for folders with the given creation timestamp. (optional)
     * @param createdAtLte  (optional)
     * @param createdAtGte  (optional)
     * @param updatedAt Search for folder at given update timestamp. (optional)
     * @param updatedAtLte  (optional)
     * @param updatedAtGte  (optional)
     * @param name Search for folders containing the specified name. (optional)
     * @param path Search for folders by path. (optional)
     * @param parentFolderId Search for folders with the given parent folderId. (optional)
     * @return CollectionResponseFolder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public CollectionResponseFolder getFilesV3FoldersSearchDoSearch(List<String> properties, String after, String before, Integer limit, List<String> sort, String id, OffsetDateTime createdAt, OffsetDateTime createdAtLte, OffsetDateTime createdAtGte, OffsetDateTime updatedAt, OffsetDateTime updatedAtLte, OffsetDateTime updatedAtGte, String name, String path, Long parentFolderId) throws ApiException {
        ApiResponse<CollectionResponseFolder> localVarResp = getFilesV3FoldersSearchDoSearchWithHttpInfo(properties, after, before, limit, sort, id, createdAt, createdAtLte, createdAtGte, updatedAt, updatedAtLte, updatedAtGte, name, path, parentFolderId);
        return localVarResp.getData();
    }

    /**
     * Search folders
     * Search for folders. Does not contain hidden or archived folders.
     * @param properties Properties that should be included in the returned folders. (optional)
     * @param after The maximum offset of items for a given search is 10000. Narrow your search down if you are reaching this limit. (optional)
     * @param before  (optional)
     * @param limit Limit of results to return. Max limit is 100. (optional)
     * @param sort Sort results by given property. For example -name sorts by name field descending, name sorts by name field ascending. (optional)
     * @param id Search folder by given ID. (optional)
     * @param createdAt Search for folders with the given creation timestamp. (optional)
     * @param createdAtLte  (optional)
     * @param createdAtGte  (optional)
     * @param updatedAt Search for folder at given update timestamp. (optional)
     * @param updatedAtLte  (optional)
     * @param updatedAtGte  (optional)
     * @param name Search for folders containing the specified name. (optional)
     * @param path Search for folders by path. (optional)
     * @param parentFolderId Search for folders with the given parent folderId. (optional)
     * @return ApiResponse&lt;CollectionResponseFolder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollectionResponseFolder> getFilesV3FoldersSearchDoSearchWithHttpInfo(List<String> properties, String after, String before, Integer limit, List<String> sort, String id, OffsetDateTime createdAt, OffsetDateTime createdAtLte, OffsetDateTime createdAtGte, OffsetDateTime updatedAt, OffsetDateTime updatedAtLte, OffsetDateTime updatedAtGte, String name, String path, Long parentFolderId) throws ApiException {
        okhttp3.Call localVarCall = getFilesV3FoldersSearchDoSearchValidateBeforeCall(properties, after, before, limit, sort, id, createdAt, createdAtLte, createdAtGte, updatedAt, updatedAtLte, updatedAtGte, name, path, parentFolderId, null);
        Type localVarReturnType = new TypeToken<CollectionResponseFolder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search folders (asynchronously)
     * Search for folders. Does not contain hidden or archived folders.
     * @param properties Properties that should be included in the returned folders. (optional)
     * @param after The maximum offset of items for a given search is 10000. Narrow your search down if you are reaching this limit. (optional)
     * @param before  (optional)
     * @param limit Limit of results to return. Max limit is 100. (optional)
     * @param sort Sort results by given property. For example -name sorts by name field descending, name sorts by name field ascending. (optional)
     * @param id Search folder by given ID. (optional)
     * @param createdAt Search for folders with the given creation timestamp. (optional)
     * @param createdAtLte  (optional)
     * @param createdAtGte  (optional)
     * @param updatedAt Search for folder at given update timestamp. (optional)
     * @param updatedAtLte  (optional)
     * @param updatedAtGte  (optional)
     * @param name Search for folders containing the specified name. (optional)
     * @param path Search for folders by path. (optional)
     * @param parentFolderId Search for folders with the given parent folderId. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesV3FoldersSearchDoSearchAsync(List<String> properties, String after, String before, Integer limit, List<String> sort, String id, OffsetDateTime createdAt, OffsetDateTime createdAtLte, OffsetDateTime createdAtGte, OffsetDateTime updatedAt, OffsetDateTime updatedAtLte, OffsetDateTime updatedAtGte, String name, String path, Long parentFolderId, final ApiCallback<CollectionResponseFolder> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilesV3FoldersSearchDoSearchValidateBeforeCall(properties, after, before, limit, sort, id, createdAt, createdAtLte, createdAtGte, updatedAt, updatedAtLte, updatedAtGte, name, path, parentFolderId, _callback);
        Type localVarReturnType = new TypeToken<CollectionResponseFolder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFilesV3FoldersUpdateAsyncTasksTaskIdStatusCheckUpdateStatus
     * @param taskId TaskId of folder update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesV3FoldersUpdateAsyncTasksTaskIdStatusCheckUpdateStatusCall(String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/v3/folders/update/async/tasks/{taskId}/status"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilesV3FoldersUpdateAsyncTasksTaskIdStatusCheckUpdateStatusValidateBeforeCall(String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getFilesV3FoldersUpdateAsyncTasksTaskIdStatusCheckUpdateStatus(Async)");
        }

        return getFilesV3FoldersUpdateAsyncTasksTaskIdStatusCheckUpdateStatusCall(taskId, _callback);

    }

    /**
     * Check folder update status.
     * Check status of folder update. Folder updates happen asynchronously.
     * @param taskId TaskId of folder update (required)
     * @return FolderActionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public FolderActionResponse getFilesV3FoldersUpdateAsyncTasksTaskIdStatusCheckUpdateStatus(String taskId) throws ApiException {
        ApiResponse<FolderActionResponse> localVarResp = getFilesV3FoldersUpdateAsyncTasksTaskIdStatusCheckUpdateStatusWithHttpInfo(taskId);
        return localVarResp.getData();
    }

    /**
     * Check folder update status.
     * Check status of folder update. Folder updates happen asynchronously.
     * @param taskId TaskId of folder update (required)
     * @return ApiResponse&lt;FolderActionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FolderActionResponse> getFilesV3FoldersUpdateAsyncTasksTaskIdStatusCheckUpdateStatusWithHttpInfo(String taskId) throws ApiException {
        okhttp3.Call localVarCall = getFilesV3FoldersUpdateAsyncTasksTaskIdStatusCheckUpdateStatusValidateBeforeCall(taskId, null);
        Type localVarReturnType = new TypeToken<FolderActionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check folder update status. (asynchronously)
     * Check status of folder update. Folder updates happen asynchronously.
     * @param taskId TaskId of folder update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesV3FoldersUpdateAsyncTasksTaskIdStatusCheckUpdateStatusAsync(String taskId, final ApiCallback<FolderActionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilesV3FoldersUpdateAsyncTasksTaskIdStatusCheckUpdateStatusValidateBeforeCall(taskId, _callback);
        Type localVarReturnType = new TypeToken<FolderActionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postFilesV3FoldersCreate
     * @param folderInput Folder creation options (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postFilesV3FoldersCreateCall(FolderInput folderInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = folderInput;

        // create path and map variables
        String localVarPath = "/files/v3/folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postFilesV3FoldersCreateValidateBeforeCall(FolderInput folderInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderInput' is set
        if (folderInput == null) {
            throw new ApiException("Missing the required parameter 'folderInput' when calling postFilesV3FoldersCreate(Async)");
        }

        return postFilesV3FoldersCreateCall(folderInput, _callback);

    }

    /**
     * Create folder.
     * Creates a folder.
     * @param folderInput Folder creation options (required)
     * @return Folder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public Folder postFilesV3FoldersCreate(FolderInput folderInput) throws ApiException {
        ApiResponse<Folder> localVarResp = postFilesV3FoldersCreateWithHttpInfo(folderInput);
        return localVarResp.getData();
    }

    /**
     * Create folder.
     * Creates a folder.
     * @param folderInput Folder creation options (required)
     * @return ApiResponse&lt;Folder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Folder> postFilesV3FoldersCreateWithHttpInfo(FolderInput folderInput) throws ApiException {
        okhttp3.Call localVarCall = postFilesV3FoldersCreateValidateBeforeCall(folderInput, null);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create folder. (asynchronously)
     * Creates a folder.
     * @param folderInput Folder creation options (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postFilesV3FoldersCreateAsync(FolderInput folderInput, final ApiCallback<Folder> _callback) throws ApiException {

        okhttp3.Call localVarCall = postFilesV3FoldersCreateValidateBeforeCall(folderInput, _callback);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postFilesV3FoldersUpdateAsyncUpdateProperties
     * @param folderUpdateInput Properties to change in the folder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postFilesV3FoldersUpdateAsyncUpdatePropertiesCall(FolderUpdateInput folderUpdateInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = folderUpdateInput;

        // create path and map variables
        String localVarPath = "/files/v3/folders/update/async";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2_legacy", "private_apps_legacy" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postFilesV3FoldersUpdateAsyncUpdatePropertiesValidateBeforeCall(FolderUpdateInput folderUpdateInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderUpdateInput' is set
        if (folderUpdateInput == null) {
            throw new ApiException("Missing the required parameter 'folderUpdateInput' when calling postFilesV3FoldersUpdateAsyncUpdateProperties(Async)");
        }

        return postFilesV3FoldersUpdateAsyncUpdatePropertiesCall(folderUpdateInput, _callback);

    }

    /**
     * Update folder properties
     * Update properties of folder by given ID. This action happens asynchronously and will update all of the folder&#39;s children as well.
     * @param folderUpdateInput Properties to change in the folder (required)
     * @return FolderUpdateTaskLocator
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public FolderUpdateTaskLocator postFilesV3FoldersUpdateAsyncUpdateProperties(FolderUpdateInput folderUpdateInput) throws ApiException {
        ApiResponse<FolderUpdateTaskLocator> localVarResp = postFilesV3FoldersUpdateAsyncUpdatePropertiesWithHttpInfo(folderUpdateInput);
        return localVarResp.getData();
    }

    /**
     * Update folder properties
     * Update properties of folder by given ID. This action happens asynchronously and will update all of the folder&#39;s children as well.
     * @param folderUpdateInput Properties to change in the folder (required)
     * @return ApiResponse&lt;FolderUpdateTaskLocator&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FolderUpdateTaskLocator> postFilesV3FoldersUpdateAsyncUpdatePropertiesWithHttpInfo(FolderUpdateInput folderUpdateInput) throws ApiException {
        okhttp3.Call localVarCall = postFilesV3FoldersUpdateAsyncUpdatePropertiesValidateBeforeCall(folderUpdateInput, null);
        Type localVarReturnType = new TypeToken<FolderUpdateTaskLocator>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update folder properties (asynchronously)
     * Update properties of folder by given ID. This action happens asynchronously and will update all of the folder&#39;s children as well.
     * @param folderUpdateInput Properties to change in the folder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postFilesV3FoldersUpdateAsyncUpdatePropertiesAsync(FolderUpdateInput folderUpdateInput, final ApiCallback<FolderUpdateTaskLocator> _callback) throws ApiException {

        okhttp3.Call localVarCall = postFilesV3FoldersUpdateAsyncUpdatePropertiesValidateBeforeCall(folderUpdateInput, _callback);
        Type localVarReturnType = new TypeToken<FolderUpdateTaskLocator>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
