/**
 * Files Files
 * Upload and manage files.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFilesApi_H
#define OAI_OAIFilesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICollectionResponseFile.h"
#include "OAIError.h"
#include "OAIFile.h"
#include "OAIFileActionResponse.h"
#include "OAIFileStat.h"
#include "OAIFileUpdateInput.h"
#include "OAIHttpFileElement.h"
#include "OAIImportFromUrlInput.h"
#include "OAIImportFromUrlTaskLocator.h"
#include "OAISignedUrl.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFilesApi : public QObject {
    Q_OBJECT

public:
    OAIFilesApi(const int timeOut = 0);
    ~OAIFilesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  file_id QString [required]
    */
    virtual void delete_files_v3_files_fileIdArchive(const QString &file_id);

    /**
    * @param[in]  file_id QString [required]
    */
    virtual void delete_files_v3_files_fileId_gdprDeleteArchiveGDPR(const QString &file_id);

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  properties QList<QString> [optional]
    */
    virtual void get_files_v3_files_fileIdGetById(const QString &file_id, const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  size QString [optional]
    * @param[in]  expiration_seconds qint64 [optional]
    * @param[in]  upscale bool [optional]
    */
    virtual void get_files_v3_files_fileId_signedUrlGetSignedUrl(const QString &file_id, const ::OpenAPI::OptionalParam<QString> &size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &expiration_seconds = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<bool> &upscale = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  task_id QString [required]
    */
    virtual void get_files_v3_files_importFromUrl_async_tasks_taskId_statusCheckImport(const QString &task_id);

    /**
    * @param[in]  properties QList<QString> [optional]
    * @param[in]  after QString [optional]
    * @param[in]  before QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  id QString [optional]
    * @param[in]  created_at QDateTime [optional]
    * @param[in]  created_at_lte QDateTime [optional]
    * @param[in]  created_at_gte QDateTime [optional]
    * @param[in]  updated_at QDateTime [optional]
    * @param[in]  updated_at_lte QDateTime [optional]
    * @param[in]  updated_at_gte QDateTime [optional]
    * @param[in]  name QString [optional]
    * @param[in]  path QString [optional]
    * @param[in]  parent_folder_id qint64 [optional]
    * @param[in]  size qint64 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  encoding QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  extension QString [optional]
    * @param[in]  url QString [optional]
    * @param[in]  is_usable_in_content bool [optional]
    * @param[in]  allows_anonymous_access bool [optional]
    */
    virtual void get_files_v3_files_searchDoSearch(const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_lte = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_gte = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &updated_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &updated_at_lte = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &updated_at_gte = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &parent_folder_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &size = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extension = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_usable_in_content = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allows_anonymous_access = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  properties QList<QString> [optional]
    */
    virtual void get_files_v3_files_stat_pathGetMetadata(const QString &path, const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  oai_file_update_input OAIFileUpdateInput [required]
    */
    virtual void patch_files_v3_files_fileIdUpdateProperties(const QString &file_id, const OAIFileUpdateInput &oai_file_update_input);

    /**
    * @param[in]  charset_hunch QString [optional]
    * @param[in]  file OAIHttpFileElement [optional]
    * @param[in]  file_name QString [optional]
    * @param[in]  folder_id QString [optional]
    * @param[in]  folder_path QString [optional]
    * @param[in]  options QString [optional]
    */
    virtual void post_files_v3_filesUpload(const ::OpenAPI::OptionalParam<QString> &charset_hunch = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &file = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<QString> &file_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &folder_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &folder_path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &options = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_import_from_url_input OAIImportFromUrlInput [required]
    */
    virtual void post_files_v3_files_importFromUrl_asyncImportFromUrl(const OAIImportFromUrlInput &oai_import_from_url_input);

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  charset_hunch QString [optional]
    * @param[in]  file OAIHttpFileElement [optional]
    * @param[in]  options QString [optional]
    */
    virtual void put_files_v3_files_fileIdReplace(const QString &file_id, const ::OpenAPI::OptionalParam<QString> &charset_hunch = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &file = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<QString> &options = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void delete_files_v3_files_fileIdArchiveCallback(OAIHttpRequestWorker *worker);
    void delete_files_v3_files_fileId_gdprDeleteArchiveGDPRCallback(OAIHttpRequestWorker *worker);
    void get_files_v3_files_fileIdGetByIdCallback(OAIHttpRequestWorker *worker);
    void get_files_v3_files_fileId_signedUrlGetSignedUrlCallback(OAIHttpRequestWorker *worker);
    void get_files_v3_files_importFromUrl_async_tasks_taskId_statusCheckImportCallback(OAIHttpRequestWorker *worker);
    void get_files_v3_files_searchDoSearchCallback(OAIHttpRequestWorker *worker);
    void get_files_v3_files_stat_pathGetMetadataCallback(OAIHttpRequestWorker *worker);
    void patch_files_v3_files_fileIdUpdatePropertiesCallback(OAIHttpRequestWorker *worker);
    void post_files_v3_filesUploadCallback(OAIHttpRequestWorker *worker);
    void post_files_v3_files_importFromUrl_asyncImportFromUrlCallback(OAIHttpRequestWorker *worker);
    void put_files_v3_files_fileIdReplaceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void delete_files_v3_files_fileIdArchiveSignal();
    void delete_files_v3_files_fileId_gdprDeleteArchiveGDPRSignal();
    void get_files_v3_files_fileIdGetByIdSignal(OAIFile summary);
    void get_files_v3_files_fileId_signedUrlGetSignedUrlSignal(OAISignedUrl summary);
    void get_files_v3_files_importFromUrl_async_tasks_taskId_statusCheckImportSignal(OAIFileActionResponse summary);
    void get_files_v3_files_searchDoSearchSignal(OAICollectionResponseFile summary);
    void get_files_v3_files_stat_pathGetMetadataSignal(OAIFileStat summary);
    void patch_files_v3_files_fileIdUpdatePropertiesSignal(OAIFile summary);
    void post_files_v3_filesUploadSignal(OAIFile summary);
    void post_files_v3_files_importFromUrl_asyncImportFromUrlSignal(OAIImportFromUrlTaskLocator summary);
    void put_files_v3_files_fileIdReplaceSignal(OAIFile summary);


    void delete_files_v3_files_fileIdArchiveSignalFull(OAIHttpRequestWorker *worker);
    void delete_files_v3_files_fileId_gdprDeleteArchiveGDPRSignalFull(OAIHttpRequestWorker *worker);
    void get_files_v3_files_fileIdGetByIdSignalFull(OAIHttpRequestWorker *worker, OAIFile summary);
    void get_files_v3_files_fileId_signedUrlGetSignedUrlSignalFull(OAIHttpRequestWorker *worker, OAISignedUrl summary);
    void get_files_v3_files_importFromUrl_async_tasks_taskId_statusCheckImportSignalFull(OAIHttpRequestWorker *worker, OAIFileActionResponse summary);
    void get_files_v3_files_searchDoSearchSignalFull(OAIHttpRequestWorker *worker, OAICollectionResponseFile summary);
    void get_files_v3_files_stat_pathGetMetadataSignalFull(OAIHttpRequestWorker *worker, OAIFileStat summary);
    void patch_files_v3_files_fileIdUpdatePropertiesSignalFull(OAIHttpRequestWorker *worker, OAIFile summary);
    void post_files_v3_filesUploadSignalFull(OAIHttpRequestWorker *worker, OAIFile summary);
    void post_files_v3_files_importFromUrl_asyncImportFromUrlSignalFull(OAIHttpRequestWorker *worker, OAIImportFromUrlTaskLocator summary);
    void put_files_v3_files_fileIdReplaceSignalFull(OAIHttpRequestWorker *worker, OAIFile summary);

    Q_DECL_DEPRECATED_X("Use delete_files_v3_files_fileIdArchiveSignalError() instead")
    void delete_files_v3_files_fileIdArchiveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delete_files_v3_files_fileIdArchiveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete_files_v3_files_fileId_gdprDeleteArchiveGDPRSignalError() instead")
    void delete_files_v3_files_fileId_gdprDeleteArchiveGDPRSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delete_files_v3_files_fileId_gdprDeleteArchiveGDPRSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_files_v3_files_fileIdGetByIdSignalError() instead")
    void get_files_v3_files_fileIdGetByIdSignalE(OAIFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_files_v3_files_fileIdGetByIdSignalError(OAIFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_files_v3_files_fileId_signedUrlGetSignedUrlSignalError() instead")
    void get_files_v3_files_fileId_signedUrlGetSignedUrlSignalE(OAISignedUrl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_files_v3_files_fileId_signedUrlGetSignedUrlSignalError(OAISignedUrl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_files_v3_files_importFromUrl_async_tasks_taskId_statusCheckImportSignalError() instead")
    void get_files_v3_files_importFromUrl_async_tasks_taskId_statusCheckImportSignalE(OAIFileActionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_files_v3_files_importFromUrl_async_tasks_taskId_statusCheckImportSignalError(OAIFileActionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_files_v3_files_searchDoSearchSignalError() instead")
    void get_files_v3_files_searchDoSearchSignalE(OAICollectionResponseFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_files_v3_files_searchDoSearchSignalError(OAICollectionResponseFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_files_v3_files_stat_pathGetMetadataSignalError() instead")
    void get_files_v3_files_stat_pathGetMetadataSignalE(OAIFileStat summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_files_v3_files_stat_pathGetMetadataSignalError(OAIFileStat summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patch_files_v3_files_fileIdUpdatePropertiesSignalError() instead")
    void patch_files_v3_files_fileIdUpdatePropertiesSignalE(OAIFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patch_files_v3_files_fileIdUpdatePropertiesSignalError(OAIFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use post_files_v3_filesUploadSignalError() instead")
    void post_files_v3_filesUploadSignalE(OAIFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void post_files_v3_filesUploadSignalError(OAIFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use post_files_v3_files_importFromUrl_asyncImportFromUrlSignalError() instead")
    void post_files_v3_files_importFromUrl_asyncImportFromUrlSignalE(OAIImportFromUrlTaskLocator summary, QNetworkReply::NetworkError error_type, QString error_str);
    void post_files_v3_files_importFromUrl_asyncImportFromUrlSignalError(OAIImportFromUrlTaskLocator summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use put_files_v3_files_fileIdReplaceSignalError() instead")
    void put_files_v3_files_fileIdReplaceSignalE(OAIFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void put_files_v3_files_fileIdReplaceSignalError(OAIFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use delete_files_v3_files_fileIdArchiveSignalErrorFull() instead")
    void delete_files_v3_files_fileIdArchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delete_files_v3_files_fileIdArchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete_files_v3_files_fileId_gdprDeleteArchiveGDPRSignalErrorFull() instead")
    void delete_files_v3_files_fileId_gdprDeleteArchiveGDPRSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delete_files_v3_files_fileId_gdprDeleteArchiveGDPRSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_files_v3_files_fileIdGetByIdSignalErrorFull() instead")
    void get_files_v3_files_fileIdGetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_files_v3_files_fileIdGetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_files_v3_files_fileId_signedUrlGetSignedUrlSignalErrorFull() instead")
    void get_files_v3_files_fileId_signedUrlGetSignedUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_files_v3_files_fileId_signedUrlGetSignedUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_files_v3_files_importFromUrl_async_tasks_taskId_statusCheckImportSignalErrorFull() instead")
    void get_files_v3_files_importFromUrl_async_tasks_taskId_statusCheckImportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_files_v3_files_importFromUrl_async_tasks_taskId_statusCheckImportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_files_v3_files_searchDoSearchSignalErrorFull() instead")
    void get_files_v3_files_searchDoSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_files_v3_files_searchDoSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_files_v3_files_stat_pathGetMetadataSignalErrorFull() instead")
    void get_files_v3_files_stat_pathGetMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_files_v3_files_stat_pathGetMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patch_files_v3_files_fileIdUpdatePropertiesSignalErrorFull() instead")
    void patch_files_v3_files_fileIdUpdatePropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patch_files_v3_files_fileIdUpdatePropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use post_files_v3_filesUploadSignalErrorFull() instead")
    void post_files_v3_filesUploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void post_files_v3_filesUploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use post_files_v3_files_importFromUrl_asyncImportFromUrlSignalErrorFull() instead")
    void post_files_v3_files_importFromUrl_asyncImportFromUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void post_files_v3_files_importFromUrl_asyncImportFromUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use put_files_v3_files_fileIdReplaceSignalErrorFull() instead")
    void put_files_v3_files_fileIdReplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void put_files_v3_files_fileIdReplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
