/**
 * Files Files
 * Upload and manage files.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFile::OAIFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFile::OAIFile() {
    this->initializeModel();
}

OAIFile::~OAIFile() {}

void OAIFile::initializeModel() {

    m_access_isSet = false;
    m_access_isValid = false;

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_archived_at_isSet = false;
    m_archived_at_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_default_hosting_url_isSet = false;
    m_default_hosting_url_isValid = false;

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_extension_isSet = false;
    m_extension_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_usable_in_content_isSet = false;
    m_is_usable_in_content_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_folder_id_isSet = false;
    m_parent_folder_id_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFile::fromJsonObject(QJsonObject json) {

    m_access_isValid = ::OpenAPI::fromJsonValue(m_access, json[QString("access")]);
    m_access_isSet = !json[QString("access")].isNull() && m_access_isValid;

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_archived_at_isValid = ::OpenAPI::fromJsonValue(m_archived_at, json[QString("archivedAt")]);
    m_archived_at_isSet = !json[QString("archivedAt")].isNull() && m_archived_at_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_default_hosting_url_isValid = ::OpenAPI::fromJsonValue(m_default_hosting_url, json[QString("defaultHostingUrl")]);
    m_default_hosting_url_isSet = !json[QString("defaultHostingUrl")].isNull() && m_default_hosting_url_isValid;

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expiresAt")]);
    m_expires_at_isSet = !json[QString("expiresAt")].isNull() && m_expires_at_isValid;

    m_extension_isValid = ::OpenAPI::fromJsonValue(m_extension, json[QString("extension")]);
    m_extension_isSet = !json[QString("extension")].isNull() && m_extension_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_usable_in_content_isValid = ::OpenAPI::fromJsonValue(m_is_usable_in_content, json[QString("isUsableInContent")]);
    m_is_usable_in_content_isSet = !json[QString("isUsableInContent")].isNull() && m_is_usable_in_content_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_folder_id_isValid = ::OpenAPI::fromJsonValue(m_parent_folder_id, json[QString("parentFolderId")]);
    m_parent_folder_id_isSet = !json[QString("parentFolderId")].isNull() && m_parent_folder_id_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFile::asJsonObject() const {
    QJsonObject obj;
    if (m_access_isSet) {
        obj.insert(QString("access"), ::OpenAPI::toJsonValue(m_access));
    }
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_archived_at_isSet) {
        obj.insert(QString("archivedAt"), ::OpenAPI::toJsonValue(m_archived_at));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_default_hosting_url_isSet) {
        obj.insert(QString("defaultHostingUrl"), ::OpenAPI::toJsonValue(m_default_hosting_url));
    }
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expiresAt"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_extension_isSet) {
        obj.insert(QString("extension"), ::OpenAPI::toJsonValue(m_extension));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_usable_in_content_isSet) {
        obj.insert(QString("isUsableInContent"), ::OpenAPI::toJsonValue(m_is_usable_in_content));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_folder_id_isSet) {
        obj.insert(QString("parentFolderId"), ::OpenAPI::toJsonValue(m_parent_folder_id));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAIFile::getAccess() const {
    return m_access;
}
void OAIFile::setAccess(const QString &access) {
    m_access = access;
    m_access_isSet = true;
}

bool OAIFile::is_access_Set() const{
    return m_access_isSet;
}

bool OAIFile::is_access_Valid() const{
    return m_access_isValid;
}

bool OAIFile::isArchived() const {
    return m_archived;
}
void OAIFile::setArchived(const bool &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAIFile::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAIFile::is_archived_Valid() const{
    return m_archived_isValid;
}

QDateTime OAIFile::getArchivedAt() const {
    return m_archived_at;
}
void OAIFile::setArchivedAt(const QDateTime &archived_at) {
    m_archived_at = archived_at;
    m_archived_at_isSet = true;
}

bool OAIFile::is_archived_at_Set() const{
    return m_archived_at_isSet;
}

bool OAIFile::is_archived_at_Valid() const{
    return m_archived_at_isValid;
}

QDateTime OAIFile::getCreatedAt() const {
    return m_created_at;
}
void OAIFile::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIFile::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIFile::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIFile::getDefaultHostingUrl() const {
    return m_default_hosting_url;
}
void OAIFile::setDefaultHostingUrl(const QString &default_hosting_url) {
    m_default_hosting_url = default_hosting_url;
    m_default_hosting_url_isSet = true;
}

bool OAIFile::is_default_hosting_url_Set() const{
    return m_default_hosting_url_isSet;
}

bool OAIFile::is_default_hosting_url_Valid() const{
    return m_default_hosting_url_isValid;
}

QString OAIFile::getEncoding() const {
    return m_encoding;
}
void OAIFile::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAIFile::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAIFile::is_encoding_Valid() const{
    return m_encoding_isValid;
}

qint64 OAIFile::getExpiresAt() const {
    return m_expires_at;
}
void OAIFile::setExpiresAt(const qint64 &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIFile::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIFile::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QString OAIFile::getExtension() const {
    return m_extension;
}
void OAIFile::setExtension(const QString &extension) {
    m_extension = extension;
    m_extension_isSet = true;
}

bool OAIFile::is_extension_Set() const{
    return m_extension_isSet;
}

bool OAIFile::is_extension_Valid() const{
    return m_extension_isValid;
}

qint32 OAIFile::getHeight() const {
    return m_height;
}
void OAIFile::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIFile::is_height_Set() const{
    return m_height_isSet;
}

bool OAIFile::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIFile::getId() const {
    return m_id;
}
void OAIFile::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFile::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFile::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIFile::isIsUsableInContent() const {
    return m_is_usable_in_content;
}
void OAIFile::setIsUsableInContent(const bool &is_usable_in_content) {
    m_is_usable_in_content = is_usable_in_content;
    m_is_usable_in_content_isSet = true;
}

bool OAIFile::is_is_usable_in_content_Set() const{
    return m_is_usable_in_content_isSet;
}

bool OAIFile::is_is_usable_in_content_Valid() const{
    return m_is_usable_in_content_isValid;
}

QString OAIFile::getName() const {
    return m_name;
}
void OAIFile::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFile::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFile::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFile::getParentFolderId() const {
    return m_parent_folder_id;
}
void OAIFile::setParentFolderId(const QString &parent_folder_id) {
    m_parent_folder_id = parent_folder_id;
    m_parent_folder_id_isSet = true;
}

bool OAIFile::is_parent_folder_id_Set() const{
    return m_parent_folder_id_isSet;
}

bool OAIFile::is_parent_folder_id_Valid() const{
    return m_parent_folder_id_isValid;
}

QString OAIFile::getPath() const {
    return m_path;
}
void OAIFile::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIFile::is_path_Set() const{
    return m_path_isSet;
}

bool OAIFile::is_path_Valid() const{
    return m_path_isValid;
}

qint64 OAIFile::getSize() const {
    return m_size;
}
void OAIFile::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIFile::is_size_Set() const{
    return m_size_isSet;
}

bool OAIFile::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIFile::getType() const {
    return m_type;
}
void OAIFile::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFile::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFile::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIFile::getUpdatedAt() const {
    return m_updated_at;
}
void OAIFile::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIFile::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIFile::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIFile::getUrl() const {
    return m_url;
}
void OAIFile::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIFile::is_url_Set() const{
    return m_url_isSet;
}

bool OAIFile::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIFile::getWidth() const {
    return m_width;
}
void OAIFile::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIFile::is_width_Set() const{
    return m_width_isSet;
}

bool OAIFile::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archived_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_hosting_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_usable_in_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_folder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_isValid && m_archived_isValid && m_created_at_isValid && m_id_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
