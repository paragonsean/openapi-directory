/**
 * Files Files
 * Upload and manage files.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFolder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFolder::OAIFolder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFolder::OAIFolder() {
    this->initializeModel();
}

OAIFolder::~OAIFolder() {}

void OAIFolder::initializeModel() {

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_archived_at_isSet = false;
    m_archived_at_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_folder_id_isSet = false;
    m_parent_folder_id_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIFolder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFolder::fromJsonObject(QJsonObject json) {

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_archived_at_isValid = ::OpenAPI::fromJsonValue(m_archived_at, json[QString("archivedAt")]);
    m_archived_at_isSet = !json[QString("archivedAt")].isNull() && m_archived_at_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_folder_id_isValid = ::OpenAPI::fromJsonValue(m_parent_folder_id, json[QString("parentFolderId")]);
    m_parent_folder_id_isSet = !json[QString("parentFolderId")].isNull() && m_parent_folder_id_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIFolder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFolder::asJsonObject() const {
    QJsonObject obj;
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_archived_at_isSet) {
        obj.insert(QString("archivedAt"), ::OpenAPI::toJsonValue(m_archived_at));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_folder_id_isSet) {
        obj.insert(QString("parentFolderId"), ::OpenAPI::toJsonValue(m_parent_folder_id));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

bool OAIFolder::isArchived() const {
    return m_archived;
}
void OAIFolder::setArchived(const bool &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAIFolder::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAIFolder::is_archived_Valid() const{
    return m_archived_isValid;
}

QDateTime OAIFolder::getArchivedAt() const {
    return m_archived_at;
}
void OAIFolder::setArchivedAt(const QDateTime &archived_at) {
    m_archived_at = archived_at;
    m_archived_at_isSet = true;
}

bool OAIFolder::is_archived_at_Set() const{
    return m_archived_at_isSet;
}

bool OAIFolder::is_archived_at_Valid() const{
    return m_archived_at_isValid;
}

QDateTime OAIFolder::getCreatedAt() const {
    return m_created_at;
}
void OAIFolder::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIFolder::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIFolder::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIFolder::getId() const {
    return m_id;
}
void OAIFolder::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFolder::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFolder::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFolder::getName() const {
    return m_name;
}
void OAIFolder::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFolder::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFolder::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFolder::getParentFolderId() const {
    return m_parent_folder_id;
}
void OAIFolder::setParentFolderId(const QString &parent_folder_id) {
    m_parent_folder_id = parent_folder_id;
    m_parent_folder_id_isSet = true;
}

bool OAIFolder::is_parent_folder_id_Set() const{
    return m_parent_folder_id_isSet;
}

bool OAIFolder::is_parent_folder_id_Valid() const{
    return m_parent_folder_id_isValid;
}

QString OAIFolder::getPath() const {
    return m_path;
}
void OAIFolder::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIFolder::is_path_Set() const{
    return m_path_isSet;
}

bool OAIFolder::is_path_Valid() const{
    return m_path_isValid;
}

QDateTime OAIFolder::getUpdatedAt() const {
    return m_updated_at;
}
void OAIFolder::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIFolder::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIFolder::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIFolder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archived_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_folder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFolder::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_archived_isValid && m_created_at_isValid && m_id_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
