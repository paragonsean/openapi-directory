/**
 * Files Files
 * Upload and manage files.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISignedUrl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISignedUrl::OAISignedUrl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISignedUrl::OAISignedUrl() {
    this->initializeModel();
}

OAISignedUrl::~OAISignedUrl() {}

void OAISignedUrl::initializeModel() {

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_extension_isSet = false;
    m_extension_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAISignedUrl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISignedUrl::fromJsonObject(QJsonObject json) {

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expiresAt")]);
    m_expires_at_isSet = !json[QString("expiresAt")].isNull() && m_expires_at_isValid;

    m_extension_isValid = ::OpenAPI::fromJsonValue(m_extension, json[QString("extension")]);
    m_extension_isSet = !json[QString("extension")].isNull() && m_extension_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAISignedUrl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISignedUrl::asJsonObject() const {
    QJsonObject obj;
    if (m_expires_at_isSet) {
        obj.insert(QString("expiresAt"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_extension_isSet) {
        obj.insert(QString("extension"), ::OpenAPI::toJsonValue(m_extension));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QDateTime OAISignedUrl::getExpiresAt() const {
    return m_expires_at;
}
void OAISignedUrl::setExpiresAt(const QDateTime &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAISignedUrl::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAISignedUrl::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QString OAISignedUrl::getExtension() const {
    return m_extension;
}
void OAISignedUrl::setExtension(const QString &extension) {
    m_extension = extension;
    m_extension_isSet = true;
}

bool OAISignedUrl::is_extension_Set() const{
    return m_extension_isSet;
}

bool OAISignedUrl::is_extension_Valid() const{
    return m_extension_isValid;
}

qint32 OAISignedUrl::getHeight() const {
    return m_height;
}
void OAISignedUrl::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAISignedUrl::is_height_Set() const{
    return m_height_isSet;
}

bool OAISignedUrl::is_height_Valid() const{
    return m_height_isValid;
}

QString OAISignedUrl::getName() const {
    return m_name;
}
void OAISignedUrl::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISignedUrl::is_name_Set() const{
    return m_name_isSet;
}

bool OAISignedUrl::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAISignedUrl::getSize() const {
    return m_size;
}
void OAISignedUrl::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAISignedUrl::is_size_Set() const{
    return m_size_isSet;
}

bool OAISignedUrl::is_size_Valid() const{
    return m_size_isValid;
}

QString OAISignedUrl::getType() const {
    return m_type;
}
void OAISignedUrl::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISignedUrl::is_type_Set() const{
    return m_type_isSet;
}

bool OAISignedUrl::is_type_Valid() const{
    return m_type_isValid;
}

QString OAISignedUrl::getUrl() const {
    return m_url;
}
void OAISignedUrl::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAISignedUrl::is_url_Set() const{
    return m_url_isSet;
}

bool OAISignedUrl::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAISignedUrl::getWidth() const {
    return m_width;
}
void OAISignedUrl::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAISignedUrl::is_width_Set() const{
    return m_width_isSet;
}

bool OAISignedUrl::is_width_Valid() const{
    return m_width_isValid;
}

bool OAISignedUrl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISignedUrl::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expires_at_isValid && m_extension_isValid && m_name_isValid && m_size_isValid && m_type_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
