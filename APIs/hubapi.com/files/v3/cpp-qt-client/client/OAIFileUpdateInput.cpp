/**
 * Files Files
 * Upload and manage files.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileUpdateInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileUpdateInput::OAIFileUpdateInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileUpdateInput::OAIFileUpdateInput() {
    this->initializeModel();
}

OAIFileUpdateInput::~OAIFileUpdateInput() {}

void OAIFileUpdateInput::initializeModel() {

    m_access_isSet = false;
    m_access_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_is_usable_in_content_isSet = false;
    m_is_usable_in_content_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_folder_id_isSet = false;
    m_parent_folder_id_isValid = false;

    m_parent_folder_path_isSet = false;
    m_parent_folder_path_isValid = false;
}

void OAIFileUpdateInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileUpdateInput::fromJsonObject(QJsonObject json) {

    m_access_isValid = ::OpenAPI::fromJsonValue(m_access, json[QString("access")]);
    m_access_isSet = !json[QString("access")].isNull() && m_access_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expiresAt")]);
    m_expires_at_isSet = !json[QString("expiresAt")].isNull() && m_expires_at_isValid;

    m_is_usable_in_content_isValid = ::OpenAPI::fromJsonValue(m_is_usable_in_content, json[QString("isUsableInContent")]);
    m_is_usable_in_content_isSet = !json[QString("isUsableInContent")].isNull() && m_is_usable_in_content_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_folder_id_isValid = ::OpenAPI::fromJsonValue(m_parent_folder_id, json[QString("parentFolderId")]);
    m_parent_folder_id_isSet = !json[QString("parentFolderId")].isNull() && m_parent_folder_id_isValid;

    m_parent_folder_path_isValid = ::OpenAPI::fromJsonValue(m_parent_folder_path, json[QString("parentFolderPath")]);
    m_parent_folder_path_isSet = !json[QString("parentFolderPath")].isNull() && m_parent_folder_path_isValid;
}

QString OAIFileUpdateInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileUpdateInput::asJsonObject() const {
    QJsonObject obj;
    if (m_access_isSet) {
        obj.insert(QString("access"), ::OpenAPI::toJsonValue(m_access));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expiresAt"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_is_usable_in_content_isSet) {
        obj.insert(QString("isUsableInContent"), ::OpenAPI::toJsonValue(m_is_usable_in_content));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_folder_id_isSet) {
        obj.insert(QString("parentFolderId"), ::OpenAPI::toJsonValue(m_parent_folder_id));
    }
    if (m_parent_folder_path_isSet) {
        obj.insert(QString("parentFolderPath"), ::OpenAPI::toJsonValue(m_parent_folder_path));
    }
    return obj;
}

QString OAIFileUpdateInput::getAccess() const {
    return m_access;
}
void OAIFileUpdateInput::setAccess(const QString &access) {
    m_access = access;
    m_access_isSet = true;
}

bool OAIFileUpdateInput::is_access_Set() const{
    return m_access_isSet;
}

bool OAIFileUpdateInput::is_access_Valid() const{
    return m_access_isValid;
}

qint64 OAIFileUpdateInput::getExpiresAt() const {
    return m_expires_at;
}
void OAIFileUpdateInput::setExpiresAt(const qint64 &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIFileUpdateInput::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIFileUpdateInput::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

bool OAIFileUpdateInput::isIsUsableInContent() const {
    return m_is_usable_in_content;
}
void OAIFileUpdateInput::setIsUsableInContent(const bool &is_usable_in_content) {
    m_is_usable_in_content = is_usable_in_content;
    m_is_usable_in_content_isSet = true;
}

bool OAIFileUpdateInput::is_is_usable_in_content_Set() const{
    return m_is_usable_in_content_isSet;
}

bool OAIFileUpdateInput::is_is_usable_in_content_Valid() const{
    return m_is_usable_in_content_isValid;
}

QString OAIFileUpdateInput::getName() const {
    return m_name;
}
void OAIFileUpdateInput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFileUpdateInput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFileUpdateInput::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFileUpdateInput::getParentFolderId() const {
    return m_parent_folder_id;
}
void OAIFileUpdateInput::setParentFolderId(const QString &parent_folder_id) {
    m_parent_folder_id = parent_folder_id;
    m_parent_folder_id_isSet = true;
}

bool OAIFileUpdateInput::is_parent_folder_id_Set() const{
    return m_parent_folder_id_isSet;
}

bool OAIFileUpdateInput::is_parent_folder_id_Valid() const{
    return m_parent_folder_id_isValid;
}

QString OAIFileUpdateInput::getParentFolderPath() const {
    return m_parent_folder_path;
}
void OAIFileUpdateInput::setParentFolderPath(const QString &parent_folder_path) {
    m_parent_folder_path = parent_folder_path;
    m_parent_folder_path_isSet = true;
}

bool OAIFileUpdateInput::is_parent_folder_path_Set() const{
    return m_parent_folder_path_isSet;
}

bool OAIFileUpdateInput::is_parent_folder_path_Valid() const{
    return m_parent_folder_path_isValid;
}

bool OAIFileUpdateInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_usable_in_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_folder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_folder_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileUpdateInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
