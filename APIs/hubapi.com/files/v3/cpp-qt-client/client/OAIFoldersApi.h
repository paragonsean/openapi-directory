/**
 * Files Files
 * Upload and manage files.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFoldersApi_H
#define OAI_OAIFoldersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICollectionResponseFolder.h"
#include "OAIError.h"
#include "OAIFolder.h"
#include "OAIFolderActionResponse.h"
#include "OAIFolderInput.h"
#include "OAIFolderUpdateInput.h"
#include "OAIFolderUpdateTaskLocator.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFoldersApi : public QObject {
    Q_OBJECT

public:
    OAIFoldersApi(const int timeOut = 0);
    ~OAIFoldersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  folder_id QString [required]
    */
    virtual void delete_files_v3_folders_folderIdArchive(const QString &folder_id);

    /**
    * @param[in]  folder_path QString [required]
    */
    virtual void delete_files_v3_folders_folderPathArchiveByPath(const QString &folder_path);

    /**
    * @param[in]  folder_id QString [required]
    * @param[in]  properties QList<QString> [optional]
    */
    virtual void get_files_v3_folders_folderIdGetById(const QString &folder_id, const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  folder_path QString [required]
    * @param[in]  properties QList<QString> [optional]
    */
    virtual void get_files_v3_folders_folderPathGetByPath(const QString &folder_path, const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  properties QList<QString> [optional]
    * @param[in]  after QString [optional]
    * @param[in]  before QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  id QString [optional]
    * @param[in]  created_at QDateTime [optional]
    * @param[in]  created_at_lte QDateTime [optional]
    * @param[in]  created_at_gte QDateTime [optional]
    * @param[in]  updated_at QDateTime [optional]
    * @param[in]  updated_at_lte QDateTime [optional]
    * @param[in]  updated_at_gte QDateTime [optional]
    * @param[in]  name QString [optional]
    * @param[in]  path QString [optional]
    * @param[in]  parent_folder_id qint64 [optional]
    */
    virtual void get_files_v3_folders_searchDoSearch(const ::OpenAPI::OptionalParam<QList<QString>> &properties = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_lte = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_gte = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &updated_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &updated_at_lte = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &updated_at_gte = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &parent_folder_id = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  task_id QString [required]
    */
    virtual void get_files_v3_folders_update_async_tasks_taskId_statusCheckUpdateStatus(const QString &task_id);

    /**
    * @param[in]  oai_folder_input OAIFolderInput [required]
    */
    virtual void post_files_v3_foldersCreate(const OAIFolderInput &oai_folder_input);

    /**
    * @param[in]  oai_folder_update_input OAIFolderUpdateInput [required]
    */
    virtual void post_files_v3_folders_update_asyncUpdateProperties(const OAIFolderUpdateInput &oai_folder_update_input);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void delete_files_v3_folders_folderIdArchiveCallback(OAIHttpRequestWorker *worker);
    void delete_files_v3_folders_folderPathArchiveByPathCallback(OAIHttpRequestWorker *worker);
    void get_files_v3_folders_folderIdGetByIdCallback(OAIHttpRequestWorker *worker);
    void get_files_v3_folders_folderPathGetByPathCallback(OAIHttpRequestWorker *worker);
    void get_files_v3_folders_searchDoSearchCallback(OAIHttpRequestWorker *worker);
    void get_files_v3_folders_update_async_tasks_taskId_statusCheckUpdateStatusCallback(OAIHttpRequestWorker *worker);
    void post_files_v3_foldersCreateCallback(OAIHttpRequestWorker *worker);
    void post_files_v3_folders_update_asyncUpdatePropertiesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void delete_files_v3_folders_folderIdArchiveSignal();
    void delete_files_v3_folders_folderPathArchiveByPathSignal();
    void get_files_v3_folders_folderIdGetByIdSignal(OAIFolder summary);
    void get_files_v3_folders_folderPathGetByPathSignal(OAIFolder summary);
    void get_files_v3_folders_searchDoSearchSignal(OAICollectionResponseFolder summary);
    void get_files_v3_folders_update_async_tasks_taskId_statusCheckUpdateStatusSignal(OAIFolderActionResponse summary);
    void post_files_v3_foldersCreateSignal(OAIFolder summary);
    void post_files_v3_folders_update_asyncUpdatePropertiesSignal(OAIFolderUpdateTaskLocator summary);


    void delete_files_v3_folders_folderIdArchiveSignalFull(OAIHttpRequestWorker *worker);
    void delete_files_v3_folders_folderPathArchiveByPathSignalFull(OAIHttpRequestWorker *worker);
    void get_files_v3_folders_folderIdGetByIdSignalFull(OAIHttpRequestWorker *worker, OAIFolder summary);
    void get_files_v3_folders_folderPathGetByPathSignalFull(OAIHttpRequestWorker *worker, OAIFolder summary);
    void get_files_v3_folders_searchDoSearchSignalFull(OAIHttpRequestWorker *worker, OAICollectionResponseFolder summary);
    void get_files_v3_folders_update_async_tasks_taskId_statusCheckUpdateStatusSignalFull(OAIHttpRequestWorker *worker, OAIFolderActionResponse summary);
    void post_files_v3_foldersCreateSignalFull(OAIHttpRequestWorker *worker, OAIFolder summary);
    void post_files_v3_folders_update_asyncUpdatePropertiesSignalFull(OAIHttpRequestWorker *worker, OAIFolderUpdateTaskLocator summary);

    Q_DECL_DEPRECATED_X("Use delete_files_v3_folders_folderIdArchiveSignalError() instead")
    void delete_files_v3_folders_folderIdArchiveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delete_files_v3_folders_folderIdArchiveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete_files_v3_folders_folderPathArchiveByPathSignalError() instead")
    void delete_files_v3_folders_folderPathArchiveByPathSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delete_files_v3_folders_folderPathArchiveByPathSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_files_v3_folders_folderIdGetByIdSignalError() instead")
    void get_files_v3_folders_folderIdGetByIdSignalE(OAIFolder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_files_v3_folders_folderIdGetByIdSignalError(OAIFolder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_files_v3_folders_folderPathGetByPathSignalError() instead")
    void get_files_v3_folders_folderPathGetByPathSignalE(OAIFolder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_files_v3_folders_folderPathGetByPathSignalError(OAIFolder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_files_v3_folders_searchDoSearchSignalError() instead")
    void get_files_v3_folders_searchDoSearchSignalE(OAICollectionResponseFolder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_files_v3_folders_searchDoSearchSignalError(OAICollectionResponseFolder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_files_v3_folders_update_async_tasks_taskId_statusCheckUpdateStatusSignalError() instead")
    void get_files_v3_folders_update_async_tasks_taskId_statusCheckUpdateStatusSignalE(OAIFolderActionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_files_v3_folders_update_async_tasks_taskId_statusCheckUpdateStatusSignalError(OAIFolderActionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use post_files_v3_foldersCreateSignalError() instead")
    void post_files_v3_foldersCreateSignalE(OAIFolder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void post_files_v3_foldersCreateSignalError(OAIFolder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use post_files_v3_folders_update_asyncUpdatePropertiesSignalError() instead")
    void post_files_v3_folders_update_asyncUpdatePropertiesSignalE(OAIFolderUpdateTaskLocator summary, QNetworkReply::NetworkError error_type, QString error_str);
    void post_files_v3_folders_update_asyncUpdatePropertiesSignalError(OAIFolderUpdateTaskLocator summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use delete_files_v3_folders_folderIdArchiveSignalErrorFull() instead")
    void delete_files_v3_folders_folderIdArchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delete_files_v3_folders_folderIdArchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete_files_v3_folders_folderPathArchiveByPathSignalErrorFull() instead")
    void delete_files_v3_folders_folderPathArchiveByPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delete_files_v3_folders_folderPathArchiveByPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_files_v3_folders_folderIdGetByIdSignalErrorFull() instead")
    void get_files_v3_folders_folderIdGetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_files_v3_folders_folderIdGetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_files_v3_folders_folderPathGetByPathSignalErrorFull() instead")
    void get_files_v3_folders_folderPathGetByPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_files_v3_folders_folderPathGetByPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_files_v3_folders_searchDoSearchSignalErrorFull() instead")
    void get_files_v3_folders_searchDoSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_files_v3_folders_searchDoSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_files_v3_folders_update_async_tasks_taskId_statusCheckUpdateStatusSignalErrorFull() instead")
    void get_files_v3_folders_update_async_tasks_taskId_statusCheckUpdateStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_files_v3_folders_update_async_tasks_taskId_statusCheckUpdateStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use post_files_v3_foldersCreateSignalErrorFull() instead")
    void post_files_v3_foldersCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void post_files_v3_foldersCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use post_files_v3_folders_update_asyncUpdatePropertiesSignalErrorFull() instead")
    void post_files_v3_folders_update_asyncUpdatePropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void post_files_v3_folders_update_asyncUpdatePropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
