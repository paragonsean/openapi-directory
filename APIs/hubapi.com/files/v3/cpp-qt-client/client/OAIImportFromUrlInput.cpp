/**
 * Files Files
 * Upload and manage files.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportFromUrlInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportFromUrlInput::OAIImportFromUrlInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportFromUrlInput::OAIImportFromUrlInput() {
    this->initializeModel();
}

OAIImportFromUrlInput::~OAIImportFromUrlInput() {}

void OAIImportFromUrlInput::initializeModel() {

    m_access_isSet = false;
    m_access_isValid = false;

    m_duplicate_validation_scope_isSet = false;
    m_duplicate_validation_scope_isValid = false;

    m_duplicate_validation_strategy_isSet = false;
    m_duplicate_validation_strategy_isValid = false;

    m_folder_id_isSet = false;
    m_folder_id_isValid = false;

    m_folder_path_isSet = false;
    m_folder_path_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_overwrite_isSet = false;
    m_overwrite_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIImportFromUrlInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportFromUrlInput::fromJsonObject(QJsonObject json) {

    m_access_isValid = ::OpenAPI::fromJsonValue(m_access, json[QString("access")]);
    m_access_isSet = !json[QString("access")].isNull() && m_access_isValid;

    m_duplicate_validation_scope_isValid = ::OpenAPI::fromJsonValue(m_duplicate_validation_scope, json[QString("duplicateValidationScope")]);
    m_duplicate_validation_scope_isSet = !json[QString("duplicateValidationScope")].isNull() && m_duplicate_validation_scope_isValid;

    m_duplicate_validation_strategy_isValid = ::OpenAPI::fromJsonValue(m_duplicate_validation_strategy, json[QString("duplicateValidationStrategy")]);
    m_duplicate_validation_strategy_isSet = !json[QString("duplicateValidationStrategy")].isNull() && m_duplicate_validation_strategy_isValid;

    m_folder_id_isValid = ::OpenAPI::fromJsonValue(m_folder_id, json[QString("folderId")]);
    m_folder_id_isSet = !json[QString("folderId")].isNull() && m_folder_id_isValid;

    m_folder_path_isValid = ::OpenAPI::fromJsonValue(m_folder_path, json[QString("folderPath")]);
    m_folder_path_isSet = !json[QString("folderPath")].isNull() && m_folder_path_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_overwrite_isValid = ::OpenAPI::fromJsonValue(m_overwrite, json[QString("overwrite")]);
    m_overwrite_isSet = !json[QString("overwrite")].isNull() && m_overwrite_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIImportFromUrlInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportFromUrlInput::asJsonObject() const {
    QJsonObject obj;
    if (m_access_isSet) {
        obj.insert(QString("access"), ::OpenAPI::toJsonValue(m_access));
    }
    if (m_duplicate_validation_scope_isSet) {
        obj.insert(QString("duplicateValidationScope"), ::OpenAPI::toJsonValue(m_duplicate_validation_scope));
    }
    if (m_duplicate_validation_strategy_isSet) {
        obj.insert(QString("duplicateValidationStrategy"), ::OpenAPI::toJsonValue(m_duplicate_validation_strategy));
    }
    if (m_folder_id_isSet) {
        obj.insert(QString("folderId"), ::OpenAPI::toJsonValue(m_folder_id));
    }
    if (m_folder_path_isSet) {
        obj.insert(QString("folderPath"), ::OpenAPI::toJsonValue(m_folder_path));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_overwrite_isSet) {
        obj.insert(QString("overwrite"), ::OpenAPI::toJsonValue(m_overwrite));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIImportFromUrlInput::getAccess() const {
    return m_access;
}
void OAIImportFromUrlInput::setAccess(const QString &access) {
    m_access = access;
    m_access_isSet = true;
}

bool OAIImportFromUrlInput::is_access_Set() const{
    return m_access_isSet;
}

bool OAIImportFromUrlInput::is_access_Valid() const{
    return m_access_isValid;
}

QString OAIImportFromUrlInput::getDuplicateValidationScope() const {
    return m_duplicate_validation_scope;
}
void OAIImportFromUrlInput::setDuplicateValidationScope(const QString &duplicate_validation_scope) {
    m_duplicate_validation_scope = duplicate_validation_scope;
    m_duplicate_validation_scope_isSet = true;
}

bool OAIImportFromUrlInput::is_duplicate_validation_scope_Set() const{
    return m_duplicate_validation_scope_isSet;
}

bool OAIImportFromUrlInput::is_duplicate_validation_scope_Valid() const{
    return m_duplicate_validation_scope_isValid;
}

QString OAIImportFromUrlInput::getDuplicateValidationStrategy() const {
    return m_duplicate_validation_strategy;
}
void OAIImportFromUrlInput::setDuplicateValidationStrategy(const QString &duplicate_validation_strategy) {
    m_duplicate_validation_strategy = duplicate_validation_strategy;
    m_duplicate_validation_strategy_isSet = true;
}

bool OAIImportFromUrlInput::is_duplicate_validation_strategy_Set() const{
    return m_duplicate_validation_strategy_isSet;
}

bool OAIImportFromUrlInput::is_duplicate_validation_strategy_Valid() const{
    return m_duplicate_validation_strategy_isValid;
}

QString OAIImportFromUrlInput::getFolderId() const {
    return m_folder_id;
}
void OAIImportFromUrlInput::setFolderId(const QString &folder_id) {
    m_folder_id = folder_id;
    m_folder_id_isSet = true;
}

bool OAIImportFromUrlInput::is_folder_id_Set() const{
    return m_folder_id_isSet;
}

bool OAIImportFromUrlInput::is_folder_id_Valid() const{
    return m_folder_id_isValid;
}

QString OAIImportFromUrlInput::getFolderPath() const {
    return m_folder_path;
}
void OAIImportFromUrlInput::setFolderPath(const QString &folder_path) {
    m_folder_path = folder_path;
    m_folder_path_isSet = true;
}

bool OAIImportFromUrlInput::is_folder_path_Set() const{
    return m_folder_path_isSet;
}

bool OAIImportFromUrlInput::is_folder_path_Valid() const{
    return m_folder_path_isValid;
}

QString OAIImportFromUrlInput::getName() const {
    return m_name;
}
void OAIImportFromUrlInput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIImportFromUrlInput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIImportFromUrlInput::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIImportFromUrlInput::isOverwrite() const {
    return m_overwrite;
}
void OAIImportFromUrlInput::setOverwrite(const bool &overwrite) {
    m_overwrite = overwrite;
    m_overwrite_isSet = true;
}

bool OAIImportFromUrlInput::is_overwrite_Set() const{
    return m_overwrite_isSet;
}

bool OAIImportFromUrlInput::is_overwrite_Valid() const{
    return m_overwrite_isValid;
}

QString OAIImportFromUrlInput::getTtl() const {
    return m_ttl;
}
void OAIImportFromUrlInput::setTtl(const QString &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIImportFromUrlInput::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIImportFromUrlInput::is_ttl_Valid() const{
    return m_ttl_isValid;
}

QString OAIImportFromUrlInput::getUrl() const {
    return m_url;
}
void OAIImportFromUrlInput::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIImportFromUrlInput::is_url_Set() const{
    return m_url_isSet;
}

bool OAIImportFromUrlInput::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIImportFromUrlInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duplicate_validation_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duplicate_validation_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overwrite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportFromUrlInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
