/*
 * Ex Libris APIs
 * For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetAlmawsV1TaskListsPrintouts200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PrintoutsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PrintoutsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PrintoutsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAlmawsV1TaskListsPrintouts
     * @param letter Printout Name. Optional.  (optional, default to ALL)
     * @param status Printout status. Optional. Valid values are: Printed, Pending, Canceled. (optional, default to ALL)
     * @param printerId Printout Printer (optional, default to ALL)
     * @param printoutId A list of Printout IDs (for example: 123,456,778) from 1 to the limit of 100 Optional. Use of this option overrides all of the filtering parameters (optional, default to ALL)
     * @param limit Limits the number of results. Optional. Valid values are 0-100. Default value: 10. (optional)
     * @param offset Offset of the results returned. Optional. Default value: 0, which means that the first results will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - This method returns an object based on rest_printouts.xsd. See [here](/alma/apis/docs/xsd/rest_printouts.xsd) </td><td>  * X-Exl-Api-Remaining -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  401666|40166410 - &#39;Invalid parameter.&#39; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlmawsV1TaskListsPrintoutsCall(String letter, String status, String printerId, String printoutId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/almaws/v1/task-lists/printouts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (letter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("letter", letter));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (printerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("printer_id", printerId));
        }

        if (printoutId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("printout_id", printoutId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAlmawsV1TaskListsPrintoutsValidateBeforeCall(String letter, String status, String printerId, String printoutId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return getAlmawsV1TaskListsPrintoutsCall(letter, status, printerId, printoutId, limit, offset, _callback);

    }

    /**
     * Retrieve Printouts
     * This API returns a list of Printouts.
     * @param letter Printout Name. Optional.  (optional, default to ALL)
     * @param status Printout status. Optional. Valid values are: Printed, Pending, Canceled. (optional, default to ALL)
     * @param printerId Printout Printer (optional, default to ALL)
     * @param printoutId A list of Printout IDs (for example: 123,456,778) from 1 to the limit of 100 Optional. Use of this option overrides all of the filtering parameters (optional, default to ALL)
     * @param limit Limits the number of results. Optional. Valid values are 0-100. Default value: 10. (optional)
     * @param offset Offset of the results returned. Optional. Default value: 0, which means that the first results will be returned. (optional)
     * @return GetAlmawsV1TaskListsPrintouts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - This method returns an object based on rest_printouts.xsd. See [here](/alma/apis/docs/xsd/rest_printouts.xsd) </td><td>  * X-Exl-Api-Remaining -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  401666|40166410 - &#39;Invalid parameter.&#39; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public GetAlmawsV1TaskListsPrintouts200Response getAlmawsV1TaskListsPrintouts(String letter, String status, String printerId, String printoutId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<GetAlmawsV1TaskListsPrintouts200Response> localVarResp = getAlmawsV1TaskListsPrintoutsWithHttpInfo(letter, status, printerId, printoutId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Retrieve Printouts
     * This API returns a list of Printouts.
     * @param letter Printout Name. Optional.  (optional, default to ALL)
     * @param status Printout status. Optional. Valid values are: Printed, Pending, Canceled. (optional, default to ALL)
     * @param printerId Printout Printer (optional, default to ALL)
     * @param printoutId A list of Printout IDs (for example: 123,456,778) from 1 to the limit of 100 Optional. Use of this option overrides all of the filtering parameters (optional, default to ALL)
     * @param limit Limits the number of results. Optional. Valid values are 0-100. Default value: 10. (optional)
     * @param offset Offset of the results returned. Optional. Default value: 0, which means that the first results will be returned. (optional)
     * @return ApiResponse&lt;GetAlmawsV1TaskListsPrintouts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - This method returns an object based on rest_printouts.xsd. See [here](/alma/apis/docs/xsd/rest_printouts.xsd) </td><td>  * X-Exl-Api-Remaining -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  401666|40166410 - &#39;Invalid parameter.&#39; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAlmawsV1TaskListsPrintouts200Response> getAlmawsV1TaskListsPrintoutsWithHttpInfo(String letter, String status, String printerId, String printoutId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getAlmawsV1TaskListsPrintoutsValidateBeforeCall(letter, status, printerId, printoutId, limit, offset, null);
        Type localVarReturnType = new TypeToken<GetAlmawsV1TaskListsPrintouts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Printouts (asynchronously)
     * This API returns a list of Printouts.
     * @param letter Printout Name. Optional.  (optional, default to ALL)
     * @param status Printout status. Optional. Valid values are: Printed, Pending, Canceled. (optional, default to ALL)
     * @param printerId Printout Printer (optional, default to ALL)
     * @param printoutId A list of Printout IDs (for example: 123,456,778) from 1 to the limit of 100 Optional. Use of this option overrides all of the filtering parameters (optional, default to ALL)
     * @param limit Limits the number of results. Optional. Valid values are 0-100. Default value: 10. (optional)
     * @param offset Offset of the results returned. Optional. Default value: 0, which means that the first results will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - This method returns an object based on rest_printouts.xsd. See [here](/alma/apis/docs/xsd/rest_printouts.xsd) </td><td>  * X-Exl-Api-Remaining -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  401666|40166410 - &#39;Invalid parameter.&#39; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlmawsV1TaskListsPrintoutsAsync(String letter, String status, String printerId, String printoutId, Integer limit, Integer offset, final ApiCallback<GetAlmawsV1TaskListsPrintouts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAlmawsV1TaskListsPrintoutsValidateBeforeCall(letter, status, printerId, printoutId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<GetAlmawsV1TaskListsPrintouts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAlmawsV1TaskListsPrintoutsPrintoutId
     * @param printoutId The Printout ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - This method returns an object based on rest_printout.xsd. See [here](/alma/apis/docs/xsd/rest_printout.xsd) </td><td>  * X-Exl-Api-Remaining -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  402896 - &#39;Invalid printout ID.&#39; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlmawsV1TaskListsPrintoutsPrintoutIdCall(String printoutId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/almaws/v1/task-lists/printouts/{printout_id}"
            .replace("{" + "printout_id" + "}", localVarApiClient.escapeString(printoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAlmawsV1TaskListsPrintoutsPrintoutIdValidateBeforeCall(String printoutId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'printoutId' is set
        if (printoutId == null) {
            throw new ApiException("Missing the required parameter 'printoutId' when calling getAlmawsV1TaskListsPrintoutsPrintoutId(Async)");
        }

        return getAlmawsV1TaskListsPrintoutsPrintoutIdCall(printoutId, _callback);

    }

    /**
     * Retrieve a Printout
     * This Web service returns a Printout given a Printout ID.
     * @param printoutId The Printout ID (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - This method returns an object based on rest_printout.xsd. See [here](/alma/apis/docs/xsd/rest_printout.xsd) </td><td>  * X-Exl-Api-Remaining -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  402896 - &#39;Invalid printout ID.&#39; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getAlmawsV1TaskListsPrintoutsPrintoutId(String printoutId) throws ApiException {
        ApiResponse<Object> localVarResp = getAlmawsV1TaskListsPrintoutsPrintoutIdWithHttpInfo(printoutId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Printout
     * This Web service returns a Printout given a Printout ID.
     * @param printoutId The Printout ID (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - This method returns an object based on rest_printout.xsd. See [here](/alma/apis/docs/xsd/rest_printout.xsd) </td><td>  * X-Exl-Api-Remaining -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  402896 - &#39;Invalid printout ID.&#39; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getAlmawsV1TaskListsPrintoutsPrintoutIdWithHttpInfo(String printoutId) throws ApiException {
        okhttp3.Call localVarCall = getAlmawsV1TaskListsPrintoutsPrintoutIdValidateBeforeCall(printoutId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Printout (asynchronously)
     * This Web service returns a Printout given a Printout ID.
     * @param printoutId The Printout ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - This method returns an object based on rest_printout.xsd. See [here](/alma/apis/docs/xsd/rest_printout.xsd) </td><td>  * X-Exl-Api-Remaining -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  402896 - &#39;Invalid printout ID.&#39; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlmawsV1TaskListsPrintoutsPrintoutIdAsync(String printoutId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAlmawsV1TaskListsPrintoutsPrintoutIdValidateBeforeCall(printoutId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postAlmawsV1TaskListsPrintouts
     * @param op The operation to perform on the printout. Currently, the options are: &#39;mark_as_printed&#39;,&#39;mark_as_canceled&#39; (required)
     * @param letter Printout Name. Optional.  (optional, default to ALL)
     * @param status Printout status. Optional. Valid values are: Printed, Pending, Canceled. (optional, default to ALL)
     * @param printerId Printout Printer (optional, default to ALL)
     * @param printoutId A list of Printout IDs (for example: 123,456,778) from 1 to the limit of 100 Optional. Use of this option overrides all of the filtering parameters (optional, default to ALL)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - This method returns an object based on rest_printouts.xsd. See [here](/alma/apis/docs/xsd/rest_printouts.xsd) </td><td>  * X-Exl-Api-Remaining -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  401666|40166410 - &#39;Invalid parameter.&#39; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAlmawsV1TaskListsPrintoutsCall(String op, String letter, String status, String printerId, String printoutId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/almaws/v1/task-lists/printouts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (letter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("letter", letter));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (printerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("printer_id", printerId));
        }

        if (printoutId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("printout_id", printoutId));
        }

        if (op != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("op", op));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postAlmawsV1TaskListsPrintoutsValidateBeforeCall(String op, String letter, String status, String printerId, String printoutId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'op' is set
        if (op == null) {
            throw new ApiException("Missing the required parameter 'op' when calling postAlmawsV1TaskListsPrintouts(Async)");
        }

        return postAlmawsV1TaskListsPrintoutsCall(op, letter, status, printerId, printoutId, _callback);

    }

    /**
     * Act on Printouts
     * This API performs an action on printouts: mark as printed or canceled. 10,000 records can be handled in one requests. Only printouts which were updated will be returned.
     * @param op The operation to perform on the printout. Currently, the options are: &#39;mark_as_printed&#39;,&#39;mark_as_canceled&#39; (required)
     * @param letter Printout Name. Optional.  (optional, default to ALL)
     * @param status Printout status. Optional. Valid values are: Printed, Pending, Canceled. (optional, default to ALL)
     * @param printerId Printout Printer (optional, default to ALL)
     * @param printoutId A list of Printout IDs (for example: 123,456,778) from 1 to the limit of 100 Optional. Use of this option overrides all of the filtering parameters (optional, default to ALL)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - This method returns an object based on rest_printouts.xsd. See [here](/alma/apis/docs/xsd/rest_printouts.xsd) </td><td>  * X-Exl-Api-Remaining -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  401666|40166410 - &#39;Invalid parameter.&#39; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Object postAlmawsV1TaskListsPrintouts(String op, String letter, String status, String printerId, String printoutId) throws ApiException {
        ApiResponse<Object> localVarResp = postAlmawsV1TaskListsPrintoutsWithHttpInfo(op, letter, status, printerId, printoutId);
        return localVarResp.getData();
    }

    /**
     * Act on Printouts
     * This API performs an action on printouts: mark as printed or canceled. 10,000 records can be handled in one requests. Only printouts which were updated will be returned.
     * @param op The operation to perform on the printout. Currently, the options are: &#39;mark_as_printed&#39;,&#39;mark_as_canceled&#39; (required)
     * @param letter Printout Name. Optional.  (optional, default to ALL)
     * @param status Printout status. Optional. Valid values are: Printed, Pending, Canceled. (optional, default to ALL)
     * @param printerId Printout Printer (optional, default to ALL)
     * @param printoutId A list of Printout IDs (for example: 123,456,778) from 1 to the limit of 100 Optional. Use of this option overrides all of the filtering parameters (optional, default to ALL)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - This method returns an object based on rest_printouts.xsd. See [here](/alma/apis/docs/xsd/rest_printouts.xsd) </td><td>  * X-Exl-Api-Remaining -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  401666|40166410 - &#39;Invalid parameter.&#39; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> postAlmawsV1TaskListsPrintoutsWithHttpInfo(String op, String letter, String status, String printerId, String printoutId) throws ApiException {
        okhttp3.Call localVarCall = postAlmawsV1TaskListsPrintoutsValidateBeforeCall(op, letter, status, printerId, printoutId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Act on Printouts (asynchronously)
     * This API performs an action on printouts: mark as printed or canceled. 10,000 records can be handled in one requests. Only printouts which were updated will be returned.
     * @param op The operation to perform on the printout. Currently, the options are: &#39;mark_as_printed&#39;,&#39;mark_as_canceled&#39; (required)
     * @param letter Printout Name. Optional.  (optional, default to ALL)
     * @param status Printout status. Optional. Valid values are: Printed, Pending, Canceled. (optional, default to ALL)
     * @param printerId Printout Printer (optional, default to ALL)
     * @param printoutId A list of Printout IDs (for example: 123,456,778) from 1 to the limit of 100 Optional. Use of this option overrides all of the filtering parameters (optional, default to ALL)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - This method returns an object based on rest_printouts.xsd. See [here](/alma/apis/docs/xsd/rest_printouts.xsd) </td><td>  * X-Exl-Api-Remaining -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  401666|40166410 - &#39;Invalid parameter.&#39; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAlmawsV1TaskListsPrintoutsAsync(String op, String letter, String status, String printerId, String printoutId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = postAlmawsV1TaskListsPrintoutsValidateBeforeCall(op, letter, status, printerId, printoutId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postAlmawsV1TaskListsPrintoutsPrintoutId
     * @param printoutId The Printout ID (required)
     * @param op The operation to perform on the printout. Currently, the options are &#39;mark_as_printed&#39;,&#39;mark_as_canceled&#39; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - This method returns an object based on rest_printout.xsd. See [here](/alma/apis/docs/xsd/rest_printout.xsd) </td><td>  * X-Exl-Api-Remaining -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  402896 - &#39;Invalid printout ID.&#39;  40166410 - &#39;Invalid parameter.&#39;  40166412 - &#39;Failed to perform action.&#39; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAlmawsV1TaskListsPrintoutsPrintoutIdCall(String printoutId, String op, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/almaws/v1/task-lists/printouts/{printout_id}"
            .replace("{" + "printout_id" + "}", localVarApiClient.escapeString(printoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (op != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("op", op));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postAlmawsV1TaskListsPrintoutsPrintoutIdValidateBeforeCall(String printoutId, String op, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'printoutId' is set
        if (printoutId == null) {
            throw new ApiException("Missing the required parameter 'printoutId' when calling postAlmawsV1TaskListsPrintoutsPrintoutId(Async)");
        }

        // verify the required parameter 'op' is set
        if (op == null) {
            throw new ApiException("Missing the required parameter 'op' when calling postAlmawsV1TaskListsPrintoutsPrintoutId(Async)");
        }

        return postAlmawsV1TaskListsPrintoutsPrintoutIdCall(printoutId, op, _callback);

    }

    /**
     * Printout Service
     * This API operates on an printout. given a Printout ID.
     * @param printoutId The Printout ID (required)
     * @param op The operation to perform on the printout. Currently, the options are &#39;mark_as_printed&#39;,&#39;mark_as_canceled&#39; (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - This method returns an object based on rest_printout.xsd. See [here](/alma/apis/docs/xsd/rest_printout.xsd) </td><td>  * X-Exl-Api-Remaining -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  402896 - &#39;Invalid printout ID.&#39;  40166410 - &#39;Invalid parameter.&#39;  40166412 - &#39;Failed to perform action.&#39; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Object postAlmawsV1TaskListsPrintoutsPrintoutId(String printoutId, String op) throws ApiException {
        ApiResponse<Object> localVarResp = postAlmawsV1TaskListsPrintoutsPrintoutIdWithHttpInfo(printoutId, op);
        return localVarResp.getData();
    }

    /**
     * Printout Service
     * This API operates on an printout. given a Printout ID.
     * @param printoutId The Printout ID (required)
     * @param op The operation to perform on the printout. Currently, the options are &#39;mark_as_printed&#39;,&#39;mark_as_canceled&#39; (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - This method returns an object based on rest_printout.xsd. See [here](/alma/apis/docs/xsd/rest_printout.xsd) </td><td>  * X-Exl-Api-Remaining -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  402896 - &#39;Invalid printout ID.&#39;  40166410 - &#39;Invalid parameter.&#39;  40166412 - &#39;Failed to perform action.&#39; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> postAlmawsV1TaskListsPrintoutsPrintoutIdWithHttpInfo(String printoutId, String op) throws ApiException {
        okhttp3.Call localVarCall = postAlmawsV1TaskListsPrintoutsPrintoutIdValidateBeforeCall(printoutId, op, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Printout Service (asynchronously)
     * This API operates on an printout. given a Printout ID.
     * @param printoutId The Printout ID (required)
     * @param op The operation to perform on the printout. Currently, the options are &#39;mark_as_printed&#39;,&#39;mark_as_canceled&#39; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - This method returns an object based on rest_printout.xsd. See [here](/alma/apis/docs/xsd/rest_printout.xsd) </td><td>  * X-Exl-Api-Remaining -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  402896 - &#39;Invalid printout ID.&#39;  40166410 - &#39;Invalid parameter.&#39;  40166412 - &#39;Failed to perform action.&#39; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAlmawsV1TaskListsPrintoutsPrintoutIdAsync(String printoutId, String op, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = postAlmawsV1TaskListsPrintoutsPrintoutIdValidateBeforeCall(printoutId, op, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
