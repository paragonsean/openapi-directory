/*
 * Ex Libris APIs
 * For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetAlmawsV1TaskListsRequestedResources200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RequestedResourcesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RequestedResourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RequestedResourcesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAlmawsV1TaskListsRequestedResources
     * @param library The library of the given circulation desk or department where the resources are located. Mandatory. (required)
     * @param circDesk The circulation desk where the action is being performed. Mandatory. (required)
     * @param location The location code. Optional. (optional, default to )
     * @param orderBy The order in which to retrieve the results: location/call_number (default). (optional, default to call_number)
     * @param direction The order direction in which to retrieve the results. Optional. (optional, default to asc)
     * @param pickupInst The pickup institution. Optional. (optional, default to )
     * @param reported Show reported results: Y/N. Optional. (optional, default to )
     * @param printed Show printed results: Y/N. Optional. (optional, default to )
     * @param limit Limits the number of results. Optional. Valid values are 0-100. Default value: 10. (optional)
     * @param offset Offset of the results returned. Optional. Default value: 0, which means that the first results will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - This method returns an object based on rest_requested_resources.xsd. See [here](/alma/apis/docs/xsd/rest_requested_resources.xsd) </td><td>  * X-Exl-Api-Remaining -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  402119 - &#39;General error.&#39;  401664 - &#39;Mandatory field is missing: X.&#39;  40166414 - &#39;The parameter &#39;X&#39; is mandatory. Valid options are: Y.&#39; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlmawsV1TaskListsRequestedResourcesCall(String library, String circDesk, String location, String orderBy, String direction, String pickupInst, String reported, String printed, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/almaws/v1/task-lists/requested-resources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (library != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("library", library));
        }

        if (circDesk != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("circ_desk", circDesk));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (pickupInst != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pickup_inst", pickupInst));
        }

        if (reported != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reported", reported));
        }

        if (printed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("printed", printed));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAlmawsV1TaskListsRequestedResourcesValidateBeforeCall(String library, String circDesk, String location, String orderBy, String direction, String pickupInst, String reported, String printed, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'library' is set
        if (library == null) {
            throw new ApiException("Missing the required parameter 'library' when calling getAlmawsV1TaskListsRequestedResources(Async)");
        }

        // verify the required parameter 'circDesk' is set
        if (circDesk == null) {
            throw new ApiException("Missing the required parameter 'circDesk' when calling getAlmawsV1TaskListsRequestedResources(Async)");
        }

        return getAlmawsV1TaskListsRequestedResourcesCall(library, circDesk, location, orderBy, direction, pickupInst, reported, printed, limit, offset, _callback);

    }

    /**
     * Get Requested Resources
     * This API returns a list of requested resources to be picked from the shelf in Alma
     * @param library The library of the given circulation desk or department where the resources are located. Mandatory. (required)
     * @param circDesk The circulation desk where the action is being performed. Mandatory. (required)
     * @param location The location code. Optional. (optional, default to )
     * @param orderBy The order in which to retrieve the results: location/call_number (default). (optional, default to call_number)
     * @param direction The order direction in which to retrieve the results. Optional. (optional, default to asc)
     * @param pickupInst The pickup institution. Optional. (optional, default to )
     * @param reported Show reported results: Y/N. Optional. (optional, default to )
     * @param printed Show printed results: Y/N. Optional. (optional, default to )
     * @param limit Limits the number of results. Optional. Valid values are 0-100. Default value: 10. (optional)
     * @param offset Offset of the results returned. Optional. Default value: 0, which means that the first results will be returned. (optional)
     * @return GetAlmawsV1TaskListsRequestedResources200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - This method returns an object based on rest_requested_resources.xsd. See [here](/alma/apis/docs/xsd/rest_requested_resources.xsd) </td><td>  * X-Exl-Api-Remaining -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  402119 - &#39;General error.&#39;  401664 - &#39;Mandatory field is missing: X.&#39;  40166414 - &#39;The parameter &#39;X&#39; is mandatory. Valid options are: Y.&#39; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public GetAlmawsV1TaskListsRequestedResources200Response getAlmawsV1TaskListsRequestedResources(String library, String circDesk, String location, String orderBy, String direction, String pickupInst, String reported, String printed, Integer limit, Integer offset) throws ApiException {
        ApiResponse<GetAlmawsV1TaskListsRequestedResources200Response> localVarResp = getAlmawsV1TaskListsRequestedResourcesWithHttpInfo(library, circDesk, location, orderBy, direction, pickupInst, reported, printed, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get Requested Resources
     * This API returns a list of requested resources to be picked from the shelf in Alma
     * @param library The library of the given circulation desk or department where the resources are located. Mandatory. (required)
     * @param circDesk The circulation desk where the action is being performed. Mandatory. (required)
     * @param location The location code. Optional. (optional, default to )
     * @param orderBy The order in which to retrieve the results: location/call_number (default). (optional, default to call_number)
     * @param direction The order direction in which to retrieve the results. Optional. (optional, default to asc)
     * @param pickupInst The pickup institution. Optional. (optional, default to )
     * @param reported Show reported results: Y/N. Optional. (optional, default to )
     * @param printed Show printed results: Y/N. Optional. (optional, default to )
     * @param limit Limits the number of results. Optional. Valid values are 0-100. Default value: 10. (optional)
     * @param offset Offset of the results returned. Optional. Default value: 0, which means that the first results will be returned. (optional)
     * @return ApiResponse&lt;GetAlmawsV1TaskListsRequestedResources200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - This method returns an object based on rest_requested_resources.xsd. See [here](/alma/apis/docs/xsd/rest_requested_resources.xsd) </td><td>  * X-Exl-Api-Remaining -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  402119 - &#39;General error.&#39;  401664 - &#39;Mandatory field is missing: X.&#39;  40166414 - &#39;The parameter &#39;X&#39; is mandatory. Valid options are: Y.&#39; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAlmawsV1TaskListsRequestedResources200Response> getAlmawsV1TaskListsRequestedResourcesWithHttpInfo(String library, String circDesk, String location, String orderBy, String direction, String pickupInst, String reported, String printed, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getAlmawsV1TaskListsRequestedResourcesValidateBeforeCall(library, circDesk, location, orderBy, direction, pickupInst, reported, printed, limit, offset, null);
        Type localVarReturnType = new TypeToken<GetAlmawsV1TaskListsRequestedResources200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Requested Resources (asynchronously)
     * This API returns a list of requested resources to be picked from the shelf in Alma
     * @param library The library of the given circulation desk or department where the resources are located. Mandatory. (required)
     * @param circDesk The circulation desk where the action is being performed. Mandatory. (required)
     * @param location The location code. Optional. (optional, default to )
     * @param orderBy The order in which to retrieve the results: location/call_number (default). (optional, default to call_number)
     * @param direction The order direction in which to retrieve the results. Optional. (optional, default to asc)
     * @param pickupInst The pickup institution. Optional. (optional, default to )
     * @param reported Show reported results: Y/N. Optional. (optional, default to )
     * @param printed Show printed results: Y/N. Optional. (optional, default to )
     * @param limit Limits the number of results. Optional. Valid values are 0-100. Default value: 10. (optional)
     * @param offset Offset of the results returned. Optional. Default value: 0, which means that the first results will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - This method returns an object based on rest_requested_resources.xsd. See [here](/alma/apis/docs/xsd/rest_requested_resources.xsd) </td><td>  * X-Exl-Api-Remaining -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  402119 - &#39;General error.&#39;  401664 - &#39;Mandatory field is missing: X.&#39;  40166414 - &#39;The parameter &#39;X&#39; is mandatory. Valid options are: Y.&#39; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlmawsV1TaskListsRequestedResourcesAsync(String library, String circDesk, String location, String orderBy, String direction, String pickupInst, String reported, String printed, Integer limit, Integer offset, final ApiCallback<GetAlmawsV1TaskListsRequestedResources200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAlmawsV1TaskListsRequestedResourcesValidateBeforeCall(library, circDesk, location, orderBy, direction, pickupInst, reported, printed, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<GetAlmawsV1TaskListsRequestedResources200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postAlmawsV1TaskListsRequestedResources
     * @param library The library of the given circulation desk or department where the resources are located. Mandatory. (optional, default to )
     * @param circDesk The circulation desk where the action is being performed. Mandatory. (optional, default to )
     * @param op Operation to be preformed on the list of given requests. Currently the only supported action is &#39;mark_reported&#39;. Mandatory. (optional, default to )
     * @param location The location code. Optional. (optional, default to )
     * @param pickupInst The pickup institution. Optional. (optional, default to )
     * @param reported Show reported results: Y/N. Optional. (optional, default to )
     * @param printed Show printed results: Y/N. Optional. (optional, default to )
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - This method returns an object based on rest_requested_resources.xsd. See [here](/alma/apis/docs/xsd/rest_requested_resources.xsd) </td><td>  * X-Exl-Api-Remaining -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  402119 - &#39;General error.&#39;  401664 - &#39;Mandatory field is missing: X.&#39;  40166414 - &#39;The parameter &#39;X&#39; is mandatory. Valid options are: Y.&#39; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAlmawsV1TaskListsRequestedResourcesCall(String library, String circDesk, String op, String location, String pickupInst, String reported, String printed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/almaws/v1/task-lists/requested-resources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (library != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("library", library));
        }

        if (circDesk != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("circ_desk", circDesk));
        }

        if (op != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("op", op));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (pickupInst != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pickup_inst", pickupInst));
        }

        if (reported != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reported", reported));
        }

        if (printed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("printed", printed));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postAlmawsV1TaskListsRequestedResourcesValidateBeforeCall(String library, String circDesk, String op, String location, String pickupInst, String reported, String printed, final ApiCallback _callback) throws ApiException {
        return postAlmawsV1TaskListsRequestedResourcesCall(library, circDesk, op, location, pickupInst, reported, printed, _callback);

    }

    /**
     * Act on Requested Resources
     * This API performs an action on requested resources that are on the shelf in Alma
     * @param library The library of the given circulation desk or department where the resources are located. Mandatory. (optional, default to )
     * @param circDesk The circulation desk where the action is being performed. Mandatory. (optional, default to )
     * @param op Operation to be preformed on the list of given requests. Currently the only supported action is &#39;mark_reported&#39;. Mandatory. (optional, default to )
     * @param location The location code. Optional. (optional, default to )
     * @param pickupInst The pickup institution. Optional. (optional, default to )
     * @param reported Show reported results: Y/N. Optional. (optional, default to )
     * @param printed Show printed results: Y/N. Optional. (optional, default to )
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - This method returns an object based on rest_requested_resources.xsd. See [here](/alma/apis/docs/xsd/rest_requested_resources.xsd) </td><td>  * X-Exl-Api-Remaining -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  402119 - &#39;General error.&#39;  401664 - &#39;Mandatory field is missing: X.&#39;  40166414 - &#39;The parameter &#39;X&#39; is mandatory. Valid options are: Y.&#39; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Object postAlmawsV1TaskListsRequestedResources(String library, String circDesk, String op, String location, String pickupInst, String reported, String printed) throws ApiException {
        ApiResponse<Object> localVarResp = postAlmawsV1TaskListsRequestedResourcesWithHttpInfo(library, circDesk, op, location, pickupInst, reported, printed);
        return localVarResp.getData();
    }

    /**
     * Act on Requested Resources
     * This API performs an action on requested resources that are on the shelf in Alma
     * @param library The library of the given circulation desk or department where the resources are located. Mandatory. (optional, default to )
     * @param circDesk The circulation desk where the action is being performed. Mandatory. (optional, default to )
     * @param op Operation to be preformed on the list of given requests. Currently the only supported action is &#39;mark_reported&#39;. Mandatory. (optional, default to )
     * @param location The location code. Optional. (optional, default to )
     * @param pickupInst The pickup institution. Optional. (optional, default to )
     * @param reported Show reported results: Y/N. Optional. (optional, default to )
     * @param printed Show printed results: Y/N. Optional. (optional, default to )
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - This method returns an object based on rest_requested_resources.xsd. See [here](/alma/apis/docs/xsd/rest_requested_resources.xsd) </td><td>  * X-Exl-Api-Remaining -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  402119 - &#39;General error.&#39;  401664 - &#39;Mandatory field is missing: X.&#39;  40166414 - &#39;The parameter &#39;X&#39; is mandatory. Valid options are: Y.&#39; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> postAlmawsV1TaskListsRequestedResourcesWithHttpInfo(String library, String circDesk, String op, String location, String pickupInst, String reported, String printed) throws ApiException {
        okhttp3.Call localVarCall = postAlmawsV1TaskListsRequestedResourcesValidateBeforeCall(library, circDesk, op, location, pickupInst, reported, printed, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Act on Requested Resources (asynchronously)
     * This API performs an action on requested resources that are on the shelf in Alma
     * @param library The library of the given circulation desk or department where the resources are located. Mandatory. (optional, default to )
     * @param circDesk The circulation desk where the action is being performed. Mandatory. (optional, default to )
     * @param op Operation to be preformed on the list of given requests. Currently the only supported action is &#39;mark_reported&#39;. Mandatory. (optional, default to )
     * @param location The location code. Optional. (optional, default to )
     * @param pickupInst The pickup institution. Optional. (optional, default to )
     * @param reported Show reported results: Y/N. Optional. (optional, default to )
     * @param printed Show printed results: Y/N. Optional. (optional, default to )
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - This method returns an object based on rest_requested_resources.xsd. See [here](/alma/apis/docs/xsd/rest_requested_resources.xsd) </td><td>  * X-Exl-Api-Remaining -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request  402119 - &#39;General error.&#39;  401664 - &#39;Mandatory field is missing: X.&#39;  40166414 - &#39;The parameter &#39;X&#39; is mandatory. Valid options are: Y.&#39; </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAlmawsV1TaskListsRequestedResourcesAsync(String library, String circDesk, String op, String location, String pickupInst, String reported, String printed, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = postAlmawsV1TaskListsRequestedResourcesValidateBeforeCall(library, circDesk, op, location, pickupInst, reported, printed, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
