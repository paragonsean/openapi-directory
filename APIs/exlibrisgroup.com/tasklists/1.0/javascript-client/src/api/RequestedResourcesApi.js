/**
 * Ex Libris APIs
 * For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetAlmawsV1TaskListsRequestedResources200Response from '../model/GetAlmawsV1TaskListsRequestedResources200Response';

/**
* RequestedResources service.
* @module api/RequestedResourcesApi
* @version 1.0
*/
export default class RequestedResourcesApi {

    /**
    * Constructs a new RequestedResourcesApi. 
    * @alias module:api/RequestedResourcesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAlmawsV1TaskListsRequestedResources operation.
     * @callback module:api/RequestedResourcesApi~getAlmawsV1TaskListsRequestedResourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAlmawsV1TaskListsRequestedResources200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Requested Resources
     * This API returns a list of requested resources to be picked from the shelf in Alma
     * @param {String} library The library of the given circulation desk or department where the resources are located. Mandatory.
     * @param {String} circDesk The circulation desk where the action is being performed. Mandatory.
     * @param {Object} opts Optional parameters
     * @param {String} [location = '')] The location code. Optional.
     * @param {String} [orderBy = 'call_number')] The order in which to retrieve the results: location/call_number (default).
     * @param {String} [direction = 'asc')] The order direction in which to retrieve the results. Optional.
     * @param {String} [pickupInst = '')] The pickup institution. Optional.
     * @param {String} [reported = '')] Show reported results: Y/N. Optional.
     * @param {String} [printed = '')] Show printed results: Y/N. Optional.
     * @param {Number} [limit] Limits the number of results. Optional. Valid values are 0-100. Default value: 10.
     * @param {Number} [offset] Offset of the results returned. Optional. Default value: 0, which means that the first results will be returned.
     * @param {module:api/RequestedResourcesApi~getAlmawsV1TaskListsRequestedResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAlmawsV1TaskListsRequestedResources200Response}
     */
    getAlmawsV1TaskListsRequestedResources(library, circDesk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'library' is set
      if (library === undefined || library === null) {
        throw new Error("Missing the required parameter 'library' when calling getAlmawsV1TaskListsRequestedResources");
      }
      // verify the required parameter 'circDesk' is set
      if (circDesk === undefined || circDesk === null) {
        throw new Error("Missing the required parameter 'circDesk' when calling getAlmawsV1TaskListsRequestedResources");
      }

      let pathParams = {
      };
      let queryParams = {
        'library': library,
        'circ_desk': circDesk,
        'location': opts['location'],
        'order_by': opts['orderBy'],
        'direction': opts['direction'],
        'pickup_inst': opts['pickupInst'],
        'reported': opts['reported'],
        'printed': opts['printed'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = GetAlmawsV1TaskListsRequestedResources200Response;
      return this.apiClient.callApi(
        '/almaws/v1/task-lists/requested-resources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAlmawsV1TaskListsRequestedResources operation.
     * @callback module:api/RequestedResourcesApi~postAlmawsV1TaskListsRequestedResourcesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Act on Requested Resources
     * This API performs an action on requested resources that are on the shelf in Alma
     * @param {Object} opts Optional parameters
     * @param {String} [library = '')] The library of the given circulation desk or department where the resources are located. Mandatory.
     * @param {String} [circDesk = '')] The circulation desk where the action is being performed. Mandatory.
     * @param {String} [op = '')] Operation to be preformed on the list of given requests. Currently the only supported action is 'mark_reported'. Mandatory.
     * @param {String} [location = '')] The location code. Optional.
     * @param {String} [pickupInst = '')] The pickup institution. Optional.
     * @param {String} [reported = '')] Show reported results: Y/N. Optional.
     * @param {String} [printed = '')] Show printed results: Y/N. Optional.
     * @param {module:api/RequestedResourcesApi~postAlmawsV1TaskListsRequestedResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    postAlmawsV1TaskListsRequestedResources(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'library': opts['library'],
        'circ_desk': opts['circDesk'],
        'op': opts['op'],
        'location': opts['location'],
        'pickup_inst': opts['pickupInst'],
        'reported': opts['reported'],
        'printed': opts['printed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/almaws/v1/task-lists/requested-resources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
