/**
 * Ex Libris APIs
 * For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRequestedResourcesApi_H
#define OAI_OAIRequestedResourcesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGet_almaws_v1_task_lists_requested_resources_200_response.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRequestedResourcesApi : public QObject {
    Q_OBJECT

public:
    OAIRequestedResourcesApi(const int timeOut = 0);
    ~OAIRequestedResourcesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  library QString [required]
    * @param[in]  circ_desk QString [required]
    * @param[in]  location QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  pickup_inst QString [optional]
    * @param[in]  reported QString [optional]
    * @param[in]  printed QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void get_almaws_v1_taskLists_requestedResources(const QString &library, const QString &circ_desk, const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pickup_inst = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reported = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &printed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  library QString [optional]
    * @param[in]  circ_desk QString [optional]
    * @param[in]  op QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  pickup_inst QString [optional]
    * @param[in]  reported QString [optional]
    * @param[in]  printed QString [optional]
    */
    virtual void post_almaws_v1_taskLists_requestedResources(const ::OpenAPI::OptionalParam<QString> &library = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &circ_desk = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &op = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pickup_inst = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reported = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &printed = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void get_almaws_v1_taskLists_requestedResourcesCallback(OAIHttpRequestWorker *worker);
    void post_almaws_v1_taskLists_requestedResourcesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void get_almaws_v1_taskLists_requestedResourcesSignal(OAIGet_almaws_v1_task_lists_requested_resources_200_response summary);
    void post_almaws_v1_taskLists_requestedResourcesSignal(OAIObject summary);


    void get_almaws_v1_taskLists_requestedResourcesSignalFull(OAIHttpRequestWorker *worker, OAIGet_almaws_v1_task_lists_requested_resources_200_response summary);
    void post_almaws_v1_taskLists_requestedResourcesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use get_almaws_v1_taskLists_requestedResourcesSignalError() instead")
    void get_almaws_v1_taskLists_requestedResourcesSignalE(OAIGet_almaws_v1_task_lists_requested_resources_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_almaws_v1_taskLists_requestedResourcesSignalError(OAIGet_almaws_v1_task_lists_requested_resources_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use post_almaws_v1_taskLists_requestedResourcesSignalError() instead")
    void post_almaws_v1_taskLists_requestedResourcesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void post_almaws_v1_taskLists_requestedResourcesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use get_almaws_v1_taskLists_requestedResourcesSignalErrorFull() instead")
    void get_almaws_v1_taskLists_requestedResourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_almaws_v1_taskLists_requestedResourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use post_almaws_v1_taskLists_requestedResourcesSignalErrorFull() instead")
    void post_almaws_v1_taskLists_requestedResourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void post_almaws_v1_taskLists_requestedResourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
