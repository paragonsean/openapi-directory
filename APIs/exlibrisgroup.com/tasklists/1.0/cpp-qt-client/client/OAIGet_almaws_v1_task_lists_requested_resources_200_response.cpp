/**
 * Ex Libris APIs
 * For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_almaws_v1_task_lists_requested_resources_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_almaws_v1_task_lists_requested_resources_200_response::OAIGet_almaws_v1_task_lists_requested_resources_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_almaws_v1_task_lists_requested_resources_200_response::OAIGet_almaws_v1_task_lists_requested_resources_200_response() {
    this->initializeModel();
}

OAIGet_almaws_v1_task_lists_requested_resources_200_response::~OAIGet_almaws_v1_task_lists_requested_resources_200_response() {}

void OAIGet_almaws_v1_task_lists_requested_resources_200_response::initializeModel() {

    m_requested_resource_isSet = false;
    m_requested_resource_isValid = false;

    m_total_record_count_isSet = false;
    m_total_record_count_isValid = false;
}

void OAIGet_almaws_v1_task_lists_requested_resources_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_almaws_v1_task_lists_requested_resources_200_response::fromJsonObject(QJsonObject json) {

    m_requested_resource_isValid = ::OpenAPI::fromJsonValue(m_requested_resource, json[QString("requested_resource")]);
    m_requested_resource_isSet = !json[QString("requested_resource")].isNull() && m_requested_resource_isValid;

    m_total_record_count_isValid = ::OpenAPI::fromJsonValue(m_total_record_count, json[QString("total_record_count")]);
    m_total_record_count_isSet = !json[QString("total_record_count")].isNull() && m_total_record_count_isValid;
}

QString OAIGet_almaws_v1_task_lists_requested_resources_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_almaws_v1_task_lists_requested_resources_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_requested_resource.size() > 0) {
        obj.insert(QString("requested_resource"), ::OpenAPI::toJsonValue(m_requested_resource));
    }
    if (m_total_record_count_isSet) {
        obj.insert(QString("total_record_count"), ::OpenAPI::toJsonValue(m_total_record_count));
    }
    return obj;
}

QList<OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner> OAIGet_almaws_v1_task_lists_requested_resources_200_response::getRequestedResource() const {
    return m_requested_resource;
}
void OAIGet_almaws_v1_task_lists_requested_resources_200_response::setRequestedResource(const QList<OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner> &requested_resource) {
    m_requested_resource = requested_resource;
    m_requested_resource_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response::is_requested_resource_Set() const{
    return m_requested_resource_isSet;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response::is_requested_resource_Valid() const{
    return m_requested_resource_isValid;
}

qint32 OAIGet_almaws_v1_task_lists_requested_resources_200_response::getTotalRecordCount() const {
    return m_total_record_count;
}
void OAIGet_almaws_v1_task_lists_requested_resources_200_response::setTotalRecordCount(const qint32 &total_record_count) {
    m_total_record_count = total_record_count;
    m_total_record_count_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response::is_total_record_count_Set() const{
    return m_total_record_count_isSet;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response::is_total_record_count_Valid() const{
    return m_total_record_count_isValid;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_requested_resource.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_record_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
