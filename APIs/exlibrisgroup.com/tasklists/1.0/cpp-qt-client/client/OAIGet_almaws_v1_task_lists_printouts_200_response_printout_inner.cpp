/**
 * Ex Libris APIs
 * For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner() {
    this->initializeModel();
}

OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::~OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner() {}

void OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_letter_isSet = false;
    m_letter_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_printer_isSet = false;
    m_printer_isValid = false;

    m_printout_isSet = false;
    m_printout_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_letter_isValid = ::OpenAPI::fromJsonValue(m_letter, json[QString("letter")]);
    m_letter_isSet = !json[QString("letter")].isNull() && m_letter_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_printer_isValid = ::OpenAPI::fromJsonValue(m_printer, json[QString("printer")]);
    m_printer_isSet = !json[QString("printer")].isNull() && m_printer_isValid;

    m_printout_isValid = ::OpenAPI::fromJsonValue(m_printout, json[QString("printout")]);
    m_printout_isSet = !json[QString("printout")].isNull() && m_printout_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_letter_isSet) {
        obj.insert(QString("letter"), ::OpenAPI::toJsonValue(m_letter));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_printer.isSet()) {
        obj.insert(QString("printer"), ::OpenAPI::toJsonValue(m_printer));
    }
    if (m_printout_isSet) {
        obj.insert(QString("printout"), ::OpenAPI::toJsonValue(m_printout));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QDateTime OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::getDate() const {
    return m_date;
}
void OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::is_date_Set() const{
    return m_date_isSet;
}

bool OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::getId() const {
    return m_id;
}
void OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::getLetter() const {
    return m_letter;
}
void OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::setLetter(const QString &letter) {
    m_letter = letter;
    m_letter_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::is_letter_Set() const{
    return m_letter_isSet;
}

bool OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::is_letter_Valid() const{
    return m_letter_isValid;
}

QString OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::getLink() const {
    return m_link;
}
void OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::is_link_Set() const{
    return m_link_isSet;
}

bool OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::is_link_Valid() const{
    return m_link_isValid;
}

OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner_printer OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::getPrinter() const {
    return m_printer;
}
void OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::setPrinter(const OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner_printer &printer) {
    m_printer = printer;
    m_printer_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::is_printer_Set() const{
    return m_printer_isSet;
}

bool OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::is_printer_Valid() const{
    return m_printer_isValid;
}

QString OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::getPrintout() const {
    return m_printout;
}
void OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::setPrintout(const QString &printout) {
    m_printout = printout;
    m_printout_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::is_printout_Set() const{
    return m_printout_isSet;
}

bool OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::is_printout_Valid() const{
    return m_printout_isValid;
}

QString OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::getSize() const {
    return m_size;
}
void OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::is_size_Set() const{
    return m_size_isSet;
}

bool OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::getSource() const {
    return m_source;
}
void OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::is_source_Set() const{
    return m_source_isSet;
}

bool OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::is_source_Valid() const{
    return m_source_isValid;
}

OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner_status OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::getStatus() const {
    return m_status;
}
void OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::setStatus(const OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_letter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_printer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_printout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_almaws_v1_task_lists_printouts_200_response_printout_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
