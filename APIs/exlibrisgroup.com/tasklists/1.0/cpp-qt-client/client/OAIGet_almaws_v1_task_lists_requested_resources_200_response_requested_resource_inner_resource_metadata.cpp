/**
 * Ex Libris APIs
 * For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata() {
    this->initializeModel();
}

OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::~OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata() {}

void OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_isbn_isSet = false;
    m_isbn_isValid = false;

    m_issn_isSet = false;
    m_issn_isValid = false;

    m_mms_id_isSet = false;
    m_mms_id_isValid = false;

    m_publication_place_isSet = false;
    m_publication_place_isValid = false;

    m_publication_year_isSet = false;
    m_publication_year_isValid = false;

    m_publisher_isSet = false;
    m_publisher_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_isbn_isValid = ::OpenAPI::fromJsonValue(m_isbn, json[QString("isbn")]);
    m_isbn_isSet = !json[QString("isbn")].isNull() && m_isbn_isValid;

    m_issn_isValid = ::OpenAPI::fromJsonValue(m_issn, json[QString("issn")]);
    m_issn_isSet = !json[QString("issn")].isNull() && m_issn_isValid;

    m_mms_id_isValid = ::OpenAPI::fromJsonValue(m_mms_id, json[QString("mms_id")]);
    m_mms_id_isSet = !json[QString("mms_id")].isNull() && m_mms_id_isValid;

    m_publication_place_isValid = ::OpenAPI::fromJsonValue(m_publication_place, json[QString("publication_place")]);
    m_publication_place_isSet = !json[QString("publication_place")].isNull() && m_publication_place_isValid;

    m_publication_year_isValid = ::OpenAPI::fromJsonValue(m_publication_year, json[QString("publication_year")]);
    m_publication_year_isSet = !json[QString("publication_year")].isNull() && m_publication_year_isValid;

    m_publisher_isValid = ::OpenAPI::fromJsonValue(m_publisher, json[QString("publisher")]);
    m_publisher_isSet = !json[QString("publisher")].isNull() && m_publisher_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_isbn_isSet) {
        obj.insert(QString("isbn"), ::OpenAPI::toJsonValue(m_isbn));
    }
    if (m_issn_isSet) {
        obj.insert(QString("issn"), ::OpenAPI::toJsonValue(m_issn));
    }
    if (m_mms_id.isSet()) {
        obj.insert(QString("mms_id"), ::OpenAPI::toJsonValue(m_mms_id));
    }
    if (m_publication_place_isSet) {
        obj.insert(QString("publication_place"), ::OpenAPI::toJsonValue(m_publication_place));
    }
    if (m_publication_year_isSet) {
        obj.insert(QString("publication_year"), ::OpenAPI::toJsonValue(m_publication_year));
    }
    if (m_publisher_isSet) {
        obj.insert(QString("publisher"), ::OpenAPI::toJsonValue(m_publisher));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::getAuthor() const {
    return m_author;
}
void OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::is_author_Set() const{
    return m_author_isSet;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::getIsbn() const {
    return m_isbn;
}
void OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::setIsbn(const QString &isbn) {
    m_isbn = isbn;
    m_isbn_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::is_isbn_Set() const{
    return m_isbn_isSet;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::is_isbn_Valid() const{
    return m_isbn_isValid;
}

QString OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::getIssn() const {
    return m_issn;
}
void OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::setIssn(const QString &issn) {
    m_issn = issn;
    m_issn_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::is_issn_Set() const{
    return m_issn_isSet;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::is_issn_Valid() const{
    return m_issn_isValid;
}

OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata_mms_id OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::getMmsId() const {
    return m_mms_id;
}
void OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::setMmsId(const OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata_mms_id &mms_id) {
    m_mms_id = mms_id;
    m_mms_id_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::is_mms_id_Set() const{
    return m_mms_id_isSet;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::is_mms_id_Valid() const{
    return m_mms_id_isValid;
}

QString OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::getPublicationPlace() const {
    return m_publication_place;
}
void OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::setPublicationPlace(const QString &publication_place) {
    m_publication_place = publication_place;
    m_publication_place_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::is_publication_place_Set() const{
    return m_publication_place_isSet;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::is_publication_place_Valid() const{
    return m_publication_place_isValid;
}

QString OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::getPublicationYear() const {
    return m_publication_year;
}
void OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::setPublicationYear(const QString &publication_year) {
    m_publication_year = publication_year;
    m_publication_year_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::is_publication_year_Set() const{
    return m_publication_year_isSet;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::is_publication_year_Valid() const{
    return m_publication_year_isValid;
}

QString OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::getPublisher() const {
    return m_publisher;
}
void OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::setPublisher(const QString &publisher) {
    m_publisher = publisher;
    m_publisher_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::is_publisher_Set() const{
    return m_publisher_isSet;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::is_publisher_Valid() const{
    return m_publisher_isValid;
}

QString OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::getTitle() const {
    return m_title;
}
void OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isbn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mms_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_publication_place_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publication_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
