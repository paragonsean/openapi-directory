/**
 * Ex Libris APIs
 * For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner::OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner::OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner() {
    this->initializeModel();
}

OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner::~OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner() {}

void OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner::initializeModel() {

    m_location_isSet = false;
    m_location_isValid = false;

    m_request_isSet = false;
    m_request_isValid = false;

    m_resource_metadata_isSet = false;
    m_resource_metadata_isValid = false;
}

void OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner::fromJsonObject(QJsonObject json) {

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_request_isValid = ::OpenAPI::fromJsonValue(m_request, json[QString("request")]);
    m_request_isSet = !json[QString("request")].isNull() && m_request_isValid;

    m_resource_metadata_isValid = ::OpenAPI::fromJsonValue(m_resource_metadata, json[QString("resource_metadata")]);
    m_resource_metadata_isSet = !json[QString("resource_metadata")].isNull() && m_resource_metadata_isValid;
}

QString OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_request.size() > 0) {
        obj.insert(QString("request"), ::OpenAPI::toJsonValue(m_request));
    }
    if (m_resource_metadata.isSet()) {
        obj.insert(QString("resource_metadata"), ::OpenAPI::toJsonValue(m_resource_metadata));
    }
    return obj;
}

OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner::getLocation() const {
    return m_location;
}
void OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner::setLocation(const OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner::is_location_Set() const{
    return m_location_isSet;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner::is_location_Valid() const{
    return m_location_isValid;
}

QList<OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_request_inner> OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner::getRequest() const {
    return m_request;
}
void OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner::setRequest(const QList<OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_request_inner> &request) {
    m_request = request;
    m_request_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner::is_request_Set() const{
    return m_request_isSet;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner::is_request_Valid() const{
    return m_request_isValid;
}

OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner::getResourceMetadata() const {
    return m_resource_metadata;
}
void OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner::setResourceMetadata(const OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_resource_metadata &resource_metadata) {
    m_resource_metadata = resource_metadata;
    m_resource_metadata_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner::is_resource_metadata_Set() const{
    return m_resource_metadata_isSet;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner::is_resource_metadata_Valid() const{
    return m_resource_metadata_isValid;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
