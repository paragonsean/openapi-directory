/**
 * Ex Libris APIs
 * For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner() {
    this->initializeModel();
}

OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::~OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner() {}

void OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::initializeModel() {

    m_alternative_call_number_isSet = false;
    m_alternative_call_number_isValid = false;

    m_barcode_isSet = false;
    m_barcode_isValid = false;

    m_base_status_isSet = false;
    m_base_status_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_storage_location_id_isSet = false;
    m_storage_location_id_isValid = false;
}

void OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::fromJsonObject(QJsonObject json) {

    m_alternative_call_number_isValid = ::OpenAPI::fromJsonValue(m_alternative_call_number, json[QString("alternative_call_number")]);
    m_alternative_call_number_isSet = !json[QString("alternative_call_number")].isNull() && m_alternative_call_number_isValid;

    m_barcode_isValid = ::OpenAPI::fromJsonValue(m_barcode, json[QString("barcode")]);
    m_barcode_isSet = !json[QString("barcode")].isNull() && m_barcode_isValid;

    m_base_status_isValid = ::OpenAPI::fromJsonValue(m_base_status, json[QString("base_status")]);
    m_base_status_isSet = !json[QString("base_status")].isNull() && m_base_status_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_storage_location_id_isValid = ::OpenAPI::fromJsonValue(m_storage_location_id, json[QString("storage_location_id")]);
    m_storage_location_id_isSet = !json[QString("storage_location_id")].isNull() && m_storage_location_id_isValid;
}

QString OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_alternative_call_number_isSet) {
        obj.insert(QString("alternative_call_number"), ::OpenAPI::toJsonValue(m_alternative_call_number));
    }
    if (m_barcode_isSet) {
        obj.insert(QString("barcode"), ::OpenAPI::toJsonValue(m_barcode));
    }
    if (m_base_status.isSet()) {
        obj.insert(QString("base_status"), ::OpenAPI::toJsonValue(m_base_status));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_storage_location_id_isSet) {
        obj.insert(QString("storage_location_id"), ::OpenAPI::toJsonValue(m_storage_location_id));
    }
    return obj;
}

QString OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::getAlternativeCallNumber() const {
    return m_alternative_call_number;
}
void OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::setAlternativeCallNumber(const QString &alternative_call_number) {
    m_alternative_call_number = alternative_call_number;
    m_alternative_call_number_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::is_alternative_call_number_Set() const{
    return m_alternative_call_number_isSet;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::is_alternative_call_number_Valid() const{
    return m_alternative_call_number_isValid;
}

QString OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::getBarcode() const {
    return m_barcode;
}
void OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::setBarcode(const QString &barcode) {
    m_barcode = barcode;
    m_barcode_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::is_barcode_Set() const{
    return m_barcode_isSet;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::is_barcode_Valid() const{
    return m_barcode_isValid;
}

OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner_base_status OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::getBaseStatus() const {
    return m_base_status;
}
void OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::setBaseStatus(const OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner_base_status &base_status) {
    m_base_status = base_status;
    m_base_status_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::is_base_status_Set() const{
    return m_base_status_isSet;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::is_base_status_Valid() const{
    return m_base_status_isValid;
}

QString OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::getLink() const {
    return m_link;
}
void OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::is_link_Set() const{
    return m_link_isSet;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::getPid() const {
    return m_pid;
}
void OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::is_pid_Valid() const{
    return m_pid_isValid;
}

QString OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::getStorageLocationId() const {
    return m_storage_location_id;
}
void OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::setStorageLocationId(const QString &storage_location_id) {
    m_storage_location_id = storage_location_id;
    m_storage_location_id_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::is_storage_location_id_Set() const{
    return m_storage_location_id_isSet;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::is_storage_location_id_Valid() const{
    return m_storage_location_id_isValid;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternative_call_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_barcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_almaws_v1_task_lists_requested_resources_200_response_requested_resource_inner_location_copy_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
