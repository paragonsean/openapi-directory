/**
 * Ex Libris APIs
 * For more information on how to use these APIs, including how to create an API key required for authentication, see [Alma REST APIs](https://developers.exlibrisgroup.com/alma/apis).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner() {
    this->initializeModel();
}

OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::~OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner() {}

void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::initializeModel() {

    m_additional_barcode_isSet = false;
    m_additional_barcode_isValid = false;

    m_additional_person_name_isSet = false;
    m_additional_person_name_isValid = false;

    m_agree_to_copyright_terms_isSet = false;
    m_agree_to_copyright_terms_isValid = false;

    m_allow_other_formats_isSet = false;
    m_allow_other_formats_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_author_initials_isSet = false;
    m_author_initials_isValid = false;

    m_barcode_isSet = false;
    m_barcode_isValid = false;

    m_bib_note_isSet = false;
    m_bib_note_isValid = false;

    m_call_number_isSet = false;
    m_call_number_isValid = false;

    m_chapter_isSet = false;
    m_chapter_isValid = false;

    m_chapter_author_isSet = false;
    m_chapter_author_isValid = false;

    m_chapter_title_isSet = false;
    m_chapter_title_isValid = false;

    m_citation_type_isSet = false;
    m_citation_type_isValid = false;

    m_copyright_status_isSet = false;
    m_copyright_status_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_doi_isSet = false;
    m_doi_isValid = false;

    m_edition_isSet = false;
    m_edition_isValid = false;

    m_editor_isSet = false;
    m_editor_isValid = false;

    m_end_page_isSet = false;
    m_end_page_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_fund_isSet = false;
    m_fund_isValid = false;

    m_has_active_notes_isSet = false;
    m_has_active_notes_isValid = false;

    m_isbn_isSet = false;
    m_isbn_isValid = false;

    m_issn_isSet = false;
    m_issn_isValid = false;

    m_issue_isSet = false;
    m_issue_isValid = false;

    m_journal_title_isSet = false;
    m_journal_title_isValid = false;

    m_last_interest_date_isSet = false;
    m_last_interest_date_isValid = false;

    m_last_modified_date_isSet = false;
    m_last_modified_date_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_lcc_number_isSet = false;
    m_lcc_number_isValid = false;

    m_level_of_service_isSet = false;
    m_level_of_service_isValid = false;

    m_lost_damaged_fee_isSet = false;
    m_lost_damaged_fee_isValid = false;

    m_maximum_fee_isSet = false;
    m_maximum_fee_isValid = false;

    m_mms_id_isSet = false;
    m_mms_id_isValid = false;

    m_need_patron_info_isSet = false;
    m_need_patron_info_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_oclc_number_isSet = false;
    m_oclc_number_isValid = false;

    m_other_standard_id_isSet = false;
    m_other_standard_id_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_pages_isSet = false;
    m_pages_isValid = false;

    m_part_isSet = false;
    m_part_isValid = false;

    m_partner_isSet = false;
    m_partner_isValid = false;

    m_pickup_location_isSet = false;
    m_pickup_location_isValid = false;

    m_pickup_location_type_isSet = false;
    m_pickup_location_type_isValid = false;

    m_place_of_publication_isSet = false;
    m_place_of_publication_isValid = false;

    m_pmid_isSet = false;
    m_pmid_isValid = false;

    m_preferred_send_method_isSet = false;
    m_preferred_send_method_isValid = false;

    m_printed_isSet = false;
    m_printed_isValid = false;

    m_publisher_isSet = false;
    m_publisher_isValid = false;

    m_reading_room_isSet = false;
    m_reading_room_isValid = false;

    m_receive_cost_isSet = false;
    m_receive_cost_isValid = false;

    m_remote_record_id_isSet = false;
    m_remote_record_id_isValid = false;

    m_reported_isSet = false;
    m_reported_isValid = false;

    m_request_cost_isSet = false;
    m_request_cost_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_requested_language_isSet = false;
    m_requested_language_isValid = false;

    m_requested_media_isSet = false;
    m_requested_media_isValid = false;

    m_requester_isSet = false;
    m_requester_isValid = false;

    m_rs_note_isSet = false;
    m_rs_note_isValid = false;

    m_series_title_number_isSet = false;
    m_series_title_number_isValid = false;

    m_shipping_cost_isSet = false;
    m_shipping_cost_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_specific_edition_isSet = false;
    m_specific_edition_isValid = false;

    m_start_page_isSet = false;
    m_start_page_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_supplied_format_isSet = false;
    m_supplied_format_isValid = false;

    m_text_email_isSet = false;
    m_text_email_isValid = false;

    m_text_postal_1_isSet = false;
    m_text_postal_1_isValid = false;

    m_text_postal_2_isSet = false;
    m_text_postal_2_isValid = false;

    m_text_postal_3_isSet = false;
    m_text_postal_3_isValid = false;

    m_text_postal_4_isSet = false;
    m_text_postal_4_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_use_alternative_address_isSet = false;
    m_use_alternative_address_isValid = false;

    m_user_request_isSet = false;
    m_user_request_isValid = false;

    m_volume_isSet = false;
    m_volume_isValid = false;

    m_willing_to_pay_isSet = false;
    m_willing_to_pay_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::fromJsonObject(QJsonObject json) {

    m_additional_barcode_isValid = ::OpenAPI::fromJsonValue(m_additional_barcode, json[QString("additional_barcode")]);
    m_additional_barcode_isSet = !json[QString("additional_barcode")].isNull() && m_additional_barcode_isValid;

    m_additional_person_name_isValid = ::OpenAPI::fromJsonValue(m_additional_person_name, json[QString("additional_person_name")]);
    m_additional_person_name_isSet = !json[QString("additional_person_name")].isNull() && m_additional_person_name_isValid;

    m_agree_to_copyright_terms_isValid = ::OpenAPI::fromJsonValue(m_agree_to_copyright_terms, json[QString("agree_to_copyright_terms")]);
    m_agree_to_copyright_terms_isSet = !json[QString("agree_to_copyright_terms")].isNull() && m_agree_to_copyright_terms_isValid;

    m_allow_other_formats_isValid = ::OpenAPI::fromJsonValue(m_allow_other_formats, json[QString("allow_other_formats")]);
    m_allow_other_formats_isSet = !json[QString("allow_other_formats")].isNull() && m_allow_other_formats_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_author_initials_isValid = ::OpenAPI::fromJsonValue(m_author_initials, json[QString("author_initials")]);
    m_author_initials_isSet = !json[QString("author_initials")].isNull() && m_author_initials_isValid;

    m_barcode_isValid = ::OpenAPI::fromJsonValue(m_barcode, json[QString("barcode")]);
    m_barcode_isSet = !json[QString("barcode")].isNull() && m_barcode_isValid;

    m_bib_note_isValid = ::OpenAPI::fromJsonValue(m_bib_note, json[QString("bib_note")]);
    m_bib_note_isSet = !json[QString("bib_note")].isNull() && m_bib_note_isValid;

    m_call_number_isValid = ::OpenAPI::fromJsonValue(m_call_number, json[QString("call_number")]);
    m_call_number_isSet = !json[QString("call_number")].isNull() && m_call_number_isValid;

    m_chapter_isValid = ::OpenAPI::fromJsonValue(m_chapter, json[QString("chapter")]);
    m_chapter_isSet = !json[QString("chapter")].isNull() && m_chapter_isValid;

    m_chapter_author_isValid = ::OpenAPI::fromJsonValue(m_chapter_author, json[QString("chapter_author")]);
    m_chapter_author_isSet = !json[QString("chapter_author")].isNull() && m_chapter_author_isValid;

    m_chapter_title_isValid = ::OpenAPI::fromJsonValue(m_chapter_title, json[QString("chapter_title")]);
    m_chapter_title_isSet = !json[QString("chapter_title")].isNull() && m_chapter_title_isValid;

    m_citation_type_isValid = ::OpenAPI::fromJsonValue(m_citation_type, json[QString("citation_type")]);
    m_citation_type_isSet = !json[QString("citation_type")].isNull() && m_citation_type_isValid;

    m_copyright_status_isValid = ::OpenAPI::fromJsonValue(m_copyright_status, json[QString("copyright_status")]);
    m_copyright_status_isSet = !json[QString("copyright_status")].isNull() && m_copyright_status_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("created_date")]);
    m_created_date_isSet = !json[QString("created_date")].isNull() && m_created_date_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("created_time")]);
    m_created_time_isSet = !json[QString("created_time")].isNull() && m_created_time_isValid;

    m_doi_isValid = ::OpenAPI::fromJsonValue(m_doi, json[QString("doi")]);
    m_doi_isSet = !json[QString("doi")].isNull() && m_doi_isValid;

    m_edition_isValid = ::OpenAPI::fromJsonValue(m_edition, json[QString("edition")]);
    m_edition_isSet = !json[QString("edition")].isNull() && m_edition_isValid;

    m_editor_isValid = ::OpenAPI::fromJsonValue(m_editor, json[QString("editor")]);
    m_editor_isSet = !json[QString("editor")].isNull() && m_editor_isValid;

    m_end_page_isValid = ::OpenAPI::fromJsonValue(m_end_page, json[QString("end_page")]);
    m_end_page_isSet = !json[QString("end_page")].isNull() && m_end_page_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("external_id")]);
    m_external_id_isSet = !json[QString("external_id")].isNull() && m_external_id_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_fund_isValid = ::OpenAPI::fromJsonValue(m_fund, json[QString("fund")]);
    m_fund_isSet = !json[QString("fund")].isNull() && m_fund_isValid;

    m_has_active_notes_isValid = ::OpenAPI::fromJsonValue(m_has_active_notes, json[QString("has_active_notes")]);
    m_has_active_notes_isSet = !json[QString("has_active_notes")].isNull() && m_has_active_notes_isValid;

    m_isbn_isValid = ::OpenAPI::fromJsonValue(m_isbn, json[QString("isbn")]);
    m_isbn_isSet = !json[QString("isbn")].isNull() && m_isbn_isValid;

    m_issn_isValid = ::OpenAPI::fromJsonValue(m_issn, json[QString("issn")]);
    m_issn_isSet = !json[QString("issn")].isNull() && m_issn_isValid;

    m_issue_isValid = ::OpenAPI::fromJsonValue(m_issue, json[QString("issue")]);
    m_issue_isSet = !json[QString("issue")].isNull() && m_issue_isValid;

    m_journal_title_isValid = ::OpenAPI::fromJsonValue(m_journal_title, json[QString("journal_title")]);
    m_journal_title_isSet = !json[QString("journal_title")].isNull() && m_journal_title_isValid;

    m_last_interest_date_isValid = ::OpenAPI::fromJsonValue(m_last_interest_date, json[QString("last_interest_date")]);
    m_last_interest_date_isSet = !json[QString("last_interest_date")].isNull() && m_last_interest_date_isValid;

    m_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date, json[QString("last_modified_date")]);
    m_last_modified_date_isSet = !json[QString("last_modified_date")].isNull() && m_last_modified_date_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("last_modified_time")]);
    m_last_modified_time_isSet = !json[QString("last_modified_time")].isNull() && m_last_modified_time_isValid;

    m_lcc_number_isValid = ::OpenAPI::fromJsonValue(m_lcc_number, json[QString("lcc_number")]);
    m_lcc_number_isSet = !json[QString("lcc_number")].isNull() && m_lcc_number_isValid;

    m_level_of_service_isValid = ::OpenAPI::fromJsonValue(m_level_of_service, json[QString("level_of_service")]);
    m_level_of_service_isSet = !json[QString("level_of_service")].isNull() && m_level_of_service_isValid;

    m_lost_damaged_fee_isValid = ::OpenAPI::fromJsonValue(m_lost_damaged_fee, json[QString("lost_damaged_fee")]);
    m_lost_damaged_fee_isSet = !json[QString("lost_damaged_fee")].isNull() && m_lost_damaged_fee_isValid;

    m_maximum_fee_isValid = ::OpenAPI::fromJsonValue(m_maximum_fee, json[QString("maximum_fee")]);
    m_maximum_fee_isSet = !json[QString("maximum_fee")].isNull() && m_maximum_fee_isValid;

    m_mms_id_isValid = ::OpenAPI::fromJsonValue(m_mms_id, json[QString("mms_id")]);
    m_mms_id_isSet = !json[QString("mms_id")].isNull() && m_mms_id_isValid;

    m_need_patron_info_isValid = ::OpenAPI::fromJsonValue(m_need_patron_info, json[QString("need_patron_info")]);
    m_need_patron_info_isSet = !json[QString("need_patron_info")].isNull() && m_need_patron_info_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_oclc_number_isValid = ::OpenAPI::fromJsonValue(m_oclc_number, json[QString("oclc_number")]);
    m_oclc_number_isSet = !json[QString("oclc_number")].isNull() && m_oclc_number_isValid;

    m_other_standard_id_isValid = ::OpenAPI::fromJsonValue(m_other_standard_id, json[QString("other_standard_id")]);
    m_other_standard_id_isSet = !json[QString("other_standard_id")].isNull() && m_other_standard_id_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_pages_isValid = ::OpenAPI::fromJsonValue(m_pages, json[QString("pages")]);
    m_pages_isSet = !json[QString("pages")].isNull() && m_pages_isValid;

    m_part_isValid = ::OpenAPI::fromJsonValue(m_part, json[QString("part")]);
    m_part_isSet = !json[QString("part")].isNull() && m_part_isValid;

    m_partner_isValid = ::OpenAPI::fromJsonValue(m_partner, json[QString("partner")]);
    m_partner_isSet = !json[QString("partner")].isNull() && m_partner_isValid;

    m_pickup_location_isValid = ::OpenAPI::fromJsonValue(m_pickup_location, json[QString("pickup_location")]);
    m_pickup_location_isSet = !json[QString("pickup_location")].isNull() && m_pickup_location_isValid;

    m_pickup_location_type_isValid = ::OpenAPI::fromJsonValue(m_pickup_location_type, json[QString("pickup_location_type")]);
    m_pickup_location_type_isSet = !json[QString("pickup_location_type")].isNull() && m_pickup_location_type_isValid;

    m_place_of_publication_isValid = ::OpenAPI::fromJsonValue(m_place_of_publication, json[QString("place_of_publication")]);
    m_place_of_publication_isSet = !json[QString("place_of_publication")].isNull() && m_place_of_publication_isValid;

    m_pmid_isValid = ::OpenAPI::fromJsonValue(m_pmid, json[QString("pmid")]);
    m_pmid_isSet = !json[QString("pmid")].isNull() && m_pmid_isValid;

    m_preferred_send_method_isValid = ::OpenAPI::fromJsonValue(m_preferred_send_method, json[QString("preferred_send_method")]);
    m_preferred_send_method_isSet = !json[QString("preferred_send_method")].isNull() && m_preferred_send_method_isValid;

    m_printed_isValid = ::OpenAPI::fromJsonValue(m_printed, json[QString("printed")]);
    m_printed_isSet = !json[QString("printed")].isNull() && m_printed_isValid;

    m_publisher_isValid = ::OpenAPI::fromJsonValue(m_publisher, json[QString("publisher")]);
    m_publisher_isSet = !json[QString("publisher")].isNull() && m_publisher_isValid;

    m_reading_room_isValid = ::OpenAPI::fromJsonValue(m_reading_room, json[QString("reading_room")]);
    m_reading_room_isSet = !json[QString("reading_room")].isNull() && m_reading_room_isValid;

    m_receive_cost_isValid = ::OpenAPI::fromJsonValue(m_receive_cost, json[QString("receive_cost")]);
    m_receive_cost_isSet = !json[QString("receive_cost")].isNull() && m_receive_cost_isValid;

    m_remote_record_id_isValid = ::OpenAPI::fromJsonValue(m_remote_record_id, json[QString("remote_record_id")]);
    m_remote_record_id_isSet = !json[QString("remote_record_id")].isNull() && m_remote_record_id_isValid;

    m_reported_isValid = ::OpenAPI::fromJsonValue(m_reported, json[QString("reported")]);
    m_reported_isSet = !json[QString("reported")].isNull() && m_reported_isValid;

    m_request_cost_isValid = ::OpenAPI::fromJsonValue(m_request_cost, json[QString("request_cost")]);
    m_request_cost_isSet = !json[QString("request_cost")].isNull() && m_request_cost_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;

    m_requested_language_isValid = ::OpenAPI::fromJsonValue(m_requested_language, json[QString("requested_language")]);
    m_requested_language_isSet = !json[QString("requested_language")].isNull() && m_requested_language_isValid;

    m_requested_media_isValid = ::OpenAPI::fromJsonValue(m_requested_media, json[QString("requested_media")]);
    m_requested_media_isSet = !json[QString("requested_media")].isNull() && m_requested_media_isValid;

    m_requester_isValid = ::OpenAPI::fromJsonValue(m_requester, json[QString("requester")]);
    m_requester_isSet = !json[QString("requester")].isNull() && m_requester_isValid;

    m_rs_note_isValid = ::OpenAPI::fromJsonValue(m_rs_note, json[QString("rs_note")]);
    m_rs_note_isSet = !json[QString("rs_note")].isNull() && m_rs_note_isValid;

    m_series_title_number_isValid = ::OpenAPI::fromJsonValue(m_series_title_number, json[QString("series_title_number")]);
    m_series_title_number_isSet = !json[QString("series_title_number")].isNull() && m_series_title_number_isValid;

    m_shipping_cost_isValid = ::OpenAPI::fromJsonValue(m_shipping_cost, json[QString("shipping_cost")]);
    m_shipping_cost_isSet = !json[QString("shipping_cost")].isNull() && m_shipping_cost_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_specific_edition_isValid = ::OpenAPI::fromJsonValue(m_specific_edition, json[QString("specific_edition")]);
    m_specific_edition_isSet = !json[QString("specific_edition")].isNull() && m_specific_edition_isValid;

    m_start_page_isValid = ::OpenAPI::fromJsonValue(m_start_page, json[QString("start_page")]);
    m_start_page_isSet = !json[QString("start_page")].isNull() && m_start_page_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_supplied_format_isValid = ::OpenAPI::fromJsonValue(m_supplied_format, json[QString("supplied_format")]);
    m_supplied_format_isSet = !json[QString("supplied_format")].isNull() && m_supplied_format_isValid;

    m_text_email_isValid = ::OpenAPI::fromJsonValue(m_text_email, json[QString("text_email")]);
    m_text_email_isSet = !json[QString("text_email")].isNull() && m_text_email_isValid;

    m_text_postal_1_isValid = ::OpenAPI::fromJsonValue(m_text_postal_1, json[QString("text_postal_1")]);
    m_text_postal_1_isSet = !json[QString("text_postal_1")].isNull() && m_text_postal_1_isValid;

    m_text_postal_2_isValid = ::OpenAPI::fromJsonValue(m_text_postal_2, json[QString("text_postal_2")]);
    m_text_postal_2_isSet = !json[QString("text_postal_2")].isNull() && m_text_postal_2_isValid;

    m_text_postal_3_isValid = ::OpenAPI::fromJsonValue(m_text_postal_3, json[QString("text_postal_3")]);
    m_text_postal_3_isSet = !json[QString("text_postal_3")].isNull() && m_text_postal_3_isValid;

    m_text_postal_4_isValid = ::OpenAPI::fromJsonValue(m_text_postal_4, json[QString("text_postal_4")]);
    m_text_postal_4_isSet = !json[QString("text_postal_4")].isNull() && m_text_postal_4_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_use_alternative_address_isValid = ::OpenAPI::fromJsonValue(m_use_alternative_address, json[QString("use_alternative_address")]);
    m_use_alternative_address_isSet = !json[QString("use_alternative_address")].isNull() && m_use_alternative_address_isValid;

    m_user_request_isValid = ::OpenAPI::fromJsonValue(m_user_request, json[QString("user_request")]);
    m_user_request_isSet = !json[QString("user_request")].isNull() && m_user_request_isValid;

    m_volume_isValid = ::OpenAPI::fromJsonValue(m_volume, json[QString("volume")]);
    m_volume_isSet = !json[QString("volume")].isNull() && m_volume_isValid;

    m_willing_to_pay_isValid = ::OpenAPI::fromJsonValue(m_willing_to_pay, json[QString("willing_to_pay")]);
    m_willing_to_pay_isSet = !json[QString("willing_to_pay")].isNull() && m_willing_to_pay_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_barcode.size() > 0) {
        obj.insert(QString("additional_barcode"), ::OpenAPI::toJsonValue(m_additional_barcode));
    }
    if (m_additional_person_name_isSet) {
        obj.insert(QString("additional_person_name"), ::OpenAPI::toJsonValue(m_additional_person_name));
    }
    if (m_agree_to_copyright_terms_isSet) {
        obj.insert(QString("agree_to_copyright_terms"), ::OpenAPI::toJsonValue(m_agree_to_copyright_terms));
    }
    if (m_allow_other_formats_isSet) {
        obj.insert(QString("allow_other_formats"), ::OpenAPI::toJsonValue(m_allow_other_formats));
    }
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_author_initials_isSet) {
        obj.insert(QString("author_initials"), ::OpenAPI::toJsonValue(m_author_initials));
    }
    if (m_barcode_isSet) {
        obj.insert(QString("barcode"), ::OpenAPI::toJsonValue(m_barcode));
    }
    if (m_bib_note_isSet) {
        obj.insert(QString("bib_note"), ::OpenAPI::toJsonValue(m_bib_note));
    }
    if (m_call_number_isSet) {
        obj.insert(QString("call_number"), ::OpenAPI::toJsonValue(m_call_number));
    }
    if (m_chapter_isSet) {
        obj.insert(QString("chapter"), ::OpenAPI::toJsonValue(m_chapter));
    }
    if (m_chapter_author_isSet) {
        obj.insert(QString("chapter_author"), ::OpenAPI::toJsonValue(m_chapter_author));
    }
    if (m_chapter_title_isSet) {
        obj.insert(QString("chapter_title"), ::OpenAPI::toJsonValue(m_chapter_title));
    }
    if (m_citation_type.isSet()) {
        obj.insert(QString("citation_type"), ::OpenAPI::toJsonValue(m_citation_type));
    }
    if (m_copyright_status.isSet()) {
        obj.insert(QString("copyright_status"), ::OpenAPI::toJsonValue(m_copyright_status));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("created_date"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("created_time"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_doi_isSet) {
        obj.insert(QString("doi"), ::OpenAPI::toJsonValue(m_doi));
    }
    if (m_edition_isSet) {
        obj.insert(QString("edition"), ::OpenAPI::toJsonValue(m_edition));
    }
    if (m_editor_isSet) {
        obj.insert(QString("editor"), ::OpenAPI::toJsonValue(m_editor));
    }
    if (m_end_page_isSet) {
        obj.insert(QString("end_page"), ::OpenAPI::toJsonValue(m_end_page));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("external_id"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_format.isSet()) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_fund.isSet()) {
        obj.insert(QString("fund"), ::OpenAPI::toJsonValue(m_fund));
    }
    if (m_has_active_notes_isSet) {
        obj.insert(QString("has_active_notes"), ::OpenAPI::toJsonValue(m_has_active_notes));
    }
    if (m_isbn_isSet) {
        obj.insert(QString("isbn"), ::OpenAPI::toJsonValue(m_isbn));
    }
    if (m_issn_isSet) {
        obj.insert(QString("issn"), ::OpenAPI::toJsonValue(m_issn));
    }
    if (m_issue_isSet) {
        obj.insert(QString("issue"), ::OpenAPI::toJsonValue(m_issue));
    }
    if (m_journal_title_isSet) {
        obj.insert(QString("journal_title"), ::OpenAPI::toJsonValue(m_journal_title));
    }
    if (m_last_interest_date_isSet) {
        obj.insert(QString("last_interest_date"), ::OpenAPI::toJsonValue(m_last_interest_date));
    }
    if (m_last_modified_date_isSet) {
        obj.insert(QString("last_modified_date"), ::OpenAPI::toJsonValue(m_last_modified_date));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("last_modified_time"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_lcc_number_isSet) {
        obj.insert(QString("lcc_number"), ::OpenAPI::toJsonValue(m_lcc_number));
    }
    if (m_level_of_service.isSet()) {
        obj.insert(QString("level_of_service"), ::OpenAPI::toJsonValue(m_level_of_service));
    }
    if (m_lost_damaged_fee.isSet()) {
        obj.insert(QString("lost_damaged_fee"), ::OpenAPI::toJsonValue(m_lost_damaged_fee));
    }
    if (m_maximum_fee_isSet) {
        obj.insert(QString("maximum_fee"), ::OpenAPI::toJsonValue(m_maximum_fee));
    }
    if (m_mms_id_isSet) {
        obj.insert(QString("mms_id"), ::OpenAPI::toJsonValue(m_mms_id));
    }
    if (m_need_patron_info_isSet) {
        obj.insert(QString("need_patron_info"), ::OpenAPI::toJsonValue(m_need_patron_info));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_oclc_number_isSet) {
        obj.insert(QString("oclc_number"), ::OpenAPI::toJsonValue(m_oclc_number));
    }
    if (m_other_standard_id_isSet) {
        obj.insert(QString("other_standard_id"), ::OpenAPI::toJsonValue(m_other_standard_id));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_pages_isSet) {
        obj.insert(QString("pages"), ::OpenAPI::toJsonValue(m_pages));
    }
    if (m_part_isSet) {
        obj.insert(QString("part"), ::OpenAPI::toJsonValue(m_part));
    }
    if (m_partner.isSet()) {
        obj.insert(QString("partner"), ::OpenAPI::toJsonValue(m_partner));
    }
    if (m_pickup_location.isSet()) {
        obj.insert(QString("pickup_location"), ::OpenAPI::toJsonValue(m_pickup_location));
    }
    if (m_pickup_location_type_isSet) {
        obj.insert(QString("pickup_location_type"), ::OpenAPI::toJsonValue(m_pickup_location_type));
    }
    if (m_place_of_publication_isSet) {
        obj.insert(QString("place_of_publication"), ::OpenAPI::toJsonValue(m_place_of_publication));
    }
    if (m_pmid_isSet) {
        obj.insert(QString("pmid"), ::OpenAPI::toJsonValue(m_pmid));
    }
    if (m_preferred_send_method.isSet()) {
        obj.insert(QString("preferred_send_method"), ::OpenAPI::toJsonValue(m_preferred_send_method));
    }
    if (m_printed_isSet) {
        obj.insert(QString("printed"), ::OpenAPI::toJsonValue(m_printed));
    }
    if (m_publisher_isSet) {
        obj.insert(QString("publisher"), ::OpenAPI::toJsonValue(m_publisher));
    }
    if (m_reading_room.isSet()) {
        obj.insert(QString("reading_room"), ::OpenAPI::toJsonValue(m_reading_room));
    }
    if (m_receive_cost.isSet()) {
        obj.insert(QString("receive_cost"), ::OpenAPI::toJsonValue(m_receive_cost));
    }
    if (m_remote_record_id_isSet) {
        obj.insert(QString("remote_record_id"), ::OpenAPI::toJsonValue(m_remote_record_id));
    }
    if (m_reported_isSet) {
        obj.insert(QString("reported"), ::OpenAPI::toJsonValue(m_reported));
    }
    if (m_request_cost.isSet()) {
        obj.insert(QString("request_cost"), ::OpenAPI::toJsonValue(m_request_cost));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_requested_language.isSet()) {
        obj.insert(QString("requested_language"), ::OpenAPI::toJsonValue(m_requested_language));
    }
    if (m_requested_media_isSet) {
        obj.insert(QString("requested_media"), ::OpenAPI::toJsonValue(m_requested_media));
    }
    if (m_requester.isSet()) {
        obj.insert(QString("requester"), ::OpenAPI::toJsonValue(m_requester));
    }
    if (m_rs_note.size() > 0) {
        obj.insert(QString("rs_note"), ::OpenAPI::toJsonValue(m_rs_note));
    }
    if (m_series_title_number_isSet) {
        obj.insert(QString("series_title_number"), ::OpenAPI::toJsonValue(m_series_title_number));
    }
    if (m_shipping_cost.isSet()) {
        obj.insert(QString("shipping_cost"), ::OpenAPI::toJsonValue(m_shipping_cost));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_specific_edition_isSet) {
        obj.insert(QString("specific_edition"), ::OpenAPI::toJsonValue(m_specific_edition));
    }
    if (m_start_page_isSet) {
        obj.insert(QString("start_page"), ::OpenAPI::toJsonValue(m_start_page));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_supplied_format.isSet()) {
        obj.insert(QString("supplied_format"), ::OpenAPI::toJsonValue(m_supplied_format));
    }
    if (m_text_email_isSet) {
        obj.insert(QString("text_email"), ::OpenAPI::toJsonValue(m_text_email));
    }
    if (m_text_postal_1_isSet) {
        obj.insert(QString("text_postal_1"), ::OpenAPI::toJsonValue(m_text_postal_1));
    }
    if (m_text_postal_2_isSet) {
        obj.insert(QString("text_postal_2"), ::OpenAPI::toJsonValue(m_text_postal_2));
    }
    if (m_text_postal_3_isSet) {
        obj.insert(QString("text_postal_3"), ::OpenAPI::toJsonValue(m_text_postal_3));
    }
    if (m_text_postal_4_isSet) {
        obj.insert(QString("text_postal_4"), ::OpenAPI::toJsonValue(m_text_postal_4));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_use_alternative_address_isSet) {
        obj.insert(QString("use_alternative_address"), ::OpenAPI::toJsonValue(m_use_alternative_address));
    }
    if (m_user_request.isSet()) {
        obj.insert(QString("user_request"), ::OpenAPI::toJsonValue(m_user_request));
    }
    if (m_volume_isSet) {
        obj.insert(QString("volume"), ::OpenAPI::toJsonValue(m_volume));
    }
    if (m_willing_to_pay_isSet) {
        obj.insert(QString("willing_to_pay"), ::OpenAPI::toJsonValue(m_willing_to_pay));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QList<QString> OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getAdditionalBarcode() const {
    return m_additional_barcode;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setAdditionalBarcode(const QList<QString> &additional_barcode) {
    m_additional_barcode = additional_barcode;
    m_additional_barcode_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_additional_barcode_Set() const{
    return m_additional_barcode_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_additional_barcode_Valid() const{
    return m_additional_barcode_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getAdditionalPersonName() const {
    return m_additional_person_name;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setAdditionalPersonName(const QString &additional_person_name) {
    m_additional_person_name = additional_person_name;
    m_additional_person_name_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_additional_person_name_Set() const{
    return m_additional_person_name_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_additional_person_name_Valid() const{
    return m_additional_person_name_isValid;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::isAgreeToCopyrightTerms() const {
    return m_agree_to_copyright_terms;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setAgreeToCopyrightTerms(const bool &agree_to_copyright_terms) {
    m_agree_to_copyright_terms = agree_to_copyright_terms;
    m_agree_to_copyright_terms_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_agree_to_copyright_terms_Set() const{
    return m_agree_to_copyright_terms_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_agree_to_copyright_terms_Valid() const{
    return m_agree_to_copyright_terms_isValid;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::isAllowOtherFormats() const {
    return m_allow_other_formats;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setAllowOtherFormats(const bool &allow_other_formats) {
    m_allow_other_formats = allow_other_formats;
    m_allow_other_formats_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_allow_other_formats_Set() const{
    return m_allow_other_formats_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_allow_other_formats_Valid() const{
    return m_allow_other_formats_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getAuthor() const {
    return m_author;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_author_Set() const{
    return m_author_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getAuthorInitials() const {
    return m_author_initials;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setAuthorInitials(const QString &author_initials) {
    m_author_initials = author_initials;
    m_author_initials_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_author_initials_Set() const{
    return m_author_initials_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_author_initials_Valid() const{
    return m_author_initials_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getBarcode() const {
    return m_barcode;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setBarcode(const QString &barcode) {
    m_barcode = barcode;
    m_barcode_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_barcode_Set() const{
    return m_barcode_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_barcode_Valid() const{
    return m_barcode_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getBibNote() const {
    return m_bib_note;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setBibNote(const QString &bib_note) {
    m_bib_note = bib_note;
    m_bib_note_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_bib_note_Set() const{
    return m_bib_note_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_bib_note_Valid() const{
    return m_bib_note_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getCallNumber() const {
    return m_call_number;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setCallNumber(const QString &call_number) {
    m_call_number = call_number;
    m_call_number_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_call_number_Set() const{
    return m_call_number_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_call_number_Valid() const{
    return m_call_number_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getChapter() const {
    return m_chapter;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setChapter(const QString &chapter) {
    m_chapter = chapter;
    m_chapter_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_chapter_Set() const{
    return m_chapter_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_chapter_Valid() const{
    return m_chapter_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getChapterAuthor() const {
    return m_chapter_author;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setChapterAuthor(const QString &chapter_author) {
    m_chapter_author = chapter_author;
    m_chapter_author_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_chapter_author_Set() const{
    return m_chapter_author_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_chapter_author_Valid() const{
    return m_chapter_author_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getChapterTitle() const {
    return m_chapter_title;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setChapterTitle(const QString &chapter_title) {
    m_chapter_title = chapter_title;
    m_chapter_title_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_chapter_title_Set() const{
    return m_chapter_title_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_chapter_title_Valid() const{
    return m_chapter_title_isValid;
}

OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_citation_type OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getCitationType() const {
    return m_citation_type;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setCitationType(const OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_citation_type &citation_type) {
    m_citation_type = citation_type;
    m_citation_type_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_citation_type_Set() const{
    return m_citation_type_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_citation_type_Valid() const{
    return m_citation_type_isValid;
}

OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_copyright_status OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getCopyrightStatus() const {
    return m_copyright_status;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setCopyrightStatus(const OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_copyright_status &copyright_status) {
    m_copyright_status = copyright_status;
    m_copyright_status_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_copyright_status_Set() const{
    return m_copyright_status_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_copyright_status_Valid() const{
    return m_copyright_status_isValid;
}

QDate OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getCreatedDate() const {
    return m_created_date;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setCreatedDate(const QDate &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QDateTime OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getCreatedTime() const {
    return m_created_time;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getDoi() const {
    return m_doi;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setDoi(const QString &doi) {
    m_doi = doi;
    m_doi_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_doi_Set() const{
    return m_doi_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_doi_Valid() const{
    return m_doi_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getEdition() const {
    return m_edition;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setEdition(const QString &edition) {
    m_edition = edition;
    m_edition_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_edition_Set() const{
    return m_edition_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_edition_Valid() const{
    return m_edition_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getEditor() const {
    return m_editor;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setEditor(const QString &editor) {
    m_editor = editor;
    m_editor_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_editor_Set() const{
    return m_editor_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_editor_Valid() const{
    return m_editor_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getEndPage() const {
    return m_end_page;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setEndPage(const QString &end_page) {
    m_end_page = end_page;
    m_end_page_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_end_page_Set() const{
    return m_end_page_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_end_page_Valid() const{
    return m_end_page_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getExternalId() const {
    return m_external_id;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_external_id_Valid() const{
    return m_external_id_isValid;
}

OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_format OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getFormat() const {
    return m_format;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setFormat(const OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_format &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_format_Set() const{
    return m_format_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_format_Valid() const{
    return m_format_isValid;
}

OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_fund OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getFund() const {
    return m_fund;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setFund(const OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_fund &fund) {
    m_fund = fund;
    m_fund_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_fund_Set() const{
    return m_fund_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_fund_Valid() const{
    return m_fund_isValid;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::isHasActiveNotes() const {
    return m_has_active_notes;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setHasActiveNotes(const bool &has_active_notes) {
    m_has_active_notes = has_active_notes;
    m_has_active_notes_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_has_active_notes_Set() const{
    return m_has_active_notes_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_has_active_notes_Valid() const{
    return m_has_active_notes_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getIsbn() const {
    return m_isbn;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setIsbn(const QString &isbn) {
    m_isbn = isbn;
    m_isbn_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_isbn_Set() const{
    return m_isbn_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_isbn_Valid() const{
    return m_isbn_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getIssn() const {
    return m_issn;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setIssn(const QString &issn) {
    m_issn = issn;
    m_issn_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_issn_Set() const{
    return m_issn_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_issn_Valid() const{
    return m_issn_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getIssue() const {
    return m_issue;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setIssue(const QString &issue) {
    m_issue = issue;
    m_issue_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_issue_Set() const{
    return m_issue_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_issue_Valid() const{
    return m_issue_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getJournalTitle() const {
    return m_journal_title;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setJournalTitle(const QString &journal_title) {
    m_journal_title = journal_title;
    m_journal_title_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_journal_title_Set() const{
    return m_journal_title_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_journal_title_Valid() const{
    return m_journal_title_isValid;
}

QDate OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getLastInterestDate() const {
    return m_last_interest_date;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setLastInterestDate(const QDate &last_interest_date) {
    m_last_interest_date = last_interest_date;
    m_last_interest_date_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_last_interest_date_Set() const{
    return m_last_interest_date_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_last_interest_date_Valid() const{
    return m_last_interest_date_isValid;
}

QDate OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getLastModifiedDate() const {
    return m_last_modified_date;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setLastModifiedDate(const QDate &last_modified_date) {
    m_last_modified_date = last_modified_date;
    m_last_modified_date_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_last_modified_date_Set() const{
    return m_last_modified_date_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_last_modified_date_Valid() const{
    return m_last_modified_date_isValid;
}

QDateTime OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getLccNumber() const {
    return m_lcc_number;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setLccNumber(const QString &lcc_number) {
    m_lcc_number = lcc_number;
    m_lcc_number_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_lcc_number_Set() const{
    return m_lcc_number_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_lcc_number_Valid() const{
    return m_lcc_number_isValid;
}

OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_level_of_service OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getLevelOfService() const {
    return m_level_of_service;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setLevelOfService(const OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_level_of_service &level_of_service) {
    m_level_of_service = level_of_service;
    m_level_of_service_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_level_of_service_Set() const{
    return m_level_of_service_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_level_of_service_Valid() const{
    return m_level_of_service_isValid;
}

OAIObject OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getLostDamagedFee() const {
    return m_lost_damaged_fee;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setLostDamagedFee(const OAIObject &lost_damaged_fee) {
    m_lost_damaged_fee = lost_damaged_fee;
    m_lost_damaged_fee_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_lost_damaged_fee_Set() const{
    return m_lost_damaged_fee_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_lost_damaged_fee_Valid() const{
    return m_lost_damaged_fee_isValid;
}

float OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getMaximumFee() const {
    return m_maximum_fee;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setMaximumFee(const float &maximum_fee) {
    m_maximum_fee = maximum_fee;
    m_maximum_fee_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_maximum_fee_Set() const{
    return m_maximum_fee_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_maximum_fee_Valid() const{
    return m_maximum_fee_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getMmsId() const {
    return m_mms_id;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setMmsId(const QString &mms_id) {
    m_mms_id = mms_id;
    m_mms_id_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_mms_id_Set() const{
    return m_mms_id_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_mms_id_Valid() const{
    return m_mms_id_isValid;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::isNeedPatronInfo() const {
    return m_need_patron_info;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setNeedPatronInfo(const bool &need_patron_info) {
    m_need_patron_info = need_patron_info;
    m_need_patron_info_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_need_patron_info_Set() const{
    return m_need_patron_info_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_need_patron_info_Valid() const{
    return m_need_patron_info_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getNote() const {
    return m_note;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_note_Set() const{
    return m_note_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getOclcNumber() const {
    return m_oclc_number;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setOclcNumber(const QString &oclc_number) {
    m_oclc_number = oclc_number;
    m_oclc_number_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_oclc_number_Set() const{
    return m_oclc_number_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_oclc_number_Valid() const{
    return m_oclc_number_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getOtherStandardId() const {
    return m_other_standard_id;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setOtherStandardId(const QString &other_standard_id) {
    m_other_standard_id = other_standard_id;
    m_other_standard_id_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_other_standard_id_Set() const{
    return m_other_standard_id_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_other_standard_id_Valid() const{
    return m_other_standard_id_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getOwner() const {
    return m_owner;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getPages() const {
    return m_pages;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setPages(const QString &pages) {
    m_pages = pages;
    m_pages_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_pages_Set() const{
    return m_pages_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_pages_Valid() const{
    return m_pages_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getPart() const {
    return m_part;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setPart(const QString &part) {
    m_part = part;
    m_part_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_part_Set() const{
    return m_part_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_part_Valid() const{
    return m_part_isValid;
}

OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_partner OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getPartner() const {
    return m_partner;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setPartner(const OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_partner &partner) {
    m_partner = partner;
    m_partner_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_partner_Set() const{
    return m_partner_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_partner_Valid() const{
    return m_partner_isValid;
}

OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_pickup_location OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getPickupLocation() const {
    return m_pickup_location;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setPickupLocation(const OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_pickup_location &pickup_location) {
    m_pickup_location = pickup_location;
    m_pickup_location_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_pickup_location_Set() const{
    return m_pickup_location_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_pickup_location_Valid() const{
    return m_pickup_location_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getPickupLocationType() const {
    return m_pickup_location_type;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setPickupLocationType(const QString &pickup_location_type) {
    m_pickup_location_type = pickup_location_type;
    m_pickup_location_type_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_pickup_location_type_Set() const{
    return m_pickup_location_type_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_pickup_location_type_Valid() const{
    return m_pickup_location_type_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getPlaceOfPublication() const {
    return m_place_of_publication;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setPlaceOfPublication(const QString &place_of_publication) {
    m_place_of_publication = place_of_publication;
    m_place_of_publication_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_place_of_publication_Set() const{
    return m_place_of_publication_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_place_of_publication_Valid() const{
    return m_place_of_publication_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getPmid() const {
    return m_pmid;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setPmid(const QString &pmid) {
    m_pmid = pmid;
    m_pmid_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_pmid_Set() const{
    return m_pmid_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_pmid_Valid() const{
    return m_pmid_isValid;
}

OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_preferred_send_method OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getPreferredSendMethod() const {
    return m_preferred_send_method;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setPreferredSendMethod(const OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_preferred_send_method &preferred_send_method) {
    m_preferred_send_method = preferred_send_method;
    m_preferred_send_method_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_preferred_send_method_Set() const{
    return m_preferred_send_method_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_preferred_send_method_Valid() const{
    return m_preferred_send_method_isValid;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::isPrinted() const {
    return m_printed;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setPrinted(const bool &printed) {
    m_printed = printed;
    m_printed_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_printed_Set() const{
    return m_printed_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_printed_Valid() const{
    return m_printed_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getPublisher() const {
    return m_publisher;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setPublisher(const QString &publisher) {
    m_publisher = publisher;
    m_publisher_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_publisher_Set() const{
    return m_publisher_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_publisher_Valid() const{
    return m_publisher_isValid;
}

OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_reading_room OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getReadingRoom() const {
    return m_reading_room;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setReadingRoom(const OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_reading_room &reading_room) {
    m_reading_room = reading_room;
    m_reading_room_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_reading_room_Set() const{
    return m_reading_room_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_reading_room_Valid() const{
    return m_reading_room_isValid;
}

OAIObject OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getReceiveCost() const {
    return m_receive_cost;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setReceiveCost(const OAIObject &receive_cost) {
    m_receive_cost = receive_cost;
    m_receive_cost_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_receive_cost_Set() const{
    return m_receive_cost_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_receive_cost_Valid() const{
    return m_receive_cost_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getRemoteRecordId() const {
    return m_remote_record_id;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setRemoteRecordId(const QString &remote_record_id) {
    m_remote_record_id = remote_record_id;
    m_remote_record_id_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_remote_record_id_Set() const{
    return m_remote_record_id_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_remote_record_id_Valid() const{
    return m_remote_record_id_isValid;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::isReported() const {
    return m_reported;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setReported(const bool &reported) {
    m_reported = reported;
    m_reported_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_reported_Set() const{
    return m_reported_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_reported_Valid() const{
    return m_reported_isValid;
}

OAIObject OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getRequestCost() const {
    return m_request_cost;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setRequestCost(const OAIObject &request_cost) {
    m_request_cost = request_cost;
    m_request_cost_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_request_cost_Set() const{
    return m_request_cost_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_request_cost_Valid() const{
    return m_request_cost_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getRequestId() const {
    return m_request_id;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_request_id_Valid() const{
    return m_request_id_isValid;
}

OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_requested_language OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getRequestedLanguage() const {
    return m_requested_language;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setRequestedLanguage(const OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_requested_language &requested_language) {
    m_requested_language = requested_language;
    m_requested_language_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_requested_language_Set() const{
    return m_requested_language_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_requested_language_Valid() const{
    return m_requested_language_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getRequestedMedia() const {
    return m_requested_media;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setRequestedMedia(const QString &requested_media) {
    m_requested_media = requested_media;
    m_requested_media_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_requested_media_Set() const{
    return m_requested_media_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_requested_media_Valid() const{
    return m_requested_media_isValid;
}

OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_requester OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getRequester() const {
    return m_requester;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setRequester(const OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_requester &requester) {
    m_requester = requester;
    m_requester_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_requester_Set() const{
    return m_requester_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_requester_Valid() const{
    return m_requester_isValid;
}

QList<OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_rs_note_inner> OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getRsNote() const {
    return m_rs_note;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setRsNote(const QList<OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_rs_note_inner> &rs_note) {
    m_rs_note = rs_note;
    m_rs_note_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_rs_note_Set() const{
    return m_rs_note_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_rs_note_Valid() const{
    return m_rs_note_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getSeriesTitleNumber() const {
    return m_series_title_number;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setSeriesTitleNumber(const QString &series_title_number) {
    m_series_title_number = series_title_number;
    m_series_title_number_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_series_title_number_Set() const{
    return m_series_title_number_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_series_title_number_Valid() const{
    return m_series_title_number_isValid;
}

OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_shipping_cost OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getShippingCost() const {
    return m_shipping_cost;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setShippingCost(const OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_shipping_cost &shipping_cost) {
    m_shipping_cost = shipping_cost;
    m_shipping_cost_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_shipping_cost_Set() const{
    return m_shipping_cost_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_shipping_cost_Valid() const{
    return m_shipping_cost_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getSource() const {
    return m_source;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_source_Set() const{
    return m_source_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::isSpecificEdition() const {
    return m_specific_edition;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setSpecificEdition(const bool &specific_edition) {
    m_specific_edition = specific_edition;
    m_specific_edition_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_specific_edition_Set() const{
    return m_specific_edition_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_specific_edition_Valid() const{
    return m_specific_edition_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getStartPage() const {
    return m_start_page;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setStartPage(const QString &start_page) {
    m_start_page = start_page;
    m_start_page_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_start_page_Set() const{
    return m_start_page_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_start_page_Valid() const{
    return m_start_page_isValid;
}

OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_status OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getStatus() const {
    return m_status;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setStatus(const OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_status_Valid() const{
    return m_status_isValid;
}

OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_supplied_format OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getSuppliedFormat() const {
    return m_supplied_format;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setSuppliedFormat(const OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_supplied_format &supplied_format) {
    m_supplied_format = supplied_format;
    m_supplied_format_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_supplied_format_Set() const{
    return m_supplied_format_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_supplied_format_Valid() const{
    return m_supplied_format_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getTextEmail() const {
    return m_text_email;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setTextEmail(const QString &text_email) {
    m_text_email = text_email;
    m_text_email_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_text_email_Set() const{
    return m_text_email_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_text_email_Valid() const{
    return m_text_email_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getTextPostal1() const {
    return m_text_postal_1;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setTextPostal1(const QString &text_postal_1) {
    m_text_postal_1 = text_postal_1;
    m_text_postal_1_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_text_postal_1_Set() const{
    return m_text_postal_1_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_text_postal_1_Valid() const{
    return m_text_postal_1_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getTextPostal2() const {
    return m_text_postal_2;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setTextPostal2(const QString &text_postal_2) {
    m_text_postal_2 = text_postal_2;
    m_text_postal_2_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_text_postal_2_Set() const{
    return m_text_postal_2_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_text_postal_2_Valid() const{
    return m_text_postal_2_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getTextPostal3() const {
    return m_text_postal_3;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setTextPostal3(const QString &text_postal_3) {
    m_text_postal_3 = text_postal_3;
    m_text_postal_3_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_text_postal_3_Set() const{
    return m_text_postal_3_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_text_postal_3_Valid() const{
    return m_text_postal_3_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getTextPostal4() const {
    return m_text_postal_4;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setTextPostal4(const QString &text_postal_4) {
    m_text_postal_4 = text_postal_4;
    m_text_postal_4_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_text_postal_4_Set() const{
    return m_text_postal_4_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_text_postal_4_Valid() const{
    return m_text_postal_4_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getTitle() const {
    return m_title;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::isUseAlternativeAddress() const {
    return m_use_alternative_address;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setUseAlternativeAddress(const bool &use_alternative_address) {
    m_use_alternative_address = use_alternative_address;
    m_use_alternative_address_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_use_alternative_address_Set() const{
    return m_use_alternative_address_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_use_alternative_address_Valid() const{
    return m_use_alternative_address_isValid;
}

OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_user_request OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getUserRequest() const {
    return m_user_request;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setUserRequest(const OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner_user_request &user_request) {
    m_user_request = user_request;
    m_user_request_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_user_request_Set() const{
    return m_user_request_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_user_request_Valid() const{
    return m_user_request_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getVolume() const {
    return m_volume;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setVolume(const QString &volume) {
    m_volume = volume;
    m_volume_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_volume_Set() const{
    return m_volume_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_volume_Valid() const{
    return m_volume_isValid;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::isWillingToPay() const {
    return m_willing_to_pay;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setWillingToPay(const bool &willing_to_pay) {
    m_willing_to_pay = willing_to_pay;
    m_willing_to_pay_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_willing_to_pay_Set() const{
    return m_willing_to_pay_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_willing_to_pay_Valid() const{
    return m_willing_to_pay_isValid;
}

QString OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::getYear() const {
    return m_year;
}
void OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::setYear(const QString &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_year_Set() const{
    return m_year_isSet;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_barcode.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_person_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agree_to_copyright_terms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_other_formats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_initials_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_barcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bib_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chapter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chapter_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chapter_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_citation_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_copyright_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_editor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fund.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_active_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isbn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_journal_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_interest_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lcc_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_of_service.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lost_damaged_fee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mms_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_need_patron_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oclc_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_standard_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_part_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_location_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_of_publication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pmid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_send_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_printed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reading_room.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_receive_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_record_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_media_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requester.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rs_note.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_title_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_specific_edition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplied_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_postal_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_postal_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_postal_3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_postal_4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_alternative_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_willing_to_pay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_almaws_v1_task_lists_rs_lending_requests_200_response_user_resource_sharing_request_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
