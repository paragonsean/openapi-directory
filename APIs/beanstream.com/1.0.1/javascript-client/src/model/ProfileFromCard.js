/**
 * Beanstream Payments
 * https://www.beanstream.com/api/v1
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProfileFromCard model module.
 * @module model/ProfileFromCard
 * @version 1.0.1
 */
class ProfileFromCard {
    /**
     * Constructs a new <code>ProfileFromCard</code>.
     * @alias module:model/ProfileFromCard
     * @param expiryMonth {String} eg. 02 for February. digits(2)
     * @param expiryYear {String} digits(2)
     * @param name {String} Card holder name. alphanumeric(64)
     * @param number {String} Credit card number (PAN)  digits(20)
     */
    constructor(expiryMonth, expiryYear, name, number) { 
        
        ProfileFromCard.initialize(this, expiryMonth, expiryYear, name, number);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, expiryMonth, expiryYear, name, number) { 
        obj['cvd'] = '123';
        obj['expiry_month'] = expiryMonth || '02';
        obj['expiry_year'] = expiryYear || '18';
        obj['name'] = name || '5100000010001004';
        obj['number'] = number;
    }

    /**
     * Constructs a <code>ProfileFromCard</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProfileFromCard} obj Optional instance to populate.
     * @return {module:model/ProfileFromCard} The populated <code>ProfileFromCard</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProfileFromCard();

            if (data.hasOwnProperty('cvd')) {
                obj['cvd'] = ApiClient.convertToType(data['cvd'], 'String');
            }
            if (data.hasOwnProperty('expiry_month')) {
                obj['expiry_month'] = ApiClient.convertToType(data['expiry_month'], 'String');
            }
            if (data.hasOwnProperty('expiry_year')) {
                obj['expiry_year'] = ApiClient.convertToType(data['expiry_year'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProfileFromCard</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProfileFromCard</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProfileFromCard.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cvd'] && !(typeof data['cvd'] === 'string' || data['cvd'] instanceof String)) {
            throw new Error("Expected the field `cvd` to be a primitive type in the JSON string but got " + data['cvd']);
        }
        // ensure the json data is a string
        if (data['expiry_month'] && !(typeof data['expiry_month'] === 'string' || data['expiry_month'] instanceof String)) {
            throw new Error("Expected the field `expiry_month` to be a primitive type in the JSON string but got " + data['expiry_month']);
        }
        // ensure the json data is a string
        if (data['expiry_year'] && !(typeof data['expiry_year'] === 'string' || data['expiry_year'] instanceof String)) {
            throw new Error("Expected the field `expiry_year` to be a primitive type in the JSON string but got " + data['expiry_year']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }

        return true;
    }


}

ProfileFromCard.RequiredProperties = ["expiry_month", "expiry_year", "name", "number"];

/**
 * Security code on the back of the credit card. This can be set to mandatory in the back office. digits(3)
 * @member {String} cvd
 * @default '123'
 */
ProfileFromCard.prototype['cvd'] = '123';

/**
 * eg. 02 for February. digits(2)
 * @member {String} expiry_month
 * @default '02'
 */
ProfileFromCard.prototype['expiry_month'] = '02';

/**
 * digits(2)
 * @member {String} expiry_year
 * @default '18'
 */
ProfileFromCard.prototype['expiry_year'] = '18';

/**
 * Card holder name. alphanumeric(64)
 * @member {String} name
 * @default '5100000010001004'
 */
ProfileFromCard.prototype['name'] = '5100000010001004';

/**
 * Credit card number (PAN)  digits(20)
 * @member {String} number
 */
ProfileFromCard.prototype['number'] = undefined;






export default ProfileFromCard;

