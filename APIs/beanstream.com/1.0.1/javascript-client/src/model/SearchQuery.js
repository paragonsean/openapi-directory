/**
 * Beanstream Payments
 * https://www.beanstream.com/api/v1
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Criteria from './Criteria';

/**
 * The SearchQuery model module.
 * @module model/SearchQuery
 * @version 1.0.1
 */
class SearchQuery {
    /**
     * Constructs a new <code>SearchQuery</code>.
     * @alias module:model/SearchQuery
     * @param endDate {String} The end date (inclusive) '2015-04-22T10:03:19' in the timezone of your merchant account.
     * @param endRow {Number} Used to page the results. 1-based. This should always be 1 larger than start_row.
     * @param name {String} Only accepts 2 values. Can be either 'Search' for all fields or 'TransHistoryMinimal' for a subset of the fields returned in the results.
     * @param startDate {String} The start date (inclusive) '2015-04-22T10:03:19' in the timezone of your merchant account.
     * @param startRow {Number} Used to page the results. 1-based
     */
    constructor(endDate, endRow, name, startDate, startRow) { 
        
        SearchQuery.initialize(this, endDate, endRow, name, startDate, startRow);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, endDate, endRow, name, startDate, startRow) { 
        obj['end_date'] = endDate;
        obj['end_row'] = endRow;
        obj['name'] = name;
        obj['start_date'] = startDate;
        obj['start_row'] = startRow;
    }

    /**
     * Constructs a <code>SearchQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchQuery} obj Optional instance to populate.
     * @return {module:model/SearchQuery} The populated <code>SearchQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchQuery();

            if (data.hasOwnProperty('criteria')) {
                obj['criteria'] = ApiClient.convertToType(data['criteria'], [Criteria]);
            }
            if (data.hasOwnProperty('end_date')) {
                obj['end_date'] = ApiClient.convertToType(data['end_date'], 'String');
            }
            if (data.hasOwnProperty('end_row')) {
                obj['end_row'] = ApiClient.convertToType(data['end_row'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('start_date')) {
                obj['start_date'] = ApiClient.convertToType(data['start_date'], 'String');
            }
            if (data.hasOwnProperty('start_row')) {
                obj['start_row'] = ApiClient.convertToType(data['start_row'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchQuery</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SearchQuery.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['criteria']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['criteria'])) {
                throw new Error("Expected the field `criteria` to be an array in the JSON data but got " + data['criteria']);
            }
            // validate the optional field `criteria` (array)
            for (const item of data['criteria']) {
                Criteria.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['end_date'] && !(typeof data['end_date'] === 'string' || data['end_date'] instanceof String)) {
            throw new Error("Expected the field `end_date` to be a primitive type in the JSON string but got " + data['end_date']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['start_date'] && !(typeof data['start_date'] === 'string' || data['start_date'] instanceof String)) {
            throw new Error("Expected the field `start_date` to be a primitive type in the JSON string but got " + data['start_date']);
        }

        return true;
    }


}

SearchQuery.RequiredProperties = ["end_date", "end_row", "name", "start_date", "start_row"];

/**
 * Optional search criteria. All criteria are ANDed together.
 * @member {Array.<module:model/Criteria>} criteria
 */
SearchQuery.prototype['criteria'] = undefined;

/**
 * The end date (inclusive) '2015-04-22T10:03:19' in the timezone of your merchant account.
 * @member {String} end_date
 */
SearchQuery.prototype['end_date'] = undefined;

/**
 * Used to page the results. 1-based. This should always be 1 larger than start_row.
 * @member {Number} end_row
 */
SearchQuery.prototype['end_row'] = undefined;

/**
 * Only accepts 2 values. Can be either 'Search' for all fields or 'TransHistoryMinimal' for a subset of the fields returned in the results.
 * @member {String} name
 */
SearchQuery.prototype['name'] = undefined;

/**
 * The start date (inclusive) '2015-04-22T10:03:19' in the timezone of your merchant account.
 * @member {String} start_date
 */
SearchQuery.prototype['start_date'] = undefined;

/**
 * Used to page the results. 1-based
 * @member {Number} start_row
 */
SearchQuery.prototype['start_row'] = undefined;






export default SearchQuery;

