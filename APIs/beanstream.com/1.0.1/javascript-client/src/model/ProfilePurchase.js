/**
 * Beanstream Payments
 * https://www.beanstream.com/api/v1
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProfilePurchase model module.
 * @module model/ProfilePurchase
 * @version 1.0.1
 */
class ProfilePurchase {
    /**
     * Constructs a new <code>ProfilePurchase</code>.
     * @alias module:model/ProfilePurchase
     * @param cardId {Number} Which credit card to use. Starts at 1 for the first card. You must configure how many cards can be stored by visiting the profile options in the back office. digits(1)
     * @param customerCode {String} The payment profile ID. alphanumeric(32)
     */
    constructor(cardId, customerCode) { 
        
        ProfilePurchase.initialize(this, cardId, customerCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cardId, customerCode) { 
        obj['card_id'] = cardId;
        obj['customer_code'] = customerCode;
    }

    /**
     * Constructs a <code>ProfilePurchase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProfilePurchase} obj Optional instance to populate.
     * @return {module:model/ProfilePurchase} The populated <code>ProfilePurchase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProfilePurchase();

            if (data.hasOwnProperty('card_id')) {
                obj['card_id'] = ApiClient.convertToType(data['card_id'], 'Number');
            }
            if (data.hasOwnProperty('complete')) {
                obj['complete'] = ApiClient.convertToType(data['complete'], 'Boolean');
            }
            if (data.hasOwnProperty('customer_code')) {
                obj['customer_code'] = ApiClient.convertToType(data['customer_code'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProfilePurchase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProfilePurchase</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProfilePurchase.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['customer_code'] && !(typeof data['customer_code'] === 'string' || data['customer_code'] instanceof String)) {
            throw new Error("Expected the field `customer_code` to be a primitive type in the JSON string but got " + data['customer_code']);
        }

        return true;
    }


}

ProfilePurchase.RequiredProperties = ["card_id", "customer_code"];

/**
 * Which credit card to use. Starts at 1 for the first card. You must configure how many cards can be stored by visiting the profile options in the back office. digits(1)
 * @member {Number} card_id
 */
ProfilePurchase.prototype['card_id'] = undefined;

/**
 * Set to FALSE for pre-auth. digit(1) or boolean
 * @member {Boolean} complete
 */
ProfilePurchase.prototype['complete'] = undefined;

/**
 * The payment profile ID. alphanumeric(32)
 * @member {String} customer_code
 */
ProfilePurchase.prototype['customer_code'] = undefined;






export default ProfilePurchase;

