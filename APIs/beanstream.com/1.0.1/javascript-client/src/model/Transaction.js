/**
 * Beanstream Payments
 * https://www.beanstream.com/api/v1
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import Adjustment from './Adjustment';
import CardGetTransactionResponse from './CardGetTransactionResponse';
import Custom from './Custom';
import Link from './Link';

/**
 * The Transaction model module.
 * @module model/Transaction
 * @version 1.0.1
 */
class Transaction {
    /**
     * Constructs a new <code>Transaction</code>.
     * @alias module:model/Transaction
     */
    constructor() { 
        
        Transaction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transaction} obj Optional instance to populate.
     * @return {module:model/Transaction} The populated <code>Transaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transaction();

            if (data.hasOwnProperty('adjusted_by')) {
                obj['adjusted_by'] = ApiClient.convertToType(data['adjusted_by'], [Adjustment]);
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('approved')) {
                obj['approved'] = ApiClient.convertToType(data['approved'], 'Boolean');
            }
            if (data.hasOwnProperty('auth_code')) {
                obj['auth_code'] = ApiClient.convertToType(data['auth_code'], 'String');
            }
            if (data.hasOwnProperty('batch_number')) {
                obj['batch_number'] = ApiClient.convertToType(data['batch_number'], 'String');
            }
            if (data.hasOwnProperty('billing')) {
                obj['billing'] = Address.constructFromObject(data['billing']);
            }
            if (data.hasOwnProperty('card')) {
                obj['card'] = CardGetTransactionResponse.constructFromObject(data['card']);
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'String');
            }
            if (data.hasOwnProperty('custom')) {
                obj['custom'] = Custom.constructFromObject(data['custom']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], [Link]);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('message_id')) {
                obj['message_id'] = ApiClient.convertToType(data['message_id'], 'Number');
            }
            if (data.hasOwnProperty('order_number')) {
                obj['order_number'] = ApiClient.convertToType(data['order_number'], 'String');
            }
            if (data.hasOwnProperty('payment_method')) {
                obj['payment_method'] = ApiClient.convertToType(data['payment_method'], 'String');
            }
            if (data.hasOwnProperty('shipping')) {
                obj['shipping'] = Address.constructFromObject(data['shipping']);
            }
            if (data.hasOwnProperty('total_completions')) {
                obj['total_completions'] = ApiClient.convertToType(data['total_completions'], 'Number');
            }
            if (data.hasOwnProperty('total_refunds')) {
                obj['total_refunds'] = ApiClient.convertToType(data['total_refunds'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transaction</code>.
     */
    static validateJSON(data) {
        if (data['adjusted_by']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['adjusted_by'])) {
                throw new Error("Expected the field `adjusted_by` to be an array in the JSON data but got " + data['adjusted_by']);
            }
            // validate the optional field `adjusted_by` (array)
            for (const item of data['adjusted_by']) {
                Adjustment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['auth_code'] && !(typeof data['auth_code'] === 'string' || data['auth_code'] instanceof String)) {
            throw new Error("Expected the field `auth_code` to be a primitive type in the JSON string but got " + data['auth_code']);
        }
        // ensure the json data is a string
        if (data['batch_number'] && !(typeof data['batch_number'] === 'string' || data['batch_number'] instanceof String)) {
            throw new Error("Expected the field `batch_number` to be a primitive type in the JSON string but got " + data['batch_number']);
        }
        // validate the optional field `billing`
        if (data['billing']) { // data not null
          Address.validateJSON(data['billing']);
        }
        // validate the optional field `card`
        if (data['card']) { // data not null
          CardGetTransactionResponse.validateJSON(data['card']);
        }
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // ensure the json data is a string
        if (data['created'] && !(typeof data['created'] === 'string' || data['created'] instanceof String)) {
            throw new Error("Expected the field `created` to be a primitive type in the JSON string but got " + data['created']);
        }
        // validate the optional field `custom`
        if (data['custom']) { // data not null
          Custom.validateJSON(data['custom']);
        }
        if (data['links']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['links'])) {
                throw new Error("Expected the field `links` to be an array in the JSON data but got " + data['links']);
            }
            // validate the optional field `links` (array)
            for (const item of data['links']) {
                Link.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['order_number'] && !(typeof data['order_number'] === 'string' || data['order_number'] instanceof String)) {
            throw new Error("Expected the field `order_number` to be a primitive type in the JSON string but got " + data['order_number']);
        }
        // ensure the json data is a string
        if (data['payment_method'] && !(typeof data['payment_method'] === 'string' || data['payment_method'] instanceof String)) {
            throw new Error("Expected the field `payment_method` to be a primitive type in the JSON string but got " + data['payment_method']);
        }
        // validate the optional field `shipping`
        if (data['shipping']) { // data not null
          Address.validateJSON(data['shipping']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/Adjustment>} adjusted_by
 */
Transaction.prototype['adjusted_by'] = undefined;

/**
 * @member {Number} amount
 */
Transaction.prototype['amount'] = undefined;

/**
 * @member {Boolean} approved
 */
Transaction.prototype['approved'] = undefined;

/**
 * @member {String} auth_code
 */
Transaction.prototype['auth_code'] = undefined;

/**
 * @member {String} batch_number
 */
Transaction.prototype['batch_number'] = undefined;

/**
 * @member {module:model/Address} billing
 */
Transaction.prototype['billing'] = undefined;

/**
 * @member {module:model/CardGetTransactionResponse} card
 */
Transaction.prototype['card'] = undefined;

/**
 * @member {String} comments
 */
Transaction.prototype['comments'] = undefined;

/**
 * The date it was created '2015-04-22T10:03:19.323-07:00'
 * @member {String} created
 */
Transaction.prototype['created'] = undefined;

/**
 * @member {module:model/Custom} custom
 */
Transaction.prototype['custom'] = undefined;

/**
 * @member {Number} id
 */
Transaction.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/Link>} links
 */
Transaction.prototype['links'] = undefined;

/**
 * @member {String} message
 */
Transaction.prototype['message'] = undefined;

/**
 * @member {Number} message_id
 */
Transaction.prototype['message_id'] = undefined;

/**
 * @member {String} order_number
 */
Transaction.prototype['order_number'] = undefined;

/**
 * @member {String} payment_method
 */
Transaction.prototype['payment_method'] = undefined;

/**
 * @member {module:model/Address} shipping
 */
Transaction.prototype['shipping'] = undefined;

/**
 * @member {Number} total_completions
 */
Transaction.prototype['total_completions'] = undefined;

/**
 * @member {Number} total_refunds
 */
Transaction.prototype['total_refunds'] = undefined;

/**
 * @member {String} type
 */
Transaction.prototype['type'] = undefined;






export default Transaction;

