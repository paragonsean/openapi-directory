/**
 * Beanstream Payments
 * https://www.beanstream.com/api/v1
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import Custom from './Custom';
import ProfileFromCard from './ProfileFromCard';
import ProfileFromToken from './ProfileFromToken';

/**
 * The CreateProfileBody model module.
 * @module model/CreateProfileBody
 * @version 1.0.1
 */
class CreateProfileBody {
    /**
     * Constructs a new <code>CreateProfileBody</code>.
     * @alias module:model/CreateProfileBody
     */
    constructor() { 
        
        CreateProfileBody.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateProfileBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateProfileBody} obj Optional instance to populate.
     * @return {module:model/CreateProfileBody} The populated <code>CreateProfileBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateProfileBody();

            if (data.hasOwnProperty('billing')) {
                obj['billing'] = Address.constructFromObject(data['billing']);
            }
            if (data.hasOwnProperty('card')) {
                obj['card'] = ProfileFromCard.constructFromObject(data['card']);
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('custom')) {
                obj['custom'] = Custom.constructFromObject(data['custom']);
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ProfileFromToken.constructFromObject(data['token']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateProfileBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateProfileBody</code>.
     */
    static validateJSON(data) {
        // validate the optional field `billing`
        if (data['billing']) { // data not null
          Address.validateJSON(data['billing']);
        }
        // validate the optional field `card`
        if (data['card']) { // data not null
          ProfileFromCard.validateJSON(data['card']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // validate the optional field `custom`
        if (data['custom']) { // data not null
          Custom.validateJSON(data['custom']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // validate the optional field `token`
        if (data['token']) { // data not null
          ProfileFromToken.validateJSON(data['token']);
        }

        return true;
    }


}



/**
 * @member {module:model/Address} billing
 */
CreateProfileBody.prototype['billing'] = undefined;

/**
 * @member {module:model/ProfileFromCard} card
 */
CreateProfileBody.prototype['card'] = undefined;

/**
 * alphanumeric(256)
 * @member {String} comment
 */
CreateProfileBody.prototype['comment'] = undefined;

/**
 * @member {module:model/Custom} custom
 */
CreateProfileBody.prototype['custom'] = undefined;

/**
 * characters(2)
 * @member {String} language
 */
CreateProfileBody.prototype['language'] = undefined;

/**
 * @member {module:model/ProfileFromToken} token
 */
CreateProfileBody.prototype['token'] = undefined;






export default CreateProfileBody;

