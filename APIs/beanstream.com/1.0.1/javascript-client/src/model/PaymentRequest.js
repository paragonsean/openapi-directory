/**
 * Beanstream Payments
 * https://www.beanstream.com/api/v1
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import Card from './Card';
import Custom from './Custom';
import ProfilePurchase from './ProfilePurchase';
import TokenPurchase from './TokenPurchase';

/**
 * The PaymentRequest model module.
 * @module model/PaymentRequest
 * @version 1.0.1
 */
class PaymentRequest {
    /**
     * Constructs a new <code>PaymentRequest</code>.
     * @alias module:model/PaymentRequest
     * @param amount {Number} A decimal value in dollars, or relevant currency. digits(9)
     * @param paymentMethod {String} One of (card, token, payment_profile, cash, cheque). characters(20)
     */
    constructor(amount, paymentMethod) { 
        
        PaymentRequest.initialize(this, amount, paymentMethod);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, paymentMethod) { 
        obj['amount'] = amount;
        obj['payment_method'] = paymentMethod;
    }

    /**
     * Constructs a <code>PaymentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentRequest} obj Optional instance to populate.
     * @return {module:model/PaymentRequest} The populated <code>PaymentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentRequest();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('billing')) {
                obj['billing'] = Address.constructFromObject(data['billing']);
            }
            if (data.hasOwnProperty('card')) {
                obj['card'] = Card.constructFromObject(data['card']);
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('custom')) {
                obj['custom'] = Custom.constructFromObject(data['custom']);
            }
            if (data.hasOwnProperty('customer_ip')) {
                obj['customer_ip'] = ApiClient.convertToType(data['customer_ip'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('order_number')) {
                obj['order_number'] = ApiClient.convertToType(data['order_number'], 'String');
            }
            if (data.hasOwnProperty('payment_method')) {
                obj['payment_method'] = ApiClient.convertToType(data['payment_method'], 'String');
            }
            if (data.hasOwnProperty('payment_profile')) {
                obj['payment_profile'] = ProfilePurchase.constructFromObject(data['payment_profile']);
            }
            if (data.hasOwnProperty('shipping')) {
                obj['shipping'] = Address.constructFromObject(data['shipping']);
            }
            if (data.hasOwnProperty('term_url')) {
                obj['term_url'] = ApiClient.convertToType(data['term_url'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = TokenPurchase.constructFromObject(data['token']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `billing`
        if (data['billing']) { // data not null
          Address.validateJSON(data['billing']);
        }
        // validate the optional field `card`
        if (data['card']) { // data not null
          Card.validateJSON(data['card']);
        }
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // validate the optional field `custom`
        if (data['custom']) { // data not null
          Custom.validateJSON(data['custom']);
        }
        // ensure the json data is a string
        if (data['customer_ip'] && !(typeof data['customer_ip'] === 'string' || data['customer_ip'] instanceof String)) {
            throw new Error("Expected the field `customer_ip` to be a primitive type in the JSON string but got " + data['customer_ip']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['order_number'] && !(typeof data['order_number'] === 'string' || data['order_number'] instanceof String)) {
            throw new Error("Expected the field `order_number` to be a primitive type in the JSON string but got " + data['order_number']);
        }
        // ensure the json data is a string
        if (data['payment_method'] && !(typeof data['payment_method'] === 'string' || data['payment_method'] instanceof String)) {
            throw new Error("Expected the field `payment_method` to be a primitive type in the JSON string but got " + data['payment_method']);
        }
        // validate the optional field `payment_profile`
        if (data['payment_profile']) { // data not null
          ProfilePurchase.validateJSON(data['payment_profile']);
        }
        // validate the optional field `shipping`
        if (data['shipping']) { // data not null
          Address.validateJSON(data['shipping']);
        }
        // ensure the json data is a string
        if (data['term_url'] && !(typeof data['term_url'] === 'string' || data['term_url'] instanceof String)) {
            throw new Error("Expected the field `term_url` to be a primitive type in the JSON string but got " + data['term_url']);
        }
        // validate the optional field `token`
        if (data['token']) { // data not null
          TokenPurchase.validateJSON(data['token']);
        }

        return true;
    }


}

PaymentRequest.RequiredProperties = ["amount", "payment_method"];

/**
 * A decimal value in dollars, or relevant currency. digits(9)
 * @member {Number} amount
 */
PaymentRequest.prototype['amount'] = undefined;

/**
 * @member {module:model/Address} billing
 */
PaymentRequest.prototype['billing'] = undefined;

/**
 * @member {module:model/Card} card
 */
PaymentRequest.prototype['card'] = undefined;

/**
 * alphanumeric (256)
 * @member {String} comments
 */
PaymentRequest.prototype['comments'] = undefined;

/**
 * @member {module:model/Custom} custom
 */
PaymentRequest.prototype['custom'] = undefined;

/**
 * alphanumeric (30)
 * @member {String} customer_ip
 */
PaymentRequest.prototype['customer_ip'] = undefined;

/**
 * characters (3)
 * @member {String} language
 */
PaymentRequest.prototype['language'] = undefined;

/**
 * A unique order number. alphanumeric(30)
 * @member {String} order_number
 */
PaymentRequest.prototype['order_number'] = undefined;

/**
 * One of (card, token, payment_profile, cash, cheque). characters(20)
 * @member {String} payment_method
 */
PaymentRequest.prototype['payment_method'] = undefined;

/**
 * @member {module:model/ProfilePurchase} payment_profile
 */
PaymentRequest.prototype['payment_profile'] = undefined;

/**
 * @member {module:model/Address} shipping
 */
PaymentRequest.prototype['shipping'] = undefined;

/**
 * alphanumeric (256)
 * @member {String} term_url
 */
PaymentRequest.prototype['term_url'] = undefined;

/**
 * @member {module:model/TokenPurchase} token
 */
PaymentRequest.prototype['token'] = undefined;






export default PaymentRequest;

