/**
 * Beanstream Payments
 * https://www.beanstream.com/api/v1
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Custom model module.
 * @module model/Custom
 * @version 1.0.1
 */
class Custom {
    /**
     * Constructs a new <code>Custom</code>.
     * @alias module:model/Custom
     */
    constructor() { 
        
        Custom.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Custom</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Custom} obj Optional instance to populate.
     * @return {module:model/Custom} The populated <code>Custom</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Custom();

            if (data.hasOwnProperty('ref1')) {
                obj['ref1'] = ApiClient.convertToType(data['ref1'], 'String');
            }
            if (data.hasOwnProperty('ref2')) {
                obj['ref2'] = ApiClient.convertToType(data['ref2'], 'String');
            }
            if (data.hasOwnProperty('ref3')) {
                obj['ref3'] = ApiClient.convertToType(data['ref3'], 'String');
            }
            if (data.hasOwnProperty('ref4')) {
                obj['ref4'] = ApiClient.convertToType(data['ref4'], 'String');
            }
            if (data.hasOwnProperty('ref5')) {
                obj['ref5'] = ApiClient.convertToType(data['ref5'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Custom</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Custom</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ref1'] && !(typeof data['ref1'] === 'string' || data['ref1'] instanceof String)) {
            throw new Error("Expected the field `ref1` to be a primitive type in the JSON string but got " + data['ref1']);
        }
        // ensure the json data is a string
        if (data['ref2'] && !(typeof data['ref2'] === 'string' || data['ref2'] instanceof String)) {
            throw new Error("Expected the field `ref2` to be a primitive type in the JSON string but got " + data['ref2']);
        }
        // ensure the json data is a string
        if (data['ref3'] && !(typeof data['ref3'] === 'string' || data['ref3'] instanceof String)) {
            throw new Error("Expected the field `ref3` to be a primitive type in the JSON string but got " + data['ref3']);
        }
        // ensure the json data is a string
        if (data['ref4'] && !(typeof data['ref4'] === 'string' || data['ref4'] instanceof String)) {
            throw new Error("Expected the field `ref4` to be a primitive type in the JSON string but got " + data['ref4']);
        }
        // ensure the json data is a string
        if (data['ref5'] && !(typeof data['ref5'] === 'string' || data['ref5'] instanceof String)) {
            throw new Error("Expected the field `ref5` to be a primitive type in the JSON string but got " + data['ref5']);
        }

        return true;
    }


}



/**
 * alphanumeric (256)
 * @member {String} ref1
 */
Custom.prototype['ref1'] = undefined;

/**
 * alphanumeric (256)
 * @member {String} ref2
 */
Custom.prototype['ref2'] = undefined;

/**
 * alphanumeric (256)
 * @member {String} ref3
 */
Custom.prototype['ref3'] = undefined;

/**
 * alphanumeric (256)
 * @member {String} ref4
 */
Custom.prototype['ref4'] = undefined;

/**
 * alphanumeric (256)
 * @member {String} ref5
 */
Custom.prototype['ref5'] = undefined;






export default Custom;

