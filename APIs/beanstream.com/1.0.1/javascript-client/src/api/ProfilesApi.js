/**
 * Beanstream Payments
 * https://www.beanstream.com/api/v1
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BeanstreamException from '../model/BeanstreamException';
import CreateProfileBody from '../model/CreateProfileBody';
import PaymentProfile from '../model/PaymentProfile';
import ProfileCard from '../model/ProfileCard';
import ProfileGetCards from '../model/ProfileGetCards';
import ProfileResponse from '../model/ProfileResponse';
import UpdateProfileBody from '../model/UpdateProfileBody';

/**
* Profiles service.
* @module api/ProfilesApi
* @version 1.0.1
*/
export default class ProfilesApi {

    /**
    * Constructs a new ProfilesApi. 
    * @alias module:api/ProfilesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the profilesPost operation.
     * @callback module:api/ProfilesApi~profilesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Profile
     * Create a new Payment Profile using either a card or a Legato token. You must supply one of them.
     * @param {module:model/CreateProfileBody} createProfileBody 
     * @param {module:api/ProfilesApi~profilesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileResponse}
     */
    profilesPost(createProfileBody, callback) {
      let postBody = createProfileBody;
      // verify the required parameter 'createProfileBody' is set
      if (createProfileBody === undefined || createProfileBody === null) {
        throw new Error("Missing the required parameter 'createProfileBody' when calling profilesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProfileResponse;
      return this.apiClient.callApi(
        '/profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profilesProfileIdCardsCardIdDelete operation.
     * @callback module:api/ProfilesApi~profilesProfileIdCardsCardIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete card
     * Delete a card on the profile.
     * @param {String} profileId The profile id. (aka CustomerCode)
     * @param {Number} cardId The card id.
     * @param {module:api/ProfilesApi~profilesProfileIdCardsCardIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileResponse}
     */
    profilesProfileIdCardsCardIdDelete(profileId, cardId, callback) {
      let postBody = null;
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling profilesProfileIdCardsCardIdDelete");
      }
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling profilesProfileIdCardsCardIdDelete");
      }

      let pathParams = {
        'profileId': profileId,
        'cardId': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProfileResponse;
      return this.apiClient.callApi(
        '/profiles/{profileId}/cards/{cardId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profilesProfileIdCardsCardIdPut operation.
     * @callback module:api/ProfilesApi~profilesProfileIdCardsCardIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update card
     * Update the details of a card on the profile.
     * @param {String} profileId The profile id. (aka CustomerCode)
     * @param {Number} cardId The card id.
     * @param {module:model/ProfileCard} card The card that will be updated on the profile.
     * @param {module:api/ProfilesApi~profilesProfileIdCardsCardIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileResponse}
     */
    profilesProfileIdCardsCardIdPut(profileId, cardId, card, callback) {
      let postBody = card;
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling profilesProfileIdCardsCardIdPut");
      }
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling profilesProfileIdCardsCardIdPut");
      }
      // verify the required parameter 'card' is set
      if (card === undefined || card === null) {
        throw new Error("Missing the required parameter 'card' when calling profilesProfileIdCardsCardIdPut");
      }

      let pathParams = {
        'profileId': profileId,
        'cardId': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProfileResponse;
      return this.apiClient.callApi(
        '/profiles/{profileId}/cards/{cardId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profilesProfileIdCardsGet operation.
     * @callback module:api/ProfilesApi~profilesProfileIdCardsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileGetCards} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cards
     * Get all of the cards on the profile.
     * @param {String} profileId The profile id. (aka CustomerCode)
     * @param {module:api/ProfilesApi~profilesProfileIdCardsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileGetCards}
     */
    profilesProfileIdCardsGet(profileId, callback) {
      let postBody = null;
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling profilesProfileIdCardsGet");
      }

      let pathParams = {
        'profileId': profileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProfileGetCards;
      return this.apiClient.callApi(
        '/profiles/{profileId}/cards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profilesProfileIdCardsPost operation.
     * @callback module:api/ProfilesApi~profilesProfileIdCardsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add card
     * Add a card to the profile. Note that there is a default limit of 1 card per profile. You can change this in your Profiles settings in the back office.
     * @param {String} profileId The profile id. (aka CustomerCode)
     * @param {module:model/ProfileCard} card The card that will be added to the profile.
     * @param {module:api/ProfilesApi~profilesProfileIdCardsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileResponse}
     */
    profilesProfileIdCardsPost(profileId, card, callback) {
      let postBody = card;
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling profilesProfileIdCardsPost");
      }
      // verify the required parameter 'card' is set
      if (card === undefined || card === null) {
        throw new Error("Missing the required parameter 'card' when calling profilesProfileIdCardsPost");
      }

      let pathParams = {
        'profileId': profileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProfileResponse;
      return this.apiClient.callApi(
        '/profiles/{profileId}/cards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profilesProfileIdDelete operation.
     * @callback module:api/ProfilesApi~profilesProfileIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete profile
     * Delete a Payment Profile using the profile ID, also known as the Customer Code.
     * @param {String} profileId The profile id. (aka CustomerCode)
     * @param {module:api/ProfilesApi~profilesProfileIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileResponse}
     */
    profilesProfileIdDelete(profileId, callback) {
      let postBody = null;
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling profilesProfileIdDelete");
      }

      let pathParams = {
        'profileId': profileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProfileResponse;
      return this.apiClient.callApi(
        '/profiles/{profileId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profilesProfileIdGet operation.
     * @callback module:api/ProfilesApi~profilesProfileIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get profile
     * Get a Payment Profile using the profile ID, also known as the Customer Code.
     * @param {String} profileId The profile id. (aka CustomerCode)
     * @param {module:api/ProfilesApi~profilesProfileIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentProfile}
     */
    profilesProfileIdGet(profileId, callback) {
      let postBody = null;
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling profilesProfileIdGet");
      }

      let pathParams = {
        'profileId': profileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentProfile;
      return this.apiClient.callApi(
        '/profiles/{profileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profilesProfileIdPut operation.
     * @callback module:api/ProfilesApi~profilesProfileIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Profile
     * Create a new Payment Profile using either a card or a Legato token. You must supply one of them.
     * @param {String} profileId The profile id. (aka CustomerCode)
     * @param {module:model/UpdateProfileBody} updateProfileBody 
     * @param {module:api/ProfilesApi~profilesProfileIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileResponse}
     */
    profilesProfileIdPut(profileId, updateProfileBody, callback) {
      let postBody = updateProfileBody;
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling profilesProfileIdPut");
      }
      // verify the required parameter 'updateProfileBody' is set
      if (updateProfileBody === undefined || updateProfileBody === null) {
        throw new Error("Missing the required parameter 'updateProfileBody' when calling profilesProfileIdPut");
      }

      let pathParams = {
        'profileId': profileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProfileResponse;
      return this.apiClient.callApi(
        '/profiles/{profileId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
