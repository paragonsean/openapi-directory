/**
 * Beanstream Payments
 * https://www.beanstream.com/api/v1
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BeanstreamException from '../model/BeanstreamException';
import PaymentRequest from '../model/PaymentRequest';
import PaymentResponse from '../model/PaymentResponse';
import Return from '../model/Return';
import Transaction from '../model/Transaction';
import Void from '../model/Void';

/**
* Payments service.
* @module api/PaymentsApi
* @version 1.0.1
*/
export default class PaymentsApi {

    /**
    * Constructs a new PaymentsApi. 
    * @alias module:api/PaymentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the paymentsPost operation.
     * @callback module:api/PaymentsApi~paymentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Make Payment
     * Make a payment using credit card, cash, cheque, profile, or token. Each payment type has its own json definition passed in the body. For all payments you have the standard Billing, Shipping, Comments, etc. fields that are optional. Only the amount is required along with the payment data for card, cash, cheque, profile, and token. You must change the payment_method for each payment type. Credit Card - \"card\", Payment Profile - \"payment_profile\", Legato Token - \"token\", Cash - \"cash\", Cheque - \"cheque\", Interac - \"interac\"
     * @param {Object} opts Optional parameters
     * @param {module:model/PaymentRequest} [paymentRequest] 
     * @param {module:api/PaymentsApi~paymentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentResponse}
     */
    paymentsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['paymentRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentResponse;
      return this.apiClient.callApi(
        '/payments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsTransIdCompletionsPost operation.
     * @callback module:api/PaymentsApi~paymentsTransIdCompletionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete pre-auth
     * Complete a pre-authorized payment. The amount of the transaction to complete must be less than or equal to the original pre-auth amount. Complete must be set to true.
     * @param {Number} transId The transaction id.
     * @param {Object} opts Optional parameters
     * @param {module:model/PaymentRequest} [paymentRequest] 
     * @param {module:api/PaymentsApi~paymentsTransIdCompletionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentResponse}
     */
    paymentsTransIdCompletionsPost(transId, opts, callback) {
      opts = opts || {};
      let postBody = opts['paymentRequest'];
      // verify the required parameter 'transId' is set
      if (transId === undefined || transId === null) {
        throw new Error("Missing the required parameter 'transId' when calling paymentsTransIdCompletionsPost");
      }

      let pathParams = {
        'transId': transId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentResponse;
      return this.apiClient.callApi(
        '/payments/{transId}/completions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsTransIdGet operation.
     * @callback module:api/PaymentsApi~paymentsTransIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get payment
     * Get a previous payment (transaction).
     * @param {Number} transId The transaction id.
     * @param {module:api/PaymentsApi~paymentsTransIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transaction}
     */
    paymentsTransIdGet(transId, callback) {
      let postBody = null;
      // verify the required parameter 'transId' is set
      if (transId === undefined || transId === null) {
        throw new Error("Missing the required parameter 'transId' when calling paymentsTransIdGet");
      }

      let pathParams = {
        'transId': transId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Transaction;
      return this.apiClient.callApi(
        '/payments/{transId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsTransIdReturnsPost operation.
     * @callback module:api/PaymentsApi~paymentsTransIdReturnsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return payment
     * Return payment.
     * @param {Number} transId The transaction id.
     * @param {module:model/Return} _return 
     * @param {module:api/PaymentsApi~paymentsTransIdReturnsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentResponse}
     */
    paymentsTransIdReturnsPost(transId, _return, callback) {
      let postBody = _return;
      // verify the required parameter 'transId' is set
      if (transId === undefined || transId === null) {
        throw new Error("Missing the required parameter 'transId' when calling paymentsTransIdReturnsPost");
      }
      // verify the required parameter '_return' is set
      if (_return === undefined || _return === null) {
        throw new Error("Missing the required parameter '_return' when calling paymentsTransIdReturnsPost");
      }

      let pathParams = {
        'transId': transId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentResponse;
      return this.apiClient.callApi(
        '/payments/{transId}/returns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsTransIdVoidPost operation.
     * @callback module:api/PaymentsApi~paymentsTransIdVoidPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Void Transaction
     * Void a transaction. You can void payments, returns, pre-auths, and completions. It will cancel that transaction.
     * @param {Number} transId The transaction id to void.
     * @param {module:model/Void} _void 
     * @param {module:api/PaymentsApi~paymentsTransIdVoidPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentResponse}
     */
    paymentsTransIdVoidPost(transId, _void, callback) {
      let postBody = _void;
      // verify the required parameter 'transId' is set
      if (transId === undefined || transId === null) {
        throw new Error("Missing the required parameter 'transId' when calling paymentsTransIdVoidPost");
      }
      // verify the required parameter '_void' is set
      if (_void === undefined || _void === null) {
        throw new Error("Missing the required parameter '_void' when calling paymentsTransIdVoidPost");
      }

      let pathParams = {
        'transId': transId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentResponse;
      return this.apiClient.callApi(
        '/payments/{transId}/void', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
