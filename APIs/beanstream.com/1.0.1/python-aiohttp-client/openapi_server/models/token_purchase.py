# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TokenPurchase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, complete: bool=None, name: str=None):
        """TokenPurchase - a model defined in OpenAPI

        :param code: The code of this TokenPurchase.
        :param complete: The complete of this TokenPurchase.
        :param name: The name of this TokenPurchase.
        """
        self.openapi_types = {
            'code': str,
            'complete': bool,
            'name': str
        }

        self.attribute_map = {
            'code': 'code',
            'complete': 'complete',
            'name': 'name'
        }

        self._code = code
        self._complete = complete
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TokenPurchase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TokenPurchase of this TokenPurchase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this TokenPurchase.

        the payment token you retrieved from the Legato service. alphanumeric(36)

        :return: The code of this TokenPurchase.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this TokenPurchase.

        the payment token you retrieved from the Legato service. alphanumeric(36)

        :param code: The code of this TokenPurchase.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def complete(self):
        """Gets the complete of this TokenPurchase.

        Set to FALSE for pre-auth

        :return: The complete of this TokenPurchase.
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this TokenPurchase.

        Set to FALSE for pre-auth

        :param complete: The complete of this TokenPurchase.
        :type complete: bool
        """

        self._complete = complete

    @property
    def name(self):
        """Gets the name of this TokenPurchase.

        Card holder name. alphanumeric(64)

        :return: The name of this TokenPurchase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TokenPurchase.

        Card holder name. alphanumeric(64)

        :param name: The name of this TokenPurchase.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
