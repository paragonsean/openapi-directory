# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.detail import Detail
from openapi_server import util


class BeanstreamException(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: int=None, code: int=None, details: List[Detail]=None, message: str=None, reference: str=None):
        """BeanstreamException - a model defined in OpenAPI

        :param category: The category of this BeanstreamException.
        :param code: The code of this BeanstreamException.
        :param details: The details of this BeanstreamException.
        :param message: The message of this BeanstreamException.
        :param reference: The reference of this BeanstreamException.
        """
        self.openapi_types = {
            'category': int,
            'code': int,
            'details': List[Detail],
            'message': str,
            'reference': str
        }

        self.attribute_map = {
            'category': 'category',
            'code': 'code',
            'details': 'details',
            'message': 'message',
            'reference': 'reference'
        }

        self._category = category
        self._code = code
        self._details = details
        self._message = message
        self._reference = reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BeanstreamException':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BeanstreamException of this BeanstreamException.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this BeanstreamException.


        :return: The category of this BeanstreamException.
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this BeanstreamException.


        :param category: The category of this BeanstreamException.
        :type category: int
        """

        self._category = category

    @property
    def code(self):
        """Gets the code of this BeanstreamException.


        :return: The code of this BeanstreamException.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this BeanstreamException.


        :param code: The code of this BeanstreamException.
        :type code: int
        """

        self._code = code

    @property
    def details(self):
        """Gets the details of this BeanstreamException.


        :return: The details of this BeanstreamException.
        :rtype: List[Detail]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this BeanstreamException.


        :param details: The details of this BeanstreamException.
        :type details: List[Detail]
        """

        self._details = details

    @property
    def message(self):
        """Gets the message of this BeanstreamException.


        :return: The message of this BeanstreamException.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this BeanstreamException.


        :param message: The message of this BeanstreamException.
        :type message: str
        """

        self._message = message

    @property
    def reference(self):
        """Gets the reference of this BeanstreamException.


        :return: The reference of this BeanstreamException.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this BeanstreamException.


        :param reference: The reference of this BeanstreamException.
        :type reference: str
        """

        self._reference = reference
