# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.card import Card
from openapi_server.models.custom import Custom
from openapi_server.models.profile_purchase import ProfilePurchase
from openapi_server.models.token_purchase import TokenPurchase
from openapi_server import util


class PaymentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, billing: Address=None, card: Card=None, comments: str=None, custom: Custom=None, customer_ip: str=None, language: str=None, order_number: str=None, payment_method: str=None, payment_profile: ProfilePurchase=None, shipping: Address=None, term_url: str=None, token: TokenPurchase=None):
        """PaymentRequest - a model defined in OpenAPI

        :param amount: The amount of this PaymentRequest.
        :param billing: The billing of this PaymentRequest.
        :param card: The card of this PaymentRequest.
        :param comments: The comments of this PaymentRequest.
        :param custom: The custom of this PaymentRequest.
        :param customer_ip: The customer_ip of this PaymentRequest.
        :param language: The language of this PaymentRequest.
        :param order_number: The order_number of this PaymentRequest.
        :param payment_method: The payment_method of this PaymentRequest.
        :param payment_profile: The payment_profile of this PaymentRequest.
        :param shipping: The shipping of this PaymentRequest.
        :param term_url: The term_url of this PaymentRequest.
        :param token: The token of this PaymentRequest.
        """
        self.openapi_types = {
            'amount': float,
            'billing': Address,
            'card': Card,
            'comments': str,
            'custom': Custom,
            'customer_ip': str,
            'language': str,
            'order_number': str,
            'payment_method': str,
            'payment_profile': ProfilePurchase,
            'shipping': Address,
            'term_url': str,
            'token': TokenPurchase
        }

        self.attribute_map = {
            'amount': 'amount',
            'billing': 'billing',
            'card': 'card',
            'comments': 'comments',
            'custom': 'custom',
            'customer_ip': 'customer_ip',
            'language': 'language',
            'order_number': 'order_number',
            'payment_method': 'payment_method',
            'payment_profile': 'payment_profile',
            'shipping': 'shipping',
            'term_url': 'term_url',
            'token': 'token'
        }

        self._amount = amount
        self._billing = billing
        self._card = card
        self._comments = comments
        self._custom = custom
        self._customer_ip = customer_ip
        self._language = language
        self._order_number = order_number
        self._payment_method = payment_method
        self._payment_profile = payment_profile
        self._shipping = shipping
        self._term_url = term_url
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentRequest of this PaymentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this PaymentRequest.

        A decimal value in dollars, or relevant currency. digits(9)

        :return: The amount of this PaymentRequest.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentRequest.

        A decimal value in dollars, or relevant currency. digits(9)

        :param amount: The amount of this PaymentRequest.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def billing(self):
        """Gets the billing of this PaymentRequest.


        :return: The billing of this PaymentRequest.
        :rtype: Address
        """
        return self._billing

    @billing.setter
    def billing(self, billing):
        """Sets the billing of this PaymentRequest.


        :param billing: The billing of this PaymentRequest.
        :type billing: Address
        """

        self._billing = billing

    @property
    def card(self):
        """Gets the card of this PaymentRequest.


        :return: The card of this PaymentRequest.
        :rtype: Card
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this PaymentRequest.


        :param card: The card of this PaymentRequest.
        :type card: Card
        """

        self._card = card

    @property
    def comments(self):
        """Gets the comments of this PaymentRequest.

        alphanumeric (256)

        :return: The comments of this PaymentRequest.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this PaymentRequest.

        alphanumeric (256)

        :param comments: The comments of this PaymentRequest.
        :type comments: str
        """

        self._comments = comments

    @property
    def custom(self):
        """Gets the custom of this PaymentRequest.


        :return: The custom of this PaymentRequest.
        :rtype: Custom
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this PaymentRequest.


        :param custom: The custom of this PaymentRequest.
        :type custom: Custom
        """

        self._custom = custom

    @property
    def customer_ip(self):
        """Gets the customer_ip of this PaymentRequest.

        alphanumeric (30)

        :return: The customer_ip of this PaymentRequest.
        :rtype: str
        """
        return self._customer_ip

    @customer_ip.setter
    def customer_ip(self, customer_ip):
        """Sets the customer_ip of this PaymentRequest.

        alphanumeric (30)

        :param customer_ip: The customer_ip of this PaymentRequest.
        :type customer_ip: str
        """

        self._customer_ip = customer_ip

    @property
    def language(self):
        """Gets the language of this PaymentRequest.

        characters (3)

        :return: The language of this PaymentRequest.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this PaymentRequest.

        characters (3)

        :param language: The language of this PaymentRequest.
        :type language: str
        """

        self._language = language

    @property
    def order_number(self):
        """Gets the order_number of this PaymentRequest.

        A unique order number. alphanumeric(30)

        :return: The order_number of this PaymentRequest.
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this PaymentRequest.

        A unique order number. alphanumeric(30)

        :param order_number: The order_number of this PaymentRequest.
        :type order_number: str
        """

        self._order_number = order_number

    @property
    def payment_method(self):
        """Gets the payment_method of this PaymentRequest.

        One of (card, token, payment_profile, cash, cheque). characters(20)

        :return: The payment_method of this PaymentRequest.
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this PaymentRequest.

        One of (card, token, payment_profile, cash, cheque). characters(20)

        :param payment_method: The payment_method of this PaymentRequest.
        :type payment_method: str
        """
        if payment_method is None:
            raise ValueError("Invalid value for `payment_method`, must not be `None`")

        self._payment_method = payment_method

    @property
    def payment_profile(self):
        """Gets the payment_profile of this PaymentRequest.


        :return: The payment_profile of this PaymentRequest.
        :rtype: ProfilePurchase
        """
        return self._payment_profile

    @payment_profile.setter
    def payment_profile(self, payment_profile):
        """Sets the payment_profile of this PaymentRequest.


        :param payment_profile: The payment_profile of this PaymentRequest.
        :type payment_profile: ProfilePurchase
        """

        self._payment_profile = payment_profile

    @property
    def shipping(self):
        """Gets the shipping of this PaymentRequest.


        :return: The shipping of this PaymentRequest.
        :rtype: Address
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this PaymentRequest.


        :param shipping: The shipping of this PaymentRequest.
        :type shipping: Address
        """

        self._shipping = shipping

    @property
    def term_url(self):
        """Gets the term_url of this PaymentRequest.

        alphanumeric (256)

        :return: The term_url of this PaymentRequest.
        :rtype: str
        """
        return self._term_url

    @term_url.setter
    def term_url(self, term_url):
        """Sets the term_url of this PaymentRequest.

        alphanumeric (256)

        :param term_url: The term_url of this PaymentRequest.
        :type term_url: str
        """

        self._term_url = term_url

    @property
    def token(self):
        """Gets the token of this PaymentRequest.


        :return: The token of this PaymentRequest.
        :rtype: TokenPurchase
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this PaymentRequest.


        :param token: The token of this PaymentRequest.
        :type token: TokenPurchase
        """

        self._token = token
