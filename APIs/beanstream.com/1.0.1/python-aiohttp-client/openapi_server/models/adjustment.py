# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Adjustment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, approval: float=None, created: str=None, id: float=None, message: str=None, type: str=None, url: str=None):
        """Adjustment - a model defined in OpenAPI

        :param amount: The amount of this Adjustment.
        :param approval: The approval of this Adjustment.
        :param created: The created of this Adjustment.
        :param id: The id of this Adjustment.
        :param message: The message of this Adjustment.
        :param type: The type of this Adjustment.
        :param url: The url of this Adjustment.
        """
        self.openapi_types = {
            'amount': float,
            'approval': float,
            'created': str,
            'id': float,
            'message': str,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'approval': 'approval',
            'created': 'created',
            'id': 'id',
            'message': 'message',
            'type': 'type',
            'url': 'url'
        }

        self._amount = amount
        self._approval = approval
        self._created = created
        self._id = id
        self._message = message
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Adjustment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Adjustment of this Adjustment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this Adjustment.


        :return: The amount of this Adjustment.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Adjustment.


        :param amount: The amount of this Adjustment.
        :type amount: float
        """

        self._amount = amount

    @property
    def approval(self):
        """Gets the approval of this Adjustment.


        :return: The approval of this Adjustment.
        :rtype: float
        """
        return self._approval

    @approval.setter
    def approval(self, approval):
        """Sets the approval of this Adjustment.


        :param approval: The approval of this Adjustment.
        :type approval: float
        """

        self._approval = approval

    @property
    def created(self):
        """Gets the created of this Adjustment.

        The date it was created '2015-04-22T10:03:19.323-07:00'

        :return: The created of this Adjustment.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Adjustment.

        The date it was created '2015-04-22T10:03:19.323-07:00'

        :param created: The created of this Adjustment.
        :type created: str
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this Adjustment.


        :return: The id of this Adjustment.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Adjustment.


        :param id: The id of this Adjustment.
        :type id: float
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this Adjustment.


        :return: The message of this Adjustment.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Adjustment.


        :param message: The message of this Adjustment.
        :type message: str
        """

        self._message = message

    @property
    def type(self):
        """Gets the type of this Adjustment.


        :return: The type of this Adjustment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Adjustment.


        :param type: The type of this Adjustment.
        :type type: str
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this Adjustment.


        :return: The url of this Adjustment.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Adjustment.


        :param url: The url of this Adjustment.
        :type url: str
        """

        self._url = url
