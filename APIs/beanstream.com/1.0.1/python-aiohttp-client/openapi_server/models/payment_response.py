# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.card_purchase_response import CardPurchaseResponse
from openapi_server.models.link import Link
from openapi_server import util


class PaymentResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approved: int=None, auth_code: str=None, card: CardPurchaseResponse=None, created: str=None, id: str=None, links: List[Link]=None, message: str=None, message_id: str=None, order_number: str=None, payment_method: str=None, type: str=None):
        """PaymentResponse - a model defined in OpenAPI

        :param approved: The approved of this PaymentResponse.
        :param auth_code: The auth_code of this PaymentResponse.
        :param card: The card of this PaymentResponse.
        :param created: The created of this PaymentResponse.
        :param id: The id of this PaymentResponse.
        :param links: The links of this PaymentResponse.
        :param message: The message of this PaymentResponse.
        :param message_id: The message_id of this PaymentResponse.
        :param order_number: The order_number of this PaymentResponse.
        :param payment_method: The payment_method of this PaymentResponse.
        :param type: The type of this PaymentResponse.
        """
        self.openapi_types = {
            'approved': int,
            'auth_code': str,
            'card': CardPurchaseResponse,
            'created': str,
            'id': str,
            'links': List[Link],
            'message': str,
            'message_id': str,
            'order_number': str,
            'payment_method': str,
            'type': str
        }

        self.attribute_map = {
            'approved': 'approved',
            'auth_code': 'auth_code',
            'card': 'card',
            'created': 'created',
            'id': 'id',
            'links': 'links',
            'message': 'message',
            'message_id': 'message_id',
            'order_number': 'order_number',
            'payment_method': 'payment_method',
            'type': 'type'
        }

        self._approved = approved
        self._auth_code = auth_code
        self._card = card
        self._created = created
        self._id = id
        self._links = links
        self._message = message
        self._message_id = message_id
        self._order_number = order_number
        self._payment_method = payment_method
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentResponse of this PaymentResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approved(self):
        """Gets the approved of this PaymentResponse.

        Approved = 1, declined = 0

        :return: The approved of this PaymentResponse.
        :rtype: int
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this PaymentResponse.

        Approved = 1, declined = 0

        :param approved: The approved of this PaymentResponse.
        :type approved: int
        """

        self._approved = approved

    @property
    def auth_code(self):
        """Gets the auth_code of this PaymentResponse.

        alphanumeric (32)

        :return: The auth_code of this PaymentResponse.
        :rtype: str
        """
        return self._auth_code

    @auth_code.setter
    def auth_code(self, auth_code):
        """Sets the auth_code of this PaymentResponse.

        alphanumeric (32)

        :param auth_code: The auth_code of this PaymentResponse.
        :type auth_code: str
        """

        self._auth_code = auth_code

    @property
    def card(self):
        """Gets the card of this PaymentResponse.


        :return: The card of this PaymentResponse.
        :rtype: CardPurchaseResponse
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this PaymentResponse.


        :param card: The card of this PaymentResponse.
        :type card: CardPurchaseResponse
        """

        self._card = card

    @property
    def created(self):
        """Gets the created of this PaymentResponse.

        alphanumeric (32)

        :return: The created of this PaymentResponse.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this PaymentResponse.

        alphanumeric (32)

        :param created: The created of this PaymentResponse.
        :type created: str
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this PaymentResponse.

        digits (9)

        :return: The id of this PaymentResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentResponse.

        digits (9)

        :param id: The id of this PaymentResponse.
        :type id: str
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this PaymentResponse.


        :return: The links of this PaymentResponse.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PaymentResponse.


        :param links: The links of this PaymentResponse.
        :type links: List[Link]
        """

        self._links = links

    @property
    def message(self):
        """Gets the message of this PaymentResponse.

        alphanumeric (256)

        :return: The message of this PaymentResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PaymentResponse.

        alphanumeric (256)

        :param message: The message of this PaymentResponse.
        :type message: str
        """

        self._message = message

    @property
    def message_id(self):
        """Gets the message_id of this PaymentResponse.

        digits (3)

        :return: The message_id of this PaymentResponse.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this PaymentResponse.

        digits (3)

        :param message_id: The message_id of this PaymentResponse.
        :type message_id: str
        """

        self._message_id = message_id

    @property
    def order_number(self):
        """Gets the order_number of this PaymentResponse.

        alphanumeric (32)

        :return: The order_number of this PaymentResponse.
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this PaymentResponse.

        alphanumeric (32)

        :param order_number: The order_number of this PaymentResponse.
        :type order_number: str
        """

        self._order_number = order_number

    @property
    def payment_method(self):
        """Gets the payment_method of this PaymentResponse.

        characters (16)

        :return: The payment_method of this PaymentResponse.
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this PaymentResponse.

        characters (16)

        :param payment_method: The payment_method of this PaymentResponse.
        :type payment_method: str
        """

        self._payment_method = payment_method

    @property
    def type(self):
        """Gets the type of this PaymentResponse.

        characters (16)

        :return: The type of this PaymentResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaymentResponse.

        characters (16)

        :param type: The type of this PaymentResponse.
        :type type: str
        """

        self._type = type
