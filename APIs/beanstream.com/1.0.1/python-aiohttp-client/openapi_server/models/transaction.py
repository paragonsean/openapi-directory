# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.adjustment import Adjustment
from openapi_server.models.card_get_transaction_response import CardGetTransactionResponse
from openapi_server.models.custom import Custom
from openapi_server.models.link import Link
from openapi_server import util


class Transaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adjusted_by: List[Adjustment]=None, amount: float=None, approved: bool=None, auth_code: str=None, batch_number: str=None, billing: Address=None, card: CardGetTransactionResponse=None, comments: str=None, created: str=None, custom: Custom=None, id: float=None, links: List[Link]=None, message: str=None, message_id: float=None, order_number: str=None, payment_method: str=None, shipping: Address=None, total_completions: float=None, total_refunds: float=None, type: str=None):
        """Transaction - a model defined in OpenAPI

        :param adjusted_by: The adjusted_by of this Transaction.
        :param amount: The amount of this Transaction.
        :param approved: The approved of this Transaction.
        :param auth_code: The auth_code of this Transaction.
        :param batch_number: The batch_number of this Transaction.
        :param billing: The billing of this Transaction.
        :param card: The card of this Transaction.
        :param comments: The comments of this Transaction.
        :param created: The created of this Transaction.
        :param custom: The custom of this Transaction.
        :param id: The id of this Transaction.
        :param links: The links of this Transaction.
        :param message: The message of this Transaction.
        :param message_id: The message_id of this Transaction.
        :param order_number: The order_number of this Transaction.
        :param payment_method: The payment_method of this Transaction.
        :param shipping: The shipping of this Transaction.
        :param total_completions: The total_completions of this Transaction.
        :param total_refunds: The total_refunds of this Transaction.
        :param type: The type of this Transaction.
        """
        self.openapi_types = {
            'adjusted_by': List[Adjustment],
            'amount': float,
            'approved': bool,
            'auth_code': str,
            'batch_number': str,
            'billing': Address,
            'card': CardGetTransactionResponse,
            'comments': str,
            'created': str,
            'custom': Custom,
            'id': float,
            'links': List[Link],
            'message': str,
            'message_id': float,
            'order_number': str,
            'payment_method': str,
            'shipping': Address,
            'total_completions': float,
            'total_refunds': float,
            'type': str
        }

        self.attribute_map = {
            'adjusted_by': 'adjusted_by',
            'amount': 'amount',
            'approved': 'approved',
            'auth_code': 'auth_code',
            'batch_number': 'batch_number',
            'billing': 'billing',
            'card': 'card',
            'comments': 'comments',
            'created': 'created',
            'custom': 'custom',
            'id': 'id',
            'links': 'links',
            'message': 'message',
            'message_id': 'message_id',
            'order_number': 'order_number',
            'payment_method': 'payment_method',
            'shipping': 'shipping',
            'total_completions': 'total_completions',
            'total_refunds': 'total_refunds',
            'type': 'type'
        }

        self._adjusted_by = adjusted_by
        self._amount = amount
        self._approved = approved
        self._auth_code = auth_code
        self._batch_number = batch_number
        self._billing = billing
        self._card = card
        self._comments = comments
        self._created = created
        self._custom = custom
        self._id = id
        self._links = links
        self._message = message
        self._message_id = message_id
        self._order_number = order_number
        self._payment_method = payment_method
        self._shipping = shipping
        self._total_completions = total_completions
        self._total_refunds = total_refunds
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transaction of this Transaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adjusted_by(self):
        """Gets the adjusted_by of this Transaction.


        :return: The adjusted_by of this Transaction.
        :rtype: List[Adjustment]
        """
        return self._adjusted_by

    @adjusted_by.setter
    def adjusted_by(self, adjusted_by):
        """Sets the adjusted_by of this Transaction.


        :param adjusted_by: The adjusted_by of this Transaction.
        :type adjusted_by: List[Adjustment]
        """

        self._adjusted_by = adjusted_by

    @property
    def amount(self):
        """Gets the amount of this Transaction.


        :return: The amount of this Transaction.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Transaction.


        :param amount: The amount of this Transaction.
        :type amount: float
        """

        self._amount = amount

    @property
    def approved(self):
        """Gets the approved of this Transaction.


        :return: The approved of this Transaction.
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this Transaction.


        :param approved: The approved of this Transaction.
        :type approved: bool
        """

        self._approved = approved

    @property
    def auth_code(self):
        """Gets the auth_code of this Transaction.


        :return: The auth_code of this Transaction.
        :rtype: str
        """
        return self._auth_code

    @auth_code.setter
    def auth_code(self, auth_code):
        """Sets the auth_code of this Transaction.


        :param auth_code: The auth_code of this Transaction.
        :type auth_code: str
        """

        self._auth_code = auth_code

    @property
    def batch_number(self):
        """Gets the batch_number of this Transaction.


        :return: The batch_number of this Transaction.
        :rtype: str
        """
        return self._batch_number

    @batch_number.setter
    def batch_number(self, batch_number):
        """Sets the batch_number of this Transaction.


        :param batch_number: The batch_number of this Transaction.
        :type batch_number: str
        """

        self._batch_number = batch_number

    @property
    def billing(self):
        """Gets the billing of this Transaction.


        :return: The billing of this Transaction.
        :rtype: Address
        """
        return self._billing

    @billing.setter
    def billing(self, billing):
        """Sets the billing of this Transaction.


        :param billing: The billing of this Transaction.
        :type billing: Address
        """

        self._billing = billing

    @property
    def card(self):
        """Gets the card of this Transaction.


        :return: The card of this Transaction.
        :rtype: CardGetTransactionResponse
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this Transaction.


        :param card: The card of this Transaction.
        :type card: CardGetTransactionResponse
        """

        self._card = card

    @property
    def comments(self):
        """Gets the comments of this Transaction.


        :return: The comments of this Transaction.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Transaction.


        :param comments: The comments of this Transaction.
        :type comments: str
        """

        self._comments = comments

    @property
    def created(self):
        """Gets the created of this Transaction.

        The date it was created '2015-04-22T10:03:19.323-07:00'

        :return: The created of this Transaction.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Transaction.

        The date it was created '2015-04-22T10:03:19.323-07:00'

        :param created: The created of this Transaction.
        :type created: str
        """

        self._created = created

    @property
    def custom(self):
        """Gets the custom of this Transaction.


        :return: The custom of this Transaction.
        :rtype: Custom
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this Transaction.


        :param custom: The custom of this Transaction.
        :type custom: Custom
        """

        self._custom = custom

    @property
    def id(self):
        """Gets the id of this Transaction.


        :return: The id of this Transaction.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Transaction.


        :param id: The id of this Transaction.
        :type id: float
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this Transaction.


        :return: The links of this Transaction.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Transaction.


        :param links: The links of this Transaction.
        :type links: List[Link]
        """

        self._links = links

    @property
    def message(self):
        """Gets the message of this Transaction.


        :return: The message of this Transaction.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Transaction.


        :param message: The message of this Transaction.
        :type message: str
        """

        self._message = message

    @property
    def message_id(self):
        """Gets the message_id of this Transaction.


        :return: The message_id of this Transaction.
        :rtype: float
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this Transaction.


        :param message_id: The message_id of this Transaction.
        :type message_id: float
        """

        self._message_id = message_id

    @property
    def order_number(self):
        """Gets the order_number of this Transaction.


        :return: The order_number of this Transaction.
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this Transaction.


        :param order_number: The order_number of this Transaction.
        :type order_number: str
        """

        self._order_number = order_number

    @property
    def payment_method(self):
        """Gets the payment_method of this Transaction.


        :return: The payment_method of this Transaction.
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this Transaction.


        :param payment_method: The payment_method of this Transaction.
        :type payment_method: str
        """

        self._payment_method = payment_method

    @property
    def shipping(self):
        """Gets the shipping of this Transaction.


        :return: The shipping of this Transaction.
        :rtype: Address
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this Transaction.


        :param shipping: The shipping of this Transaction.
        :type shipping: Address
        """

        self._shipping = shipping

    @property
    def total_completions(self):
        """Gets the total_completions of this Transaction.


        :return: The total_completions of this Transaction.
        :rtype: float
        """
        return self._total_completions

    @total_completions.setter
    def total_completions(self, total_completions):
        """Sets the total_completions of this Transaction.


        :param total_completions: The total_completions of this Transaction.
        :type total_completions: float
        """

        self._total_completions = total_completions

    @property
    def total_refunds(self):
        """Gets the total_refunds of this Transaction.


        :return: The total_refunds of this Transaction.
        :rtype: float
        """
        return self._total_refunds

    @total_refunds.setter
    def total_refunds(self, total_refunds):
        """Sets the total_refunds of this Transaction.


        :param total_refunds: The total_refunds of this Transaction.
        :type total_refunds: float
        """

        self._total_refunds = total_refunds

    @property
    def type(self):
        """Gets the type of this Transaction.


        :return: The type of this Transaction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Transaction.


        :param type: The type of this Transaction.
        :type type: str
        """

        self._type = type
