# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.criteria import Criteria
from openapi_server import util


class SearchQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, criteria: List[Criteria]=None, end_date: str=None, end_row: float=None, name: str=None, start_date: str=None, start_row: float=None):
        """SearchQuery - a model defined in OpenAPI

        :param criteria: The criteria of this SearchQuery.
        :param end_date: The end_date of this SearchQuery.
        :param end_row: The end_row of this SearchQuery.
        :param name: The name of this SearchQuery.
        :param start_date: The start_date of this SearchQuery.
        :param start_row: The start_row of this SearchQuery.
        """
        self.openapi_types = {
            'criteria': List[Criteria],
            'end_date': str,
            'end_row': float,
            'name': str,
            'start_date': str,
            'start_row': float
        }

        self.attribute_map = {
            'criteria': 'criteria',
            'end_date': 'end_date',
            'end_row': 'end_row',
            'name': 'name',
            'start_date': 'start_date',
            'start_row': 'start_row'
        }

        self._criteria = criteria
        self._end_date = end_date
        self._end_row = end_row
        self._name = name
        self._start_date = start_date
        self._start_row = start_row

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchQuery of this SearchQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def criteria(self):
        """Gets the criteria of this SearchQuery.

        Optional search criteria. All criteria are ANDed together.

        :return: The criteria of this SearchQuery.
        :rtype: List[Criteria]
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """Sets the criteria of this SearchQuery.

        Optional search criteria. All criteria are ANDed together.

        :param criteria: The criteria of this SearchQuery.
        :type criteria: List[Criteria]
        """

        self._criteria = criteria

    @property
    def end_date(self):
        """Gets the end_date of this SearchQuery.

        The end date (inclusive) '2015-04-22T10:03:19' in the timezone of your merchant account.

        :return: The end_date of this SearchQuery.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this SearchQuery.

        The end date (inclusive) '2015-04-22T10:03:19' in the timezone of your merchant account.

        :param end_date: The end_date of this SearchQuery.
        :type end_date: str
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")

        self._end_date = end_date

    @property
    def end_row(self):
        """Gets the end_row of this SearchQuery.

        Used to page the results. 1-based. This should always be 1 larger than start_row.

        :return: The end_row of this SearchQuery.
        :rtype: float
        """
        return self._end_row

    @end_row.setter
    def end_row(self, end_row):
        """Sets the end_row of this SearchQuery.

        Used to page the results. 1-based. This should always be 1 larger than start_row.

        :param end_row: The end_row of this SearchQuery.
        :type end_row: float
        """
        if end_row is None:
            raise ValueError("Invalid value for `end_row`, must not be `None`")

        self._end_row = end_row

    @property
    def name(self):
        """Gets the name of this SearchQuery.

        Only accepts 2 values. Can be either 'Search' for all fields or 'TransHistoryMinimal' for a subset of the fields returned in the results.

        :return: The name of this SearchQuery.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SearchQuery.

        Only accepts 2 values. Can be either 'Search' for all fields or 'TransHistoryMinimal' for a subset of the fields returned in the results.

        :param name: The name of this SearchQuery.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def start_date(self):
        """Gets the start_date of this SearchQuery.

        The start date (inclusive) '2015-04-22T10:03:19' in the timezone of your merchant account.

        :return: The start_date of this SearchQuery.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this SearchQuery.

        The start date (inclusive) '2015-04-22T10:03:19' in the timezone of your merchant account.

        :param start_date: The start_date of this SearchQuery.
        :type start_date: str
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date

    @property
    def start_row(self):
        """Gets the start_row of this SearchQuery.

        Used to page the results. 1-based

        :return: The start_row of this SearchQuery.
        :rtype: float
        """
        return self._start_row

    @start_row.setter
    def start_row(self, start_row):
        """Sets the start_row of this SearchQuery.

        Used to page the results. 1-based

        :param start_row: The start_row of this SearchQuery.
        :type start_row: float
        """
        if start_row is None:
            raise ValueError("Invalid value for `start_row`, must not be `None`")

        self._start_row = start_row
