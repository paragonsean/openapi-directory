# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TokenResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, message: str=None, token: str=None, version: int=None):
        """TokenResponse - a model defined in OpenAPI

        :param code: The code of this TokenResponse.
        :param message: The message of this TokenResponse.
        :param token: The token of this TokenResponse.
        :param version: The version of this TokenResponse.
        """
        self.openapi_types = {
            'code': str,
            'message': str,
            'token': str,
            'version': int
        }

        self.attribute_map = {
            'code': 'code',
            'message': 'message',
            'token': 'token',
            'version': 'version'
        }

        self._code = code
        self._message = message
        self._token = token
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TokenResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TokenResponse of this TokenResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this TokenResponse.

        Response code for the message. It can be ignored.

        :return: The code of this TokenResponse.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this TokenResponse.

        Response code for the message. It can be ignored.

        :param code: The code of this TokenResponse.
        :type code: str
        """

        self._code = code

    @property
    def message(self):
        """Gets the message of this TokenResponse.

        Response message with any hints as to what might have gone wrong, if something went wrong.

        :return: The message of this TokenResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TokenResponse.

        Response message with any hints as to what might have gone wrong, if something went wrong.

        :param message: The message of this TokenResponse.
        :type message: str
        """

        self._message = message

    @property
    def token(self):
        """Gets the token of this TokenResponse.

        The token representing the credit card number that you will send to Beanstream for purchases. You will always receive a token, even if the request data is wrong or the card is invalid.

        :return: The token of this TokenResponse.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this TokenResponse.

        The token representing the credit card number that you will send to Beanstream for purchases. You will always receive a token, even if the request data is wrong or the card is invalid.

        :param token: The token of this TokenResponse.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def version(self):
        """Gets the version of this TokenResponse.

        Message version number. Can be ignored.

        :return: The version of this TokenResponse.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TokenResponse.

        Message version number. Can be ignored.

        :param version: The version of this TokenResponse.
        :type version: int
        """

        self._version = version
