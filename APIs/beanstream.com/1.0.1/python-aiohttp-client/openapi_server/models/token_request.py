# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cvd: str=None, expiry_month: str=None, expiry_year: str=None, number: str=None):
        """TokenRequest - a model defined in OpenAPI

        :param cvd: The cvd of this TokenRequest.
        :param expiry_month: The expiry_month of this TokenRequest.
        :param expiry_year: The expiry_year of this TokenRequest.
        :param number: The number of this TokenRequest.
        """
        self.openapi_types = {
            'cvd': str,
            'expiry_month': str,
            'expiry_year': str,
            'number': str
        }

        self.attribute_map = {
            'cvd': 'cvd',
            'expiry_month': 'expiry_month',
            'expiry_year': 'expiry_year',
            'number': 'number'
        }

        self._cvd = cvd
        self._expiry_month = expiry_month
        self._expiry_year = expiry_year
        self._number = number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TokenRequest of this TokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cvd(self):
        """Gets the cvd of this TokenRequest.

        a 3 to 4 digit representation of CVD/CDD. This is the number usually found on the back of the credit card.

        :return: The cvd of this TokenRequest.
        :rtype: str
        """
        return self._cvd

    @cvd.setter
    def cvd(self, cvd):
        """Sets the cvd of this TokenRequest.

        a 3 to 4 digit representation of CVD/CDD. This is the number usually found on the back of the credit card.

        :param cvd: The cvd of this TokenRequest.
        :type cvd: str
        """
        if cvd is None:
            raise ValueError("Invalid value for `cvd`, must not be `None`")

        self._cvd = cvd

    @property
    def expiry_month(self):
        """Gets the expiry_month of this TokenRequest.

        a 2 digit representation of the expiry month. For example March is 03.

        :return: The expiry_month of this TokenRequest.
        :rtype: str
        """
        return self._expiry_month

    @expiry_month.setter
    def expiry_month(self, expiry_month):
        """Sets the expiry_month of this TokenRequest.

        a 2 digit representation of the expiry month. For example March is 03.

        :param expiry_month: The expiry_month of this TokenRequest.
        :type expiry_month: str
        """
        if expiry_month is None:
            raise ValueError("Invalid value for `expiry_month`, must not be `None`")

        self._expiry_month = expiry_month

    @property
    def expiry_year(self):
        """Gets the expiry_year of this TokenRequest.

        a 2 digit representation of the expiry year. For example 2016 is 16.

        :return: The expiry_year of this TokenRequest.
        :rtype: str
        """
        return self._expiry_year

    @expiry_year.setter
    def expiry_year(self, expiry_year):
        """Sets the expiry_year of this TokenRequest.

        a 2 digit representation of the expiry year. For example 2016 is 16.

        :param expiry_year: The expiry_year of this TokenRequest.
        :type expiry_year: str
        """
        if expiry_year is None:
            raise ValueError("Invalid value for `expiry_year`, must not be `None`")

        self._expiry_year = expiry_year

    @property
    def number(self):
        """Gets the number of this TokenRequest.

        The credit card number

        :return: The number of this TokenRequest.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this TokenRequest.

        The credit card number

        :param number: The number of this TokenRequest.
        :type number: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number
