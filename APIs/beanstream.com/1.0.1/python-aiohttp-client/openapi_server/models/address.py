# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_line1: str=None, address_line2: str=None, city: str=None, country: str=None, email_address: str=None, name: str=None, phone_number: str=None, postal_code: str=None, province: str=None):
        """Address - a model defined in OpenAPI

        :param address_line1: The address_line1 of this Address.
        :param address_line2: The address_line2 of this Address.
        :param city: The city of this Address.
        :param country: The country of this Address.
        :param email_address: The email_address of this Address.
        :param name: The name of this Address.
        :param phone_number: The phone_number of this Address.
        :param postal_code: The postal_code of this Address.
        :param province: The province of this Address.
        """
        self.openapi_types = {
            'address_line1': str,
            'address_line2': str,
            'city': str,
            'country': str,
            'email_address': str,
            'name': str,
            'phone_number': str,
            'postal_code': str,
            'province': str
        }

        self.attribute_map = {
            'address_line1': 'address_line1',
            'address_line2': 'address_line2',
            'city': 'city',
            'country': 'country',
            'email_address': 'email_address',
            'name': 'name',
            'phone_number': 'phone_number',
            'postal_code': 'postal_code',
            'province': 'province'
        }

        self._address_line1 = address_line1
        self._address_line2 = address_line2
        self._city = city
        self._country = country
        self._email_address = email_address
        self._name = name
        self._phone_number = phone_number
        self._postal_code = postal_code
        self._province = province

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Address of this Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_line1(self):
        """Gets the address_line1 of this Address.

        alphanumeric (64)

        :return: The address_line1 of this Address.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this Address.

        alphanumeric (64)

        :param address_line1: The address_line1 of this Address.
        :type address_line1: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this Address.

        alphanumeric (64)

        :return: The address_line2 of this Address.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this Address.

        alphanumeric (64)

        :param address_line2: The address_line2 of this Address.
        :type address_line2: str
        """

        self._address_line2 = address_line2

    @property
    def city(self):
        """Gets the city of this Address.

        alphanumeric (32)

        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

        alphanumeric (32)

        :param city: The city of this Address.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this Address.

        characters (2)

        :return: The country of this Address.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.

        characters (2)

        :param country: The country of this Address.
        :type country: str
        """

        self._country = country

    @property
    def email_address(self):
        """Gets the email_address of this Address.

        alphanumeric (32)

        :return: The email_address of this Address.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this Address.

        alphanumeric (32)

        :param email_address: The email_address of this Address.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def name(self):
        """Gets the name of this Address.

        alphanumeric (64)

        :return: The name of this Address.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Address.

        alphanumeric (64)

        :param name: The name of this Address.
        :type name: str
        """

        self._name = name

    @property
    def phone_number(self):
        """Gets the phone_number of this Address.

        alphanumeric (32)

        :return: The phone_number of this Address.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Address.

        alphanumeric (32)

        :param phone_number: The phone_number of this Address.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.

        alphanumeric (16)

        :return: The postal_code of this Address.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.

        alphanumeric (16)

        :param postal_code: The postal_code of this Address.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def province(self):
        """Gets the province of this Address.

        characters (2)

        :return: The province of this Address.
        :rtype: str
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this Address.

        characters (2)

        :param province: The province of this Address.
        :type province: str
        """

        self._province = province
