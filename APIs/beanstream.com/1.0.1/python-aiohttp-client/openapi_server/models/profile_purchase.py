# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProfilePurchase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_id: int=None, complete: bool=None, customer_code: str=None):
        """ProfilePurchase - a model defined in OpenAPI

        :param card_id: The card_id of this ProfilePurchase.
        :param complete: The complete of this ProfilePurchase.
        :param customer_code: The customer_code of this ProfilePurchase.
        """
        self.openapi_types = {
            'card_id': int,
            'complete': bool,
            'customer_code': str
        }

        self.attribute_map = {
            'card_id': 'card_id',
            'complete': 'complete',
            'customer_code': 'customer_code'
        }

        self._card_id = card_id
        self._complete = complete
        self._customer_code = customer_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProfilePurchase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProfilePurchase of this ProfilePurchase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_id(self):
        """Gets the card_id of this ProfilePurchase.

        Which credit card to use. Starts at 1 for the first card. You must configure how many cards can be stored by visiting the profile options in the back office. digits(1)

        :return: The card_id of this ProfilePurchase.
        :rtype: int
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this ProfilePurchase.

        Which credit card to use. Starts at 1 for the first card. You must configure how many cards can be stored by visiting the profile options in the back office. digits(1)

        :param card_id: The card_id of this ProfilePurchase.
        :type card_id: int
        """
        if card_id is None:
            raise ValueError("Invalid value for `card_id`, must not be `None`")

        self._card_id = card_id

    @property
    def complete(self):
        """Gets the complete of this ProfilePurchase.

        Set to FALSE for pre-auth. digit(1) or boolean

        :return: The complete of this ProfilePurchase.
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this ProfilePurchase.

        Set to FALSE for pre-auth. digit(1) or boolean

        :param complete: The complete of this ProfilePurchase.
        :type complete: bool
        """

        self._complete = complete

    @property
    def customer_code(self):
        """Gets the customer_code of this ProfilePurchase.

        The payment profile ID. alphanumeric(32)

        :return: The customer_code of this ProfilePurchase.
        :rtype: str
        """
        return self._customer_code

    @customer_code.setter
    def customer_code(self, customer_code):
        """Sets the customer_code of this ProfilePurchase.

        The payment profile ID. alphanumeric(32)

        :param customer_code: The customer_code of this ProfilePurchase.
        :type customer_code: str
        """
        if customer_code is None:
            raise ValueError("Invalid value for `customer_code`, must not be `None`")

        self._customer_code = customer_code
