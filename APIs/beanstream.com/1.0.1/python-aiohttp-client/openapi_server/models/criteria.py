# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Criteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _field: float=None, operator: str=None, value: str=None):
        """Criteria - a model defined in OpenAPI

        :param _field: The _field of this Criteria.
        :param operator: The operator of this Criteria.
        :param value: The value of this Criteria.
        """
        self.openapi_types = {
            '_field': float,
            'operator': str,
            'value': str
        }

        self.attribute_map = {
            '_field': 'field',
            'operator': 'operator',
            'value': 'value'
        }

        self.__field = _field
        self._operator = operator
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Criteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Criteria of this Criteria.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _field(self):
        """Gets the _field of this Criteria.

        Refer to the table on this page for the searchable fields http://developer.beanstream.com/documentation/analyze-payments/search-specific-criteria/

        :return: The _field of this Criteria.
        :rtype: float
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this Criteria.

        Refer to the table on this page for the searchable fields http://developer.beanstream.com/documentation/analyze-payments/search-specific-criteria/

        :param _field: The _field of this Criteria.
        :type _field: float
        """

        self.__field = _field

    @property
    def operator(self):
        """Gets the operator of this Criteria.

        URL encoded comparators such as less than, greater than, equals... Refer to the table on this page for the full list of comparators http://developer.beanstream.com/documentation/analyze-payments/search-specific-criteria/

        :return: The operator of this Criteria.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this Criteria.

        URL encoded comparators such as less than, greater than, equals... Refer to the table on this page for the full list of comparators http://developer.beanstream.com/documentation/analyze-payments/search-specific-criteria/

        :param operator: The operator of this Criteria.
        :type operator: str
        """

        self._operator = operator

    @property
    def value(self):
        """Gets the value of this Criteria.

        The value you want to match against.

        :return: The value of this Criteria.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Criteria.

        The value you want to match against.

        :param value: The value of this Criteria.
        :type value: str
        """

        self._value = value
