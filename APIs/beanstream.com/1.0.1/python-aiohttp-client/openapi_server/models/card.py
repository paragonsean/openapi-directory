# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Card(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, complete: bool=True, cvd: str='123', expiry_month: str='02', expiry_year: str='18', name: str=None, number: str='5100000010001004'):
        """Card - a model defined in OpenAPI

        :param complete: The complete of this Card.
        :param cvd: The cvd of this Card.
        :param expiry_month: The expiry_month of this Card.
        :param expiry_year: The expiry_year of this Card.
        :param name: The name of this Card.
        :param number: The number of this Card.
        """
        self.openapi_types = {
            'complete': bool,
            'cvd': str,
            'expiry_month': str,
            'expiry_year': str,
            'name': str,
            'number': str
        }

        self.attribute_map = {
            'complete': 'complete',
            'cvd': 'cvd',
            'expiry_month': 'expiry_month',
            'expiry_year': 'expiry_year',
            'name': 'name',
            'number': 'number'
        }

        self._complete = complete
        self._cvd = cvd
        self._expiry_month = expiry_month
        self._expiry_year = expiry_year
        self._name = name
        self._number = number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Card':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Card of this Card.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def complete(self):
        """Gets the complete of this Card.

        set to false for Pre-Authorize, and true to complete a payment

        :return: The complete of this Card.
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this Card.

        set to false for Pre-Authorize, and true to complete a payment

        :param complete: The complete of this Card.
        :type complete: bool
        """

        self._complete = complete

    @property
    def cvd(self):
        """Gets the cvd of this Card.

        Security code on the back of the credit card. This can be set to mandatory in the back office. digits(3 or 4)

        :return: The cvd of this Card.
        :rtype: str
        """
        return self._cvd

    @cvd.setter
    def cvd(self, cvd):
        """Sets the cvd of this Card.

        Security code on the back of the credit card. This can be set to mandatory in the back office. digits(3 or 4)

        :param cvd: The cvd of this Card.
        :type cvd: str
        """

        self._cvd = cvd

    @property
    def expiry_month(self):
        """Gets the expiry_month of this Card.

        eg. 02 for February. digits(2)

        :return: The expiry_month of this Card.
        :rtype: str
        """
        return self._expiry_month

    @expiry_month.setter
    def expiry_month(self, expiry_month):
        """Sets the expiry_month of this Card.

        eg. 02 for February. digits(2)

        :param expiry_month: The expiry_month of this Card.
        :type expiry_month: str
        """
        if expiry_month is None:
            raise ValueError("Invalid value for `expiry_month`, must not be `None`")

        self._expiry_month = expiry_month

    @property
    def expiry_year(self):
        """Gets the expiry_year of this Card.

        eg. 15 for 2015. digits(2)

        :return: The expiry_year of this Card.
        :rtype: str
        """
        return self._expiry_year

    @expiry_year.setter
    def expiry_year(self, expiry_year):
        """Sets the expiry_year of this Card.

        eg. 15 for 2015. digits(2)

        :param expiry_year: The expiry_year of this Card.
        :type expiry_year: str
        """
        if expiry_year is None:
            raise ValueError("Invalid value for `expiry_year`, must not be `None`")

        self._expiry_year = expiry_year

    @property
    def name(self):
        """Gets the name of this Card.

        Card holder name. alphanumeric(64)

        :return: The name of this Card.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Card.

        Card holder name. alphanumeric(64)

        :param name: The name of this Card.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def number(self):
        """Gets the number of this Card.

        Credit card number (PAN). digits(20)

        :return: The number of this Card.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Card.

        Credit card number (PAN). digits(20)

        :param number: The number of this Card.
        :type number: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number
