/**
 * Beanstream Payments
 * https://www.beanstream.com/api/v1
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProfilesApi_H
#define OAI_OAIProfilesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBeanstreamException.h"
#include "OAICreateProfileBody.h"
#include "OAIPaymentProfile.h"
#include "OAIProfileCard.h"
#include "OAIProfileGetCards.h"
#include "OAIProfileResponse.h"
#include "OAIUpdateProfileBody.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProfilesApi : public QObject {
    Q_OBJECT

public:
    OAIProfilesApi(const int timeOut = 0);
    ~OAIProfilesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  create_profile_body OAICreateProfileBody [required]
    */
    virtual void profilesPost(const OAICreateProfileBody &create_profile_body);

    /**
    * @param[in]  profile_id QString [required]
    * @param[in]  card_id double [required]
    */
    virtual void profilesProfileIdCardsCardIdDelete(const QString &profile_id, const double &card_id);

    /**
    * @param[in]  profile_id QString [required]
    * @param[in]  card_id double [required]
    * @param[in]  card OAIProfileCard [required]
    */
    virtual void profilesProfileIdCardsCardIdPut(const QString &profile_id, const double &card_id, const OAIProfileCard &card);

    /**
    * @param[in]  profile_id QString [required]
    */
    virtual void profilesProfileIdCardsGet(const QString &profile_id);

    /**
    * @param[in]  profile_id QString [required]
    * @param[in]  card OAIProfileCard [required]
    */
    virtual void profilesProfileIdCardsPost(const QString &profile_id, const OAIProfileCard &card);

    /**
    * @param[in]  profile_id QString [required]
    */
    virtual void profilesProfileIdDelete(const QString &profile_id);

    /**
    * @param[in]  profile_id QString [required]
    */
    virtual void profilesProfileIdGet(const QString &profile_id);

    /**
    * @param[in]  profile_id QString [required]
    * @param[in]  update_profile_body OAIUpdateProfileBody [required]
    */
    virtual void profilesProfileIdPut(const QString &profile_id, const OAIUpdateProfileBody &update_profile_body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void profilesPostCallback(OAIHttpRequestWorker *worker);
    void profilesProfileIdCardsCardIdDeleteCallback(OAIHttpRequestWorker *worker);
    void profilesProfileIdCardsCardIdPutCallback(OAIHttpRequestWorker *worker);
    void profilesProfileIdCardsGetCallback(OAIHttpRequestWorker *worker);
    void profilesProfileIdCardsPostCallback(OAIHttpRequestWorker *worker);
    void profilesProfileIdDeleteCallback(OAIHttpRequestWorker *worker);
    void profilesProfileIdGetCallback(OAIHttpRequestWorker *worker);
    void profilesProfileIdPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void profilesPostSignal(OAIProfileResponse summary);
    void profilesProfileIdCardsCardIdDeleteSignal(OAIProfileResponse summary);
    void profilesProfileIdCardsCardIdPutSignal(OAIProfileResponse summary);
    void profilesProfileIdCardsGetSignal(OAIProfileGetCards summary);
    void profilesProfileIdCardsPostSignal(OAIProfileResponse summary);
    void profilesProfileIdDeleteSignal(OAIProfileResponse summary);
    void profilesProfileIdGetSignal(OAIPaymentProfile summary);
    void profilesProfileIdPutSignal(OAIProfileResponse summary);


    void profilesPostSignalFull(OAIHttpRequestWorker *worker, OAIProfileResponse summary);
    void profilesProfileIdCardsCardIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIProfileResponse summary);
    void profilesProfileIdCardsCardIdPutSignalFull(OAIHttpRequestWorker *worker, OAIProfileResponse summary);
    void profilesProfileIdCardsGetSignalFull(OAIHttpRequestWorker *worker, OAIProfileGetCards summary);
    void profilesProfileIdCardsPostSignalFull(OAIHttpRequestWorker *worker, OAIProfileResponse summary);
    void profilesProfileIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIProfileResponse summary);
    void profilesProfileIdGetSignalFull(OAIHttpRequestWorker *worker, OAIPaymentProfile summary);
    void profilesProfileIdPutSignalFull(OAIHttpRequestWorker *worker, OAIProfileResponse summary);

    Q_DECL_DEPRECATED_X("Use profilesPostSignalError() instead")
    void profilesPostSignalE(OAIProfileResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesPostSignalError(OAIProfileResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesProfileIdCardsCardIdDeleteSignalError() instead")
    void profilesProfileIdCardsCardIdDeleteSignalE(OAIProfileResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesProfileIdCardsCardIdDeleteSignalError(OAIProfileResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesProfileIdCardsCardIdPutSignalError() instead")
    void profilesProfileIdCardsCardIdPutSignalE(OAIProfileResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesProfileIdCardsCardIdPutSignalError(OAIProfileResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesProfileIdCardsGetSignalError() instead")
    void profilesProfileIdCardsGetSignalE(OAIProfileGetCards summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesProfileIdCardsGetSignalError(OAIProfileGetCards summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesProfileIdCardsPostSignalError() instead")
    void profilesProfileIdCardsPostSignalE(OAIProfileResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesProfileIdCardsPostSignalError(OAIProfileResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesProfileIdDeleteSignalError() instead")
    void profilesProfileIdDeleteSignalE(OAIProfileResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesProfileIdDeleteSignalError(OAIProfileResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesProfileIdGetSignalError() instead")
    void profilesProfileIdGetSignalE(OAIPaymentProfile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesProfileIdGetSignalError(OAIPaymentProfile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesProfileIdPutSignalError() instead")
    void profilesProfileIdPutSignalE(OAIProfileResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesProfileIdPutSignalError(OAIProfileResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use profilesPostSignalErrorFull() instead")
    void profilesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesProfileIdCardsCardIdDeleteSignalErrorFull() instead")
    void profilesProfileIdCardsCardIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesProfileIdCardsCardIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesProfileIdCardsCardIdPutSignalErrorFull() instead")
    void profilesProfileIdCardsCardIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesProfileIdCardsCardIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesProfileIdCardsGetSignalErrorFull() instead")
    void profilesProfileIdCardsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesProfileIdCardsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesProfileIdCardsPostSignalErrorFull() instead")
    void profilesProfileIdCardsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesProfileIdCardsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesProfileIdDeleteSignalErrorFull() instead")
    void profilesProfileIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesProfileIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesProfileIdGetSignalErrorFull() instead")
    void profilesProfileIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesProfileIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesProfileIdPutSignalErrorFull() instead")
    void profilesProfileIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesProfileIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
