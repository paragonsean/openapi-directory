/**
 * Beanstream Payments
 * https://www.beanstream.com/api/v1
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBeanstreamException.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBeanstreamException::OAIBeanstreamException(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBeanstreamException::OAIBeanstreamException() {
    this->initializeModel();
}

OAIBeanstreamException::~OAIBeanstreamException() {}

void OAIBeanstreamException::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;
}

void OAIBeanstreamException::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBeanstreamException::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;
}

QString OAIBeanstreamException::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBeanstreamException::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    return obj;
}

qint32 OAIBeanstreamException::getCategory() const {
    return m_category;
}
void OAIBeanstreamException::setCategory(const qint32 &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIBeanstreamException::is_category_Set() const{
    return m_category_isSet;
}

bool OAIBeanstreamException::is_category_Valid() const{
    return m_category_isValid;
}

qint32 OAIBeanstreamException::getCode() const {
    return m_code;
}
void OAIBeanstreamException::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIBeanstreamException::is_code_Set() const{
    return m_code_isSet;
}

bool OAIBeanstreamException::is_code_Valid() const{
    return m_code_isValid;
}

QList<OAIDetail> OAIBeanstreamException::getDetails() const {
    return m_details;
}
void OAIBeanstreamException::setDetails(const QList<OAIDetail> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIBeanstreamException::is_details_Set() const{
    return m_details_isSet;
}

bool OAIBeanstreamException::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIBeanstreamException::getMessage() const {
    return m_message;
}
void OAIBeanstreamException::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIBeanstreamException::is_message_Set() const{
    return m_message_isSet;
}

bool OAIBeanstreamException::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIBeanstreamException::getReference() const {
    return m_reference;
}
void OAIBeanstreamException::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIBeanstreamException::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIBeanstreamException::is_reference_Valid() const{
    return m_reference_isValid;
}

bool OAIBeanstreamException::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBeanstreamException::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
