/**
 * Beanstream Payments
 * https://www.beanstream.com/api/v1
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdjustment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdjustment::OAIAdjustment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdjustment::OAIAdjustment() {
    this->initializeModel();
}

OAIAdjustment::~OAIAdjustment() {}

void OAIAdjustment::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_approval_isSet = false;
    m_approval_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIAdjustment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdjustment::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_approval_isValid = ::OpenAPI::fromJsonValue(m_approval, json[QString("approval")]);
    m_approval_isSet = !json[QString("approval")].isNull() && m_approval_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIAdjustment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdjustment::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_approval_isSet) {
        obj.insert(QString("approval"), ::OpenAPI::toJsonValue(m_approval));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

double OAIAdjustment::getAmount() const {
    return m_amount;
}
void OAIAdjustment::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIAdjustment::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIAdjustment::is_amount_Valid() const{
    return m_amount_isValid;
}

double OAIAdjustment::getApproval() const {
    return m_approval;
}
void OAIAdjustment::setApproval(const double &approval) {
    m_approval = approval;
    m_approval_isSet = true;
}

bool OAIAdjustment::is_approval_Set() const{
    return m_approval_isSet;
}

bool OAIAdjustment::is_approval_Valid() const{
    return m_approval_isValid;
}

QString OAIAdjustment::getCreated() const {
    return m_created;
}
void OAIAdjustment::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIAdjustment::is_created_Set() const{
    return m_created_isSet;
}

bool OAIAdjustment::is_created_Valid() const{
    return m_created_isValid;
}

double OAIAdjustment::getId() const {
    return m_id;
}
void OAIAdjustment::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAdjustment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAdjustment::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAdjustment::getMessage() const {
    return m_message;
}
void OAIAdjustment::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIAdjustment::is_message_Set() const{
    return m_message_isSet;
}

bool OAIAdjustment::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIAdjustment::getType() const {
    return m_type;
}
void OAIAdjustment::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAdjustment::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAdjustment::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAdjustment::getUrl() const {
    return m_url;
}
void OAIAdjustment::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAdjustment::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAdjustment::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIAdjustment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdjustment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
