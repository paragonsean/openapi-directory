/**
 * Beanstream Payments
 * https://www.beanstream.com/api/v1
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPaymentsApi_H
#define OAI_OAIPaymentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBeanstreamException.h"
#include "OAIPaymentRequest.h"
#include "OAIPaymentResponse.h"
#include "OAIReturn.h"
#include "OAITransaction.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPaymentsApi : public QObject {
    Q_OBJECT

public:
    OAIPaymentsApi(const int timeOut = 0);
    ~OAIPaymentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  payment_request OAIPaymentRequest [optional]
    */
    virtual void paymentsPost(const ::OpenAPI::OptionalParam<OAIPaymentRequest> &payment_request = ::OpenAPI::OptionalParam<OAIPaymentRequest>());

    /**
    * @param[in]  trans_id double [required]
    * @param[in]  payment_request OAIPaymentRequest [optional]
    */
    virtual void paymentsTransIdCompletionsPost(const double &trans_id, const ::OpenAPI::OptionalParam<OAIPaymentRequest> &payment_request = ::OpenAPI::OptionalParam<OAIPaymentRequest>());

    /**
    * @param[in]  trans_id double [required]
    */
    virtual void paymentsTransIdGet(const double &trans_id);

    /**
    * @param[in]  trans_id double [required]
    * @param[in]  r_return OAIReturn [required]
    */
    virtual void paymentsTransIdReturnsPost(const double &trans_id, const OAIReturn &r_return);

    /**
    * @param[in]  trans_id double [required]
    * @param[in]  r_void Void [required]
    */
    virtual void paymentsTransIdVoidPost(const double &trans_id, const Void &r_void);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void paymentsPostCallback(OAIHttpRequestWorker *worker);
    void paymentsTransIdCompletionsPostCallback(OAIHttpRequestWorker *worker);
    void paymentsTransIdGetCallback(OAIHttpRequestWorker *worker);
    void paymentsTransIdReturnsPostCallback(OAIHttpRequestWorker *worker);
    void paymentsTransIdVoidPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void paymentsPostSignal(OAIPaymentResponse summary);
    void paymentsTransIdCompletionsPostSignal(OAIPaymentResponse summary);
    void paymentsTransIdGetSignal(OAITransaction summary);
    void paymentsTransIdReturnsPostSignal(OAIPaymentResponse summary);
    void paymentsTransIdVoidPostSignal(OAIPaymentResponse summary);


    void paymentsPostSignalFull(OAIHttpRequestWorker *worker, OAIPaymentResponse summary);
    void paymentsTransIdCompletionsPostSignalFull(OAIHttpRequestWorker *worker, OAIPaymentResponse summary);
    void paymentsTransIdGetSignalFull(OAIHttpRequestWorker *worker, OAITransaction summary);
    void paymentsTransIdReturnsPostSignalFull(OAIHttpRequestWorker *worker, OAIPaymentResponse summary);
    void paymentsTransIdVoidPostSignalFull(OAIHttpRequestWorker *worker, OAIPaymentResponse summary);

    Q_DECL_DEPRECATED_X("Use paymentsPostSignalError() instead")
    void paymentsPostSignalE(OAIPaymentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsPostSignalError(OAIPaymentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsTransIdCompletionsPostSignalError() instead")
    void paymentsTransIdCompletionsPostSignalE(OAIPaymentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsTransIdCompletionsPostSignalError(OAIPaymentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsTransIdGetSignalError() instead")
    void paymentsTransIdGetSignalE(OAITransaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsTransIdGetSignalError(OAITransaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsTransIdReturnsPostSignalError() instead")
    void paymentsTransIdReturnsPostSignalE(OAIPaymentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsTransIdReturnsPostSignalError(OAIPaymentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsTransIdVoidPostSignalError() instead")
    void paymentsTransIdVoidPostSignalE(OAIPaymentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsTransIdVoidPostSignalError(OAIPaymentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use paymentsPostSignalErrorFull() instead")
    void paymentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsTransIdCompletionsPostSignalErrorFull() instead")
    void paymentsTransIdCompletionsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsTransIdCompletionsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsTransIdGetSignalErrorFull() instead")
    void paymentsTransIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsTransIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsTransIdReturnsPostSignalErrorFull() instead")
    void paymentsTransIdReturnsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsTransIdReturnsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsTransIdVoidPostSignalErrorFull() instead")
    void paymentsTransIdVoidPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsTransIdVoidPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
