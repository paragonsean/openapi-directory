/**
 * Beanstream Payments
 * https://www.beanstream.com/api/v1
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentResponse::OAIPaymentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentResponse::OAIPaymentResponse() {
    this->initializeModel();
}

OAIPaymentResponse::~OAIPaymentResponse() {}

void OAIPaymentResponse::initializeModel() {

    m_approved_isSet = false;
    m_approved_isValid = false;

    m_auth_code_isSet = false;
    m_auth_code_isValid = false;

    m_card_isSet = false;
    m_card_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_order_number_isSet = false;
    m_order_number_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPaymentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentResponse::fromJsonObject(QJsonObject json) {

    m_approved_isValid = ::OpenAPI::fromJsonValue(m_approved, json[QString("approved")]);
    m_approved_isSet = !json[QString("approved")].isNull() && m_approved_isValid;

    m_auth_code_isValid = ::OpenAPI::fromJsonValue(m_auth_code, json[QString("auth_code")]);
    m_auth_code_isSet = !json[QString("auth_code")].isNull() && m_auth_code_isValid;

    m_card_isValid = ::OpenAPI::fromJsonValue(m_card, json[QString("card")]);
    m_card_isSet = !json[QString("card")].isNull() && m_card_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("message_id")]);
    m_message_id_isSet = !json[QString("message_id")].isNull() && m_message_id_isValid;

    m_order_number_isValid = ::OpenAPI::fromJsonValue(m_order_number, json[QString("order_number")]);
    m_order_number_isSet = !json[QString("order_number")].isNull() && m_order_number_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("payment_method")]);
    m_payment_method_isSet = !json[QString("payment_method")].isNull() && m_payment_method_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPaymentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_approved_isSet) {
        obj.insert(QString("approved"), ::OpenAPI::toJsonValue(m_approved));
    }
    if (m_auth_code_isSet) {
        obj.insert(QString("auth_code"), ::OpenAPI::toJsonValue(m_auth_code));
    }
    if (m_card.isSet()) {
        obj.insert(QString("card"), ::OpenAPI::toJsonValue(m_card));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("message_id"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_order_number_isSet) {
        obj.insert(QString("order_number"), ::OpenAPI::toJsonValue(m_order_number));
    }
    if (m_payment_method_isSet) {
        obj.insert(QString("payment_method"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIPaymentResponse::getApproved() const {
    return m_approved;
}
void OAIPaymentResponse::setApproved(const qint32 &approved) {
    m_approved = approved;
    m_approved_isSet = true;
}

bool OAIPaymentResponse::is_approved_Set() const{
    return m_approved_isSet;
}

bool OAIPaymentResponse::is_approved_Valid() const{
    return m_approved_isValid;
}

QString OAIPaymentResponse::getAuthCode() const {
    return m_auth_code;
}
void OAIPaymentResponse::setAuthCode(const QString &auth_code) {
    m_auth_code = auth_code;
    m_auth_code_isSet = true;
}

bool OAIPaymentResponse::is_auth_code_Set() const{
    return m_auth_code_isSet;
}

bool OAIPaymentResponse::is_auth_code_Valid() const{
    return m_auth_code_isValid;
}

OAICardPurchaseResponse OAIPaymentResponse::getCard() const {
    return m_card;
}
void OAIPaymentResponse::setCard(const OAICardPurchaseResponse &card) {
    m_card = card;
    m_card_isSet = true;
}

bool OAIPaymentResponse::is_card_Set() const{
    return m_card_isSet;
}

bool OAIPaymentResponse::is_card_Valid() const{
    return m_card_isValid;
}

QString OAIPaymentResponse::getCreated() const {
    return m_created;
}
void OAIPaymentResponse::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIPaymentResponse::is_created_Set() const{
    return m_created_isSet;
}

bool OAIPaymentResponse::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIPaymentResponse::getId() const {
    return m_id;
}
void OAIPaymentResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPaymentResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPaymentResponse::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAILink> OAIPaymentResponse::getLinks() const {
    return m_links;
}
void OAIPaymentResponse::setLinks(const QList<OAILink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIPaymentResponse::is_links_Set() const{
    return m_links_isSet;
}

bool OAIPaymentResponse::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIPaymentResponse::getMessage() const {
    return m_message;
}
void OAIPaymentResponse::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIPaymentResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAIPaymentResponse::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIPaymentResponse::getMessageId() const {
    return m_message_id;
}
void OAIPaymentResponse::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIPaymentResponse::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIPaymentResponse::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIPaymentResponse::getOrderNumber() const {
    return m_order_number;
}
void OAIPaymentResponse::setOrderNumber(const QString &order_number) {
    m_order_number = order_number;
    m_order_number_isSet = true;
}

bool OAIPaymentResponse::is_order_number_Set() const{
    return m_order_number_isSet;
}

bool OAIPaymentResponse::is_order_number_Valid() const{
    return m_order_number_isValid;
}

QString OAIPaymentResponse::getPaymentMethod() const {
    return m_payment_method;
}
void OAIPaymentResponse::setPaymentMethod(const QString &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAIPaymentResponse::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAIPaymentResponse::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QString OAIPaymentResponse::getType() const {
    return m_type;
}
void OAIPaymentResponse::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPaymentResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPaymentResponse::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPaymentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
