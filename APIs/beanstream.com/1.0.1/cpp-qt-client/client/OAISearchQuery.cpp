/**
 * Beanstream Payments
 * https://www.beanstream.com/api/v1
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchQuery::OAISearchQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchQuery::OAISearchQuery() {
    this->initializeModel();
}

OAISearchQuery::~OAISearchQuery() {}

void OAISearchQuery::initializeModel() {

    m_criteria_isSet = false;
    m_criteria_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_end_row_isSet = false;
    m_end_row_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_start_row_isSet = false;
    m_start_row_isValid = false;
}

void OAISearchQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchQuery::fromJsonObject(QJsonObject json) {

    m_criteria_isValid = ::OpenAPI::fromJsonValue(m_criteria, json[QString("criteria")]);
    m_criteria_isSet = !json[QString("criteria")].isNull() && m_criteria_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("end_date")]);
    m_end_date_isSet = !json[QString("end_date")].isNull() && m_end_date_isValid;

    m_end_row_isValid = ::OpenAPI::fromJsonValue(m_end_row, json[QString("end_row")]);
    m_end_row_isSet = !json[QString("end_row")].isNull() && m_end_row_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("start_date")]);
    m_start_date_isSet = !json[QString("start_date")].isNull() && m_start_date_isValid;

    m_start_row_isValid = ::OpenAPI::fromJsonValue(m_start_row, json[QString("start_row")]);
    m_start_row_isSet = !json[QString("start_row")].isNull() && m_start_row_isValid;
}

QString OAISearchQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_criteria.size() > 0) {
        obj.insert(QString("criteria"), ::OpenAPI::toJsonValue(m_criteria));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("end_date"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_end_row_isSet) {
        obj.insert(QString("end_row"), ::OpenAPI::toJsonValue(m_end_row));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("start_date"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_start_row_isSet) {
        obj.insert(QString("start_row"), ::OpenAPI::toJsonValue(m_start_row));
    }
    return obj;
}

QList<OAICriteria> OAISearchQuery::getCriteria() const {
    return m_criteria;
}
void OAISearchQuery::setCriteria(const QList<OAICriteria> &criteria) {
    m_criteria = criteria;
    m_criteria_isSet = true;
}

bool OAISearchQuery::is_criteria_Set() const{
    return m_criteria_isSet;
}

bool OAISearchQuery::is_criteria_Valid() const{
    return m_criteria_isValid;
}

QString OAISearchQuery::getEndDate() const {
    return m_end_date;
}
void OAISearchQuery::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAISearchQuery::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAISearchQuery::is_end_date_Valid() const{
    return m_end_date_isValid;
}

double OAISearchQuery::getEndRow() const {
    return m_end_row;
}
void OAISearchQuery::setEndRow(const double &end_row) {
    m_end_row = end_row;
    m_end_row_isSet = true;
}

bool OAISearchQuery::is_end_row_Set() const{
    return m_end_row_isSet;
}

bool OAISearchQuery::is_end_row_Valid() const{
    return m_end_row_isValid;
}

QString OAISearchQuery::getName() const {
    return m_name;
}
void OAISearchQuery::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISearchQuery::is_name_Set() const{
    return m_name_isSet;
}

bool OAISearchQuery::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISearchQuery::getStartDate() const {
    return m_start_date;
}
void OAISearchQuery::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAISearchQuery::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAISearchQuery::is_start_date_Valid() const{
    return m_start_date_isValid;
}

double OAISearchQuery::getStartRow() const {
    return m_start_row;
}
void OAISearchQuery::setStartRow(const double &start_row) {
    m_start_row = start_row;
    m_start_row_isSet = true;
}

bool OAISearchQuery::is_start_row_Set() const{
    return m_start_row_isSet;
}

bool OAISearchQuery::is_start_row_Valid() const{
    return m_start_row_isValid;
}

bool OAISearchQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_criteria.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_row_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_row_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_date_isValid && m_end_row_isValid && m_name_isValid && m_start_date_isValid && m_start_row_isValid && true;
}

} // namespace OpenAPI
