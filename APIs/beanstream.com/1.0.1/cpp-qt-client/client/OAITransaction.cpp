/**
 * Beanstream Payments
 * https://www.beanstream.com/api/v1
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransaction::OAITransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransaction::OAITransaction() {
    this->initializeModel();
}

OAITransaction::~OAITransaction() {}

void OAITransaction::initializeModel() {

    m_adjusted_by_isSet = false;
    m_adjusted_by_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_approved_isSet = false;
    m_approved_isValid = false;

    m_auth_code_isSet = false;
    m_auth_code_isValid = false;

    m_batch_number_isSet = false;
    m_batch_number_isValid = false;

    m_billing_isSet = false;
    m_billing_isValid = false;

    m_card_isSet = false;
    m_card_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_isSet = false;
    m_custom_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_order_number_isSet = false;
    m_order_number_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_shipping_isSet = false;
    m_shipping_isValid = false;

    m_total_completions_isSet = false;
    m_total_completions_isValid = false;

    m_total_refunds_isSet = false;
    m_total_refunds_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransaction::fromJsonObject(QJsonObject json) {

    m_adjusted_by_isValid = ::OpenAPI::fromJsonValue(m_adjusted_by, json[QString("adjusted_by")]);
    m_adjusted_by_isSet = !json[QString("adjusted_by")].isNull() && m_adjusted_by_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_approved_isValid = ::OpenAPI::fromJsonValue(m_approved, json[QString("approved")]);
    m_approved_isSet = !json[QString("approved")].isNull() && m_approved_isValid;

    m_auth_code_isValid = ::OpenAPI::fromJsonValue(m_auth_code, json[QString("auth_code")]);
    m_auth_code_isSet = !json[QString("auth_code")].isNull() && m_auth_code_isValid;

    m_batch_number_isValid = ::OpenAPI::fromJsonValue(m_batch_number, json[QString("batch_number")]);
    m_batch_number_isSet = !json[QString("batch_number")].isNull() && m_batch_number_isValid;

    m_billing_isValid = ::OpenAPI::fromJsonValue(m_billing, json[QString("billing")]);
    m_billing_isSet = !json[QString("billing")].isNull() && m_billing_isValid;

    m_card_isValid = ::OpenAPI::fromJsonValue(m_card, json[QString("card")]);
    m_card_isSet = !json[QString("card")].isNull() && m_card_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_isValid = ::OpenAPI::fromJsonValue(m_custom, json[QString("custom")]);
    m_custom_isSet = !json[QString("custom")].isNull() && m_custom_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("message_id")]);
    m_message_id_isSet = !json[QString("message_id")].isNull() && m_message_id_isValid;

    m_order_number_isValid = ::OpenAPI::fromJsonValue(m_order_number, json[QString("order_number")]);
    m_order_number_isSet = !json[QString("order_number")].isNull() && m_order_number_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("payment_method")]);
    m_payment_method_isSet = !json[QString("payment_method")].isNull() && m_payment_method_isValid;

    m_shipping_isValid = ::OpenAPI::fromJsonValue(m_shipping, json[QString("shipping")]);
    m_shipping_isSet = !json[QString("shipping")].isNull() && m_shipping_isValid;

    m_total_completions_isValid = ::OpenAPI::fromJsonValue(m_total_completions, json[QString("total_completions")]);
    m_total_completions_isSet = !json[QString("total_completions")].isNull() && m_total_completions_isValid;

    m_total_refunds_isValid = ::OpenAPI::fromJsonValue(m_total_refunds, json[QString("total_refunds")]);
    m_total_refunds_isSet = !json[QString("total_refunds")].isNull() && m_total_refunds_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_adjusted_by.size() > 0) {
        obj.insert(QString("adjusted_by"), ::OpenAPI::toJsonValue(m_adjusted_by));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_approved_isSet) {
        obj.insert(QString("approved"), ::OpenAPI::toJsonValue(m_approved));
    }
    if (m_auth_code_isSet) {
        obj.insert(QString("auth_code"), ::OpenAPI::toJsonValue(m_auth_code));
    }
    if (m_batch_number_isSet) {
        obj.insert(QString("batch_number"), ::OpenAPI::toJsonValue(m_batch_number));
    }
    if (m_billing.isSet()) {
        obj.insert(QString("billing"), ::OpenAPI::toJsonValue(m_billing));
    }
    if (m_card.isSet()) {
        obj.insert(QString("card"), ::OpenAPI::toJsonValue(m_card));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom.isSet()) {
        obj.insert(QString("custom"), ::OpenAPI::toJsonValue(m_custom));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("message_id"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_order_number_isSet) {
        obj.insert(QString("order_number"), ::OpenAPI::toJsonValue(m_order_number));
    }
    if (m_payment_method_isSet) {
        obj.insert(QString("payment_method"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_shipping.isSet()) {
        obj.insert(QString("shipping"), ::OpenAPI::toJsonValue(m_shipping));
    }
    if (m_total_completions_isSet) {
        obj.insert(QString("total_completions"), ::OpenAPI::toJsonValue(m_total_completions));
    }
    if (m_total_refunds_isSet) {
        obj.insert(QString("total_refunds"), ::OpenAPI::toJsonValue(m_total_refunds));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIAdjustment> OAITransaction::getAdjustedBy() const {
    return m_adjusted_by;
}
void OAITransaction::setAdjustedBy(const QList<OAIAdjustment> &adjusted_by) {
    m_adjusted_by = adjusted_by;
    m_adjusted_by_isSet = true;
}

bool OAITransaction::is_adjusted_by_Set() const{
    return m_adjusted_by_isSet;
}

bool OAITransaction::is_adjusted_by_Valid() const{
    return m_adjusted_by_isValid;
}

double OAITransaction::getAmount() const {
    return m_amount;
}
void OAITransaction::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAITransaction::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAITransaction::is_amount_Valid() const{
    return m_amount_isValid;
}

bool OAITransaction::isApproved() const {
    return m_approved;
}
void OAITransaction::setApproved(const bool &approved) {
    m_approved = approved;
    m_approved_isSet = true;
}

bool OAITransaction::is_approved_Set() const{
    return m_approved_isSet;
}

bool OAITransaction::is_approved_Valid() const{
    return m_approved_isValid;
}

QString OAITransaction::getAuthCode() const {
    return m_auth_code;
}
void OAITransaction::setAuthCode(const QString &auth_code) {
    m_auth_code = auth_code;
    m_auth_code_isSet = true;
}

bool OAITransaction::is_auth_code_Set() const{
    return m_auth_code_isSet;
}

bool OAITransaction::is_auth_code_Valid() const{
    return m_auth_code_isValid;
}

QString OAITransaction::getBatchNumber() const {
    return m_batch_number;
}
void OAITransaction::setBatchNumber(const QString &batch_number) {
    m_batch_number = batch_number;
    m_batch_number_isSet = true;
}

bool OAITransaction::is_batch_number_Set() const{
    return m_batch_number_isSet;
}

bool OAITransaction::is_batch_number_Valid() const{
    return m_batch_number_isValid;
}

OAIAddress OAITransaction::getBilling() const {
    return m_billing;
}
void OAITransaction::setBilling(const OAIAddress &billing) {
    m_billing = billing;
    m_billing_isSet = true;
}

bool OAITransaction::is_billing_Set() const{
    return m_billing_isSet;
}

bool OAITransaction::is_billing_Valid() const{
    return m_billing_isValid;
}

OAICardGetTransactionResponse OAITransaction::getCard() const {
    return m_card;
}
void OAITransaction::setCard(const OAICardGetTransactionResponse &card) {
    m_card = card;
    m_card_isSet = true;
}

bool OAITransaction::is_card_Set() const{
    return m_card_isSet;
}

bool OAITransaction::is_card_Valid() const{
    return m_card_isValid;
}

QString OAITransaction::getComments() const {
    return m_comments;
}
void OAITransaction::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAITransaction::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAITransaction::is_comments_Valid() const{
    return m_comments_isValid;
}

QString OAITransaction::getCreated() const {
    return m_created;
}
void OAITransaction::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAITransaction::is_created_Set() const{
    return m_created_isSet;
}

bool OAITransaction::is_created_Valid() const{
    return m_created_isValid;
}

OAICustom OAITransaction::getCustom() const {
    return m_custom;
}
void OAITransaction::setCustom(const OAICustom &custom) {
    m_custom = custom;
    m_custom_isSet = true;
}

bool OAITransaction::is_custom_Set() const{
    return m_custom_isSet;
}

bool OAITransaction::is_custom_Valid() const{
    return m_custom_isValid;
}

double OAITransaction::getId() const {
    return m_id;
}
void OAITransaction::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITransaction::is_id_Set() const{
    return m_id_isSet;
}

bool OAITransaction::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAILink> OAITransaction::getLinks() const {
    return m_links;
}
void OAITransaction::setLinks(const QList<OAILink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAITransaction::is_links_Set() const{
    return m_links_isSet;
}

bool OAITransaction::is_links_Valid() const{
    return m_links_isValid;
}

QString OAITransaction::getMessage() const {
    return m_message;
}
void OAITransaction::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITransaction::is_message_Set() const{
    return m_message_isSet;
}

bool OAITransaction::is_message_Valid() const{
    return m_message_isValid;
}

double OAITransaction::getMessageId() const {
    return m_message_id;
}
void OAITransaction::setMessageId(const double &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAITransaction::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAITransaction::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAITransaction::getOrderNumber() const {
    return m_order_number;
}
void OAITransaction::setOrderNumber(const QString &order_number) {
    m_order_number = order_number;
    m_order_number_isSet = true;
}

bool OAITransaction::is_order_number_Set() const{
    return m_order_number_isSet;
}

bool OAITransaction::is_order_number_Valid() const{
    return m_order_number_isValid;
}

QString OAITransaction::getPaymentMethod() const {
    return m_payment_method;
}
void OAITransaction::setPaymentMethod(const QString &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAITransaction::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAITransaction::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

OAIAddress OAITransaction::getShipping() const {
    return m_shipping;
}
void OAITransaction::setShipping(const OAIAddress &shipping) {
    m_shipping = shipping;
    m_shipping_isSet = true;
}

bool OAITransaction::is_shipping_Set() const{
    return m_shipping_isSet;
}

bool OAITransaction::is_shipping_Valid() const{
    return m_shipping_isValid;
}

double OAITransaction::getTotalCompletions() const {
    return m_total_completions;
}
void OAITransaction::setTotalCompletions(const double &total_completions) {
    m_total_completions = total_completions;
    m_total_completions_isSet = true;
}

bool OAITransaction::is_total_completions_Set() const{
    return m_total_completions_isSet;
}

bool OAITransaction::is_total_completions_Valid() const{
    return m_total_completions_isValid;
}

double OAITransaction::getTotalRefunds() const {
    return m_total_refunds;
}
void OAITransaction::setTotalRefunds(const double &total_refunds) {
    m_total_refunds = total_refunds;
    m_total_refunds_isSet = true;
}

bool OAITransaction::is_total_refunds_Set() const{
    return m_total_refunds_isSet;
}

bool OAITransaction::is_total_refunds_Valid() const{
    return m_total_refunds_isValid;
}

QString OAITransaction::getType() const {
    return m_type;
}
void OAITransaction::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITransaction::is_type_Set() const{
    return m_type_isSet;
}

bool OAITransaction::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjusted_by.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_completions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_refunds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
