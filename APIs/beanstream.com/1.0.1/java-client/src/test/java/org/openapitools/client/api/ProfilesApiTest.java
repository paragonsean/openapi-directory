/*
 * Beanstream Payments
 * https://www.beanstream.com/api/v1
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BeanstreamException;
import java.math.BigDecimal;
import org.openapitools.client.model.CreateProfileBody;
import org.openapitools.client.model.PaymentProfile;
import org.openapitools.client.model.ProfileCard;
import org.openapitools.client.model.ProfileGetCards;
import org.openapitools.client.model.ProfileResponse;
import org.openapitools.client.model.UpdateProfileBody;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProfilesApi
 */
@Disabled
public class ProfilesApiTest {

    private final ProfilesApi api = new ProfilesApi();

    /**
     * Create Profile
     *
     * Create a new Payment Profile using either a card or a Legato token. You must supply one of them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profilesPostTest() throws ApiException {
        CreateProfileBody createProfileBody = null;
        ProfileResponse response = api.profilesPost(createProfileBody);
        // TODO: test validations
    }

    /**
     * Delete card
     *
     * Delete a card on the profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profilesProfileIdCardsCardIdDeleteTest() throws ApiException {
        String profileId = null;
        BigDecimal cardId = null;
        ProfileResponse response = api.profilesProfileIdCardsCardIdDelete(profileId, cardId);
        // TODO: test validations
    }

    /**
     * Update card
     *
     * Update the details of a card on the profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profilesProfileIdCardsCardIdPutTest() throws ApiException {
        String profileId = null;
        BigDecimal cardId = null;
        ProfileCard card = null;
        ProfileResponse response = api.profilesProfileIdCardsCardIdPut(profileId, cardId, card);
        // TODO: test validations
    }

    /**
     * Get cards
     *
     * Get all of the cards on the profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profilesProfileIdCardsGetTest() throws ApiException {
        String profileId = null;
        ProfileGetCards response = api.profilesProfileIdCardsGet(profileId);
        // TODO: test validations
    }

    /**
     * Add card
     *
     * Add a card to the profile. Note that there is a default limit of 1 card per profile. You can change this in your Profiles settings in the back office.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profilesProfileIdCardsPostTest() throws ApiException {
        String profileId = null;
        ProfileCard card = null;
        ProfileResponse response = api.profilesProfileIdCardsPost(profileId, card);
        // TODO: test validations
    }

    /**
     * Delete profile
     *
     * Delete a Payment Profile using the profile ID, also known as the Customer Code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profilesProfileIdDeleteTest() throws ApiException {
        String profileId = null;
        ProfileResponse response = api.profilesProfileIdDelete(profileId);
        // TODO: test validations
    }

    /**
     * Get profile
     *
     * Get a Payment Profile using the profile ID, also known as the Customer Code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profilesProfileIdGetTest() throws ApiException {
        String profileId = null;
        PaymentProfile response = api.profilesProfileIdGet(profileId);
        // TODO: test validations
    }

    /**
     * Update Profile
     *
     * Create a new Payment Profile using either a card or a Legato token. You must supply one of them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profilesProfileIdPutTest() throws ApiException {
        String profileId = null;
        UpdateProfileBody updateProfileBody = null;
        ProfileResponse response = api.profilesProfileIdPut(profileId, updateProfileBody);
        // TODO: test validations
    }

}
