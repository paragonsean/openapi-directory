/*
 * Beanstream Payments
 * https://www.beanstream.com/api/v1
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BeanstreamException;
import java.math.BigDecimal;
import org.openapitools.client.model.ModelReturn;
import org.openapitools.client.model.ModelVoid;
import org.openapitools.client.model.PaymentRequest;
import org.openapitools.client.model.PaymentResponse;
import org.openapitools.client.model.Transaction;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentsApi
 */
@Disabled
public class PaymentsApiTest {

    private final PaymentsApi api = new PaymentsApi();

    /**
     * Make Payment
     *
     * Make a payment using credit card, cash, cheque, profile, or token. Each payment type has its own json definition passed in the body. For all payments you have the standard Billing, Shipping, Comments, etc. fields that are optional. Only the amount is required along with the payment data for card, cash, cheque, profile, and token. You must change the payment_method for each payment type. Credit Card - \&quot;card\&quot;, Payment Profile - \&quot;payment_profile\&quot;, Legato Token - \&quot;token\&quot;, Cash - \&quot;cash\&quot;, Cheque - \&quot;cheque\&quot;, Interac - \&quot;interac\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentsPostTest() throws ApiException {
        PaymentRequest paymentRequest = null;
        PaymentResponse response = api.paymentsPost(paymentRequest);
        // TODO: test validations
    }

    /**
     * Complete pre-auth
     *
     * Complete a pre-authorized payment. The amount of the transaction to complete must be less than or equal to the original pre-auth amount. Complete must be set to true.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentsTransIdCompletionsPostTest() throws ApiException {
        Double transId = null;
        PaymentRequest paymentRequest = null;
        PaymentResponse response = api.paymentsTransIdCompletionsPost(transId, paymentRequest);
        // TODO: test validations
    }

    /**
     * Get payment
     *
     * Get a previous payment (transaction).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentsTransIdGetTest() throws ApiException {
        BigDecimal transId = null;
        Transaction response = api.paymentsTransIdGet(transId);
        // TODO: test validations
    }

    /**
     * Return payment
     *
     * Return payment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentsTransIdReturnsPostTest() throws ApiException {
        Double transId = null;
        ModelReturn _return = null;
        PaymentResponse response = api.paymentsTransIdReturnsPost(transId, _return);
        // TODO: test validations
    }

    /**
     * Void Transaction
     *
     * Void a transaction. You can void payments, returns, pre-auths, and completions. It will cancel that transaction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentsTransIdVoidPostTest() throws ApiException {
        Double transId = null;
        ModelVoid _void = null;
        PaymentResponse response = api.paymentsTransIdVoidPost(transId, _void);
        // TODO: test validations
    }

}
