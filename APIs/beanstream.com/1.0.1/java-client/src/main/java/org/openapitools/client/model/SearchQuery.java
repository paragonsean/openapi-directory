/*
 * Beanstream Payments
 * https://www.beanstream.com/api/v1
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Criteria;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchQuery
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:42.785280-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchQuery {
  public static final String SERIALIZED_NAME_CRITERIA = "criteria";
  @SerializedName(SERIALIZED_NAME_CRITERIA)
  private List<Criteria> criteria = new ArrayList<>();

  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_END_ROW = "end_row";
  @SerializedName(SERIALIZED_NAME_END_ROW)
  private BigDecimal endRow;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_START_ROW = "start_row";
  @SerializedName(SERIALIZED_NAME_START_ROW)
  private BigDecimal startRow;

  public SearchQuery() {
  }

  public SearchQuery criteria(List<Criteria> criteria) {
    this.criteria = criteria;
    return this;
  }

  public SearchQuery addCriteriaItem(Criteria criteriaItem) {
    if (this.criteria == null) {
      this.criteria = new ArrayList<>();
    }
    this.criteria.add(criteriaItem);
    return this;
  }

  /**
   * Optional search criteria. All criteria are ANDed together.
   * @return criteria
   */
  @javax.annotation.Nullable
  public List<Criteria> getCriteria() {
    return criteria;
  }

  public void setCriteria(List<Criteria> criteria) {
    this.criteria = criteria;
  }


  public SearchQuery endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * The end date (inclusive) &#39;2015-04-22T10:03:19&#39; in the timezone of your merchant account.
   * @return endDate
   */
  @javax.annotation.Nonnull
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public SearchQuery endRow(BigDecimal endRow) {
    this.endRow = endRow;
    return this;
  }

  /**
   * Used to page the results. 1-based. This should always be 1 larger than start_row.
   * @return endRow
   */
  @javax.annotation.Nonnull
  public BigDecimal getEndRow() {
    return endRow;
  }

  public void setEndRow(BigDecimal endRow) {
    this.endRow = endRow;
  }


  public SearchQuery name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Only accepts 2 values. Can be either &#39;Search&#39; for all fields or &#39;TransHistoryMinimal&#39; for a subset of the fields returned in the results.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SearchQuery startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The start date (inclusive) &#39;2015-04-22T10:03:19&#39; in the timezone of your merchant account.
   * @return startDate
   */
  @javax.annotation.Nonnull
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public SearchQuery startRow(BigDecimal startRow) {
    this.startRow = startRow;
    return this;
  }

  /**
   * Used to page the results. 1-based
   * @return startRow
   */
  @javax.annotation.Nonnull
  public BigDecimal getStartRow() {
    return startRow;
  }

  public void setStartRow(BigDecimal startRow) {
    this.startRow = startRow;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchQuery searchQuery = (SearchQuery) o;
    return Objects.equals(this.criteria, searchQuery.criteria) &&
        Objects.equals(this.endDate, searchQuery.endDate) &&
        Objects.equals(this.endRow, searchQuery.endRow) &&
        Objects.equals(this.name, searchQuery.name) &&
        Objects.equals(this.startDate, searchQuery.startDate) &&
        Objects.equals(this.startRow, searchQuery.startRow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(criteria, endDate, endRow, name, startDate, startRow);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchQuery {\n");
    sb.append("    criteria: ").append(toIndentedString(criteria)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    endRow: ").append(toIndentedString(endRow)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    startRow: ").append(toIndentedString(startRow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("criteria");
    openapiFields.add("end_date");
    openapiFields.add("end_row");
    openapiFields.add("name");
    openapiFields.add("start_date");
    openapiFields.add("start_row");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("end_date");
    openapiRequiredFields.add("end_row");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("start_date");
    openapiRequiredFields.add("start_row");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchQuery
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchQuery is not found in the empty JSON string", SearchQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchQuery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchQuery.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("criteria") != null && !jsonObj.get("criteria").isJsonNull()) {
        JsonArray jsonArraycriteria = jsonObj.getAsJsonArray("criteria");
        if (jsonArraycriteria != null) {
          // ensure the json data is an array
          if (!jsonObj.get("criteria").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `criteria` to be an array in the JSON string but got `%s`", jsonObj.get("criteria").toString()));
          }

          // validate the optional field `criteria` (array)
          for (int i = 0; i < jsonArraycriteria.size(); i++) {
            Criteria.validateJsonElement(jsonArraycriteria.get(i));
          };
        }
      }
      if (!jsonObj.get("end_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_date").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_date").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchQuery>() {
           @Override
           public void write(JsonWriter out, SearchQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchQuery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchQuery given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchQuery
   * @throws IOException if the JSON string is invalid with respect to SearchQuery
   */
  public static SearchQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchQuery.class);
  }

  /**
   * Convert an instance of SearchQuery to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

