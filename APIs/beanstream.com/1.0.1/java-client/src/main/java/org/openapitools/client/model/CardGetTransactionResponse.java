/*
 * Beanstream Payments
 * https://www.beanstream.com/api/v1
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CardGetTransactionResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:42.785280-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CardGetTransactionResponse {
  public static final String SERIALIZED_NAME_ADDRESS_MATCH = "address_match";
  @SerializedName(SERIALIZED_NAME_ADDRESS_MATCH)
  private Integer addressMatch;

  public static final String SERIALIZED_NAME_AVS_RESULT = "avs_result";
  @SerializedName(SERIALIZED_NAME_AVS_RESULT)
  private String avsResult;

  public static final String SERIALIZED_NAME_CARD_TYPE = "card_type";
  @SerializedName(SERIALIZED_NAME_CARD_TYPE)
  private String cardType;

  public static final String SERIALIZED_NAME_CVD_MATCH = "cvd_match";
  @SerializedName(SERIALIZED_NAME_CVD_MATCH)
  private Integer cvdMatch;

  public static final String SERIALIZED_NAME_EXPIRY_MONTH = "expiry_month";
  @SerializedName(SERIALIZED_NAME_EXPIRY_MONTH)
  private String expiryMonth;

  public static final String SERIALIZED_NAME_EXPIRY_YEAR = "expiry_year";
  @SerializedName(SERIALIZED_NAME_EXPIRY_YEAR)
  private String expiryYear;

  public static final String SERIALIZED_NAME_LAST_FOUR = "last_four";
  @SerializedName(SERIALIZED_NAME_LAST_FOUR)
  private String lastFour;

  public CardGetTransactionResponse() {
  }

  public CardGetTransactionResponse addressMatch(Integer addressMatch) {
    this.addressMatch = addressMatch;
    return this;
  }

  /**
   * digits (1)
   * @return addressMatch
   */
  @javax.annotation.Nullable
  public Integer getAddressMatch() {
    return addressMatch;
  }

  public void setAddressMatch(Integer addressMatch) {
    this.addressMatch = addressMatch;
  }


  public CardGetTransactionResponse avsResult(String avsResult) {
    this.avsResult = avsResult;
    return this;
  }

  /**
   * characters (1)
   * @return avsResult
   */
  @javax.annotation.Nullable
  public String getAvsResult() {
    return avsResult;
  }

  public void setAvsResult(String avsResult) {
    this.avsResult = avsResult;
  }


  public CardGetTransactionResponse cardType(String cardType) {
    this.cardType = cardType;
    return this;
  }

  /**
   * characters (2)
   * @return cardType
   */
  @javax.annotation.Nullable
  public String getCardType() {
    return cardType;
  }

  public void setCardType(String cardType) {
    this.cardType = cardType;
  }


  public CardGetTransactionResponse cvdMatch(Integer cvdMatch) {
    this.cvdMatch = cvdMatch;
    return this;
  }

  /**
   * digits (2)
   * @return cvdMatch
   */
  @javax.annotation.Nullable
  public Integer getCvdMatch() {
    return cvdMatch;
  }

  public void setCvdMatch(Integer cvdMatch) {
    this.cvdMatch = cvdMatch;
  }


  public CardGetTransactionResponse expiryMonth(String expiryMonth) {
    this.expiryMonth = expiryMonth;
    return this;
  }

  /**
   * characters (2)
   * @return expiryMonth
   */
  @javax.annotation.Nullable
  public String getExpiryMonth() {
    return expiryMonth;
  }

  public void setExpiryMonth(String expiryMonth) {
    this.expiryMonth = expiryMonth;
  }


  public CardGetTransactionResponse expiryYear(String expiryYear) {
    this.expiryYear = expiryYear;
    return this;
  }

  /**
   * characters (2)
   * @return expiryYear
   */
  @javax.annotation.Nullable
  public String getExpiryYear() {
    return expiryYear;
  }

  public void setExpiryYear(String expiryYear) {
    this.expiryYear = expiryYear;
  }


  public CardGetTransactionResponse lastFour(String lastFour) {
    this.lastFour = lastFour;
    return this;
  }

  /**
   * digits (4)
   * @return lastFour
   */
  @javax.annotation.Nullable
  public String getLastFour() {
    return lastFour;
  }

  public void setLastFour(String lastFour) {
    this.lastFour = lastFour;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardGetTransactionResponse cardGetTransactionResponse = (CardGetTransactionResponse) o;
    return Objects.equals(this.addressMatch, cardGetTransactionResponse.addressMatch) &&
        Objects.equals(this.avsResult, cardGetTransactionResponse.avsResult) &&
        Objects.equals(this.cardType, cardGetTransactionResponse.cardType) &&
        Objects.equals(this.cvdMatch, cardGetTransactionResponse.cvdMatch) &&
        Objects.equals(this.expiryMonth, cardGetTransactionResponse.expiryMonth) &&
        Objects.equals(this.expiryYear, cardGetTransactionResponse.expiryYear) &&
        Objects.equals(this.lastFour, cardGetTransactionResponse.lastFour);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressMatch, avsResult, cardType, cvdMatch, expiryMonth, expiryYear, lastFour);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardGetTransactionResponse {\n");
    sb.append("    addressMatch: ").append(toIndentedString(addressMatch)).append("\n");
    sb.append("    avsResult: ").append(toIndentedString(avsResult)).append("\n");
    sb.append("    cardType: ").append(toIndentedString(cardType)).append("\n");
    sb.append("    cvdMatch: ").append(toIndentedString(cvdMatch)).append("\n");
    sb.append("    expiryMonth: ").append(toIndentedString(expiryMonth)).append("\n");
    sb.append("    expiryYear: ").append(toIndentedString(expiryYear)).append("\n");
    sb.append("    lastFour: ").append(toIndentedString(lastFour)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address_match");
    openapiFields.add("avs_result");
    openapiFields.add("card_type");
    openapiFields.add("cvd_match");
    openapiFields.add("expiry_month");
    openapiFields.add("expiry_year");
    openapiFields.add("last_four");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CardGetTransactionResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CardGetTransactionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardGetTransactionResponse is not found in the empty JSON string", CardGetTransactionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CardGetTransactionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CardGetTransactionResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("avs_result") != null && !jsonObj.get("avs_result").isJsonNull()) && !jsonObj.get("avs_result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avs_result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avs_result").toString()));
      }
      if ((jsonObj.get("card_type") != null && !jsonObj.get("card_type").isJsonNull()) && !jsonObj.get("card_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_type").toString()));
      }
      if ((jsonObj.get("expiry_month") != null && !jsonObj.get("expiry_month").isJsonNull()) && !jsonObj.get("expiry_month").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiry_month` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiry_month").toString()));
      }
      if ((jsonObj.get("expiry_year") != null && !jsonObj.get("expiry_year").isJsonNull()) && !jsonObj.get("expiry_year").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiry_year` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiry_year").toString()));
      }
      if ((jsonObj.get("last_four") != null && !jsonObj.get("last_four").isJsonNull()) && !jsonObj.get("last_four").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_four` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_four").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardGetTransactionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardGetTransactionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardGetTransactionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardGetTransactionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CardGetTransactionResponse>() {
           @Override
           public void write(JsonWriter out, CardGetTransactionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CardGetTransactionResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CardGetTransactionResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CardGetTransactionResponse
   * @throws IOException if the JSON string is invalid with respect to CardGetTransactionResponse
   */
  public static CardGetTransactionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardGetTransactionResponse.class);
  }

  /**
   * Convert an instance of CardGetTransactionResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

