/*
 * Beanstream Payments
 * https://www.beanstream.com/api/v1
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BeanstreamException;
import java.math.BigDecimal;
import org.openapitools.client.model.ModelReturn;
import org.openapitools.client.model.ModelVoid;
import org.openapitools.client.model.PaymentRequest;
import org.openapitools.client.model.PaymentResponse;
import org.openapitools.client.model.Transaction;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaymentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for paymentsPost
     * @param paymentRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment response containing the payment details as well as if the payment was approved or declined. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsPostCall(PaymentRequest paymentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentRequest;

        // create path and map variables
        String localVarPath = "/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentsPostValidateBeforeCall(PaymentRequest paymentRequest, final ApiCallback _callback) throws ApiException {
        return paymentsPostCall(paymentRequest, _callback);

    }

    /**
     * Make Payment
     * Make a payment using credit card, cash, cheque, profile, or token. Each payment type has its own json definition passed in the body. For all payments you have the standard Billing, Shipping, Comments, etc. fields that are optional. Only the amount is required along with the payment data for card, cash, cheque, profile, and token. You must change the payment_method for each payment type. Credit Card - \&quot;card\&quot;, Payment Profile - \&quot;payment_profile\&quot;, Legato Token - \&quot;token\&quot;, Cash - \&quot;cash\&quot;, Cheque - \&quot;cheque\&quot;, Interac - \&quot;interac\&quot;
     * @param paymentRequest  (optional)
     * @return PaymentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment response containing the payment details as well as if the payment was approved or declined. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public PaymentResponse paymentsPost(PaymentRequest paymentRequest) throws ApiException {
        ApiResponse<PaymentResponse> localVarResp = paymentsPostWithHttpInfo(paymentRequest);
        return localVarResp.getData();
    }

    /**
     * Make Payment
     * Make a payment using credit card, cash, cheque, profile, or token. Each payment type has its own json definition passed in the body. For all payments you have the standard Billing, Shipping, Comments, etc. fields that are optional. Only the amount is required along with the payment data for card, cash, cheque, profile, and token. You must change the payment_method for each payment type. Credit Card - \&quot;card\&quot;, Payment Profile - \&quot;payment_profile\&quot;, Legato Token - \&quot;token\&quot;, Cash - \&quot;cash\&quot;, Cheque - \&quot;cheque\&quot;, Interac - \&quot;interac\&quot;
     * @param paymentRequest  (optional)
     * @return ApiResponse&lt;PaymentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment response containing the payment details as well as if the payment was approved or declined. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentResponse> paymentsPostWithHttpInfo(PaymentRequest paymentRequest) throws ApiException {
        okhttp3.Call localVarCall = paymentsPostValidateBeforeCall(paymentRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Make Payment (asynchronously)
     * Make a payment using credit card, cash, cheque, profile, or token. Each payment type has its own json definition passed in the body. For all payments you have the standard Billing, Shipping, Comments, etc. fields that are optional. Only the amount is required along with the payment data for card, cash, cheque, profile, and token. You must change the payment_method for each payment type. Credit Card - \&quot;card\&quot;, Payment Profile - \&quot;payment_profile\&quot;, Legato Token - \&quot;token\&quot;, Cash - \&quot;cash\&quot;, Cheque - \&quot;cheque\&quot;, Interac - \&quot;interac\&quot;
     * @param paymentRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment response containing the payment details as well as if the payment was approved or declined. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsPostAsync(PaymentRequest paymentRequest, final ApiCallback<PaymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentsPostValidateBeforeCall(paymentRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentsTransIdCompletionsPost
     * @param transId The transaction id. (required)
     * @param paymentRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment response containing the payment details as well as if the transaction was approved or declined. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsTransIdCompletionsPostCall(Double transId, PaymentRequest paymentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentRequest;

        // create path and map variables
        String localVarPath = "/payments/{transId}/completions"
            .replace("{" + "transId" + "}", localVarApiClient.escapeString(transId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentsTransIdCompletionsPostValidateBeforeCall(Double transId, PaymentRequest paymentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transId' is set
        if (transId == null) {
            throw new ApiException("Missing the required parameter 'transId' when calling paymentsTransIdCompletionsPost(Async)");
        }

        return paymentsTransIdCompletionsPostCall(transId, paymentRequest, _callback);

    }

    /**
     * Complete pre-auth
     * Complete a pre-authorized payment. The amount of the transaction to complete must be less than or equal to the original pre-auth amount. Complete must be set to true.
     * @param transId The transaction id. (required)
     * @param paymentRequest  (optional)
     * @return PaymentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment response containing the payment details as well as if the transaction was approved or declined. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public PaymentResponse paymentsTransIdCompletionsPost(Double transId, PaymentRequest paymentRequest) throws ApiException {
        ApiResponse<PaymentResponse> localVarResp = paymentsTransIdCompletionsPostWithHttpInfo(transId, paymentRequest);
        return localVarResp.getData();
    }

    /**
     * Complete pre-auth
     * Complete a pre-authorized payment. The amount of the transaction to complete must be less than or equal to the original pre-auth amount. Complete must be set to true.
     * @param transId The transaction id. (required)
     * @param paymentRequest  (optional)
     * @return ApiResponse&lt;PaymentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment response containing the payment details as well as if the transaction was approved or declined. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentResponse> paymentsTransIdCompletionsPostWithHttpInfo(Double transId, PaymentRequest paymentRequest) throws ApiException {
        okhttp3.Call localVarCall = paymentsTransIdCompletionsPostValidateBeforeCall(transId, paymentRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Complete pre-auth (asynchronously)
     * Complete a pre-authorized payment. The amount of the transaction to complete must be less than or equal to the original pre-auth amount. Complete must be set to true.
     * @param transId The transaction id. (required)
     * @param paymentRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment response containing the payment details as well as if the transaction was approved or declined. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsTransIdCompletionsPostAsync(Double transId, PaymentRequest paymentRequest, final ApiCallback<PaymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentsTransIdCompletionsPostValidateBeforeCall(transId, paymentRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentsTransIdGet
     * @param transId The transaction id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsTransIdGetCall(BigDecimal transId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments/{transId}"
            .replace("{" + "transId" + "}", localVarApiClient.escapeString(transId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentsTransIdGetValidateBeforeCall(BigDecimal transId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transId' is set
        if (transId == null) {
            throw new ApiException("Missing the required parameter 'transId' when calling paymentsTransIdGet(Async)");
        }

        return paymentsTransIdGetCall(transId, _callback);

    }

    /**
     * Get payment
     * Get a previous payment (transaction).
     * @param transId The transaction id. (required)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Transaction paymentsTransIdGet(BigDecimal transId) throws ApiException {
        ApiResponse<Transaction> localVarResp = paymentsTransIdGetWithHttpInfo(transId);
        return localVarResp.getData();
    }

    /**
     * Get payment
     * Get a previous payment (transaction).
     * @param transId The transaction id. (required)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Transaction> paymentsTransIdGetWithHttpInfo(BigDecimal transId) throws ApiException {
        okhttp3.Call localVarCall = paymentsTransIdGetValidateBeforeCall(transId, null);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get payment (asynchronously)
     * Get a previous payment (transaction).
     * @param transId The transaction id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A transaction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsTransIdGetAsync(BigDecimal transId, final ApiCallback<Transaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentsTransIdGetValidateBeforeCall(transId, _callback);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentsTransIdReturnsPost
     * @param transId The transaction id. (required)
     * @param _return  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment response containing the payment details as well as if the transaction was approved or declined. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsTransIdReturnsPostCall(Double transId, ModelReturn _return, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = _return;

        // create path and map variables
        String localVarPath = "/payments/{transId}/returns"
            .replace("{" + "transId" + "}", localVarApiClient.escapeString(transId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentsTransIdReturnsPostValidateBeforeCall(Double transId, ModelReturn _return, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transId' is set
        if (transId == null) {
            throw new ApiException("Missing the required parameter 'transId' when calling paymentsTransIdReturnsPost(Async)");
        }

        // verify the required parameter '_return' is set
        if (_return == null) {
            throw new ApiException("Missing the required parameter '_return' when calling paymentsTransIdReturnsPost(Async)");
        }

        return paymentsTransIdReturnsPostCall(transId, _return, _callback);

    }

    /**
     * Return payment
     * Return payment.
     * @param transId The transaction id. (required)
     * @param _return  (required)
     * @return PaymentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment response containing the payment details as well as if the transaction was approved or declined. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public PaymentResponse paymentsTransIdReturnsPost(Double transId, ModelReturn _return) throws ApiException {
        ApiResponse<PaymentResponse> localVarResp = paymentsTransIdReturnsPostWithHttpInfo(transId, _return);
        return localVarResp.getData();
    }

    /**
     * Return payment
     * Return payment.
     * @param transId The transaction id. (required)
     * @param _return  (required)
     * @return ApiResponse&lt;PaymentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment response containing the payment details as well as if the transaction was approved or declined. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentResponse> paymentsTransIdReturnsPostWithHttpInfo(Double transId, ModelReturn _return) throws ApiException {
        okhttp3.Call localVarCall = paymentsTransIdReturnsPostValidateBeforeCall(transId, _return, null);
        Type localVarReturnType = new TypeToken<PaymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return payment (asynchronously)
     * Return payment.
     * @param transId The transaction id. (required)
     * @param _return  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment response containing the payment details as well as if the transaction was approved or declined. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsTransIdReturnsPostAsync(Double transId, ModelReturn _return, final ApiCallback<PaymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentsTransIdReturnsPostValidateBeforeCall(transId, _return, _callback);
        Type localVarReturnType = new TypeToken<PaymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentsTransIdVoidPost
     * @param transId The transaction id to void. (required)
     * @param _void  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment response containing the payment details as well as if the transaction was approved or declined. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsTransIdVoidPostCall(Double transId, ModelVoid _void, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = _void;

        // create path and map variables
        String localVarPath = "/payments/{transId}/void"
            .replace("{" + "transId" + "}", localVarApiClient.escapeString(transId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentsTransIdVoidPostValidateBeforeCall(Double transId, ModelVoid _void, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transId' is set
        if (transId == null) {
            throw new ApiException("Missing the required parameter 'transId' when calling paymentsTransIdVoidPost(Async)");
        }

        // verify the required parameter '_void' is set
        if (_void == null) {
            throw new ApiException("Missing the required parameter '_void' when calling paymentsTransIdVoidPost(Async)");
        }

        return paymentsTransIdVoidPostCall(transId, _void, _callback);

    }

    /**
     * Void Transaction
     * Void a transaction. You can void payments, returns, pre-auths, and completions. It will cancel that transaction.
     * @param transId The transaction id to void. (required)
     * @param _void  (required)
     * @return PaymentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment response containing the payment details as well as if the transaction was approved or declined. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public PaymentResponse paymentsTransIdVoidPost(Double transId, ModelVoid _void) throws ApiException {
        ApiResponse<PaymentResponse> localVarResp = paymentsTransIdVoidPostWithHttpInfo(transId, _void);
        return localVarResp.getData();
    }

    /**
     * Void Transaction
     * Void a transaction. You can void payments, returns, pre-auths, and completions. It will cancel that transaction.
     * @param transId The transaction id to void. (required)
     * @param _void  (required)
     * @return ApiResponse&lt;PaymentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment response containing the payment details as well as if the transaction was approved or declined. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentResponse> paymentsTransIdVoidPostWithHttpInfo(Double transId, ModelVoid _void) throws ApiException {
        okhttp3.Call localVarCall = paymentsTransIdVoidPostValidateBeforeCall(transId, _void, null);
        Type localVarReturnType = new TypeToken<PaymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Void Transaction (asynchronously)
     * Void a transaction. You can void payments, returns, pre-auths, and completions. It will cancel that transaction.
     * @param transId The transaction id to void. (required)
     * @param _void  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment response containing the payment details as well as if the transaction was approved or declined. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsTransIdVoidPostAsync(Double transId, ModelVoid _void, final ApiCallback<PaymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentsTransIdVoidPostValidateBeforeCall(transId, _void, _callback);
        Type localVarReturnType = new TypeToken<PaymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
