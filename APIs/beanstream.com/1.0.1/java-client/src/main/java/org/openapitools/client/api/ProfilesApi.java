/*
 * Beanstream Payments
 * https://www.beanstream.com/api/v1
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BeanstreamException;
import java.math.BigDecimal;
import org.openapitools.client.model.CreateProfileBody;
import org.openapitools.client.model.PaymentProfile;
import org.openapitools.client.model.ProfileCard;
import org.openapitools.client.model.ProfileGetCards;
import org.openapitools.client.model.ProfileResponse;
import org.openapitools.client.model.UpdateProfileBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProfilesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProfilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProfilesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for profilesPost
     * @param createProfileBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesPostCall(CreateProfileBody createProfileBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createProfileBody;

        // create path and map variables
        String localVarPath = "/profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesPostValidateBeforeCall(CreateProfileBody createProfileBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createProfileBody' is set
        if (createProfileBody == null) {
            throw new ApiException("Missing the required parameter 'createProfileBody' when calling profilesPost(Async)");
        }

        return profilesPostCall(createProfileBody, _callback);

    }

    /**
     * Create Profile
     * Create a new Payment Profile using either a card or a Legato token. You must supply one of them.
     * @param createProfileBody  (required)
     * @return ProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ProfileResponse profilesPost(CreateProfileBody createProfileBody) throws ApiException {
        ApiResponse<ProfileResponse> localVarResp = profilesPostWithHttpInfo(createProfileBody);
        return localVarResp.getData();
    }

    /**
     * Create Profile
     * Create a new Payment Profile using either a card or a Legato token. You must supply one of them.
     * @param createProfileBody  (required)
     * @return ApiResponse&lt;ProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfileResponse> profilesPostWithHttpInfo(CreateProfileBody createProfileBody) throws ApiException {
        okhttp3.Call localVarCall = profilesPostValidateBeforeCall(createProfileBody, null);
        Type localVarReturnType = new TypeToken<ProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Profile (asynchronously)
     * Create a new Payment Profile using either a card or a Legato token. You must supply one of them.
     * @param createProfileBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesPostAsync(CreateProfileBody createProfileBody, final ApiCallback<ProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesPostValidateBeforeCall(createProfileBody, _callback);
        Type localVarReturnType = new TypeToken<ProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesProfileIdCardsCardIdDelete
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @param cardId The card id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesProfileIdCardsCardIdDeleteCall(String profileId, BigDecimal cardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/profiles/{profileId}/cards/{cardId}"
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesProfileIdCardsCardIdDeleteValidateBeforeCall(String profileId, BigDecimal cardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling profilesProfileIdCardsCardIdDelete(Async)");
        }

        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling profilesProfileIdCardsCardIdDelete(Async)");
        }

        return profilesProfileIdCardsCardIdDeleteCall(profileId, cardId, _callback);

    }

    /**
     * Delete card
     * Delete a card on the profile.
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @param cardId The card id. (required)
     * @return ProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ProfileResponse profilesProfileIdCardsCardIdDelete(String profileId, BigDecimal cardId) throws ApiException {
        ApiResponse<ProfileResponse> localVarResp = profilesProfileIdCardsCardIdDeleteWithHttpInfo(profileId, cardId);
        return localVarResp.getData();
    }

    /**
     * Delete card
     * Delete a card on the profile.
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @param cardId The card id. (required)
     * @return ApiResponse&lt;ProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfileResponse> profilesProfileIdCardsCardIdDeleteWithHttpInfo(String profileId, BigDecimal cardId) throws ApiException {
        okhttp3.Call localVarCall = profilesProfileIdCardsCardIdDeleteValidateBeforeCall(profileId, cardId, null);
        Type localVarReturnType = new TypeToken<ProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete card (asynchronously)
     * Delete a card on the profile.
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @param cardId The card id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesProfileIdCardsCardIdDeleteAsync(String profileId, BigDecimal cardId, final ApiCallback<ProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesProfileIdCardsCardIdDeleteValidateBeforeCall(profileId, cardId, _callback);
        Type localVarReturnType = new TypeToken<ProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesProfileIdCardsCardIdPut
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @param cardId The card id. (required)
     * @param card The card that will be updated on the profile. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesProfileIdCardsCardIdPutCall(String profileId, BigDecimal cardId, ProfileCard card, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = card;

        // create path and map variables
        String localVarPath = "/profiles/{profileId}/cards/{cardId}"
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesProfileIdCardsCardIdPutValidateBeforeCall(String profileId, BigDecimal cardId, ProfileCard card, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling profilesProfileIdCardsCardIdPut(Async)");
        }

        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling profilesProfileIdCardsCardIdPut(Async)");
        }

        // verify the required parameter 'card' is set
        if (card == null) {
            throw new ApiException("Missing the required parameter 'card' when calling profilesProfileIdCardsCardIdPut(Async)");
        }

        return profilesProfileIdCardsCardIdPutCall(profileId, cardId, card, _callback);

    }

    /**
     * Update card
     * Update the details of a card on the profile.
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @param cardId The card id. (required)
     * @param card The card that will be updated on the profile. (required)
     * @return ProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ProfileResponse profilesProfileIdCardsCardIdPut(String profileId, BigDecimal cardId, ProfileCard card) throws ApiException {
        ApiResponse<ProfileResponse> localVarResp = profilesProfileIdCardsCardIdPutWithHttpInfo(profileId, cardId, card);
        return localVarResp.getData();
    }

    /**
     * Update card
     * Update the details of a card on the profile.
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @param cardId The card id. (required)
     * @param card The card that will be updated on the profile. (required)
     * @return ApiResponse&lt;ProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfileResponse> profilesProfileIdCardsCardIdPutWithHttpInfo(String profileId, BigDecimal cardId, ProfileCard card) throws ApiException {
        okhttp3.Call localVarCall = profilesProfileIdCardsCardIdPutValidateBeforeCall(profileId, cardId, card, null);
        Type localVarReturnType = new TypeToken<ProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update card (asynchronously)
     * Update the details of a card on the profile.
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @param cardId The card id. (required)
     * @param card The card that will be updated on the profile. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesProfileIdCardsCardIdPutAsync(String profileId, BigDecimal cardId, ProfileCard card, final ApiCallback<ProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesProfileIdCardsCardIdPutValidateBeforeCall(profileId, cardId, card, _callback);
        Type localVarReturnType = new TypeToken<ProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesProfileIdCardsGet
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesProfileIdCardsGetCall(String profileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/profiles/{profileId}/cards"
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesProfileIdCardsGetValidateBeforeCall(String profileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling profilesProfileIdCardsGet(Async)");
        }

        return profilesProfileIdCardsGetCall(profileId, _callback);

    }

    /**
     * Get cards
     * Get all of the cards on the profile.
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @return ProfileGetCards
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ProfileGetCards profilesProfileIdCardsGet(String profileId) throws ApiException {
        ApiResponse<ProfileGetCards> localVarResp = profilesProfileIdCardsGetWithHttpInfo(profileId);
        return localVarResp.getData();
    }

    /**
     * Get cards
     * Get all of the cards on the profile.
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @return ApiResponse&lt;ProfileGetCards&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfileGetCards> profilesProfileIdCardsGetWithHttpInfo(String profileId) throws ApiException {
        okhttp3.Call localVarCall = profilesProfileIdCardsGetValidateBeforeCall(profileId, null);
        Type localVarReturnType = new TypeToken<ProfileGetCards>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get cards (asynchronously)
     * Get all of the cards on the profile.
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesProfileIdCardsGetAsync(String profileId, final ApiCallback<ProfileGetCards> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesProfileIdCardsGetValidateBeforeCall(profileId, _callback);
        Type localVarReturnType = new TypeToken<ProfileGetCards>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesProfileIdCardsPost
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @param card The card that will be added to the profile. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesProfileIdCardsPostCall(String profileId, ProfileCard card, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = card;

        // create path and map variables
        String localVarPath = "/profiles/{profileId}/cards"
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesProfileIdCardsPostValidateBeforeCall(String profileId, ProfileCard card, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling profilesProfileIdCardsPost(Async)");
        }

        // verify the required parameter 'card' is set
        if (card == null) {
            throw new ApiException("Missing the required parameter 'card' when calling profilesProfileIdCardsPost(Async)");
        }

        return profilesProfileIdCardsPostCall(profileId, card, _callback);

    }

    /**
     * Add card
     * Add a card to the profile. Note that there is a default limit of 1 card per profile. You can change this in your Profiles settings in the back office.
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @param card The card that will be added to the profile. (required)
     * @return ProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ProfileResponse profilesProfileIdCardsPost(String profileId, ProfileCard card) throws ApiException {
        ApiResponse<ProfileResponse> localVarResp = profilesProfileIdCardsPostWithHttpInfo(profileId, card);
        return localVarResp.getData();
    }

    /**
     * Add card
     * Add a card to the profile. Note that there is a default limit of 1 card per profile. You can change this in your Profiles settings in the back office.
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @param card The card that will be added to the profile. (required)
     * @return ApiResponse&lt;ProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfileResponse> profilesProfileIdCardsPostWithHttpInfo(String profileId, ProfileCard card) throws ApiException {
        okhttp3.Call localVarCall = profilesProfileIdCardsPostValidateBeforeCall(profileId, card, null);
        Type localVarReturnType = new TypeToken<ProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add card (asynchronously)
     * Add a card to the profile. Note that there is a default limit of 1 card per profile. You can change this in your Profiles settings in the back office.
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @param card The card that will be added to the profile. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesProfileIdCardsPostAsync(String profileId, ProfileCard card, final ApiCallback<ProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesProfileIdCardsPostValidateBeforeCall(profileId, card, _callback);
        Type localVarReturnType = new TypeToken<ProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesProfileIdDelete
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesProfileIdDeleteCall(String profileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/profiles/{profileId}"
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesProfileIdDeleteValidateBeforeCall(String profileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling profilesProfileIdDelete(Async)");
        }

        return profilesProfileIdDeleteCall(profileId, _callback);

    }

    /**
     * Delete profile
     * Delete a Payment Profile using the profile ID, also known as the Customer Code.
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @return ProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ProfileResponse profilesProfileIdDelete(String profileId) throws ApiException {
        ApiResponse<ProfileResponse> localVarResp = profilesProfileIdDeleteWithHttpInfo(profileId);
        return localVarResp.getData();
    }

    /**
     * Delete profile
     * Delete a Payment Profile using the profile ID, also known as the Customer Code.
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @return ApiResponse&lt;ProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfileResponse> profilesProfileIdDeleteWithHttpInfo(String profileId) throws ApiException {
        okhttp3.Call localVarCall = profilesProfileIdDeleteValidateBeforeCall(profileId, null);
        Type localVarReturnType = new TypeToken<ProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete profile (asynchronously)
     * Delete a Payment Profile using the profile ID, also known as the Customer Code.
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesProfileIdDeleteAsync(String profileId, final ApiCallback<ProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesProfileIdDeleteValidateBeforeCall(profileId, _callback);
        Type localVarReturnType = new TypeToken<ProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesProfileIdGet
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesProfileIdGetCall(String profileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/profiles/{profileId}"
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesProfileIdGetValidateBeforeCall(String profileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling profilesProfileIdGet(Async)");
        }

        return profilesProfileIdGetCall(profileId, _callback);

    }

    /**
     * Get profile
     * Get a Payment Profile using the profile ID, also known as the Customer Code.
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @return PaymentProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public PaymentProfile profilesProfileIdGet(String profileId) throws ApiException {
        ApiResponse<PaymentProfile> localVarResp = profilesProfileIdGetWithHttpInfo(profileId);
        return localVarResp.getData();
    }

    /**
     * Get profile
     * Get a Payment Profile using the profile ID, also known as the Customer Code.
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @return ApiResponse&lt;PaymentProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentProfile> profilesProfileIdGetWithHttpInfo(String profileId) throws ApiException {
        okhttp3.Call localVarCall = profilesProfileIdGetValidateBeforeCall(profileId, null);
        Type localVarReturnType = new TypeToken<PaymentProfile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get profile (asynchronously)
     * Get a Payment Profile using the profile ID, also known as the Customer Code.
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesProfileIdGetAsync(String profileId, final ApiCallback<PaymentProfile> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesProfileIdGetValidateBeforeCall(profileId, _callback);
        Type localVarReturnType = new TypeToken<PaymentProfile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesProfileIdPut
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @param updateProfileBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesProfileIdPutCall(String profileId, UpdateProfileBody updateProfileBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateProfileBody;

        // create path and map variables
        String localVarPath = "/profiles/{profileId}"
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesProfileIdPutValidateBeforeCall(String profileId, UpdateProfileBody updateProfileBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling profilesProfileIdPut(Async)");
        }

        // verify the required parameter 'updateProfileBody' is set
        if (updateProfileBody == null) {
            throw new ApiException("Missing the required parameter 'updateProfileBody' when calling profilesProfileIdPut(Async)");
        }

        return profilesProfileIdPutCall(profileId, updateProfileBody, _callback);

    }

    /**
     * Update Profile
     * Create a new Payment Profile using either a card or a Legato token. You must supply one of them.
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @param updateProfileBody  (required)
     * @return ProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ProfileResponse profilesProfileIdPut(String profileId, UpdateProfileBody updateProfileBody) throws ApiException {
        ApiResponse<ProfileResponse> localVarResp = profilesProfileIdPutWithHttpInfo(profileId, updateProfileBody);
        return localVarResp.getData();
    }

    /**
     * Update Profile
     * Create a new Payment Profile using either a card or a Legato token. You must supply one of them.
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @param updateProfileBody  (required)
     * @return ApiResponse&lt;ProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfileResponse> profilesProfileIdPutWithHttpInfo(String profileId, UpdateProfileBody updateProfileBody) throws ApiException {
        okhttp3.Call localVarCall = profilesProfileIdPutValidateBeforeCall(profileId, updateProfileBody, null);
        Type localVarReturnType = new TypeToken<ProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Profile (asynchronously)
     * Create a new Payment Profile using either a card or a Legato token. You must supply one of them.
     * @param profileId The profile id. (aka CustomerCode) (required)
     * @param updateProfileBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Profile. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failure </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Business Rule Violation or Decline </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization Failure </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid Request Method </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesProfileIdPutAsync(String profileId, UpdateProfileBody updateProfileBody, final ApiCallback<ProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesProfileIdPutValidateBeforeCall(profileId, updateProfileBody, _callback);
        Type localVarReturnType = new TypeToken<ProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
