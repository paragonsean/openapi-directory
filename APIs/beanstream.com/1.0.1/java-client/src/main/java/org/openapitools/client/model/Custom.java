/*
 * Beanstream Payments
 * https://www.beanstream.com/api/v1
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Custom
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:42.785280-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Custom {
  public static final String SERIALIZED_NAME_REF1 = "ref1";
  @SerializedName(SERIALIZED_NAME_REF1)
  private String ref1;

  public static final String SERIALIZED_NAME_REF2 = "ref2";
  @SerializedName(SERIALIZED_NAME_REF2)
  private String ref2;

  public static final String SERIALIZED_NAME_REF3 = "ref3";
  @SerializedName(SERIALIZED_NAME_REF3)
  private String ref3;

  public static final String SERIALIZED_NAME_REF4 = "ref4";
  @SerializedName(SERIALIZED_NAME_REF4)
  private String ref4;

  public static final String SERIALIZED_NAME_REF5 = "ref5";
  @SerializedName(SERIALIZED_NAME_REF5)
  private String ref5;

  public Custom() {
  }

  public Custom ref1(String ref1) {
    this.ref1 = ref1;
    return this;
  }

  /**
   * alphanumeric (256)
   * @return ref1
   */
  @javax.annotation.Nullable
  public String getRef1() {
    return ref1;
  }

  public void setRef1(String ref1) {
    this.ref1 = ref1;
  }


  public Custom ref2(String ref2) {
    this.ref2 = ref2;
    return this;
  }

  /**
   * alphanumeric (256)
   * @return ref2
   */
  @javax.annotation.Nullable
  public String getRef2() {
    return ref2;
  }

  public void setRef2(String ref2) {
    this.ref2 = ref2;
  }


  public Custom ref3(String ref3) {
    this.ref3 = ref3;
    return this;
  }

  /**
   * alphanumeric (256)
   * @return ref3
   */
  @javax.annotation.Nullable
  public String getRef3() {
    return ref3;
  }

  public void setRef3(String ref3) {
    this.ref3 = ref3;
  }


  public Custom ref4(String ref4) {
    this.ref4 = ref4;
    return this;
  }

  /**
   * alphanumeric (256)
   * @return ref4
   */
  @javax.annotation.Nullable
  public String getRef4() {
    return ref4;
  }

  public void setRef4(String ref4) {
    this.ref4 = ref4;
  }


  public Custom ref5(String ref5) {
    this.ref5 = ref5;
    return this;
  }

  /**
   * alphanumeric (256)
   * @return ref5
   */
  @javax.annotation.Nullable
  public String getRef5() {
    return ref5;
  }

  public void setRef5(String ref5) {
    this.ref5 = ref5;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Custom custom = (Custom) o;
    return Objects.equals(this.ref1, custom.ref1) &&
        Objects.equals(this.ref2, custom.ref2) &&
        Objects.equals(this.ref3, custom.ref3) &&
        Objects.equals(this.ref4, custom.ref4) &&
        Objects.equals(this.ref5, custom.ref5);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ref1, ref2, ref3, ref4, ref5);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Custom {\n");
    sb.append("    ref1: ").append(toIndentedString(ref1)).append("\n");
    sb.append("    ref2: ").append(toIndentedString(ref2)).append("\n");
    sb.append("    ref3: ").append(toIndentedString(ref3)).append("\n");
    sb.append("    ref4: ").append(toIndentedString(ref4)).append("\n");
    sb.append("    ref5: ").append(toIndentedString(ref5)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ref1");
    openapiFields.add("ref2");
    openapiFields.add("ref3");
    openapiFields.add("ref4");
    openapiFields.add("ref5");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Custom
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Custom.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Custom is not found in the empty JSON string", Custom.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Custom.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Custom` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ref1") != null && !jsonObj.get("ref1").isJsonNull()) && !jsonObj.get("ref1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref1").toString()));
      }
      if ((jsonObj.get("ref2") != null && !jsonObj.get("ref2").isJsonNull()) && !jsonObj.get("ref2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref2").toString()));
      }
      if ((jsonObj.get("ref3") != null && !jsonObj.get("ref3").isJsonNull()) && !jsonObj.get("ref3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref3").toString()));
      }
      if ((jsonObj.get("ref4") != null && !jsonObj.get("ref4").isJsonNull()) && !jsonObj.get("ref4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref4").toString()));
      }
      if ((jsonObj.get("ref5") != null && !jsonObj.get("ref5").isJsonNull()) && !jsonObj.get("ref5").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref5` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref5").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Custom.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Custom' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Custom> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Custom.class));

       return (TypeAdapter<T>) new TypeAdapter<Custom>() {
           @Override
           public void write(JsonWriter out, Custom value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Custom read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Custom given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Custom
   * @throws IOException if the JSON string is invalid with respect to Custom
   */
  public static Custom fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Custom.class);
  }

  /**
   * Convert an instance of Custom to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

