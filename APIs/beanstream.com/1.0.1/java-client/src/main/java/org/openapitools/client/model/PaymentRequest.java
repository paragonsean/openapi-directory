/*
 * Beanstream Payments
 * https://www.beanstream.com/api/v1
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.Card;
import org.openapitools.client.model.Custom;
import org.openapitools.client.model.ProfilePurchase;
import org.openapitools.client.model.TokenPurchase;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PaymentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:42.785280-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentRequest {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_BILLING = "billing";
  @SerializedName(SERIALIZED_NAME_BILLING)
  private Address billing;

  public static final String SERIALIZED_NAME_CARD = "card";
  @SerializedName(SERIALIZED_NAME_CARD)
  private Card card;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_CUSTOM = "custom";
  @SerializedName(SERIALIZED_NAME_CUSTOM)
  private Custom custom;

  public static final String SERIALIZED_NAME_CUSTOMER_IP = "customer_ip";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_IP)
  private String customerIp;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_ORDER_NUMBER = "order_number";
  @SerializedName(SERIALIZED_NAME_ORDER_NUMBER)
  private String orderNumber;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "payment_method";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private String paymentMethod;

  public static final String SERIALIZED_NAME_PAYMENT_PROFILE = "payment_profile";
  @SerializedName(SERIALIZED_NAME_PAYMENT_PROFILE)
  private ProfilePurchase paymentProfile;

  public static final String SERIALIZED_NAME_SHIPPING = "shipping";
  @SerializedName(SERIALIZED_NAME_SHIPPING)
  private Address shipping;

  public static final String SERIALIZED_NAME_TERM_URL = "term_url";
  @SerializedName(SERIALIZED_NAME_TERM_URL)
  private String termUrl;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private TokenPurchase token;

  public PaymentRequest() {
  }

  public PaymentRequest amount(Double amount) {
    this.amount = amount;
    return this;
  }

  /**
   * A decimal value in dollars, or relevant currency. digits(9)
   * @return amount
   */
  @javax.annotation.Nonnull
  public Double getAmount() {
    return amount;
  }

  public void setAmount(Double amount) {
    this.amount = amount;
  }


  public PaymentRequest billing(Address billing) {
    this.billing = billing;
    return this;
  }

  /**
   * Get billing
   * @return billing
   */
  @javax.annotation.Nullable
  public Address getBilling() {
    return billing;
  }

  public void setBilling(Address billing) {
    this.billing = billing;
  }


  public PaymentRequest card(Card card) {
    this.card = card;
    return this;
  }

  /**
   * Get card
   * @return card
   */
  @javax.annotation.Nullable
  public Card getCard() {
    return card;
  }

  public void setCard(Card card) {
    this.card = card;
  }


  public PaymentRequest comments(String comments) {
    this.comments = comments;
    return this;
  }

  /**
   * alphanumeric (256)
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }


  public PaymentRequest custom(Custom custom) {
    this.custom = custom;
    return this;
  }

  /**
   * Get custom
   * @return custom
   */
  @javax.annotation.Nullable
  public Custom getCustom() {
    return custom;
  }

  public void setCustom(Custom custom) {
    this.custom = custom;
  }


  public PaymentRequest customerIp(String customerIp) {
    this.customerIp = customerIp;
    return this;
  }

  /**
   * alphanumeric (30)
   * @return customerIp
   */
  @javax.annotation.Nullable
  public String getCustomerIp() {
    return customerIp;
  }

  public void setCustomerIp(String customerIp) {
    this.customerIp = customerIp;
  }


  public PaymentRequest language(String language) {
    this.language = language;
    return this;
  }

  /**
   * characters (3)
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public PaymentRequest orderNumber(String orderNumber) {
    this.orderNumber = orderNumber;
    return this;
  }

  /**
   * A unique order number. alphanumeric(30)
   * @return orderNumber
   */
  @javax.annotation.Nullable
  public String getOrderNumber() {
    return orderNumber;
  }

  public void setOrderNumber(String orderNumber) {
    this.orderNumber = orderNumber;
  }


  public PaymentRequest paymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

  /**
   * One of (card, token, payment_profile, cash, cheque). characters(20)
   * @return paymentMethod
   */
  @javax.annotation.Nonnull
  public String getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public PaymentRequest paymentProfile(ProfilePurchase paymentProfile) {
    this.paymentProfile = paymentProfile;
    return this;
  }

  /**
   * Get paymentProfile
   * @return paymentProfile
   */
  @javax.annotation.Nullable
  public ProfilePurchase getPaymentProfile() {
    return paymentProfile;
  }

  public void setPaymentProfile(ProfilePurchase paymentProfile) {
    this.paymentProfile = paymentProfile;
  }


  public PaymentRequest shipping(Address shipping) {
    this.shipping = shipping;
    return this;
  }

  /**
   * Get shipping
   * @return shipping
   */
  @javax.annotation.Nullable
  public Address getShipping() {
    return shipping;
  }

  public void setShipping(Address shipping) {
    this.shipping = shipping;
  }


  public PaymentRequest termUrl(String termUrl) {
    this.termUrl = termUrl;
    return this;
  }

  /**
   * alphanumeric (256)
   * @return termUrl
   */
  @javax.annotation.Nullable
  public String getTermUrl() {
    return termUrl;
  }

  public void setTermUrl(String termUrl) {
    this.termUrl = termUrl;
  }


  public PaymentRequest token(TokenPurchase token) {
    this.token = token;
    return this;
  }

  /**
   * Get token
   * @return token
   */
  @javax.annotation.Nullable
  public TokenPurchase getToken() {
    return token;
  }

  public void setToken(TokenPurchase token) {
    this.token = token;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentRequest paymentRequest = (PaymentRequest) o;
    return Objects.equals(this.amount, paymentRequest.amount) &&
        Objects.equals(this.billing, paymentRequest.billing) &&
        Objects.equals(this.card, paymentRequest.card) &&
        Objects.equals(this.comments, paymentRequest.comments) &&
        Objects.equals(this.custom, paymentRequest.custom) &&
        Objects.equals(this.customerIp, paymentRequest.customerIp) &&
        Objects.equals(this.language, paymentRequest.language) &&
        Objects.equals(this.orderNumber, paymentRequest.orderNumber) &&
        Objects.equals(this.paymentMethod, paymentRequest.paymentMethod) &&
        Objects.equals(this.paymentProfile, paymentRequest.paymentProfile) &&
        Objects.equals(this.shipping, paymentRequest.shipping) &&
        Objects.equals(this.termUrl, paymentRequest.termUrl) &&
        Objects.equals(this.token, paymentRequest.token);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, billing, card, comments, custom, customerIp, language, orderNumber, paymentMethod, paymentProfile, shipping, termUrl, token);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentRequest {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    billing: ").append(toIndentedString(billing)).append("\n");
    sb.append("    card: ").append(toIndentedString(card)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    custom: ").append(toIndentedString(custom)).append("\n");
    sb.append("    customerIp: ").append(toIndentedString(customerIp)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    orderNumber: ").append(toIndentedString(orderNumber)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    paymentProfile: ").append(toIndentedString(paymentProfile)).append("\n");
    sb.append("    shipping: ").append(toIndentedString(shipping)).append("\n");
    sb.append("    termUrl: ").append(toIndentedString(termUrl)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("billing");
    openapiFields.add("card");
    openapiFields.add("comments");
    openapiFields.add("custom");
    openapiFields.add("customer_ip");
    openapiFields.add("language");
    openapiFields.add("order_number");
    openapiFields.add("payment_method");
    openapiFields.add("payment_profile");
    openapiFields.add("shipping");
    openapiFields.add("term_url");
    openapiFields.add("token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("payment_method");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentRequest is not found in the empty JSON string", PaymentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `billing`
      if (jsonObj.get("billing") != null && !jsonObj.get("billing").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("billing"));
      }
      // validate the optional field `card`
      if (jsonObj.get("card") != null && !jsonObj.get("card").isJsonNull()) {
        Card.validateJsonElement(jsonObj.get("card"));
      }
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      // validate the optional field `custom`
      if (jsonObj.get("custom") != null && !jsonObj.get("custom").isJsonNull()) {
        Custom.validateJsonElement(jsonObj.get("custom"));
      }
      if ((jsonObj.get("customer_ip") != null && !jsonObj.get("customer_ip").isJsonNull()) && !jsonObj.get("customer_ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_ip").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("order_number") != null && !jsonObj.get("order_number").isJsonNull()) && !jsonObj.get("order_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_number").toString()));
      }
      if (!jsonObj.get("payment_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_method").toString()));
      }
      // validate the optional field `payment_profile`
      if (jsonObj.get("payment_profile") != null && !jsonObj.get("payment_profile").isJsonNull()) {
        ProfilePurchase.validateJsonElement(jsonObj.get("payment_profile"));
      }
      // validate the optional field `shipping`
      if (jsonObj.get("shipping") != null && !jsonObj.get("shipping").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("shipping"));
      }
      if ((jsonObj.get("term_url") != null && !jsonObj.get("term_url").isJsonNull()) && !jsonObj.get("term_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `term_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("term_url").toString()));
      }
      // validate the optional field `token`
      if (jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) {
        TokenPurchase.validateJsonElement(jsonObj.get("token"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentRequest>() {
           @Override
           public void write(JsonWriter out, PaymentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentRequest
   * @throws IOException if the JSON string is invalid with respect to PaymentRequest
   */
  public static PaymentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentRequest.class);
  }

  /**
   * Convert an instance of PaymentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

