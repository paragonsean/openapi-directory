# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CredasApiModelsDataCheckCheckRemark(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: int=None, description: str=None):
        """CredasApiModelsDataCheckCheckRemark - a model defined in OpenAPI

        :param category: The category of this CredasApiModelsDataCheckCheckRemark.
        :param description: The description of this CredasApiModelsDataCheckCheckRemark.
        """
        self.openapi_types = {
            'category': int,
            'description': str
        }

        self.attribute_map = {
            'category': 'category',
            'description': 'description'
        }

        self._category = category
        self._description = description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CredasApiModelsDataCheckCheckRemark':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Credas.Api.Models.DataCheck.CheckRemark of this CredasApiModelsDataCheckCheckRemark.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this CredasApiModelsDataCheckCheckRemark.

        Match = 1, Mismatch = 2, Warning = 3, Comment = 4

        :return: The category of this CredasApiModelsDataCheckCheckRemark.
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CredasApiModelsDataCheckCheckRemark.

        Match = 1, Mismatch = 2, Warning = 3, Comment = 4

        :param category: The category of this CredasApiModelsDataCheckCheckRemark.
        :type category: int
        """
        allowed_values = [1, 2, 3, 4]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def description(self):
        """Gets the description of this CredasApiModelsDataCheckCheckRemark.


        :return: The description of this CredasApiModelsDataCheckCheckRemark.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CredasApiModelsDataCheckCheckRemark.


        :param description: The description of this CredasApiModelsDataCheckCheckRemark.
        :type description: str
        """

        self._description = description
