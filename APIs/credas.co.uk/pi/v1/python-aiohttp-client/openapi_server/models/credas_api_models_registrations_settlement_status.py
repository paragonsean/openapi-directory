# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CredasApiModelsRegistrationsSettlementStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, check_status: int=None, has_been_overridden: bool=None, has_share_code_pdf: bool=None, share_code_facial_match_status: int=None, share_code_name_check_status: int=None):
        """CredasApiModelsRegistrationsSettlementStatus - a model defined in OpenAPI

        :param check_status: The check_status of this CredasApiModelsRegistrationsSettlementStatus.
        :param has_been_overridden: The has_been_overridden of this CredasApiModelsRegistrationsSettlementStatus.
        :param has_share_code_pdf: The has_share_code_pdf of this CredasApiModelsRegistrationsSettlementStatus.
        :param share_code_facial_match_status: The share_code_facial_match_status of this CredasApiModelsRegistrationsSettlementStatus.
        :param share_code_name_check_status: The share_code_name_check_status of this CredasApiModelsRegistrationsSettlementStatus.
        """
        self.openapi_types = {
            'check_status': int,
            'has_been_overridden': bool,
            'has_share_code_pdf': bool,
            'share_code_facial_match_status': int,
            'share_code_name_check_status': int
        }

        self.attribute_map = {
            'check_status': 'checkStatus',
            'has_been_overridden': 'hasBeenOverridden',
            'has_share_code_pdf': 'hasShareCodePdf',
            'share_code_facial_match_status': 'shareCodeFacialMatchStatus',
            'share_code_name_check_status': 'shareCodeNameCheckStatus'
        }

        self._check_status = check_status
        self._has_been_overridden = has_been_overridden
        self._has_share_code_pdf = has_share_code_pdf
        self._share_code_facial_match_status = share_code_facial_match_status
        self._share_code_name_check_status = share_code_name_check_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CredasApiModelsRegistrationsSettlementStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Credas.Api.Models.Registrations.SettlementStatus of this CredasApiModelsRegistrationsSettlementStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def check_status(self):
        """Gets the check_status of this CredasApiModelsRegistrationsSettlementStatus.

        Unknown = 0, Pass = 1, Refer = 2, Fail = 3

        :return: The check_status of this CredasApiModelsRegistrationsSettlementStatus.
        :rtype: int
        """
        return self._check_status

    @check_status.setter
    def check_status(self, check_status):
        """Sets the check_status of this CredasApiModelsRegistrationsSettlementStatus.

        Unknown = 0, Pass = 1, Refer = 2, Fail = 3

        :param check_status: The check_status of this CredasApiModelsRegistrationsSettlementStatus.
        :type check_status: int
        """
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if check_status not in allowed_values:
            raise ValueError(
                "Invalid value for `check_status` ({0}), must be one of {1}"
                .format(check_status, allowed_values)
            )

        self._check_status = check_status

    @property
    def has_been_overridden(self):
        """Gets the has_been_overridden of this CredasApiModelsRegistrationsSettlementStatus.


        :return: The has_been_overridden of this CredasApiModelsRegistrationsSettlementStatus.
        :rtype: bool
        """
        return self._has_been_overridden

    @has_been_overridden.setter
    def has_been_overridden(self, has_been_overridden):
        """Sets the has_been_overridden of this CredasApiModelsRegistrationsSettlementStatus.


        :param has_been_overridden: The has_been_overridden of this CredasApiModelsRegistrationsSettlementStatus.
        :type has_been_overridden: bool
        """

        self._has_been_overridden = has_been_overridden

    @property
    def has_share_code_pdf(self):
        """Gets the has_share_code_pdf of this CredasApiModelsRegistrationsSettlementStatus.


        :return: The has_share_code_pdf of this CredasApiModelsRegistrationsSettlementStatus.
        :rtype: bool
        """
        return self._has_share_code_pdf

    @has_share_code_pdf.setter
    def has_share_code_pdf(self, has_share_code_pdf):
        """Sets the has_share_code_pdf of this CredasApiModelsRegistrationsSettlementStatus.


        :param has_share_code_pdf: The has_share_code_pdf of this CredasApiModelsRegistrationsSettlementStatus.
        :type has_share_code_pdf: bool
        """

        self._has_share_code_pdf = has_share_code_pdf

    @property
    def share_code_facial_match_status(self):
        """Gets the share_code_facial_match_status of this CredasApiModelsRegistrationsSettlementStatus.

        Unknown = 0, Pass = 1, Refer = 2, Fail = 3

        :return: The share_code_facial_match_status of this CredasApiModelsRegistrationsSettlementStatus.
        :rtype: int
        """
        return self._share_code_facial_match_status

    @share_code_facial_match_status.setter
    def share_code_facial_match_status(self, share_code_facial_match_status):
        """Sets the share_code_facial_match_status of this CredasApiModelsRegistrationsSettlementStatus.

        Unknown = 0, Pass = 1, Refer = 2, Fail = 3

        :param share_code_facial_match_status: The share_code_facial_match_status of this CredasApiModelsRegistrationsSettlementStatus.
        :type share_code_facial_match_status: int
        """
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if share_code_facial_match_status not in allowed_values:
            raise ValueError(
                "Invalid value for `share_code_facial_match_status` ({0}), must be one of {1}"
                .format(share_code_facial_match_status, allowed_values)
            )

        self._share_code_facial_match_status = share_code_facial_match_status

    @property
    def share_code_name_check_status(self):
        """Gets the share_code_name_check_status of this CredasApiModelsRegistrationsSettlementStatus.

        Unknown = 0, Pass = 1, Refer = 2, Fail = 3

        :return: The share_code_name_check_status of this CredasApiModelsRegistrationsSettlementStatus.
        :rtype: int
        """
        return self._share_code_name_check_status

    @share_code_name_check_status.setter
    def share_code_name_check_status(self, share_code_name_check_status):
        """Sets the share_code_name_check_status of this CredasApiModelsRegistrationsSettlementStatus.

        Unknown = 0, Pass = 1, Refer = 2, Fail = 3

        :param share_code_name_check_status: The share_code_name_check_status of this CredasApiModelsRegistrationsSettlementStatus.
        :type share_code_name_check_status: int
        """
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if share_code_name_check_status not in allowed_values:
            raise ValueError(
                "Invalid value for `share_code_name_check_status` ({0}), must be one of {1}"
                .format(share_code_name_check_status, allowed_values)
            )

        self._share_code_name_check_status = share_code_name_check_status
