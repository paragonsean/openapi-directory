# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CredasApiModelsRegistrationsRegistrationSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capture_personal_details: bool=None, name_match_routine: int=None, required_checks: List[int]=None, skip_email_step: bool=None):
        """CredasApiModelsRegistrationsRegistrationSettings - a model defined in OpenAPI

        :param capture_personal_details: The capture_personal_details of this CredasApiModelsRegistrationsRegistrationSettings.
        :param name_match_routine: The name_match_routine of this CredasApiModelsRegistrationsRegistrationSettings.
        :param required_checks: The required_checks of this CredasApiModelsRegistrationsRegistrationSettings.
        :param skip_email_step: The skip_email_step of this CredasApiModelsRegistrationsRegistrationSettings.
        """
        self.openapi_types = {
            'capture_personal_details': bool,
            'name_match_routine': int,
            'required_checks': List[int],
            'skip_email_step': bool
        }

        self.attribute_map = {
            'capture_personal_details': 'capturePersonalDetails',
            'name_match_routine': 'nameMatchRoutine',
            'required_checks': 'requiredChecks',
            'skip_email_step': 'skipEmailStep'
        }

        self._capture_personal_details = capture_personal_details
        self._name_match_routine = name_match_routine
        self._required_checks = required_checks
        self._skip_email_step = skip_email_step

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CredasApiModelsRegistrationsRegistrationSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Credas.Api.Models.Registrations.RegistrationSettings of this CredasApiModelsRegistrationsRegistrationSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capture_personal_details(self):
        """Gets the capture_personal_details of this CredasApiModelsRegistrationsRegistrationSettings.


        :return: The capture_personal_details of this CredasApiModelsRegistrationsRegistrationSettings.
        :rtype: bool
        """
        return self._capture_personal_details

    @capture_personal_details.setter
    def capture_personal_details(self, capture_personal_details):
        """Sets the capture_personal_details of this CredasApiModelsRegistrationsRegistrationSettings.


        :param capture_personal_details: The capture_personal_details of this CredasApiModelsRegistrationsRegistrationSettings.
        :type capture_personal_details: bool
        """

        self._capture_personal_details = capture_personal_details

    @property
    def name_match_routine(self):
        """Gets the name_match_routine of this CredasApiModelsRegistrationsRegistrationSettings.

        Fuzzy = 1, Strict = 2

        :return: The name_match_routine of this CredasApiModelsRegistrationsRegistrationSettings.
        :rtype: int
        """
        return self._name_match_routine

    @name_match_routine.setter
    def name_match_routine(self, name_match_routine):
        """Sets the name_match_routine of this CredasApiModelsRegistrationsRegistrationSettings.

        Fuzzy = 1, Strict = 2

        :param name_match_routine: The name_match_routine of this CredasApiModelsRegistrationsRegistrationSettings.
        :type name_match_routine: int
        """
        allowed_values = [1, 2]  # noqa: E501
        if name_match_routine not in allowed_values:
            raise ValueError(
                "Invalid value for `name_match_routine` ({0}), must be one of {1}"
                .format(name_match_routine, allowed_values)
            )

        self._name_match_routine = name_match_routine

    @property
    def required_checks(self):
        """Gets the required_checks of this CredasApiModelsRegistrationsRegistrationSettings.

        The value of required checks determines what checks are performed. <br/>Unknown = 0,Id Documents = 1, Standard Checks = 2, International Sanctions and Pep = 3, Credit Status Check = 4, Bank Account Check = 5, Proof of Ownership = 6, Right to Work = 7, Right to Rent = 8<br />

        :return: The required_checks of this CredasApiModelsRegistrationsRegistrationSettings.
        :rtype: List[int]
        """
        return self._required_checks

    @required_checks.setter
    def required_checks(self, required_checks):
        """Sets the required_checks of this CredasApiModelsRegistrationsRegistrationSettings.

        The value of required checks determines what checks are performed. <br/>Unknown = 0,Id Documents = 1, Standard Checks = 2, International Sanctions and Pep = 3, Credit Status Check = 4, Bank Account Check = 5, Proof of Ownership = 6, Right to Work = 7, Right to Rent = 8<br />

        :param required_checks: The required_checks of this CredasApiModelsRegistrationsRegistrationSettings.
        :type required_checks: List[int]
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8]  # noqa: E501
        if not set(required_checks).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `required_checks` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(required_checks) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._required_checks = required_checks

    @property
    def skip_email_step(self):
        """Gets the skip_email_step of this CredasApiModelsRegistrationsRegistrationSettings.


        :return: The skip_email_step of this CredasApiModelsRegistrationsRegistrationSettings.
        :rtype: bool
        """
        return self._skip_email_step

    @skip_email_step.setter
    def skip_email_step(self, skip_email_step):
        """Sets the skip_email_step of this CredasApiModelsRegistrationsRegistrationSettings.


        :param skip_email_step: The skip_email_step of this CredasApiModelsRegistrationsRegistrationSettings.
        :type skip_email_step: bool
        """

        self._skip_email_step = skip_email_step
