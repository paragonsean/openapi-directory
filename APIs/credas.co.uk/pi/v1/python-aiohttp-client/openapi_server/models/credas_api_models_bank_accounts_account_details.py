# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CredasApiModelsBankAccountsAccountDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, sortcode: str=None):
        """CredasApiModelsBankAccountsAccountDetails - a model defined in OpenAPI

        :param account_number: The account_number of this CredasApiModelsBankAccountsAccountDetails.
        :param sortcode: The sortcode of this CredasApiModelsBankAccountsAccountDetails.
        """
        self.openapi_types = {
            'account_number': str,
            'sortcode': str
        }

        self.attribute_map = {
            'account_number': 'accountNumber',
            'sortcode': 'sortcode'
        }

        self._account_number = account_number
        self._sortcode = sortcode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CredasApiModelsBankAccountsAccountDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Credas.Api.Models.BankAccounts.AccountDetails of this CredasApiModelsBankAccountsAccountDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this CredasApiModelsBankAccountsAccountDetails.


        :return: The account_number of this CredasApiModelsBankAccountsAccountDetails.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CredasApiModelsBankAccountsAccountDetails.


        :param account_number: The account_number of this CredasApiModelsBankAccountsAccountDetails.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")

        self._account_number = account_number

    @property
    def sortcode(self):
        """Gets the sortcode of this CredasApiModelsBankAccountsAccountDetails.


        :return: The sortcode of this CredasApiModelsBankAccountsAccountDetails.
        :rtype: str
        """
        return self._sortcode

    @sortcode.setter
    def sortcode(self, sortcode):
        """Sets the sortcode of this CredasApiModelsBankAccountsAccountDetails.


        :param sortcode: The sortcode of this CredasApiModelsBankAccountsAccountDetails.
        :type sortcode: str
        """
        if sortcode is None:
            raise ValueError("Invalid value for `sortcode`, must not be `None`")

        self._sortcode = sortcode
