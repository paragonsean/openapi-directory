# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CredasApiModelsImagesAddIdDocumentImageResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_status: int=None, document_type: int=None, facial_match: bool=None, id: str=None, reg_code: str=None):
        """CredasApiModelsImagesAddIdDocumentImageResponse - a model defined in OpenAPI

        :param document_status: The document_status of this CredasApiModelsImagesAddIdDocumentImageResponse.
        :param document_type: The document_type of this CredasApiModelsImagesAddIdDocumentImageResponse.
        :param facial_match: The facial_match of this CredasApiModelsImagesAddIdDocumentImageResponse.
        :param id: The id of this CredasApiModelsImagesAddIdDocumentImageResponse.
        :param reg_code: The reg_code of this CredasApiModelsImagesAddIdDocumentImageResponse.
        """
        self.openapi_types = {
            'document_status': int,
            'document_type': int,
            'facial_match': bool,
            'id': str,
            'reg_code': str
        }

        self.attribute_map = {
            'document_status': 'documentStatus',
            'document_type': 'documentType',
            'facial_match': 'facialMatch',
            'id': 'id',
            'reg_code': 'regCode'
        }

        self._document_status = document_status
        self._document_type = document_type
        self._facial_match = facial_match
        self._id = id
        self._reg_code = reg_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CredasApiModelsImagesAddIdDocumentImageResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Credas.Api.Models.Images.AddIdDocumentImageResponse of this CredasApiModelsImagesAddIdDocumentImageResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_status(self):
        """Gets the document_status of this CredasApiModelsImagesAddIdDocumentImageResponse.

        Active = 1, Deleted = 2, UnderReview = 3

        :return: The document_status of this CredasApiModelsImagesAddIdDocumentImageResponse.
        :rtype: int
        """
        return self._document_status

    @document_status.setter
    def document_status(self, document_status):
        """Sets the document_status of this CredasApiModelsImagesAddIdDocumentImageResponse.

        Active = 1, Deleted = 2, UnderReview = 3

        :param document_status: The document_status of this CredasApiModelsImagesAddIdDocumentImageResponse.
        :type document_status: int
        """
        allowed_values = [1, 2, 3]  # noqa: E501
        if document_status not in allowed_values:
            raise ValueError(
                "Invalid value for `document_status` ({0}), must be one of {1}"
                .format(document_status, allowed_values)
            )

        self._document_status = document_status

    @property
    def document_type(self):
        """Gets the document_type of this CredasApiModelsImagesAddIdDocumentImageResponse.

        Unknown = 0, Passport = 1, DrivingLicense = 2, IdentificationCard = 3, TaxLetter = 4, NIC_Letter = 5, TV_Licence = 6, UtilityBill = 7, HighRiskWorkLicence = 8, TravelPermit = 9, BankLetter = 10, BenefitLetter = 11, BankStatement = 12, NINO_Letter = 13, CouncilTax = 14, ResidentPermit = 15, PhotoCard = 16, RepaymentLetter = 17, Invoice = 18, Visa = 19, AgeIdentificationCard = 20, MedicareCard = 21, MilitaryIdentificationCard = 22, UtilityLetter = 23, CouncilDocument = 24, JobLicence = 25, MembershipIDCard = 26, MilitaryIDCard = 27, ProofOfAgeCard = 28, TravelPermitNew = 29, WeaponsLicence = 30, AccountStatement = 41, TenancyAgreement = 42, BankDocument = 43, BankLetterNew = 44, BankStatementNew = 45, BenefitLetterNew = 46, CouncilDocumentNew = 48, CouncilLetter = 49, CouncilTaxNew = 50, DWPDocument = 51, HMRCDocument = 52, InformationSheet = 53, InsuranceDocument = 54, InsuranceLetter = 55, InvoiceNew = 56, NICLetter = 57, NINOLetter = 58, OfficialDocument = 59, OfficialLetter = 60, RepaymentLetterNew = 61, TaxLetterNew = 62, TaxStatement = 63, TelBill = 64, TelLetter = 65, TelecommunicationDocument = 66, TVLicence = 67, UniversityLetter = 68, UtilityBillNew = 69, UtilityDocument = 70, UtilityLetterNew = 71, WaterBill = 72, WaterDocument = 73, HighRiskWorkLicenceNew = 74, PhotoCardNew = 75, MedicareCardNew = 76, Certificate = 77

        :return: The document_type of this CredasApiModelsImagesAddIdDocumentImageResponse.
        :rtype: int
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this CredasApiModelsImagesAddIdDocumentImageResponse.

        Unknown = 0, Passport = 1, DrivingLicense = 2, IdentificationCard = 3, TaxLetter = 4, NIC_Letter = 5, TV_Licence = 6, UtilityBill = 7, HighRiskWorkLicence = 8, TravelPermit = 9, BankLetter = 10, BenefitLetter = 11, BankStatement = 12, NINO_Letter = 13, CouncilTax = 14, ResidentPermit = 15, PhotoCard = 16, RepaymentLetter = 17, Invoice = 18, Visa = 19, AgeIdentificationCard = 20, MedicareCard = 21, MilitaryIdentificationCard = 22, UtilityLetter = 23, CouncilDocument = 24, JobLicence = 25, MembershipIDCard = 26, MilitaryIDCard = 27, ProofOfAgeCard = 28, TravelPermitNew = 29, WeaponsLicence = 30, AccountStatement = 41, TenancyAgreement = 42, BankDocument = 43, BankLetterNew = 44, BankStatementNew = 45, BenefitLetterNew = 46, CouncilDocumentNew = 48, CouncilLetter = 49, CouncilTaxNew = 50, DWPDocument = 51, HMRCDocument = 52, InformationSheet = 53, InsuranceDocument = 54, InsuranceLetter = 55, InvoiceNew = 56, NICLetter = 57, NINOLetter = 58, OfficialDocument = 59, OfficialLetter = 60, RepaymentLetterNew = 61, TaxLetterNew = 62, TaxStatement = 63, TelBill = 64, TelLetter = 65, TelecommunicationDocument = 66, TVLicence = 67, UniversityLetter = 68, UtilityBillNew = 69, UtilityDocument = 70, UtilityLetterNew = 71, WaterBill = 72, WaterDocument = 73, HighRiskWorkLicenceNew = 74, PhotoCardNew = 75, MedicareCardNew = 76, Certificate = 77

        :param document_type: The document_type of this CredasApiModelsImagesAddIdDocumentImageResponse.
        :type document_type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]  # noqa: E501
        if document_type not in allowed_values:
            raise ValueError(
                "Invalid value for `document_type` ({0}), must be one of {1}"
                .format(document_type, allowed_values)
            )

        self._document_type = document_type

    @property
    def facial_match(self):
        """Gets the facial_match of this CredasApiModelsImagesAddIdDocumentImageResponse.


        :return: The facial_match of this CredasApiModelsImagesAddIdDocumentImageResponse.
        :rtype: bool
        """
        return self._facial_match

    @facial_match.setter
    def facial_match(self, facial_match):
        """Sets the facial_match of this CredasApiModelsImagesAddIdDocumentImageResponse.


        :param facial_match: The facial_match of this CredasApiModelsImagesAddIdDocumentImageResponse.
        :type facial_match: bool
        """
        if facial_match is None:
            raise ValueError("Invalid value for `facial_match`, must not be `None`")

        self._facial_match = facial_match

    @property
    def id(self):
        """Gets the id of this CredasApiModelsImagesAddIdDocumentImageResponse.


        :return: The id of this CredasApiModelsImagesAddIdDocumentImageResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CredasApiModelsImagesAddIdDocumentImageResponse.


        :param id: The id of this CredasApiModelsImagesAddIdDocumentImageResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def reg_code(self):
        """Gets the reg_code of this CredasApiModelsImagesAddIdDocumentImageResponse.


        :return: The reg_code of this CredasApiModelsImagesAddIdDocumentImageResponse.
        :rtype: str
        """
        return self._reg_code

    @reg_code.setter
    def reg_code(self, reg_code):
        """Sets the reg_code of this CredasApiModelsImagesAddIdDocumentImageResponse.


        :param reg_code: The reg_code of this CredasApiModelsImagesAddIdDocumentImageResponse.
        :type reg_code: str
        """
        if reg_code is None:
            raise ValueError("Invalid value for `reg_code`, must not be `None`")

        self._reg_code = reg_code
