# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CredasApiModelsRegistrationsIdDocumentSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_city: str=None, address_full: str=None, address_postcode: str=None, country: str=None, country_code: str=None, date_created: datetime=None, date_of_birth: datetime=None, description: str=None, document_analysis_result: int=None, document_number: str=None, document_side: int=None, expiry_date: datetime=None, facial_match: bool=None, forename: str=None, full_name: str=None, id: str=None, is_under_review: bool=None, manually_verified: bool=None, middle_name: str=None, mrz1: str=None, mrz2: str=None, mrz3: str=None, name_check: bool=None, name_check_method: int=None, nfc_check: bool=None, nfc_read_status: int=None, primary_scan_id: str=None, status: int=None, surname: str=None):
        """CredasApiModelsRegistrationsIdDocumentSummary - a model defined in OpenAPI

        :param address_city: The address_city of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param address_full: The address_full of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param address_postcode: The address_postcode of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param country: The country of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param country_code: The country_code of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param date_created: The date_created of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param date_of_birth: The date_of_birth of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param description: The description of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param document_analysis_result: The document_analysis_result of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param document_number: The document_number of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param document_side: The document_side of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param expiry_date: The expiry_date of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param facial_match: The facial_match of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param forename: The forename of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param full_name: The full_name of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param id: The id of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param is_under_review: The is_under_review of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param manually_verified: The manually_verified of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param middle_name: The middle_name of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param mrz1: The mrz1 of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param mrz2: The mrz2 of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param mrz3: The mrz3 of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param name_check: The name_check of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param name_check_method: The name_check_method of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param nfc_check: The nfc_check of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param nfc_read_status: The nfc_read_status of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param primary_scan_id: The primary_scan_id of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param status: The status of this CredasApiModelsRegistrationsIdDocumentSummary.
        :param surname: The surname of this CredasApiModelsRegistrationsIdDocumentSummary.
        """
        self.openapi_types = {
            'address_city': str,
            'address_full': str,
            'address_postcode': str,
            'country': str,
            'country_code': str,
            'date_created': datetime,
            'date_of_birth': datetime,
            'description': str,
            'document_analysis_result': int,
            'document_number': str,
            'document_side': int,
            'expiry_date': datetime,
            'facial_match': bool,
            'forename': str,
            'full_name': str,
            'id': str,
            'is_under_review': bool,
            'manually_verified': bool,
            'middle_name': str,
            'mrz1': str,
            'mrz2': str,
            'mrz3': str,
            'name_check': bool,
            'name_check_method': int,
            'nfc_check': bool,
            'nfc_read_status': int,
            'primary_scan_id': str,
            'status': int,
            'surname': str
        }

        self.attribute_map = {
            'address_city': 'addressCity',
            'address_full': 'addressFull',
            'address_postcode': 'addressPostcode',
            'country': 'country',
            'country_code': 'countryCode',
            'date_created': 'dateCreated',
            'date_of_birth': 'dateOfBirth',
            'description': 'description',
            'document_analysis_result': 'documentAnalysisResult',
            'document_number': 'documentNumber',
            'document_side': 'documentSide',
            'expiry_date': 'expiryDate',
            'facial_match': 'facialMatch',
            'forename': 'forename',
            'full_name': 'fullName',
            'id': 'id',
            'is_under_review': 'isUnderReview',
            'manually_verified': 'manuallyVerified',
            'middle_name': 'middleName',
            'mrz1': 'mrz1',
            'mrz2': 'mrz2',
            'mrz3': 'mrz3',
            'name_check': 'nameCheck',
            'name_check_method': 'nameCheckMethod',
            'nfc_check': 'nfcCheck',
            'nfc_read_status': 'nfcReadStatus',
            'primary_scan_id': 'primaryScanId',
            'status': 'status',
            'surname': 'surname'
        }

        self._address_city = address_city
        self._address_full = address_full
        self._address_postcode = address_postcode
        self._country = country
        self._country_code = country_code
        self._date_created = date_created
        self._date_of_birth = date_of_birth
        self._description = description
        self._document_analysis_result = document_analysis_result
        self._document_number = document_number
        self._document_side = document_side
        self._expiry_date = expiry_date
        self._facial_match = facial_match
        self._forename = forename
        self._full_name = full_name
        self._id = id
        self._is_under_review = is_under_review
        self._manually_verified = manually_verified
        self._middle_name = middle_name
        self._mrz1 = mrz1
        self._mrz2 = mrz2
        self._mrz3 = mrz3
        self._name_check = name_check
        self._name_check_method = name_check_method
        self._nfc_check = nfc_check
        self._nfc_read_status = nfc_read_status
        self._primary_scan_id = primary_scan_id
        self._status = status
        self._surname = surname

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CredasApiModelsRegistrationsIdDocumentSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Credas.Api.Models.Registrations.IdDocumentSummary of this CredasApiModelsRegistrationsIdDocumentSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_city(self):
        """Gets the address_city of this CredasApiModelsRegistrationsIdDocumentSummary.


        :return: The address_city of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: str
        """
        return self._address_city

    @address_city.setter
    def address_city(self, address_city):
        """Sets the address_city of this CredasApiModelsRegistrationsIdDocumentSummary.


        :param address_city: The address_city of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type address_city: str
        """

        self._address_city = address_city

    @property
    def address_full(self):
        """Gets the address_full of this CredasApiModelsRegistrationsIdDocumentSummary.


        :return: The address_full of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: str
        """
        return self._address_full

    @address_full.setter
    def address_full(self, address_full):
        """Sets the address_full of this CredasApiModelsRegistrationsIdDocumentSummary.


        :param address_full: The address_full of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type address_full: str
        """

        self._address_full = address_full

    @property
    def address_postcode(self):
        """Gets the address_postcode of this CredasApiModelsRegistrationsIdDocumentSummary.


        :return: The address_postcode of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: str
        """
        return self._address_postcode

    @address_postcode.setter
    def address_postcode(self, address_postcode):
        """Sets the address_postcode of this CredasApiModelsRegistrationsIdDocumentSummary.


        :param address_postcode: The address_postcode of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type address_postcode: str
        """

        self._address_postcode = address_postcode

    @property
    def country(self):
        """Gets the country of this CredasApiModelsRegistrationsIdDocumentSummary.


        :return: The country of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CredasApiModelsRegistrationsIdDocumentSummary.


        :param country: The country of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type country: str
        """

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this CredasApiModelsRegistrationsIdDocumentSummary.


        :return: The country_code of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this CredasApiModelsRegistrationsIdDocumentSummary.


        :param country_code: The country_code of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def date_created(self):
        """Gets the date_created of this CredasApiModelsRegistrationsIdDocumentSummary.


        :return: The date_created of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this CredasApiModelsRegistrationsIdDocumentSummary.


        :param date_created: The date_created of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type date_created: datetime
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")

        self._date_created = date_created

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this CredasApiModelsRegistrationsIdDocumentSummary.


        :return: The date_of_birth of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this CredasApiModelsRegistrationsIdDocumentSummary.


        :param date_of_birth: The date_of_birth of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type date_of_birth: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def description(self):
        """Gets the description of this CredasApiModelsRegistrationsIdDocumentSummary.


        :return: The description of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CredasApiModelsRegistrationsIdDocumentSummary.


        :param description: The description of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def document_analysis_result(self):
        """Gets the document_analysis_result of this CredasApiModelsRegistrationsIdDocumentSummary.

        Unknown = 0, Passed = 1, Refer = 2, Expired = 3, NotSupported = 4, Undefined = 5, Fail = 10, NotPerformed = 11

        :return: The document_analysis_result of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: int
        """
        return self._document_analysis_result

    @document_analysis_result.setter
    def document_analysis_result(self, document_analysis_result):
        """Sets the document_analysis_result of this CredasApiModelsRegistrationsIdDocumentSummary.

        Unknown = 0, Passed = 1, Refer = 2, Expired = 3, NotSupported = 4, Undefined = 5, Fail = 10, NotPerformed = 11

        :param document_analysis_result: The document_analysis_result of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type document_analysis_result: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 10, 11]  # noqa: E501
        if document_analysis_result not in allowed_values:
            raise ValueError(
                "Invalid value for `document_analysis_result` ({0}), must be one of {1}"
                .format(document_analysis_result, allowed_values)
            )

        self._document_analysis_result = document_analysis_result

    @property
    def document_number(self):
        """Gets the document_number of this CredasApiModelsRegistrationsIdDocumentSummary.


        :return: The document_number of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: str
        """
        return self._document_number

    @document_number.setter
    def document_number(self, document_number):
        """Sets the document_number of this CredasApiModelsRegistrationsIdDocumentSummary.


        :param document_number: The document_number of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type document_number: str
        """

        self._document_number = document_number

    @property
    def document_side(self):
        """Gets the document_side of this CredasApiModelsRegistrationsIdDocumentSummary.

        Front = 1, Back = 2

        :return: The document_side of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: int
        """
        return self._document_side

    @document_side.setter
    def document_side(self, document_side):
        """Sets the document_side of this CredasApiModelsRegistrationsIdDocumentSummary.

        Front = 1, Back = 2

        :param document_side: The document_side of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type document_side: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if document_side not in allowed_values:
            raise ValueError(
                "Invalid value for `document_side` ({0}), must be one of {1}"
                .format(document_side, allowed_values)
            )

        self._document_side = document_side

    @property
    def expiry_date(self):
        """Gets the expiry_date of this CredasApiModelsRegistrationsIdDocumentSummary.


        :return: The expiry_date of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: datetime
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this CredasApiModelsRegistrationsIdDocumentSummary.


        :param expiry_date: The expiry_date of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type expiry_date: datetime
        """

        self._expiry_date = expiry_date

    @property
    def facial_match(self):
        """Gets the facial_match of this CredasApiModelsRegistrationsIdDocumentSummary.


        :return: The facial_match of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: bool
        """
        return self._facial_match

    @facial_match.setter
    def facial_match(self, facial_match):
        """Sets the facial_match of this CredasApiModelsRegistrationsIdDocumentSummary.


        :param facial_match: The facial_match of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type facial_match: bool
        """
        if facial_match is None:
            raise ValueError("Invalid value for `facial_match`, must not be `None`")

        self._facial_match = facial_match

    @property
    def forename(self):
        """Gets the forename of this CredasApiModelsRegistrationsIdDocumentSummary.


        :return: The forename of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: str
        """
        return self._forename

    @forename.setter
    def forename(self, forename):
        """Sets the forename of this CredasApiModelsRegistrationsIdDocumentSummary.


        :param forename: The forename of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type forename: str
        """

        self._forename = forename

    @property
    def full_name(self):
        """Gets the full_name of this CredasApiModelsRegistrationsIdDocumentSummary.


        :return: The full_name of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this CredasApiModelsRegistrationsIdDocumentSummary.


        :param full_name: The full_name of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def id(self):
        """Gets the id of this CredasApiModelsRegistrationsIdDocumentSummary.


        :return: The id of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CredasApiModelsRegistrationsIdDocumentSummary.


        :param id: The id of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_under_review(self):
        """Gets the is_under_review of this CredasApiModelsRegistrationsIdDocumentSummary.


        :return: The is_under_review of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: bool
        """
        return self._is_under_review

    @is_under_review.setter
    def is_under_review(self, is_under_review):
        """Sets the is_under_review of this CredasApiModelsRegistrationsIdDocumentSummary.


        :param is_under_review: The is_under_review of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type is_under_review: bool
        """

        self._is_under_review = is_under_review

    @property
    def manually_verified(self):
        """Gets the manually_verified of this CredasApiModelsRegistrationsIdDocumentSummary.


        :return: The manually_verified of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: bool
        """
        return self._manually_verified

    @manually_verified.setter
    def manually_verified(self, manually_verified):
        """Sets the manually_verified of this CredasApiModelsRegistrationsIdDocumentSummary.


        :param manually_verified: The manually_verified of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type manually_verified: bool
        """

        self._manually_verified = manually_verified

    @property
    def middle_name(self):
        """Gets the middle_name of this CredasApiModelsRegistrationsIdDocumentSummary.


        :return: The middle_name of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this CredasApiModelsRegistrationsIdDocumentSummary.


        :param middle_name: The middle_name of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def mrz1(self):
        """Gets the mrz1 of this CredasApiModelsRegistrationsIdDocumentSummary.


        :return: The mrz1 of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: str
        """
        return self._mrz1

    @mrz1.setter
    def mrz1(self, mrz1):
        """Sets the mrz1 of this CredasApiModelsRegistrationsIdDocumentSummary.


        :param mrz1: The mrz1 of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type mrz1: str
        """

        self._mrz1 = mrz1

    @property
    def mrz2(self):
        """Gets the mrz2 of this CredasApiModelsRegistrationsIdDocumentSummary.


        :return: The mrz2 of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: str
        """
        return self._mrz2

    @mrz2.setter
    def mrz2(self, mrz2):
        """Sets the mrz2 of this CredasApiModelsRegistrationsIdDocumentSummary.


        :param mrz2: The mrz2 of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type mrz2: str
        """

        self._mrz2 = mrz2

    @property
    def mrz3(self):
        """Gets the mrz3 of this CredasApiModelsRegistrationsIdDocumentSummary.


        :return: The mrz3 of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: str
        """
        return self._mrz3

    @mrz3.setter
    def mrz3(self, mrz3):
        """Sets the mrz3 of this CredasApiModelsRegistrationsIdDocumentSummary.


        :param mrz3: The mrz3 of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type mrz3: str
        """

        self._mrz3 = mrz3

    @property
    def name_check(self):
        """Gets the name_check of this CredasApiModelsRegistrationsIdDocumentSummary.


        :return: The name_check of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: bool
        """
        return self._name_check

    @name_check.setter
    def name_check(self, name_check):
        """Sets the name_check of this CredasApiModelsRegistrationsIdDocumentSummary.


        :param name_check: The name_check of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type name_check: bool
        """
        if name_check is None:
            raise ValueError("Invalid value for `name_check`, must not be `None`")

        self._name_check = name_check

    @property
    def name_check_method(self):
        """Gets the name_check_method of this CredasApiModelsRegistrationsIdDocumentSummary.

        Unknown = 0, Automatic = 1, Manual = 2

        :return: The name_check_method of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: int
        """
        return self._name_check_method

    @name_check_method.setter
    def name_check_method(self, name_check_method):
        """Sets the name_check_method of this CredasApiModelsRegistrationsIdDocumentSummary.

        Unknown = 0, Automatic = 1, Manual = 2

        :param name_check_method: The name_check_method of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type name_check_method: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if name_check_method not in allowed_values:
            raise ValueError(
                "Invalid value for `name_check_method` ({0}), must be one of {1}"
                .format(name_check_method, allowed_values)
            )

        self._name_check_method = name_check_method

    @property
    def nfc_check(self):
        """Gets the nfc_check of this CredasApiModelsRegistrationsIdDocumentSummary.


        :return: The nfc_check of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: bool
        """
        return self._nfc_check

    @nfc_check.setter
    def nfc_check(self, nfc_check):
        """Sets the nfc_check of this CredasApiModelsRegistrationsIdDocumentSummary.


        :param nfc_check: The nfc_check of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type nfc_check: bool
        """
        if nfc_check is None:
            raise ValueError("Invalid value for `nfc_check`, must not be `None`")

        self._nfc_check = nfc_check

    @property
    def nfc_read_status(self):
        """Gets the nfc_read_status of this CredasApiModelsRegistrationsIdDocumentSummary.

        Unknown = 0, Passed = 1, Failed = 2, NotAttempted = 3, Skipped = 4, Unavailable = 5, NotAllowed = 6, NotTrusted = 7, NotApplicable = 8, Expired = 9, UnavailableWebJourney = 10

        :return: The nfc_read_status of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: int
        """
        return self._nfc_read_status

    @nfc_read_status.setter
    def nfc_read_status(self, nfc_read_status):
        """Sets the nfc_read_status of this CredasApiModelsRegistrationsIdDocumentSummary.

        Unknown = 0, Passed = 1, Failed = 2, NotAttempted = 3, Skipped = 4, Unavailable = 5, NotAllowed = 6, NotTrusted = 7, NotApplicable = 8, Expired = 9, UnavailableWebJourney = 10

        :param nfc_read_status: The nfc_read_status of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type nfc_read_status: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  # noqa: E501
        if nfc_read_status not in allowed_values:
            raise ValueError(
                "Invalid value for `nfc_read_status` ({0}), must be one of {1}"
                .format(nfc_read_status, allowed_values)
            )

        self._nfc_read_status = nfc_read_status

    @property
    def primary_scan_id(self):
        """Gets the primary_scan_id of this CredasApiModelsRegistrationsIdDocumentSummary.


        :return: The primary_scan_id of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: str
        """
        return self._primary_scan_id

    @primary_scan_id.setter
    def primary_scan_id(self, primary_scan_id):
        """Sets the primary_scan_id of this CredasApiModelsRegistrationsIdDocumentSummary.


        :param primary_scan_id: The primary_scan_id of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type primary_scan_id: str
        """

        self._primary_scan_id = primary_scan_id

    @property
    def status(self):
        """Gets the status of this CredasApiModelsRegistrationsIdDocumentSummary.

        Indicates the verification status of the document itself by combining visual analysis and NFC verification results. </br>Note that this may be a pass even if facial or name matches have failed.<br />  values=> Unknown = 0, Pass = 1, Refer = 2, Fail = 3

        :return: The status of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CredasApiModelsRegistrationsIdDocumentSummary.

        Indicates the verification status of the document itself by combining visual analysis and NFC verification results. </br>Note that this may be a pass even if facial or name matches have failed.<br />  values=> Unknown = 0, Pass = 1, Refer = 2, Fail = 3

        :param status: The status of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type status: int
        """
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def surname(self):
        """Gets the surname of this CredasApiModelsRegistrationsIdDocumentSummary.


        :return: The surname of this CredasApiModelsRegistrationsIdDocumentSummary.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this CredasApiModelsRegistrationsIdDocumentSummary.


        :param surname: The surname of this CredasApiModelsRegistrationsIdDocumentSummary.
        :type surname: str
        """

        self._surname = surname
