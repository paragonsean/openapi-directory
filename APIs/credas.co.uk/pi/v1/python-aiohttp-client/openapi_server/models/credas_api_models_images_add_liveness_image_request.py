# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CredasApiModelsImagesAddLivenessImageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_data: str=None, registration_id: str=None):
        """CredasApiModelsImagesAddLivenessImageRequest - a model defined in OpenAPI

        :param image_data: The image_data of this CredasApiModelsImagesAddLivenessImageRequest.
        :param registration_id: The registration_id of this CredasApiModelsImagesAddLivenessImageRequest.
        """
        self.openapi_types = {
            'image_data': str,
            'registration_id': str
        }

        self.attribute_map = {
            'image_data': 'imageData',
            'registration_id': 'registrationId'
        }

        self._image_data = image_data
        self._registration_id = registration_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CredasApiModelsImagesAddLivenessImageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Credas.Api.Models.Images.AddLivenessImageRequest of this CredasApiModelsImagesAddLivenessImageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_data(self):
        """Gets the image_data of this CredasApiModelsImagesAddLivenessImageRequest.


        :return: The image_data of this CredasApiModelsImagesAddLivenessImageRequest.
        :rtype: str
        """
        return self._image_data

    @image_data.setter
    def image_data(self, image_data):
        """Sets the image_data of this CredasApiModelsImagesAddLivenessImageRequest.


        :param image_data: The image_data of this CredasApiModelsImagesAddLivenessImageRequest.
        :type image_data: str
        """
        if image_data is None:
            raise ValueError("Invalid value for `image_data`, must not be `None`")

        self._image_data = image_data

    @property
    def registration_id(self):
        """Gets the registration_id of this CredasApiModelsImagesAddLivenessImageRequest.


        :return: The registration_id of this CredasApiModelsImagesAddLivenessImageRequest.
        :rtype: str
        """
        return self._registration_id

    @registration_id.setter
    def registration_id(self, registration_id):
        """Sets the registration_id of this CredasApiModelsImagesAddLivenessImageRequest.


        :param registration_id: The registration_id of this CredasApiModelsImagesAddLivenessImageRequest.
        :type registration_id: str
        """
        if registration_id is None:
            raise ValueError("Invalid value for `registration_id`, must not be `None`")

        self._registration_id = registration_id
