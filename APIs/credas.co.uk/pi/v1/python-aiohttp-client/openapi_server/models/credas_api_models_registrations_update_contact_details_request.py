# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CredasApiModelsRegistrationsUpdateContactDetailsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delivery_method: int=None, dialling_code: str=None, email: str=None, forename: str=None, middle_name: str=None, phone_number: str=None, surname: str=None):
        """CredasApiModelsRegistrationsUpdateContactDetailsRequest - a model defined in OpenAPI

        :param delivery_method: The delivery_method of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.
        :param dialling_code: The dialling_code of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.
        :param email: The email of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.
        :param forename: The forename of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.
        :param middle_name: The middle_name of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.
        :param phone_number: The phone_number of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.
        :param surname: The surname of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.
        """
        self.openapi_types = {
            'delivery_method': int,
            'dialling_code': str,
            'email': str,
            'forename': str,
            'middle_name': str,
            'phone_number': str,
            'surname': str
        }

        self.attribute_map = {
            'delivery_method': 'deliveryMethod',
            'dialling_code': 'diallingCode',
            'email': 'email',
            'forename': 'forename',
            'middle_name': 'middleName',
            'phone_number': 'phoneNumber',
            'surname': 'surname'
        }

        self._delivery_method = delivery_method
        self._dialling_code = dialling_code
        self._email = email
        self._forename = forename
        self._middle_name = middle_name
        self._phone_number = phone_number
        self._surname = surname

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CredasApiModelsRegistrationsUpdateContactDetailsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Credas.Api.Models.Registrations.UpdateContactDetailsRequest of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delivery_method(self):
        """Gets the delivery_method of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.

        None = 0, Email = 1, Sms = 2

        :return: The delivery_method of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.
        :rtype: int
        """
        return self._delivery_method

    @delivery_method.setter
    def delivery_method(self, delivery_method):
        """Sets the delivery_method of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.

        None = 0, Email = 1, Sms = 2

        :param delivery_method: The delivery_method of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.
        :type delivery_method: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if delivery_method not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_method` ({0}), must be one of {1}"
                .format(delivery_method, allowed_values)
            )

        self._delivery_method = delivery_method

    @property
    def dialling_code(self):
        """Gets the dialling_code of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.


        :return: The dialling_code of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.
        :rtype: str
        """
        return self._dialling_code

    @dialling_code.setter
    def dialling_code(self, dialling_code):
        """Sets the dialling_code of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.


        :param dialling_code: The dialling_code of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.
        :type dialling_code: str
        """
        if dialling_code is not None and len(dialling_code) > 10:
            raise ValueError("Invalid value for `dialling_code`, length must be less than or equal to `10`")
        if dialling_code is not None and len(dialling_code) < 1:
            raise ValueError("Invalid value for `dialling_code`, length must be greater than or equal to `1`")

        self._dialling_code = dialling_code

    @property
    def email(self):
        """Gets the email of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.


        :return: The email of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.


        :param email: The email of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.
        :type email: str
        """
        if email is not None and len(email) > 250:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `250`")
        if email is not None and len(email) < 0:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `0`")

        self._email = email

    @property
    def forename(self):
        """Gets the forename of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.


        :return: The forename of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.
        :rtype: str
        """
        return self._forename

    @forename.setter
    def forename(self, forename):
        """Sets the forename of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.


        :param forename: The forename of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.
        :type forename: str
        """
        if forename is None:
            raise ValueError("Invalid value for `forename`, must not be `None`")
        if forename is not None and len(forename) > 50:
            raise ValueError("Invalid value for `forename`, length must be less than or equal to `50`")
        if forename is not None and len(forename) < 1:
            raise ValueError("Invalid value for `forename`, length must be greater than or equal to `1`")

        self._forename = forename

    @property
    def middle_name(self):
        """Gets the middle_name of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.


        :return: The middle_name of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.


        :param middle_name: The middle_name of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.
        :type middle_name: str
        """
        if middle_name is not None and len(middle_name) > 50:
            raise ValueError("Invalid value for `middle_name`, length must be less than or equal to `50`")
        if middle_name is not None and len(middle_name) < 1:
            raise ValueError("Invalid value for `middle_name`, length must be greater than or equal to `1`")

        self._middle_name = middle_name

    @property
    def phone_number(self):
        """Gets the phone_number of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.


        :return: The phone_number of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.


        :param phone_number: The phone_number of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.
        :type phone_number: str
        """
        if phone_number is not None and len(phone_number) > 20:
            raise ValueError("Invalid value for `phone_number`, length must be less than or equal to `20`")
        if phone_number is not None and len(phone_number) < 1:
            raise ValueError("Invalid value for `phone_number`, length must be greater than or equal to `1`")

        self._phone_number = phone_number

    @property
    def surname(self):
        """Gets the surname of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.


        :return: The surname of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.


        :param surname: The surname of this CredasApiModelsRegistrationsUpdateContactDetailsRequest.
        :type surname: str
        """
        if surname is None:
            raise ValueError("Invalid value for `surname`, must not be `None`")
        if surname is not None and len(surname) > 50:
            raise ValueError("Invalid value for `surname`, length must be less than or equal to `50`")
        if surname is not None and len(surname) < 1:
            raise ValueError("Invalid value for `surname`, length must be greater than or equal to `1`")

        self._surname = surname
