# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CredasApiModelsReportViewGetReportViewByRegistrationIdRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_change_status: bool=None, can_verify: bool=None, registration_id: str=None, user: str=None):
        """CredasApiModelsReportViewGetReportViewByRegistrationIdRequest - a model defined in OpenAPI

        :param can_change_status: The can_change_status of this CredasApiModelsReportViewGetReportViewByRegistrationIdRequest.
        :param can_verify: The can_verify of this CredasApiModelsReportViewGetReportViewByRegistrationIdRequest.
        :param registration_id: The registration_id of this CredasApiModelsReportViewGetReportViewByRegistrationIdRequest.
        :param user: The user of this CredasApiModelsReportViewGetReportViewByRegistrationIdRequest.
        """
        self.openapi_types = {
            'can_change_status': bool,
            'can_verify': bool,
            'registration_id': str,
            'user': str
        }

        self.attribute_map = {
            'can_change_status': 'canChangeStatus',
            'can_verify': 'canVerify',
            'registration_id': 'registrationId',
            'user': 'user'
        }

        self._can_change_status = can_change_status
        self._can_verify = can_verify
        self._registration_id = registration_id
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CredasApiModelsReportViewGetReportViewByRegistrationIdRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Credas.Api.Models.ReportView.GetReportViewByRegistrationIdRequest of this CredasApiModelsReportViewGetReportViewByRegistrationIdRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_change_status(self):
        """Gets the can_change_status of this CredasApiModelsReportViewGetReportViewByRegistrationIdRequest.


        :return: The can_change_status of this CredasApiModelsReportViewGetReportViewByRegistrationIdRequest.
        :rtype: bool
        """
        return self._can_change_status

    @can_change_status.setter
    def can_change_status(self, can_change_status):
        """Sets the can_change_status of this CredasApiModelsReportViewGetReportViewByRegistrationIdRequest.


        :param can_change_status: The can_change_status of this CredasApiModelsReportViewGetReportViewByRegistrationIdRequest.
        :type can_change_status: bool
        """

        self._can_change_status = can_change_status

    @property
    def can_verify(self):
        """Gets the can_verify of this CredasApiModelsReportViewGetReportViewByRegistrationIdRequest.


        :return: The can_verify of this CredasApiModelsReportViewGetReportViewByRegistrationIdRequest.
        :rtype: bool
        """
        return self._can_verify

    @can_verify.setter
    def can_verify(self, can_verify):
        """Sets the can_verify of this CredasApiModelsReportViewGetReportViewByRegistrationIdRequest.


        :param can_verify: The can_verify of this CredasApiModelsReportViewGetReportViewByRegistrationIdRequest.
        :type can_verify: bool
        """

        self._can_verify = can_verify

    @property
    def registration_id(self):
        """Gets the registration_id of this CredasApiModelsReportViewGetReportViewByRegistrationIdRequest.


        :return: The registration_id of this CredasApiModelsReportViewGetReportViewByRegistrationIdRequest.
        :rtype: str
        """
        return self._registration_id

    @registration_id.setter
    def registration_id(self, registration_id):
        """Sets the registration_id of this CredasApiModelsReportViewGetReportViewByRegistrationIdRequest.


        :param registration_id: The registration_id of this CredasApiModelsReportViewGetReportViewByRegistrationIdRequest.
        :type registration_id: str
        """
        if registration_id is None:
            raise ValueError("Invalid value for `registration_id`, must not be `None`")

        self._registration_id = registration_id

    @property
    def user(self):
        """Gets the user of this CredasApiModelsReportViewGetReportViewByRegistrationIdRequest.


        :return: The user of this CredasApiModelsReportViewGetReportViewByRegistrationIdRequest.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CredasApiModelsReportViewGetReportViewByRegistrationIdRequest.


        :param user: The user of this CredasApiModelsReportViewGetReportViewByRegistrationIdRequest.
        :type user: str
        """
        if user is not None and len(user) > 200:
            raise ValueError("Invalid value for `user`, length must be less than or equal to `200`")
        if user is not None and len(user) < 0:
            raise ValueError("Invalid value for `user`, length must be greater than or equal to `0`")

        self._user = user
