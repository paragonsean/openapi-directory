# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CredasApiModelsDataCheckPerson(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_of_birth: datetime=None, forename: str=None, middle_name: str=None, surname: str=None):
        """CredasApiModelsDataCheckPerson - a model defined in OpenAPI

        :param date_of_birth: The date_of_birth of this CredasApiModelsDataCheckPerson.
        :param forename: The forename of this CredasApiModelsDataCheckPerson.
        :param middle_name: The middle_name of this CredasApiModelsDataCheckPerson.
        :param surname: The surname of this CredasApiModelsDataCheckPerson.
        """
        self.openapi_types = {
            'date_of_birth': datetime,
            'forename': str,
            'middle_name': str,
            'surname': str
        }

        self.attribute_map = {
            'date_of_birth': 'dateOfBirth',
            'forename': 'forename',
            'middle_name': 'middleName',
            'surname': 'surname'
        }

        self._date_of_birth = date_of_birth
        self._forename = forename
        self._middle_name = middle_name
        self._surname = surname

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CredasApiModelsDataCheckPerson':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Credas.Api.Models.DataCheck.Person of this CredasApiModelsDataCheckPerson.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this CredasApiModelsDataCheckPerson.


        :return: The date_of_birth of this CredasApiModelsDataCheckPerson.
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this CredasApiModelsDataCheckPerson.


        :param date_of_birth: The date_of_birth of this CredasApiModelsDataCheckPerson.
        :type date_of_birth: datetime
        """
        if date_of_birth is None:
            raise ValueError("Invalid value for `date_of_birth`, must not be `None`")

        self._date_of_birth = date_of_birth

    @property
    def forename(self):
        """Gets the forename of this CredasApiModelsDataCheckPerson.


        :return: The forename of this CredasApiModelsDataCheckPerson.
        :rtype: str
        """
        return self._forename

    @forename.setter
    def forename(self, forename):
        """Sets the forename of this CredasApiModelsDataCheckPerson.


        :param forename: The forename of this CredasApiModelsDataCheckPerson.
        :type forename: str
        """
        if forename is None:
            raise ValueError("Invalid value for `forename`, must not be `None`")
        if forename is not None and not re.search(r'^([A-Za-z0-9 \'\.,&\(\)\/-]*)$', forename):
            raise ValueError("Invalid value for `forename`, must be a follow pattern or equal to `/^([A-Za-z0-9 '\.,&\(\)\/-]*)$/`")

        self._forename = forename

    @property
    def middle_name(self):
        """Gets the middle_name of this CredasApiModelsDataCheckPerson.


        :return: The middle_name of this CredasApiModelsDataCheckPerson.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this CredasApiModelsDataCheckPerson.


        :param middle_name: The middle_name of this CredasApiModelsDataCheckPerson.
        :type middle_name: str
        """
        if middle_name is not None and not re.search(r'^([A-Za-z0-9 \'\.,&\(\)\/-]*)$', middle_name):
            raise ValueError("Invalid value for `middle_name`, must be a follow pattern or equal to `/^([A-Za-z0-9 '\.,&\(\)\/-]*)$/`")

        self._middle_name = middle_name

    @property
    def surname(self):
        """Gets the surname of this CredasApiModelsDataCheckPerson.


        :return: The surname of this CredasApiModelsDataCheckPerson.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this CredasApiModelsDataCheckPerson.


        :param surname: The surname of this CredasApiModelsDataCheckPerson.
        :type surname: str
        """
        if surname is None:
            raise ValueError("Invalid value for `surname`, must not be `None`")
        if surname is not None and not re.search(r'^([A-Za-z0-9 \'\.,&\(\)\/-]*)$', surname):
            raise ValueError("Invalid value for `surname`, must be a follow pattern or equal to `/^([A-Za-z0-9 '\.,&\(\)\/-]*)$/`")

        self._surname = surname
