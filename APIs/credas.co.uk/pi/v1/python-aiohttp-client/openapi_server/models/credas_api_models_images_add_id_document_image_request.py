# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.credas_api_models_registrations_key_value_item import CredasApiModelsRegistrationsKeyValueItem
from openapi_server import util


class CredasApiModelsImagesAddIdDocumentImageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_parameters: List[CredasApiModelsRegistrationsKeyValueItem]=None, document_type: int=None, image_data: str=None, registration_id: str=None):
        """CredasApiModelsImagesAddIdDocumentImageRequest - a model defined in OpenAPI

        :param document_parameters: The document_parameters of this CredasApiModelsImagesAddIdDocumentImageRequest.
        :param document_type: The document_type of this CredasApiModelsImagesAddIdDocumentImageRequest.
        :param image_data: The image_data of this CredasApiModelsImagesAddIdDocumentImageRequest.
        :param registration_id: The registration_id of this CredasApiModelsImagesAddIdDocumentImageRequest.
        """
        self.openapi_types = {
            'document_parameters': List[CredasApiModelsRegistrationsKeyValueItem],
            'document_type': int,
            'image_data': str,
            'registration_id': str
        }

        self.attribute_map = {
            'document_parameters': 'documentParameters',
            'document_type': 'documentType',
            'image_data': 'imageData',
            'registration_id': 'registrationId'
        }

        self._document_parameters = document_parameters
        self._document_type = document_type
        self._image_data = image_data
        self._registration_id = registration_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CredasApiModelsImagesAddIdDocumentImageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Credas.Api.Models.Images.AddIdDocumentImageRequest of this CredasApiModelsImagesAddIdDocumentImageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_parameters(self):
        """Gets the document_parameters of this CredasApiModelsImagesAddIdDocumentImageRequest.


        :return: The document_parameters of this CredasApiModelsImagesAddIdDocumentImageRequest.
        :rtype: List[CredasApiModelsRegistrationsKeyValueItem]
        """
        return self._document_parameters

    @document_parameters.setter
    def document_parameters(self, document_parameters):
        """Sets the document_parameters of this CredasApiModelsImagesAddIdDocumentImageRequest.


        :param document_parameters: The document_parameters of this CredasApiModelsImagesAddIdDocumentImageRequest.
        :type document_parameters: List[CredasApiModelsRegistrationsKeyValueItem]
        """

        self._document_parameters = document_parameters

    @property
    def document_type(self):
        """Gets the document_type of this CredasApiModelsImagesAddIdDocumentImageRequest.

        Other = 0, Passport = 1, DrivingLicence = 2, Visa = 3, CscsCard = 4, HomeOfficeLetter = 5, BirthCertificate = 6, NationalIdCard = 7, ResidencePermit = 9, UtilityBill = 11

        :return: The document_type of this CredasApiModelsImagesAddIdDocumentImageRequest.
        :rtype: int
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this CredasApiModelsImagesAddIdDocumentImageRequest.

        Other = 0, Passport = 1, DrivingLicence = 2, Visa = 3, CscsCard = 4, HomeOfficeLetter = 5, BirthCertificate = 6, NationalIdCard = 7, ResidencePermit = 9, UtilityBill = 11

        :param document_type: The document_type of this CredasApiModelsImagesAddIdDocumentImageRequest.
        :type document_type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11]  # noqa: E501
        if document_type not in allowed_values:
            raise ValueError(
                "Invalid value for `document_type` ({0}), must be one of {1}"
                .format(document_type, allowed_values)
            )

        self._document_type = document_type

    @property
    def image_data(self):
        """Gets the image_data of this CredasApiModelsImagesAddIdDocumentImageRequest.


        :return: The image_data of this CredasApiModelsImagesAddIdDocumentImageRequest.
        :rtype: str
        """
        return self._image_data

    @image_data.setter
    def image_data(self, image_data):
        """Sets the image_data of this CredasApiModelsImagesAddIdDocumentImageRequest.


        :param image_data: The image_data of this CredasApiModelsImagesAddIdDocumentImageRequest.
        :type image_data: str
        """
        if image_data is None:
            raise ValueError("Invalid value for `image_data`, must not be `None`")

        self._image_data = image_data

    @property
    def registration_id(self):
        """Gets the registration_id of this CredasApiModelsImagesAddIdDocumentImageRequest.


        :return: The registration_id of this CredasApiModelsImagesAddIdDocumentImageRequest.
        :rtype: str
        """
        return self._registration_id

    @registration_id.setter
    def registration_id(self, registration_id):
        """Sets the registration_id of this CredasApiModelsImagesAddIdDocumentImageRequest.


        :param registration_id: The registration_id of this CredasApiModelsImagesAddIdDocumentImageRequest.
        :type registration_id: str
        """
        if registration_id is None:
            raise ValueError("Invalid value for `registration_id`, must not be `None`")

        self._registration_id = registration_id
