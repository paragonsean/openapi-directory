# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.credas_api_models_bank_accounts_account_details import CredasApiModelsBankAccountsAccountDetails
from openapi_server.models.credas_api_models_bank_accounts_person import CredasApiModelsBankAccountsPerson
from openapi_server.models.credas_api_models_data_check_address import CredasApiModelsDataCheckAddress
from openapi_server import util


class CredasApiModelsBankAccountsAccountVerificationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_details: CredasApiModelsBankAccountsAccountDetails=None, address: CredasApiModelsDataCheckAddress=None, person: CredasApiModelsBankAccountsPerson=None, reg_entry_id: str=None):
        """CredasApiModelsBankAccountsAccountVerificationRequest - a model defined in OpenAPI

        :param account_details: The account_details of this CredasApiModelsBankAccountsAccountVerificationRequest.
        :param address: The address of this CredasApiModelsBankAccountsAccountVerificationRequest.
        :param person: The person of this CredasApiModelsBankAccountsAccountVerificationRequest.
        :param reg_entry_id: The reg_entry_id of this CredasApiModelsBankAccountsAccountVerificationRequest.
        """
        self.openapi_types = {
            'account_details': CredasApiModelsBankAccountsAccountDetails,
            'address': CredasApiModelsDataCheckAddress,
            'person': CredasApiModelsBankAccountsPerson,
            'reg_entry_id': str
        }

        self.attribute_map = {
            'account_details': 'accountDetails',
            'address': 'address',
            'person': 'person',
            'reg_entry_id': 'regEntryId'
        }

        self._account_details = account_details
        self._address = address
        self._person = person
        self._reg_entry_id = reg_entry_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CredasApiModelsBankAccountsAccountVerificationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Credas.Api.Models.BankAccounts.AccountVerificationRequest of this CredasApiModelsBankAccountsAccountVerificationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_details(self):
        """Gets the account_details of this CredasApiModelsBankAccountsAccountVerificationRequest.


        :return: The account_details of this CredasApiModelsBankAccountsAccountVerificationRequest.
        :rtype: CredasApiModelsBankAccountsAccountDetails
        """
        return self._account_details

    @account_details.setter
    def account_details(self, account_details):
        """Sets the account_details of this CredasApiModelsBankAccountsAccountVerificationRequest.


        :param account_details: The account_details of this CredasApiModelsBankAccountsAccountVerificationRequest.
        :type account_details: CredasApiModelsBankAccountsAccountDetails
        """
        if account_details is None:
            raise ValueError("Invalid value for `account_details`, must not be `None`")

        self._account_details = account_details

    @property
    def address(self):
        """Gets the address of this CredasApiModelsBankAccountsAccountVerificationRequest.


        :return: The address of this CredasApiModelsBankAccountsAccountVerificationRequest.
        :rtype: CredasApiModelsDataCheckAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CredasApiModelsBankAccountsAccountVerificationRequest.


        :param address: The address of this CredasApiModelsBankAccountsAccountVerificationRequest.
        :type address: CredasApiModelsDataCheckAddress
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def person(self):
        """Gets the person of this CredasApiModelsBankAccountsAccountVerificationRequest.


        :return: The person of this CredasApiModelsBankAccountsAccountVerificationRequest.
        :rtype: CredasApiModelsBankAccountsPerson
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this CredasApiModelsBankAccountsAccountVerificationRequest.


        :param person: The person of this CredasApiModelsBankAccountsAccountVerificationRequest.
        :type person: CredasApiModelsBankAccountsPerson
        """
        if person is None:
            raise ValueError("Invalid value for `person`, must not be `None`")

        self._person = person

    @property
    def reg_entry_id(self):
        """Gets the reg_entry_id of this CredasApiModelsBankAccountsAccountVerificationRequest.


        :return: The reg_entry_id of this CredasApiModelsBankAccountsAccountVerificationRequest.
        :rtype: str
        """
        return self._reg_entry_id

    @reg_entry_id.setter
    def reg_entry_id(self, reg_entry_id):
        """Sets the reg_entry_id of this CredasApiModelsBankAccountsAccountVerificationRequest.


        :param reg_entry_id: The reg_entry_id of this CredasApiModelsBankAccountsAccountVerificationRequest.
        :type reg_entry_id: str
        """
        if reg_entry_id is None:
            raise ValueError("Invalid value for `reg_entry_id`, must not be `None`")

        self._reg_entry_id = reg_entry_id
