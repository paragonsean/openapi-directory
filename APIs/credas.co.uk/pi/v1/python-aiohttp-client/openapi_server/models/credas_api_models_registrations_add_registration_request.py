# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.credas_api_models_registrations_key_value_item import CredasApiModelsRegistrationsKeyValueItem
from openapi_server.models.credas_api_models_registrations_registration_settings import CredasApiModelsRegistrationsRegistrationSettings
from openapi_server.models.credas_api_models_registrations_return_urls import CredasApiModelsRegistrationsReturnUrls
from openapi_server import util


class CredasApiModelsRegistrationsAddRegistrationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dialling_code: str=None, duplicate_acknowledgement: bool=None, email_address: str=None, forename: str=None, middle_name: str=None, parameters: List[CredasApiModelsRegistrationsKeyValueItem]=None, phone_number: str=None, provide_web_journey_link: bool=None, reference_id: str=None, reg_type_id: str=None, return_urls: CredasApiModelsRegistrationsReturnUrls=None, send_email: bool=None, send_sms: bool=None, settings: CredasApiModelsRegistrationsRegistrationSettings=None, significant_person_id: str=None, surname: str=None):
        """CredasApiModelsRegistrationsAddRegistrationRequest - a model defined in OpenAPI

        :param dialling_code: The dialling_code of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :param duplicate_acknowledgement: The duplicate_acknowledgement of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :param email_address: The email_address of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :param forename: The forename of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :param middle_name: The middle_name of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :param parameters: The parameters of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :param phone_number: The phone_number of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :param provide_web_journey_link: The provide_web_journey_link of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :param reference_id: The reference_id of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :param reg_type_id: The reg_type_id of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :param return_urls: The return_urls of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :param send_email: The send_email of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :param send_sms: The send_sms of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :param settings: The settings of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :param significant_person_id: The significant_person_id of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :param surname: The surname of this CredasApiModelsRegistrationsAddRegistrationRequest.
        """
        self.openapi_types = {
            'dialling_code': str,
            'duplicate_acknowledgement': bool,
            'email_address': str,
            'forename': str,
            'middle_name': str,
            'parameters': List[CredasApiModelsRegistrationsKeyValueItem],
            'phone_number': str,
            'provide_web_journey_link': bool,
            'reference_id': str,
            'reg_type_id': str,
            'return_urls': CredasApiModelsRegistrationsReturnUrls,
            'send_email': bool,
            'send_sms': bool,
            'settings': CredasApiModelsRegistrationsRegistrationSettings,
            'significant_person_id': str,
            'surname': str
        }

        self.attribute_map = {
            'dialling_code': 'diallingCode',
            'duplicate_acknowledgement': 'duplicateAcknowledgement',
            'email_address': 'emailAddress',
            'forename': 'forename',
            'middle_name': 'middleName',
            'parameters': 'parameters',
            'phone_number': 'phoneNumber',
            'provide_web_journey_link': 'provideWebJourneyLink',
            'reference_id': 'referenceId',
            'reg_type_id': 'regTypeId',
            'return_urls': 'returnUrls',
            'send_email': 'sendEmail',
            'send_sms': 'sendSms',
            'settings': 'settings',
            'significant_person_id': 'significantPersonId',
            'surname': 'surname'
        }

        self._dialling_code = dialling_code
        self._duplicate_acknowledgement = duplicate_acknowledgement
        self._email_address = email_address
        self._forename = forename
        self._middle_name = middle_name
        self._parameters = parameters
        self._phone_number = phone_number
        self._provide_web_journey_link = provide_web_journey_link
        self._reference_id = reference_id
        self._reg_type_id = reg_type_id
        self._return_urls = return_urls
        self._send_email = send_email
        self._send_sms = send_sms
        self._settings = settings
        self._significant_person_id = significant_person_id
        self._surname = surname

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CredasApiModelsRegistrationsAddRegistrationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Credas.Api.Models.Registrations.AddRegistrationRequest of this CredasApiModelsRegistrationsAddRegistrationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dialling_code(self):
        """Gets the dialling_code of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :return: The dialling_code of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :rtype: str
        """
        return self._dialling_code

    @dialling_code.setter
    def dialling_code(self, dialling_code):
        """Sets the dialling_code of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :param dialling_code: The dialling_code of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :type dialling_code: str
        """
        if dialling_code is not None and len(dialling_code) > 10:
            raise ValueError("Invalid value for `dialling_code`, length must be less than or equal to `10`")
        if dialling_code is not None and len(dialling_code) < 1:
            raise ValueError("Invalid value for `dialling_code`, length must be greater than or equal to `1`")

        self._dialling_code = dialling_code

    @property
    def duplicate_acknowledgement(self):
        """Gets the duplicate_acknowledgement of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :return: The duplicate_acknowledgement of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :rtype: bool
        """
        return self._duplicate_acknowledgement

    @duplicate_acknowledgement.setter
    def duplicate_acknowledgement(self, duplicate_acknowledgement):
        """Sets the duplicate_acknowledgement of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :param duplicate_acknowledgement: The duplicate_acknowledgement of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :type duplicate_acknowledgement: bool
        """

        self._duplicate_acknowledgement = duplicate_acknowledgement

    @property
    def email_address(self):
        """Gets the email_address of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :return: The email_address of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :param email_address: The email_address of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :type email_address: str
        """
        if email_address is not None and len(email_address) > 250:
            raise ValueError("Invalid value for `email_address`, length must be less than or equal to `250`")
        if email_address is not None and len(email_address) < 0:
            raise ValueError("Invalid value for `email_address`, length must be greater than or equal to `0`")

        self._email_address = email_address

    @property
    def forename(self):
        """Gets the forename of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :return: The forename of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :rtype: str
        """
        return self._forename

    @forename.setter
    def forename(self, forename):
        """Sets the forename of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :param forename: The forename of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :type forename: str
        """
        if forename is None:
            raise ValueError("Invalid value for `forename`, must not be `None`")
        if forename is not None and len(forename) > 50:
            raise ValueError("Invalid value for `forename`, length must be less than or equal to `50`")
        if forename is not None and len(forename) < 1:
            raise ValueError("Invalid value for `forename`, length must be greater than or equal to `1`")

        self._forename = forename

    @property
    def middle_name(self):
        """Gets the middle_name of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :return: The middle_name of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :param middle_name: The middle_name of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :type middle_name: str
        """
        if middle_name is not None and len(middle_name) > 50:
            raise ValueError("Invalid value for `middle_name`, length must be less than or equal to `50`")
        if middle_name is not None and len(middle_name) < 1:
            raise ValueError("Invalid value for `middle_name`, length must be greater than or equal to `1`")

        self._middle_name = middle_name

    @property
    def parameters(self):
        """Gets the parameters of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :return: The parameters of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :rtype: List[CredasApiModelsRegistrationsKeyValueItem]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :param parameters: The parameters of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :type parameters: List[CredasApiModelsRegistrationsKeyValueItem]
        """

        self._parameters = parameters

    @property
    def phone_number(self):
        """Gets the phone_number of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :return: The phone_number of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :param phone_number: The phone_number of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :type phone_number: str
        """
        if phone_number is not None and len(phone_number) > 20:
            raise ValueError("Invalid value for `phone_number`, length must be less than or equal to `20`")
        if phone_number is not None and len(phone_number) < 1:
            raise ValueError("Invalid value for `phone_number`, length must be greater than or equal to `1`")

        self._phone_number = phone_number

    @property
    def provide_web_journey_link(self):
        """Gets the provide_web_journey_link of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :return: The provide_web_journey_link of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :rtype: bool
        """
        return self._provide_web_journey_link

    @provide_web_journey_link.setter
    def provide_web_journey_link(self, provide_web_journey_link):
        """Sets the provide_web_journey_link of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :param provide_web_journey_link: The provide_web_journey_link of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :type provide_web_journey_link: bool
        """

        self._provide_web_journey_link = provide_web_journey_link

    @property
    def reference_id(self):
        """Gets the reference_id of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :return: The reference_id of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :param reference_id: The reference_id of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :type reference_id: str
        """
        if reference_id is not None and len(reference_id) > 255:
            raise ValueError("Invalid value for `reference_id`, length must be less than or equal to `255`")
        if reference_id is not None and len(reference_id) < 0:
            raise ValueError("Invalid value for `reference_id`, length must be greater than or equal to `0`")

        self._reference_id = reference_id

    @property
    def reg_type_id(self):
        """Gets the reg_type_id of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :return: The reg_type_id of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :rtype: str
        """
        return self._reg_type_id

    @reg_type_id.setter
    def reg_type_id(self, reg_type_id):
        """Sets the reg_type_id of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :param reg_type_id: The reg_type_id of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :type reg_type_id: str
        """
        if reg_type_id is None:
            raise ValueError("Invalid value for `reg_type_id`, must not be `None`")

        self._reg_type_id = reg_type_id

    @property
    def return_urls(self):
        """Gets the return_urls of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :return: The return_urls of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :rtype: CredasApiModelsRegistrationsReturnUrls
        """
        return self._return_urls

    @return_urls.setter
    def return_urls(self, return_urls):
        """Sets the return_urls of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :param return_urls: The return_urls of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :type return_urls: CredasApiModelsRegistrationsReturnUrls
        """

        self._return_urls = return_urls

    @property
    def send_email(self):
        """Gets the send_email of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :return: The send_email of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :rtype: bool
        """
        return self._send_email

    @send_email.setter
    def send_email(self, send_email):
        """Sets the send_email of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :param send_email: The send_email of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :type send_email: bool
        """

        self._send_email = send_email

    @property
    def send_sms(self):
        """Gets the send_sms of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :return: The send_sms of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :rtype: bool
        """
        return self._send_sms

    @send_sms.setter
    def send_sms(self, send_sms):
        """Sets the send_sms of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :param send_sms: The send_sms of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :type send_sms: bool
        """
        if send_sms is None:
            raise ValueError("Invalid value for `send_sms`, must not be `None`")

        self._send_sms = send_sms

    @property
    def settings(self):
        """Gets the settings of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :return: The settings of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :rtype: CredasApiModelsRegistrationsRegistrationSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :param settings: The settings of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :type settings: CredasApiModelsRegistrationsRegistrationSettings
        """

        self._settings = settings

    @property
    def significant_person_id(self):
        """Gets the significant_person_id of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :return: The significant_person_id of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :rtype: str
        """
        return self._significant_person_id

    @significant_person_id.setter
    def significant_person_id(self, significant_person_id):
        """Sets the significant_person_id of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :param significant_person_id: The significant_person_id of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :type significant_person_id: str
        """

        self._significant_person_id = significant_person_id

    @property
    def surname(self):
        """Gets the surname of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :return: The surname of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this CredasApiModelsRegistrationsAddRegistrationRequest.


        :param surname: The surname of this CredasApiModelsRegistrationsAddRegistrationRequest.
        :type surname: str
        """
        if surname is None:
            raise ValueError("Invalid value for `surname`, must not be `None`")
        if surname is not None and len(surname) > 50:
            raise ValueError("Invalid value for `surname`, length must be less than or equal to `50`")
        if surname is not None and len(surname) < 1:
            raise ValueError("Invalid value for `surname`, length must be greater than or equal to `1`")

        self._surname = surname
