# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CredasApiModelsPropertyRegisterAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_line1: str=None, address_line2: str=None, address_line3: str=None, city: str=None, country: str=None, county: str=None, postcode: str=None):
        """CredasApiModelsPropertyRegisterAddress - a model defined in OpenAPI

        :param address_line1: The address_line1 of this CredasApiModelsPropertyRegisterAddress.
        :param address_line2: The address_line2 of this CredasApiModelsPropertyRegisterAddress.
        :param address_line3: The address_line3 of this CredasApiModelsPropertyRegisterAddress.
        :param city: The city of this CredasApiModelsPropertyRegisterAddress.
        :param country: The country of this CredasApiModelsPropertyRegisterAddress.
        :param county: The county of this CredasApiModelsPropertyRegisterAddress.
        :param postcode: The postcode of this CredasApiModelsPropertyRegisterAddress.
        """
        self.openapi_types = {
            'address_line1': str,
            'address_line2': str,
            'address_line3': str,
            'city': str,
            'country': str,
            'county': str,
            'postcode': str
        }

        self.attribute_map = {
            'address_line1': 'addressLine1',
            'address_line2': 'addressLine2',
            'address_line3': 'addressLine3',
            'city': 'city',
            'country': 'country',
            'county': 'county',
            'postcode': 'postcode'
        }

        self._address_line1 = address_line1
        self._address_line2 = address_line2
        self._address_line3 = address_line3
        self._city = city
        self._country = country
        self._county = county
        self._postcode = postcode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CredasApiModelsPropertyRegisterAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Credas.Api.Models.PropertyRegister.Address of this CredasApiModelsPropertyRegisterAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_line1(self):
        """Gets the address_line1 of this CredasApiModelsPropertyRegisterAddress.


        :return: The address_line1 of this CredasApiModelsPropertyRegisterAddress.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this CredasApiModelsPropertyRegisterAddress.


        :param address_line1: The address_line1 of this CredasApiModelsPropertyRegisterAddress.
        :type address_line1: str
        """
        if address_line1 is None:
            raise ValueError("Invalid value for `address_line1`, must not be `None`")

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this CredasApiModelsPropertyRegisterAddress.


        :return: The address_line2 of this CredasApiModelsPropertyRegisterAddress.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this CredasApiModelsPropertyRegisterAddress.


        :param address_line2: The address_line2 of this CredasApiModelsPropertyRegisterAddress.
        :type address_line2: str
        """

        self._address_line2 = address_line2

    @property
    def address_line3(self):
        """Gets the address_line3 of this CredasApiModelsPropertyRegisterAddress.


        :return: The address_line3 of this CredasApiModelsPropertyRegisterAddress.
        :rtype: str
        """
        return self._address_line3

    @address_line3.setter
    def address_line3(self, address_line3):
        """Sets the address_line3 of this CredasApiModelsPropertyRegisterAddress.


        :param address_line3: The address_line3 of this CredasApiModelsPropertyRegisterAddress.
        :type address_line3: str
        """

        self._address_line3 = address_line3

    @property
    def city(self):
        """Gets the city of this CredasApiModelsPropertyRegisterAddress.


        :return: The city of this CredasApiModelsPropertyRegisterAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CredasApiModelsPropertyRegisterAddress.


        :param city: The city of this CredasApiModelsPropertyRegisterAddress.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def country(self):
        """Gets the country of this CredasApiModelsPropertyRegisterAddress.


        :return: The country of this CredasApiModelsPropertyRegisterAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CredasApiModelsPropertyRegisterAddress.


        :param country: The country of this CredasApiModelsPropertyRegisterAddress.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def county(self):
        """Gets the county of this CredasApiModelsPropertyRegisterAddress.


        :return: The county of this CredasApiModelsPropertyRegisterAddress.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this CredasApiModelsPropertyRegisterAddress.


        :param county: The county of this CredasApiModelsPropertyRegisterAddress.
        :type county: str
        """

        self._county = county

    @property
    def postcode(self):
        """Gets the postcode of this CredasApiModelsPropertyRegisterAddress.


        :return: The postcode of this CredasApiModelsPropertyRegisterAddress.
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this CredasApiModelsPropertyRegisterAddress.


        :param postcode: The postcode of this CredasApiModelsPropertyRegisterAddress.
        :type postcode: str
        """
        if postcode is None:
            raise ValueError("Invalid value for `postcode`, must not be `None`")

        self._postcode = postcode
