# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CredasApiModelsBankAccountsPerson(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, forename: str=None, middle_name: str=None, surname: str=None):
        """CredasApiModelsBankAccountsPerson - a model defined in OpenAPI

        :param forename: The forename of this CredasApiModelsBankAccountsPerson.
        :param middle_name: The middle_name of this CredasApiModelsBankAccountsPerson.
        :param surname: The surname of this CredasApiModelsBankAccountsPerson.
        """
        self.openapi_types = {
            'forename': str,
            'middle_name': str,
            'surname': str
        }

        self.attribute_map = {
            'forename': 'forename',
            'middle_name': 'middleName',
            'surname': 'surname'
        }

        self._forename = forename
        self._middle_name = middle_name
        self._surname = surname

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CredasApiModelsBankAccountsPerson':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Credas.Api.Models.BankAccounts.Person of this CredasApiModelsBankAccountsPerson.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def forename(self):
        """Gets the forename of this CredasApiModelsBankAccountsPerson.


        :return: The forename of this CredasApiModelsBankAccountsPerson.
        :rtype: str
        """
        return self._forename

    @forename.setter
    def forename(self, forename):
        """Sets the forename of this CredasApiModelsBankAccountsPerson.


        :param forename: The forename of this CredasApiModelsBankAccountsPerson.
        :type forename: str
        """
        if forename is None:
            raise ValueError("Invalid value for `forename`, must not be `None`")

        self._forename = forename

    @property
    def middle_name(self):
        """Gets the middle_name of this CredasApiModelsBankAccountsPerson.


        :return: The middle_name of this CredasApiModelsBankAccountsPerson.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this CredasApiModelsBankAccountsPerson.


        :param middle_name: The middle_name of this CredasApiModelsBankAccountsPerson.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def surname(self):
        """Gets the surname of this CredasApiModelsBankAccountsPerson.


        :return: The surname of this CredasApiModelsBankAccountsPerson.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this CredasApiModelsBankAccountsPerson.


        :param surname: The surname of this CredasApiModelsBankAccountsPerson.
        :type surname: str
        """
        if surname is None:
            raise ValueError("Invalid value for `surname`, must not be `None`")

        self._surname = surname
