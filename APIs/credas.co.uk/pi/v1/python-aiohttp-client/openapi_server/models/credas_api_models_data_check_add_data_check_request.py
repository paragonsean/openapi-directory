# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.credas_api_models_data_check_address import CredasApiModelsDataCheckAddress
from openapi_server.models.credas_api_models_data_check_person import CredasApiModelsDataCheckPerson
from openapi_server import util


class CredasApiModelsDataCheckAddDataCheckRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, check_type: int=None, current_address: CredasApiModelsDataCheckAddress=None, person: CredasApiModelsDataCheckPerson=None, reg_entry_id: str=None):
        """CredasApiModelsDataCheckAddDataCheckRequest - a model defined in OpenAPI

        :param check_type: The check_type of this CredasApiModelsDataCheckAddDataCheckRequest.
        :param current_address: The current_address of this CredasApiModelsDataCheckAddDataCheckRequest.
        :param person: The person of this CredasApiModelsDataCheckAddDataCheckRequest.
        :param reg_entry_id: The reg_entry_id of this CredasApiModelsDataCheckAddDataCheckRequest.
        """
        self.openapi_types = {
            'check_type': int,
            'current_address': CredasApiModelsDataCheckAddress,
            'person': CredasApiModelsDataCheckPerson,
            'reg_entry_id': str
        }

        self.attribute_map = {
            'check_type': 'checkType',
            'current_address': 'currentAddress',
            'person': 'person',
            'reg_entry_id': 'regEntryId'
        }

        self._check_type = check_type
        self._current_address = current_address
        self._person = person
        self._reg_entry_id = reg_entry_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CredasApiModelsDataCheckAddDataCheckRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Credas.Api.Models.DataCheck.AddDataCheckRequest of this CredasApiModelsDataCheckAddDataCheckRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def check_type(self):
        """Gets the check_type of this CredasApiModelsDataCheckAddDataCheckRequest.

        The value of checkType dictates what checks are performed. <br/>The StandardAml check (value = 1) will check DOB & Mortality. <br/>The InternationalPepSanctions check (value = 3) will check just International PEP & Sanctions. <br/>The EnhancedAml check (value = 2) will perform both these checks and is equivalent to making two calls with values of 1 then 3 and will be charged accordingly. <br />  values=> None = 0, StandardAml = 1, EnhancedAml = 2, InternationalPepSanctions = 3

        :return: The check_type of this CredasApiModelsDataCheckAddDataCheckRequest.
        :rtype: int
        """
        return self._check_type

    @check_type.setter
    def check_type(self, check_type):
        """Sets the check_type of this CredasApiModelsDataCheckAddDataCheckRequest.

        The value of checkType dictates what checks are performed. <br/>The StandardAml check (value = 1) will check DOB & Mortality. <br/>The InternationalPepSanctions check (value = 3) will check just International PEP & Sanctions. <br/>The EnhancedAml check (value = 2) will perform both these checks and is equivalent to making two calls with values of 1 then 3 and will be charged accordingly. <br />  values=> None = 0, StandardAml = 1, EnhancedAml = 2, InternationalPepSanctions = 3

        :param check_type: The check_type of this CredasApiModelsDataCheckAddDataCheckRequest.
        :type check_type: int
        """
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if check_type not in allowed_values:
            raise ValueError(
                "Invalid value for `check_type` ({0}), must be one of {1}"
                .format(check_type, allowed_values)
            )

        self._check_type = check_type

    @property
    def current_address(self):
        """Gets the current_address of this CredasApiModelsDataCheckAddDataCheckRequest.


        :return: The current_address of this CredasApiModelsDataCheckAddDataCheckRequest.
        :rtype: CredasApiModelsDataCheckAddress
        """
        return self._current_address

    @current_address.setter
    def current_address(self, current_address):
        """Sets the current_address of this CredasApiModelsDataCheckAddDataCheckRequest.


        :param current_address: The current_address of this CredasApiModelsDataCheckAddDataCheckRequest.
        :type current_address: CredasApiModelsDataCheckAddress
        """
        if current_address is None:
            raise ValueError("Invalid value for `current_address`, must not be `None`")

        self._current_address = current_address

    @property
    def person(self):
        """Gets the person of this CredasApiModelsDataCheckAddDataCheckRequest.


        :return: The person of this CredasApiModelsDataCheckAddDataCheckRequest.
        :rtype: CredasApiModelsDataCheckPerson
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this CredasApiModelsDataCheckAddDataCheckRequest.


        :param person: The person of this CredasApiModelsDataCheckAddDataCheckRequest.
        :type person: CredasApiModelsDataCheckPerson
        """
        if person is None:
            raise ValueError("Invalid value for `person`, must not be `None`")

        self._person = person

    @property
    def reg_entry_id(self):
        """Gets the reg_entry_id of this CredasApiModelsDataCheckAddDataCheckRequest.


        :return: The reg_entry_id of this CredasApiModelsDataCheckAddDataCheckRequest.
        :rtype: str
        """
        return self._reg_entry_id

    @reg_entry_id.setter
    def reg_entry_id(self, reg_entry_id):
        """Sets the reg_entry_id of this CredasApiModelsDataCheckAddDataCheckRequest.


        :param reg_entry_id: The reg_entry_id of this CredasApiModelsDataCheckAddDataCheckRequest.
        :type reg_entry_id: str
        """
        if reg_entry_id is None:
            raise ValueError("Invalid value for `reg_entry_id`, must not be `None`")

        self._reg_entry_id = reg_entry_id
