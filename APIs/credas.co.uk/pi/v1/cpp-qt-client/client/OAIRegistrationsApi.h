/**
 * Credas API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRegistrationsApi_H
#define OAI_OAIRegistrationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICredas_Api_Models_Errors_ErrorResponse.h"
#include "OAICredas_Api_Models_Registrations_AddInstantRegistrationRequest.h"
#include "OAICredas_Api_Models_Registrations_AddInstantRegistrationResponse.h"
#include "OAICredas_Api_Models_Registrations_AddRegistrationRequest.h"
#include "OAICredas_Api_Models_Registrations_AddRegistrationResponse.h"
#include "OAICredas_Api_Models_Registrations_CheckSubmittedIdDocumentsResponse.h"
#include "OAICredas_Api_Models_Registrations_PagedRegistrationSummary.h"
#include "OAICredas_Api_Models_Registrations_RegistrationSettings.h"
#include "OAICredas_Api_Models_Registrations_RegistrationSummary.h"
#include "OAICredas_Api_Models_Registrations_SupportedIdDocument.h"
#include "OAICredas_Api_Models_Registrations_UpdateContactDetailsRequest.h"
#include "OAICredas_Api_Models_Registrations_UpdateRegistrationStatusRequest.h"
#include "OAICredas_Api_Models_StatusOverrides_OverrideCheckStatusRequest.h"
#include <QByteArray>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRegistrationsApi : public QObject {
    Q_OBJECT

public:
    OAIRegistrationsApi(const int timeOut = 0);
    ~OAIRegistrationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  apikey QString [required]
    * @param[in]  oai_credas_api_models_registrations_add_instant_registration_request OAICredas_Api_Models_Registrations_AddInstantRegistrationRequest [optional]
    */
    virtual void addInstantRegistration(const QString &apikey, const ::OpenAPI::OptionalParam<OAICredas_Api_Models_Registrations_AddInstantRegistrationRequest> &oai_credas_api_models_registrations_add_instant_registration_request = ::OpenAPI::OptionalParam<OAICredas_Api_Models_Registrations_AddInstantRegistrationRequest>());

    /**
    * @param[in]  apikey QString [required]
    * @param[in]  oai_credas_api_models_registrations_add_registration_request OAICredas_Api_Models_Registrations_AddRegistrationRequest [optional]
    */
    virtual void addRegistration(const QString &apikey, const ::OpenAPI::OptionalParam<OAICredas_Api_Models_Registrations_AddRegistrationRequest> &oai_credas_api_models_registrations_add_registration_request = ::OpenAPI::OptionalParam<OAICredas_Api_Models_Registrations_AddRegistrationRequest>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  apikey QString [required]
    * @param[in]  comments bool [optional]
    * @param[in]  contact_details bool [optional]
    * @param[in]  standard_checks bool [optional]
    * @param[in]  pep_sanction_checks bool [optional]
    * @param[in]  proof_of_ownership bool [optional]
    * @param[in]  bank_account_check bool [optional]
    * @param[in]  credit_status_check bool [optional]
    * @param[in]  liveness bool [optional]
    * @param[in]  exclude_selfie bool [optional]
    * @param[in]  exclude_id_documents bool [optional]
    * @param[in]  diatf_section bool [optional]
    */
    virtual void apiRegistrationsIdPdfExportSectionsGet(const QString &id, const QString &apikey, const ::OpenAPI::OptionalParam<bool> &comments = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &contact_details = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &standard_checks = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &pep_sanction_checks = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &proof_of_ownership = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &bank_account_check = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &credit_status_check = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &liveness = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_selfie = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_id_documents = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &diatf_section = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  apikey QString [required]
    */
    virtual void checkSubmittedIdDocuments(const QString &id, const QString &apikey);

    /**
    * @param[in]  id QString [required]
    * @param[in]  apikey QString [required]
    */
    virtual void getRegistrationPdfExport(const QString &id, const QString &apikey);

    /**
    * @param[in]  apikey QString [required]
    * @param[in]  page_num qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  forename QString [optional]
    * @param[in]  surname QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  dob QString [optional]
    */
    virtual void getRegistrationSearch(const QString &apikey, const ::OpenAPI::OptionalParam<qint32> &page_num = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &forename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &surname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dob = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  apikey QString [required]
    */
    virtual void getRegistrationSettings(const QString &id, const QString &apikey);

    /**
    * @param[in]  reference_id QString [required]
    * @param[in]  apikey QString [required]
    */
    virtual void getRegistrationSummariesByReferenceId(const QString &reference_id, const QString &apikey);

    /**
    * @param[in]  id QString [required]
    * @param[in]  apikey QString [required]
    */
    virtual void getRegistrationSummary(const QString &id, const QString &apikey);

    /**
    * @param[in]  reg_code QString [required]
    * @param[in]  apikey QString [required]
    */
    virtual void getRegistrationSummaryByRegCode(const QString &reg_code, const QString &apikey);

    /**
    * @param[in]  id QString [required]
    * @param[in]  apikey QString [required]
    */
    virtual void getRegistrationSupportedIdDocuments(const QString &id, const QString &apikey);

    /**
    * @param[in]  id QString [required]
    * @param[in]  apikey QString [required]
    */
    virtual void getShareCodePdfExport(const QString &id, const QString &apikey);

    /**
    * @param[in]  id QString [required]
    * @param[in]  apikey QString [required]
    * @param[in]  oai_credas_api_models_status_overrides_override_check_status_request OAICredas_Api_Models_StatusOverrides_OverrideCheckStatusRequest [optional]
    */
    virtual void overrideCheckStatus(const QString &id, const QString &apikey, const ::OpenAPI::OptionalParam<OAICredas_Api_Models_StatusOverrides_OverrideCheckStatusRequest> &oai_credas_api_models_status_overrides_override_check_status_request = ::OpenAPI::OptionalParam<OAICredas_Api_Models_StatusOverrides_OverrideCheckStatusRequest>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  apikey QString [required]
    */
    virtual void resendInvitation(const QString &id, const QString &apikey);

    /**
    * @param[in]  id QString [required]
    * @param[in]  apikey QString [required]
    * @param[in]  oai_credas_api_models_registrations_update_contact_details_request OAICredas_Api_Models_Registrations_UpdateContactDetailsRequest [optional]
    */
    virtual void updateContactDetails(const QString &id, const QString &apikey, const ::OpenAPI::OptionalParam<OAICredas_Api_Models_Registrations_UpdateContactDetailsRequest> &oai_credas_api_models_registrations_update_contact_details_request = ::OpenAPI::OptionalParam<OAICredas_Api_Models_Registrations_UpdateContactDetailsRequest>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  apikey QString [required]
    * @param[in]  oai_credas_api_models_registrations_registration_settings OAICredas_Api_Models_Registrations_RegistrationSettings [optional]
    */
    virtual void updateRegistrationSettings(const QString &id, const QString &apikey, const ::OpenAPI::OptionalParam<OAICredas_Api_Models_Registrations_RegistrationSettings> &oai_credas_api_models_registrations_registration_settings = ::OpenAPI::OptionalParam<OAICredas_Api_Models_Registrations_RegistrationSettings>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  apikey QString [required]
    * @param[in]  oai_credas_api_models_registrations_update_registration_status_request OAICredas_Api_Models_Registrations_UpdateRegistrationStatusRequest [optional]
    */
    virtual void updateRegistrationStatus(const QString &id, const QString &apikey, const ::OpenAPI::OptionalParam<OAICredas_Api_Models_Registrations_UpdateRegistrationStatusRequest> &oai_credas_api_models_registrations_update_registration_status_request = ::OpenAPI::OptionalParam<OAICredas_Api_Models_Registrations_UpdateRegistrationStatusRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addInstantRegistrationCallback(OAIHttpRequestWorker *worker);
    void addRegistrationCallback(OAIHttpRequestWorker *worker);
    void apiRegistrationsIdPdfExportSectionsGetCallback(OAIHttpRequestWorker *worker);
    void checkSubmittedIdDocumentsCallback(OAIHttpRequestWorker *worker);
    void getRegistrationPdfExportCallback(OAIHttpRequestWorker *worker);
    void getRegistrationSearchCallback(OAIHttpRequestWorker *worker);
    void getRegistrationSettingsCallback(OAIHttpRequestWorker *worker);
    void getRegistrationSummariesByReferenceIdCallback(OAIHttpRequestWorker *worker);
    void getRegistrationSummaryCallback(OAIHttpRequestWorker *worker);
    void getRegistrationSummaryByRegCodeCallback(OAIHttpRequestWorker *worker);
    void getRegistrationSupportedIdDocumentsCallback(OAIHttpRequestWorker *worker);
    void getShareCodePdfExportCallback(OAIHttpRequestWorker *worker);
    void overrideCheckStatusCallback(OAIHttpRequestWorker *worker);
    void resendInvitationCallback(OAIHttpRequestWorker *worker);
    void updateContactDetailsCallback(OAIHttpRequestWorker *worker);
    void updateRegistrationSettingsCallback(OAIHttpRequestWorker *worker);
    void updateRegistrationStatusCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addInstantRegistrationSignal(OAICredas_Api_Models_Registrations_AddInstantRegistrationResponse summary);
    void addRegistrationSignal(OAICredas_Api_Models_Registrations_AddRegistrationResponse summary);
    void apiRegistrationsIdPdfExportSectionsGetSignal(QByteArray summary);
    void checkSubmittedIdDocumentsSignal(OAICredas_Api_Models_Registrations_CheckSubmittedIdDocumentsResponse summary);
    void getRegistrationPdfExportSignal(QByteArray summary);
    void getRegistrationSearchSignal(OAICredas_Api_Models_Registrations_PagedRegistrationSummary summary);
    void getRegistrationSettingsSignal();
    void getRegistrationSummariesByReferenceIdSignal(QList<OAICredas_Api_Models_Registrations_RegistrationSummary> summary);
    void getRegistrationSummarySignal(OAICredas_Api_Models_Registrations_RegistrationSummary summary);
    void getRegistrationSummaryByRegCodeSignal(OAICredas_Api_Models_Registrations_RegistrationSummary summary);
    void getRegistrationSupportedIdDocumentsSignal(OAICredas_Api_Models_Registrations_SupportedIdDocument summary);
    void getShareCodePdfExportSignal(QByteArray summary);
    void overrideCheckStatusSignal();
    void resendInvitationSignal();
    void updateContactDetailsSignal();
    void updateRegistrationSettingsSignal();
    void updateRegistrationStatusSignal();


    void addInstantRegistrationSignalFull(OAIHttpRequestWorker *worker, OAICredas_Api_Models_Registrations_AddInstantRegistrationResponse summary);
    void addRegistrationSignalFull(OAIHttpRequestWorker *worker, OAICredas_Api_Models_Registrations_AddRegistrationResponse summary);
    void apiRegistrationsIdPdfExportSectionsGetSignalFull(OAIHttpRequestWorker *worker, QByteArray summary);
    void checkSubmittedIdDocumentsSignalFull(OAIHttpRequestWorker *worker, OAICredas_Api_Models_Registrations_CheckSubmittedIdDocumentsResponse summary);
    void getRegistrationPdfExportSignalFull(OAIHttpRequestWorker *worker, QByteArray summary);
    void getRegistrationSearchSignalFull(OAIHttpRequestWorker *worker, OAICredas_Api_Models_Registrations_PagedRegistrationSummary summary);
    void getRegistrationSettingsSignalFull(OAIHttpRequestWorker *worker);
    void getRegistrationSummariesByReferenceIdSignalFull(OAIHttpRequestWorker *worker, QList<OAICredas_Api_Models_Registrations_RegistrationSummary> summary);
    void getRegistrationSummarySignalFull(OAIHttpRequestWorker *worker, OAICredas_Api_Models_Registrations_RegistrationSummary summary);
    void getRegistrationSummaryByRegCodeSignalFull(OAIHttpRequestWorker *worker, OAICredas_Api_Models_Registrations_RegistrationSummary summary);
    void getRegistrationSupportedIdDocumentsSignalFull(OAIHttpRequestWorker *worker, OAICredas_Api_Models_Registrations_SupportedIdDocument summary);
    void getShareCodePdfExportSignalFull(OAIHttpRequestWorker *worker, QByteArray summary);
    void overrideCheckStatusSignalFull(OAIHttpRequestWorker *worker);
    void resendInvitationSignalFull(OAIHttpRequestWorker *worker);
    void updateContactDetailsSignalFull(OAIHttpRequestWorker *worker);
    void updateRegistrationSettingsSignalFull(OAIHttpRequestWorker *worker);
    void updateRegistrationStatusSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addInstantRegistrationSignalError() instead")
    void addInstantRegistrationSignalE(OAICredas_Api_Models_Registrations_AddInstantRegistrationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addInstantRegistrationSignalError(OAICredas_Api_Models_Registrations_AddInstantRegistrationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addRegistrationSignalError() instead")
    void addRegistrationSignalE(OAICredas_Api_Models_Registrations_AddRegistrationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addRegistrationSignalError(OAICredas_Api_Models_Registrations_AddRegistrationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRegistrationsIdPdfExportSectionsGetSignalError() instead")
    void apiRegistrationsIdPdfExportSectionsGetSignalE(QByteArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRegistrationsIdPdfExportSectionsGetSignalError(QByteArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkSubmittedIdDocumentsSignalError() instead")
    void checkSubmittedIdDocumentsSignalE(OAICredas_Api_Models_Registrations_CheckSubmittedIdDocumentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkSubmittedIdDocumentsSignalError(OAICredas_Api_Models_Registrations_CheckSubmittedIdDocumentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegistrationPdfExportSignalError() instead")
    void getRegistrationPdfExportSignalE(QByteArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegistrationPdfExportSignalError(QByteArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegistrationSearchSignalError() instead")
    void getRegistrationSearchSignalE(OAICredas_Api_Models_Registrations_PagedRegistrationSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegistrationSearchSignalError(OAICredas_Api_Models_Registrations_PagedRegistrationSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegistrationSettingsSignalError() instead")
    void getRegistrationSettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRegistrationSettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegistrationSummariesByReferenceIdSignalError() instead")
    void getRegistrationSummariesByReferenceIdSignalE(QList<OAICredas_Api_Models_Registrations_RegistrationSummary> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegistrationSummariesByReferenceIdSignalError(QList<OAICredas_Api_Models_Registrations_RegistrationSummary> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegistrationSummarySignalError() instead")
    void getRegistrationSummarySignalE(OAICredas_Api_Models_Registrations_RegistrationSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegistrationSummarySignalError(OAICredas_Api_Models_Registrations_RegistrationSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegistrationSummaryByRegCodeSignalError() instead")
    void getRegistrationSummaryByRegCodeSignalE(OAICredas_Api_Models_Registrations_RegistrationSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegistrationSummaryByRegCodeSignalError(OAICredas_Api_Models_Registrations_RegistrationSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegistrationSupportedIdDocumentsSignalError() instead")
    void getRegistrationSupportedIdDocumentsSignalE(OAICredas_Api_Models_Registrations_SupportedIdDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegistrationSupportedIdDocumentsSignalError(OAICredas_Api_Models_Registrations_SupportedIdDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getShareCodePdfExportSignalError() instead")
    void getShareCodePdfExportSignalE(QByteArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getShareCodePdfExportSignalError(QByteArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use overrideCheckStatusSignalError() instead")
    void overrideCheckStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void overrideCheckStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resendInvitationSignalError() instead")
    void resendInvitationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resendInvitationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateContactDetailsSignalError() instead")
    void updateContactDetailsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateContactDetailsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRegistrationSettingsSignalError() instead")
    void updateRegistrationSettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateRegistrationSettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRegistrationStatusSignalError() instead")
    void updateRegistrationStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateRegistrationStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addInstantRegistrationSignalErrorFull() instead")
    void addInstantRegistrationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addInstantRegistrationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addRegistrationSignalErrorFull() instead")
    void addRegistrationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addRegistrationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRegistrationsIdPdfExportSectionsGetSignalErrorFull() instead")
    void apiRegistrationsIdPdfExportSectionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRegistrationsIdPdfExportSectionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkSubmittedIdDocumentsSignalErrorFull() instead")
    void checkSubmittedIdDocumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkSubmittedIdDocumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegistrationPdfExportSignalErrorFull() instead")
    void getRegistrationPdfExportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegistrationPdfExportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegistrationSearchSignalErrorFull() instead")
    void getRegistrationSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegistrationSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegistrationSettingsSignalErrorFull() instead")
    void getRegistrationSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegistrationSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegistrationSummariesByReferenceIdSignalErrorFull() instead")
    void getRegistrationSummariesByReferenceIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegistrationSummariesByReferenceIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegistrationSummarySignalErrorFull() instead")
    void getRegistrationSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegistrationSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegistrationSummaryByRegCodeSignalErrorFull() instead")
    void getRegistrationSummaryByRegCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegistrationSummaryByRegCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegistrationSupportedIdDocumentsSignalErrorFull() instead")
    void getRegistrationSupportedIdDocumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegistrationSupportedIdDocumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getShareCodePdfExportSignalErrorFull() instead")
    void getShareCodePdfExportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getShareCodePdfExportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use overrideCheckStatusSignalErrorFull() instead")
    void overrideCheckStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void overrideCheckStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resendInvitationSignalErrorFull() instead")
    void resendInvitationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resendInvitationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateContactDetailsSignalErrorFull() instead")
    void updateContactDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateContactDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRegistrationSettingsSignalErrorFull() instead")
    void updateRegistrationSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRegistrationSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRegistrationStatusSignalErrorFull() instead")
    void updateRegistrationStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRegistrationStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
