/**
 * Credas API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICredas_Api_Models_StatusChecks_StatusCheck.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICredas_Api_Models_StatusChecks_StatusCheck::OAICredas_Api_Models_StatusChecks_StatusCheck(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICredas_Api_Models_StatusChecks_StatusCheck::OAICredas_Api_Models_StatusChecks_StatusCheck() {
    this->initializeModel();
}

OAICredas_Api_Models_StatusChecks_StatusCheck::~OAICredas_Api_Models_StatusChecks_StatusCheck() {}

void OAICredas_Api_Models_StatusChecks_StatusCheck::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_ccj_isSet = false;
    m_ccj_isValid = false;

    m_check_date_isSet = false;
    m_check_date_isValid = false;

    m_company_director_isSet = false;
    m_company_director_isValid = false;

    m_has_been_overridden_isSet = false;
    m_has_been_overridden_isValid = false;

    m_insolvency_isSet = false;
    m_insolvency_isValid = false;

    m_person_isSet = false;
    m_person_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICredas_Api_Models_StatusChecks_StatusCheck::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICredas_Api_Models_StatusChecks_StatusCheck::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_ccj_isValid = ::OpenAPI::fromJsonValue(m_ccj, json[QString("ccj")]);
    m_ccj_isSet = !json[QString("ccj")].isNull() && m_ccj_isValid;

    m_check_date_isValid = ::OpenAPI::fromJsonValue(m_check_date, json[QString("checkDate")]);
    m_check_date_isSet = !json[QString("checkDate")].isNull() && m_check_date_isValid;

    m_company_director_isValid = ::OpenAPI::fromJsonValue(m_company_director, json[QString("companyDirector")]);
    m_company_director_isSet = !json[QString("companyDirector")].isNull() && m_company_director_isValid;

    m_has_been_overridden_isValid = ::OpenAPI::fromJsonValue(m_has_been_overridden, json[QString("hasBeenOverridden")]);
    m_has_been_overridden_isSet = !json[QString("hasBeenOverridden")].isNull() && m_has_been_overridden_isValid;

    m_insolvency_isValid = ::OpenAPI::fromJsonValue(m_insolvency, json[QString("insolvency")]);
    m_insolvency_isSet = !json[QString("insolvency")].isNull() && m_insolvency_isValid;

    m_person_isValid = ::OpenAPI::fromJsonValue(m_person, json[QString("person")]);
    m_person_isSet = !json[QString("person")].isNull() && m_person_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAICredas_Api_Models_StatusChecks_StatusCheck::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICredas_Api_Models_StatusChecks_StatusCheck::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_ccj.size() > 0) {
        obj.insert(QString("ccj"), ::OpenAPI::toJsonValue(m_ccj));
    }
    if (m_check_date_isSet) {
        obj.insert(QString("checkDate"), ::OpenAPI::toJsonValue(m_check_date));
    }
    if (m_company_director.size() > 0) {
        obj.insert(QString("companyDirector"), ::OpenAPI::toJsonValue(m_company_director));
    }
    if (m_has_been_overridden_isSet) {
        obj.insert(QString("hasBeenOverridden"), ::OpenAPI::toJsonValue(m_has_been_overridden));
    }
    if (m_insolvency.size() > 0) {
        obj.insert(QString("insolvency"), ::OpenAPI::toJsonValue(m_insolvency));
    }
    if (m_person.isSet()) {
        obj.insert(QString("person"), ::OpenAPI::toJsonValue(m_person));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAICredas_Api_Models_DataCheck_Address OAICredas_Api_Models_StatusChecks_StatusCheck::getAddress() const {
    return m_address;
}
void OAICredas_Api_Models_StatusChecks_StatusCheck::setAddress(const OAICredas_Api_Models_DataCheck_Address &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAICredas_Api_Models_StatusChecks_StatusCheck::is_address_Set() const{
    return m_address_isSet;
}

bool OAICredas_Api_Models_StatusChecks_StatusCheck::is_address_Valid() const{
    return m_address_isValid;
}

QList<OAICredas_Api_Models_StatusChecks_CCJ_CcjResult> OAICredas_Api_Models_StatusChecks_StatusCheck::getCcj() const {
    return m_ccj;
}
void OAICredas_Api_Models_StatusChecks_StatusCheck::setCcj(const QList<OAICredas_Api_Models_StatusChecks_CCJ_CcjResult> &ccj) {
    m_ccj = ccj;
    m_ccj_isSet = true;
}

bool OAICredas_Api_Models_StatusChecks_StatusCheck::is_ccj_Set() const{
    return m_ccj_isSet;
}

bool OAICredas_Api_Models_StatusChecks_StatusCheck::is_ccj_Valid() const{
    return m_ccj_isValid;
}

QDateTime OAICredas_Api_Models_StatusChecks_StatusCheck::getCheckDate() const {
    return m_check_date;
}
void OAICredas_Api_Models_StatusChecks_StatusCheck::setCheckDate(const QDateTime &check_date) {
    m_check_date = check_date;
    m_check_date_isSet = true;
}

bool OAICredas_Api_Models_StatusChecks_StatusCheck::is_check_date_Set() const{
    return m_check_date_isSet;
}

bool OAICredas_Api_Models_StatusChecks_StatusCheck::is_check_date_Valid() const{
    return m_check_date_isValid;
}

QList<OAICredas_Api_Models_StatusChecks_CompanyDirector_CompanyDirectorResult> OAICredas_Api_Models_StatusChecks_StatusCheck::getCompanyDirector() const {
    return m_company_director;
}
void OAICredas_Api_Models_StatusChecks_StatusCheck::setCompanyDirector(const QList<OAICredas_Api_Models_StatusChecks_CompanyDirector_CompanyDirectorResult> &company_director) {
    m_company_director = company_director;
    m_company_director_isSet = true;
}

bool OAICredas_Api_Models_StatusChecks_StatusCheck::is_company_director_Set() const{
    return m_company_director_isSet;
}

bool OAICredas_Api_Models_StatusChecks_StatusCheck::is_company_director_Valid() const{
    return m_company_director_isValid;
}

bool OAICredas_Api_Models_StatusChecks_StatusCheck::isHasBeenOverridden() const {
    return m_has_been_overridden;
}
void OAICredas_Api_Models_StatusChecks_StatusCheck::setHasBeenOverridden(const bool &has_been_overridden) {
    m_has_been_overridden = has_been_overridden;
    m_has_been_overridden_isSet = true;
}

bool OAICredas_Api_Models_StatusChecks_StatusCheck::is_has_been_overridden_Set() const{
    return m_has_been_overridden_isSet;
}

bool OAICredas_Api_Models_StatusChecks_StatusCheck::is_has_been_overridden_Valid() const{
    return m_has_been_overridden_isValid;
}

QList<OAICredas_Api_Models_StatusChecks_Insolvency_InsolvencyResult> OAICredas_Api_Models_StatusChecks_StatusCheck::getInsolvency() const {
    return m_insolvency;
}
void OAICredas_Api_Models_StatusChecks_StatusCheck::setInsolvency(const QList<OAICredas_Api_Models_StatusChecks_Insolvency_InsolvencyResult> &insolvency) {
    m_insolvency = insolvency;
    m_insolvency_isSet = true;
}

bool OAICredas_Api_Models_StatusChecks_StatusCheck::is_insolvency_Set() const{
    return m_insolvency_isSet;
}

bool OAICredas_Api_Models_StatusChecks_StatusCheck::is_insolvency_Valid() const{
    return m_insolvency_isValid;
}

OAICredas_Api_Models_DataCheck_Person OAICredas_Api_Models_StatusChecks_StatusCheck::getPerson() const {
    return m_person;
}
void OAICredas_Api_Models_StatusChecks_StatusCheck::setPerson(const OAICredas_Api_Models_DataCheck_Person &person) {
    m_person = person;
    m_person_isSet = true;
}

bool OAICredas_Api_Models_StatusChecks_StatusCheck::is_person_Set() const{
    return m_person_isSet;
}

bool OAICredas_Api_Models_StatusChecks_StatusCheck::is_person_Valid() const{
    return m_person_isValid;
}

qint32 OAICredas_Api_Models_StatusChecks_StatusCheck::getStatus() const {
    return m_status;
}
void OAICredas_Api_Models_StatusChecks_StatusCheck::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICredas_Api_Models_StatusChecks_StatusCheck::is_status_Set() const{
    return m_status_isSet;
}

bool OAICredas_Api_Models_StatusChecks_StatusCheck::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICredas_Api_Models_StatusChecks_StatusCheck::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ccj.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_director.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_been_overridden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insolvency.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICredas_Api_Models_StatusChecks_StatusCheck::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
